
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012064  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  080121f0  080121f0  000221f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c9c  08012c9c  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08012c9c  08012c9c  00022c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ca4  08012ca4  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ca4  08012ca4  00022ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ca8  08012ca8  00022ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08012cac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bf0  20000210  08012ebc  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002e00  08012ebc  00032e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004170e  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006555  00000000  00000000  00071947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00077ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00079730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a26f  00000000  00000000  0007ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025106  00000000  00000000  00084fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1b99  00000000  00000000  000aa0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bc56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a38  00000000  00000000  0017bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080121d4 	.word	0x080121d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	080121d4 	.word	0x080121d4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_uldivmod>:
 80010f0:	b953      	cbnz	r3, 8001108 <__aeabi_uldivmod+0x18>
 80010f2:	b94a      	cbnz	r2, 8001108 <__aeabi_uldivmod+0x18>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	bf08      	it	eq
 80010f8:	2800      	cmpeq	r0, #0
 80010fa:	bf1c      	itt	ne
 80010fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001100:	f04f 30ff 	movne.w	r0, #4294967295
 8001104:	f000 b9a6 	b.w	8001454 <__aeabi_idiv0>
 8001108:	f1ad 0c08 	sub.w	ip, sp, #8
 800110c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001110:	f000 f83e 	bl	8001190 <__udivmoddi4>
 8001114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <__aeabi_d2lz>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	460c      	mov	r4, r1
 8001124:	4605      	mov	r5, r0
 8001126:	4621      	mov	r1, r4
 8001128:	4628      	mov	r0, r5
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	f7ff fc8b 	bl	8000a48 <__aeabi_dcmplt>
 8001132:	b928      	cbnz	r0, 8001140 <__aeabi_d2lz+0x20>
 8001134:	4628      	mov	r0, r5
 8001136:	4621      	mov	r1, r4
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800113c:	f000 b80a 	b.w	8001154 <__aeabi_d2ulz>
 8001140:	4628      	mov	r0, r5
 8001142:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001146:	f000 f805 	bl	8001154 <__aeabi_d2ulz>
 800114a:	4240      	negs	r0, r0
 800114c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_d2ulz>:
 8001154:	b5d0      	push	{r4, r6, r7, lr}
 8001156:	2200      	movs	r2, #0
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <__aeabi_d2ulz+0x34>)
 800115a:	4606      	mov	r6, r0
 800115c:	460f      	mov	r7, r1
 800115e:	f7ff fa01 	bl	8000564 <__aeabi_dmul>
 8001162:	f7ff fcd7 	bl	8000b14 <__aeabi_d2uiz>
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff f982 	bl	8000470 <__aeabi_ui2d>
 800116c:	2200      	movs	r2, #0
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <__aeabi_d2ulz+0x38>)
 8001170:	f7ff f9f8 	bl	8000564 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4630      	mov	r0, r6
 800117a:	4639      	mov	r1, r7
 800117c:	f7ff f83a 	bl	80001f4 <__aeabi_dsub>
 8001180:	f7ff fcc8 	bl	8000b14 <__aeabi_d2uiz>
 8001184:	4621      	mov	r1, r4
 8001186:	bdd0      	pop	{r4, r6, r7, pc}
 8001188:	3df00000 	.word	0x3df00000
 800118c:	41f00000 	.word	0x41f00000

08001190 <__udivmoddi4>:
 8001190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001194:	9e08      	ldr	r6, [sp, #32]
 8001196:	460d      	mov	r5, r1
 8001198:	4604      	mov	r4, r0
 800119a:	468e      	mov	lr, r1
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 8083 	bne.w	80012a8 <__udivmoddi4+0x118>
 80011a2:	428a      	cmp	r2, r1
 80011a4:	4617      	mov	r7, r2
 80011a6:	d947      	bls.n	8001238 <__udivmoddi4+0xa8>
 80011a8:	fab2 f382 	clz	r3, r2
 80011ac:	b14b      	cbz	r3, 80011c2 <__udivmoddi4+0x32>
 80011ae:	f1c3 0120 	rsb	r1, r3, #32
 80011b2:	fa05 fe03 	lsl.w	lr, r5, r3
 80011b6:	fa20 f101 	lsr.w	r1, r0, r1
 80011ba:	409f      	lsls	r7, r3
 80011bc:	ea41 0e0e 	orr.w	lr, r1, lr
 80011c0:	409c      	lsls	r4, r3
 80011c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011c6:	fbbe fcf8 	udiv	ip, lr, r8
 80011ca:	fa1f f987 	uxth.w	r9, r7
 80011ce:	fb08 e21c 	mls	r2, r8, ip, lr
 80011d2:	fb0c f009 	mul.w	r0, ip, r9
 80011d6:	0c21      	lsrs	r1, r4, #16
 80011d8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011dc:	4290      	cmp	r0, r2
 80011de:	d90a      	bls.n	80011f6 <__udivmoddi4+0x66>
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011e6:	f080 8118 	bcs.w	800141a <__udivmoddi4+0x28a>
 80011ea:	4290      	cmp	r0, r2
 80011ec:	f240 8115 	bls.w	800141a <__udivmoddi4+0x28a>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	443a      	add	r2, r7
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011fc:	fb08 2210 	mls	r2, r8, r0, r2
 8001200:	fb00 f109 	mul.w	r1, r0, r9
 8001204:	b2a4      	uxth	r4, r4
 8001206:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800120a:	42a1      	cmp	r1, r4
 800120c:	d909      	bls.n	8001222 <__udivmoddi4+0x92>
 800120e:	193c      	adds	r4, r7, r4
 8001210:	f100 32ff 	add.w	r2, r0, #4294967295
 8001214:	f080 8103 	bcs.w	800141e <__udivmoddi4+0x28e>
 8001218:	42a1      	cmp	r1, r4
 800121a:	f240 8100 	bls.w	800141e <__udivmoddi4+0x28e>
 800121e:	3802      	subs	r0, #2
 8001220:	443c      	add	r4, r7
 8001222:	1a64      	subs	r4, r4, r1
 8001224:	2100      	movs	r1, #0
 8001226:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800122a:	b11e      	cbz	r6, 8001234 <__udivmoddi4+0xa4>
 800122c:	2200      	movs	r2, #0
 800122e:	40dc      	lsrs	r4, r3
 8001230:	e9c6 4200 	strd	r4, r2, [r6]
 8001234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001238:	b902      	cbnz	r2, 800123c <__udivmoddi4+0xac>
 800123a:	deff      	udf	#255	; 0xff
 800123c:	fab2 f382 	clz	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14f      	bne.n	80012e4 <__udivmoddi4+0x154>
 8001244:	1a8d      	subs	r5, r1, r2
 8001246:	2101      	movs	r1, #1
 8001248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800124c:	fa1f f882 	uxth.w	r8, r2
 8001250:	fbb5 fcfe 	udiv	ip, r5, lr
 8001254:	fb0e 551c 	mls	r5, lr, ip, r5
 8001258:	fb08 f00c 	mul.w	r0, r8, ip
 800125c:	0c22      	lsrs	r2, r4, #16
 800125e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001262:	42a8      	cmp	r0, r5
 8001264:	d907      	bls.n	8001276 <__udivmoddi4+0xe6>
 8001266:	197d      	adds	r5, r7, r5
 8001268:	f10c 32ff 	add.w	r2, ip, #4294967295
 800126c:	d202      	bcs.n	8001274 <__udivmoddi4+0xe4>
 800126e:	42a8      	cmp	r0, r5
 8001270:	f200 80e9 	bhi.w	8001446 <__udivmoddi4+0x2b6>
 8001274:	4694      	mov	ip, r2
 8001276:	1a2d      	subs	r5, r5, r0
 8001278:	fbb5 f0fe 	udiv	r0, r5, lr
 800127c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001280:	fb08 f800 	mul.w	r8, r8, r0
 8001284:	b2a4      	uxth	r4, r4
 8001286:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800128a:	45a0      	cmp	r8, r4
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x10e>
 800128e:	193c      	adds	r4, r7, r4
 8001290:	f100 32ff 	add.w	r2, r0, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0x10c>
 8001296:	45a0      	cmp	r8, r4
 8001298:	f200 80d9 	bhi.w	800144e <__udivmoddi4+0x2be>
 800129c:	4610      	mov	r0, r2
 800129e:	eba4 0408 	sub.w	r4, r4, r8
 80012a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012a6:	e7c0      	b.n	800122a <__udivmoddi4+0x9a>
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d908      	bls.n	80012be <__udivmoddi4+0x12e>
 80012ac:	2e00      	cmp	r6, #0
 80012ae:	f000 80b1 	beq.w	8001414 <__udivmoddi4+0x284>
 80012b2:	2100      	movs	r1, #0
 80012b4:	e9c6 0500 	strd	r0, r5, [r6]
 80012b8:	4608      	mov	r0, r1
 80012ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012be:	fab3 f183 	clz	r1, r3
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d14b      	bne.n	800135e <__udivmoddi4+0x1ce>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d302      	bcc.n	80012d0 <__udivmoddi4+0x140>
 80012ca:	4282      	cmp	r2, r0
 80012cc:	f200 80b9 	bhi.w	8001442 <__udivmoddi4+0x2b2>
 80012d0:	1a84      	subs	r4, r0, r2
 80012d2:	eb65 0303 	sbc.w	r3, r5, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	469e      	mov	lr, r3
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d0aa      	beq.n	8001234 <__udivmoddi4+0xa4>
 80012de:	e9c6 4e00 	strd	r4, lr, [r6]
 80012e2:	e7a7      	b.n	8001234 <__udivmoddi4+0xa4>
 80012e4:	409f      	lsls	r7, r3
 80012e6:	f1c3 0220 	rsb	r2, r3, #32
 80012ea:	40d1      	lsrs	r1, r2
 80012ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012f4:	fa1f f887 	uxth.w	r8, r7
 80012f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012fc:	fa24 f202 	lsr.w	r2, r4, r2
 8001300:	409d      	lsls	r5, r3
 8001302:	fb00 fc08 	mul.w	ip, r0, r8
 8001306:	432a      	orrs	r2, r5
 8001308:	0c15      	lsrs	r5, r2, #16
 800130a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800130e:	45ac      	cmp	ip, r5
 8001310:	fa04 f403 	lsl.w	r4, r4, r3
 8001314:	d909      	bls.n	800132a <__udivmoddi4+0x19a>
 8001316:	197d      	adds	r5, r7, r5
 8001318:	f100 31ff 	add.w	r1, r0, #4294967295
 800131c:	f080 808f 	bcs.w	800143e <__udivmoddi4+0x2ae>
 8001320:	45ac      	cmp	ip, r5
 8001322:	f240 808c 	bls.w	800143e <__udivmoddi4+0x2ae>
 8001326:	3802      	subs	r0, #2
 8001328:	443d      	add	r5, r7
 800132a:	eba5 050c 	sub.w	r5, r5, ip
 800132e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001332:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001336:	fb01 f908 	mul.w	r9, r1, r8
 800133a:	b295      	uxth	r5, r2
 800133c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001340:	45a9      	cmp	r9, r5
 8001342:	d907      	bls.n	8001354 <__udivmoddi4+0x1c4>
 8001344:	197d      	adds	r5, r7, r5
 8001346:	f101 32ff 	add.w	r2, r1, #4294967295
 800134a:	d274      	bcs.n	8001436 <__udivmoddi4+0x2a6>
 800134c:	45a9      	cmp	r9, r5
 800134e:	d972      	bls.n	8001436 <__udivmoddi4+0x2a6>
 8001350:	3902      	subs	r1, #2
 8001352:	443d      	add	r5, r7
 8001354:	eba5 0509 	sub.w	r5, r5, r9
 8001358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800135c:	e778      	b.n	8001250 <__udivmoddi4+0xc0>
 800135e:	f1c1 0720 	rsb	r7, r1, #32
 8001362:	408b      	lsls	r3, r1
 8001364:	fa22 fc07 	lsr.w	ip, r2, r7
 8001368:	ea4c 0c03 	orr.w	ip, ip, r3
 800136c:	fa25 f407 	lsr.w	r4, r5, r7
 8001370:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001374:	fbb4 f9fe 	udiv	r9, r4, lr
 8001378:	fa1f f88c 	uxth.w	r8, ip
 800137c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001380:	fa20 f307 	lsr.w	r3, r0, r7
 8001384:	fb09 fa08 	mul.w	sl, r9, r8
 8001388:	408d      	lsls	r5, r1
 800138a:	431d      	orrs	r5, r3
 800138c:	0c2b      	lsrs	r3, r5, #16
 800138e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001392:	45a2      	cmp	sl, r4
 8001394:	fa02 f201 	lsl.w	r2, r2, r1
 8001398:	fa00 f301 	lsl.w	r3, r0, r1
 800139c:	d909      	bls.n	80013b2 <__udivmoddi4+0x222>
 800139e:	eb1c 0404 	adds.w	r4, ip, r4
 80013a2:	f109 30ff 	add.w	r0, r9, #4294967295
 80013a6:	d248      	bcs.n	800143a <__udivmoddi4+0x2aa>
 80013a8:	45a2      	cmp	sl, r4
 80013aa:	d946      	bls.n	800143a <__udivmoddi4+0x2aa>
 80013ac:	f1a9 0902 	sub.w	r9, r9, #2
 80013b0:	4464      	add	r4, ip
 80013b2:	eba4 040a 	sub.w	r4, r4, sl
 80013b6:	fbb4 f0fe 	udiv	r0, r4, lr
 80013ba:	fb0e 4410 	mls	r4, lr, r0, r4
 80013be:	fb00 fa08 	mul.w	sl, r0, r8
 80013c2:	b2ad      	uxth	r5, r5
 80013c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013c8:	45a2      	cmp	sl, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x24e>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80013d4:	d22d      	bcs.n	8001432 <__udivmoddi4+0x2a2>
 80013d6:	45a2      	cmp	sl, r4
 80013d8:	d92b      	bls.n	8001432 <__udivmoddi4+0x2a2>
 80013da:	3802      	subs	r0, #2
 80013dc:	4464      	add	r4, ip
 80013de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013e2:	fba0 8902 	umull	r8, r9, r0, r2
 80013e6:	eba4 040a 	sub.w	r4, r4, sl
 80013ea:	454c      	cmp	r4, r9
 80013ec:	46c6      	mov	lr, r8
 80013ee:	464d      	mov	r5, r9
 80013f0:	d319      	bcc.n	8001426 <__udivmoddi4+0x296>
 80013f2:	d016      	beq.n	8001422 <__udivmoddi4+0x292>
 80013f4:	b15e      	cbz	r6, 800140e <__udivmoddi4+0x27e>
 80013f6:	ebb3 020e 	subs.w	r2, r3, lr
 80013fa:	eb64 0405 	sbc.w	r4, r4, r5
 80013fe:	fa04 f707 	lsl.w	r7, r4, r7
 8001402:	fa22 f301 	lsr.w	r3, r2, r1
 8001406:	431f      	orrs	r7, r3
 8001408:	40cc      	lsrs	r4, r1
 800140a:	e9c6 7400 	strd	r7, r4, [r6]
 800140e:	2100      	movs	r1, #0
 8001410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001414:	4631      	mov	r1, r6
 8001416:	4630      	mov	r0, r6
 8001418:	e70c      	b.n	8001234 <__udivmoddi4+0xa4>
 800141a:	468c      	mov	ip, r1
 800141c:	e6eb      	b.n	80011f6 <__udivmoddi4+0x66>
 800141e:	4610      	mov	r0, r2
 8001420:	e6ff      	b.n	8001222 <__udivmoddi4+0x92>
 8001422:	4543      	cmp	r3, r8
 8001424:	d2e6      	bcs.n	80013f4 <__udivmoddi4+0x264>
 8001426:	ebb8 0e02 	subs.w	lr, r8, r2
 800142a:	eb69 050c 	sbc.w	r5, r9, ip
 800142e:	3801      	subs	r0, #1
 8001430:	e7e0      	b.n	80013f4 <__udivmoddi4+0x264>
 8001432:	4628      	mov	r0, r5
 8001434:	e7d3      	b.n	80013de <__udivmoddi4+0x24e>
 8001436:	4611      	mov	r1, r2
 8001438:	e78c      	b.n	8001354 <__udivmoddi4+0x1c4>
 800143a:	4681      	mov	r9, r0
 800143c:	e7b9      	b.n	80013b2 <__udivmoddi4+0x222>
 800143e:	4608      	mov	r0, r1
 8001440:	e773      	b.n	800132a <__udivmoddi4+0x19a>
 8001442:	4608      	mov	r0, r1
 8001444:	e749      	b.n	80012da <__udivmoddi4+0x14a>
 8001446:	f1ac 0c02 	sub.w	ip, ip, #2
 800144a:	443d      	add	r5, r7
 800144c:	e713      	b.n	8001276 <__udivmoddi4+0xe6>
 800144e:	3802      	subs	r0, #2
 8001450:	443c      	add	r4, r7
 8001452:	e724      	b.n	800129e <__udivmoddi4+0x10e>

08001454 <__aeabi_idiv0>:
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <Mount_USB>:




void Mount_USB (void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	4905      	ldr	r1, [pc, #20]	; (8001474 <Mount_USB+0x1c>)
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <Mount_USB+0x20>)
 8001462:	f00b faf5 	bl	800ca50 <f_mount>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <Mount_USB+0x24>)
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200006b8 	.word	0x200006b8
 8001478:	200016e8 	.word	0x200016e8
 800147c:	200004a8 	.word	0x200004a8

08001480 <Unmount_USB>:
void Unmount_USB (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	4905      	ldr	r1, [pc, #20]	; (800149c <Unmount_USB+0x1c>)
 8001488:	2000      	movs	r0, #0
 800148a:	f00b fae1 	bl	800ca50 <f_mount>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <Unmount_USB+0x20>)
 8001494:	701a      	strb	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200006b8 	.word	0x200006b8
 80014a0:	200004a8 	.word	0x200004a8

080014a4 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	3b14      	subs	r3, #20
 80014b4:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 80014b6:	2014      	movs	r0, #20
 80014b8:	f00c fa74 	bl	800d9a4 <malloc>
 80014bc:	4603      	mov	r3, r0
 80014be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80014c2:	f102 0214 	add.w	r2, r2, #20
 80014c6:	6013      	str	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	3b10      	subs	r3, #16
 80014ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80014d2:	f102 0214 	add.w	r2, r2, #20
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f00b fb03 	bl	800cae4 <f_opendir>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <Scan_USB+0x108>)
 80014e4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <Scan_USB+0x108>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d14e      	bne.n	800158c <Scan_USB+0xe8>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	3b10      	subs	r3, #16
 80014f4:	492e      	ldr	r1, [pc, #184]	; (80015b0 <Scan_USB+0x10c>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00b fbc0 	bl	800cc7c <f_readdir>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <Scan_USB+0x108>)
 8001502:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <Scan_USB+0x108>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d139      	bne.n	8001580 <Scan_USB+0xdc>
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <Scan_USB+0x10c>)
 800150e:	7a5b      	ldrb	r3, [r3, #9]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d035      	beq.n	8001580 <Scan_USB+0xdc>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <Scan_USB+0x10c>)
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0e6      	beq.n	80014ee <Scan_USB+0x4a>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001520:	4924      	ldr	r1, [pc, #144]	; (80015b4 <Scan_USB+0x110>)
 8001522:	4825      	ldr	r0, [pc, #148]	; (80015b8 <Scan_USB+0x114>)
 8001524:	f7fe fe50 	bl	80001c8 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d023      	beq.n	8001576 <Scan_USB+0xd2>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800152e:	4921      	ldr	r1, [pc, #132]	; (80015b4 <Scan_USB+0x110>)
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <Scan_USB+0x118>)
 8001532:	f7fe fe49 	bl	80001c8 <strcmp>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01e      	beq.n	800157a <Scan_USB+0xd6>
                fresult = Scan_USB(path);                     /* Enter the directory */
 800153c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001540:	f103 0314 	add.w	r3, r3, #20
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	f7ff ffad 	bl	80014a4 <Scan_USB>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <Scan_USB+0x108>)
 8001550:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <Scan_USB+0x108>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d111      	bne.n	800157e <Scan_USB+0xda>
                path[i] = 0;
 800155a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800155e:	f103 0314 	add.w	r3, r3, #20
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001568:	f103 0310 	add.w	r3, r3, #16
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e7bb      	b.n	80014ee <Scan_USB+0x4a>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001576:	bf00      	nop
 8001578:	e7b9      	b.n	80014ee <Scan_USB+0x4a>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800157a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800157c:	e7b7      	b.n	80014ee <Scan_USB+0x4a>
                if (fresult != FR_OK) break;
 800157e:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	3b10      	subs	r3, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f00b fb4e 	bl	800cc28 <f_closedir>
    }
    free(path);
 800158c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001590:	f103 0314 	add.w	r3, r3, #20
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f00c fa0d 	bl	800d9b4 <free>
    return fresult;
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <Scan_USB+0x108>)
 800159c:	781b      	ldrb	r3, [r3, #0]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200004a8 	.word	0x200004a8
 80015b0:	200004ac 	.word	0x200004ac
 80015b4:	200004b5 	.word	0x200004b5
 80015b8:	080121f0 	.word	0x080121f0
 80015bc:	080121fc 	.word	0x080121fc

080015c0 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80015c4:	4a21      	ldr	r2, [pc, #132]	; (800164c <Check_USB_Details+0x8c>)
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_USB_Details+0x90>)
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <Check_USB_Details+0x94>)
 80015ca:	f00b fbab 	bl	800cd24 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <Check_USB_Details+0x8c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d6:	3314      	adds	r3, #20
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1e9a      	subs	r2, r3, #2
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <Check_USB_Details+0x8c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	3302      	adds	r3, #2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	fb03 f302 	mul.w	r3, r3, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff3f 	bl	8000470 <__aeabi_ui2d>
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <Check_USB_Details+0x98>)
 80015f8:	f7fe ffb4 	bl	8000564 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fa86 	bl	8000b14 <__aeabi_d2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <Check_USB_Details+0x9c>)
 800160c:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <Check_USB_Details+0x8c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	3302      	adds	r3, #2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <Check_USB_Details+0x90>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fb03 f302 	mul.w	r3, r3, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff23 	bl	8000470 <__aeabi_ui2d>
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <Check_USB_Details+0x98>)
 8001630:	f7fe ff98 	bl	8000564 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa6a 	bl	8000b14 <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <Check_USB_Details+0xa0>)
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000049c 	.word	0x2000049c
 8001650:	20000494 	.word	0x20000494
 8001654:	08012220 	.word	0x08012220
 8001658:	3fe00000 	.word	0x3fe00000
 800165c:	200004cc 	.word	0x200004cc
 8001660:	200004a0 	.word	0x200004a0

08001664 <setTimeDate>:
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
}

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4603      	mov	r3, r0
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	717b      	strb	r3, [r7, #5]
 800167e:	4613      	mov	r3, r2
 8001680:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <setTimeDate+0x84>)
 8001684:	793b      	ldrb	r3, [r7, #4]
 8001686:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <setTimeDate+0x84>)
 800168a:	7e3b      	ldrb	r3, [r7, #24]
 800168c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <setTimeDate+0x84>)
 8001690:	7f3b      	ldrb	r3, [r7, #28]
 8001692:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <setTimeDate+0x84>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <setTimeDate+0x84>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80016a0:	2201      	movs	r2, #1
 80016a2:	4911      	ldr	r1, [pc, #68]	; (80016e8 <setTimeDate+0x84>)
 80016a4:	4811      	ldr	r0, [pc, #68]	; (80016ec <setTimeDate+0x88>)
 80016a6:	f003 ffff 	bl	80056a8 <HAL_RTC_SetTime>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <setTimeDate+0x50>
 80016b0:	f000 fce2 	bl	8002078 <Error_Handler>

	sDate.WeekDay = 0x01;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <setTimeDate+0x8c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <setTimeDate+0x8c>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <setTimeDate+0x8c>)
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <setTimeDate+0x8c>)
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80016cc:	2201      	movs	r2, #1
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <setTimeDate+0x8c>)
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <setTimeDate+0x88>)
 80016d2:	f004 f89f 	bl	8005814 <HAL_RTC_SetDate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <setTimeDate+0x7c>
 80016dc:	f000 fccc 	bl	8002078 <Error_Handler>
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	20000244 	.word	0x20000244
 80016ec:	200005a8 	.word	0x200005a8
 80016f0:	20000250 	.word	0x20000250

080016f4 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 80016f4:	b598      	push	{r3, r4, r7, lr}
 80016f6:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 80016f8:	2100      	movs	r1, #0
 80016fa:	482f      	ldr	r0, [pc, #188]	; (80017b8 <fanOn+0xc4>)
 80016fc:	f004 fbdc 	bl	8005eb8 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <fanOn+0xc8>)
 8001702:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <fanOn+0xc8>)
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb27 	bl	8000d60 <__aeabi_ui2f>
 8001712:	4602      	mov	r2, r0
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <fanOn+0xcc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f7ff fc2c 	bl	8000f78 <__aeabi_fdiv>
 8001720:	4603      	mov	r3, r0
 8001722:	4c26      	ldr	r4, [pc, #152]	; (80017bc <fanOn+0xc8>)
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fcc3 	bl	80010b0 <__aeabi_f2uiz>
 800172a:	4603      	mov	r3, r0
 800172c:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <fanOn+0xc8>)
 8001730:	f245 0214 	movw	r2, #20500	; 0x5014
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8001736:	2108      	movs	r1, #8
 8001738:	481f      	ldr	r0, [pc, #124]	; (80017b8 <fanOn+0xc4>)
 800173a:	f004 fbbd 	bl	8005eb8 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <fanOn+0xc8>)
 8001740:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <fanOn+0xc8>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fb08 	bl	8000d60 <__aeabi_ui2f>
 8001750:	4602      	mov	r2, r0
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <fanOn+0xd0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7ff fc0d 	bl	8000f78 <__aeabi_fdiv>
 800175e:	4603      	mov	r3, r0
 8001760:	4c16      	ldr	r4, [pc, #88]	; (80017bc <fanOn+0xc8>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fca4 	bl	80010b0 <__aeabi_f2uiz>
 8001768:	4603      	mov	r3, r0
 800176a:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <fanOn+0xc8>)
 800176e:	f245 0214 	movw	r2, #20500	; 0x5014
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8001774:	2100      	movs	r1, #0
 8001776:	4814      	ldr	r0, [pc, #80]	; (80017c8 <fanOn+0xd4>)
 8001778:	f004 fb9e 	bl	8005eb8 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <fanOn+0xd8>)
 800177e:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <fanOn+0xd8>)
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fae9 	bl	8000d60 <__aeabi_ui2f>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <fanOn+0xdc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fbee 	bl	8000f78 <__aeabi_fdiv>
 800179c:	4603      	mov	r3, r0
 800179e:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <fanOn+0xd8>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fc85 	bl	80010b0 <__aeabi_f2uiz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <fanOn+0xd8>)
 80017ac:	f245 0214 	movw	r2, #20500	; 0x5014
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017b2:	bf00      	nop
 80017b4:	bd98      	pop	{r3, r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200005dc 	.word	0x200005dc
 80017bc:	40010000 	.word	0x40010000
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000560 	.word	0x20000560
 80017cc:	40014400 	.word	0x40014400
 80017d0:	20000004 	.word	0x20000004

080017d4 <systemControl>:

}

//int testRuns = 0;
void systemControl()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af02      	add	r7, sp, #8
	{
		testRuns = 0;
		pH_set_point = 6.9;
	}*/

	if(run_once == 1)// && write_times == 2)
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <systemControl+0x40>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d114      	bne.n	800180c <systemControl+0x38>
	{
		//doseWater(30,30,50);
		run_once = 0;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <systemControl+0x40>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
		fanOn();
 80017e8:	f7ff ff84 	bl	80016f4 <fanOn>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2309      	movs	r3, #9
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2319      	movs	r3, #25
 80017f6:	2222      	movs	r2, #34	; 0x22
 80017f8:	2108      	movs	r1, #8
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff ff32 	bl	8001664 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8001800:	230a      	movs	r3, #10
 8001802:	2213      	movs	r2, #19
 8001804:	2109      	movs	r1, #9
 8001806:	2013      	movs	r0, #19
 8001808:	f000 f806 	bl	8001818 <setLightCyle>
//	if((TDS<nutrient_max && what_to_save == 0) || (write_times%2 != 0 && what_to_save == 0))calibrateSys(); // if the TDS is above range or we still need to write a file




}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8001818:	b490      	push	{r4, r7}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4604      	mov	r4, r0
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	4603      	mov	r3, r0
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	460b      	mov	r3, r1
 8001830:	717b      	strb	r3, [r7, #5]
 8001832:	4613      	mov	r3, r2
 8001834:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <setLightCyle+0x40>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <setLightCyle+0x40>)
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <setLightCyle+0x44>)
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <setLightCyle+0x44>)
 800184a:	793b      	ldrb	r3, [r7, #4]
 800184c:	7053      	strb	r3, [r2, #1]
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bc90      	pop	{r4, r7}
 8001856:	4770      	bx	lr
 8001858:	2000022c 	.word	0x2000022c
 800185c:	20000238 	.word	0x20000238

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 fe88 	bl	8002578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f000 f819 	bl	800189e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186c:	f000 fb3e 	bl	8001eec <MX_GPIO_Init>
  MX_ADC2_Init();
 8001870:	f000 f876 	bl	8001960 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001874:	f000 f96c 	bl	8001b50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001878:	f000 fa16 	bl	8001ca8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800187c:	f000 fa60 	bl	8001d40 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001880:	f000 faac 	bl	8001ddc <MX_TIM10_Init>
  MX_RTC_Init();
 8001884:	f000 f8d2 	bl	8001a2c <MX_RTC_Init>
  MX_TIM12_Init();
 8001888:	f000 faf6 	bl	8001e78 <MX_TIM12_Init>
  MX_FATFS_Init();
 800188c:	f006 f8ca 	bl	8007a24 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001890:	f00b fd18 	bl	800d2c4 <MX_USB_HOST_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
  {

	  MX_USB_HOST_Process();
 8001894:	f00b fd3c 	bl	800d310 <MX_USB_HOST_Process>
	  systemControl();
 8001898:	f7ff ff9c 	bl	80017d4 <systemControl>
	  MX_USB_HOST_Process();
 800189c:	e7fa      	b.n	8001894 <main+0x34>

0800189e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b096      	sub	sp, #88	; 0x58
 80018a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a8:	2230      	movs	r2, #48	; 0x30
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00c f897 	bl	800d9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018d0:	230a      	movs	r3, #10
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d4:	2301      	movs	r3, #1
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d8:	2310      	movs	r3, #16
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018dc:	2301      	movs	r3, #1
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2302      	movs	r3, #2
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e8:	2308      	movs	r3, #8
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 80018ec:	23d8      	movs	r3, #216	; 0xd8
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80018f0:	2306      	movs	r3, #6
 80018f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80018f4:	2309      	movs	r3, #9
 80018f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f961 	bl	8004bc4 <HAL_RCC_OscConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001908:	f000 fbb6 	bl	8002078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800191c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2102      	movs	r1, #2
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fb9a 	bl	8005064 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001936:	f000 fb9f 	bl	8002078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800193a:	2304      	movs	r3, #4
 800193c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800193e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fd2e 	bl	80053a8 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001952:	f000 fb91 	bl	8002078 <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3758      	adds	r7, #88	; 0x58
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001974:	2201      	movs	r2, #1
 8001976:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_ADC2_Init+0xc0>)
 800197a:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <MX_ADC2_Init+0xc4>)
 800197c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <MX_ADC2_Init+0xc0>)
 800198c:	2201      	movs	r2, #1
 800198e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <MX_ADC2_Init+0xc8>)
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019b8:	2202      	movs	r2, #2
 80019ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019ca:	4815      	ldr	r0, [pc, #84]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019cc:	f000 fe66 	bl	800269c <HAL_ADC_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 80019d6:	f000 fb4f 	bl	8002078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019da:	2304      	movs	r3, #4
 80019dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_ADC2_Init+0xc0>)
 80019ec:	f000 fe9a 	bl	8002724 <HAL_ADC_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 80019f6:	f000 fb3f 	bl	8002078 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019fa:	2305      	movs	r3, #5
 80019fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_ADC2_Init+0xc0>)
 8001a08:	f000 fe8c 	bl	8002724 <HAL_ADC_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001a12:	f000 fb31 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000518 	.word	0x20000518
 8001a24:	40012100 	.word	0x40012100
 8001a28:	0f000001 	.word	0x0f000001

08001a2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <MX_RTC_Init+0x120>)
 8001a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a62:	227f      	movs	r2, #127	; 0x7f
 8001a64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a68:	22ff      	movs	r2, #255	; 0xff
 8001a6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a7e:	4832      	ldr	r0, [pc, #200]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001a80:	f003 fd88 	bl	8005594 <HAL_RTC_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a8a:	f000 faf5 	bl	8002078 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	2201      	movs	r2, #1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4825      	ldr	r0, [pc, #148]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001ab2:	f003 fdf9 	bl	80056a8 <HAL_RTC_SetTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001abc:	f000 fadc 	bl	8002078 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001ae2:	f003 fe97 	bl	8005814 <HAL_RTC_SetDate>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001aec:	f000 fac4 	bl	8002078 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001b1e:	f003 ff19 	bl	8005954 <HAL_RTC_SetAlarm>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001b28:	f000 faa6 	bl	8002078 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_RTC_Init+0x11c>)
 8001b32:	f004 f886 	bl	8005c42 <HAL_RTCEx_SetWakeUpTimer>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001b3c:	f000 fa9c 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200005a8 	.word	0x200005a8
 8001b4c:	40002800 	.word	0x40002800

08001b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b096      	sub	sp, #88	; 0x58
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2220      	movs	r2, #32
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00b ff29 	bl	800d9e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001b90:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <MX_TIM1_Init+0x154>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bae:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bba:	4839      	ldr	r0, [pc, #228]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001bbc:	f004 f8d5 	bl	8005d6a <HAL_TIM_Base_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bc6:	f000 fa57 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4832      	ldr	r0, [pc, #200]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001bd8:	f004 faf4 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001be2:	f000 fa49 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be6:	482e      	ldr	r0, [pc, #184]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001be8:	f004 f90e 	bl	8005e08 <HAL_TIM_PWM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bf2:	f000 fa41 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c02:	4619      	mov	r1, r3
 8001c04:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001c06:	f004 fea5 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c10:	f000 fa32 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c14:	2360      	movs	r3, #96	; 0x60
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c24:	2304      	movs	r3, #4
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001c3a:	f004 fa05 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c44:	f000 fa18 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001c52:	f004 f9f9 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c5c:	f000 fa0c 	bl	8002078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001c84:	f004 fee0 	bl	8006a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001c8e:	f000 f9f3 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c92:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <MX_TIM1_Init+0x150>)
 8001c94:	f000 faec 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8001c98:	bf00      	nop
 8001c9a:	3758      	adds	r7, #88	; 0x58
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200005dc 	.word	0x200005dc
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001cce:	2223      	movs	r2, #35	; 0x23
 8001cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001cda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cec:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001cee:	f004 f83c 	bl	8005d6a <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cf8:	f000 f9be 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001d0a:	f004 fa5b 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d14:	f000 f9b0 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_TIM2_Init+0x94>)
 8001d26:	f004 fe15 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d30:	f000 f9a2 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000624 	.word	0x20000624

08001d40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <MX_TIM4_Init+0x98>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d64:	2223      	movs	r2, #35	; 0x23
 8001d66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001d84:	f003 fff1 	bl	8005d6a <HAL_TIM_Base_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f000 f973 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001da0:	f004 fa10 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001daa:	f000 f965 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_TIM4_Init+0x94>)
 8001dbc:	f004 fdca 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001dc6:	f000 f957 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200004d0 	.word	0x200004d0
 8001dd8:	40000800 	.word	0x40000800

08001ddc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <MX_TIM10_Init+0x98>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e1a:	4815      	ldr	r0, [pc, #84]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e1c:	f003 ffa5 	bl	8005d6a <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001e26:	f000 f927 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001e2a:	4811      	ldr	r0, [pc, #68]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e2c:	f003 ffec 	bl	8005e08 <HAL_TIM_PWM_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001e36:	f000 f91f 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e52:	f004 f8f9 	bl	8006048 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001e5c:	f000 f90c 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM10_Init+0x94>)
 8001e62:	f000 fa05 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000560 	.word	0x20000560
 8001e74:	40014400 	.word	0x40014400

08001e78 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001e8c:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <MX_TIM12_Init+0x70>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e96:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001ea0:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001ea4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001eb4:	f003 ff59 	bl	8005d6a <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8001ebe:	f000 f8db 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM12_Init+0x6c>)
 8001ece:	f004 f979 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001ed8:	f000 f8ce 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000066c 	.word	0x2000066c
 8001ee8:	40001800 	.word	0x40001800

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	4b58      	ldr	r3, [pc, #352]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a57      	ldr	r2, [pc, #348]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b55      	ldr	r3, [pc, #340]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	4b51      	ldr	r3, [pc, #324]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a49      	ldr	r2, [pc, #292]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a42      	ldr	r2, [pc, #264]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b35      	ldr	r3, [pc, #212]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <MX_GPIO_Init+0x17c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001faa:	2201      	movs	r2, #1
 8001fac:	21fc      	movs	r1, #252	; 0xfc
 8001fae:	482f      	ldr	r0, [pc, #188]	; (800206c <MX_GPIO_Init+0x180>)
 8001fb0:	f001 f88a 	bl	80030c8 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	482d      	ldr	r0, [pc, #180]	; (8002070 <MX_GPIO_Init+0x184>)
 8001fba:	f001 f885 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	482c      	ldr	r0, [pc, #176]	; (8002074 <MX_GPIO_Init+0x188>)
 8001fc4:	f001 f880 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001fce:	4827      	ldr	r0, [pc, #156]	; (800206c <MX_GPIO_Init+0x180>)
 8001fd0:	f001 f87a 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001fd4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001fd8:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	481f      	ldr	r0, [pc, #124]	; (800206c <MX_GPIO_Init+0x180>)
 8001fee:	f000 fecd 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <MX_GPIO_Init+0x184>)
 800200a:	f000 febf 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 800200e:	2304      	movs	r3, #4
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_GPIO_Init+0x188>)
 8002026:	f000 feb1 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 800202a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	480a      	ldr	r0, [pc, #40]	; (800206c <MX_GPIO_Init+0x180>)
 8002044:	f000 fea2 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_GPIO_Init+0x180>)
 800205c:	f000 fe96 	bl	8002d8c <HAL_GPIO_Init>

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40021000 	.word	0x40021000
 8002070:	40020800 	.word	0x40020800
 8002074:	40020400 	.word	0x40020400

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	e7fe      	b.n	8002080 <Error_Handler+0x8>
	...

08002084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x48>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_MspInit+0x48>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x48>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_MspInit+0x48>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_MspInit+0x48>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_MspInit+0x48>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_ADC_MspInit+0x7c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d127      	bne.n	8002142 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_ADC_MspInit+0x80>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_ADC_MspInit+0x80>)
 80020fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_ADC_MspInit+0x80>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_ADC_MspInit+0x80>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_ADC_MspInit+0x80>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_ADC_MspInit+0x80>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 800212a:	2330      	movs	r3, #48	; 0x30
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <HAL_ADC_MspInit+0x84>)
 800213e:	f000 fe25 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40012100 	.word	0x40012100
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <HAL_RTC_MspInit+0x24>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d102      	bne.n	8002170 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RTC_MspInit+0x28>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40002800 	.word	0x40002800
 8002180:	42470e3c 	.word	0x42470e3c

08002184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_TIM_Base_MspInit+0xd8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80021b2:	e04e      	b.n	8002252 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
}
 80021da:	e03a      	b.n	8002252 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_TIM_Base_MspInit+0xe0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10e      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
}
 8002202:	e026      	b.n	8002252 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_TIM_Base_MspInit+0xe4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10e      	bne.n	800222c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
}
 800222a:	e012      	b.n	8002252 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_TIM_Base_MspInit+0xe8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10d      	bne.n	8002252 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 8002240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_TIM_Base_MspInit+0xdc>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40010000 	.word	0x40010000
 8002260:	40023800 	.word	0x40023800
 8002264:	40000800 	.word	0x40000800
 8002268:	40014400 	.word	0x40014400
 800226c:	40001800 	.word	0x40001800

08002270 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a24      	ldr	r2, [pc, #144]	; (8002320 <HAL_TIM_MspPostInit+0xb0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11f      	bne.n	80022d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 80022ae:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	4817      	ldr	r0, [pc, #92]	; (8002328 <HAL_TIM_MspPostInit+0xb8>)
 80022cc:	f000 fd5e 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80022d0:	e022      	b.n	8002318 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_TIM_MspPostInit+0xbc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d11d      	bne.n	8002318 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022e6:	f043 0320 	orr.w	r3, r3, #32
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 80022f8:	2340      	movs	r3, #64	; 0x40
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002308:	2303      	movs	r3, #3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	; (8002330 <HAL_TIM_MspPostInit+0xc0>)
 8002314:	f000 fd3a 	bl	8002d8c <HAL_GPIO_Init>
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40010000 	.word	0x40010000
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40014400 	.word	0x40014400
 8002330:	40021400 	.word	0x40021400

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237a:	f000 f94f 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <OTG_FS_IRQHandler+0x10>)
 800238a:	f001 f91f 	bl	80035cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20002aec 	.word	0x20002aec

08002398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	return 1;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <_kill>:

int _kill(int pid, int sig)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023b0:	f00b face 	bl	800d950 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2216      	movs	r2, #22
 80023b8:	601a      	str	r2, [r3, #0]
	return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_exit>:

void _exit (int status)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ce:	f04f 31ff 	mov.w	r1, #4294967295
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffe7 	bl	80023a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023d8:	e7fe      	b.n	80023d8 <_exit+0x12>

080023da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00a      	b.n	8002402 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ec:	f3af 8000 	nop.w
 80023f0:	4601      	mov	r1, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf0      	blt.n	80023ec <_read+0x12>
	}

return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e009      	b.n	800243a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	dbf1      	blt.n	8002426 <_write+0x12>
	}
	return len;
 8002442:	687b      	ldr	r3, [r7, #4]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_close>:

int _close(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002472:	605a      	str	r2, [r3, #4]
	return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_isatty>:

int _isatty(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	return 1;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f00b fa38 	bl	800d950 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2001c000 	.word	0x2001c000
 800250c:	00000800 	.word	0x00000800
 8002510:	20000254 	.word	0x20000254
 8002514:	20002e00 	.word	0x20002e00

08002518 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002540:	4c0b      	ldr	r4, [pc, #44]	; (8002570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800254e:	f7ff ffe3 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f00b fa03 	bl	800d95c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7ff f983 	bl	8001860 <main>
  bx  lr
 800255a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800255c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002568:	08012cac 	.word	0x08012cac
  ldr r2, =_sbss
 800256c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002570:	20002e00 	.word	0x20002e00

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <HAL_Init+0x40>)
 8002582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_Init+0x40>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x40>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 fbb1 	bl	8002d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fd6a 	bl	8002084 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fbc9 	bl	8002d72 <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 fb91 	bl	8002d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000010 	.word	0x20000010
 8002614:	20000018 	.word	0x20000018
 8002618:	20000014 	.word	0x20000014

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x1c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x20>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_IncTick+0x20>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000018 	.word	0x20000018
 800263c:	200006b4 	.word	0x200006b4

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_GetTick+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	200006b4 	.word	0x200006b4

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fff0 	bl	8002640 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffe0 	bl	8002640 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {

  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000018 	.word	0x20000018

0800269c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e033      	b.n	800271a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fd08 	bl	80020d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026e2:	f023 0302 	bic.w	r3, r3, #2
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f938 	bl	8002964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
 800270a:	e001      	b.n	8002710 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e103      	b.n	8002948 <HAL_ADC_ConfigChannel+0x224>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d925      	bls.n	800279c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	3b1e      	subs	r3, #30
 8002766:	2207      	movs	r2, #7
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	4603      	mov	r3, r0
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4403      	add	r3, r0
 800278e:	3b1e      	subs	r3, #30
 8002790:	409a      	lsls	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e022      	b.n	80027e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4403      	add	r3, r0
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d824      	bhi.n	8002834 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b05      	subs	r3, #5
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
 8002832:	e04c      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d824      	bhi.n	8002886 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b23      	subs	r3, #35	; 0x23
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b23      	subs	r3, #35	; 0x23
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
 8002884:	e023      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b41      	subs	r3, #65	; 0x41
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b41      	subs	r3, #65	; 0x41
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_ADC_ConfigChannel+0x230>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d109      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c8>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b12      	cmp	r3, #18
 80028de:	d105      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_ADC_ConfigChannel+0x234>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_ADC_ConfigChannel+0x234>)
 80028e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ea:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_ADC_ConfigChannel+0x230>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d123      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21a>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d003      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x1e2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b11      	cmp	r3, #17
 8002904:	d11b      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_ADC_ConfigChannel+0x234>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_ADC_ConfigChannel+0x234>)
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002910:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d111      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_ADC_ConfigChannel+0x238>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_ADC_ConfigChannel+0x23c>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	0c9a      	lsrs	r2, r3, #18
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002930:	e002      	b.n	8002938 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3b01      	subs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012000 	.word	0x40012000
 8002958:	40012300 	.word	0x40012300
 800295c:	20000010 	.word	0x20000010
 8002960:	431bde83 	.word	0x431bde83

08002964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <ADC_Init+0x204>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a7d      	ldr	r2, [pc, #500]	; (8002b68 <ADC_Init+0x204>)
 8002972:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002976:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002978:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <ADC_Init+0x204>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4979      	ldr	r1, [pc, #484]	; (8002b68 <ADC_Init+0x204>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	4a5e      	ldr	r2, [pc, #376]	; (8002b6c <ADC_Init+0x208>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e00f      	b.n	8002a5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0202 	bic.w	r2, r2, #2
 8002a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d027      	beq.n	8002adc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ab6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	fa92 f2a2 	rbit	r2, r2
 8002abe:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	fa03 f102 	lsl.w	r1, r3, r2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	e007      	b.n	8002aec <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	051a      	lsls	r2, r3, #20
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b2e:	025a      	lsls	r2, r3, #9
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	029a      	lsls	r2, r3, #10
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40012300 	.word	0x40012300
 8002b6c:	0f000001 	.word	0x0f000001

08002b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	f003 0307 	and.w	r3, r3, #7
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	db0b      	blt.n	8002bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	4906      	ldr	r1, [pc, #24]	; (8002c08 <__NVIC_EnableIRQ+0x34>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db0a      	blt.n	8002c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <__NVIC_SetPriority+0x4c>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c34:	e00a      	b.n	8002c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <__NVIC_SetPriority+0x50>)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	3b04      	subs	r3, #4
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	440b      	add	r3, r1
 8002c4a:	761a      	strb	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf28      	it	cs
 8002c7e:	2304      	movcs	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d902      	bls.n	8002c90 <NVIC_EncodePriority+0x30>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3b03      	subs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <NVIC_EncodePriority+0x32>
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	4313      	orrs	r3, r2
         );
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd4:	d301      	bcc.n	8002cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00f      	b.n	8002cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <SysTick_Config+0x40>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce2:	210f      	movs	r1, #15
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f7ff ff90 	bl	8002c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <SysTick_Config+0x40>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <SysTick_Config+0x40>)
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff2d 	bl	8002b70 <__NVIC_SetPriorityGrouping>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d30:	f7ff ff42 	bl	8002bb8 <__NVIC_GetPriorityGrouping>
 8002d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff ff90 	bl	8002c60 <NVIC_EncodePriority>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff5f 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff35 	bl	8002bd4 <__NVIC_EnableIRQ>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffa2 	bl	8002cc4 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e16f      	b.n	800307c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8161 	beq.w	8003076 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0201 	and.w	r2, r3, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	6939      	ldr	r1, [r7, #16]
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80bb 	beq.w	8003076 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_GPIO_Init+0x30c>)
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_GPIO_Init+0x30c>)
 8002f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_GPIO_Init+0x30c>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f1c:	4a5f      	ldr	r2, [pc, #380]	; (800309c <HAL_GPIO_Init+0x310>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x314>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d031      	beq.n	8002fac <HAL_GPIO_Init+0x220>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x318>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d02b      	beq.n	8002fa8 <HAL_GPIO_Init+0x21c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x31c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d025      	beq.n	8002fa4 <HAL_GPIO_Init+0x218>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x320>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_GPIO_Init+0x214>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x324>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d019      	beq.n	8002f9c <HAL_GPIO_Init+0x210>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x328>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_GPIO_Init+0x20c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x32c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00d      	beq.n	8002f94 <HAL_GPIO_Init+0x208>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x330>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x334>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_GPIO_Init+0x200>
 8002f88:	2308      	movs	r3, #8
 8002f8a:	e010      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002f8c:	2309      	movs	r3, #9
 8002f8e:	e00e      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002f90:	2307      	movs	r3, #7
 8002f92:	e00c      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002f94:	2306      	movs	r3, #6
 8002f96:	e00a      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002f98:	2305      	movs	r3, #5
 8002f9a:	e008      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e006      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e004      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e002      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_GPIO_Init+0x222>
 8002fac:	2300      	movs	r3, #0
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	0092      	lsls	r2, r2, #2
 8002fb6:	4093      	lsls	r3, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_GPIO_Init+0x310>)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_GPIO_Init+0x338>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x338>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x338>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	3301      	adds	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae88 	bne.w	8002d9c <HAL_GPIO_Init+0x10>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40023800 	.word	0x40023800
 800309c:	40013800 	.word	0x40013800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021800 	.word	0x40021800
 80030bc:	40021c00 	.word	0x40021c00
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b08f      	sub	sp, #60	; 0x3c
 80030fc:	af0a      	add	r7, sp, #40	; 0x28
 80030fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e054      	b.n	80031b4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f00a f93b 	bl	800d3a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fd35 	bl	8006bb8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	687e      	ldr	r6, [r7, #4]
 8003156:	466d      	mov	r5, sp
 8003158:	f106 0410 	add.w	r4, r6, #16
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003168:	e885 0003 	stmia.w	r5, {r0, r1}
 800316c:	1d33      	adds	r3, r6, #4
 800316e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003170:	6838      	ldr	r0, [r7, #0]
 8003172:	f003 fcba 	bl	8006aea <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fd2b 	bl	8006bd8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	687e      	ldr	r6, [r7, #4]
 800318a:	466d      	mov	r5, sp
 800318c:	f106 0410 	add.w	r4, r6, #16
 8003190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	e894 0003 	ldmia.w	r4, {r0, r1}
 800319c:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a0:	1d33      	adds	r3, r6, #4
 80031a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f003 fe8d 	bl	8006ec4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031bc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af04      	add	r7, sp, #16
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	70fb      	strb	r3, [r7, #3]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70bb      	strb	r3, [r7, #2]
 80031d2:	4613      	mov	r3, r2
 80031d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_HCD_HC_Init+0x28>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e076      	b.n	80032d2 <HAL_HCD_HC_Init+0x116>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	333d      	adds	r3, #61	; 0x3d
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3338      	adds	r3, #56	; 0x38
 800320c:	787a      	ldrb	r2, [r7, #1]
 800320e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3340      	adds	r3, #64	; 0x40
 800321e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003220:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3339      	adds	r3, #57	; 0x39
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	333f      	adds	r3, #63	; 0x3f
 8003242:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	78ba      	ldrb	r2, [r7, #2]
 800324c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003250:	b2d0      	uxtb	r0, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	333a      	adds	r3, #58	; 0x3a
 800325e:	4602      	mov	r2, r0
 8003260:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003262:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003266:	2b00      	cmp	r3, #0
 8003268:	da09      	bge.n	800327e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	333b      	adds	r3, #59	; 0x3b
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e008      	b.n	8003290 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	333b      	adds	r3, #59	; 0x3b
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	333c      	adds	r3, #60	; 0x3c
 800329e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032a2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	787c      	ldrb	r4, [r7, #1]
 80032aa:	78ba      	ldrb	r2, [r7, #2]
 80032ac:	78f9      	ldrb	r1, [r7, #3]
 80032ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4623      	mov	r3, r4
 80032c0:	f003 ff76 	bl	80071b0 <USB_HC_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd90      	pop	{r4, r7, pc}

080032da <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_HCD_HC_Halt+0x1e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e00f      	b.n	8003318 <HAL_HCD_HC_Halt+0x3e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f004 f9b1 	bl	8007670 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	70fb      	strb	r3, [r7, #3]
 8003332:	460b      	mov	r3, r1
 8003334:	70bb      	strb	r3, [r7, #2]
 8003336:	4613      	mov	r3, r2
 8003338:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	333b      	adds	r3, #59	; 0x3b
 8003348:	78ba      	ldrb	r2, [r7, #2]
 800334a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	333f      	adds	r3, #63	; 0x3f
 800335a:	787a      	ldrb	r2, [r7, #1]
 800335c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800335e:	7c3b      	ldrb	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d112      	bne.n	800338a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3342      	adds	r3, #66	; 0x42
 8003372:	2203      	movs	r2, #3
 8003374:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	333d      	adds	r3, #61	; 0x3d
 8003384:	7f3a      	ldrb	r2, [r7, #28]
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e008      	b.n	800339c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	3342      	adds	r3, #66	; 0x42
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	f200 80c6 	bhi.w	8003530 <HAL_HCD_HC_SubmitRequest+0x210>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	0800351d 	.word	0x0800351d
 80033b4:	08003421 	.word	0x08003421
 80033b8:	0800349f 	.word	0x0800349f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033bc:	7c3b      	ldrb	r3, [r7, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	f040 80b8 	bne.w	8003534 <HAL_HCD_HC_SubmitRequest+0x214>
 80033c4:	78bb      	ldrb	r3, [r7, #2]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80b4 	bne.w	8003534 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033cc:	8b3b      	ldrh	r3, [r7, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3355      	adds	r3, #85	; 0x55
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3355      	adds	r3, #85	; 0x55
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3342      	adds	r3, #66	; 0x42
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800340a:	e093      	b.n	8003534 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3342      	adds	r3, #66	; 0x42
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e089      	b.n	8003534 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003420:	78bb      	ldrb	r3, [r7, #2]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11d      	bne.n	8003462 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3355      	adds	r3, #85	; 0x55
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3342      	adds	r3, #66	; 0x42
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800344c:	e073      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3342      	adds	r3, #66	; 0x42
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
      break;
 8003460:	e069      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3354      	adds	r3, #84	; 0x54
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3342      	adds	r3, #66	; 0x42
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
      break;
 8003488:	e055      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3342      	adds	r3, #66	; 0x42
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e04b      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800349e:	78bb      	ldrb	r3, [r7, #2]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d11d      	bne.n	80034e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3355      	adds	r3, #85	; 0x55
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3342      	adds	r3, #66	; 0x42
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ca:	e034      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3342      	adds	r3, #66	; 0x42
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
      break;
 80034de:	e02a      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3354      	adds	r3, #84	; 0x54
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3342      	adds	r3, #66	; 0x42
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e016      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3342      	adds	r3, #66	; 0x42
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e00c      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3342      	adds	r3, #66	; 0x42
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e002      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003534:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3344      	adds	r3, #68	; 0x44
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	8b3a      	ldrh	r2, [r7, #24]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	202c      	movs	r0, #44	; 0x2c
 8003550:	fb00 f303 	mul.w	r3, r0, r3
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	; 0x4c
 8003558:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3360      	adds	r3, #96	; 0x60
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3339      	adds	r3, #57	; 0x39
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3361      	adds	r3, #97	; 0x61
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	222c      	movs	r2, #44	; 0x2c
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	3338      	adds	r3, #56	; 0x38
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	18d1      	adds	r1, r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	f003 ff06 	bl	80073cc <USB_HC_StartXfer>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop

080035cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fc2e 	bl	8006e44 <USB_GetMode>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	f040 80ef 	bne.w	80037ce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fc13 	bl	8006e20 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80e5 	beq.w	80037cc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fc0a 	bl	8006e20 <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003616:	d104      	bne.n	8003622 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fbfa 	bl	8006e20 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003636:	d104      	bne.n	8003642 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003640:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 fbea 	bl	8006e20 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003656:	d104      	bne.n	8003662 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003660:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fbda 	bl	8006e20 <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d103      	bne.n	800367e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2202      	movs	r2, #2
 800367c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 fbcc 	bl	8006e20 <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003692:	d115      	bne.n	80036c0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800369c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f009 fef4 	bl	800d49c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fcb6 	bl	800702c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fbab 	bl	8006e20 <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d4:	d102      	bne.n	80036dc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f001 fa01 	bl	8004ade <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fb9d 	bl	8006e20 <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d106      	bne.n	80036fe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f009 feb7 	bl	800d464 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2208      	movs	r2, #8
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fb8c 	bl	8006e20 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b10      	cmp	r3, #16
 8003710:	d101      	bne.n	8003716 <HAL_HCD_IRQHandler+0x14a>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_HCD_IRQHandler+0x14c>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f001 f904 	bl	800493a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0210 	orr.w	r2, r2, #16
 8003740:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fb6a 	bl	8006e20 <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003756:	d13a      	bne.n	80037ce <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 ff77 	bl	8007650 <USB_HC_ReadInterrupt>
 8003762:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e025      	b.n	80037b6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d106      	bne.n	80037a4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8a9 	bl	80038f4 <HCD_HC_IN_IRQHandler>
 80037a2:	e005      	b.n	80037b0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fcc4 	bl	8004138 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3d4      	bcc.n	800376a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	e000      	b.n	80037ce <HAL_HCD_IRQHandler+0x202>
      return;
 80037cc:	bf00      	nop
    }
  }
}
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_HCD_Start+0x16>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e013      	b.n	8003812 <HAL_HCD_Start+0x3e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fc7a 	bl	80070f2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f003 f9c8 	bl	8006b98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_HCD_Stop+0x16>
 800382c:	2302      	movs	r3, #2
 800382e:	e00d      	b.n	800384c <HAL_HCD_Stop+0x32>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 f86d 	bl	800791c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fc1c 	bl	800709e <USB_ResetPort>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3360      	adds	r3, #96	; 0x60
 800388a:	781b      	ldrb	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3350      	adds	r3, #80	; 0x50
 80038b0:	681b      	ldr	r3, [r3, #0]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fc60 	bl	800718e <USB_GetCurrentFrame>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fc3c 	bl	8007162 <USB_GetHostSpeed>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d119      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2304      	movs	r3, #4
 8003934:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	440a      	add	r2, r1
 800394c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	60d3      	str	r3, [r2, #12]
 8003956:	e101      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396e:	d12b      	bne.n	80039c8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003982:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3361      	adds	r3, #97	; 0x61
 8003992:	2207      	movs	r2, #7
 8003994:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fe55 	bl	8007670 <USB_HC_Halt>
 80039c6:	e0c9      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d109      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2320      	movs	r3, #32
 80039ee:	6093      	str	r3, [r2, #8]
 80039f0:	e0b4      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d133      	bne.n	8003a70 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3361      	adds	r3, #97	; 0x61
 8003a36:	2205      	movs	r2, #5
 8003a38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	461a      	mov	r2, r3
 8003a48:	2310      	movs	r3, #16
 8003a4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fe01 	bl	8007670 <USB_HC_Halt>
 8003a6e:	e075      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d134      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2310      	movs	r3, #16
 8003aca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fdc0 	bl	8007670 <USB_HC_Halt>
 8003af0:	e034      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d129      	bne.n	8003b5c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3361      	adds	r3, #97	; 0x61
 8003b36:	2206      	movs	r2, #6
 8003b38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fd93 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	461a      	mov	r2, r3
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b72:	d122      	bne.n	8003bba <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fd66 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003bb8:	e2ba      	b.n	8004130 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 811b 	bne.w	8003e08 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d019      	beq.n	8003c0e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	0159      	lsls	r1, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	440b      	add	r3, r1
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	202c      	movs	r0, #44	; 0x2c
 8003c04:	fb00 f303 	mul.w	r3, r0, r3
 8003c08:	440b      	add	r3, r1
 8003c0a:	3350      	adds	r3, #80	; 0x50
 8003c0c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3361      	adds	r3, #97	; 0x61
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	335c      	adds	r3, #92	; 0x5c
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2301      	movs	r3, #1
 8003c42:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	333f      	adds	r3, #63	; 0x3f
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	333f      	adds	r3, #63	; 0x3f
 8003c66:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d121      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fcea 	bl	8007670 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e066      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	333f      	adds	r3, #63	; 0x3f
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d127      	bne.n	8003d14 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	4413      	add	r3, r2
 8003cf0:	3360      	adds	r3, #96	; 0x60
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	202c      	movs	r0, #44	; 0x2c
 8003d00:	fb00 f303 	mul.w	r3, r0, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3360      	adds	r3, #96	; 0x60
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f009 fbd3 	bl	800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d12:	e034      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	333f      	adds	r3, #63	; 0x3f
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d12a      	bne.n	8003d7e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3360      	adds	r3, #96	; 0x60
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3354      	adds	r3, #84	; 0x54
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2d8      	uxtb	r0, r3
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3354      	adds	r3, #84	; 0x54
 8003d5e:	4602      	mov	r2, r0
 8003d60:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	b2d9      	uxtb	r1, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	202c      	movs	r0, #44	; 0x2c
 8003d6c:	fb00 f303 	mul.w	r3, r0, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	3360      	adds	r3, #96	; 0x60
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f009 fb9d 	bl	800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d12b      	bne.n	8003dde <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3348      	adds	r3, #72	; 0x48
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	202c      	movs	r0, #44	; 0x2c
 8003d9c:	fb00 f202 	mul.w	r2, r0, r2
 8003da0:	440a      	add	r2, r1
 8003da2:	3240      	adds	r2, #64	; 0x40
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 81be 	beq.w	8004130 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3354      	adds	r3, #84	; 0x54
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2d8      	uxtb	r0, r3
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3354      	adds	r3, #84	; 0x54
 8003dd8:	4602      	mov	r2, r0
 8003dda:	701a      	strb	r2, [r3, #0]
}
 8003ddc:	e1a8      	b.n	8004130 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3354      	adds	r3, #84	; 0x54
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3354      	adds	r3, #84	; 0x54
 8003e02:	4602      	mov	r2, r0
 8003e04:	701a      	strb	r2, [r3, #0]
}
 8003e06:	e193      	b.n	8004130 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	f040 8106 	bne.w	800402c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3a:	f023 0302 	bic.w	r3, r3, #2
 8003e3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3361      	adds	r3, #97	; 0x61
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d109      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3360      	adds	r3, #96	; 0x60
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e0c9      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3361      	adds	r3, #97	; 0x61
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d109      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	2205      	movs	r2, #5
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e0b5      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3361      	adds	r3, #97	; 0x61
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d009      	beq.n	8003eb8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d150      	bne.n	8003f5a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	335c      	adds	r3, #92	; 0x5c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	202c      	movs	r0, #44	; 0x2c
 8003ed0:	fb00 f303 	mul.w	r3, r0, r3
 8003ed4:	440b      	add	r3, r1
 8003ed6:	335c      	adds	r3, #92	; 0x5c
 8003ed8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	335c      	adds	r3, #92	; 0x5c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d912      	bls.n	8003f14 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	335c      	adds	r3, #92	; 0x5c
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3360      	adds	r3, #96	; 0x60
 8003f0e:	2204      	movs	r2, #4
 8003f10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f12:	e073      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3360      	adds	r3, #96	; 0x60
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f3c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f44:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f58:	e050      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3361      	adds	r3, #97	; 0x61
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d122      	bne.n	8003fb4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3360      	adds	r3, #96	; 0x60
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e023      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3361      	adds	r3, #97	; 0x61
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b07      	cmp	r3, #7
 8003fc6:	d119      	bne.n	8003ffc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	335c      	adds	r3, #92	; 0x5c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	202c      	movs	r0, #44	; 0x2c
 8003fe0:	fb00 f303 	mul.w	r3, r0, r3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	335c      	adds	r3, #92	; 0x5c
 8003fe8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3360      	adds	r3, #96	; 0x60
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	2302      	movs	r3, #2
 800400c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	b2d9      	uxtb	r1, r3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	202c      	movs	r0, #44	; 0x2c
 8004018:	fb00 f303 	mul.w	r3, r0, r3
 800401c:	4413      	add	r3, r2
 800401e:	3360      	adds	r3, #96	; 0x60
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f009 fa47 	bl	800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800402a:	e081      	b.n	8004130 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b10      	cmp	r3, #16
 8004040:	d176      	bne.n	8004130 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333f      	adds	r3, #63	; 0x3f
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d121      	bne.n	800409a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	335c      	adds	r3, #92	; 0x5c
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	440a      	add	r2, r1
 800407e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f003 faec 	bl	8007670 <USB_HC_Halt>
 8004098:	e041      	b.n	800411e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	333f      	adds	r3, #63	; 0x3f
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	333f      	adds	r3, #63	; 0x3f
 80040bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d12d      	bne.n	800411e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	335c      	adds	r3, #92	; 0x5c
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d120      	bne.n	800411e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3361      	adds	r3, #97	; 0x61
 80040ea:	2203      	movs	r2, #3
 80040ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	440a      	add	r2, r1
 8004104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f003 faa9 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	461a      	mov	r2, r3
 800412c:	2310      	movs	r3, #16
 800412e:	6093      	str	r3, [r2, #8]
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d119      	bne.n	800419c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	2304      	movs	r3, #4
 8004178:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	440a      	add	r2, r1
 8004190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800419a:	e3ca      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d13e      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041be:	461a      	mov	r2, r3
 80041c0:	2320      	movs	r3, #32
 80041c2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	212c      	movs	r1, #44	; 0x2c
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	333d      	adds	r3, #61	; 0x3d
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	f040 83ac 	bne.w	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	333d      	adds	r3, #61	; 0x3d
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3360      	adds	r3, #96	; 0x60
 80041fa:	2202      	movs	r2, #2
 80041fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	440a      	add	r2, r1
 8004214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f003 fa21 	bl	8007670 <USB_HC_Halt>
}
 800422e:	e380      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004246:	d122      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	440a      	add	r2, r1
 800425e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f003 f9fc 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800428a:	6093      	str	r3, [r2, #8]
}
 800428c:	e351      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d150      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	335c      	adds	r3, #92	; 0x5c
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d111      	bne.n	80042f0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	333d      	adds	r3, #61	; 0x3d
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	440a      	add	r2, r1
 8004306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f003 f9a8 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	461a      	mov	r2, r3
 800432e:	2301      	movs	r3, #1
 8004330:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3361      	adds	r3, #97	; 0x61
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
}
 8004344:	e2f5      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d13c      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3361      	adds	r3, #97	; 0x61
 800436a:	2204      	movs	r2, #4
 800436c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	333d      	adds	r3, #61	; 0x3d
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	335c      	adds	r3, #92	; 0x5c
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 f957 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	461a      	mov	r2, r3
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	6093      	str	r3, [r2, #8]
}
 80043d4:	e2ad      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d12a      	bne.n	8004442 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	461a      	mov	r2, r3
 80043fa:	2308      	movs	r3, #8
 80043fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	440a      	add	r2, r1
 8004414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004418:	f043 0302 	orr.w	r3, r3, #2
 800441c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f003 f921 	bl	8007670 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3361      	adds	r3, #97	; 0x61
 800443c:	2205      	movs	r2, #5
 800443e:	701a      	strb	r2, [r3, #0]
}
 8004440:	e277      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d150      	bne.n	80044fa <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	335c      	adds	r3, #92	; 0x5c
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	3361      	adds	r3, #97	; 0x61
 8004478:	2203      	movs	r2, #3
 800447a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	333d      	adds	r3, #61	; 0x3d
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d112      	bne.n	80044b6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	333c      	adds	r3, #60	; 0x3c
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	333d      	adds	r3, #61	; 0x3d
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 f8c5 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	461a      	mov	r2, r3
 80044f4:	2310      	movs	r3, #16
 80044f6:	6093      	str	r3, [r2, #8]
}
 80044f8:	e21b      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d174      	bne.n	80045fa <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d121      	bne.n	800455c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3361      	adds	r3, #97	; 0x61
 8004526:	2206      	movs	r2, #6
 8004528:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	440a      	add	r2, r1
 8004540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f003 f88b 	bl	8007670 <USB_HC_Halt>
 800455a:	e044      	b.n	80045e6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	212c      	movs	r1, #44	; 0x2c
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	4413      	add	r3, r2
 8004568:	335c      	adds	r3, #92	; 0x5c
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	202c      	movs	r0, #44	; 0x2c
 8004574:	fb00 f303 	mul.w	r3, r0, r3
 8004578:	440b      	add	r3, r1
 800457a:	335c      	adds	r3, #92	; 0x5c
 800457c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	335c      	adds	r3, #92	; 0x5c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d920      	bls.n	80045d4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	212c      	movs	r1, #44	; 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	335c      	adds	r3, #92	; 0x5c
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3360      	adds	r3, #96	; 0x60
 80045b2:	2204      	movs	r2, #4
 80045b4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	b2d9      	uxtb	r1, r3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	202c      	movs	r0, #44	; 0x2c
 80045c0:	fb00 f303 	mul.w	r3, r0, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3360      	adds	r3, #96	; 0x60
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f008 ff73 	bl	800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045d2:	e008      	b.n	80045e6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3360      	adds	r3, #96	; 0x60
 80045e2:	2202      	movs	r2, #2
 80045e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f2:	461a      	mov	r2, r3
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	6093      	str	r3, [r2, #8]
}
 80045f8:	e19b      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d134      	bne.n	800467c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	440a      	add	r2, r1
 8004628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f003 f817 	bl	8007670 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2310      	movs	r3, #16
 8004652:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	461a      	mov	r2, r3
 8004662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004666:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3361      	adds	r3, #97	; 0x61
 8004676:	2208      	movs	r2, #8
 8004678:	701a      	strb	r2, [r3, #0]
}
 800467a:	e15a      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 814f 	bne.w	8004932 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ae:	f023 0302 	bic.w	r3, r3, #2
 80046b2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3361      	adds	r3, #97	; 0x61
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d17d      	bne.n	80047c4 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3360      	adds	r3, #96	; 0x60
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	333f      	adds	r3, #63	; 0x3f
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d00a      	beq.n	8004704 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	333f      	adds	r3, #63	; 0x3f
 80046fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046fe:	2b03      	cmp	r3, #3
 8004700:	f040 8100 	bne.w	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	3355      	adds	r3, #85	; 0x55
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f083 0301 	eor.w	r3, r3, #1
 8004720:	b2d8      	uxtb	r0, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3355      	adds	r3, #85	; 0x55
 8004730:	4602      	mov	r2, r0
 8004732:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 80e3 	bne.w	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	212c      	movs	r1, #44	; 0x2c
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	334c      	adds	r3, #76	; 0x4c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80d8 	beq.w	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	334c      	adds	r3, #76	; 0x4c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	202c      	movs	r0, #44	; 0x2c
 800476a:	fb00 f202 	mul.w	r2, r0, r2
 800476e:	440a      	add	r2, r1
 8004770:	3240      	adds	r2, #64	; 0x40
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	4413      	add	r3, r2
 8004776:	3b01      	subs	r3, #1
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	202c      	movs	r0, #44	; 0x2c
 800477e:	fb00 f202 	mul.w	r2, r0, r2
 8004782:	440a      	add	r2, r1
 8004784:	3240      	adds	r2, #64	; 0x40
 8004786:	8812      	ldrh	r2, [r2, #0]
 8004788:	fbb3 f3f2 	udiv	r3, r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80b5 	beq.w	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3355      	adds	r3, #85	; 0x55
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2d8      	uxtb	r0, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	3355      	adds	r3, #85	; 0x55
 80047be:	4602      	mov	r2, r0
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e09f      	b.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3361      	adds	r3, #97	; 0x61
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d109      	bne.n	80047ec <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3360      	adds	r3, #96	; 0x60
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e08b      	b.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d109      	bne.n	8004814 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	2202      	movs	r2, #2
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e077      	b.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3361      	adds	r3, #97	; 0x61
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d109      	bne.n	800483c <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	3360      	adds	r3, #96	; 0x60
 8004836:	2205      	movs	r2, #5
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e063      	b.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3361      	adds	r3, #97	; 0x61
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d009      	beq.n	8004864 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	3361      	adds	r3, #97	; 0x61
 800485e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004860:	2b08      	cmp	r3, #8
 8004862:	d14f      	bne.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	335c      	adds	r3, #92	; 0x5c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	202c      	movs	r0, #44	; 0x2c
 800487c:	fb00 f303 	mul.w	r3, r0, r3
 8004880:	440b      	add	r3, r1
 8004882:	335c      	adds	r3, #92	; 0x5c
 8004884:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	335c      	adds	r3, #92	; 0x5c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d912      	bls.n	80048c0 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	2204      	movs	r2, #4
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	e021      	b.n	8004904 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3360      	adds	r3, #96	; 0x60
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048e8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	461a      	mov	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	461a      	mov	r2, r3
 8004912:	2302      	movs	r3, #2
 8004914:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	b2d9      	uxtb	r1, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	202c      	movs	r0, #44	; 0x2c
 8004920:	fb00 f303 	mul.w	r3, r0, r3
 8004924:	4413      	add	r3, r2
 8004926:	3360      	adds	r3, #96	; 0x60
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f008 fdc3 	bl	800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b08a      	sub	sp, #40	; 0x28
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	0c5b      	lsrs	r3, r3, #17
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800496e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d004      	beq.n	8004980 <HCD_RXQLVL_IRQHandler+0x46>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b05      	cmp	r3, #5
 800497a:	f000 80a9 	beq.w	8004ad0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800497e:	e0aa      	b.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a6 	beq.w	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3344      	adds	r3, #68	; 0x44
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 809b 	beq.w	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3350      	adds	r3, #80	; 0x50
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	441a      	add	r2, r3
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	202c      	movs	r0, #44	; 0x2c
 80049b8:	fb00 f303 	mul.w	r3, r0, r3
 80049bc:	440b      	add	r3, r1
 80049be:	334c      	adds	r3, #76	; 0x4c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d87a      	bhi.n	8004abc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3344      	adds	r3, #68	; 0x44
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	b292      	uxth	r2, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f002 f9c7 	bl	8006d72 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3344      	adds	r3, #68	; 0x44
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	441a      	add	r2, r3
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	202c      	movs	r0, #44	; 0x2c
 80049fe:	fb00 f303 	mul.w	r3, r0, r3
 8004a02:	440b      	add	r3, r1
 8004a04:	3344      	adds	r3, #68	; 0x44
 8004a06:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3350      	adds	r3, #80	; 0x50
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	202c      	movs	r0, #44	; 0x2c
 8004a22:	fb00 f303 	mul.w	r3, r0, r3
 8004a26:	440b      	add	r3, r1
 8004a28:	3350      	adds	r3, #80	; 0x50
 8004a2a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	0cdb      	lsrs	r3, r3, #19
 8004a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a40:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3340      	adds	r3, #64	; 0x40
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d13c      	bne.n	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d039      	beq.n	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3354      	adds	r3, #84	; 0x54
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f083 0301 	eor.w	r3, r3, #1
 8004aa6:	b2d8      	uxtb	r0, r3
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3354      	adds	r3, #84	; 0x54
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	701a      	strb	r2, [r3, #0]
      break;
 8004aba:	e00b      	b.n	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3360      	adds	r3, #96	; 0x60
 8004aca:	2204      	movs	r2, #4
 8004acc:	701a      	strb	r2, [r3, #0]
      break;
 8004ace:	e001      	b.n	8004ad4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004ad4:	bf00      	nop
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3728      	adds	r7, #40	; 0x28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b0a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d10b      	bne.n	8004b2e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d102      	bne.n	8004b26 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f008 fcad 	bl	800d480 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d132      	bne.n	8004b9e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d126      	bne.n	8004b98 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d113      	bne.n	8004b7a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b5c:	d106      	bne.n	8004b6c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2102      	movs	r1, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 fa61 	bl	800702c <USB_InitFSLSPClkSel>
 8004b6a:	e011      	b.n	8004b90 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 fa5a 	bl	800702c <USB_InitFSLSPClkSel>
 8004b78:	e00a      	b.n	8004b90 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d106      	bne.n	8004b90 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b8e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f008 fc9e 	bl	800d4d2 <HAL_HCD_PortEnabled_Callback>
 8004b96:	e002      	b.n	8004b9e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f008 fca8 	bl	800d4ee <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d103      	bne.n	8004bb0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f043 0320 	orr.w	r3, r3, #32
 8004bae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e237      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d050      	beq.n	8004c84 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be2:	4ba3      	ldr	r3, [pc, #652]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bee:	4ba0      	ldr	r3, [pc, #640]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d112      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfa:	4b9d      	ldr	r3, [pc, #628]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c06:	d10b      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	4b99      	ldr	r3, [pc, #612]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d036      	beq.n	8004c82 <HAL_RCC_OscConfig+0xbe>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d132      	bne.n	8004c82 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e212      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4b93      	ldr	r3, [pc, #588]	; (8004e74 <HAL_RCC_OscConfig+0x2b0>)
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d013      	beq.n	8004c5a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fd fd05 	bl	8002640 <HAL_GetTick>
 8004c36:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3a:	f7fd fd01 	bl	8002640 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b64      	cmp	r3, #100	; 0x64
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1fc      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x76>
 8004c58:	e014      	b.n	8004c84 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fcf1 	bl	8002640 <HAL_GetTick>
 8004c5e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c62:	f7fd fced 	bl	8002640 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b64      	cmp	r3, #100	; 0x64
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1e8      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c74:	4b7e      	ldr	r3, [pc, #504]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCC_OscConfig+0x9e>
 8004c80:	e000      	b.n	8004c84 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d077      	beq.n	8004d80 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c90:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9c:	4b74      	ldr	r3, [pc, #464]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d126      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca8:	4b71      	ldr	r3, [pc, #452]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d120      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb4:	4b6e      	ldr	r3, [pc, #440]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_OscConfig+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e1bc      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b68      	ldr	r3, [pc, #416]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	21f8      	movs	r1, #248	; 0xf8
 8004cda:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	fa91 f1a1 	rbit	r1, r1
 8004ce2:	6179      	str	r1, [r7, #20]
  return result;
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	fab1 f181 	clz	r1, r1
 8004cea:	b2c9      	uxtb	r1, r1
 8004cec:	408b      	lsls	r3, r1
 8004cee:	4960      	ldr	r1, [pc, #384]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf4:	e044      	b.n	8004d80 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d02a      	beq.n	8004d54 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <HAL_RCC_OscConfig+0x2b4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fd fc9c 	bl	8002640 <HAL_GetTick>
 8004d08:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fd fc98 	bl	8002640 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e193      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b54      	ldr	r3, [pc, #336]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	21f8      	movs	r1, #248	; 0xf8
 8004d38:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	6939      	ldr	r1, [r7, #16]
 8004d3c:	fa91 f1a1 	rbit	r1, r1
 8004d40:	60f9      	str	r1, [r7, #12]
  return result;
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	fab1 f181 	clz	r1, r1
 8004d48:	b2c9      	uxtb	r1, r1
 8004d4a:	408b      	lsls	r3, r1
 8004d4c:	4948      	ldr	r1, [pc, #288]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
 8004d52:	e015      	b.n	8004d80 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d54:	4b48      	ldr	r3, [pc, #288]	; (8004e78 <HAL_RCC_OscConfig+0x2b4>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fd fc71 	bl	8002640 <HAL_GetTick>
 8004d5e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fd fc6d 	bl	8002640 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e168      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d030      	beq.n	8004dee <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d016      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_RCC_OscConfig+0x2b8>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9a:	f7fd fc51 	bl	8002640 <HAL_GetTick>
 8004d9e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fd fc4d 	bl	8002640 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e148      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db4:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1de>
 8004dc0:	e015      	b.n	8004dee <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <HAL_RCC_OscConfig+0x2b8>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fc3a 	bl	8002640 <HAL_GetTick>
 8004dcc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fd fc36 	bl	8002640 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e131      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8088 	beq.w	8004f0c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d110      	bne.n	8004e30 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <HAL_RCC_OscConfig+0x2bc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <HAL_RCC_OscConfig+0x2bc>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCC_OscConfig+0x2bc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d123      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_RCC_OscConfig+0x2bc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <HAL_RCC_OscConfig+0x2bc>)
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e54:	f7fd fbf4 	bl	8002640 <HAL_GetTick>
 8004e58:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fd fbf0 	bl	8002640 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d90c      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e0eb      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40023802 	.word	0x40023802
 8004e78:	42470000 	.word	0x42470000
 8004e7c:	42470e80 	.word	0x42470e80
 8004e80:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b72      	ldr	r3, [pc, #456]	; (8005050 <HAL_RCC_OscConfig+0x48c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0e5      	beq.n	8004e5c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x490>)
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d015      	beq.n	8004ece <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fbcd 	bl	8002640 <HAL_GetTick>
 8004ea6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fd fbc9 	bl	8002640 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0c2      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	4b65      	ldr	r3, [pc, #404]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ee      	beq.n	8004eaa <HAL_RCC_OscConfig+0x2e6>
 8004ecc:	e014      	b.n	8004ef8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ece:	f7fd fbb7 	bl	8002640 <HAL_GetTick>
 8004ed2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd fbb3 	bl	8002640 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e0ac      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	4b5a      	ldr	r3, [pc, #360]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ee      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f00:	4b55      	ldr	r3, [pc, #340]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	4a54      	ldr	r2, [pc, #336]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8097 	beq.w	8005044 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f16:	4b50      	ldr	r3, [pc, #320]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d061      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d146      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_RCC_OscConfig+0x498>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd fb86 	bl	8002640 <HAL_GetTick>
 8004f34:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd fb82 	bl	8002640 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	; 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e07d      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b43      	ldr	r3, [pc, #268]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f56:	4b40      	ldr	r3, [pc, #256]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x49c>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	69d1      	ldr	r1, [r2, #28]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6a12      	ldr	r2, [r2, #32]
 8004f66:	4311      	orrs	r1, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f6c:	0192      	lsls	r2, r2, #6
 8004f6e:	4311      	orrs	r1, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f74:	0612      	lsls	r2, r2, #24
 8004f76:	4311      	orrs	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f7c:	0852      	lsrs	r2, r2, #1
 8004f7e:	3a01      	subs	r2, #1
 8004f80:	0412      	lsls	r2, r2, #16
 8004f82:	430a      	orrs	r2, r1
 8004f84:	4934      	ldr	r1, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8a:	4b34      	ldr	r3, [pc, #208]	; (800505c <HAL_RCC_OscConfig+0x498>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fd fb56 	bl	8002640 <HAL_GetTick>
 8004f94:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fd fb52 	bl	8002640 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e04d      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004faa:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x3d4>
 8004fb6:	e045      	b.n	8005044 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb8:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_RCC_OscConfig+0x498>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fd fb3f 	bl	8002640 <HAL_GetTick>
 8004fc2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7fd fb3b 	bl	8002640 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b64      	cmp	r3, #100	; 0x64
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e036      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x402>
 8004fe4:	e02e      	b.n	8005044 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e029      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004ff2:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_RCC_OscConfig+0x494>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	429a      	cmp	r2, r3
 8005004:	d11c      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d115      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d10d      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d106      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40007000 	.word	0x40007000
 8005054:	40023870 	.word	0x40023870
 8005058:	40023800 	.word	0x40023800
 800505c:	42470060 	.word	0x42470060
 8005060:	f0bc8000 	.word	0xf0bc8000

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0d2      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b6b      	ldr	r3, [pc, #428]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b68      	ldr	r3, [pc, #416]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b66      	ldr	r3, [pc, #408]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0be      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b5c      	ldr	r3, [pc, #368]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a5b      	ldr	r2, [pc, #364]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80050d0:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a55      	ldr	r2, [pc, #340]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b53      	ldr	r3, [pc, #332]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4950      	ldr	r1, [pc, #320]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d040      	beq.n	800517c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b4a      	ldr	r3, [pc, #296]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d115      	bne.n	800513a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e085      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511a:	4b44      	ldr	r3, [pc, #272]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e079      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512a:	4b40      	ldr	r3, [pc, #256]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e071      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513a:	4b3c      	ldr	r3, [pc, #240]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4939      	ldr	r1, [pc, #228]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800514c:	f7fd fa78 	bl	8002640 <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fd fa74 	bl	8002640 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e059      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	4b30      	ldr	r3, [pc, #192]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 020c 	and.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	429a      	cmp	r2, r3
 800517a:	d1eb      	bne.n	8005154 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d20c      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e03c      	b.n	800521e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	491b      	ldr	r1, [pc, #108]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4913      	ldr	r1, [pc, #76]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80051e2:	f000 f82b 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80051e6:	4601      	mov	r1, r0
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f0:	22f0      	movs	r2, #240	; 0xf0
 80051f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	fa92 f2a2 	rbit	r2, r2
 80051fa:	60fa      	str	r2, [r7, #12]
  return result;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	fab2 f282 	clz	r2, r2
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	40d3      	lsrs	r3, r2
 8005206:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <HAL_RCC_ClockConfig+0x1cc>)
 8005208:	5cd3      	ldrb	r3, [r2, r3]
 800520a:	fa21 f303 	lsr.w	r3, r1, r3
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <HAL_RCC_ClockConfig+0x1d0>)
 8005210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_RCC_ClockConfig+0x1d4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd f9d0 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023c00 	.word	0x40023c00
 800522c:	40023800 	.word	0x40023800
 8005230:	08012274 	.word	0x08012274
 8005234:	20000010 	.word	0x20000010
 8005238:	20000014 	.word	0x20000014

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	b5b0      	push	{r4, r5, r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005242:	2100      	movs	r1, #0
 8005244:	6079      	str	r1, [r7, #4]
 8005246:	2100      	movs	r1, #0
 8005248:	60f9      	str	r1, [r7, #12]
 800524a:	2100      	movs	r1, #0
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800524e:	2100      	movs	r1, #0
 8005250:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005252:	4952      	ldr	r1, [pc, #328]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 8005254:	6889      	ldr	r1, [r1, #8]
 8005256:	f001 010c 	and.w	r1, r1, #12
 800525a:	2908      	cmp	r1, #8
 800525c:	d00d      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x3e>
 800525e:	2908      	cmp	r1, #8
 8005260:	f200 8094 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x150>
 8005264:	2900      	cmp	r1, #0
 8005266:	d002      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x32>
 8005268:	2904      	cmp	r1, #4
 800526a:	d003      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x38>
 800526c:	e08e      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800526e:	4b4c      	ldr	r3, [pc, #304]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005270:	60bb      	str	r3, [r7, #8]
       break;
 8005272:	e08e      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005276:	60bb      	str	r3, [r7, #8]
      break;
 8005278:	e08b      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800527a:	4948      	ldr	r1, [pc, #288]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 800527c:	6849      	ldr	r1, [r1, #4]
 800527e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005282:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005284:	4945      	ldr	r1, [pc, #276]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 8005286:	6849      	ldr	r1, [r1, #4]
 8005288:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800528c:	2900      	cmp	r1, #0
 800528e:	d024      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005290:	4942      	ldr	r1, [pc, #264]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 8005292:	6849      	ldr	r1, [r1, #4]
 8005294:	0989      	lsrs	r1, r1, #6
 8005296:	4608      	mov	r0, r1
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052a0:	f04f 0500 	mov.w	r5, #0
 80052a4:	ea00 0204 	and.w	r2, r0, r4
 80052a8:	ea01 0305 	and.w	r3, r1, r5
 80052ac:	493d      	ldr	r1, [pc, #244]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052ae:	fb01 f003 	mul.w	r0, r1, r3
 80052b2:	2100      	movs	r1, #0
 80052b4:	fb01 f102 	mul.w	r1, r1, r2
 80052b8:	1844      	adds	r4, r0, r1
 80052ba:	493a      	ldr	r1, [pc, #232]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052bc:	fba2 0101 	umull	r0, r1, r2, r1
 80052c0:	1863      	adds	r3, r4, r1
 80052c2:	4619      	mov	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	f7fb ff10 	bl	80010f0 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e04a      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	ea02 0400 	and.w	r4, r2, r0
 80052f2:	ea03 0501 	and.w	r5, r3, r1
 80052f6:	4620      	mov	r0, r4
 80052f8:	4629      	mov	r1, r5
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	014b      	lsls	r3, r1, #5
 8005304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005308:	0142      	lsls	r2, r0, #5
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	1b00      	subs	r0, r0, r4
 8005310:	eb61 0105 	sbc.w	r1, r1, r5
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	018b      	lsls	r3, r1, #6
 800531e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005322:	0182      	lsls	r2, r0, #6
 8005324:	1a12      	subs	r2, r2, r0
 8005326:	eb63 0301 	sbc.w	r3, r3, r1
 800532a:	f04f 0000 	mov.w	r0, #0
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	00d9      	lsls	r1, r3, #3
 8005334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005338:	00d0      	lsls	r0, r2, #3
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	1912      	adds	r2, r2, r4
 8005340:	eb45 0303 	adc.w	r3, r5, r3
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	0299      	lsls	r1, r3, #10
 800534e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005352:	0290      	lsls	r0, r2, #10
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f7fb fec4 	bl	80010f0 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_RCC_GetSysClockFreq+0x160>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	60bb      	str	r3, [r7, #8]
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800538e:	60bb      	str	r3, [r7, #8]
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	68bb      	ldr	r3, [r7, #8]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bdb0      	pop	{r4, r5, r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	00f42400 	.word	0x00f42400
 80053a4:	017d7840 	.word	0x017d7840

080053a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d14c      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053cc:	4b6d      	ldr	r3, [pc, #436]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d2:	f7fd f935 	bl	8002640 <HAL_GetTick>
 80053d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053da:	f7fd f931 	bl	8002640 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0c7      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053ec:	4b66      	ldr	r3, [pc, #408]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	fa92 f2a2 	rbit	r2, r2
 8005408:	613a      	str	r2, [r7, #16]
  return result;
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	fab2 f282 	clz	r2, r2
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	fa03 f202 	lsl.w	r2, r3, r2
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800541e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	fa91 f1a1 	rbit	r1, r1
 8005426:	61b9      	str	r1, [r7, #24]
  return result;
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	fab1 f181 	clz	r1, r1
 800542e:	b2c9      	uxtb	r1, r1
 8005430:	408b      	lsls	r3, r1
 8005432:	4955      	ldr	r1, [pc, #340]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800543a:	4b52      	ldr	r3, [pc, #328]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005440:	f7fd f8fe 	bl	8002640 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005448:	f7fd f8fa 	bl	8002640 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e090      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8083 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	4a42      	ldr	r2, [pc, #264]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	6413      	str	r3, [r2, #64]	; 0x40
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005490:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3d      	ldr	r2, [pc, #244]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549a:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800549c:	f7fd f8d0 	bl	8002640 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054a4:	f7fd f8cc 	bl	8002640 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e062      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054b6:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054c2:	4b31      	ldr	r3, [pc, #196]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02f      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	6a3a      	ldr	r2, [r7, #32]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d028      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e0:	4b29      	ldr	r3, [pc, #164]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e8:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ea:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054f6:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d114      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005508:	f7fd f89a 	bl	8002640 <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550e:	e00a      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fd f896 	bl	8002640 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e02a      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553e:	d10d      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
 800555a:	e005      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005562:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005566:	6093      	str	r3, [r2, #8]
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800556a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005574:	4904      	ldr	r1, [pc, #16]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	42470068 	.word	0x42470068
 8005588:	40023800 	.word	0x40023800
 800558c:	40007000 	.word	0x40007000
 8005590:	42470e40 	.word	0x42470e40

08005594 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e07c      	b.n	80056a0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7f5b      	ldrb	r3, [r3, #29]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fdce 	bl	8002158 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	22ca      	movs	r2, #202	; 0xca
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2253      	movs	r2, #83	; 0x53
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 faec 	bl	8005bb0 <RTC_EnterInitMode>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	22ff      	movs	r2, #255	; 0xff
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e057      	b.n	80056a0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005602:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	041a      	lsls	r2, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564e:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fa85 	bl	8005b60 <HAL_RTC_WaitForSynchro>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e018      	b.n	80056a0 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	7f1b      	ldrb	r3, [r3, #28]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_RTC_SetTime+0x1c>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0a3      	b.n	800580c <HAL_RTC_SetTime+0x164>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2202      	movs	r2, #2
 80056ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d126      	bne.n	8005724 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fa8a 	bl	8005c08 <RTC_ByteToBcd2>
 80056f4:	4603      	mov	r3, r0
 80056f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fa83 	bl	8005c08 <RTC_ByteToBcd2>
 8005702:	4603      	mov	r3, r0
 8005704:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005706:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	789b      	ldrb	r3, [r3, #2]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fa7b 	bl	8005c08 <RTC_ByteToBcd2>
 8005712:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005714:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e018      	b.n	8005756 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d102      	bne.n	8005738 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005744:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800574a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	78db      	ldrb	r3, [r3, #3]
 8005750:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	22ca      	movs	r2, #202	; 0xca
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2253      	movs	r2, #83	; 0x53
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa22 	bl	8005bb0 <RTC_EnterInitMode>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	22ff      	movs	r2, #255	; 0xff
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2204      	movs	r2, #4
 800577e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e040      	b.n	800580c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005794:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005798:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057a8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d0:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f9c4 	bl	8005b60 <HAL_RTC_WaitForSynchro>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	22ff      	movs	r2, #255	; 0xff
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e00a      	b.n	800580c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800580a:	2300      	movs	r3, #0
  }
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd90      	pop	{r4, r7, pc}

08005814 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	7f1b      	ldrb	r3, [r3, #28]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_RTC_SetDate+0x1c>
 800582c:	2302      	movs	r3, #2
 800582e:	e08d      	b.n	800594c <HAL_RTC_SetDate+0x138>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10e      	bne.n	8005860 <HAL_RTC_SetDate+0x4c>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	f023 0310 	bic.w	r3, r3, #16
 8005856:	b2db      	uxtb	r3, r3
 8005858:	330a      	adds	r3, #10
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11c      	bne.n	80058a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	78db      	ldrb	r3, [r3, #3]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f9cc 	bl	8005c08 <RTC_ByteToBcd2>
 8005870:	4603      	mov	r3, r0
 8005872:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9c5 	bl	8005c08 <RTC_ByteToBcd2>
 800587e:	4603      	mov	r3, r0
 8005880:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005882:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	789b      	ldrb	r3, [r3, #2]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f9bd 	bl	8005c08 <RTC_ByteToBcd2>
 800588e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005890:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e00e      	b.n	80058be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80058b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	22ca      	movs	r2, #202	; 0xca
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2253      	movs	r2, #83	; 0x53
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f96e 	bl	8005bb0 <RTC_EnterInitMode>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	22ff      	movs	r2, #255	; 0xff
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2204      	movs	r2, #4
 80058e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e02c      	b.n	800594c <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005900:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005910:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f924 	bl	8005b60 <HAL_RTC_WaitForSynchro>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2204      	movs	r2, #4
 800592a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e00a      	b.n	800594c <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	22ff      	movs	r2, #255	; 0xff
 800593c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800594a:	2300      	movs	r3, #0
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	bd90      	pop	{r4, r7, pc}

08005954 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	7f1b      	ldrb	r3, [r3, #28]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_RTC_SetAlarm+0x20>
 8005970:	2302      	movs	r3, #2
 8005972:	e0f1      	b.n	8005b58 <HAL_RTC_SetAlarm+0x204>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2202      	movs	r2, #2
 800597e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d136      	bne.n	80059f4 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f932 	bl	8005c08 <RTC_ByteToBcd2>
 80059a4:	4603      	mov	r3, r0
 80059a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f92b 	bl	8005c08 <RTC_ByteToBcd2>
 80059b2:	4603      	mov	r3, r0
 80059b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80059b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	789b      	ldrb	r3, [r3, #2]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f923 	bl	8005c08 <RTC_ByteToBcd2>
 80059c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80059c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	78db      	ldrb	r3, [r3, #3]
 80059cc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	7d1b      	ldrb	r3, [r3, #20]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f916 	bl	8005c08 <RTC_ByteToBcd2>
 80059dc:	4603      	mov	r3, r0
 80059de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e022      	b.n	8005a3a <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2200      	movs	r2, #0
 8005a06:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a14:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	78db      	ldrb	r3, [r3, #3]
 8005a20:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	7d1b      	ldrb	r3, [r3, #20]
 8005a28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	22ca      	movs	r2, #202	; 0xca
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2253      	movs	r2, #83	; 0x53
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a52:	d13b      	bne.n	8005acc <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a62:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a72:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a74:	f7fc fde4 	bl	8002640 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005a7a:	e013      	b.n	8005aa4 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a7c:	f7fc fde0 	bl	8002640 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8a:	d90b      	bls.n	8005aa4 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2203      	movs	r2, #3
 8005a98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e059      	b.n	8005b58 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0e4      	beq.n	8005a7c <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	e03a      	b.n	8005b42 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ada:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aea:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aec:	f7fc fda8 	bl	8002640 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005af2:	e013      	b.n	8005b1c <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005af4:	f7fc fda4 	bl	8002640 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b02:	d90b      	bls.n	8005b1c <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e01d      	b.n	8005b58 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0e4      	beq.n	8005af4 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b40:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	22ff      	movs	r2, #255	; 0xff
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b7c:	f7fc fd60 	bl	8002640 <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b82:	e009      	b.n	8005b98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b84:	f7fc fd5c 	bl	8002640 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b92:	d901      	bls.n	8005b98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e007      	b.n	8005ba8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ee      	beq.n	8005b84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bd4:	f7fc fd34 	bl	8002640 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bda:	e009      	b.n	8005bf0 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bdc:	f7fc fd30 	bl	8002640 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bea:	d901      	bls.n	8005bf0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e007      	b.n	8005c00 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0ee      	beq.n	8005bdc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8005c16:	e005      	b.n	8005c24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	3b0a      	subs	r3, #10
 8005c22:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d8f6      	bhi.n	8005c18 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b2db      	uxtb	r3, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	7f1b      	ldrb	r3, [r3, #28]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e081      	b.n	8005d62 <HAL_RTCEx_SetWakeUpTimer+0x120>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2202      	movs	r2, #2
 8005c68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ca      	movs	r2, #202	; 0xca
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2253      	movs	r2, #83	; 0x53
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01e      	beq.n	8005cc6 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8005c88:	f7fc fcda 	bl	8002640 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8005c8e:	e013      	b.n	8005cb8 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c90:	f7fc fcd6 	bl	8002640 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c9e:	d90b      	bls.n	8005cb8 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2203      	movs	r2, #3
 8005cac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e054      	b.n	8005d62 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e4      	bne.n	8005c90 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd6:	f7fc fcb3 	bl	8002640 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005cdc:	e013      	b.n	8005d06 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cde:	f7fc fcaf 	bl	8002640 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cec:	d90b      	bls.n	8005d06 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	22ff      	movs	r2, #255	; 0xff
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e02d      	b.n	8005d62 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0e4      	beq.n	8005cde <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0207 	bic.w	r2, r2, #7
 8005d22:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6899      	ldr	r1, [r3, #8]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	22ff      	movs	r2, #255	; 0xff
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e041      	b.n	8005e00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fc f9f7 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 facf 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e041      	b.n	8005e9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f839 	bl	8005ea6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f000 fa80 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_TIM_PWM_Start+0x24>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e022      	b.n	8005f22 <HAL_TIM_PWM_Start+0x6a>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d109      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0x3e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	bf14      	ite	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	e015      	b.n	8005f22 <HAL_TIM_PWM_Start+0x6a>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d109      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x58>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e008      	b.n	8005f22 <HAL_TIM_PWM_Start+0x6a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	bf14      	ite	ne
 8005f1c:	2301      	movne	r3, #1
 8005f1e:	2300      	moveq	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e07c      	b.n	8006024 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x82>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	e013      	b.n	8005f62 <HAL_TIM_PWM_Start+0xaa>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start+0x92>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	e00b      	b.n	8005f62 <HAL_TIM_PWM_Start+0xaa>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Start+0xa2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f58:	e003      	b.n	8005f62 <HAL_TIM_PWM_Start+0xaa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fcce 	bl	800690c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2d      	ldr	r2, [pc, #180]	; (800602c <HAL_TIM_PWM_Start+0x174>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_PWM_Start+0xcc>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <HAL_TIM_PWM_Start+0x178>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d101      	bne.n	8005f88 <HAL_TIM_PWM_Start+0xd0>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_TIM_PWM_Start+0xd2>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a22      	ldr	r2, [pc, #136]	; (800602c <HAL_TIM_PWM_Start+0x174>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_TIM_PWM_Start+0x17c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <HAL_TIM_PWM_Start+0x180>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIM_PWM_Start+0x184>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	; (8006030 <HAL_TIM_PWM_Start+0x178>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <HAL_TIM_PWM_Start+0x188>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIM_PWM_Start+0x136>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <HAL_TIM_PWM_Start+0x18c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d111      	bne.n	8006012 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b06      	cmp	r3, #6
 8005ffe:	d010      	beq.n	8006022 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	e007      	b.n	8006022 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40010000 	.word	0x40010000
 8006030:	40010400 	.word	0x40010400
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40014000 	.word	0x40014000
 8006044:	40001800 	.word	0x40001800

08006048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800605e:	2302      	movs	r3, #2
 8006060:	e0ac      	b.n	80061bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	f200 809f 	bhi.w	80061b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080061b1 	.word	0x080061b1
 8006080:	080061b1 	.word	0x080061b1
 8006084:	080061b1 	.word	0x080061b1
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080061b1 	.word	0x080061b1
 8006090:	080061b1 	.word	0x080061b1
 8006094:	080061b1 	.word	0x080061b1
 8006098:	0800612f 	.word	0x0800612f
 800609c:	080061b1 	.word	0x080061b1
 80060a0:	080061b1 	.word	0x080061b1
 80060a4:	080061b1 	.word	0x080061b1
 80060a8:	0800616f 	.word	0x0800616f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f9e8 	bl	8006488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	619a      	str	r2, [r3, #24]
      break;
 80060ea:	e062      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa38 	bl	8006568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	619a      	str	r2, [r3, #24]
      break;
 800612c:	e041      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa8b 	bl	8006650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0208 	orr.w	r2, r2, #8
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0204 	bic.w	r2, r2, #4
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	61da      	str	r2, [r3, #28]
      break;
 800616c:	e021      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fadf 	bl	8006738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	021a      	lsls	r2, r3, #8
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	61da      	str	r2, [r3, #28]
      break;
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIM_ConfigClockSource+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0b3      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x180>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d03e      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0xd0>
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	f200 8087 	bhi.w	800632c <HAL_TIM_ConfigClockSource+0x168>
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	f000 8085 	beq.w	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d87f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800622c:	2b70      	cmp	r3, #112	; 0x70
 800622e:	d01a      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0xa2>
 8006230:	2b70      	cmp	r3, #112	; 0x70
 8006232:	d87b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d050      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x116>
 8006238:	2b60      	cmp	r3, #96	; 0x60
 800623a:	d877      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800623c:	2b50      	cmp	r3, #80	; 0x50
 800623e:	d03c      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0xf6>
 8006240:	2b50      	cmp	r3, #80	; 0x50
 8006242:	d873      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d058      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x136>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d86f      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	d064      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006250:	2b30      	cmp	r3, #48	; 0x30
 8006252:	d86b      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d060      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d867      	bhi.n	800632c <HAL_TIM_ConfigClockSource+0x168>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
 8006260:	2b10      	cmp	r3, #16
 8006262:	d05a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006264:	e062      	b.n	800632c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6899      	ldr	r1, [r3, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f000 fb2a 	bl	80068ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006288:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	609a      	str	r2, [r3, #8]
      break;
 8006292:	e04e      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6899      	ldr	r1, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f000 fb13 	bl	80068ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b6:	609a      	str	r2, [r3, #8]
      break;
 80062b8:	e03b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 fa8a 	bl	80067e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2150      	movs	r1, #80	; 0x50
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fae1 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 80062d8:	e02b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 faa8 	bl	800683c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2160      	movs	r1, #96	; 0x60
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fad1 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 80062f8:	e01b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fa6a 	bl	80067e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2140      	movs	r1, #64	; 0x40
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fac1 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006318:	e00b      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fab8 	bl	800689a <TIM_ITRx_SetConfig>
        break;
 800632a:	e002      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006330:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a3f      	ldr	r2, [pc, #252]	; (800645c <TIM_Base_SetConfig+0x110>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d013      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d00f      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <TIM_Base_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a3b      	ldr	r2, [pc, #236]	; (8006464 <TIM_Base_SetConfig+0x118>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a3a      	ldr	r2, [pc, #232]	; (8006468 <TIM_Base_SetConfig+0x11c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a39      	ldr	r2, [pc, #228]	; (800646c <TIM_Base_SetConfig+0x120>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d108      	bne.n	800639e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2e      	ldr	r2, [pc, #184]	; (800645c <TIM_Base_SetConfig+0x110>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ac:	d027      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2b      	ldr	r2, [pc, #172]	; (8006460 <TIM_Base_SetConfig+0x114>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d023      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <TIM_Base_SetConfig+0x118>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a29      	ldr	r2, [pc, #164]	; (8006468 <TIM_Base_SetConfig+0x11c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a28      	ldr	r2, [pc, #160]	; (800646c <TIM_Base_SetConfig+0x120>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d017      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <TIM_Base_SetConfig+0x124>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a26      	ldr	r2, [pc, #152]	; (8006474 <TIM_Base_SetConfig+0x128>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a25      	ldr	r2, [pc, #148]	; (8006478 <TIM_Base_SetConfig+0x12c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a24      	ldr	r2, [pc, #144]	; (800647c <TIM_Base_SetConfig+0x130>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <TIM_Base_SetConfig+0x134>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a22      	ldr	r2, [pc, #136]	; (8006484 <TIM_Base_SetConfig+0x138>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <TIM_Base_SetConfig+0x110>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xf8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a0b      	ldr	r2, [pc, #44]	; (800646c <TIM_Base_SetConfig+0x120>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800
 800647c:	40001800 	.word	0x40001800
 8006480:	40001c00 	.word	0x40001c00
 8006484:	40002000 	.word	0x40002000

08006488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0302 	bic.w	r3, r3, #2
 80064d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a20      	ldr	r2, [pc, #128]	; (8006560 <TIM_OC1_SetConfig+0xd8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC1_SetConfig+0x64>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <TIM_OC1_SetConfig+0xdc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d10c      	bne.n	8006506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 0308 	bic.w	r3, r3, #8
 80064f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a15      	ldr	r2, [pc, #84]	; (8006560 <TIM_OC1_SetConfig+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC1_SetConfig+0x8e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a14      	ldr	r2, [pc, #80]	; (8006564 <TIM_OC1_SetConfig+0xdc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d111      	bne.n	800653a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400

08006568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0210 	bic.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0320 	bic.w	r3, r3, #32
 80065b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a21      	ldr	r2, [pc, #132]	; (8006648 <TIM_OC2_SetConfig+0xe0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC2_SetConfig+0x68>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a20      	ldr	r2, [pc, #128]	; (800664c <TIM_OC2_SetConfig+0xe4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10d      	bne.n	80065ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a16      	ldr	r2, [pc, #88]	; (8006648 <TIM_OC2_SetConfig+0xe0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x94>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <TIM_OC2_SetConfig+0xe4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d113      	bne.n	8006624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400

08006650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a21      	ldr	r2, [pc, #132]	; (8006730 <TIM_OC3_SetConfig+0xe0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC3_SetConfig+0x66>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a20      	ldr	r2, [pc, #128]	; (8006734 <TIM_OC3_SetConfig+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10d      	bne.n	80066d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a16      	ldr	r2, [pc, #88]	; (8006730 <TIM_OC3_SetConfig+0xe0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC3_SetConfig+0x92>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <TIM_OC3_SetConfig+0xe4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d113      	bne.n	800670a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000
 8006734:	40010400 	.word	0x40010400

08006738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <TIM_OC4_SetConfig+0xa0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC4_SetConfig+0x68>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <TIM_OC4_SetConfig+0xa4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d109      	bne.n	80067b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	019b      	lsls	r3, r3, #6
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 030a 	bic.w	r3, r3, #10
 800681c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f023 0210 	bic.w	r2, r3, #16
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	031b      	lsls	r3, r3, #12
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f043 0307 	orr.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	021a      	lsls	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	609a      	str	r2, [r3, #8]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2201      	movs	r2, #1
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	43db      	mvns	r3, r3
 800692e:	401a      	ands	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	fa01 f303 	lsl.w	r3, r1, r3
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006968:	2302      	movs	r3, #2
 800696a:	e05a      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d022      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d01d      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a14      	ldr	r2, [pc, #80]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40001800 	.word	0x40001800

08006a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e03d      	b.n	8006ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aea:	b084      	sub	sp, #16
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	f107 001c 	add.w	r0, r7, #28
 8006af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d122      	bne.n	8006b48 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d105      	bne.n	8006b3c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f98f 	bl	8006e60 <USB_CoreReset>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e010      	b.n	8006b6a <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f983 	bl	8006e60 <USB_CoreReset>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10b      	bne.n	8006b88 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f043 0206 	orr.w	r2, r3, #6
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f043 0220 	orr.w	r2, r3, #32
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b94:	b004      	add	sp, #16
 8006b96:	4770      	bx	lr

08006b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f043 0201 	orr.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f023 0201 	bic.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d115      	bne.n	8006c26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c06:	2001      	movs	r0, #1
 8006c08:	f7fb fd24 	bl	8002654 <HAL_Delay>
      ms++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f916 	bl	8006e44 <USB_GetMode>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d01e      	beq.n	8006c5c <USB_SetCurrentMode+0x84>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b31      	cmp	r3, #49	; 0x31
 8006c22:	d9f0      	bls.n	8006c06 <USB_SetCurrentMode+0x2e>
 8006c24:	e01a      	b.n	8006c5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d115      	bne.n	8006c58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f7fb fd0b 	bl	8002654 <HAL_Delay>
      ms++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8fd 	bl	8006e44 <USB_GetMode>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <USB_SetCurrentMode+0x84>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b31      	cmp	r3, #49	; 0x31
 8006c54:	d9f0      	bls.n	8006c38 <USB_SetCurrentMode+0x60>
 8006c56:	e001      	b.n	8006c5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e005      	b.n	8006c68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b32      	cmp	r3, #50	; 0x32
 8006c60:	d101      	bne.n	8006c66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <USB_FlushTxFifo+0x44>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e006      	b.n	8006caa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d0f0      	beq.n	8006c8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	00030d40 	.word	0x00030d40

08006cb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <USB_FlushRxFifo+0x3c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e006      	b.n	8006cea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d0f0      	beq.n	8006cca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr
 8006cf4:	00030d40 	.word	0x00030d40

08006cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	460b      	mov	r3, r1
 8006d08:	71fb      	strb	r3, [r7, #7]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d123      	bne.n	8006d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	3303      	adds	r3, #3
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e018      	b.n	8006d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	031a      	lsls	r2, r3, #12
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3301      	adds	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	3301      	adds	r3, #1
 8006d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3e2      	bcc.n	8006d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b08b      	sub	sp, #44	; 0x2c
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	623b      	str	r3, [r7, #32]
 8006d9c:	e014      	b.n	8006dc8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	601a      	str	r2, [r3, #0]
    pDest++;
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	3301      	adds	r3, #1
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	3301      	adds	r3, #1
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	3301      	adds	r3, #1
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	6a3a      	ldr	r2, [r7, #32]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3e6      	bcc.n	8006d9e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dd0:	8bfb      	ldrh	r3, [r7, #30]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01e      	beq.n	8006e14 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de0:	461a      	mov	r2, r3
 8006de2:	f107 0310 	add.w	r3, r7, #16
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	fa22 f303 	lsr.w	r3, r2, r3
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	701a      	strb	r2, [r3, #0]
      i++;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	3301      	adds	r3, #1
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e08:	8bfb      	ldrh	r3, [r7, #30]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e0e:	8bfb      	ldrh	r3, [r7, #30]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1ea      	bne.n	8006dea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	372c      	adds	r7, #44	; 0x2c
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4013      	ands	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e38:	68fb      	ldr	r3, [r7, #12]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0301 	and.w	r3, r3, #1
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr
	...

08006e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a12      	ldr	r2, [pc, #72]	; (8006ec0 <USB_CoreReset+0x60>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e01b      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	daf2      	bge.n	8006e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <USB_CoreReset+0x60>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d0f0      	beq.n	8006e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr
 8006ec0:	00030d40 	.word	0x00030d40

08006ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	f107 001c 	add.w	r0, r7, #28
 8006ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d10a      	bne.n	8006f32 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f2a:	f043 0304 	orr.w	r3, r3, #4
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e014      	b.n	8006f5c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f40:	f023 0304 	bic.w	r3, r3, #4
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e009      	b.n	8006f5c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f56:	f023 0304 	bic.w	r3, r3, #4
 8006f5a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006f5c:	2110      	movs	r1, #16
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fe86 	bl	8006c70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff fea7 	bl	8006cb8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	e015      	b.n	8006f9c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d3e5      	bcc.n	8006f70 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <USB_HostInit+0x154>)
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a13      	ldr	r2, [pc, #76]	; (800701c <USB_HostInit+0x158>)
 8006fd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fd4:	e009      	b.n	8006fea <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2280      	movs	r2, #128	; 0x80
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a10      	ldr	r2, [pc, #64]	; (8007020 <USB_HostInit+0x15c>)
 8006fe0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <USB_HostInit+0x160>)
 8006fe6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d105      	bne.n	8006ffc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f043 0210 	orr.w	r2, r3, #16
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	4b09      	ldr	r3, [pc, #36]	; (8007028 <USB_HostInit+0x164>)
 8007002:	4313      	orrs	r3, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr
 8007018:	01000200 	.word	0x01000200
 800701c:	00e00300 	.word	0x00e00300
 8007020:	00600080 	.word	0x00600080
 8007024:	004000e0 	.word	0x004000e0
 8007028:	a3200008 	.word	0xa3200008

0800702c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d107      	bne.n	800707e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007074:	461a      	mov	r2, r3
 8007076:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800707a:	6053      	str	r3, [r2, #4]
 800707c:	e009      	b.n	8007092 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d106      	bne.n	8007092 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800708a:	461a      	mov	r2, r3
 800708c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007090:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070ce:	2064      	movs	r0, #100	; 0x64
 80070d0:	f7fb fac0 	bl	8002654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070e2:	200a      	movs	r0, #10
 80070e4:	f7fb fab6 	bl	8002654 <HAL_Delay>

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007116:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <USB_DriveVbus+0x44>
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d106      	bne.n	8007136 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007134:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007140:	d109      	bne.n	8007156 <USB_DriveVbus+0x64>
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007154:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	0c5b      	lsrs	r3, r3, #17
 8007180:	f003 0303 	and.w	r3, r3, #3
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	b29b      	uxth	r3, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
	...

080071b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	70fb      	strb	r3, [r7, #3]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70bb      	strb	r3, [r7, #2]
 80071c6:	4613      	mov	r3, r2
 80071c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	461a      	mov	r2, r3
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d87e      	bhi.n	80072ec <USB_HC_Init+0x13c>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <USB_HC_Init+0x44>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007205 	.word	0x08007205
 80071f8:	080072af 	.word	0x080072af
 80071fc:	08007205 	.word	0x08007205
 8007200:	08007271 	.word	0x08007271
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	461a      	mov	r2, r3
 8007212:	f240 439d 	movw	r3, #1181	; 0x49d
 8007216:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da10      	bge.n	8007242 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	440a      	add	r2, r1
 8007236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007240:	e057      	b.n	80072f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d051      	beq.n	80072f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	78fa      	ldrb	r2, [r7, #3]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	440a      	add	r2, r1
 8007264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800726c:	60d3      	str	r3, [r2, #12]
      break;
 800726e:	e040      	b.n	80072f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4413      	add	r3, r2
 8007278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727c:	461a      	mov	r2, r3
 800727e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007282:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007284:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007288:	2b00      	cmp	r3, #0
 800728a:	da34      	bge.n	80072f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072ac:	e023      	b.n	80072f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	461a      	mov	r2, r3
 80072bc:	f240 2325 	movw	r3, #549	; 0x225
 80072c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da17      	bge.n	80072fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072ea:	e006      	b.n	80072fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	77fb      	strb	r3, [r7, #31]
      break;
 80072f0:	e004      	b.n	80072fc <USB_HC_Init+0x14c>
      break;
 80072f2:	bf00      	nop
 80072f4:	e002      	b.n	80072fc <USB_HC_Init+0x14c>
      break;
 80072f6:	bf00      	nop
 80072f8:	e000      	b.n	80072fc <USB_HC_Init+0x14c>
      break;
 80072fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	2101      	movs	r1, #1
 800730c:	fa01 f303 	lsl.w	r3, r1, r3
 8007310:	6939      	ldr	r1, [r7, #16]
 8007312:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007316:	4313      	orrs	r3, r2
 8007318:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800732a:	2b00      	cmp	r3, #0
 800732c:	da03      	bge.n	8007336 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800732e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	e001      	b.n	800733a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff ff11 	bl	8007162 <USB_GetHostSpeed>
 8007340:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007342:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007346:	2b02      	cmp	r3, #2
 8007348:	d106      	bne.n	8007358 <USB_HC_Init+0x1a8>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d003      	beq.n	8007358 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e001      	b.n	800735c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800735c:	787b      	ldrb	r3, [r7, #1]
 800735e:	059b      	lsls	r3, r3, #22
 8007360:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007364:	78bb      	ldrb	r3, [r7, #2]
 8007366:	02db      	lsls	r3, r3, #11
 8007368:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800736c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800736e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007372:	049b      	lsls	r3, r3, #18
 8007374:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007378:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800737a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800737c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007380:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	0159      	lsls	r1, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	440b      	add	r3, r1
 800738e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007392:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007398:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800739a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d10f      	bne.n	80073c2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	; 0x30
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d02d      	beq.n	8007452 <USB_HC_StartXfer+0x86>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	791b      	ldrb	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d129      	bne.n	8007452 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d117      	bne.n	8007434 <USB_HC_StartXfer+0x68>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	79db      	ldrb	r3, [r3, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <USB_HC_StartXfer+0x48>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	79db      	ldrb	r3, [r3, #7]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d10f      	bne.n	8007434 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	4413      	add	r3, r2
 800741c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	440a      	add	r2, r1
 800742a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <USB_HC_StartXfer+0x86>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d107      	bne.n	8007452 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fa2d 	bl	80078a8 <USB_DoPing>
      return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e0f8      	b.n	8007644 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d018      	beq.n	800748c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	8912      	ldrh	r2, [r2, #8]
 8007462:	4413      	add	r3, r2
 8007464:	3b01      	subs	r3, #1
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	8912      	ldrh	r2, [r2, #8]
 800746a:	fbb3 f3f2 	udiv	r3, r3, r2
 800746e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007470:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007472:	8b7b      	ldrh	r3, [r7, #26]
 8007474:	429a      	cmp	r2, r3
 8007476:	d90b      	bls.n	8007490 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007478:	8b7b      	ldrh	r3, [r7, #26]
 800747a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800747c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	8912      	ldrh	r2, [r2, #8]
 8007482:	fb02 f203 	mul.w	r2, r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	611a      	str	r2, [r3, #16]
 800748a:	e001      	b.n	8007490 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800748c:	2301      	movs	r3, #1
 800748e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	8912      	ldrh	r2, [r2, #8]
 800749e:	fb02 f203 	mul.w	r2, r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	611a      	str	r2, [r3, #16]
 80074a6:	e003      	b.n	80074b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074ba:	04d9      	lsls	r1, r3, #19
 80074bc:	4b63      	ldr	r3, [pc, #396]	; (800764c <USB_HC_StartXfer+0x280>)
 80074be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	7a9b      	ldrb	r3, [r3, #10]
 80074c6:	075b      	lsls	r3, r3, #29
 80074c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	0148      	lsls	r0, r1, #5
 80074d0:	6a39      	ldr	r1, [r7, #32]
 80074d2:	4401      	add	r1, r0
 80074d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	68d9      	ldr	r1, [r3, #12]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	460a      	mov	r2, r1
 80074f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	440a      	add	r2, r1
 8007524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007528:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800752c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	4413      	add	r3, r2
 8007536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	7e7b      	ldrb	r3, [r7, #25]
 800753e:	075b      	lsls	r3, r3, #29
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	0148      	lsls	r0, r1, #5
 8007544:	6a39      	ldr	r1, [r7, #32]
 8007546:	4401      	add	r1, r0
 8007548:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800754c:	4313      	orrs	r3, r2
 800754e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	4413      	add	r3, r2
 8007558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007566:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	e003      	b.n	8007582 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007580:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007588:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007596:	461a      	mov	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e04e      	b.n	8007644 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	78db      	ldrb	r3, [r3, #3]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d149      	bne.n	8007642 <USB_HC_StartXfer+0x276>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d045      	beq.n	8007642 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	79db      	ldrb	r3, [r3, #7]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d830      	bhi.n	8007620 <USB_HC_StartXfer+0x254>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USB_HC_StartXfer+0x1f8>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	080075d5 	.word	0x080075d5
 80075d0:	080075f9 	.word	0x080075f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	3303      	adds	r3, #3
 80075da:	089b      	lsrs	r3, r3, #2
 80075dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075de:	8afa      	ldrh	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d91c      	bls.n	8007624 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f043 0220 	orr.w	r2, r3, #32
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075f6:	e015      	b.n	8007624 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	3303      	adds	r3, #3
 80075fe:	089b      	lsrs	r3, r3, #2
 8007600:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007602:	8afa      	ldrh	r2, [r7, #22]
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	b29b      	uxth	r3, r3
 800760e:	429a      	cmp	r2, r3
 8007610:	d90a      	bls.n	8007628 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	619a      	str	r2, [r3, #24]
        }
        break;
 800761e:	e003      	b.n	8007628 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007620:	bf00      	nop
 8007622:	e002      	b.n	800762a <USB_HC_StartXfer+0x25e>
        break;
 8007624:	bf00      	nop
 8007626:	e000      	b.n	800762a <USB_HC_StartXfer+0x25e>
        break;
 8007628:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68d9      	ldr	r1, [r3, #12]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	785a      	ldrb	r2, [r3, #1]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	b29b      	uxth	r3, r3
 8007638:	2000      	movs	r0, #0
 800763a:	9000      	str	r0, [sp, #0]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fb5b 	bl	8006cf8 <USB_WritePacket>
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	1ff80000 	.word	0x1ff80000

08007650 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	b29b      	uxth	r3, r3
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007670:	b480      	push	{r7}
 8007672:	b089      	sub	sp, #36	; 0x24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	0c9b      	lsrs	r3, r3, #18
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	0fdb      	lsrs	r3, r3, #31
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d104      	bne.n	80076ca <USB_HC_Halt+0x5a>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e0e8      	b.n	800789c <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <USB_HC_Halt+0x66>
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d173      	bne.n	80077be <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f040 80cb 	bne.w	800789a <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d143      	bne.n	8007798 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	440a      	add	r2, r1
 8007726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800772e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	440a      	add	r2, r1
 8007746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800774a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800774e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	440a      	add	r2, r1
 8007766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800776e:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800777c:	d81d      	bhi.n	80077ba <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007794:	d0ec      	beq.n	8007770 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007796:	e080      	b.n	800789a <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077b8:	e06f      	b.n	800789a <USB_HC_Halt+0x22a>
            break;
 80077ba:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077bc:	e06d      	b.n	800789a <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d143      	bne.n	8007876 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	440a      	add	r2, r1
 8007804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800780c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	440a      	add	r2, r1
 8007824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800782c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4413      	add	r3, r2
 8007836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	440a      	add	r2, r1
 8007844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800784c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800785a:	d81d      	bhi.n	8007898 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800786e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007872:	d0ec      	beq.n	800784e <USB_HC_Halt+0x1de>
 8007874:	e011      	b.n	800789a <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	440a      	add	r2, r1
 800788c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e000      	b.n	800789a <USB_HC_Halt+0x22a>
          break;
 8007898:	bf00      	nop
    }
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3724      	adds	r7, #36	; 0x24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
	...

080078a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80078bc:	2301      	movs	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	04da      	lsls	r2, r3, #19
 80078c4:	4b14      	ldr	r3, [pc, #80]	; (8007918 <USB_DoPing+0x70>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007906:	461a      	mov	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr
 8007918:	1ff80000 	.word	0x1ff80000

0800791c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff f943 	bl	8006bb8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007932:	2110      	movs	r1, #16
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff f99b 	bl	8006c70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff f9bc 	bl	8006cb8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	e01f      	b.n	8007986 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800795c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007964:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800796c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	3301      	adds	r3, #1
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b0f      	cmp	r3, #15
 800798a:	d9dc      	bls.n	8007946 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800798c:	2300      	movs	r3, #0
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	e034      	b.n	80079fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c6:	461a      	mov	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	3301      	adds	r3, #1
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079d8:	d80c      	bhi.n	80079f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f0:	d0ec      	beq.n	80079cc <USB_StopHost+0xb0>
 80079f2:	e000      	b.n	80079f6 <USB_StopHost+0xda>
        break;
 80079f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b0f      	cmp	r3, #15
 8007a00:	d9c7      	bls.n	8007992 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007a28:	4904      	ldr	r1, [pc, #16]	; (8007a3c <MX_FATFS_Init+0x18>)
 8007a2a:	4805      	ldr	r0, [pc, #20]	; (8007a40 <MX_FATFS_Init+0x1c>)
 8007a2c:	f005 faa6 	bl	800cf7c <FATFS_LinkDriver>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <MX_FATFS_Init+0x20>)
 8007a36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a38:	bf00      	nop
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200006b8 	.word	0x200006b8
 8007a40:	08012314 	.word	0x08012314
 8007a44:	20002718 	.word	0x20002718

08007a48 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af04      	add	r7, sp, #16
 8007a4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a56:	7919      	ldrb	r1, [r3, #4]
 8007a58:	2350      	movs	r3, #80	; 0x50
 8007a5a:	2206      	movs	r2, #6
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fc4e 	bl	80092fe <USBH_FindInterface>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2bff      	cmp	r3, #255	; 0xff
 8007a6a:	d002      	beq.n	8007a72 <USBH_MSC_InterfaceInit+0x2a>
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d901      	bls.n	8007a76 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	e0ef      	b.n	8007c56 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fc24 	bl	80092c8 <USBH_SelectInterface>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0e3      	b.n	8007c56 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8007a94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a98:	f005 ff84 	bl	800d9a4 <malloc>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e0d0      	b.n	8007c56 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab8:	2100      	movs	r1, #0
 8007aba:	68b8      	ldr	r0, [r7, #8]
 8007abc:	f005 ff90 	bl	800d9e0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	211a      	movs	r1, #26
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da16      	bge.n	8007b06 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	211a      	movs	r1, #26
 8007ade:	fb01 f303 	mul.w	r3, r1, r3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	211a      	movs	r1, #26
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	4413      	add	r3, r2
 8007afa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007afe:	881a      	ldrh	r2, [r3, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	815a      	strh	r2, [r3, #10]
 8007b04:	e015      	b.n	8007b32 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	211a      	movs	r1, #26
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	211a      	movs	r1, #26
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b2c:	881a      	ldrh	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	211a      	movs	r1, #26
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da16      	bge.n	8007b78 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	211a      	movs	r1, #26
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	211a      	movs	r1, #26
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b70:	881a      	ldrh	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	815a      	strh	r2, [r3, #10]
 8007b76:	e015      	b.n	8007ba4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	211a      	movs	r1, #26
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	211a      	movs	r1, #26
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b9e:	881a      	ldrh	r2, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	799b      	ldrb	r3, [r3, #6]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 fcb2 	bl	800a526 <USBH_AllocPipe>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	79db      	ldrb	r3, [r3, #7]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f002 fca8 	bl	800a526 <USBH_AllocPipe>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fdb2 	bl	8008748 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	7959      	ldrb	r1, [r3, #5]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	7998      	ldrb	r0, [r3, #6]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	8912      	ldrh	r2, [r2, #8]
 8007bfc:	9202      	str	r2, [sp, #8]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	9201      	str	r2, [sp, #4]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	4623      	mov	r3, r4
 8007c06:	4602      	mov	r2, r0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 fc5d 	bl	800a4c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	7919      	ldrb	r1, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	79d8      	ldrb	r0, [r3, #7]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	8952      	ldrh	r2, [r2, #10]
 8007c26:	9202      	str	r2, [sp, #8]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	4623      	mov	r3, r4
 8007c30:	4602      	mov	r2, r0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f002 fc48 	bl	800a4c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	791b      	ldrb	r3, [r3, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f005 fdd3 	bl	800d7ec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	795b      	ldrb	r3, [r3, #5]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f005 fdcc 	bl	800d7ec <USBH_LL_SetToggle>

  return USBH_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd90      	pop	{r4, r7, pc}

08007c5e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	795b      	ldrb	r3, [r3, #5]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	795b      	ldrb	r3, [r3, #5]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f002 fc41 	bl	800a506 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	795b      	ldrb	r3, [r3, #5]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 fc6b 	bl	800a566 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00e      	beq.n	8007cbc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 fc2e 	bl	800a506 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 fc58 	bl	800a566 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f005 fe6f 	bl	800d9b4 <free>
    phost->pActiveClass->pData = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cdc:	2200      	movs	r2, #0
 8007cde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7b9b      	ldrb	r3, [r3, #14]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d042      	beq.n	8007d8e <USBH_MSC_ClassRequest+0xa4>
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	dc4c      	bgt.n	8007da6 <USBH_MSC_ClassRequest+0xbc>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <USBH_MSC_ClassRequest+0x2a>
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d148      	bne.n	8007da6 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fcf6 	bl	800870a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d104      	bne.n	8007d32 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d138      	bne.n	8007daa <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d804      	bhi.n	8007d4c <USBH_MSC_ClassRequest+0x62>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	3301      	adds	r3, #1
 8007d4a:	e000      	b.n	8007d4e <USBH_MSC_ClassRequest+0x64>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007d52:	2300      	movs	r3, #0
 8007d54:	73bb      	strb	r3, [r7, #14]
 8007d56:	e014      	b.n	8007d82 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	2134      	movs	r1, #52	; 0x34
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	4413      	add	r3, r2
 8007d64:	3392      	adds	r3, #146	; 0x92
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	2134      	movs	r1, #52	; 0x34
 8007d70:	fb01 f303 	mul.w	r3, r1, r3
 8007d74:	4413      	add	r3, r2
 8007d76:	33c1      	adds	r3, #193	; 0xc1
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	73bb      	strb	r3, [r7, #14]
 8007d82:	7bba      	ldrb	r2, [r7, #14]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d3e5      	bcc.n	8007d58 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 8007d8c:	e00d      	b.n	8007daa <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 ff6c 	bl	8009c6e <USBH_ClrFeature>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d108      	bne.n	8007dae <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	7bda      	ldrb	r2, [r3, #15]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007da4:	e003      	b.n	8007dae <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 8007da6:	bf00      	nop
 8007da8:	e002      	b.n	8007db0 <USBH_MSC_ClassRequest+0xc6>
      break;
 8007daa:	bf00      	nop
 8007dac:	e000      	b.n	8007db0 <USBH_MSC_ClassRequest+0xc6>
      break;
 8007dae:	bf00      	nop
  }

  return status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	7b1b      	ldrb	r3, [r3, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <USBH_MSC_Process+0x2e>
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	f000 8271 	beq.w	80082ca <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007de8:	e272      	b.n	80082d0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007df0:	461a      	mov	r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	f080 824f 	bcs.w	800829a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e02:	4619      	mov	r1, r3
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	2334      	movs	r3, #52	; 0x34
 8007e08:	fb03 f301 	mul.w	r3, r3, r1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	3391      	adds	r3, #145	; 0x91
 8007e10:	2201      	movs	r2, #1
 8007e12:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	2334      	movs	r3, #52	; 0x34
 8007e20:	fb03 f301 	mul.w	r3, r3, r1
 8007e24:	4413      	add	r3, r2
 8007e26:	3390      	adds	r3, #144	; 0x90
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	f200 8243 	bhi.w	80082b6 <USBH_MSC_Process+0x4fa>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBH_MSC_Process+0x7c>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	080082b7 	.word	0x080082b7
 8007e40:	08007f25 	.word	0x08007f25
 8007e44:	080080a9 	.word	0x080080a9
 8007e48:	08007e83 	.word	0x08007e83
 8007e4c:	08008175 	.word	0x08008175
 8007e50:	080082b7 	.word	0x080082b7
 8007e54:	080082b7 	.word	0x080082b7
 8007e58:	08008289 	.word	0x08008289
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e62:	4619      	mov	r1, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	2334      	movs	r3, #52	; 0x34
 8007e68:	fb03 f301 	mul.w	r3, r3, r1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3390      	adds	r3, #144	; 0x90
 8007e70:	2204      	movs	r2, #4
 8007e72:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007e80:	e222      	b.n	80082c8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e88:	b2d9      	uxtb	r1, r3
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e90:	461a      	mov	r2, r3
 8007e92:	2334      	movs	r3, #52	; 0x34
 8007e94:	fb03 f302 	mul.w	r3, r3, r2
 8007e98:	3398      	adds	r3, #152	; 0x98
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 ff6e 	bl	8008d84 <USBH_MSC_SCSI_Inquiry>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10b      	bne.n	8007eca <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007eb8:	4619      	mov	r1, r3
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	2334      	movs	r3, #52	; 0x34
 8007ebe:	fb03 f301 	mul.w	r3, r3, r1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3390      	adds	r3, #144	; 0x90
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d10c      	bne.n	8007eea <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	2334      	movs	r3, #52	; 0x34
 8007edc:	fb03 f301 	mul.w	r3, r3, r1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3390      	adds	r3, #144	; 0x90
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	701a      	strb	r2, [r3, #0]
            break;
 8007ee8:	e1e7      	b.n	80082ba <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	f040 81e4 	bne.w	80082ba <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ef8:	4619      	mov	r1, r3
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	2334      	movs	r3, #52	; 0x34
 8007efe:	fb03 f301 	mul.w	r3, r3, r1
 8007f02:	4413      	add	r3, r2
 8007f04:	3390      	adds	r3, #144	; 0x90
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f10:	4619      	mov	r1, r3
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	2334      	movs	r3, #52	; 0x34
 8007f16:	fb03 f301 	mul.w	r3, r3, r1
 8007f1a:	4413      	add	r3, r2
 8007f1c:	3391      	adds	r3, #145	; 0x91
 8007f1e:	2202      	movs	r2, #2
 8007f20:	701a      	strb	r2, [r3, #0]
            break;
 8007f22:	e1ca      	b.n	80082ba <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fe6a 	bl	8008c08 <USBH_MSC_SCSI_TestUnitReady>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d149      	bne.n	8007fd2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f44:	4619      	mov	r1, r3
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	2334      	movs	r3, #52	; 0x34
 8007f4a:	fb03 f301 	mul.w	r3, r3, r1
 8007f4e:	4413      	add	r3, r2
 8007f50:	3392      	adds	r3, #146	; 0x92
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00c      	beq.n	8007f72 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f5e:	4619      	mov	r1, r3
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	2334      	movs	r3, #52	; 0x34
 8007f64:	fb03 f301 	mul.w	r3, r3, r1
 8007f68:	4413      	add	r3, r2
 8007f6a:	33c1      	adds	r3, #193	; 0xc1
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e00b      	b.n	8007f8a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f78:	4619      	mov	r1, r3
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	2334      	movs	r3, #52	; 0x34
 8007f7e:	fb03 f301 	mul.w	r3, r3, r1
 8007f82:	4413      	add	r3, r2
 8007f84:	33c1      	adds	r3, #193	; 0xc1
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f90:	4619      	mov	r1, r3
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	2334      	movs	r3, #52	; 0x34
 8007f96:	fb03 f301 	mul.w	r3, r3, r1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3390      	adds	r3, #144	; 0x90
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fa8:	4619      	mov	r1, r3
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	2334      	movs	r3, #52	; 0x34
 8007fae:	fb03 f301 	mul.w	r3, r3, r1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3391      	adds	r3, #145	; 0x91
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	2334      	movs	r3, #52	; 0x34
 8007fc6:	fb03 f301 	mul.w	r3, r3, r1
 8007fca:	4413      	add	r3, r2
 8007fcc:	3392      	adds	r3, #146	; 0x92
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d14a      	bne.n	800806e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fde:	4619      	mov	r1, r3
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	2334      	movs	r3, #52	; 0x34
 8007fe4:	fb03 f301 	mul.w	r3, r3, r1
 8007fe8:	4413      	add	r3, r2
 8007fea:	3392      	adds	r3, #146	; 0x92
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d00c      	beq.n	800800c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	2334      	movs	r3, #52	; 0x34
 8007ffe:	fb03 f301 	mul.w	r3, r3, r1
 8008002:	4413      	add	r3, r2
 8008004:	33c1      	adds	r3, #193	; 0xc1
 8008006:	2201      	movs	r2, #1
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e00b      	b.n	8008024 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008012:	4619      	mov	r1, r3
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	2334      	movs	r3, #52	; 0x34
 8008018:	fb03 f301 	mul.w	r3, r3, r1
 800801c:	4413      	add	r3, r2
 800801e:	33c1      	adds	r3, #193	; 0xc1
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800802a:	4619      	mov	r1, r3
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	2334      	movs	r3, #52	; 0x34
 8008030:	fb03 f301 	mul.w	r3, r3, r1
 8008034:	4413      	add	r3, r2
 8008036:	3390      	adds	r3, #144	; 0x90
 8008038:	2205      	movs	r2, #5
 800803a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008042:	4619      	mov	r1, r3
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	2334      	movs	r3, #52	; 0x34
 8008048:	fb03 f301 	mul.w	r3, r3, r1
 800804c:	4413      	add	r3, r2
 800804e:	3391      	adds	r3, #145	; 0x91
 8008050:	2201      	movs	r2, #1
 8008052:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800805a:	4619      	mov	r1, r3
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	2334      	movs	r3, #52	; 0x34
 8008060:	fb03 f301 	mul.w	r3, r3, r1
 8008064:	4413      	add	r3, r2
 8008066:	3392      	adds	r3, #146	; 0x92
 8008068:	2202      	movs	r2, #2
 800806a:	701a      	strb	r2, [r3, #0]
            break;
 800806c:	e127      	b.n	80082be <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b04      	cmp	r3, #4
 8008072:	f040 8124 	bne.w	80082be <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800807c:	4619      	mov	r1, r3
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	2334      	movs	r3, #52	; 0x34
 8008082:	fb03 f301 	mul.w	r3, r3, r1
 8008086:	4413      	add	r3, r2
 8008088:	3390      	adds	r3, #144	; 0x90
 800808a:	2201      	movs	r2, #1
 800808c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008094:	4619      	mov	r1, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	2334      	movs	r3, #52	; 0x34
 800809a:	fb03 f301 	mul.w	r3, r3, r1
 800809e:	4413      	add	r3, r2
 80080a0:	3391      	adds	r3, #145	; 0x91
 80080a2:	2202      	movs	r2, #2
 80080a4:	701a      	strb	r2, [r3, #0]
            break;
 80080a6:	e10a      	b.n	80082be <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080b6:	461a      	mov	r2, r3
 80080b8:	2334      	movs	r3, #52	; 0x34
 80080ba:	fb03 f302 	mul.w	r3, r3, r2
 80080be:	3390      	adds	r3, #144	; 0x90
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	3304      	adds	r3, #4
 80080c6:	461a      	mov	r2, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fde0 	bl	8008c8e <USBH_MSC_SCSI_ReadCapacity>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d120      	bne.n	800811a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080de:	4619      	mov	r1, r3
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	2334      	movs	r3, #52	; 0x34
 80080e4:	fb03 f301 	mul.w	r3, r3, r1
 80080e8:	4413      	add	r3, r2
 80080ea:	3390      	adds	r3, #144	; 0x90
 80080ec:	2201      	movs	r2, #1
 80080ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080f6:	4619      	mov	r1, r3
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	2334      	movs	r3, #52	; 0x34
 80080fc:	fb03 f301 	mul.w	r3, r3, r1
 8008100:	4413      	add	r3, r2
 8008102:	3391      	adds	r3, #145	; 0x91
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800810e:	3301      	adds	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008118:	e0d3      	b.n	80082c2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d10c      	bne.n	800813a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008126:	4619      	mov	r1, r3
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	2334      	movs	r3, #52	; 0x34
 800812c:	fb03 f301 	mul.w	r3, r3, r1
 8008130:	4413      	add	r3, r2
 8008132:	3390      	adds	r3, #144	; 0x90
 8008134:	2205      	movs	r2, #5
 8008136:	701a      	strb	r2, [r3, #0]
            break;
 8008138:	e0c3      	b.n	80082c2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b04      	cmp	r3, #4
 800813e:	f040 80c0 	bne.w	80082c2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008148:	4619      	mov	r1, r3
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	2334      	movs	r3, #52	; 0x34
 800814e:	fb03 f301 	mul.w	r3, r3, r1
 8008152:	4413      	add	r3, r2
 8008154:	3390      	adds	r3, #144	; 0x90
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008160:	4619      	mov	r1, r3
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	2334      	movs	r3, #52	; 0x34
 8008166:	fb03 f301 	mul.w	r3, r3, r1
 800816a:	4413      	add	r3, r2
 800816c:	3391      	adds	r3, #145	; 0x91
 800816e:	2202      	movs	r2, #2
 8008170:	701a      	strb	r2, [r3, #0]
            break;
 8008172:	e0a6      	b.n	80082c2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800817a:	b2d9      	uxtb	r1, r3
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008182:	461a      	mov	r2, r3
 8008184:	2334      	movs	r3, #52	; 0x34
 8008186:	fb03 f302 	mul.w	r3, r3, r2
 800818a:	3398      	adds	r3, #152	; 0x98
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	461a      	mov	r2, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fe9a 	bl	8008ece <USBH_MSC_SCSI_RequestSense>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d145      	bne.n	8008230 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081aa:	4619      	mov	r1, r3
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	2334      	movs	r3, #52	; 0x34
 80081b0:	fb03 f301 	mul.w	r3, r3, r1
 80081b4:	4413      	add	r3, r2
 80081b6:	339c      	adds	r3, #156	; 0x9c
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	d00c      	beq.n	80081d8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081c4:	4619      	mov	r1, r3
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	2334      	movs	r3, #52	; 0x34
 80081ca:	fb03 f301 	mul.w	r3, r3, r1
 80081ce:	4413      	add	r3, r2
 80081d0:	339c      	adds	r3, #156	; 0x9c
 80081d2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d117      	bne.n	8008208 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d80c      	bhi.n	8008208 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081f4:	4619      	mov	r1, r3
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	2334      	movs	r3, #52	; 0x34
 80081fa:	fb03 f301 	mul.w	r3, r3, r1
 80081fe:	4413      	add	r3, r2
 8008200:	3390      	adds	r3, #144	; 0x90
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]
                  break;
 8008206:	e05f      	b.n	80082c8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800820e:	4619      	mov	r1, r3
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	2334      	movs	r3, #52	; 0x34
 8008214:	fb03 f301 	mul.w	r3, r3, r1
 8008218:	4413      	add	r3, r2
 800821a:	3390      	adds	r3, #144	; 0x90
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008226:	3301      	adds	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d10c      	bne.n	8008250 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800823c:	4619      	mov	r1, r3
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	2334      	movs	r3, #52	; 0x34
 8008242:	fb03 f301 	mul.w	r3, r3, r1
 8008246:	4413      	add	r3, r2
 8008248:	3390      	adds	r3, #144	; 0x90
 800824a:	2208      	movs	r2, #8
 800824c:	701a      	strb	r2, [r3, #0]
            break;
 800824e:	e03a      	b.n	80082c6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	2b04      	cmp	r3, #4
 8008254:	d137      	bne.n	80082c6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800825c:	4619      	mov	r1, r3
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	2334      	movs	r3, #52	; 0x34
 8008262:	fb03 f301 	mul.w	r3, r3, r1
 8008266:	4413      	add	r3, r2
 8008268:	3390      	adds	r3, #144	; 0x90
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008274:	4619      	mov	r1, r3
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	2334      	movs	r3, #52	; 0x34
 800827a:	fb03 f301 	mul.w	r3, r3, r1
 800827e:	4413      	add	r3, r2
 8008280:	3391      	adds	r3, #145	; 0x91
 8008282:	2202      	movs	r2, #2
 8008284:	701a      	strb	r2, [r3, #0]
            break;
 8008286:	e01e      	b.n	80082c6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800828e:	3301      	adds	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008298:	e016      	b.n	80082c8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2200      	movs	r2, #0
 800829e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2201      	movs	r2, #1
 80082a6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80082ae:	2102      	movs	r1, #2
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
      break;
 80082b4:	e00c      	b.n	80082d0 <USBH_MSC_Process+0x514>
            break;
 80082b6:	bf00      	nop
 80082b8:	e00a      	b.n	80082d0 <USBH_MSC_Process+0x514>
            break;
 80082ba:	bf00      	nop
 80082bc:	e008      	b.n	80082d0 <USBH_MSC_Process+0x514>
            break;
 80082be:	bf00      	nop
 80082c0:	e006      	b.n	80082d0 <USBH_MSC_Process+0x514>
            break;
 80082c2:	bf00      	nop
 80082c4:	e004      	b.n	80082d0 <USBH_MSC_Process+0x514>
            break;
 80082c6:	bf00      	nop
      break;
 80082c8:	e002      	b.n	80082d0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
      break;
 80082ce:	bf00      	nop
  }
  return error;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop

080082dc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr

080082f0 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008306:	2301      	movs	r3, #1
 8008308:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800830a:	2301      	movs	r3, #1
 800830c:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	2134      	movs	r1, #52	; 0x34
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	4413      	add	r3, r2
 800831a:	3390      	adds	r3, #144	; 0x90
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b07      	cmp	r3, #7
 8008320:	d042      	beq.n	80083a8 <USBH_MSC_RdWrProcess+0xb8>
 8008322:	2b07      	cmp	r3, #7
 8008324:	f300 80ad 	bgt.w	8008482 <USBH_MSC_RdWrProcess+0x192>
 8008328:	2b05      	cmp	r3, #5
 800832a:	d072      	beq.n	8008412 <USBH_MSC_RdWrProcess+0x122>
 800832c:	2b06      	cmp	r3, #6
 800832e:	f040 80a8 	bne.w	8008482 <USBH_MSC_RdWrProcess+0x192>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008332:	78f9      	ldrb	r1, [r7, #3]
 8008334:	2300      	movs	r3, #0
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	2200      	movs	r2, #0
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 feaa 	bl	8009096 <USBH_MSC_SCSI_Read>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	2134      	movs	r1, #52	; 0x34
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3390      	adds	r3, #144	; 0x90
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008362:	e090      	b.n	8008486 <USBH_MSC_RdWrProcess+0x196>
      else if (scsi_status == USBH_FAIL)
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d109      	bne.n	800837e <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	2134      	movs	r1, #52	; 0x34
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	4413      	add	r3, r2
 8008376:	3390      	adds	r3, #144	; 0x90
 8008378:	2205      	movs	r2, #5
 800837a:	701a      	strb	r2, [r3, #0]
      break;
 800837c:	e083      	b.n	8008486 <USBH_MSC_RdWrProcess+0x196>
      else if (scsi_status == USBH_BUSY)	// ADDED TO FIX infinate loop when USB is disconnected.
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d102      	bne.n	800838a <USBH_MSC_RdWrProcess+0x9a>
    	  MX_USB_HOST_Process();
 8008384:	f004 ffc4 	bl	800d310 <MX_USB_HOST_Process>
      break;
 8008388:	e07d      	b.n	8008486 <USBH_MSC_RdWrProcess+0x196>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d17a      	bne.n	8008486 <USBH_MSC_RdWrProcess+0x196>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	2134      	movs	r1, #52	; 0x34
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	4413      	add	r3, r2
 800839c:	3390      	adds	r3, #144	; 0x90
 800839e:	2208      	movs	r2, #8
 80083a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80083a2:	2302      	movs	r3, #2
 80083a4:	75fb      	strb	r3, [r7, #23]
      break;
 80083a6:	e06e      	b.n	8008486 <USBH_MSC_RdWrProcess+0x196>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80083a8:	78f9      	ldrb	r1, [r7, #3]
 80083aa:	2300      	movs	r3, #0
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fe04 	bl	8008fc0 <USBH_MSC_SCSI_Write>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <USBH_MSC_RdWrProcess+0xea>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	2134      	movs	r1, #52	; 0x34
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	4413      	add	r3, r2
 80083ce:	3390      	adds	r3, #144	; 0x90
 80083d0:	2201      	movs	r2, #1
 80083d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083d8:	e057      	b.n	800848a <USBH_MSC_RdWrProcess+0x19a>
      else if (scsi_status == USBH_FAIL)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d109      	bne.n	80083f4 <USBH_MSC_RdWrProcess+0x104>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	2134      	movs	r1, #52	; 0x34
 80083e6:	fb01 f303 	mul.w	r3, r1, r3
 80083ea:	4413      	add	r3, r2
 80083ec:	3390      	adds	r3, #144	; 0x90
 80083ee:	2205      	movs	r2, #5
 80083f0:	701a      	strb	r2, [r3, #0]
      break;
 80083f2:	e04a      	b.n	800848a <USBH_MSC_RdWrProcess+0x19a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d147      	bne.n	800848a <USBH_MSC_RdWrProcess+0x19a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	2134      	movs	r1, #52	; 0x34
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	4413      	add	r3, r2
 8008406:	3390      	adds	r3, #144	; 0x90
 8008408:	2208      	movs	r2, #8
 800840a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800840c:	2302      	movs	r3, #2
 800840e:	75fb      	strb	r3, [r7, #23]
      break;
 8008410:	e03b      	b.n	800848a <USBH_MSC_RdWrProcess+0x19a>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	2234      	movs	r2, #52	; 0x34
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	3398      	adds	r3, #152	; 0x98
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4413      	add	r3, r2
 8008420:	1d1a      	adds	r2, r3, #4
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fd51 	bl	8008ece <USBH_MSC_SCSI_RequestSense>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d113      	bne.n	800845e <USBH_MSC_RdWrProcess+0x16e>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	2134      	movs	r1, #52	; 0x34
 800843c:	fb01 f303 	mul.w	r3, r1, r3
 8008440:	4413      	add	r3, r2
 8008442:	3390      	adds	r3, #144	; 0x90
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	2134      	movs	r1, #52	; 0x34
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	4413      	add	r3, r2
 8008454:	3391      	adds	r3, #145	; 0x91
 8008456:	2202      	movs	r2, #2
 8008458:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800845a:	2302      	movs	r3, #2
 800845c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d014      	beq.n	800848e <USBH_MSC_RdWrProcess+0x19e>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	2b04      	cmp	r3, #4
 8008468:	d111      	bne.n	800848e <USBH_MSC_RdWrProcess+0x19e>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	2134      	movs	r1, #52	; 0x34
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	4413      	add	r3, r2
 8008476:	3390      	adds	r3, #144	; 0x90
 8008478:	2208      	movs	r2, #8
 800847a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800847c:	2302      	movs	r3, #2
 800847e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008480:	e005      	b.n	800848e <USBH_MSC_RdWrProcess+0x19e>

    default:
      break;
 8008482:	bf00      	nop
 8008484:	e004      	b.n	8008490 <USBH_MSC_RdWrProcess+0x1a0>
      break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <USBH_MSC_RdWrProcess+0x1a0>
      break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <USBH_MSC_RdWrProcess+0x1a0>
      break;
 800848e:	bf00      	nop

  }
  return error;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b0b      	cmp	r3, #11
 80084b8:	d10c      	bne.n	80084d4 <USBH_MSC_UnitIsReady+0x3a>
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	2134      	movs	r1, #52	; 0x34
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	3391      	adds	r3, #145	; 0x91
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80084ce:	2301      	movs	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]
 80084d2:	e001      	b.n	80084d8 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	460b      	mov	r3, r1
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b0b      	cmp	r3, #11
 8008504:	d10d      	bne.n	8008522 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	2234      	movs	r2, #52	; 0x34
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	3390      	adds	r3, #144	; 0x90
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4413      	add	r3, r2
 8008514:	2234      	movs	r2, #52	; 0x34
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f005 fa53 	bl	800d9c4 <memcpy>
    return USBH_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	460b      	mov	r3, r1
 800853a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00e      	beq.n	8008570 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008558:	2b0b      	cmp	r3, #11
 800855a:	d109      	bne.n	8008570 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	2134      	movs	r1, #52	; 0x34
 8008562:	fb01 f303 	mul.w	r3, r1, r3
 8008566:	4413      	add	r3, r2
 8008568:	3390      	adds	r3, #144	; 0x90
 800856a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800856c:	2b01      	cmp	r3, #1
 800856e:	d001      	beq.n	8008574 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008570:	2302      	movs	r3, #2
 8008572:	e040      	b.n	80085f6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2206      	movs	r2, #6
 8008578:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	2134      	movs	r1, #52	; 0x34
 8008580:	fb01 f303 	mul.w	r3, r1, r3
 8008584:	4413      	add	r3, r2
 8008586:	3390      	adds	r3, #144	; 0x90
 8008588:	2206      	movs	r2, #6
 800858a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	b29a      	uxth	r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008596:	7af9      	ldrb	r1, [r7, #11]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 fd78 	bl	8009096 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80085ac:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80085ae:	e016      	b.n	80085de <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d805      	bhi.n	80085d4 <USBH_MSC_Read+0xa8>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2201      	movs	r2, #1
 80085d8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80085da:	2302      	movs	r3, #2
 80085dc:	e00b      	b.n	80085f6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	4619      	mov	r1, r3
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fe84 	bl	80082f0 <USBH_MSC_RdWrProcess>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d0e0      	beq.n	80085b0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2201      	movs	r2, #1
 80085f2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b088      	sub	sp, #32
 8008602:	af02      	add	r7, sp, #8
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	460b      	mov	r3, r1
 800860c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800862a:	2b0b      	cmp	r3, #11
 800862c:	d109      	bne.n	8008642 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	2134      	movs	r1, #52	; 0x34
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	3390      	adds	r3, #144	; 0x90
 800863c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800863e:	2b01      	cmp	r3, #1
 8008640:	d001      	beq.n	8008646 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008642:	2302      	movs	r3, #2
 8008644:	e040      	b.n	80086c8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2207      	movs	r2, #7
 800864a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	2134      	movs	r1, #52	; 0x34
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	3390      	adds	r3, #144	; 0x90
 800865a:	2207      	movs	r2, #7
 800865c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	b29a      	uxth	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008668:	7af9      	ldrb	r1, [r7, #11]
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fca4 	bl	8008fc0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800867e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008680:	e016      	b.n	80086b0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	429a      	cmp	r2, r3
 8008698:	d805      	bhi.n	80086a6 <USBH_MSC_Write+0xa8>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d104      	bne.n	80086b0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2201      	movs	r2, #1
 80086aa:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e00b      	b.n	80086c8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	4619      	mov	r1, r3
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff fe1b 	bl	80082f0 <USBH_MSC_RdWrProcess>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d0e0      	beq.n	8008682 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2201      	movs	r2, #1
 80086c4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2221      	movs	r2, #33	; 0x21
 80086dc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fc92 	bl	800a024 <USBH_CtlReq>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	22a1      	movs	r2, #161	; 0xa1
 8008718:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	22fe      	movs	r2, #254	; 0xfe
 800871e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008732:	2201      	movs	r2, #1
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fc74 	bl	800a024 <USBH_CtlReq>
 800873c:	4603      	mov	r3, r0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a09      	ldr	r2, [pc, #36]	; (8008784 <USBH_MSC_BOT_Init+0x3c>)
 800875e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a09      	ldr	r2, [pc, #36]	; (8008788 <USBH_MSC_BOT_Init+0x40>)
 8008764:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	43425355 	.word	0x43425355
 8008788:	20304050 	.word	0x20304050

0800878c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af02      	add	r7, sp, #8
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800879c:	2301      	movs	r3, #1
 800879e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80087a0:	2301      	movs	r3, #1
 80087a2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087bc:	3b01      	subs	r3, #1
 80087be:	2b0a      	cmp	r3, #10
 80087c0:	f200 819e 	bhi.w	8008b00 <USBH_MSC_BOT_Process+0x374>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <USBH_MSC_BOT_Process+0x40>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	08008821 	.word	0x08008821
 80087d4:	0800888b 	.word	0x0800888b
 80087d8:	080088a9 	.word	0x080088a9
 80087dc:	0800892d 	.word	0x0800892d
 80087e0:	0800894f 	.word	0x0800894f
 80087e4:	080089e7 	.word	0x080089e7
 80087e8:	08008a03 	.word	0x08008a03
 80087ec:	08008a55 	.word	0x08008a55
 80087f0:	08008a85 	.word	0x08008a85
 80087f4:	08008ae7 	.word	0x08008ae7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	795b      	ldrb	r3, [r3, #5]
 8008812:	2201      	movs	r2, #1
 8008814:	9200      	str	r2, [sp, #0]
 8008816:	221f      	movs	r2, #31
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 fe12 	bl	800a442 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800881e:	e17e      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	795b      	ldrb	r3, [r3, #5]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f004 ffb6 	bl	800d798 <USBH_LL_GetURBState>
 800882c:	4603      	mov	r3, r0
 800882e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008830:	7d3b      	ldrb	r3, [r7, #20]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d118      	bne.n	8008868 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00f      	beq.n	800885e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008844:	b25b      	sxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	da04      	bge.n	8008854 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2203      	movs	r2, #3
 800884e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008852:	e157      	b.n	8008b04 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2205      	movs	r2, #5
 8008858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800885c:	e152      	b.n	8008b04 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2207      	movs	r2, #7
 8008862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008866:	e14d      	b.n	8008b04 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008868:	7d3b      	ldrb	r3, [r7, #20]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d104      	bne.n	8008878 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008876:	e145      	b.n	8008b04 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008878:	7d3b      	ldrb	r3, [r7, #20]
 800887a:	2b05      	cmp	r3, #5
 800887c:	f040 8142 	bne.w	8008b04 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	220a      	movs	r2, #10
 8008884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008888:	e13c      	b.n	8008b04 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	895a      	ldrh	r2, [r3, #10]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	791b      	ldrb	r3, [r3, #4]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fdf7 	bl	800a48c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2204      	movs	r2, #4
 80088a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80088a6:	e13a      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	791b      	ldrb	r3, [r3, #4]
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f004 ff72 	bl	800d798 <USBH_LL_GetURBState>
 80088b4:	4603      	mov	r3, r0
 80088b6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80088b8:	7d3b      	ldrb	r3, [r7, #20]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d12d      	bne.n	800891a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	8952      	ldrh	r2, [r2, #10]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d910      	bls.n	80088ec <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	8952      	ldrh	r2, [r2, #10]
 80088d4:	441a      	add	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	8952      	ldrh	r2, [r2, #10]
 80088e4:	1a9a      	subs	r2, r3, r2
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80088ea:	e002      	b.n	80088f2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2200      	movs	r2, #0
 80088f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	895a      	ldrh	r2, [r3, #10]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	791b      	ldrb	r3, [r3, #4]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fdbf 	bl	800a48c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800890e:	e0fb      	b.n	8008b08 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2207      	movs	r2, #7
 8008914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008918:	e0f6      	b.n	8008b08 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800891a:	7d3b      	ldrb	r3, [r7, #20]
 800891c:	2b05      	cmp	r3, #5
 800891e:	f040 80f3 	bne.w	8008b08 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2209      	movs	r2, #9
 8008926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800892a:	e0ed      	b.n	8008b08 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	891a      	ldrh	r2, [r3, #8]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	795b      	ldrb	r3, [r3, #5]
 800893a:	2001      	movs	r0, #1
 800893c:	9000      	str	r0, [sp, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fd7f 	bl	800a442 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2206      	movs	r2, #6
 8008948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800894c:	e0e7      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	795b      	ldrb	r3, [r3, #5]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f004 ff1f 	bl	800d798 <USBH_LL_GetURBState>
 800895a:	4603      	mov	r3, r0
 800895c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800895e:	7d3b      	ldrb	r3, [r7, #20]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d12f      	bne.n	80089c4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	8912      	ldrh	r2, [r2, #8]
 800896c:	4293      	cmp	r3, r2
 800896e:	d910      	bls.n	8008992 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	8912      	ldrh	r2, [r2, #8]
 800897a:	441a      	add	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	8912      	ldrh	r2, [r2, #8]
 800898a:	1a9a      	subs	r2, r3, r2
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008990:	e002      	b.n	8008998 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2200      	movs	r2, #0
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00c      	beq.n	80089ba <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	891a      	ldrh	r2, [r3, #8]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	795b      	ldrb	r3, [r3, #5]
 80089ae:	2001      	movs	r0, #1
 80089b0:	9000      	str	r0, [sp, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fd45 	bl	800a442 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80089b8:	e0a8      	b.n	8008b0c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2207      	movs	r2, #7
 80089be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80089c2:	e0a3      	b.n	8008b0c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089c4:	7d3b      	ldrb	r3, [r7, #20]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d104      	bne.n	80089d4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2205      	movs	r2, #5
 80089ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80089d2:	e09b      	b.n	8008b0c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80089d4:	7d3b      	ldrb	r3, [r7, #20]
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	f040 8098 	bne.w	8008b0c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	220a      	movs	r2, #10
 80089e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80089e4:	e092      	b.n	8008b0c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	791b      	ldrb	r3, [r3, #4]
 80089f0:	220d      	movs	r2, #13
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fd4a 	bl	800a48c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2208      	movs	r2, #8
 80089fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a00:	e08d      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	791b      	ldrb	r3, [r3, #4]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f004 fec5 	bl	800d798 <USBH_LL_GetURBState>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008a12:	7d3b      	ldrb	r3, [r7, #20]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d115      	bne.n	8008a44 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8a9 	bl	8008b80 <USBH_MSC_DecodeCSW>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008a32:	7d7b      	ldrb	r3, [r7, #21]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008a3c:	e068      	b.n	8008b10 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	75fb      	strb	r3, [r7, #23]
      break;
 8008a42:	e065      	b.n	8008b10 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008a44:	7d3b      	ldrb	r3, [r7, #20]
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	d162      	bne.n	8008b10 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2209      	movs	r2, #9
 8008a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a52:	e05d      	b.n	8008b10 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	2200      	movs	r2, #0
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f864 	bl	8008b28 <USBH_MSC_BOT_Abort>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008a64:	7dbb      	ldrb	r3, [r7, #22]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008a72:	e04f      	b.n	8008b14 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d14c      	bne.n	8008b14 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	220b      	movs	r2, #11
 8008a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a82:	e047      	b.n	8008b14 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	2201      	movs	r2, #1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f84c 	bl	8008b28 <USBH_MSC_BOT_Abort>
 8008a90:	4603      	mov	r3, r0
 8008a92:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008a94:	7dbb      	ldrb	r3, [r7, #22]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11d      	bne.n	8008ad6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f004 fed2 	bl	800d84a <USBH_LL_GetToggle>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	7959      	ldrb	r1, [r3, #5]
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	f1c3 0301 	rsb	r3, r3, #1
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f004 fe97 	bl	800d7ec <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	791b      	ldrb	r3, [r3, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f004 fe90 	bl	800d7ec <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2209      	movs	r2, #9
 8008ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008ad4:	e020      	b.n	8008b18 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008ad6:	7dbb      	ldrb	r3, [r7, #22]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d11d      	bne.n	8008b18 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	220b      	movs	r2, #11
 8008ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ae4:	e018      	b.n	8008b18 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff fdf2 	bl	80086d0 <USBH_MSC_BOT_REQ_Reset>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d112      	bne.n	8008b1c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008afe:	e00d      	b.n	8008b1c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008b00:	bf00      	nop
 8008b02:	e00c      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b04:	bf00      	nop
 8008b06:	e00a      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e008      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e006      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b10:	bf00      	nop
 8008b12:	e004      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b14:	bf00      	nop
 8008b16:	e002      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b18:	bf00      	nop
 8008b1a:	e000      	b.n	8008b1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008b1c:	bf00      	nop
  }
  return status;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
 8008b34:	4613      	mov	r3, r2
 8008b36:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008b46:	78bb      	ldrb	r3, [r7, #2]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <USBH_MSC_BOT_Abort+0x2a>
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d009      	beq.n	8008b64 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008b50:	e011      	b.n	8008b76 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	79db      	ldrb	r3, [r3, #7]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 f888 	bl	8009c6e <USBH_ClrFeature>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
      break;
 8008b62:	e008      	b.n	8008b76 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	799b      	ldrb	r3, [r3, #6]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 f87f 	bl	8009c6e <USBH_ClrFeature>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
      break;
 8008b74:	bf00      	nop
  }
  return status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008b92:	2301      	movs	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	791b      	ldrb	r3, [r3, #4]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f004 fd69 	bl	800d674 <USBH_LL_GetLastXferSize>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b0d      	cmp	r3, #13
 8008ba6:	d002      	beq.n	8008bae <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	73fb      	strb	r3, [r7, #15]
 8008bac:	e024      	b.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bb2:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <USBH_MSC_DecodeCSW+0x84>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d11d      	bne.n	8008bf4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d119      	bne.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
 8008bd2:	e011      	b.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d102      	bne.n	8008be4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
 8008be2:	e009      	b.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d104      	bne.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	73fb      	strb	r3, [r7, #15]
 8008bf2:	e001      	b.n	8008bf8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	53425355 	.word	0x53425355

08008c08 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c14:	2302      	movs	r3, #2
 8008c16:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d002      	beq.n	8008c32 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d021      	beq.n	8008c74 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008c30:	e028      	b.n	8008c84 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	220a      	movs	r2, #10
 8008c44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	3363      	adds	r3, #99	; 0x63
 8008c4c:	2210      	movs	r2, #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f004 fec5 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	73fb      	strb	r3, [r7, #15]
      break;
 8008c72:	e007      	b.n	8008c84 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fd87 	bl	800878c <USBH_MSC_BOT_Process>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	bf00      	nop
  }

  return error;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	460b      	mov	r3, r1
 8008c98:	607a      	str	r2, [r7, #4]
 8008c9a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d002      	beq.n	8008cba <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d027      	beq.n	8008d08 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008cb8:	e05f      	b.n	8008d7a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2280      	movs	r2, #128	; 0x80
 8008cc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	220a      	movs	r2, #10
 8008ccc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	3363      	adds	r3, #99	; 0x63
 8008cd4:	2210      	movs	r2, #16
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f004 fe81 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2225      	movs	r2, #37	; 0x25
 8008ce2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f103 0210 	add.w	r2, r3, #16
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
      break;
 8008d06:	e038      	b.n	8008d7a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff fd3d 	bl	800878c <USBH_MSC_BOT_Process>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d12d      	bne.n	8008d78 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d22:	3303      	adds	r3, #3
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d2e:	3302      	adds	r3, #2
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	021b      	lsls	r3, r3, #8
 8008d34:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008d42:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	061b      	lsls	r3, r3, #24
 8008d4e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5a:	3307      	adds	r3, #7
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d66:	3306      	adds	r3, #6
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4313      	orrs	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	809a      	strh	r2, [r3, #4]
      break;
 8008d78:	bf00      	nop
  }

  return error;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008d92:	2302      	movs	r3, #2
 8008d94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d002      	beq.n	8008db0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d03d      	beq.n	8008e2a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008dae:	e089      	b.n	8008ec4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2224      	movs	r2, #36	; 0x24
 8008db4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2280      	movs	r2, #128	; 0x80
 8008dba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	3363      	adds	r3, #99	; 0x63
 8008dca:	220a      	movs	r2, #10
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f004 fe06 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2212      	movs	r2, #18
 8008dd8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	015b      	lsls	r3, r3, #5
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	2224      	movs	r2, #36	; 0x24
 8008dfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f103 0210 	add.w	r2, r3, #16
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008e24:	2301      	movs	r3, #1
 8008e26:	75fb      	strb	r3, [r7, #23]
      break;
 8008e28:	e04c      	b.n	8008ec4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fcac 	bl	800878c <USBH_MSC_BOT_Process>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d141      	bne.n	8008ec2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008e3e:	2222      	movs	r2, #34	; 0x22
 8008e40:	2100      	movs	r1, #0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f004 fdcc 	bl	800d9e0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 031f 	and.w	r3, r3, #31
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e70:	3301      	adds	r3, #1
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	b25b      	sxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	da03      	bge.n	8008e82 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	709a      	strb	r2, [r3, #2]
 8008e80:	e002      	b.n	8008e88 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	1cd8      	adds	r0, r3, #3
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e92:	3308      	adds	r3, #8
 8008e94:	2208      	movs	r2, #8
 8008e96:	4619      	mov	r1, r3
 8008e98:	f004 fd94 	bl	800d9c4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f103 000c 	add.w	r0, r3, #12
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea8:	3310      	adds	r3, #16
 8008eaa:	2210      	movs	r2, #16
 8008eac:	4619      	mov	r1, r3
 8008eae:	f004 fd89 	bl	800d9c4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	331d      	adds	r3, #29
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008ebc:	3220      	adds	r2, #32
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	601a      	str	r2, [r3, #0]
      break;
 8008ec2:	bf00      	nop
  }

  return error;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b086      	sub	sp, #24
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008edc:	2302      	movs	r3, #2
 8008ede:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d002      	beq.n	8008efa <USBH_MSC_SCSI_RequestSense+0x2c>
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d03d      	beq.n	8008f74 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008ef8:	e05d      	b.n	8008fb6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	220e      	movs	r2, #14
 8008efe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2280      	movs	r2, #128	; 0x80
 8008f04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	220a      	movs	r2, #10
 8008f0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3363      	adds	r3, #99	; 0x63
 8008f14:	2210      	movs	r2, #16
 8008f16:	2100      	movs	r1, #0
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f004 fd61 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2203      	movs	r2, #3
 8008f22:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008f26:	7afb      	ldrb	r3, [r7, #11]
 8008f28:	015b      	lsls	r3, r3, #5
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	220e      	movs	r2, #14
 8008f46:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f103 0210 	add.w	r2, r3, #16
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
      break;
 8008f72:	e020      	b.n	8008fb6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	4619      	mov	r1, r3
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff fc07 	bl	800878c <USBH_MSC_BOT_Process>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f8e:	3302      	adds	r3, #2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa2:	7b1a      	ldrb	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fae:	7b5a      	ldrb	r2, [r3, #13]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	709a      	strb	r2, [r3, #2]
      break;
 8008fb4:	bf00      	nop
  }

  return error;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d002      	beq.n	8008fee <USBH_MSC_SCSI_Write+0x2e>
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d047      	beq.n	800907c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008fec:	e04e      	b.n	800908c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	fb03 f202 	mul.w	r2, r3, r2
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	220a      	movs	r2, #10
 800900c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3363      	adds	r3, #99	; 0x63
 8009014:	2210      	movs	r2, #16
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f004 fce1 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	222a      	movs	r2, #42	; 0x2a
 8009022:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009026:	79fa      	ldrb	r2, [r7, #7]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800902e:	79ba      	ldrb	r2, [r7, #6]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009036:	797a      	ldrb	r2, [r7, #5]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800903e:	1d3b      	adds	r3, r7, #4
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009048:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009052:	f107 0320 	add.w	r3, r7, #32
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009076:	2301      	movs	r3, #1
 8009078:	75fb      	strb	r3, [r7, #23]
      break;
 800907a:	e007      	b.n	800908c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	4619      	mov	r1, r3
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fb83 	bl	800878c <USBH_MSC_BOT_Process>
 8009086:	4603      	mov	r3, r0
 8009088:	75fb      	strb	r3, [r7, #23]
      break;
 800908a:	bf00      	nop
  }

  return error;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	460b      	mov	r3, r1
 80090a4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80090a6:	2302      	movs	r3, #2
 80090a8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d002      	beq.n	80090c4 <USBH_MSC_SCSI_Read+0x2e>
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d047      	beq.n	8009152 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80090c2:	e04e      	b.n	8009162 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80090ca:	461a      	mov	r2, r3
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	fb03 f202 	mul.w	r2, r3, r2
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2280      	movs	r2, #128	; 0x80
 80090da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	220a      	movs	r2, #10
 80090e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3363      	adds	r3, #99	; 0x63
 80090ea:	2210      	movs	r2, #16
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f004 fc76 	bl	800d9e0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2228      	movs	r2, #40	; 0x28
 80090f8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009104:	79ba      	ldrb	r2, [r7, #6]
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800910c:	797a      	ldrb	r2, [r7, #5]
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009114:	1d3b      	adds	r3, r7, #4
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800911e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009128:	f107 0320 	add.w	r3, r7, #32
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800914c:	2301      	movs	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
      break;
 8009150:	e007      	b.n	8009162 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	4619      	mov	r1, r3
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff fb18 	bl	800878c <USBH_MSC_BOT_Process>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
      break;
 8009160:	bf00      	nop
  }

  return error;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009180:	2302      	movs	r3, #2
 8009182:	e029      	b.n	80091d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	79fa      	ldrb	r2, [r7, #7]
 8009188:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 f81f 	bl	80091e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f004 f99b 	bl	800d50c <USBH_LL_Init>

  return USBH_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e008      	b.n	8009204 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	32e0      	adds	r2, #224	; 0xe0
 80091f8:	2100      	movs	r1, #0
 80091fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b0e      	cmp	r3, #14
 8009208:	d9f3      	bls.n	80091f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800920a:	2300      	movs	r3, #0
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e009      	b.n	8009224 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4413      	add	r3, r2
 8009216:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3301      	adds	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922a:	d3f1      	bcc.n	8009210 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2240      	movs	r2, #64	; 0x40
 8009250:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d017      	beq.n	80092b8 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009298:	1c59      	adds	r1, r3, #1
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	33dc      	adds	r3, #220	; 0xdc
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e004      	b.n	80092bc <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	e001      	b.n	80092bc <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092b8:	2302      	movs	r3, #2
 80092ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d204      	bcs.n	80092ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80092ec:	e001      	b.n	80092f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80092ee:	2302      	movs	r3, #2
 80092f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr

080092fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	4608      	mov	r0, r1
 8009308:	4611      	mov	r1, r2
 800930a:	461a      	mov	r2, r3
 800930c:	4603      	mov	r3, r0
 800930e:	70fb      	strb	r3, [r7, #3]
 8009310:	460b      	mov	r3, r1
 8009312:	70bb      	strb	r3, [r7, #2]
 8009314:	4613      	mov	r3, r2
 8009316:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f203 3336 	addw	r3, r3, #822	; 0x336
 8009326:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009328:	e025      	b.n	8009376 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	221a      	movs	r2, #26
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	3308      	adds	r3, #8
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	3302      	adds	r3, #2
 800933a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	795b      	ldrb	r3, [r3, #5]
 8009340:	78fa      	ldrb	r2, [r7, #3]
 8009342:	429a      	cmp	r2, r3
 8009344:	d002      	beq.n	800934c <USBH_FindInterface+0x4e>
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	2bff      	cmp	r3, #255	; 0xff
 800934a:	d111      	bne.n	8009370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009350:	78ba      	ldrb	r2, [r7, #2]
 8009352:	429a      	cmp	r2, r3
 8009354:	d002      	beq.n	800935c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009356:	78bb      	ldrb	r3, [r7, #2]
 8009358:	2bff      	cmp	r3, #255	; 0xff
 800935a:	d109      	bne.n	8009370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009360:	787a      	ldrb	r2, [r7, #1]
 8009362:	429a      	cmp	r2, r3
 8009364:	d002      	beq.n	800936c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009366:	787b      	ldrb	r3, [r7, #1]
 8009368:	2bff      	cmp	r3, #255	; 0xff
 800936a:	d101      	bne.n	8009370 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	e006      	b.n	800937e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	3301      	adds	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d9d6      	bls.n	800932a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800937c:	23ff      	movs	r3, #255	; 0xff
}
 800937e:	4618      	mov	r0, r3
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f004 f8f7 	bl	800d584 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009396:	2101      	movs	r1, #1
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f004 fa10 	bl	800d7be <USBH_LL_DriverVBUS>

  return USBH_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af04      	add	r7, sp, #16
 80093ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d102      	bne.n	80093ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2203      	movs	r2, #3
 80093c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b0b      	cmp	r3, #11
 80093d2:	f200 8177 	bhi.w	80096c4 <USBH_Process+0x31c>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBH_Process+0x34>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800940d 	.word	0x0800940d
 80093e0:	0800942f 	.word	0x0800942f
 80093e4:	08009443 	.word	0x08009443
 80093e8:	0800965f 	.word	0x0800965f
 80093ec:	080096c5 	.word	0x080096c5
 80093f0:	080094e7 	.word	0x080094e7
 80093f4:	08009615 	.word	0x08009615
 80093f8:	08009517 	.word	0x08009517
 80093fc:	08009537 	.word	0x08009537
 8009400:	08009557 	.word	0x08009557
 8009404:	08009585 	.word	0x08009585
 8009408:	08009647 	.word	0x08009647
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8157 	beq.w	80096c8 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009420:	20c8      	movs	r0, #200	; 0xc8
 8009422:	f004 fa41 	bl	800d8a8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f004 f909 	bl	800d63e <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800942c:	e14c      	b.n	80096c8 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009434:	2b01      	cmp	r3, #1
 8009436:	f040 8149 	bne.w	80096cc <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2202      	movs	r2, #2
 800943e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009440:	e144      	b.n	80096cc <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009452:	2104      	movs	r1, #4
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009458:	2064      	movs	r0, #100	; 0x64
 800945a:	f004 fa25 	bl	800d8a8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f004 f8c6 	bl	800d5f0 <USBH_LL_GetSpeed>
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2205      	movs	r2, #5
 8009472:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009474:	2100      	movs	r1, #0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 f855 	bl	800a526 <USBH_AllocPipe>
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009484:	2180      	movs	r1, #128	; 0x80
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f84d 	bl	800a526 <USBH_AllocPipe>
 800948c:	4603      	mov	r3, r0
 800948e:	461a      	mov	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7919      	ldrb	r1, [r3, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80094a8:	b292      	uxth	r2, r2
 80094aa:	9202      	str	r2, [sp, #8]
 80094ac:	2200      	movs	r2, #0
 80094ae:	9201      	str	r2, [sp, #4]
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	4603      	mov	r3, r0
 80094b4:	2280      	movs	r2, #128	; 0x80
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 f806 	bl	800a4c8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7959      	ldrb	r1, [r3, #5]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80094d0:	b292      	uxth	r2, r2
 80094d2:	9202      	str	r2, [sp, #8]
 80094d4:	2200      	movs	r2, #0
 80094d6:	9201      	str	r2, [sp, #4]
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4603      	mov	r3, r0
 80094dc:	2200      	movs	r2, #0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fff2 	bl	800a4c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094e4:	e101      	b.n	80096ea <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f904 	bl	80096f4 <USBH_HandleEnum>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f040 80ee 	bne.w	80096d0 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009502:	2b01      	cmp	r3, #1
 8009504:	d103      	bne.n	800950e <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2208      	movs	r2, #8
 800950a:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800950c:	e0e0      	b.n	80096d0 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2207      	movs	r2, #7
 8009512:	701a      	strb	r2, [r3, #0]
      break;
 8009514:	e0dc      	b.n	80096d0 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80d9 	beq.w	80096d4 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009528:	2101      	movs	r1, #1
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2208      	movs	r2, #8
 8009532:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009534:	e0ce      	b.n	80096d4 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800953c:	b29b      	uxth	r3, r3
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fb4d 	bl	8009be0 <USBH_SetCfg>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 80c5 	bne.w	80096d8 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2209      	movs	r2, #9
 8009552:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009554:	e0c0      	b.n	80096d8 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00b      	beq.n	800957c <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009564:	2101      	movs	r1, #1
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fb5d 	bl	8009c26 <USBH_SetFeature>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	f040 80b4 	bne.w	80096dc <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220a      	movs	r2, #10
 8009578:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800957a:	e0af      	b.n	80096dc <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	220a      	movs	r2, #10
 8009580:	701a      	strb	r2, [r3, #0]
      break;
 8009582:	e0ab      	b.n	80096dc <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80a8 	beq.w	80096e0 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
 800959c:	e017      	b.n	80095ce <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	33dc      	adds	r3, #220	; 0xdc
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	791a      	ldrb	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d108      	bne.n	80095c8 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	33dc      	adds	r3, #220	; 0xdc
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	3301      	adds	r3, #1
 80095cc:	73fb      	strb	r3, [r7, #15]
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0e4      	beq.n	800959e <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d016      	beq.n	800960c <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d109      	bne.n	8009604 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2206      	movs	r2, #6
 80095f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80095fc:	2103      	movs	r1, #3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009602:	e06d      	b.n	80096e0 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	220d      	movs	r2, #13
 8009608:	701a      	strb	r2, [r3, #0]
      break;
 800960a:	e069      	b.n	80096e0 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	220d      	movs	r2, #13
 8009610:	701a      	strb	r2, [r3, #0]
      break;
 8009612:	e065      	b.n	80096e0 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00f      	beq.n	800963e <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d156      	bne.n	80096e4 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	220b      	movs	r2, #11
 800963a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800963c:	e052      	b.n	80096e4 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	220d      	movs	r2, #13
 8009642:	701a      	strb	r2, [r3, #0]
      break;
 8009644:	e04e      	b.n	80096e4 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800964c:	2b00      	cmp	r3, #0
 800964e:	d04b      	beq.n	80096e8 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
      }
      break;
 800965c:	e044      	b.n	80096e8 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fdba 	bl	80091e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800969a:	2105      	movs	r1, #5
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d107      	bne.n	80096bc <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff fe67 	bl	8009388 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096ba:	e016      	b.n	80096ea <USBH_Process+0x342>
        USBH_LL_Start(phost);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f003 ff61 	bl	800d584 <USBH_LL_Start>
      break;
 80096c2:	e012      	b.n	80096ea <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 80096c4:	bf00      	nop
 80096c6:	e010      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096c8:	bf00      	nop
 80096ca:	e00e      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096cc:	bf00      	nop
 80096ce:	e00c      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096d0:	bf00      	nop
 80096d2:	e00a      	b.n	80096ea <USBH_Process+0x342>
    break;
 80096d4:	bf00      	nop
 80096d6:	e008      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096d8:	bf00      	nop
 80096da:	e006      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096dc:	bf00      	nop
 80096de:	e004      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096e0:	bf00      	nop
 80096e2:	e002      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096e4:	bf00      	nop
 80096e6:	e000      	b.n	80096ea <USBH_Process+0x342>
      break;
 80096e8:	bf00      	nop
  }
  return USBH_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af04      	add	r7, sp, #16
 80096fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	2b07      	cmp	r3, #7
 8009706:	f200 80f8 	bhi.w	80098fa <USBH_HandleEnum+0x206>
 800970a:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <USBH_HandleEnum+0x1c>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	08009731 	.word	0x08009731
 8009714:	080097a3 	.word	0x080097a3
 8009718:	080097bb 	.word	0x080097bb
 800971c:	08009831 	.word	0x08009831
 8009720:	08009847 	.word	0x08009847
 8009724:	08009863 	.word	0x08009863
 8009728:	08009897 	.word	0x08009897
 800972c:	080098cb 	.word	0x080098cb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009730:	2108      	movs	r1, #8
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f984 	bl	8009a40 <USBH_Get_DevDesc>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 80df 	bne.w	80098fe <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7919      	ldrb	r1, [r3, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8009764:	b292      	uxth	r2, r2
 8009766:	9202      	str	r2, [sp, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	9201      	str	r2, [sp, #4]
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	4603      	mov	r3, r0
 8009770:	2280      	movs	r2, #128	; 0x80
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fea8 	bl	800a4c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7959      	ldrb	r1, [r3, #5]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800978c:	b292      	uxth	r2, r2
 800978e:	9202      	str	r2, [sp, #8]
 8009790:	2200      	movs	r2, #0
 8009792:	9201      	str	r2, [sp, #4]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4603      	mov	r3, r0
 8009798:	2200      	movs	r2, #0
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fe94 	bl	800a4c8 <USBH_OpenPipe>
      }
      break;
 80097a0:	e0ad      	b.n	80098fe <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 80097a2:	2112      	movs	r1, #18
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f94b 	bl	8009a40 <USBH_Get_DevDesc>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 80a8 	bne.w	8009902 <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2202      	movs	r2, #2
 80097b6:	705a      	strb	r2, [r3, #1]

      }
      break;
 80097b8:	e0a3      	b.n	8009902 <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80097ba:	2101      	movs	r1, #1
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9eb 	bl	8009b98 <USBH_SetAddress>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 809e 	bne.w	8009906 <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 80097ca:	2002      	movs	r0, #2
 80097cc:	f004 f86c 	bl	800d8a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2203      	movs	r2, #3
 80097dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7919      	ldrb	r1, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80097f2:	b292      	uxth	r2, r2
 80097f4:	9202      	str	r2, [sp, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	9201      	str	r2, [sp, #4]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4603      	mov	r3, r0
 80097fe:	2280      	movs	r2, #128	; 0x80
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fe61 	bl	800a4c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7959      	ldrb	r1, [r3, #5]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800981a:	b292      	uxth	r2, r2
 800981c:	9202      	str	r2, [sp, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	9201      	str	r2, [sp, #4]
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4603      	mov	r3, r0
 8009826:	2200      	movs	r2, #0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fe4d 	bl	800a4c8 <USBH_OpenPipe>
      }
      break;
 800982e:	e06a      	b.n	8009906 <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8009830:	2109      	movs	r1, #9
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f92c 	bl	8009a90 <USBH_Get_CfgDesc>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d165      	bne.n	800990a <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2204      	movs	r2, #4
 8009842:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009844:	e061      	b.n	800990a <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f91e 	bl	8009a90 <USBH_Get_CfgDesc>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d159      	bne.n	800990e <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2205      	movs	r2, #5
 800985e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009860:	e055      	b.n	800990e <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009868:	2b00      	cmp	r3, #0
 800986a:	d010      	beq.n	800988e <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009878:	23ff      	movs	r3, #255	; 0xff
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f92c 	bl	8009ad8 <USBH_Get_StringDesc>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d145      	bne.n	8009912 <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2206      	movs	r2, #6
 800988a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800988c:	e041      	b.n	8009912 <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2206      	movs	r2, #6
 8009892:	705a      	strb	r2, [r3, #1]
      break;
 8009894:	e03d      	b.n	8009912 <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800989c:	2b00      	cmp	r3, #0
 800989e:	d010      	beq.n	80098c2 <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80098ac:	23ff      	movs	r3, #255	; 0xff
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f912 	bl	8009ad8 <USBH_Get_StringDesc>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d12d      	bne.n	8009916 <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2207      	movs	r2, #7
 80098be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098c0:	e029      	b.n	8009916 <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2207      	movs	r2, #7
 80098c6:	705a      	strb	r2, [r3, #1]
      break;
 80098c8:	e025      	b.n	8009916 <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00f      	beq.n	80098f4 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80098e0:	23ff      	movs	r3, #255	; 0xff
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8f8 	bl	8009ad8 <USBH_Get_StringDesc>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d115      	bne.n	800991a <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098f2:	e012      	b.n	800991a <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
      break;
 80098f8:	e00f      	b.n	800991a <USBH_HandleEnum+0x226>

    default:
      break;
 80098fa:	bf00      	nop
 80098fc:	e00e      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 80098fe:	bf00      	nop
 8009900:	e00c      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 8009902:	bf00      	nop
 8009904:	e00a      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 8009906:	bf00      	nop
 8009908:	e008      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 800990a:	bf00      	nop
 800990c:	e006      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 800990e:	bf00      	nop
 8009910:	e004      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 8009912:	bf00      	nop
 8009914:	e002      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <USBH_HandleEnum+0x228>
      break;
 800991a:	bf00      	nop
  }
  return Status;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop

08009928 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f804 	bl	8009968 <USBH_HandleSof>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b0b      	cmp	r3, #11
 8009978:	d10a      	bne.n	8009990 <USBH_HandleSof+0x28>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
  }
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80099a8:	bf00      	nop
}
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr

080099b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 80099c2:	bf00      	nop
}
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr

080099cc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f003 fdce 	bl	800d5ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	791b      	ldrb	r3, [r3, #4]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fd9e 	bl	800a566 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	795b      	ldrb	r3, [r3, #5]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fd98 	bl	800a566 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f864 	bl	8009b2e <USBH_GetDescriptor>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73fb      	strb	r3, [r7, #15]
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a7c:	78fa      	ldrb	r2, [r7, #3]
 8009a7e:	b292      	uxth	r2, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f000 f918 	bl	8009cb6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	331c      	adds	r3, #28
 8009aa0:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009aa2:	887b      	ldrh	r3, [r7, #2]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aac:	2100      	movs	r1, #0
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f83d 	bl	8009b2e <USBH_GetDescriptor>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	72fb      	strb	r3, [r7, #11]
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f203 3336 	addw	r3, r3, #822	; 0x336
 8009ac4:	887a      	ldrh	r2, [r7, #2]
 8009ac6:	68f9      	ldr	r1, [r7, #12]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f963 	bl	8009d94 <USBH_ParseCfgDesc>
  }

  return status;
 8009ace:	7afb      	ldrb	r3, [r7, #11]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	72fb      	strb	r3, [r7, #11]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009af4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009afc:	893b      	ldrh	r3, [r7, #8]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	460b      	mov	r3, r1
 8009b02:	2100      	movs	r1, #0
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f812 	bl	8009b2e <USBH_GetDescriptor>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75fb      	strb	r3, [r7, #23]
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d107      	bne.n	8009b24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b1a:	893a      	ldrh	r2, [r7, #8]
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fa34 	bl	8009f8c <USBH_ParseStringDesc>
  }

  return status;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	72fb      	strb	r3, [r7, #11]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	789b      	ldrb	r3, [r3, #2]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d11c      	bne.n	8009b82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2206      	movs	r2, #6
 8009b58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	893a      	ldrh	r2, [r7, #8]
 8009b5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b60:	893b      	ldrh	r3, [r7, #8]
 8009b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b6a:	d104      	bne.n	8009b76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f240 4209 	movw	r2, #1033	; 0x409
 8009b72:	829a      	strh	r2, [r3, #20]
 8009b74:	e002      	b.n	8009b7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8b3a      	ldrh	r2, [r7, #24]
 8009b80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b82:	8b3b      	ldrh	r3, [r7, #24]
 8009b84:	461a      	mov	r2, r3
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fa4b 	bl	800a024 <USBH_CtlReq>
 8009b8e:	4603      	mov	r3, r0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	789b      	ldrb	r3, [r3, #2]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10f      	bne.n	8009bcc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa27 	bl	800a024 <USBH_CtlReq>
 8009bd6:	4603      	mov	r3, r0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	789b      	ldrb	r3, [r3, #2]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10e      	bne.n	8009c12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2209      	movs	r2, #9
 8009bfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	887a      	ldrh	r2, [r7, #2]
 8009c04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa04 	bl	800a024 <USBH_CtlReq>
 8009c1c:	4603      	mov	r3, r0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	789b      	ldrb	r3, [r3, #2]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d10f      	bne.n	8009c5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2203      	movs	r2, #3
 8009c44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f9e0 	bl	800a024 <USBH_CtlReq>
 8009c64:	4603      	mov	r3, r0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	789b      	ldrb	r3, [r3, #2]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d10f      	bne.n	8009ca2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2202      	movs	r2, #2
 8009c86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f9bc 	bl	800a024 <USBH_CtlReq>
 8009cac:	4603      	mov	r3, r0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	781a      	ldrb	r2, [r3, #0]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	785a      	ldrb	r2, [r3, #1]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3303      	adds	r3, #3
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	021b      	lsls	r3, r3, #8
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	791a      	ldrb	r2, [r3, #4]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	795a      	ldrb	r2, [r3, #5]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	799a      	ldrb	r2, [r3, #6]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	79da      	ldrb	r2, [r3, #7]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	2b08      	cmp	r3, #8
 8009d14:	d939      	bls.n	8009d8a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	3309      	adds	r3, #9
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	330a      	adds	r3, #10
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	330b      	adds	r3, #11
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	330c      	adds	r3, #12
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	330d      	adds	r3, #13
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4313      	orrs	r3, r2
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	7b9a      	ldrb	r2, [r3, #14]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	7bda      	ldrb	r2, [r3, #15]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	7c1a      	ldrb	r2, [r3, #16]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	7c5a      	ldrb	r2, [r3, #17]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	745a      	strb	r2, [r3, #17]
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	785a      	ldrb	r2, [r3, #1]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	3302      	adds	r3, #2
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3303      	adds	r3, #3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	791a      	ldrb	r2, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	795a      	ldrb	r2, [r3, #5]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	799a      	ldrb	r2, [r3, #6]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	79da      	ldrb	r2, [r3, #7]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	7a1a      	ldrb	r2, [r3, #8]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	2b09      	cmp	r3, #9
 8009e0e:	d95f      	bls.n	8009ed0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e10:	2309      	movs	r3, #9
 8009e12:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e18:	e051      	b.n	8009ebe <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e1a:	f107 0316 	add.w	r3, r7, #22
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e22:	f000 f8e5 	bl	8009ff0 <USBH_GetNextDesc>
 8009e26:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d146      	bne.n	8009ebe <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e34:	221a      	movs	r2, #26
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	3302      	adds	r3, #2
 8009e42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e46:	69f8      	ldr	r0, [r7, #28]
 8009e48:	f000 f846 	bl	8009ed8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e56:	e022      	b.n	8009e9e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e58:	f107 0316 	add.w	r3, r7, #22
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e60:	f000 f8c6 	bl	8009ff0 <USBH_GetNextDesc>
 8009e64:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d117      	bne.n	8009e9e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e72:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e76:	3201      	adds	r2, #1
 8009e78:	00d2      	lsls	r2, r2, #3
 8009e7a:	211a      	movs	r1, #26
 8009e7c:	fb01 f303 	mul.w	r3, r1, r3
 8009e80:	4413      	add	r3, r2
 8009e82:	3308      	adds	r3, #8
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	3304      	adds	r3, #4
 8009e8a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e8e:	69b8      	ldr	r0, [r7, #24]
 8009e90:	f000 f850 	bl	8009f34 <USBH_ParseEPDesc>
            ep_ix++;
 8009e94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	791b      	ldrb	r3, [r3, #4]
 8009ea2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d204      	bcs.n	8009eb4 <USBH_ParseCfgDesc+0x120>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	885a      	ldrh	r2, [r3, #2]
 8009eae:	8afb      	ldrh	r3, [r7, #22]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d8d1      	bhi.n	8009e58 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d804      	bhi.n	8009ed0 <USBH_ParseCfgDesc+0x13c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	885a      	ldrh	r2, [r3, #2]
 8009eca:	8afb      	ldrh	r3, [r7, #22]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d8a4      	bhi.n	8009e1a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	3728      	adds	r7, #40	; 0x28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	785a      	ldrb	r2, [r3, #1]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	789a      	ldrb	r2, [r3, #2]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	78da      	ldrb	r2, [r3, #3]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	791a      	ldrb	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	795a      	ldrb	r2, [r3, #5]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	799a      	ldrb	r2, [r3, #6]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	79da      	ldrb	r2, [r3, #7]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	7a1a      	ldrb	r2, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	721a      	strb	r2, [r3, #8]
}
 8009f2a:	bf00      	nop
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bc80      	pop	{r7}
 8009f32:	4770      	bx	lr

08009f34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	785a      	ldrb	r2, [r3, #1]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	789a      	ldrb	r2, [r3, #2]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	78da      	ldrb	r2, [r3, #3]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	3304      	adds	r3, #4
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	3305      	adds	r3, #5
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	799a      	ldrb	r2, [r3, #6]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	719a      	strb	r2, [r3, #6]
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr

08009f8c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4613      	mov	r3, r2
 8009f98:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d120      	bne.n	8009fe6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	1e9a      	subs	r2, r3, #2
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	bf28      	it	cs
 8009fb0:	4613      	movcs	r3, r2
 8009fb2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009fba:	2300      	movs	r3, #0
 8009fbc:	82fb      	strh	r3, [r7, #22]
 8009fbe:	e00b      	b.n	8009fd8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009fc0:	8afb      	ldrh	r3, [r7, #22]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fd2:	8afb      	ldrh	r3, [r7, #22]
 8009fd4:	3302      	adds	r3, #2
 8009fd6:	82fb      	strh	r3, [r7, #22]
 8009fd8:	8afa      	ldrh	r2, [r7, #22]
 8009fda:	8abb      	ldrh	r3, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d3ef      	bcc.n	8009fc0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr

08009ff0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	881a      	ldrh	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	4413      	add	r3, r2
 800a006:	b29a      	uxth	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr

0800a024 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a032:	2301      	movs	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	789b      	ldrb	r3, [r3, #2]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d002      	beq.n	800a044 <USBH_CtlReq+0x20>
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d00f      	beq.n	800a062 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800a042:	e034      	b.n	800a0ae <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	88fa      	ldrh	r2, [r7, #6]
 800a04e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a05c:	2301      	movs	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e025      	b.n	800a0ae <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f828 	bl	800a0b8 <USBH_HandleControl>
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d108      	bne.n	800a084 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]
      break;
 800a082:	e013      	b.n	800a0ac <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d108      	bne.n	800a09c <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a096:	2303      	movs	r3, #3
 800a098:	75fb      	strb	r3, [r7, #23]
      break;
 800a09a:	e007      	b.n	800a0ac <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d104      	bne.n	800a0ac <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ac:	bf00      	nop
  }
  return status;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	7e1b      	ldrb	r3, [r3, #24]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	2b0a      	cmp	r3, #10
 800a0d0:	f200 814a 	bhi.w	800a368 <USBH_HandleControl+0x2b0>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBH_HandleControl+0x24>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	0800a123 	.word	0x0800a123
 800a0e4:	0800a18d 	.word	0x0800a18d
 800a0e8:	0800a1b3 	.word	0x0800a1b3
 800a0ec:	0800a1eb 	.word	0x0800a1eb
 800a0f0:	0800a215 	.word	0x0800a215
 800a0f4:	0800a267 	.word	0x0800a267
 800a0f8:	0800a289 	.word	0x0800a289
 800a0fc:	0800a2c5 	.word	0x0800a2c5
 800a100:	0800a2eb 	.word	0x0800a2eb
 800a104:	0800a329 	.word	0x0800a329
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0110 	add.w	r1, r3, #16
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	795b      	ldrb	r3, [r3, #5]
 800a112:	461a      	mov	r2, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f937 	bl	800a388 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	761a      	strb	r2, [r3, #24]
      break;
 800a120:	e12d      	b.n	800a37e <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	795b      	ldrb	r3, [r3, #5]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f003 fb35 	bl	800d798 <USBH_LL_GetURBState>
 800a12e:	4603      	mov	r3, r0
 800a130:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d11e      	bne.n	800a176 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7c1b      	ldrb	r3, [r3, #16]
 800a13c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a140:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8adb      	ldrh	r3, [r3, #22]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a14a:	7b7b      	ldrb	r3, [r7, #13]
 800a14c:	2b80      	cmp	r3, #128	; 0x80
 800a14e:	d103      	bne.n	800a158 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2203      	movs	r2, #3
 800a154:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a156:	e109      	b.n	800a36c <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2205      	movs	r2, #5
 800a15c:	761a      	strb	r2, [r3, #24]
      break;
 800a15e:	e105      	b.n	800a36c <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800a160:	7b7b      	ldrb	r3, [r7, #13]
 800a162:	2b80      	cmp	r3, #128	; 0x80
 800a164:	d103      	bne.n	800a16e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2209      	movs	r2, #9
 800a16a:	761a      	strb	r2, [r3, #24]
      break;
 800a16c:	e0fe      	b.n	800a36c <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2207      	movs	r2, #7
 800a172:	761a      	strb	r2, [r3, #24]
      break;
 800a174:	e0fa      	b.n	800a36c <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b04      	cmp	r3, #4
 800a17a:	d003      	beq.n	800a184 <USBH_HandleControl+0xcc>
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	f040 80f4 	bne.w	800a36c <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	220b      	movs	r2, #11
 800a188:	761a      	strb	r2, [r3, #24]
      break;
 800a18a:	e0ef      	b.n	800a36c <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6899      	ldr	r1, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	899a      	ldrh	r2, [r3, #12]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	791b      	ldrb	r3, [r3, #4]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f92e 	bl	800a406 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	761a      	strb	r2, [r3, #24]
      break;
 800a1b0:	e0e5      	b.n	800a37e <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	791b      	ldrb	r3, [r3, #4]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f003 faed 	bl	800d798 <USBH_LL_GetURBState>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d102      	bne.n	800a1ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2209      	movs	r2, #9
 800a1cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	d102      	bne.n	800a1da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1d8:	e0ca      	b.n	800a370 <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	f040 80c7 	bne.w	800a370 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	220b      	movs	r2, #11
 800a1e6:	761a      	strb	r2, [r3, #24]
      break;
 800a1e8:	e0c2      	b.n	800a370 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6899      	ldr	r1, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	899a      	ldrh	r2, [r3, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	795b      	ldrb	r3, [r3, #5]
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	9000      	str	r0, [sp, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8de 	bl	800a3bc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2206      	movs	r2, #6
 800a210:	761a      	strb	r2, [r3, #24]
      break;
 800a212:	e0b4      	b.n	800a37e <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	795b      	ldrb	r3, [r3, #5]
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f003 fabc 	bl	800d798 <USBH_LL_GetURBState>
 800a220:	4603      	mov	r3, r0
 800a222:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d103      	bne.n	800a232 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2207      	movs	r2, #7
 800a22e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a230:	e0a0      	b.n	800a374 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	2b05      	cmp	r3, #5
 800a236:	d105      	bne.n	800a244 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	220c      	movs	r2, #12
 800a23c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a23e:	2303      	movs	r3, #3
 800a240:	73fb      	strb	r3, [r7, #15]
      break;
 800a242:	e097      	b.n	800a374 <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b02      	cmp	r3, #2
 800a248:	d103      	bne.n	800a252 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2205      	movs	r2, #5
 800a24e:	761a      	strb	r2, [r3, #24]
      break;
 800a250:	e090      	b.n	800a374 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b04      	cmp	r3, #4
 800a256:	f040 808d 	bne.w	800a374 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	220b      	movs	r2, #11
 800a25e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e086      	b.n	800a374 <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	791b      	ldrb	r3, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	2100      	movs	r1, #0
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f8c9 	bl	800a406 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2208      	movs	r2, #8
 800a284:	761a      	strb	r2, [r3, #24]

      break;
 800a286:	e07a      	b.n	800a37e <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	791b      	ldrb	r3, [r3, #4]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f003 fa82 	bl	800d798 <USBH_LL_GetURBState>
 800a294:	4603      	mov	r3, r0
 800a296:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d105      	bne.n	800a2aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	220d      	movs	r2, #13
 800a2a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2a8:	e066      	b.n	800a378 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d103      	bne.n	800a2b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	220b      	movs	r2, #11
 800a2b4:	761a      	strb	r2, [r3, #24]
      break;
 800a2b6:	e05f      	b.n	800a378 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	d15c      	bne.n	800a378 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c2:	e059      	b.n	800a378 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	795b      	ldrb	r3, [r3, #5]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	9200      	str	r2, [sp, #0]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f873 	bl	800a3bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	220a      	movs	r2, #10
 800a2e6:	761a      	strb	r2, [r3, #24]
      break;
 800a2e8:	e049      	b.n	800a37e <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	795b      	ldrb	r3, [r3, #5]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f003 fa51 	bl	800d798 <USBH_LL_GetURBState>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d105      	bne.n	800a30c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	220d      	movs	r2, #13
 800a308:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a30a:	e037      	b.n	800a37c <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d103      	bne.n	800a31a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2209      	movs	r2, #9
 800a316:	761a      	strb	r2, [r3, #24]
      break;
 800a318:	e030      	b.n	800a37c <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d12d      	bne.n	800a37c <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	220b      	movs	r2, #11
 800a324:	761a      	strb	r2, [r3, #24]
      break;
 800a326:	e029      	b.n	800a37c <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7e5b      	ldrb	r3, [r3, #25]
 800a32c:	3301      	adds	r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	765a      	strb	r2, [r3, #25]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	7e5b      	ldrb	r3, [r3, #25]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d806      	bhi.n	800a34a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a348:	e019      	b.n	800a37e <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a350:	2106      	movs	r1, #6
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a362:	2302      	movs	r3, #2
 800a364:	73fb      	strb	r3, [r7, #15]
      break;
 800a366:	e00a      	b.n	800a37e <USBH_HandleControl+0x2c6>

    default:
      break;
 800a368:	bf00      	nop
 800a36a:	e008      	b.n	800a37e <USBH_HandleControl+0x2c6>
      break;
 800a36c:	bf00      	nop
 800a36e:	e006      	b.n	800a37e <USBH_HandleControl+0x2c6>
      break;
 800a370:	bf00      	nop
 800a372:	e004      	b.n	800a37e <USBH_HandleControl+0x2c6>
      break;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <USBH_HandleControl+0x2c6>
      break;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <USBH_HandleControl+0x2c6>
      break;
 800a37c:	bf00      	nop
  }

  return status;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af04      	add	r7, sp, #16
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a396:	79f9      	ldrb	r1, [r7, #7]
 800a398:	2300      	movs	r3, #0
 800a39a:	9303      	str	r3, [sp, #12]
 800a39c:	2308      	movs	r3, #8
 800a39e:	9302      	str	r3, [sp, #8]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f003 f9c2 	bl	800d736 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af04      	add	r7, sp, #16
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	80fb      	strh	r3, [r7, #6]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3e0:	7979      	ldrb	r1, [r7, #5]
 800a3e2:	7e3b      	ldrb	r3, [r7, #24]
 800a3e4:	9303      	str	r3, [sp, #12]
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	9302      	str	r3, [sp, #8]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f003 f99d 	bl	800d736 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af04      	add	r7, sp, #16
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	4611      	mov	r1, r2
 800a412:	461a      	mov	r2, r3
 800a414:	460b      	mov	r3, r1
 800a416:	80fb      	strh	r3, [r7, #6]
 800a418:	4613      	mov	r3, r2
 800a41a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a41c:	7979      	ldrb	r1, [r7, #5]
 800a41e:	2300      	movs	r3, #0
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	2301      	movs	r3, #1
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	2201      	movs	r2, #1
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f003 f97f 	bl	800d736 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a438:	2300      	movs	r3, #0

}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b088      	sub	sp, #32
 800a446:	af04      	add	r7, sp, #16
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	4611      	mov	r1, r2
 800a44e:	461a      	mov	r2, r3
 800a450:	460b      	mov	r3, r1
 800a452:	80fb      	strh	r3, [r7, #6]
 800a454:	4613      	mov	r3, r2
 800a456:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a462:	2300      	movs	r3, #0
 800a464:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a466:	7979      	ldrb	r1, [r7, #5]
 800a468:	7e3b      	ldrb	r3, [r7, #24]
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	9302      	str	r3, [sp, #8]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	2301      	movs	r3, #1
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2302      	movs	r3, #2
 800a47a:	2200      	movs	r2, #0
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f003 f95a 	bl	800d736 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af04      	add	r7, sp, #16
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4611      	mov	r1, r2
 800a498:	461a      	mov	r2, r3
 800a49a:	460b      	mov	r3, r1
 800a49c:	80fb      	strh	r3, [r7, #6]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a4a2:	7979      	ldrb	r1, [r7, #5]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	9303      	str	r3, [sp, #12]
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	9302      	str	r3, [sp, #8]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f003 f93c 	bl	800d736 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af04      	add	r7, sp, #16
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	70fb      	strb	r3, [r7, #3]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70bb      	strb	r3, [r7, #2]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4e2:	7878      	ldrb	r0, [r7, #1]
 800a4e4:	78ba      	ldrb	r2, [r7, #2]
 800a4e6:	78f9      	ldrb	r1, [r7, #3]
 800a4e8:	8b3b      	ldrh	r3, [r7, #24]
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	7d3b      	ldrb	r3, [r7, #20]
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	7c3b      	ldrb	r3, [r7, #16]
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f003 f8cf 	bl	800d69a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	460b      	mov	r3, r1
 800a510:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f003 f8ee 	bl	800d6f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	460b      	mov	r3, r1
 800a530:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f832 	bl	800a59c <USBH_GetFreePipe>
 800a538:	4603      	mov	r3, r0
 800a53a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a542:	4293      	cmp	r3, r2
 800a544:	d009      	beq.n	800a55a <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	89fa      	ldrh	r2, [r7, #14]
 800a54a:	f002 020f 	and.w	r2, r2, #15
 800a54e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	32e0      	adds	r2, #224	; 0xe0
 800a556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800a55a:	89fb      	ldrh	r3, [r7, #14]
 800a55c:	b2db      	uxtb	r3, r3
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a572:	78fb      	ldrb	r3, [r7, #3]
 800a574:	2b0a      	cmp	r3, #10
 800a576:	d80b      	bhi.n	800a590 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	32e0      	adds	r2, #224	; 0xe0
 800a57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a582:	78fa      	ldrb	r2, [r7, #3]
 800a584:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	32e0      	adds	r2, #224	; 0xe0
 800a58c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr

0800a59c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	e00e      	b.n	800a5cc <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a5ae:	7bfa      	ldrb	r2, [r7, #15]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	32e0      	adds	r2, #224	; 0xe0
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	e007      	b.n	800a5d6 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	73fb      	strb	r3, [r7, #15]
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	2b0a      	cmp	r3, #10
 800a5d0:	d9ed      	bls.n	800a5ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	4a08      	ldr	r2, [pc, #32]	; (800a610 <disk_status+0x30>)
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	79fa      	ldrb	r2, [r7, #7]
 800a5f8:	4905      	ldr	r1, [pc, #20]	; (800a610 <disk_status+0x30>)
 800a5fa:	440a      	add	r2, r1
 800a5fc:	7a12      	ldrb	r2, [r2, #8]
 800a5fe:	4610      	mov	r0, r2
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20000478 	.word	0x20000478

0800a614 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	4a0d      	ldr	r2, [pc, #52]	; (800a65c <disk_initialize+0x48>)
 800a626:	5cd3      	ldrb	r3, [r2, r3]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d111      	bne.n	800a650 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <disk_initialize+0x48>)
 800a630:	2101      	movs	r1, #1
 800a632:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <disk_initialize+0x48>)
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	79fa      	ldrb	r2, [r7, #7]
 800a642:	4906      	ldr	r1, [pc, #24]	; (800a65c <disk_initialize+0x48>)
 800a644:	440a      	add	r2, r1
 800a646:	7a12      	ldrb	r2, [r2, #8]
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000478 	.word	0x20000478

0800a660 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <disk_read+0x3c>)
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	689c      	ldr	r4, [r3, #8]
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4a07      	ldr	r2, [pc, #28]	; (800a69c <disk_read+0x3c>)
 800a680:	4413      	add	r3, r2
 800a682:	7a18      	ldrb	r0, [r3, #8]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	47a0      	blx	r4
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
}
 800a692:	4618      	mov	r0, r3
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	bd90      	pop	{r4, r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20000478 	.word	0x20000478

0800a6a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <disk_write+0x3c>)
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	68dc      	ldr	r4, [r3, #12]
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	4a07      	ldr	r2, [pc, #28]	; (800a6dc <disk_write+0x3c>)
 800a6c0:	4413      	add	r3, r2
 800a6c2:	7a18      	ldrb	r0, [r3, #8]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	47a0      	blx	r4
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd90      	pop	{r4, r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000478 	.word	0x20000478

0800a6e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	603a      	str	r2, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	4a09      	ldr	r2, [pc, #36]	; (800a718 <disk_ioctl+0x38>)
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	79fa      	ldrb	r2, [r7, #7]
 800a6fe:	4906      	ldr	r1, [pc, #24]	; (800a718 <disk_ioctl+0x38>)
 800a700:	440a      	add	r2, r1
 800a702:	7a10      	ldrb	r0, [r2, #8]
 800a704:	79b9      	ldrb	r1, [r7, #6]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	4798      	blx	r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000478 	.word	0x20000478

0800a71c <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800a72c:	e005      	b.n	800a73a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	617a      	str	r2, [r7, #20]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	1e5a      	subs	r2, r3, #1
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f4      	bne.n	800a72e <mem_set+0x12>
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr

0800a750 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800a750:	b480      	push	{r7}
 800a752:	b089      	sub	sp, #36	; 0x24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	61fb      	str	r3, [r7, #28]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a768:	bf00      	nop
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00d      	beq.n	800a790 <mem_cmp+0x40>
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	61fa      	str	r2, [r7, #28]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	4619      	mov	r1, r3
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	61ba      	str	r2, [r7, #24]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	1acb      	subs	r3, r1, r3
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0ec      	beq.n	800a76a <mem_cmp+0x1a>
	return r;
 800a790:	697b      	ldr	r3, [r7, #20]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3724      	adds	r7, #36	; 0x24
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a7a6:	e002      	b.n	800a7ae <chk_chr+0x12>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	607b      	str	r3, [r7, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <chk_chr+0x26>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d1f2      	bne.n	800a7a8 <chk_chr+0xc>
	return *str;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr

0800a7d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e030      	b.n	800a842 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800a7e0:	495a      	ldr	r1, [pc, #360]	; (800a94c <inc_lock+0x17c>)
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d11f      	bne.n	800a83c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800a7fc:	4953      	ldr	r1, [pc, #332]	; (800a94c <inc_lock+0x17c>)
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4613      	mov	r3, r2
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	3304      	adds	r3, #4
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a814:	3308      	adds	r3, #8
 800a816:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800a818:	429a      	cmp	r2, r3
 800a81a:	d10f      	bne.n	800a83c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800a81c:	494b      	ldr	r1, [pc, #300]	; (800a94c <inc_lock+0x17c>)
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	4613      	mov	r3, r2
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	4413      	add	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	440b      	add	r3, r1
 800a82a:	3308      	adds	r3, #8
 800a82c:	881a      	ldrh	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a834:	3306      	adds	r3, #6
 800a836:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800a838:	429a      	cmp	r2, r3
 800a83a:	d006      	beq.n	800a84a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3301      	adds	r3, #1
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d9cb      	bls.n	800a7e0 <inc_lock+0x10>
 800a848:	e000      	b.n	800a84c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800a84a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d14a      	bne.n	800a8e8 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	e002      	b.n	800a85e <inc_lock+0x8e>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d809      	bhi.n	800a878 <inc_lock+0xa8>
 800a864:	4939      	ldr	r1, [pc, #228]	; (800a94c <inc_lock+0x17c>)
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4613      	mov	r3, r2
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1ef      	bne.n	800a858 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d101      	bne.n	800a882 <inc_lock+0xb2>
 800a87e:	2300      	movs	r3, #0
 800a880:	e05f      	b.n	800a942 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a888:	6819      	ldr	r1, [r3, #0]
 800a88a:	4830      	ldr	r0, [pc, #192]	; (800a94c <inc_lock+0x17c>)
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4613      	mov	r3, r2
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	4413      	add	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4403      	add	r3, r0
 800a898:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	6819      	ldr	r1, [r3, #0]
 800a8a4:	4829      	ldr	r0, [pc, #164]	; (800a94c <inc_lock+0x17c>)
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4403      	add	r3, r0
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8bc:	3306      	adds	r3, #6
 800a8be:	8818      	ldrh	r0, [r3, #0]
 800a8c0:	4922      	ldr	r1, [pc, #136]	; (800a94c <inc_lock+0x17c>)
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	440b      	add	r3, r1
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8d4:	491d      	ldr	r1, [pc, #116]	; (800a94c <inc_lock+0x17c>)
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	4413      	add	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	440b      	add	r3, r1
 800a8e2:	330a      	adds	r3, #10
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00c      	beq.n	800a908 <inc_lock+0x138>
 800a8ee:	4917      	ldr	r1, [pc, #92]	; (800a94c <inc_lock+0x17c>)
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	330a      	adds	r3, #10
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <inc_lock+0x138>
 800a904:	2300      	movs	r3, #0
 800a906:	e01c      	b.n	800a942 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10b      	bne.n	800a926 <inc_lock+0x156>
 800a90e:	490f      	ldr	r1, [pc, #60]	; (800a94c <inc_lock+0x17c>)
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4613      	mov	r3, r2
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	330a      	adds	r3, #10
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	3301      	adds	r3, #1
 800a922:	b299      	uxth	r1, r3
 800a924:	e001      	b.n	800a92a <inc_lock+0x15a>
 800a926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a92a:	4808      	ldr	r0, [pc, #32]	; (800a94c <inc_lock+0x17c>)
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4613      	mov	r3, r2
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4403      	add	r3, r0
 800a938:	330a      	adds	r3, #10
 800a93a:	460a      	mov	r2, r1
 800a93c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr
 800a94c:	20000260 	.word	0x20000260

0800a950 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d82e      	bhi.n	800a9c2 <dec_lock+0x72>
		n = Files[i].ctr;
 800a964:	491b      	ldr	r1, [pc, #108]	; (800a9d4 <dec_lock+0x84>)
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	440b      	add	r3, r1
 800a972:	330a      	adds	r3, #10
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97e:	d101      	bne.n	800a984 <dec_lock+0x34>
 800a980:	2300      	movs	r3, #0
 800a982:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a984:	89fb      	ldrh	r3, [r7, #14]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <dec_lock+0x40>
 800a98a:	89fb      	ldrh	r3, [r7, #14]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a990:	4910      	ldr	r1, [pc, #64]	; (800a9d4 <dec_lock+0x84>)
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	440b      	add	r3, r1
 800a99e:	330a      	adds	r3, #10
 800a9a0:	89fa      	ldrh	r2, [r7, #14]
 800a9a2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a9a4:	89fb      	ldrh	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d108      	bne.n	800a9bc <dec_lock+0x6c>
 800a9aa:	490a      	ldr	r1, [pc, #40]	; (800a9d4 <dec_lock+0x84>)
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	737b      	strb	r3, [r7, #13]
 800a9c0:	e001      	b.n	800a9c6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a9c6:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000260 	.word	0x20000260

0800a9d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e016      	b.n	800aa14 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9e6:	4910      	ldr	r1, [pc, #64]	; (800aa28 <clear_lock+0x50>)
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d108      	bne.n	800aa0e <clear_lock+0x36>
 800a9fc:	490a      	ldr	r1, [pc, #40]	; (800aa28 <clear_lock+0x50>)
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4613      	mov	r3, r2
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d9e5      	bls.n	800a9e6 <clear_lock+0xe>
	}
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bc80      	pop	{r7}
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	20000260 	.word	0x20000260

0800aa2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3e:	3304      	adds	r3, #4
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d047      	beq.n	800aad6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa58:	3301      	adds	r3, #1
 800aa5a:	7818      	ldrb	r0, [r3, #0]
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	f7ff fe1d 	bl	800a6a0 <disk_write>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <sync_window+0x46>
			res = FR_DISK_ERR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	73fb      	strb	r3, [r7, #15]
 800aa70:	e031      	b.n	800aad6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa78:	3304      	adds	r3, #4
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	1ad2      	subs	r2, r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa90:	3318      	adds	r3, #24
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d21e      	bcs.n	800aad6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	613b      	str	r3, [r7, #16]
 800aaa4:	e014      	b.n	800aad0 <sync_window+0xa4>
					wsect += fs->fsize;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaac:	3318      	adds	r3, #24
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4413      	add	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aabc:	3301      	adds	r3, #1
 800aabe:	7818      	ldrb	r0, [r3, #0]
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	2301      	movs	r3, #1
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	f7ff fdeb 	bl	800a6a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3b01      	subs	r3, #1
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d8e7      	bhi.n	800aaa6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aaf4:	330c      	adds	r3, #12
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d01f      	beq.n	800ab3e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ff94 	bl	800aa2c <sync_window>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d117      	bne.n	800ab3e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab14:	3301      	adds	r3, #1
 800ab16:	7818      	ldrb	r0, [r3, #0]
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	f7ff fd9f 	bl	800a660 <disk_read>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab38:	330c      	adds	r3, #12
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	3b02      	subs	r3, #2
 800ab56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5e:	3314      	adds	r3, #20
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3b02      	subs	r3, #2
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d301      	bcc.n	800ab6e <clust2sect+0x26>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e00e      	b.n	800ab8c <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab74:	3302      	adds	r3, #2
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	fb03 f202 	mul.w	r2, r3, r2
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab86:	3308      	adds	r3, #8
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4413      	add	r3, r2
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bc80      	pop	{r7}
 800ab94:	4770      	bx	lr

0800ab96 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d907      	bls.n	800abb6 <get_fat+0x20>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abac:	3314      	adds	r3, #20
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d302      	bcc.n	800abbc <get_fat+0x26>
		val = 1;	/* Internal error */
 800abb6:	2301      	movs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	e0ec      	b.n	800ad96 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	f000 809e 	beq.w	800ad0c <get_fat+0x176>
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	f300 80d6 	bgt.w	800ad82 <get_fat+0x1ec>
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d002      	beq.n	800abe0 <get_fat+0x4a>
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d063      	beq.n	800aca6 <get_fat+0x110>
 800abde:	e0d0      	b.n	800ad82 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	085b      	lsrs	r3, r3, #1
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfc:	330a      	adds	r3, #10
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac08:	4413      	add	r3, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff ff67 	bl	800aae0 <move_window>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 80b7 	bne.w	800ad88 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	60fa      	str	r2, [r7, #12]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac26:	320a      	adds	r2, #10
 800ac28:	8812      	ldrh	r2, [r2, #0]
 800ac2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac2e:	fb02 f201 	mul.w	r2, r2, r1
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	5cd3      	ldrb	r3, [r2, r3]
 800ac38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac48:	330a      	adds	r3, #10
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac54:	4413      	add	r3, r2
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff ff41 	bl	800aae0 <move_window>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 8093 	bne.w	800ad8c <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6c:	330a      	adds	r3, #10
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	461a      	mov	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac78:	fb02 f201 	mul.w	r2, r2, r1
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	5cd3      	ldrb	r3, [r2, r3]
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	461a      	mov	r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <get_fat+0x106>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	091b      	lsrs	r3, r3, #4
 800ac9a:	e002      	b.n	800aca2 <get_fat+0x10c>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aca2:	617b      	str	r3, [r7, #20]
			break;
 800aca4:	e077      	b.n	800ad96 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	330a      	adds	r3, #10
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	085b      	lsrs	r3, r3, #1
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4619      	mov	r1, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800acc4:	4413      	add	r3, r2
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ff09 	bl	800aae0 <move_window>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d15d      	bne.n	800ad90 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	005a      	lsls	r2, r3, #1
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acde:	330a      	adds	r3, #10
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	fbb2 f1f3 	udiv	r1, r2, r3
 800ace6:	fb03 f301 	mul.w	r3, r3, r1
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	4413      	add	r3, r2
 800acf0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3301      	adds	r3, #1
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	b21a      	sxth	r2, r3
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	b21b      	sxth	r3, r3
 800ad02:	4313      	orrs	r3, r2
 800ad04:	b21b      	sxth	r3, r3
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	617b      	str	r3, [r7, #20]
			break;
 800ad0a:	e044      	b.n	800ad96 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1a:	330a      	adds	r3, #10
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	089b      	lsrs	r3, r3, #2
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad2a:	4413      	add	r3, r2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fed6 	bl	800aae0 <move_window>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d12c      	bne.n	800ad94 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	009a      	lsls	r2, r3, #2
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad44:	330a      	adds	r3, #10
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad4c:	fb03 f301 	mul.w	r3, r3, r1
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4413      	add	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3303      	adds	r3, #3
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	061a      	lsls	r2, r3, #24
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	3302      	adds	r3, #2
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	041b      	lsls	r3, r3, #16
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	3201      	adds	r2, #1
 800ad6e:	7812      	ldrb	r2, [r2, #0]
 800ad70:	0212      	lsls	r2, r2, #8
 800ad72:	4313      	orrs	r3, r2
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	7812      	ldrb	r2, [r2, #0]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad7e:	617b      	str	r3, [r7, #20]
			break;
 800ad80:	e009      	b.n	800ad96 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800ad82:	2301      	movs	r3, #1
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	e006      	b.n	800ad96 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad94:	bf00      	nop
		}
	}

	return val;
 800ad96:	697b      	ldr	r3, [r7, #20]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d907      	bls.n	800adc2 <put_fat+0x22>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb8:	3314      	adds	r3, #20
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d302      	bcc.n	800adc8 <put_fat+0x28>
		res = FR_INT_ERR;
 800adc2:	2302      	movs	r3, #2
 800adc4:	77fb      	strb	r3, [r7, #31]
 800adc6:	e146      	b.n	800b056 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b03      	cmp	r3, #3
 800add2:	f000 80d9 	beq.w	800af88 <put_fat+0x1e8>
 800add6:	2b03      	cmp	r3, #3
 800add8:	f300 8133 	bgt.w	800b042 <put_fat+0x2a2>
 800addc:	2b01      	cmp	r3, #1
 800adde:	d003      	beq.n	800ade8 <put_fat+0x48>
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	f000 8095 	beq.w	800af10 <put_fat+0x170>
 800ade6:	e12c      	b.n	800b042 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	085b      	lsrs	r3, r3, #1
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4413      	add	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae04:	330a      	adds	r3, #10
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae10:	4413      	add	r3, r2
 800ae12:	4619      	mov	r1, r3
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff fe63 	bl	800aae0 <move_window>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae1e:	7ffb      	ldrb	r3, [r7, #31]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 8111 	bne.w	800b048 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	617a      	str	r2, [r7, #20]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae32:	320a      	adds	r2, #10
 800ae34:	8812      	ldrh	r2, [r2, #0]
 800ae36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae3a:	fb02 f201 	mul.w	r2, r2, r1
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <put_fat+0xcc>
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	b25b      	sxtb	r3, r3
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	b25a      	sxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	4313      	orrs	r3, r2
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	e001      	b.n	800ae70 <put_fat+0xd0>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8e:	330a      	adds	r3, #10
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	4619      	mov	r1, r3
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae9a:	4413      	add	r3, r2
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fe1e 	bl	800aae0 <move_window>
 800aea4:	4603      	mov	r3, r0
 800aea6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aea8:	7ffb      	ldrb	r3, [r7, #31]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f040 80ce 	bne.w	800b04c <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb6:	330a      	adds	r3, #10
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	fbb3 f1f2 	udiv	r1, r3, r2
 800aec2:	fb02 f201 	mul.w	r2, r2, r1
 800aec6:	1a9b      	subs	r3, r3, r2
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4413      	add	r3, r2
 800aecc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <put_fat+0x140>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	091b      	lsrs	r3, r3, #4
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	e00e      	b.n	800aefe <put_fat+0x15e>
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	b25b      	sxtb	r3, r3
 800aee6:	f023 030f 	bic.w	r3, r3, #15
 800aeea:	b25a      	sxtb	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	b25b      	sxtb	r3, r3
 800aef2:	f003 030f 	and.w	r3, r3, #15
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	4313      	orrs	r3, r2
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af08:	3304      	adds	r3, #4
 800af0a:	2201      	movs	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
			break;
 800af0e:	e0a2      	b.n	800b056 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af1e:	330a      	adds	r3, #10
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	b29b      	uxth	r3, r3
 800af26:	4619      	mov	r1, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800af2e:	4413      	add	r3, r2
 800af30:	4619      	mov	r1, r3
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7ff fdd4 	bl	800aae0 <move_window>
 800af38:	4603      	mov	r3, r0
 800af3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af3c:	7ffb      	ldrb	r3, [r7, #31]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f040 8086 	bne.w	800b050 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	005a      	lsls	r2, r3, #1
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4e:	330a      	adds	r3, #10
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	fbb2 f1f3 	udiv	r1, r2, r3
 800af56:	fb03 f301 	mul.w	r3, r3, r1
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	b2da      	uxtb	r2, r3
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	0a1b      	lsrs	r3, r3, #8
 800af70:	b29a      	uxth	r2, r3
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	3301      	adds	r3, #1
 800af76:	b2d2      	uxtb	r2, r2
 800af78:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af80:	3304      	adds	r3, #4
 800af82:	2201      	movs	r2, #1
 800af84:	701a      	strb	r2, [r3, #0]
			break;
 800af86:	e066      	b.n	800b056 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af96:	330a      	adds	r3, #10
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	089b      	lsrs	r3, r3, #2
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	4619      	mov	r1, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800afa6:	4413      	add	r3, r2
 800afa8:	4619      	mov	r1, r3
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fd98 	bl	800aae0 <move_window>
 800afb0:	4603      	mov	r3, r0
 800afb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d14c      	bne.n	800b054 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	009a      	lsls	r2, r3, #2
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc4:	330a      	adds	r3, #10
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	fbb2 f1f3 	udiv	r1, r2, r3
 800afcc:	fb03 f301 	mul.w	r3, r3, r1
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	3303      	adds	r3, #3
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	061a      	lsls	r2, r3, #24
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	3302      	adds	r3, #2
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	041b      	lsls	r3, r3, #16
 800afe8:	4313      	orrs	r3, r2
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	3201      	adds	r2, #1
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	0212      	lsls	r2, r2, #8
 800aff2:	4313      	orrs	r3, r2
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	4313      	orrs	r3, r2
 800affa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	4313      	orrs	r3, r2
 800b002:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	b2da      	uxtb	r2, r3
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	b29a      	uxth	r2, r3
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	3301      	adds	r3, #1
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	0c1a      	lsrs	r2, r3, #16
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	3302      	adds	r3, #2
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	0e1a      	lsrs	r2, r3, #24
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	3303      	adds	r3, #3
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03a:	3304      	adds	r3, #4
 800b03c:	2201      	movs	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]
			break;
 800b040:	e009      	b.n	800b056 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800b042:	2302      	movs	r3, #2
 800b044:	77fb      	strb	r3, [r7, #31]
 800b046:	e006      	b.n	800b056 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b048:	bf00      	nop
 800b04a:	e004      	b.n	800b056 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b04c:	bf00      	nop
 800b04e:	e002      	b.n	800b056 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b050:	bf00      	nop
 800b052:	e000      	b.n	800b056 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800b054:	bf00      	nop
		}
	}

	return res;
 800b056:	7ffb      	ldrb	r3, [r7, #31]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d113      	bne.n	800b098 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b076:	330c      	adds	r3, #12
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d007      	beq.n	800b092 <create_chain+0x32>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b088:	3314      	adds	r3, #20
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d31e      	bcc.n	800b0d0 <create_chain+0x70>
 800b092:	2301      	movs	r3, #1
 800b094:	613b      	str	r3, [r7, #16]
 800b096:	e01b      	b.n	800b0d0 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff fd7b 	bl	800ab96 <get_fat>
 800b0a0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d801      	bhi.n	800b0ac <create_chain+0x4c>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e086      	b.n	800b1ba <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d101      	bne.n	800b0b8 <create_chain+0x58>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	e080      	b.n	800b1ba <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0be:	3314      	adds	r3, #20
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d201      	bcs.n	800b0cc <create_chain+0x6c>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	e076      	b.n	800b1ba <create_chain+0x15a>
		scl = clst;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e0:	3314      	adds	r3, #20
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d307      	bcc.n	800b0fa <create_chain+0x9a>
			ncl = 2;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d901      	bls.n	800b0fa <create_chain+0x9a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e05f      	b.n	800b1ba <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b0fa:	6979      	ldr	r1, [r7, #20]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fd4a 	bl	800ab96 <get_fat>
 800b102:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00e      	beq.n	800b128 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b110:	d002      	beq.n	800b118 <create_chain+0xb8>
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d101      	bne.n	800b11c <create_chain+0xbc>
			return cs;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	e04e      	b.n	800b1ba <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	d1d7      	bne.n	800b0d4 <create_chain+0x74>
 800b124:	2300      	movs	r3, #0
 800b126:	e048      	b.n	800b1ba <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800b128:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800b12a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b12e:	6979      	ldr	r1, [r7, #20]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff fe35 	bl	800ada0 <put_fat>
 800b136:	4603      	mov	r3, r0
 800b138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d109      	bne.n	800b154 <create_chain+0xf4>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d006      	beq.n	800b154 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff fe28 	bl	800ada0 <put_fat>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d126      	bne.n	800b1a8 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b160:	330c      	adds	r3, #12
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16c:	3310      	adds	r3, #16
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d020      	beq.n	800b1b8 <create_chain+0x158>
			fs->free_clust--;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17c:	3310      	adds	r3, #16
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	1e5a      	subs	r2, r3, #1
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b188:	3310      	adds	r3, #16
 800b18a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b192:	3305      	adds	r3, #5
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a2:	3305      	adds	r3, #5
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	e007      	b.n	800b1b8 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d102      	bne.n	800b1b4 <create_chain+0x154>
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b2:	e000      	b.n	800b1b6 <create_chain+0x156>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800b1b8:	697b      	ldr	r3, [r7, #20]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d6:	3306      	adds	r3, #6
 800b1d8:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d00a      	beq.n	800b202 <dir_sdi+0x40>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f8:	3314      	adds	r3, #20
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d301      	bcc.n	800b206 <dir_sdi+0x44>
		return FR_INT_ERR;
 800b202:	2302      	movs	r3, #2
 800b204:	e0b4      	b.n	800b370 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d111      	bne.n	800b230 <dir_sdi+0x6e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d108      	bne.n	800b230 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b22a:	3304      	adds	r3, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d117      	bne.n	800b266 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b242:	3308      	adds	r3, #8
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d301      	bcc.n	800b252 <dir_sdi+0x90>
			return FR_INT_ERR;
 800b24e:	2302      	movs	r3, #2
 800b250:	e08e      	b.n	800b370 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b25e:	3304      	adds	r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	e046      	b.n	800b2f4 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b272:	330a      	adds	r3, #10
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	095b      	lsrs	r3, r3, #5
 800b278:	b29b      	uxth	r3, r3
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b288:	3302      	adds	r3, #2
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	fb03 f302 	mul.w	r3, r3, r2
 800b290:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b292:	e022      	b.n	800b2da <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6979      	ldr	r1, [r7, #20]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff fc79 	bl	800ab96 <get_fat>
 800b2a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ac:	d101      	bne.n	800b2b2 <dir_sdi+0xf0>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e05e      	b.n	800b370 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d90a      	bls.n	800b2ce <dir_sdi+0x10c>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c4:	3314      	adds	r3, #20
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d301      	bcc.n	800b2d2 <dir_sdi+0x110>
				return FR_INT_ERR;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e04e      	b.n	800b370 <dir_sdi+0x1ae>
			idx -= ic;
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d2d8      	bcs.n	800b294 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6979      	ldr	r1, [r7, #20]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fc2b 	bl	800ab48 <clust2sect>
 800b2f2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fa:	330c      	adds	r3, #12
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <dir_sdi+0x148>
 800b306:	2302      	movs	r3, #2
 800b308:	e032      	b.n	800b370 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b316:	330a      	adds	r3, #10
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	095b      	lsrs	r3, r3, #5
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	461a      	mov	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	fbb3 f2f2 	udiv	r2, r3, r2
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	441a      	add	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b330:	3310      	adds	r3, #16
 800b332:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b34a:	330a      	adds	r3, #10
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	095b      	lsrs	r3, r3, #5
 800b350:	b29b      	uxth	r3, r3
 800b352:	461a      	mov	r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	fbb3 f1f2 	udiv	r1, r3, r2
 800b35a:	fb02 f201 	mul.w	r2, r2, r1
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	015b      	lsls	r3, r3, #5
 800b362:	18c2      	adds	r2, r0, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36a:	3314      	adds	r3, #20
 800b36c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b388:	3306      	adds	r3, #6
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	3301      	adds	r3, #1
 800b38e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	b29b      	uxth	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d006      	beq.n	800b3a6 <dir_next+0x2e>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b39e:	3310      	adds	r3, #16
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <dir_next+0x32>
		return FR_NO_FILE;
 800b3a6:	2304      	movs	r3, #4
 800b3a8:	e144      	b.n	800b634 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b6:	330a      	adds	r3, #10
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	095b      	lsrs	r3, r3, #5
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3c6:	fb02 f201 	mul.w	r2, r2, r1
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f040 810c 	bne.w	800b5ea <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d8:	3310      	adds	r3, #16
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3e4:	3310      	adds	r3, #16
 800b3e6:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ee:	330c      	adds	r3, #12
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10e      	bne.n	800b414 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b402:	3308      	adds	r3, #8
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f0c0 80ed 	bcc.w	800b5ea <dir_next+0x272>
				return FR_NO_FILE;
 800b410:	2304      	movs	r3, #4
 800b412:	e10f      	b.n	800b634 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b420:	330a      	adds	r3, #10
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	b29b      	uxth	r3, r3
 800b428:	461a      	mov	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43c:	3302      	adds	r3, #2
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	3b01      	subs	r3, #1
 800b442:	4013      	ands	r3, r2
 800b444:	2b00      	cmp	r3, #0
 800b446:	f040 80d0 	bne.w	800b5ea <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b458:	330c      	adds	r3, #12
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f7ff fb99 	bl	800ab96 <get_fat>
 800b464:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d801      	bhi.n	800b470 <dir_next+0xf8>
 800b46c:	2302      	movs	r3, #2
 800b46e:	e0e1      	b.n	800b634 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d101      	bne.n	800b47c <dir_next+0x104>
 800b478:	2301      	movs	r3, #1
 800b47a:	e0db      	b.n	800b634 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b488:	3314      	adds	r3, #20
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	429a      	cmp	r2, r3
 800b490:	f0c0 8097 	bcc.w	800b5c2 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <dir_next+0x126>
 800b49a:	2304      	movs	r3, #4
 800b49c:	e0ca      	b.n	800b634 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f7ff fdd4 	bl	800b060 <create_chain>
 800b4b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <dir_next+0x14c>
 800b4c0:	2307      	movs	r3, #7
 800b4c2:	e0b7      	b.n	800b634 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <dir_next+0x156>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e0b2      	b.n	800b634 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d101      	bne.n	800b4da <dir_next+0x162>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e0ac      	b.n	800b634 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff faa2 	bl	800aa2c <sync_window>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <dir_next+0x17a>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e0a0      	b.n	800b634 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b508:	330a      	adds	r3, #10
 800b50a:	881b      	ldrh	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	2100      	movs	r1, #0
 800b510:	f7ff f904 	bl	800a71c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b522:	681c      	ldr	r4, [r3, #0]
 800b524:	6979      	ldr	r1, [r7, #20]
 800b526:	4610      	mov	r0, r2
 800b528:	f7ff fb0e 	bl	800ab48 <clust2sect>
 800b52c:	4602      	mov	r2, r0
 800b52e:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800b532:	330c      	adds	r3, #12
 800b534:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b536:	2300      	movs	r3, #0
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	e024      	b.n	800b586 <dir_next+0x20e>
						dp->fs->wflag = 1;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b548:	3304      	adds	r3, #4
 800b54a:	2201      	movs	r2, #1
 800b54c:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fa68 	bl	800aa2c <sync_window>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <dir_next+0x1ee>
 800b562:	2301      	movs	r3, #1
 800b564:	e066      	b.n	800b634 <dir_next+0x2bc>
						dp->fs->winsect++;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b572:	330c      	adds	r3, #12
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b57c:	330c      	adds	r3, #12
 800b57e:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3301      	adds	r3, #1
 800b584:	613b      	str	r3, [r7, #16]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b592:	3302      	adds	r3, #2
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d3ce      	bcc.n	800b53c <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	6819      	ldr	r1, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	1a8a      	subs	r2, r1, r2
 800b5ba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b5be:	330c      	adds	r3, #12
 800b5c0:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6979      	ldr	r1, [r7, #20]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff fab5 	bl	800ab48 <clust2sect>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5e6:	3310      	adds	r3, #16
 800b5e8:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f4:	3306      	adds	r3, #6
 800b5f6:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4618      	mov	r0, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b60e:	330a      	adds	r3, #10
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	095b      	lsrs	r3, r3, #5
 800b614:	b29b      	uxth	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b61e:	fb02 f201 	mul.w	r2, r2, r1
 800b622:	1a9b      	subs	r3, r3, r2
 800b624:	015b      	lsls	r3, r3, #5
 800b626:	18c2      	adds	r2, r0, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62e:	3314      	adds	r3, #20
 800b630:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd90      	pop	{r4, r7, pc}

0800b63c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	331b      	adds	r3, #27
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	b21a      	sxth	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	331a      	adds	r3, #26
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	b21b      	sxth	r3, r3
 800b658:	4313      	orrs	r3, r2
 800b65a:	b21b      	sxth	r3, r3
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d10f      	bne.n	800b68c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	3315      	adds	r3, #21
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	b21a      	sxth	r2, r3
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	3314      	adds	r3, #20
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	b21b      	sxth	r3, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	b21b      	sxth	r3, r3
 800b682:	b29b      	uxth	r3, r3
 800b684:	041b      	lsls	r3, r3, #16
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

	return cl;
 800b68c:	68fb      	ldr	r3, [r7, #12]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	bc80      	pop	{r7}
 800b696:	4770      	bx	lr

0800b698 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6aa:	1e5a      	subs	r2, r3, #1
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	4413      	add	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b6c0:	4a2b      	ldr	r2, [pc, #172]	; (800b770 <cmp_lfn+0xd8>)
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	021b      	lsls	r3, r3, #8
 800b6d2:	b21a      	sxth	r2, r3
 800b6d4:	4926      	ldr	r1, [pc, #152]	; (800b770 <cmp_lfn+0xd8>)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	440b      	add	r3, r1
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	440b      	add	r3, r1
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	b21b      	sxth	r3, r3
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	b21b      	sxth	r3, r3
 800b6ea:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b6ec:	89fb      	ldrh	r3, [r7, #14]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d019      	beq.n	800b726 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b6f2:	89bb      	ldrh	r3, [r7, #12]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 fdb7 	bl	800d268 <ff_wtoupper>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2bfe      	cmp	r3, #254	; 0xfe
 800b702:	d80e      	bhi.n	800b722 <cmp_lfn+0x8a>
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	617a      	str	r2, [r7, #20]
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	4413      	add	r3, r2
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f001 fda8 	bl	800d268 <ff_wtoupper>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	89fb      	ldrh	r3, [r7, #14]
 800b71e:	4293      	cmp	r3, r2
 800b720:	d008      	beq.n	800b734 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b722:	2300      	movs	r3, #0
 800b724:	e01f      	b.n	800b766 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b726:	89bb      	ldrh	r3, [r7, #12]
 800b728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d001      	beq.n	800b734 <cmp_lfn+0x9c>
 800b730:	2300      	movs	r3, #0
 800b732:	e018      	b.n	800b766 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	3301      	adds	r3, #1
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2b0c      	cmp	r3, #12
 800b73e:	d9bf      	bls.n	800b6c0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00b      	beq.n	800b764 <cmp_lfn+0xcc>
 800b74c:	89fb      	ldrh	r3, [r7, #14]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <cmp_lfn+0xcc>
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	4413      	add	r3, r2
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <cmp_lfn+0xcc>
		return 0;
 800b760:	2300      	movs	r3, #0
 800b762:	e000      	b.n	800b766 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b764:	2301      	movs	r3, #1
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	08012304 	.word	0x08012304

0800b774 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b786:	1e5a      	subs	r2, r3, #1
 800b788:	4613      	mov	r3, r2
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800b794:	2300      	movs	r3, #0
 800b796:	613b      	str	r3, [r7, #16]
 800b798:	2301      	movs	r3, #1
 800b79a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 800b79c:	4a26      	ldr	r2, [pc, #152]	; (800b838 <pick_lfn+0xc4>)
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	021b      	lsls	r3, r3, #8
 800b7ae:	b21a      	sxth	r2, r3
 800b7b0:	4921      	ldr	r1, [pc, #132]	; (800b838 <pick_lfn+0xc4>)
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	440b      	add	r3, r1
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	440b      	add	r3, r1
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b21b      	sxth	r3, r3
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	b21b      	sxth	r3, r3
 800b7c6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b7c8:	89fb      	ldrh	r3, [r7, #14]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00f      	beq.n	800b7ee <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2bfe      	cmp	r3, #254	; 0xfe
 800b7d2:	d901      	bls.n	800b7d8 <pick_lfn+0x64>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e029      	b.n	800b82c <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b7d8:	89bb      	ldrh	r3, [r7, #12]
 800b7da:	81fb      	strh	r3, [r7, #14]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	617a      	str	r2, [r7, #20]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	89fa      	ldrh	r2, [r7, #14]
 800b7ea:	801a      	strh	r2, [r3, #0]
 800b7ec:	e006      	b.n	800b7fc <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b7ee:	89bb      	ldrh	r3, [r7, #12]
 800b7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d001      	beq.n	800b7fc <pick_lfn+0x88>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e017      	b.n	800b82c <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	3301      	adds	r3, #1
 800b800:	613b      	str	r3, [r7, #16]
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b0c      	cmp	r3, #12
 800b806:	d9c9      	bls.n	800b79c <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00a      	beq.n	800b82a <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2bfe      	cmp	r3, #254	; 0xfe
 800b818:	d901      	bls.n	800b81e <pick_lfn+0xaa>
 800b81a:	2300      	movs	r3, #0
 800b81c:	e006      	b.n	800b82c <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	4413      	add	r3, r2
 800b826:	2200      	movs	r2, #0
 800b828:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800b82a:	2301      	movs	r3, #1
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	bc80      	pop	{r7}
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	08012304 	.word	0x08012304

0800b83c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b848:	230b      	movs	r3, #11
 800b84a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	0852      	lsrs	r2, r2, #1
 800b852:	01db      	lsls	r3, r3, #7
 800b854:	4313      	orrs	r3, r2
 800b856:	b2da      	uxtb	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	1c59      	adds	r1, r3, #1
 800b85c:	6079      	str	r1, [r7, #4]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	4413      	add	r3, r2
 800b862:	73fb      	strb	r3, [r7, #15]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	3b01      	subs	r3, #1
 800b868:	60bb      	str	r3, [r7, #8]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1ed      	bne.n	800b84c <sum_sfn+0x10>
	return sum;
 800b870:	7bfb      	ldrb	r3, [r7, #15]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	bc80      	pop	{r7}
 800b87a:	4770      	bx	lr

0800b87c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b884:	2100      	movs	r1, #0
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff fc9b 	bl	800b1c2 <dir_sdi>
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <dir_find+0x1e>
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	e0c1      	b.n	800ba1e <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b89a:	23ff      	movs	r3, #255	; 0xff
 800b89c:	753b      	strb	r3, [r7, #20]
 800b89e:	7d3b      	ldrb	r3, [r7, #20]
 800b8a0:	757b      	strb	r3, [r7, #21]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ae:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8be:	3310      	adds	r3, #16
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7ff f90b 	bl	800aae0 <move_window>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f040 809e 	bne.w	800ba12 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8dc:	3314      	adds	r3, #20
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8e8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <dir_find+0x78>
 800b8ee:	2304      	movs	r3, #4
 800b8f0:	75fb      	strb	r3, [r7, #23]
 800b8f2:	e093      	b.n	800ba1c <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	330b      	adds	r3, #11
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8fe:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b900:	7dbb      	ldrb	r3, [r7, #22]
 800b902:	2be5      	cmp	r3, #229	; 0xe5
 800b904:	d007      	beq.n	800b916 <dir_find+0x9a>
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	f003 0308 	and.w	r3, r3, #8
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00c      	beq.n	800b92a <dir_find+0xae>
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	2b0f      	cmp	r3, #15
 800b914:	d009      	beq.n	800b92a <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b916:	23ff      	movs	r3, #255	; 0xff
 800b918:	757b      	strb	r3, [r7, #21]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b920:	3304      	adds	r3, #4
 800b922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b926:	801a      	strh	r2, [r3, #0]
 800b928:	e068      	b.n	800b9fc <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	2b0f      	cmp	r3, #15
 800b92e:	d139      	bne.n	800b9a4 <dir_find+0x128>
				if (dp->lfn) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d05f      	beq.n	800b9fc <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b93c:	7dbb      	ldrb	r3, [r7, #22]
 800b93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b942:	2b00      	cmp	r3, #0
 800b944:	d012      	beq.n	800b96c <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	7b5b      	ldrb	r3, [r3, #13]
 800b94a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b94c:	7dbb      	ldrb	r3, [r7, #22]
 800b94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b952:	75bb      	strb	r3, [r7, #22]
 800b954:	7dbb      	ldrb	r3, [r7, #22]
 800b956:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b95e:	3306      	adds	r3, #6
 800b960:	881a      	ldrh	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b968:	3304      	adds	r3, #4
 800b96a:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b96c:	7dba      	ldrb	r2, [r7, #22]
 800b96e:	7d7b      	ldrb	r3, [r7, #21]
 800b970:	429a      	cmp	r2, r3
 800b972:	d114      	bne.n	800b99e <dir_find+0x122>
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	330d      	adds	r3, #13
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	7d3a      	ldrb	r2, [r7, #20]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d10e      	bne.n	800b99e <dir_find+0x122>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6939      	ldr	r1, [r7, #16]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff fe84 	bl	800b698 <cmp_lfn>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <dir_find+0x122>
 800b996:	7d7b      	ldrb	r3, [r7, #21]
 800b998:	3b01      	subs	r3, #1
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	e000      	b.n	800b9a0 <dir_find+0x124>
 800b99e:	23ff      	movs	r3, #255	; 0xff
 800b9a0:	757b      	strb	r3, [r7, #21]
 800b9a2:	e02b      	b.n	800b9fc <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b9a4:	7d7b      	ldrb	r3, [r7, #21]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <dir_find+0x13e>
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f7ff ff46 	bl	800b83c <sum_sfn>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	7d3b      	ldrb	r3, [r7, #20]
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d02d      	beq.n	800ba16 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c0:	3318      	adds	r3, #24
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	330b      	adds	r3, #11
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10c      	bne.n	800b9ea <dir_find+0x16e>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	3318      	adds	r3, #24
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	220b      	movs	r2, #11
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6938      	ldr	r0, [r7, #16]
 800b9e0:	f7fe feb6 	bl	800a750 <mem_cmp>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d017      	beq.n	800ba1a <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b9ea:	23ff      	movs	r3, #255	; 0xff
 800b9ec:	757b      	strb	r3, [r7, #21]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9fa:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff fcba 	bl	800b378 <dir_next>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f43f af50 	beq.w	800b8b0 <dir_find+0x34>
 800ba10:	e004      	b.n	800ba1c <dir_find+0x1a0>
		if (res != FR_OK) break;
 800ba12:	bf00      	nop
 800ba14:	e002      	b.n	800ba1c <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ba16:	bf00      	nop
 800ba18:	e000      	b.n	800ba1c <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba1a:	bf00      	nop

	return res;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b086      	sub	sp, #24
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800ba30:	23ff      	movs	r3, #255	; 0xff
 800ba32:	757b      	strb	r3, [r7, #21]
 800ba34:	23ff      	movs	r3, #255	; 0xff
 800ba36:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800ba38:	2304      	movs	r3, #4
 800ba3a:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800ba3c:	e08f      	b.n	800bb5e <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4c:	3310      	adds	r3, #16
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7ff f844 	bl	800aae0 <move_window>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f040 8086 	bne.w	800bb70 <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6a:	3314      	adds	r3, #20
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba76:	7dbb      	ldrb	r3, [r7, #22]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <dir_read+0x5c>
 800ba7c:	2304      	movs	r3, #4
 800ba7e:	75fb      	strb	r3, [r7, #23]
 800ba80:	e07b      	b.n	800bb7a <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	330b      	adds	r3, #11
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba8c:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ba8e:	7dbb      	ldrb	r3, [r7, #22]
 800ba90:	2be5      	cmp	r3, #229	; 0xe5
 800ba92:	d00e      	beq.n	800bab2 <dir_read+0x8c>
 800ba94:	7dbb      	ldrb	r3, [r7, #22]
 800ba96:	2b2e      	cmp	r3, #46	; 0x2e
 800ba98:	d00b      	beq.n	800bab2 <dir_read+0x8c>
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	f023 0320 	bic.w	r3, r3, #32
 800baa0:	2b08      	cmp	r3, #8
 800baa2:	bf0c      	ite	eq
 800baa4:	2301      	moveq	r3, #1
 800baa6:	2300      	movne	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	461a      	mov	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	4293      	cmp	r3, r2
 800bab0:	d002      	beq.n	800bab8 <dir_read+0x92>
			ord = 0xFF;
 800bab2:	23ff      	movs	r3, #255	; 0xff
 800bab4:	757b      	strb	r3, [r7, #21]
 800bab6:	e049      	b.n	800bb4c <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	2b0f      	cmp	r3, #15
 800babc:	d133      	bne.n	800bb26 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800babe:	7dbb      	ldrb	r3, [r7, #22]
 800bac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d012      	beq.n	800baee <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	7b5b      	ldrb	r3, [r3, #13]
 800bacc:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800bace:	7dbb      	ldrb	r3, [r7, #22]
 800bad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad4:	75bb      	strb	r3, [r7, #22]
 800bad6:	7dbb      	ldrb	r3, [r7, #22]
 800bad8:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae0:	3306      	adds	r3, #6
 800bae2:	881a      	ldrh	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800baea:	3304      	adds	r3, #4
 800baec:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800baee:	7dba      	ldrb	r2, [r7, #22]
 800baf0:	7d7b      	ldrb	r3, [r7, #21]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d114      	bne.n	800bb20 <dir_read+0xfa>
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	330d      	adds	r3, #13
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	7d3a      	ldrb	r2, [r7, #20]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d10e      	bne.n	800bb20 <dir_read+0xfa>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6939      	ldr	r1, [r7, #16]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fe31 	bl	800b774 <pick_lfn>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <dir_read+0xfa>
 800bb18:	7d7b      	ldrb	r3, [r7, #21]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	e000      	b.n	800bb22 <dir_read+0xfc>
 800bb20:	23ff      	movs	r3, #255	; 0xff
 800bb22:	757b      	strb	r3, [r7, #21]
 800bb24:	e012      	b.n	800bb4c <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800bb26:	7d7b      	ldrb	r3, [r7, #21]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <dir_read+0x116>
 800bb2c:	6938      	ldr	r0, [r7, #16]
 800bb2e:	f7ff fe85 	bl	800b83c <sum_sfn>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	7d3b      	ldrb	r3, [r7, #20]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d01b      	beq.n	800bb74 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb42:	3304      	adds	r3, #4
 800bb44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb48:	801a      	strh	r2, [r3, #0]
				break;
 800bb4a:	e013      	b.n	800bb74 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7ff fc12 	bl	800b378 <dir_next>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <dir_read+0x152>
	while (dp->sect) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb64:	3310      	adds	r3, #16
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f47f af68 	bne.w	800ba3e <dir_read+0x18>
 800bb6e:	e004      	b.n	800bb7a <dir_read+0x154>
		if (res != FR_OK) break;
 800bb70:	bf00      	nop
 800bb72:	e002      	b.n	800bb7a <dir_read+0x154>
				break;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <dir_read+0x154>
		if (res != FR_OK) break;
 800bb78:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <dir_read+0x166>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb86:	3310      	adds	r3, #16
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	return res;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b088      	sub	sp, #32
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	3309      	adds	r3, #9
 800bba4:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbac:	3310      	adds	r3, #16
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d072      	beq.n	800bc9a <get_fileinfo+0x104>
		dir = dp->dir;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbba:	3314      	adds	r3, #20
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]
		i = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 800bbc4:	e032      	b.n	800bc2c <get_fileinfo+0x96>
			c = (TCHAR)dir[i++];
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	61fa      	str	r2, [r7, #28]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d100      	bne.n	800bbdc <get_fileinfo+0x46>
 800bbda:	e027      	b.n	800bc2c <get_fileinfo+0x96>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	2b05      	cmp	r3, #5
 800bbe0:	d101      	bne.n	800bbe6 <get_fileinfo+0x50>
 800bbe2:	23e5      	movs	r3, #229	; 0xe5
 800bbe4:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	2b09      	cmp	r3, #9
 800bbea:	d104      	bne.n	800bbf6 <get_fileinfo+0x60>
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	61ba      	str	r2, [r7, #24]
 800bbf2:	222e      	movs	r2, #46	; 0x2e
 800bbf4:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b40      	cmp	r3, #64	; 0x40
 800bbfa:	d912      	bls.n	800bc22 <get_fileinfo+0x8c>
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
 800bbfe:	2b5a      	cmp	r3, #90	; 0x5a
 800bc00:	d80f      	bhi.n	800bc22 <get_fileinfo+0x8c>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	330c      	adds	r3, #12
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d901      	bls.n	800bc14 <get_fileinfo+0x7e>
 800bc10:	2310      	movs	r3, #16
 800bc12:	e000      	b.n	800bc16 <get_fileinfo+0x80>
 800bc14:	2308      	movs	r3, #8
 800bc16:	4013      	ands	r3, r2
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <get_fileinfo+0x8c>
				c += 0x20;			/* To lower */
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	3320      	adds	r3, #32
 800bc20:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	61ba      	str	r2, [r7, #24]
 800bc28:	7dfa      	ldrb	r2, [r7, #23]
 800bc2a:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b0a      	cmp	r3, #10
 800bc30:	d9c9      	bls.n	800bbc6 <get_fileinfo+0x30>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	7ada      	ldrb	r2, [r3, #11]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	331f      	adds	r3, #31
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	061a      	lsls	r2, r3, #24
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	331e      	adds	r3, #30
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	041b      	lsls	r3, r3, #16
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	321d      	adds	r2, #29
 800bc50:	7812      	ldrb	r2, [r2, #0]
 800bc52:	0212      	lsls	r2, r2, #8
 800bc54:	4313      	orrs	r3, r2
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	321c      	adds	r2, #28
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	431a      	orrs	r2, r3
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3319      	adds	r3, #25
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	b21a      	sxth	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3318      	adds	r3, #24
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b21b      	sxth	r3, r3
 800bc74:	4313      	orrs	r3, r2
 800bc76:	b21b      	sxth	r3, r3
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3317      	adds	r3, #23
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	b21a      	sxth	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3316      	adds	r3, #22
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b21b      	sxth	r3, r3
 800bc90:	4313      	orrs	r3, r2
 800bc92:	b21b      	sxth	r3, r3
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d049      	beq.n	800bd3c <get_fileinfo+0x1a6>
		i = 0; p = fno->lfname;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb8:	3310      	adds	r3, #16
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d038      	beq.n	800bd32 <get_fileinfo+0x19c>
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d034      	beq.n	800bd32 <get_fileinfo+0x19c>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bcce:	3304      	adds	r3, #4
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d02b      	beq.n	800bd32 <get_fileinfo+0x19c>
			lfn = dp->lfn;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800bce4:	e01d      	b.n	800bd22 <get_fileinfo+0x18c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bce6:	897b      	ldrh	r3, [r7, #10]
 800bce8:	2100      	movs	r1, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 fa82 	bl	800d1f4 <ff_convert>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800bcf4:	897b      	ldrh	r3, [r7, #10]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d102      	bne.n	800bd00 <get_fileinfo+0x16a>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61fb      	str	r3, [r7, #28]
 800bcfe:	e018      	b.n	800bd32 <get_fileinfo+0x19c>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d302      	bcc.n	800bd12 <get_fileinfo+0x17c>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e00f      	b.n	800bd32 <get_fileinfo+0x19c>
				p[i++] = (TCHAR)w;
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	61fa      	str	r2, [r7, #28]
 800bd18:	69ba      	ldr	r2, [r7, #24]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	897a      	ldrh	r2, [r7, #10]
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1c9a      	adds	r2, r3, #2
 800bd26:	613a      	str	r2, [r7, #16]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	817b      	strh	r3, [r7, #10]
 800bd2c:	897b      	ldrh	r3, [r7, #10]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1d9      	bne.n	800bce6 <get_fileinfo+0x150>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800bd32:	69ba      	ldr	r2, [r7, #24]
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	4413      	add	r3, r2
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800bd3c:	bf00      	nop
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08a      	sub	sp, #40	; 0x28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	e002      	b.n	800bd5c <create_name+0x18>
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b2f      	cmp	r3, #47	; 0x2f
 800bd62:	d0f8      	beq.n	800bd56 <create_name+0x12>
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	2b5c      	cmp	r3, #92	; 0x5c
 800bd6a:	d0f4      	beq.n	800bd56 <create_name+0x12>
	lfn = dp->lfn;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	61ba      	str	r2, [r7, #24]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	4413      	add	r3, r2
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800bd8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd8e:	2b1f      	cmp	r3, #31
 800bd90:	d92f      	bls.n	800bdf2 <create_name+0xae>
 800bd92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd94:	2b2f      	cmp	r3, #47	; 0x2f
 800bd96:	d02c      	beq.n	800bdf2 <create_name+0xae>
 800bd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd9a:	2b5c      	cmp	r3, #92	; 0x5c
 800bd9c:	d029      	beq.n	800bdf2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2bfe      	cmp	r3, #254	; 0xfe
 800bda2:	d901      	bls.n	800bda8 <create_name+0x64>
			return FR_INVALID_NAME;
 800bda4:	2306      	movs	r3, #6
 800bda6:	e18b      	b.n	800c0c0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bdae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fa1e 	bl	800d1f4 <ff_convert>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bdbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <create_name+0x82>
 800bdc2:	2306      	movs	r3, #6
 800bdc4:	e17c      	b.n	800c0c0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800bdc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc8:	2b7f      	cmp	r3, #127	; 0x7f
 800bdca:	d809      	bhi.n	800bde0 <create_name+0x9c>
 800bdcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdce:	4619      	mov	r1, r3
 800bdd0:	488f      	ldr	r0, [pc, #572]	; (800c010 <create_name+0x2cc>)
 800bdd2:	f7fe fce3 	bl	800a79c <chk_chr>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <create_name+0x9c>
			return FR_INVALID_NAME;
 800bddc:	2306      	movs	r3, #6
 800bdde:	e16f      	b.n	800c0c0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	617a      	str	r2, [r7, #20]
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bdf0:	e7c5      	b.n	800bd7e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	441a      	add	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800bdfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdfe:	2b1f      	cmp	r3, #31
 800be00:	d801      	bhi.n	800be06 <create_name+0xc2>
 800be02:	2304      	movs	r3, #4
 800be04:	e000      	b.n	800be08 <create_name+0xc4>
 800be06:	2300      	movs	r3, #0
 800be08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800be0c:	e011      	b.n	800be32 <create_name+0xee>
		w = lfn[di - 1];
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be14:	3b01      	subs	r3, #1
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800be20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be22:	2b20      	cmp	r3, #32
 800be24:	d002      	beq.n	800be2c <create_name+0xe8>
 800be26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be28:	2b2e      	cmp	r3, #46	; 0x2e
 800be2a:	d106      	bne.n	800be3a <create_name+0xf6>
		di--;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	3b01      	subs	r3, #1
 800be30:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1ea      	bne.n	800be0e <create_name+0xca>
 800be38:	e000      	b.n	800be3c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800be3a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <create_name+0x102>
 800be42:	2306      	movs	r3, #6
 800be44:	e13c      	b.n	800c0c0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	4413      	add	r3, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be58:	3318      	adds	r3, #24
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	220b      	movs	r2, #11
 800be5e:	2120      	movs	r1, #32
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fc5b 	bl	800a71c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800be66:	2300      	movs	r3, #0
 800be68:	61bb      	str	r3, [r7, #24]
 800be6a:	e002      	b.n	800be72 <create_name+0x12e>
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	3301      	adds	r3, #1
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	2b20      	cmp	r3, #32
 800be7e:	d0f5      	beq.n	800be6c <create_name+0x128>
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	2b2e      	cmp	r3, #46	; 0x2e
 800be8c:	d0ee      	beq.n	800be6c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d009      	beq.n	800bea8 <create_name+0x164>
 800be94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be98:	f043 0303 	orr.w	r3, r3, #3
 800be9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bea0:	e002      	b.n	800bea8 <create_name+0x164>
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	617b      	str	r3, [r7, #20]
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d009      	beq.n	800bec2 <create_name+0x17e>
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800beb4:	3b01      	subs	r3, #1
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	2b2e      	cmp	r3, #46	; 0x2e
 800bec0:	d1ef      	bne.n	800bea2 <create_name+0x15e>

	b = i = 0; ni = 8;
 800bec2:	2300      	movs	r3, #0
 800bec4:	623b      	str	r3, [r7, #32]
 800bec6:	2300      	movs	r3, #0
 800bec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800becc:	2308      	movs	r3, #8
 800bece:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	61ba      	str	r2, [r7, #24]
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 8092 	beq.w	800c00c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beea:	2b20      	cmp	r3, #32
 800beec:	d006      	beq.n	800befc <create_name+0x1b8>
 800beee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bef0:	2b2e      	cmp	r3, #46	; 0x2e
 800bef2:	d10a      	bne.n	800bf0a <create_name+0x1c6>
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d006      	beq.n	800bf0a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800befc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf00:	f043 0303 	orr.w	r3, r3, #3
 800bf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf08:	e07f      	b.n	800c00a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf0a:	6a3a      	ldr	r2, [r7, #32]
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d203      	bcs.n	800bf1a <create_name+0x1d6>
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d123      	bne.n	800bf62 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2b0b      	cmp	r3, #11
 800bf1e:	d106      	bne.n	800bf2e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf24:	f043 0303 	orr.w	r3, r3, #3
 800bf28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf2c:	e077      	b.n	800c01e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d005      	beq.n	800bf42 <create_name+0x1fe>
 800bf36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf3a:	f043 0303 	orr.w	r3, r3, #3
 800bf3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bf42:	69ba      	ldr	r2, [r7, #24]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d868      	bhi.n	800c01c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	61bb      	str	r3, [r7, #24]
 800bf4e:	2308      	movs	r3, #8
 800bf50:	623b      	str	r3, [r7, #32]
 800bf52:	230b      	movs	r3, #11
 800bf54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bf56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf60:	e053      	b.n	800c00a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bf62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf64:	2b7f      	cmp	r3, #127	; 0x7f
 800bf66:	d914      	bls.n	800bf92 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bf68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f941 	bl	800d1f4 <ff_convert>
 800bf72:	4603      	mov	r3, r0
 800bf74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <create_name+0x242>
 800bf7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf7e:	3b80      	subs	r3, #128	; 0x80
 800bf80:	4a24      	ldr	r2, [pc, #144]	; (800c014 <create_name+0x2d0>)
 800bf82:	5cd3      	ldrb	r3, [r2, r3]
 800bf84:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bf86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8a:	f043 0302 	orr.w	r3, r3, #2
 800bf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bf92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <create_name+0x264>
 800bf98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	481e      	ldr	r0, [pc, #120]	; (800c018 <create_name+0x2d4>)
 800bf9e:	f7fe fbfd 	bl	800a79c <chk_chr>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d008      	beq.n	800bfba <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bfa8:	235f      	movs	r3, #95	; 0x5f
 800bfaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb0:	f043 0303 	orr.w	r3, r3, #3
 800bfb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfb8:	e01b      	b.n	800bff2 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bfba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfbc:	2b40      	cmp	r3, #64	; 0x40
 800bfbe:	d909      	bls.n	800bfd4 <create_name+0x290>
 800bfc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfc2:	2b5a      	cmp	r3, #90	; 0x5a
 800bfc4:	d806      	bhi.n	800bfd4 <create_name+0x290>
					b |= 2;
 800bfc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfca:	f043 0302 	orr.w	r3, r3, #2
 800bfce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfd2:	e00e      	b.n	800bff2 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bfd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfd6:	2b60      	cmp	r3, #96	; 0x60
 800bfd8:	d90b      	bls.n	800bff2 <create_name+0x2ae>
 800bfda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfdc:	2b7a      	cmp	r3, #122	; 0x7a
 800bfde:	d808      	bhi.n	800bff2 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800bfe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfe4:	f043 0301 	orr.w	r3, r3, #1
 800bfe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfee:	3b20      	subs	r3, #32
 800bff0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bff8:	3318      	adds	r3, #24
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	1c59      	adds	r1, r3, #1
 800c000:	6239      	str	r1, [r7, #32]
 800c002:	4413      	add	r3, r2
 800c004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c00a:	e761      	b.n	800bed0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800c00c:	bf00      	nop
 800c00e:	e006      	b.n	800c01e <create_name+0x2da>
 800c010:	08012228 	.word	0x08012228
 800c014:	08012284 	.word	0x08012284
 800c018:	08012234 	.word	0x08012234
			if (si > di) break;			/* No extension */
 800c01c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c024:	3318      	adds	r3, #24
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	2be5      	cmp	r3, #229	; 0xe5
 800c02c:	d106      	bne.n	800c03c <create_name+0x2f8>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c034:	3318      	adds	r3, #24
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2205      	movs	r2, #5
 800c03a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	2b08      	cmp	r3, #8
 800c040:	d104      	bne.n	800c04c <create_name+0x308>
 800c042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800c04c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c050:	f003 030c 	and.w	r3, r3, #12
 800c054:	2b0c      	cmp	r3, #12
 800c056:	d005      	beq.n	800c064 <create_name+0x320>
 800c058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	2b03      	cmp	r3, #3
 800c062:	d105      	bne.n	800c070 <create_name+0x32c>
		cf |= NS_LFN;
 800c064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c068:	f043 0302 	orr.w	r3, r3, #2
 800c06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c074:	f003 0302 	and.w	r3, r3, #2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d117      	bne.n	800c0ac <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c07c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	2b01      	cmp	r3, #1
 800c086:	d105      	bne.n	800c094 <create_name+0x350>
 800c088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c08c:	f043 0310 	orr.w	r3, r3, #16
 800c090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c098:	f003 030c 	and.w	r3, r3, #12
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d105      	bne.n	800c0ac <create_name+0x368>
 800c0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a4:	f043 0308 	orr.w	r3, r3, #8
 800c0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b2:	3318      	adds	r3, #24
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	330b      	adds	r3, #11
 800c0b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c0bc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c0be:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3728      	adds	r7, #40	; 0x28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b2f      	cmp	r3, #47	; 0x2f
 800c0d8:	d003      	beq.n	800c0e2 <follow_path+0x1a>
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b5c      	cmp	r3, #92	; 0x5c
 800c0e0:	d102      	bne.n	800c0e8 <follow_path+0x20>
		path++;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2b1f      	cmp	r3, #31
 800c0fa:	d80c      	bhi.n	800c116 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff f85f 	bl	800b1c2 <dir_sdi>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10e:	3314      	adds	r3, #20
 800c110:	2200      	movs	r2, #0
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	e04c      	b.n	800c1b0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c116:	463b      	mov	r3, r7
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fe12 	bl	800bd44 <create_name>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d13d      	bne.n	800c1a6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fba6 	bl	800b87c <dir_find>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c13a:	3318      	adds	r3, #24
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	7adb      	ldrb	r3, [r3, #11]
 800c140:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c142:	7bfb      	ldrb	r3, [r7, #15]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00a      	beq.n	800c15e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b04      	cmp	r3, #4
 800c14c:	d12d      	bne.n	800c1aa <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d128      	bne.n	800c1aa <follow_path+0xe2>
 800c158:	2305      	movs	r3, #5
 800c15a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c15c:	e025      	b.n	800c1aa <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d122      	bne.n	800c1ae <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16e:	3314      	adds	r3, #20
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	330b      	adds	r3, #11
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	f003 0310 	and.w	r3, r3, #16
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d102      	bne.n	800c188 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800c182:	2305      	movs	r3, #5
 800c184:	73fb      	strb	r3, [r7, #15]
 800c186:	e013      	b.n	800c1b0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68b9      	ldr	r1, [r7, #8]
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fa52 	bl	800b63c <ld_clust>
 800c198:	4602      	mov	r2, r0
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1a4:	e7b7      	b.n	800c116 <follow_path+0x4e>
			if (res != FR_OK) break;
 800c1a6:	bf00      	nop
 800c1a8:	e002      	b.n	800c1b0 <follow_path+0xe8>
				break;
 800c1aa:	bf00      	nop
 800c1ac:	e000      	b.n	800c1b0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1ae:	bf00      	nop
		}
	}

	return res;
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b087      	sub	sp, #28
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d031      	beq.n	800c234 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	e002      	b.n	800c1de <get_ldnumber+0x24>
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b1f      	cmp	r3, #31
 800c1e4:	d903      	bls.n	800c1ee <get_ldnumber+0x34>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b3a      	cmp	r3, #58	; 0x3a
 800c1ec:	d1f4      	bne.n	800c1d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b3a      	cmp	r3, #58	; 0x3a
 800c1f4:	d11c      	bne.n	800c230 <get_ldnumber+0x76>
			tp = *path;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	1c5a      	adds	r2, r3, #1
 800c200:	60fa      	str	r2, [r7, #12]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	3b30      	subs	r3, #48	; 0x30
 800c206:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b09      	cmp	r3, #9
 800c20c:	d80e      	bhi.n	800c22c <get_ldnumber+0x72>
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	429a      	cmp	r2, r3
 800c214:	d10a      	bne.n	800c22c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d107      	bne.n	800c22c <get_ldnumber+0x72>
					vol = (int)i;
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	3301      	adds	r3, #1
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	e002      	b.n	800c236 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c230:	2300      	movs	r3, #0
 800c232:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c234:	693b      	ldr	r3, [r7, #16]
}
 800c236:	4618      	mov	r0, r3
 800c238:	371c      	adds	r7, #28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr

0800c240 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c250:	3304      	adds	r3, #4
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c25c:	330c      	adds	r3, #12
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7fe fc3a 	bl	800aae0 <move_window>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <check_fs+0x36>
		return 3;
 800c272:	2303      	movs	r3, #3
 800c274:	e04a      	b.n	800c30c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c27c:	3301      	adds	r3, #1
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	021b      	lsls	r3, r3, #8
 800c282:	b21a      	sxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c28a:	b21b      	sxth	r3, r3
 800c28c:	4313      	orrs	r3, r2
 800c28e:	b21b      	sxth	r3, r3
 800c290:	4a20      	ldr	r2, [pc, #128]	; (800c314 <check_fs+0xd4>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d001      	beq.n	800c29a <check_fs+0x5a>
		return 2;
 800c296:	2302      	movs	r3, #2
 800c298:	e038      	b.n	800c30c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3336      	adds	r3, #54	; 0x36
 800c29e:	3303      	adds	r3, #3
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	061a      	lsls	r2, r3, #24
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3336      	adds	r3, #54	; 0x36
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	041b      	lsls	r3, r3, #16
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	3236      	adds	r2, #54	; 0x36
 800c2b4:	3201      	adds	r2, #1
 800c2b6:	7812      	ldrb	r2, [r2, #0]
 800c2b8:	0212      	lsls	r2, r2, #8
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c2c8:	4a13      	ldr	r2, [pc, #76]	; (800c318 <check_fs+0xd8>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d101      	bne.n	800c2d2 <check_fs+0x92>
		return 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e01c      	b.n	800c30c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3352      	adds	r3, #82	; 0x52
 800c2d6:	3303      	adds	r3, #3
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	061a      	lsls	r2, r3, #24
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3352      	adds	r3, #82	; 0x52
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	041b      	lsls	r3, r3, #16
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	3252      	adds	r2, #82	; 0x52
 800c2ec:	3201      	adds	r2, #1
 800c2ee:	7812      	ldrb	r2, [r2, #0]
 800c2f0:	0212      	lsls	r2, r2, #8
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c300:	4a05      	ldr	r2, [pc, #20]	; (800c318 <check_fs+0xd8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d101      	bne.n	800c30a <check_fs+0xca>
		return 0;
 800c306:	2300      	movs	r3, #0
 800c308:	e000      	b.n	800c30c <check_fs+0xcc>

	return 1;
 800c30a:	2301      	movs	r3, #1
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	ffffaa55 	.word	0xffffaa55
 800c318:	00544146 	.word	0x00544146

0800c31c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b096      	sub	sp, #88	; 0x58
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c330:	68b8      	ldr	r0, [r7, #8]
 800c332:	f7ff ff42 	bl	800c1ba <get_ldnumber>
 800c336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da01      	bge.n	800c342 <find_volume+0x26>
 800c33e:	230b      	movs	r3, #11
 800c340:	e33c      	b.n	800c9bc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c342:	4ab3      	ldr	r2, [pc, #716]	; (800c610 <find_volume+0x2f4>)
 800c344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <find_volume+0x3a>
 800c352:	230c      	movs	r3, #12
 800c354:	e332      	b.n	800c9bc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c35a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01d      	beq.n	800c3a4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c36e:	3301      	adds	r3, #1
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe f934 	bl	800a5e0 <disk_status>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c37e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10c      	bne.n	800c3a4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <find_volume+0x84>
 800c390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c394:	f003 0304 	and.w	r3, r3, #4
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c39c:	230a      	movs	r3, #10
 800c39e:	e30d      	b.n	800c9bc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e30b      	b.n	800c9bc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe f924 	bl	800a614 <disk_initialize>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c3d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e2ec      	b.n	800c9bc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <find_volume+0xdc>
 800c3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c3f4:	230a      	movs	r3, #10
 800c3f6:	e2e1      	b.n	800c9bc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3fe:	3301      	adds	r3, #1
 800c400:	7818      	ldrb	r0, [r3, #0]
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c408:	330a      	adds	r3, #10
 800c40a:	461a      	mov	r2, r3
 800c40c:	2102      	movs	r1, #2
 800c40e:	f7fe f967 	bl	800a6e0 <disk_ioctl>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10f      	bne.n	800c438 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c41e:	330a      	adds	r3, #10
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c426:	d307      	bcc.n	800c438 <find_volume+0x11c>
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42e:	330a      	adds	r3, #10
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c436:	d901      	bls.n	800c43c <find_volume+0x120>
 800c438:	2301      	movs	r3, #1
 800c43a:	e2bf      	b.n	800c9bc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c440:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c442:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c444:	f7ff fefc 	bl	800c240 <check_fs>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c44e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c452:	2b01      	cmp	r3, #1
 800c454:	d155      	bne.n	800c502 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c456:	2300      	movs	r3, #0
 800c458:	643b      	str	r3, [r7, #64]	; 0x40
 800c45a:	e029      	b.n	800c4b0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c466:	4413      	add	r3, r2
 800c468:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	3304      	adds	r3, #4
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d012      	beq.n	800c49a <find_volume+0x17e>
 800c474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c476:	330b      	adds	r3, #11
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	061a      	lsls	r2, r3, #24
 800c47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47e:	330a      	adds	r3, #10
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	041b      	lsls	r3, r3, #16
 800c484:	4313      	orrs	r3, r2
 800c486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c488:	3209      	adds	r2, #9
 800c48a:	7812      	ldrb	r2, [r2, #0]
 800c48c:	0212      	lsls	r2, r2, #8
 800c48e:	4313      	orrs	r3, r2
 800c490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c492:	3208      	adds	r2, #8
 800c494:	7812      	ldrb	r2, [r2, #0]
 800c496:	431a      	orrs	r2, r3
 800c498:	e000      	b.n	800c49c <find_volume+0x180>
 800c49a:	2200      	movs	r2, #0
 800c49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c4a4:	440b      	add	r3, r1
 800c4a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	d9d2      	bls.n	800c45c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <find_volume+0x1aa>
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c4d4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d005      	beq.n	800c4e8 <find_volume+0x1cc>
 800c4dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4e0:	f7ff feae 	bl	800c240 <check_fs>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	e000      	b.n	800c4ea <find_volume+0x1ce>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c4ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d005      	beq.n	800c502 <find_volume+0x1e6>
 800c4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d9e1      	bls.n	800c4c6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c506:	2b03      	cmp	r3, #3
 800c508:	d101      	bne.n	800c50e <find_volume+0x1f2>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e256      	b.n	800c9bc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c50e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <find_volume+0x1fe>
 800c516:	230d      	movs	r3, #13
 800c518:	e250      	b.n	800c9bc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	7b1b      	ldrb	r3, [r3, #12]
 800c51e:	021b      	lsls	r3, r3, #8
 800c520:	b21a      	sxth	r2, r3
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	7adb      	ldrb	r3, [r3, #11]
 800c526:	b21b      	sxth	r3, r3
 800c528:	4313      	orrs	r3, r2
 800c52a:	b21a      	sxth	r2, r3
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c532:	330a      	adds	r3, #10
 800c534:	881b      	ldrh	r3, [r3, #0]
 800c536:	b21b      	sxth	r3, r3
 800c538:	429a      	cmp	r2, r3
 800c53a:	d001      	beq.n	800c540 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800c53c:	230d      	movs	r3, #13
 800c53e:	e23d      	b.n	800c9bc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	7ddb      	ldrb	r3, [r3, #23]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	b21a      	sxth	r2, r3
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	7d9b      	ldrb	r3, [r3, #22]
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	4313      	orrs	r3, r2
 800c550:	b21b      	sxth	r3, r3
 800c552:	b29b      	uxth	r3, r3
 800c554:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d112      	bne.n	800c582 <find_volume+0x266>
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c562:	061a      	lsls	r2, r3, #24
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c56a:	041b      	lsls	r3, r3, #16
 800c56c:	4313      	orrs	r3, r2
 800c56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c570:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c574:	0212      	lsls	r2, r2, #8
 800c576:	4313      	orrs	r3, r2
 800c578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c57a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c57e:	4313      	orrs	r3, r2
 800c580:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c588:	3318      	adds	r3, #24
 800c58a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c58c:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	7c1a      	ldrb	r2, [r3, #16]
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c598:	3303      	adds	r3, #3
 800c59a:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a2:	3303      	adds	r3, #3
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d008      	beq.n	800c5bc <find_volume+0x2a0>
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b0:	3303      	adds	r3, #3
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d001      	beq.n	800c5bc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800c5b8:	230d      	movs	r3, #13
 800c5ba:	e1ff      	b.n	800c9bc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c2:	3303      	adds	r3, #3
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ca:	fb02 f303 	mul.w	r3, r2, r3
 800c5ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	7b5a      	ldrb	r2, [r3, #13]
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5da:	3302      	adds	r3, #2
 800c5dc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00e      	beq.n	800c60a <find_volume+0x2ee>
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f2:	3302      	adds	r3, #2
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fe:	3302      	adds	r3, #2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	4013      	ands	r3, r2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800c60a:	230d      	movs	r3, #13
 800c60c:	e1d6      	b.n	800c9bc <find_volume+0x6a0>
 800c60e:	bf00      	nop
 800c610:	20000258 	.word	0x20000258

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	7c9b      	ldrb	r3, [r3, #18]
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	b21a      	sxth	r2, r3
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	7c5b      	ldrb	r3, [r3, #17]
 800c620:	b21b      	sxth	r3, r3
 800c622:	4313      	orrs	r3, r2
 800c624:	b21b      	sxth	r3, r3
 800c626:	b29a      	uxth	r2, r3
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62e:	3308      	adds	r3, #8
 800c630:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c638:	3308      	adds	r3, #8
 800c63a:	881a      	ldrh	r2, [r3, #0]
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c642:	330a      	adds	r3, #10
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	095b      	lsrs	r3, r3, #5
 800c648:	b29b      	uxth	r3, r3
 800c64a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c64e:	fb03 f301 	mul.w	r3, r3, r1
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	b29b      	uxth	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800c65a:	230d      	movs	r3, #13
 800c65c:	e1ae      	b.n	800c9bc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	7d1b      	ldrb	r3, [r3, #20]
 800c662:	021b      	lsls	r3, r3, #8
 800c664:	b21a      	sxth	r2, r3
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	7cdb      	ldrb	r3, [r3, #19]
 800c66a:	b21b      	sxth	r3, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b21b      	sxth	r3, r3
 800c670:	b29b      	uxth	r3, r3
 800c672:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c676:	2b00      	cmp	r3, #0
 800c678:	d112      	bne.n	800c6a0 <find_volume+0x384>
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c680:	061a      	lsls	r2, r3, #24
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c688:	041b      	lsls	r3, r3, #16
 800c68a:	4313      	orrs	r3, r2
 800c68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c68e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c692:	0212      	lsls	r2, r2, #8
 800c694:	4313      	orrs	r3, r2
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	7bdb      	ldrb	r3, [r3, #15]
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	b21a      	sxth	r2, r3
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	7b9b      	ldrb	r3, [r3, #14]
 800c6ac:	b21b      	sxth	r3, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	b21b      	sxth	r3, r3
 800c6b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c6b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <find_volume+0x3a2>
 800c6ba:	230d      	movs	r3, #13
 800c6bc:	e17e      	b.n	800c9bc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c6be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c2:	441a      	add	r2, r3
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	8819      	ldrh	r1, [r3, #0]
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d4:	330a      	adds	r3, #10
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	095b      	lsrs	r3, r3, #5
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d201      	bcs.n	800c6f2 <find_volume+0x3d6>
 800c6ee:	230d      	movs	r3, #13
 800c6f0:	e164      	b.n	800c9bc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fe:	3302      	adds	r3, #2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	fbb2 f3f3 	udiv	r3, r2, r3
 800c706:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <find_volume+0x3f6>
 800c70e:	230d      	movs	r3, #13
 800c710:	e154      	b.n	800c9bc <find_volume+0x6a0>
	fmt = FS_FAT12;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c71e:	4293      	cmp	r3, r2
 800c720:	d902      	bls.n	800c728 <find_volume+0x40c>
 800c722:	2302      	movs	r3, #2
 800c724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c72e:	4293      	cmp	r3, r2
 800c730:	d902      	bls.n	800c738 <find_volume+0x41c>
 800c732:	2303      	movs	r3, #3
 800c734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	1c9a      	adds	r2, r3, #2
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c742:	3314      	adds	r3, #20
 800c744:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74c:	331c      	adds	r3, #28
 800c74e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c750:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c752:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c756:	441a      	add	r2, r3
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c75e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800c760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	441a      	add	r2, r3
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c76c:	3308      	adds	r3, #8
 800c76e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800c770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c774:	2b03      	cmp	r3, #3
 800c776:	d127      	bne.n	800c7c8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c77e:	3308      	adds	r3, #8
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <find_volume+0x46e>
 800c786:	230d      	movs	r3, #13
 800c788:	e118      	b.n	800c9bc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c790:	061a      	lsls	r2, r3, #24
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c798:	041b      	lsls	r3, r3, #16
 800c79a:	4313      	orrs	r3, r2
 800c79c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c79e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c7a2:	0212      	lsls	r2, r2, #8
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7be:	3314      	adds	r3, #20
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c7c6:	e030      	b.n	800c82a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <find_volume+0x4be>
 800c7d6:	230d      	movs	r3, #13
 800c7d8:	e0f0      	b.n	800c9bc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7e4:	441a      	add	r2, r3
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d106      	bne.n	800c806 <find_volume+0x4ea>
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7fe:	3314      	adds	r3, #20
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	e010      	b.n	800c828 <find_volume+0x50c>
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c80c:	3314      	adds	r3, #20
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4613      	mov	r3, r2
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	4413      	add	r3, r2
 800c816:	085a      	lsrs	r2, r3, #1
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c81e:	3314      	adds	r3, #20
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c828:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c830:	3318      	adds	r3, #24
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c83a:	330a      	adds	r3, #10
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	4619      	mov	r1, r3
 800c840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c842:	440b      	add	r3, r1
 800c844:	1e59      	subs	r1, r3, #1
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c84c:	330a      	adds	r3, #10
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	fbb1 f3f3 	udiv	r3, r1, r3
 800c854:	429a      	cmp	r2, r3
 800c856:	d201      	bcs.n	800c85c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800c858:	230d      	movs	r3, #13
 800c85a:	e0af      	b.n	800c9bc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c862:	3310      	adds	r3, #16
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	601a      	str	r2, [r3, #0]
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c870:	3310      	adds	r3, #16
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c87a:	330c      	adds	r3, #12
 800c87c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c884:	3305      	adds	r3, #5
 800c886:	2280      	movs	r2, #128	; 0x80
 800c888:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c88a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d17d      	bne.n	800c98e <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c898:	021b      	lsls	r3, r3, #8
 800c89a:	b21a      	sxth	r2, r3
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	b21b      	sxth	r3, r3
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d170      	bne.n	800c98e <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8b4:	f7fe f914 	bl	800aae0 <move_window>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d167      	bne.n	800c98e <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c4:	3305      	adds	r3, #5
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c8d0:	021b      	lsls	r3, r3, #8
 800c8d2:	b21a      	sxth	r2, r3
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	b21b      	sxth	r3, r3
 800c8e0:	4a38      	ldr	r2, [pc, #224]	; (800c9c4 <find_volume+0x6a8>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d153      	bne.n	800c98e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e8:	78db      	ldrb	r3, [r3, #3]
 800c8ea:	061a      	lsls	r2, r3, #24
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	789b      	ldrb	r3, [r3, #2]
 800c8f0:	041b      	lsls	r3, r3, #16
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8f6:	7852      	ldrb	r2, [r2, #1]
 800c8f8:	0212      	lsls	r2, r2, #8
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8fe:	7812      	ldrb	r2, [r2, #0]
 800c900:	4313      	orrs	r3, r2
 800c902:	4a31      	ldr	r2, [pc, #196]	; (800c9c8 <find_volume+0x6ac>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d142      	bne.n	800c98e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c90e:	061a      	lsls	r2, r3, #24
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c916:	041b      	lsls	r3, r3, #16
 800c918:	4313      	orrs	r3, r2
 800c91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c91c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c920:	0212      	lsls	r2, r2, #8
 800c922:	4313      	orrs	r3, r2
 800c924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c926:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c92a:	4313      	orrs	r3, r2
 800c92c:	4a27      	ldr	r2, [pc, #156]	; (800c9cc <find_volume+0x6b0>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d12d      	bne.n	800c98e <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c934:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c938:	061a      	lsls	r2, r3, #24
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c940:	041b      	lsls	r3, r3, #16
 800c942:	4313      	orrs	r3, r2
 800c944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c946:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c94a:	0212      	lsls	r2, r2, #8
 800c94c:	4313      	orrs	r3, r2
 800c94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c950:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c954:	431a      	orrs	r2, r3
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c95c:	3310      	adds	r3, #16
 800c95e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c962:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c966:	061a      	lsls	r2, r3, #24
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c96e:	041b      	lsls	r3, r3, #16
 800c970:	4313      	orrs	r3, r2
 800c972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c974:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c978:	0212      	lsls	r2, r2, #8
 800c97a:	4313      	orrs	r3, r2
 800c97c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c97e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c982:	431a      	orrs	r2, r3
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98a:	330c      	adds	r3, #12
 800c98c:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c994:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c998:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c99a:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <find_volume+0x6b4>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <find_volume+0x6b4>)
 800c9a4:	801a      	strh	r2, [r3, #0]
 800c9a6:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <find_volume+0x6b4>)
 800c9a8:	881a      	ldrh	r2, [r3, #0]
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9b0:	3306      	adds	r3, #6
 800c9b2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9b6:	f7fe f80f 	bl	800a9d8 <clear_lock>
#endif

	return FR_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3758      	adds	r7, #88	; 0x58
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	ffffaa55 	.word	0xffffaa55
 800c9c8:	41615252 	.word	0x41615252
 800c9cc:	61417272 	.word	0x61417272
 800c9d0:	2000025c 	.word	0x2000025c

0800c9d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d02d      	beq.n	800ca42 <validate+0x6e>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d027      	beq.n	800ca42 <validate+0x6e>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01e      	beq.n	800ca42 <validate+0x6e>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca10:	3306      	adds	r3, #6
 800ca12:	881a      	ldrh	r2, [r3, #0]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d10f      	bne.n	800ca42 <validate+0x6e>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2e:	3301      	adds	r3, #1
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fd fdd4 	bl	800a5e0 <disk_status>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <validate+0x72>
		return FR_INVALID_OBJECT;
 800ca42:	2309      	movs	r3, #9
 800ca44:	e000      	b.n	800ca48 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ca62:	f107 0310 	add.w	r3, r7, #16
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff fba7 	bl	800c1ba <get_ldnumber>
 800ca6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	da01      	bge.n	800ca78 <f_mount+0x28>
 800ca74:	230b      	movs	r3, #11
 800ca76:	e02f      	b.n	800cad8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ca78:	4a19      	ldr	r2, [pc, #100]	; (800cae0 <f_mount+0x90>)
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800ca88:	69b8      	ldr	r0, [r7, #24]
 800ca8a:	f7fd ffa5 	bl	800a9d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa4:	2200      	movs	r2, #0
 800caa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	490d      	ldr	r1, [pc, #52]	; (800cae0 <f_mount+0x90>)
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <f_mount+0x6e>
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d001      	beq.n	800cac2 <f_mount+0x72>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e00a      	b.n	800cad8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800cac2:	f107 0108 	add.w	r1, r7, #8
 800cac6:	f107 030c 	add.w	r3, r7, #12
 800caca:	2200      	movs	r2, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff fc25 	bl	800c31c <find_volume>
 800cad2:	4603      	mov	r3, r0
 800cad4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3720      	adds	r7, #32
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20000258 	.word	0x20000258

0800cae4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <f_opendir+0x14>
 800caf4:	2309      	movs	r3, #9
 800caf6:	e090      	b.n	800cc1a <f_opendir+0x136>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800caf8:	4639      	mov	r1, r7
 800cafa:	f107 0318 	add.w	r3, r7, #24
 800cafe:	2200      	movs	r2, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff fc0b 	bl	800c31c <find_volume>
 800cb06:	4603      	mov	r3, r0
 800cb08:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800cb0a:	7ffb      	ldrb	r3, [r7, #31]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d17b      	bne.n	800cc08 <f_opendir+0x124>
		dp->fs = fs;
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb18:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb20:	3318      	adds	r3, #24
 800cb22:	f107 020c 	add.w	r2, r7, #12
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cb2e:	4a3d      	ldr	r2, [pc, #244]	; (800cc24 <f_opendir+0x140>)
 800cb30:	601a      	str	r2, [r3, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fac6 	bl	800c0c8 <follow_path>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800cb40:	7ffb      	ldrb	r3, [r7, #31]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d15b      	bne.n	800cbfe <f_opendir+0x11a>
			if (dp->dir) {						/* It is not the origin directory itself */
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb4c:	3314      	adds	r3, #20
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d01d      	beq.n	800cb90 <f_opendir+0xac>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb5a:	3314      	adds	r3, #20
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	330b      	adds	r3, #11
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 0310 	and.w	r3, r3, #16
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d010      	beq.n	800cb8c <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 800cb6a:	69ba      	ldr	r2, [r7, #24]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb72:	3314      	adds	r3, #20
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f7fe fd5f 	bl	800b63c <ld_clust>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb86:	3308      	adds	r3, #8
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	e001      	b.n	800cb90 <f_opendir+0xac>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800cb8c:	2305      	movs	r3, #5
 800cb8e:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800cb90:	7ffb      	ldrb	r3, [r7, #31]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d133      	bne.n	800cbfe <f_opendir+0x11a>
				dp->id = fs->id;
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb9c:	3306      	adds	r3, #6
 800cb9e:	881a      	ldrh	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba6:	3304      	adds	r3, #4
 800cba8:	801a      	strh	r2, [r3, #0]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cbaa:	2100      	movs	r1, #0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7fe fb08 	bl	800b1c2 <dir_sdi>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800cbb6:	7ffb      	ldrb	r3, [r7, #31]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d120      	bne.n	800cbfe <f_opendir+0x11a>
					if (dp->sclust) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d013      	beq.n	800cbf2 <f_opendir+0x10e>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cbca:	2100      	movs	r1, #0
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7fd fdff 	bl	800a7d0 <inc_lock>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbda:	331c      	adds	r3, #28
 800cbdc:	601a      	str	r2, [r3, #0]
						if (!dp->lockid)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe4:	331c      	adds	r3, #28
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d108      	bne.n	800cbfe <f_opendir+0x11a>
							res = FR_TOO_MANY_OPEN_FILES;
 800cbec:	2312      	movs	r3, #18
 800cbee:	77fb      	strb	r3, [r7, #31]
 800cbf0:	e005      	b.n	800cbfe <f_opendir+0x11a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf8:	331c      	adds	r3, #28
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cbfe:	7ffb      	ldrb	r3, [r7, #31]
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	d101      	bne.n	800cc08 <f_opendir+0x124>
 800cc04:	2305      	movs	r3, #5
 800cc06:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800cc08:	7ffb      	ldrb	r3, [r7, #31]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d004      	beq.n	800cc18 <f_opendir+0x134>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cc18:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3720      	adds	r7, #32
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20000278 	.word	0x20000278

0800cc28 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fecf 	bl	800c9d4 <validate>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d118      	bne.n	800cc72 <f_closedir+0x4a>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc46:	331c      	adds	r3, #28
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d009      	beq.n	800cc62 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc54:	331c      	adds	r3, #28
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fd fe79 	bl	800a950 <dec_lock>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d104      	bne.n	800cc72 <f_closedir+0x4a>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fea4 	bl	800c9d4 <validate>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d13e      	bne.n	800cd14 <f_readdir+0x98>
		if (!fno) {
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d106      	bne.n	800ccaa <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7fe fa8f 	bl	800b1c2 <dir_sdi>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
 800cca8:	e034      	b.n	800cd14 <f_readdir+0x98>
		} else {
			INIT_BUF(*dp);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccb0:	3318      	adds	r3, #24
 800ccb2:	f107 0208 	add.w	r2, r7, #8
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccbe:	4a18      	ldr	r2, [pc, #96]	; (800cd20 <f_readdir+0xa4>)
 800ccc0:	601a      	str	r2, [r3, #0]
			res = dir_read(dp, 0);			/* Read an item */
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7fe feae 	bl	800ba26 <dir_read>
 800ccca:	4603      	mov	r3, r0
 800cccc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d107      	bne.n	800cce4 <f_readdir+0x68>
				dp->sect = 0;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccda:	3310      	adds	r3, #16
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]
				res = FR_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d114      	bne.n	800cd14 <f_readdir+0x98>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7fe ff52 	bl	800bb96 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fe fb3f 	bl	800b378 <dir_next>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b04      	cmp	r3, #4
 800cd02:	d107      	bne.n	800cd14 <f_readdir+0x98>
					dp->sect = 0;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0a:	3310      	adds	r3, #16
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	601a      	str	r2, [r3, #0]
					res = FR_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20000278 	.word	0x20000278

0800cd24 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	; 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800cd30:	f107 030c 	add.w	r3, r7, #12
 800cd34:	2200      	movs	r2, #0
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff faef 	bl	800c31c <find_volume>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800cd4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 80c4 	bne.w	800cedc <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5a:	3310      	adds	r3, #16
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd64:	3314      	adds	r3, #20
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3b02      	subs	r3, #2
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d807      	bhi.n	800cd7e <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd74:	3310      	adds	r3, #16
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e0ae      	b.n	800cedc <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800cd8c:	7efb      	ldrb	r3, [r7, #27]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d127      	bne.n	800cde2 <f_getfree+0xbe>
				clst = 2;
 800cd92:	2302      	movs	r3, #2
 800cd94:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800cd96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd98:	69f8      	ldr	r0, [r7, #28]
 800cd9a:	f7fd fefc 	bl	800ab96 <get_fat>
 800cd9e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda6:	d103      	bne.n	800cdb0 <f_getfree+0x8c>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cdae:	e07f      	b.n	800ceb0 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d103      	bne.n	800cdbe <f_getfree+0x9a>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cdbc:	e078      	b.n	800ceb0 <f_getfree+0x18c>
					if (stat == 0) n++;
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d102      	bne.n	800cdca <f_getfree+0xa6>
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	3301      	adds	r3, #1
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd6:	3314      	adds	r3, #20
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3da      	bcc.n	800cd96 <f_getfree+0x72>
 800cde0:	e066      	b.n	800ceb0 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde8:	3314      	adds	r3, #20
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d115      	bne.n	800ce32 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800ce06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	69f8      	ldr	r0, [r7, #28]
 800ce10:	f7fd fe66 	bl	800aae0 <move_window>
 800ce14:	4603      	mov	r3, r0
 800ce16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800ce1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d145      	bne.n	800ceae <f_getfree+0x18a>
						p = fs->win.d8;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce2c:	330a      	adds	r3, #10
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800ce32:	7efb      	ldrb	r3, [r7, #27]
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d115      	bne.n	800ce64 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	b21a      	sxth	r2, r3
 800ce42:	6a3b      	ldr	r3, [r7, #32]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	b21b      	sxth	r3, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	b21b      	sxth	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <f_getfree+0x132>
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	3301      	adds	r3, #1
 800ce54:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	3302      	adds	r3, #2
 800ce5a:	623b      	str	r3, [r7, #32]
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	3b02      	subs	r3, #2
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
 800ce62:	e01d      	b.n	800cea0 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	3303      	adds	r3, #3
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	061a      	lsls	r2, r3, #24
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	3302      	adds	r3, #2
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	041b      	lsls	r3, r3, #16
 800ce74:	4313      	orrs	r3, r2
 800ce76:	6a3a      	ldr	r2, [r7, #32]
 800ce78:	3201      	adds	r2, #1
 800ce7a:	7812      	ldrb	r2, [r2, #0]
 800ce7c:	0212      	lsls	r2, r2, #8
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	6a3a      	ldr	r2, [r7, #32]
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d102      	bne.n	800ce94 <f_getfree+0x170>
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	3301      	adds	r3, #1
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	3304      	adds	r3, #4
 800ce98:	623b      	str	r3, [r7, #32]
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	3b04      	subs	r3, #4
 800ce9e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	3b01      	subs	r3, #1
 800cea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1a9      	bne.n	800ce00 <f_getfree+0xdc>
 800ceac:	e000      	b.n	800ceb0 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800ceae:	bf00      	nop
			}
			fs->free_clust = n;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb6:	3310      	adds	r3, #16
 800ceb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceba:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec2:	3305      	adds	r3, #5
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced2:	3305      	adds	r3, #5
 800ced4:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceda:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800cedc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3738      	adds	r7, #56	; 0x38
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cef6:	2301      	movs	r3, #1
 800cef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cefe:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf00:	7a5b      	ldrb	r3, [r3, #9]
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d831      	bhi.n	800cf6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf08:	4b1b      	ldr	r3, [pc, #108]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf0a:	7a5b      	ldrb	r3, [r3, #9]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4b19      	ldr	r3, [pc, #100]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf12:	2100      	movs	r1, #0
 800cf14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cf16:	4b18      	ldr	r3, [pc, #96]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf18:	7a5b      	ldrb	r3, [r3, #9]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	4a16      	ldr	r2, [pc, #88]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf28:	7a5b      	ldrb	r3, [r3, #9]
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf30:	4413      	add	r3, r2
 800cf32:	79fa      	ldrb	r2, [r7, #7]
 800cf34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf36:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf38:	7a5b      	ldrb	r3, [r3, #9]
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	b2d1      	uxtb	r1, r2
 800cf40:	4a0d      	ldr	r2, [pc, #52]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf42:	7251      	strb	r1, [r2, #9]
 800cf44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf46:	7dbb      	ldrb	r3, [r7, #22]
 800cf48:	3330      	adds	r3, #48	; 0x30
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3301      	adds	r3, #1
 800cf54:	223a      	movs	r2, #58	; 0x3a
 800cf56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	3302      	adds	r3, #2
 800cf5c:	222f      	movs	r2, #47	; 0x2f
 800cf5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	3303      	adds	r3, #3
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	371c      	adds	r7, #28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr
 800cf78:	20000478 	.word	0x20000478

0800cf7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf86:	2200      	movs	r2, #0
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff ffac 	bl	800cee8 <FATFS_LinkDriverEx>
 800cf90:	4603      	mov	r3, r0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr

0800cfb0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4808      	ldr	r0, [pc, #32]	; (800cfe4 <USBH_status+0x34>)
 800cfc4:	f7fb fa69 	bl	800849a <USBH_MSC_UnitIsReady>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <USBH_status+0x24>
  {
    res = RES_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	73fb      	strb	r3, [r7, #15]
 800cfd2:	e001      	b.n	800cfd8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	2000271c 	.word	0x2000271c

0800cfe8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b094      	sub	sp, #80	; 0x50
 800cfec:	af02      	add	r7, sp, #8
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	607a      	str	r2, [r7, #4]
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f003 0303 	and.w	r3, r3, #3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800d00e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d012:	e02c      	b.n	800d06e <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800d014:	7bf9      	ldrb	r1, [r7, #15]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	4816      	ldr	r0, [pc, #88]	; (800d078 <USBH_read+0x90>)
 800d020:	f7fb fa84 	bl	800852c <USBH_MSC_Read>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800d02a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d103      	bne.n	800d03a <USBH_read+0x52>
  {
    res = RES_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d038:	e017      	b.n	800d06a <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800d03a:	f107 0210 	add.w	r2, r7, #16
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	4619      	mov	r1, r3
 800d042:	480d      	ldr	r0, [pc, #52]	; (800d078 <USBH_read+0x90>)
 800d044:	f7fb fa4e 	bl	80084e4 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800d048:	7f7b      	ldrb	r3, [r7, #29]
 800d04a:	2b3a      	cmp	r3, #58	; 0x3a
 800d04c:	d005      	beq.n	800d05a <USBH_read+0x72>
 800d04e:	2b3a      	cmp	r3, #58	; 0x3a
 800d050:	dc07      	bgt.n	800d062 <USBH_read+0x7a>
 800d052:	2b04      	cmp	r3, #4
 800d054:	d001      	beq.n	800d05a <USBH_read+0x72>
 800d056:	2b28      	cmp	r3, #40	; 0x28
 800d058:	d103      	bne.n	800d062 <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 800d05a:	2303      	movs	r3, #3
 800d05c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800d060:	e003      	b.n	800d06a <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d068:	bf00      	nop
    }
  }
  
  return res;
 800d06a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3748      	adds	r7, #72	; 0x48
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000271c 	.word	0x2000271c

0800d07c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b094      	sub	sp, #80	; 0x50
 800d080:	af02      	add	r7, sp, #8
 800d082:	60b9      	str	r1, [r7, #8]
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	603b      	str	r3, [r7, #0]
 800d088:	4603      	mov	r3, r0
 800d08a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 800d08c:	2301      	movs	r3, #1
 800d08e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 800d092:	2300      	movs	r3, #0
 800d094:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f003 0303 	and.w	r3, r3, #3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800d0a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d0a6:	e034      	b.n	800d112 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800d0a8:	7bf9      	ldrb	r1, [r7, #15]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	481a      	ldr	r0, [pc, #104]	; (800d11c <USBH_write+0xa0>)
 800d0b4:	f7fb faa3 	bl	80085fe <USBH_MSC_Write>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800d0be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d103      	bne.n	800d0ce <USBH_write+0x52>
  {
    res = RES_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d0cc:	e01f      	b.n	800d10e <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800d0ce:	f107 0210 	add.w	r2, r7, #16
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4811      	ldr	r0, [pc, #68]	; (800d11c <USBH_write+0xa0>)
 800d0d8:	f7fb fa04 	bl	80084e4 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800d0dc:	7f7b      	ldrb	r3, [r7, #29]
 800d0de:	2b3a      	cmp	r3, #58	; 0x3a
 800d0e0:	d00d      	beq.n	800d0fe <USBH_write+0x82>
 800d0e2:	2b3a      	cmp	r3, #58	; 0x3a
 800d0e4:	dc0f      	bgt.n	800d106 <USBH_write+0x8a>
 800d0e6:	2b28      	cmp	r3, #40	; 0x28
 800d0e8:	d009      	beq.n	800d0fe <USBH_write+0x82>
 800d0ea:	2b28      	cmp	r3, #40	; 0x28
 800d0ec:	dc0b      	bgt.n	800d106 <USBH_write+0x8a>
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d005      	beq.n	800d0fe <USBH_write+0x82>
 800d0f2:	2b27      	cmp	r3, #39	; 0x27
 800d0f4:	d107      	bne.n	800d106 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d0fc:	e007      	b.n	800d10e <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 800d0fe:	2303      	movs	r3, #3
 800d100:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800d104:	e003      	b.n	800d10e <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d10c:	bf00      	nop
    }
  }
  
  return res;   
 800d10e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d112:	4618      	mov	r0, r3
 800d114:	3748      	adds	r7, #72	; 0x48
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	2000271c 	.word	0x2000271c

0800d120 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b090      	sub	sp, #64	; 0x40
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	603a      	str	r2, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
 800d12c:	460b      	mov	r3, r1
 800d12e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800d136:	79bb      	ldrb	r3, [r7, #6]
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d850      	bhi.n	800d1de <USBH_ioctl+0xbe>
 800d13c:	a201      	add	r2, pc, #4	; (adr r2, 800d144 <USBH_ioctl+0x24>)
 800d13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d142:	bf00      	nop
 800d144:	0800d155 	.word	0x0800d155
 800d148:	0800d15d 	.word	0x0800d15d
 800d14c:	0800d187 	.word	0x0800d187
 800d150:	0800d1b3 	.word	0x0800d1b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d15a:	e043      	b.n	800d1e4 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800d15c:	f107 0208 	add.w	r2, r7, #8
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	4619      	mov	r1, r3
 800d164:	4822      	ldr	r0, [pc, #136]	; (800d1f0 <USBH_ioctl+0xd0>)
 800d166:	f7fb f9bd 	bl	80084e4 <USBH_MSC_GetLUNInfo>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d106      	bne.n	800d17e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d17c:	e032      	b.n	800d1e4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d184:	e02e      	b.n	800d1e4 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800d186:	f107 0208 	add.w	r2, r7, #8
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	4619      	mov	r1, r3
 800d18e:	4818      	ldr	r0, [pc, #96]	; (800d1f0 <USBH_ioctl+0xd0>)
 800d190:	f7fb f9a8 	bl	80084e4 <USBH_MSC_GetLUNInfo>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d107      	bne.n	800d1aa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800d19a:	8a3b      	ldrh	r3, [r7, #16]
 800d19c:	461a      	mov	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d1a8:	e01c      	b.n	800d1e4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d1b0:	e018      	b.n	800d1e4 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800d1b2:	f107 0208 	add.w	r2, r7, #8
 800d1b6:	79fb      	ldrb	r3, [r7, #7]
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	480d      	ldr	r0, [pc, #52]	; (800d1f0 <USBH_ioctl+0xd0>)
 800d1bc:	f7fb f992 	bl	80084e4 <USBH_MSC_GetLUNInfo>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d107      	bne.n	800d1d6 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800d1c6:	8a3b      	ldrh	r3, [r7, #16]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d1d4:	e006      	b.n	800d1e4 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d1dc:	e002      	b.n	800d1e4 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 800d1de:	2304      	movs	r3, #4
 800d1e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 800d1e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3740      	adds	r7, #64	; 0x40
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	2000271c 	.word	0x2000271c

0800d1f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6039      	str	r1, [r7, #0]
 800d1fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d200:	88fb      	ldrh	r3, [r7, #6]
 800d202:	2b7f      	cmp	r3, #127	; 0x7f
 800d204:	d802      	bhi.n	800d20c <ff_convert+0x18>
		c = chr;
 800d206:	88fb      	ldrh	r3, [r7, #6]
 800d208:	81fb      	strh	r3, [r7, #14]
 800d20a:	e025      	b.n	800d258 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	2bff      	cmp	r3, #255	; 0xff
 800d216:	d805      	bhi.n	800d224 <ff_convert+0x30>
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	3b80      	subs	r3, #128	; 0x80
 800d21c:	4a11      	ldr	r2, [pc, #68]	; (800d264 <ff_convert+0x70>)
 800d21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d222:	e000      	b.n	800d226 <ff_convert+0x32>
 800d224:	2300      	movs	r3, #0
 800d226:	81fb      	strh	r3, [r7, #14]
 800d228:	e016      	b.n	800d258 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800d22a:	2300      	movs	r3, #0
 800d22c:	81fb      	strh	r3, [r7, #14]
 800d22e:	e009      	b.n	800d244 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d230:	89fb      	ldrh	r3, [r7, #14]
 800d232:	4a0c      	ldr	r2, [pc, #48]	; (800d264 <ff_convert+0x70>)
 800d234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d238:	88fa      	ldrh	r2, [r7, #6]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d006      	beq.n	800d24c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d23e:	89fb      	ldrh	r3, [r7, #14]
 800d240:	3301      	adds	r3, #1
 800d242:	81fb      	strh	r3, [r7, #14]
 800d244:	89fb      	ldrh	r3, [r7, #14]
 800d246:	2b7f      	cmp	r3, #127	; 0x7f
 800d248:	d9f2      	bls.n	800d230 <ff_convert+0x3c>
 800d24a:	e000      	b.n	800d24e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d24c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d24e:	89fb      	ldrh	r3, [r7, #14]
 800d250:	3380      	adds	r3, #128	; 0x80
 800d252:	b29b      	uxth	r3, r3
 800d254:	b2db      	uxtb	r3, r3
 800d256:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d258:	89fb      	ldrh	r3, [r7, #14]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	bc80      	pop	{r7}
 800d262:	4770      	bx	lr
 800d264:	08012328 	.word	0x08012328

0800d268 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d272:	2300      	movs	r3, #0
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	e002      	b.n	800d27e <ff_wtoupper+0x16>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3301      	adds	r3, #1
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	4a0f      	ldr	r2, [pc, #60]	; (800d2bc <ff_wtoupper+0x54>)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d006      	beq.n	800d298 <ff_wtoupper+0x30>
 800d28a:	4a0c      	ldr	r2, [pc, #48]	; (800d2bc <ff_wtoupper+0x54>)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d292:	88fa      	ldrh	r2, [r7, #6]
 800d294:	429a      	cmp	r2, r3
 800d296:	d1ef      	bne.n	800d278 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d298:	4a08      	ldr	r2, [pc, #32]	; (800d2bc <ff_wtoupper+0x54>)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <ff_wtoupper+0x46>
 800d2a4:	4a06      	ldr	r2, [pc, #24]	; (800d2c0 <ff_wtoupper+0x58>)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ac:	e000      	b.n	800d2b0 <ff_wtoupper+0x48>
 800d2ae:	88fb      	ldrh	r3, [r7, #6]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3714      	adds	r7, #20
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bc80      	pop	{r7}
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	08012428 	.word	0x08012428
 800d2c0:	08012608 	.word	0x08012608

0800d2c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	490e      	ldr	r1, [pc, #56]	; (800d304 <MX_USB_HOST_Init+0x40>)
 800d2cc:	480e      	ldr	r0, [pc, #56]	; (800d308 <MX_USB_HOST_Init+0x44>)
 800d2ce:	f7fb ff4d 	bl	800916c <USBH_Init>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d2d8:	f7f4 fece 	bl	8002078 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d2dc:	490b      	ldr	r1, [pc, #44]	; (800d30c <MX_USB_HOST_Init+0x48>)
 800d2de:	480a      	ldr	r0, [pc, #40]	; (800d308 <MX_USB_HOST_Init+0x44>)
 800d2e0:	f7fb ffc8 	bl	8009274 <USBH_RegisterClass>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d2ea:	f7f4 fec5 	bl	8002078 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d2ee:	4806      	ldr	r0, [pc, #24]	; (800d308 <MX_USB_HOST_Init+0x44>)
 800d2f0:	f7fc f84a 	bl	8009388 <USBH_Start>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d2fa:	f7f4 febd 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d2fe:	bf00      	nop
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	0800d325 	.word	0x0800d325
 800d308:	2000271c 	.word	0x2000271c
 800d30c:	2000001c 	.word	0x2000001c

0800d310 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d314:	4802      	ldr	r0, [pc, #8]	; (800d320 <MX_USB_HOST_Process+0x10>)
 800d316:	f7fc f847 	bl	80093a8 <USBH_Process>
}
 800d31a:	bf00      	nop
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	2000271c 	.word	0x2000271c

0800d324 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	3b01      	subs	r3, #1
 800d334:	2b04      	cmp	r3, #4
 800d336:	d828      	bhi.n	800d38a <USBH_UserProcess+0x66>
 800d338:	a201      	add	r2, pc, #4	; (adr r2, 800d340 <USBH_UserProcess+0x1c>)
 800d33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33e:	bf00      	nop
 800d340:	0800d38b 	.word	0x0800d38b
 800d344:	0800d367 	.word	0x0800d367
 800d348:	0800d38b 	.word	0x0800d38b
 800d34c:	0800d383 	.word	0x0800d383
 800d350:	0800d355 	.word	0x0800d355
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d354:	4b0f      	ldr	r3, [pc, #60]	; (800d394 <USBH_UserProcess+0x70>)
 800d356:	2203      	movs	r2, #3
 800d358:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 800d35a:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <USBH_UserProcess+0x74>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 800d360:	f7f4 f88e 	bl	8001480 <Unmount_USB>
  break;
 800d364:	e012      	b.n	800d38c <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d366:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <USBH_UserProcess+0x70>)
 800d368:	2202      	movs	r2, #2
 800d36a:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 800d36c:	f7f4 f874 	bl	8001458 <Mount_USB>
	Check_USB_Details();
 800d370:	f7f4 f926 	bl	80015c0 <Check_USB_Details>
	Scan_USB("/");
 800d374:	4809      	ldr	r0, [pc, #36]	; (800d39c <USBH_UserProcess+0x78>)
 800d376:	f7f4 f895 	bl	80014a4 <Scan_USB>

  usb_good = 1;
 800d37a:	4b07      	ldr	r3, [pc, #28]	; (800d398 <USBH_UserProcess+0x74>)
 800d37c:	2201      	movs	r2, #1
 800d37e:	601a      	str	r2, [r3, #0]

  break;
 800d380:	e004      	b.n	800d38c <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d382:	4b04      	ldr	r3, [pc, #16]	; (800d394 <USBH_UserProcess+0x70>)
 800d384:	2201      	movs	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]
  break;
 800d388:	e000      	b.n	800d38c <USBH_UserProcess+0x68>

  default:
  break;
 800d38a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20000484 	.word	0x20000484
 800d398:	20000488 	.word	0x20000488
 800d39c:	08012270 	.word	0x08012270

0800d3a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b08a      	sub	sp, #40	; 0x28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3a8:	f107 0314 	add.w	r3, r7, #20
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	605a      	str	r2, [r3, #4]
 800d3b2:	609a      	str	r2, [r3, #8]
 800d3b4:	60da      	str	r2, [r3, #12]
 800d3b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3c0:	d147      	bne.n	800d452 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	613b      	str	r3, [r7, #16]
 800d3c6:	4b25      	ldr	r3, [pc, #148]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ca:	4a24      	ldr	r2, [pc, #144]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d3cc:	f043 0301 	orr.w	r3, r3, #1
 800d3d0:	6313      	str	r3, [r2, #48]	; 0x30
 800d3d2:	4b22      	ldr	r3, [pc, #136]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	613b      	str	r3, [r7, #16]
 800d3dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d3de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	481b      	ldr	r0, [pc, #108]	; (800d460 <HAL_HCD_MspInit+0xc0>)
 800d3f4:	f7f5 fcca 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d3f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d3fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3fe:	2302      	movs	r3, #2
 800d400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d402:	2300      	movs	r3, #0
 800d404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d406:	2303      	movs	r3, #3
 800d408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d40a:	230a      	movs	r3, #10
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d40e:	f107 0314 	add.w	r3, r7, #20
 800d412:	4619      	mov	r1, r3
 800d414:	4812      	ldr	r0, [pc, #72]	; (800d460 <HAL_HCD_MspInit+0xc0>)
 800d416:	f7f5 fcb9 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41e:	4a0f      	ldr	r2, [pc, #60]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d424:	6353      	str	r3, [r2, #52]	; 0x34
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42e:	4a0b      	ldr	r2, [pc, #44]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d434:	6453      	str	r3, [r2, #68]	; 0x44
 800d436:	4b09      	ldr	r3, [pc, #36]	; (800d45c <HAL_HCD_MspInit+0xbc>)
 800d438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d43a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d442:	2200      	movs	r2, #0
 800d444:	2100      	movs	r1, #0
 800d446:	2043      	movs	r0, #67	; 0x43
 800d448:	f7f5 fc69 	bl	8002d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d44c:	2043      	movs	r0, #67	; 0x43
 800d44e:	f7f5 fc82 	bl	8002d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d452:	bf00      	nop
 800d454:	3728      	adds	r7, #40	; 0x28
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	40023800 	.word	0x40023800
 800d460:	40020000 	.word	0x40020000

0800d464 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d472:	4618      	mov	r0, r3
 800d474:	f7fc fa66 	bl	8009944 <USBH_LL_IncTimer>
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fc fa9c 	bl	80099cc <USBH_LL_Connect>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc faa4 	bl	80099f8 <USBH_LL_Disconnect>
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	70fb      	strb	r3, [r7, #3]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bc80      	pop	{r7}
 800d4d0:	4770      	bx	lr

0800d4d2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fc fa59 	bl	8009998 <USBH_LL_PortEnabled>
}
 800d4e6:	bf00      	nop
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fc fa58 	bl	80099b2 <USBH_LL_PortDisabled>
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
	...

0800d50c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d12a      	bne.n	800d574 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d51e:	4a18      	ldr	r2, [pc, #96]	; (800d580 <USBH_LL_Init+0x74>)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a15      	ldr	r2, [pc, #84]	; (800d580 <USBH_LL_Init+0x74>)
 800d52a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d52e:	4b14      	ldr	r3, [pc, #80]	; (800d580 <USBH_LL_Init+0x74>)
 800d530:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d534:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d536:	4b12      	ldr	r3, [pc, #72]	; (800d580 <USBH_LL_Init+0x74>)
 800d538:	2208      	movs	r2, #8
 800d53a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d53c:	4b10      	ldr	r3, [pc, #64]	; (800d580 <USBH_LL_Init+0x74>)
 800d53e:	2201      	movs	r2, #1
 800d540:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d542:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <USBH_LL_Init+0x74>)
 800d544:	2200      	movs	r2, #0
 800d546:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d548:	4b0d      	ldr	r3, [pc, #52]	; (800d580 <USBH_LL_Init+0x74>)
 800d54a:	2202      	movs	r2, #2
 800d54c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d54e:	4b0c      	ldr	r3, [pc, #48]	; (800d580 <USBH_LL_Init+0x74>)
 800d550:	2200      	movs	r2, #0
 800d552:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d554:	480a      	ldr	r0, [pc, #40]	; (800d580 <USBH_LL_Init+0x74>)
 800d556:	f7f5 fdcf 	bl	80030f8 <HAL_HCD_Init>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d560:	f7f4 fd8a 	bl	8002078 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d564:	4806      	ldr	r0, [pc, #24]	; (800d580 <USBH_LL_Init+0x74>)
 800d566:	f7f6 f9a9 	bl	80038bc <HAL_HCD_GetCurrentFrame>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4619      	mov	r1, r3
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f7fc f9da 	bl	8009928 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20002aec 	.word	0x20002aec

0800d584 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d590:	2300      	movs	r3, #0
 800d592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f6 f91a 	bl	80037d4 <HAL_HCD_Start>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 f98a 	bl	800d8c0 <USBH_Get_USB_Status>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f6 f922 	bl	800381a <HAL_HCD_Stop>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 f96f 	bl	800d8c0 <USBH_Get_USB_Status>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d602:	4618      	mov	r0, r3
 800d604:	f7f6 f968 	bl	80038d8 <HAL_HCD_GetCurrentSpeed>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d00c      	beq.n	800d628 <USBH_LL_GetSpeed+0x38>
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d80d      	bhi.n	800d62e <USBH_LL_GetSpeed+0x3e>
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <USBH_LL_GetSpeed+0x2c>
 800d616:	2b01      	cmp	r3, #1
 800d618:	d003      	beq.n	800d622 <USBH_LL_GetSpeed+0x32>
 800d61a:	e008      	b.n	800d62e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
    break;
 800d620:	e008      	b.n	800d634 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d622:	2301      	movs	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]
    break;
 800d626:	e005      	b.n	800d634 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d628:	2302      	movs	r3, #2
 800d62a:	73fb      	strb	r3, [r7, #15]
    break;
 800d62c:	e002      	b.n	800d634 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d62e:	2301      	movs	r3, #1
 800d630:	73fb      	strb	r3, [r7, #15]
    break;
 800d632:	bf00      	nop
  }
  return  speed;
 800d634:	7bfb      	ldrb	r3, [r7, #15]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b084      	sub	sp, #16
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d654:	4618      	mov	r0, r3
 800d656:	f7f6 f8fd 	bl	8003854 <HAL_HCD_ResetPort>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 f92d 	bl	800d8c0 <USBH_Get_USB_Status>
 800d666:	4603      	mov	r3, r0
 800d668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d686:	78fa      	ldrb	r2, [r7, #3]
 800d688:	4611      	mov	r1, r2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7f6 f903 	bl	8003896 <HAL_HCD_HC_GetXferCount>
 800d690:	4603      	mov	r3, r0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d69a:	b590      	push	{r4, r7, lr}
 800d69c:	b089      	sub	sp, #36	; 0x24
 800d69e:	af04      	add	r7, sp, #16
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	70fb      	strb	r3, [r7, #3]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70bb      	strb	r3, [r7, #2]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800d6c2:	787c      	ldrb	r4, [r7, #1]
 800d6c4:	78ba      	ldrb	r2, [r7, #2]
 800d6c6:	78f9      	ldrb	r1, [r7, #3]
 800d6c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6ca:	9302      	str	r3, [sp, #8]
 800d6cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	4623      	mov	r3, r4
 800d6da:	f7f5 fd6f 	bl	80031bc <HAL_HCD_HC_Init>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 f8eb 	bl	800d8c0 <USBH_Get_USB_Status>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd90      	pop	{r4, r7, pc}

0800d6f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d712:	78fa      	ldrb	r2, [r7, #3]
 800d714:	4611      	mov	r1, r2
 800d716:	4618      	mov	r0, r3
 800d718:	f7f5 fddf 	bl	80032da <HAL_HCD_HC_Halt>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f8cc 	bl	800d8c0 <USBH_Get_USB_Status>
 800d728:	4603      	mov	r3, r0
 800d72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d736:	b590      	push	{r4, r7, lr}
 800d738:	b089      	sub	sp, #36	; 0x24
 800d73a:	af04      	add	r7, sp, #16
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	4608      	mov	r0, r1
 800d740:	4611      	mov	r1, r2
 800d742:	461a      	mov	r2, r3
 800d744:	4603      	mov	r3, r0
 800d746:	70fb      	strb	r3, [r7, #3]
 800d748:	460b      	mov	r3, r1
 800d74a:	70bb      	strb	r3, [r7, #2]
 800d74c:	4613      	mov	r3, r2
 800d74e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800d75e:	787c      	ldrb	r4, [r7, #1]
 800d760:	78ba      	ldrb	r2, [r7, #2]
 800d762:	78f9      	ldrb	r1, [r7, #3]
 800d764:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d768:	9303      	str	r3, [sp, #12]
 800d76a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d76c:	9302      	str	r3, [sp, #8]
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	4623      	mov	r3, r4
 800d77a:	f7f5 fdd1 	bl	8003320 <HAL_HCD_HC_SubmitRequest>
 800d77e:	4603      	mov	r3, r0
 800d780:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	4618      	mov	r0, r3
 800d786:	f000 f89b 	bl	800d8c0 <USBH_Get_USB_Status>
 800d78a:	4603      	mov	r3, r0
 800d78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d78e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}

0800d798 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d7aa:	78fa      	ldrb	r2, [r7, #3]
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7f6 f85e 	bl	8003870 <HAL_HCD_HC_GetURBState>
 800d7b4:	4603      	mov	r3, r0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d103      	bne.n	800d7dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 f89e 	bl	800d918 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d7dc:	20c8      	movs	r0, #200	; 0xc8
 800d7de:	f7f4 ff39 	bl	8002654 <HAL_Delay>
  return USBH_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	70fb      	strb	r3, [r7, #3]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d802:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	212c      	movs	r1, #44	; 0x2c
 800d80a:	fb01 f303 	mul.w	r3, r1, r3
 800d80e:	4413      	add	r3, r2
 800d810:	333b      	adds	r3, #59	; 0x3b
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d009      	beq.n	800d82c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	212c      	movs	r1, #44	; 0x2c
 800d81e:	fb01 f303 	mul.w	r3, r1, r3
 800d822:	4413      	add	r3, r2
 800d824:	3354      	adds	r3, #84	; 0x54
 800d826:	78ba      	ldrb	r2, [r7, #2]
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	e008      	b.n	800d83e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	212c      	movs	r1, #44	; 0x2c
 800d832:	fb01 f303 	mul.w	r3, r1, r3
 800d836:	4413      	add	r3, r2
 800d838:	3355      	adds	r3, #85	; 0x55
 800d83a:	78ba      	ldrb	r2, [r7, #2]
 800d83c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	bc80      	pop	{r7}
 800d848:	4770      	bx	lr

0800d84a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b085      	sub	sp, #20
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	460b      	mov	r3, r1
 800d854:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d860:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	212c      	movs	r1, #44	; 0x2c
 800d868:	fb01 f303 	mul.w	r3, r1, r3
 800d86c:	4413      	add	r3, r2
 800d86e:	333b      	adds	r3, #59	; 0x3b
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d009      	beq.n	800d88a <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	212c      	movs	r1, #44	; 0x2c
 800d87c:	fb01 f303 	mul.w	r3, r1, r3
 800d880:	4413      	add	r3, r2
 800d882:	3354      	adds	r3, #84	; 0x54
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	73fb      	strb	r3, [r7, #15]
 800d888:	e008      	b.n	800d89c <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d88a:	78fb      	ldrb	r3, [r7, #3]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	212c      	movs	r1, #44	; 0x2c
 800d890:	fb01 f303 	mul.w	r3, r1, r3
 800d894:	4413      	add	r3, r2
 800d896:	3355      	adds	r3, #85	; 0x55
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bc80      	pop	{r7}
 800d8a6:	4770      	bx	lr

0800d8a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7f4 fecf 	bl	8002654 <HAL_Delay>
}
 800d8b6:	bf00      	nop
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8ce:	79fb      	ldrb	r3, [r7, #7]
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d817      	bhi.n	800d904 <USBH_Get_USB_Status+0x44>
 800d8d4:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <USBH_Get_USB_Status+0x1c>)
 800d8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8da:	bf00      	nop
 800d8dc:	0800d8ed 	.word	0x0800d8ed
 800d8e0:	0800d8f3 	.word	0x0800d8f3
 800d8e4:	0800d8f9 	.word	0x0800d8f9
 800d8e8:	0800d8ff 	.word	0x0800d8ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f0:	e00b      	b.n	800d90a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f6:	e008      	b.n	800d90a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d8fc:	e005      	b.n	800d90a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d8fe:	2302      	movs	r3, #2
 800d900:	73fb      	strb	r3, [r7, #15]
    break;
 800d902:	e002      	b.n	800d90a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d904:	2302      	movs	r3, #2
 800d906:	73fb      	strb	r3, [r7, #15]
    break;
 800d908:	bf00      	nop
  }
  return usb_status;
 800d90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	bc80      	pop	{r7}
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop

0800d918 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d926:	79fb      	ldrb	r3, [r7, #7]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
 800d930:	e001      	b.n	800d936 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d932:	2301      	movs	r3, #1
 800d934:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	461a      	mov	r2, r3
 800d93a:	2104      	movs	r1, #4
 800d93c:	4803      	ldr	r0, [pc, #12]	; (800d94c <MX_DriverVbusFS+0x34>)
 800d93e:	f7f5 fbc3 	bl	80030c8 <HAL_GPIO_WritePin>
}
 800d942:	bf00      	nop
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	40020800 	.word	0x40020800

0800d950 <__errno>:
 800d950:	4b01      	ldr	r3, [pc, #4]	; (800d958 <__errno+0x8>)
 800d952:	6818      	ldr	r0, [r3, #0]
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	2000003c 	.word	0x2000003c

0800d95c <__libc_init_array>:
 800d95c:	b570      	push	{r4, r5, r6, lr}
 800d95e:	2600      	movs	r6, #0
 800d960:	4d0c      	ldr	r5, [pc, #48]	; (800d994 <__libc_init_array+0x38>)
 800d962:	4c0d      	ldr	r4, [pc, #52]	; (800d998 <__libc_init_array+0x3c>)
 800d964:	1b64      	subs	r4, r4, r5
 800d966:	10a4      	asrs	r4, r4, #2
 800d968:	42a6      	cmp	r6, r4
 800d96a:	d109      	bne.n	800d980 <__libc_init_array+0x24>
 800d96c:	f004 fc32 	bl	80121d4 <_init>
 800d970:	2600      	movs	r6, #0
 800d972:	4d0a      	ldr	r5, [pc, #40]	; (800d99c <__libc_init_array+0x40>)
 800d974:	4c0a      	ldr	r4, [pc, #40]	; (800d9a0 <__libc_init_array+0x44>)
 800d976:	1b64      	subs	r4, r4, r5
 800d978:	10a4      	asrs	r4, r4, #2
 800d97a:	42a6      	cmp	r6, r4
 800d97c:	d105      	bne.n	800d98a <__libc_init_array+0x2e>
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
 800d980:	f855 3b04 	ldr.w	r3, [r5], #4
 800d984:	4798      	blx	r3
 800d986:	3601      	adds	r6, #1
 800d988:	e7ee      	b.n	800d968 <__libc_init_array+0xc>
 800d98a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d98e:	4798      	blx	r3
 800d990:	3601      	adds	r6, #1
 800d992:	e7f2      	b.n	800d97a <__libc_init_array+0x1e>
 800d994:	08012ca4 	.word	0x08012ca4
 800d998:	08012ca4 	.word	0x08012ca4
 800d99c:	08012ca4 	.word	0x08012ca4
 800d9a0:	08012ca8 	.word	0x08012ca8

0800d9a4 <malloc>:
 800d9a4:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <malloc+0xc>)
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	6818      	ldr	r0, [r3, #0]
 800d9aa:	f000 b86d 	b.w	800da88 <_malloc_r>
 800d9ae:	bf00      	nop
 800d9b0:	2000003c 	.word	0x2000003c

0800d9b4 <free>:
 800d9b4:	4b02      	ldr	r3, [pc, #8]	; (800d9c0 <free+0xc>)
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f000 b819 	b.w	800d9f0 <_free_r>
 800d9be:	bf00      	nop
 800d9c0:	2000003c 	.word	0x2000003c

0800d9c4 <memcpy>:
 800d9c4:	440a      	add	r2, r1
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9cc:	d100      	bne.n	800d9d0 <memcpy+0xc>
 800d9ce:	4770      	bx	lr
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9d6:	4291      	cmp	r1, r2
 800d9d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9dc:	d1f9      	bne.n	800d9d2 <memcpy+0xe>
 800d9de:	bd10      	pop	{r4, pc}

0800d9e0 <memset>:
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	4402      	add	r2, r0
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d100      	bne.n	800d9ea <memset+0xa>
 800d9e8:	4770      	bx	lr
 800d9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d9ee:	e7f9      	b.n	800d9e4 <memset+0x4>

0800d9f0 <_free_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	d043      	beq.n	800da80 <_free_r+0x90>
 800d9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9fc:	1f0c      	subs	r4, r1, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	bfb8      	it	lt
 800da02:	18e4      	addlt	r4, r4, r3
 800da04:	f002 ffec 	bl	80109e0 <__malloc_lock>
 800da08:	4a1e      	ldr	r2, [pc, #120]	; (800da84 <_free_r+0x94>)
 800da0a:	6813      	ldr	r3, [r2, #0]
 800da0c:	4610      	mov	r0, r2
 800da0e:	b933      	cbnz	r3, 800da1e <_free_r+0x2e>
 800da10:	6063      	str	r3, [r4, #4]
 800da12:	6014      	str	r4, [r2, #0]
 800da14:	4628      	mov	r0, r5
 800da16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da1a:	f002 bfe7 	b.w	80109ec <__malloc_unlock>
 800da1e:	42a3      	cmp	r3, r4
 800da20:	d90a      	bls.n	800da38 <_free_r+0x48>
 800da22:	6821      	ldr	r1, [r4, #0]
 800da24:	1862      	adds	r2, r4, r1
 800da26:	4293      	cmp	r3, r2
 800da28:	bf01      	itttt	eq
 800da2a:	681a      	ldreq	r2, [r3, #0]
 800da2c:	685b      	ldreq	r3, [r3, #4]
 800da2e:	1852      	addeq	r2, r2, r1
 800da30:	6022      	streq	r2, [r4, #0]
 800da32:	6063      	str	r3, [r4, #4]
 800da34:	6004      	str	r4, [r0, #0]
 800da36:	e7ed      	b.n	800da14 <_free_r+0x24>
 800da38:	461a      	mov	r2, r3
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	b10b      	cbz	r3, 800da42 <_free_r+0x52>
 800da3e:	42a3      	cmp	r3, r4
 800da40:	d9fa      	bls.n	800da38 <_free_r+0x48>
 800da42:	6811      	ldr	r1, [r2, #0]
 800da44:	1850      	adds	r0, r2, r1
 800da46:	42a0      	cmp	r0, r4
 800da48:	d10b      	bne.n	800da62 <_free_r+0x72>
 800da4a:	6820      	ldr	r0, [r4, #0]
 800da4c:	4401      	add	r1, r0
 800da4e:	1850      	adds	r0, r2, r1
 800da50:	4283      	cmp	r3, r0
 800da52:	6011      	str	r1, [r2, #0]
 800da54:	d1de      	bne.n	800da14 <_free_r+0x24>
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	4401      	add	r1, r0
 800da5c:	6011      	str	r1, [r2, #0]
 800da5e:	6053      	str	r3, [r2, #4]
 800da60:	e7d8      	b.n	800da14 <_free_r+0x24>
 800da62:	d902      	bls.n	800da6a <_free_r+0x7a>
 800da64:	230c      	movs	r3, #12
 800da66:	602b      	str	r3, [r5, #0]
 800da68:	e7d4      	b.n	800da14 <_free_r+0x24>
 800da6a:	6820      	ldr	r0, [r4, #0]
 800da6c:	1821      	adds	r1, r4, r0
 800da6e:	428b      	cmp	r3, r1
 800da70:	bf01      	itttt	eq
 800da72:	6819      	ldreq	r1, [r3, #0]
 800da74:	685b      	ldreq	r3, [r3, #4]
 800da76:	1809      	addeq	r1, r1, r0
 800da78:	6021      	streq	r1, [r4, #0]
 800da7a:	6063      	str	r3, [r4, #4]
 800da7c:	6054      	str	r4, [r2, #4]
 800da7e:	e7c9      	b.n	800da14 <_free_r+0x24>
 800da80:	bd38      	pop	{r3, r4, r5, pc}
 800da82:	bf00      	nop
 800da84:	2000048c 	.word	0x2000048c

0800da88 <_malloc_r>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	1ccd      	adds	r5, r1, #3
 800da8c:	f025 0503 	bic.w	r5, r5, #3
 800da90:	3508      	adds	r5, #8
 800da92:	2d0c      	cmp	r5, #12
 800da94:	bf38      	it	cc
 800da96:	250c      	movcc	r5, #12
 800da98:	2d00      	cmp	r5, #0
 800da9a:	4606      	mov	r6, r0
 800da9c:	db01      	blt.n	800daa2 <_malloc_r+0x1a>
 800da9e:	42a9      	cmp	r1, r5
 800daa0:	d903      	bls.n	800daaa <_malloc_r+0x22>
 800daa2:	230c      	movs	r3, #12
 800daa4:	6033      	str	r3, [r6, #0]
 800daa6:	2000      	movs	r0, #0
 800daa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daaa:	f002 ff99 	bl	80109e0 <__malloc_lock>
 800daae:	4921      	ldr	r1, [pc, #132]	; (800db34 <_malloc_r+0xac>)
 800dab0:	680a      	ldr	r2, [r1, #0]
 800dab2:	4614      	mov	r4, r2
 800dab4:	b99c      	cbnz	r4, 800dade <_malloc_r+0x56>
 800dab6:	4f20      	ldr	r7, [pc, #128]	; (800db38 <_malloc_r+0xb0>)
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	b923      	cbnz	r3, 800dac6 <_malloc_r+0x3e>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4630      	mov	r0, r6
 800dac0:	f000 feae 	bl	800e820 <_sbrk_r>
 800dac4:	6038      	str	r0, [r7, #0]
 800dac6:	4629      	mov	r1, r5
 800dac8:	4630      	mov	r0, r6
 800daca:	f000 fea9 	bl	800e820 <_sbrk_r>
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	d123      	bne.n	800db1a <_malloc_r+0x92>
 800dad2:	230c      	movs	r3, #12
 800dad4:	4630      	mov	r0, r6
 800dad6:	6033      	str	r3, [r6, #0]
 800dad8:	f002 ff88 	bl	80109ec <__malloc_unlock>
 800dadc:	e7e3      	b.n	800daa6 <_malloc_r+0x1e>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	1b5b      	subs	r3, r3, r5
 800dae2:	d417      	bmi.n	800db14 <_malloc_r+0x8c>
 800dae4:	2b0b      	cmp	r3, #11
 800dae6:	d903      	bls.n	800daf0 <_malloc_r+0x68>
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	441c      	add	r4, r3
 800daec:	6025      	str	r5, [r4, #0]
 800daee:	e004      	b.n	800dafa <_malloc_r+0x72>
 800daf0:	6863      	ldr	r3, [r4, #4]
 800daf2:	42a2      	cmp	r2, r4
 800daf4:	bf0c      	ite	eq
 800daf6:	600b      	streq	r3, [r1, #0]
 800daf8:	6053      	strne	r3, [r2, #4]
 800dafa:	4630      	mov	r0, r6
 800dafc:	f002 ff76 	bl	80109ec <__malloc_unlock>
 800db00:	f104 000b 	add.w	r0, r4, #11
 800db04:	1d23      	adds	r3, r4, #4
 800db06:	f020 0007 	bic.w	r0, r0, #7
 800db0a:	1ac2      	subs	r2, r0, r3
 800db0c:	d0cc      	beq.n	800daa8 <_malloc_r+0x20>
 800db0e:	1a1b      	subs	r3, r3, r0
 800db10:	50a3      	str	r3, [r4, r2]
 800db12:	e7c9      	b.n	800daa8 <_malloc_r+0x20>
 800db14:	4622      	mov	r2, r4
 800db16:	6864      	ldr	r4, [r4, #4]
 800db18:	e7cc      	b.n	800dab4 <_malloc_r+0x2c>
 800db1a:	1cc4      	adds	r4, r0, #3
 800db1c:	f024 0403 	bic.w	r4, r4, #3
 800db20:	42a0      	cmp	r0, r4
 800db22:	d0e3      	beq.n	800daec <_malloc_r+0x64>
 800db24:	1a21      	subs	r1, r4, r0
 800db26:	4630      	mov	r0, r6
 800db28:	f000 fe7a 	bl	800e820 <_sbrk_r>
 800db2c:	3001      	adds	r0, #1
 800db2e:	d1dd      	bne.n	800daec <_malloc_r+0x64>
 800db30:	e7cf      	b.n	800dad2 <_malloc_r+0x4a>
 800db32:	bf00      	nop
 800db34:	2000048c 	.word	0x2000048c
 800db38:	20000490 	.word	0x20000490

0800db3c <__cvt>:
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db42:	461f      	mov	r7, r3
 800db44:	bfbb      	ittet	lt
 800db46:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800db4a:	461f      	movlt	r7, r3
 800db4c:	2300      	movge	r3, #0
 800db4e:	232d      	movlt	r3, #45	; 0x2d
 800db50:	b088      	sub	sp, #32
 800db52:	4614      	mov	r4, r2
 800db54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800db58:	7013      	strb	r3, [r2, #0]
 800db5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800db60:	f023 0820 	bic.w	r8, r3, #32
 800db64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db68:	d005      	beq.n	800db76 <__cvt+0x3a>
 800db6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db6e:	d100      	bne.n	800db72 <__cvt+0x36>
 800db70:	3501      	adds	r5, #1
 800db72:	2302      	movs	r3, #2
 800db74:	e000      	b.n	800db78 <__cvt+0x3c>
 800db76:	2303      	movs	r3, #3
 800db78:	aa07      	add	r2, sp, #28
 800db7a:	9204      	str	r2, [sp, #16]
 800db7c:	aa06      	add	r2, sp, #24
 800db7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800db82:	e9cd 3500 	strd	r3, r5, [sp]
 800db86:	4622      	mov	r2, r4
 800db88:	463b      	mov	r3, r7
 800db8a:	f001 fdb1 	bl	800f6f0 <_dtoa_r>
 800db8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db92:	4606      	mov	r6, r0
 800db94:	d102      	bne.n	800db9c <__cvt+0x60>
 800db96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db98:	07db      	lsls	r3, r3, #31
 800db9a:	d522      	bpl.n	800dbe2 <__cvt+0xa6>
 800db9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dba0:	eb06 0905 	add.w	r9, r6, r5
 800dba4:	d110      	bne.n	800dbc8 <__cvt+0x8c>
 800dba6:	7833      	ldrb	r3, [r6, #0]
 800dba8:	2b30      	cmp	r3, #48	; 0x30
 800dbaa:	d10a      	bne.n	800dbc2 <__cvt+0x86>
 800dbac:	2200      	movs	r2, #0
 800dbae:	2300      	movs	r3, #0
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	f7f2 ff3e 	bl	8000a34 <__aeabi_dcmpeq>
 800dbb8:	b918      	cbnz	r0, 800dbc2 <__cvt+0x86>
 800dbba:	f1c5 0501 	rsb	r5, r5, #1
 800dbbe:	f8ca 5000 	str.w	r5, [sl]
 800dbc2:	f8da 3000 	ldr.w	r3, [sl]
 800dbc6:	4499      	add	r9, r3
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4639      	mov	r1, r7
 800dbd0:	f7f2 ff30 	bl	8000a34 <__aeabi_dcmpeq>
 800dbd4:	b108      	cbz	r0, 800dbda <__cvt+0x9e>
 800dbd6:	f8cd 901c 	str.w	r9, [sp, #28]
 800dbda:	2230      	movs	r2, #48	; 0x30
 800dbdc:	9b07      	ldr	r3, [sp, #28]
 800dbde:	454b      	cmp	r3, r9
 800dbe0:	d307      	bcc.n	800dbf2 <__cvt+0xb6>
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	9b07      	ldr	r3, [sp, #28]
 800dbe6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dbe8:	1b9b      	subs	r3, r3, r6
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	b008      	add	sp, #32
 800dbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf2:	1c59      	adds	r1, r3, #1
 800dbf4:	9107      	str	r1, [sp, #28]
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	e7f0      	b.n	800dbdc <__cvt+0xa0>

0800dbfa <__exponent>:
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbfe:	2900      	cmp	r1, #0
 800dc00:	f803 2b02 	strb.w	r2, [r3], #2
 800dc04:	bfb6      	itet	lt
 800dc06:	222d      	movlt	r2, #45	; 0x2d
 800dc08:	222b      	movge	r2, #43	; 0x2b
 800dc0a:	4249      	neglt	r1, r1
 800dc0c:	2909      	cmp	r1, #9
 800dc0e:	7042      	strb	r2, [r0, #1]
 800dc10:	dd2b      	ble.n	800dc6a <__exponent+0x70>
 800dc12:	f10d 0407 	add.w	r4, sp, #7
 800dc16:	46a4      	mov	ip, r4
 800dc18:	270a      	movs	r7, #10
 800dc1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800dc1e:	460a      	mov	r2, r1
 800dc20:	46a6      	mov	lr, r4
 800dc22:	fb07 1516 	mls	r5, r7, r6, r1
 800dc26:	2a63      	cmp	r2, #99	; 0x63
 800dc28:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc36:	dcf0      	bgt.n	800dc1a <__exponent+0x20>
 800dc38:	3130      	adds	r1, #48	; 0x30
 800dc3a:	f1ae 0502 	sub.w	r5, lr, #2
 800dc3e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dc42:	4629      	mov	r1, r5
 800dc44:	1c44      	adds	r4, r0, #1
 800dc46:	4561      	cmp	r1, ip
 800dc48:	d30a      	bcc.n	800dc60 <__exponent+0x66>
 800dc4a:	f10d 0209 	add.w	r2, sp, #9
 800dc4e:	eba2 020e 	sub.w	r2, r2, lr
 800dc52:	4565      	cmp	r5, ip
 800dc54:	bf88      	it	hi
 800dc56:	2200      	movhi	r2, #0
 800dc58:	4413      	add	r3, r2
 800dc5a:	1a18      	subs	r0, r3, r0
 800dc5c:	b003      	add	sp, #12
 800dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc60:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc64:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc68:	e7ed      	b.n	800dc46 <__exponent+0x4c>
 800dc6a:	2330      	movs	r3, #48	; 0x30
 800dc6c:	3130      	adds	r1, #48	; 0x30
 800dc6e:	7083      	strb	r3, [r0, #2]
 800dc70:	70c1      	strb	r1, [r0, #3]
 800dc72:	1d03      	adds	r3, r0, #4
 800dc74:	e7f1      	b.n	800dc5a <__exponent+0x60>
	...

0800dc78 <_printf_float>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	b091      	sub	sp, #68	; 0x44
 800dc7e:	460c      	mov	r4, r1
 800dc80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dc84:	4616      	mov	r6, r2
 800dc86:	461f      	mov	r7, r3
 800dc88:	4605      	mov	r5, r0
 800dc8a:	f002 fe85 	bl	8010998 <_localeconv_r>
 800dc8e:	6803      	ldr	r3, [r0, #0]
 800dc90:	4618      	mov	r0, r3
 800dc92:	9309      	str	r3, [sp, #36]	; 0x24
 800dc94:	f7f2 faa2 	bl	80001dc <strlen>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dca0:	900a      	str	r0, [sp, #40]	; 0x28
 800dca2:	3307      	adds	r3, #7
 800dca4:	f023 0307 	bic.w	r3, r3, #7
 800dca8:	f103 0208 	add.w	r2, r3, #8
 800dcac:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dcb0:	f8d4 b000 	ldr.w	fp, [r4]
 800dcb4:	f8c8 2000 	str.w	r2, [r8]
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dcc0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dcc4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dcc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcca:	f04f 32ff 	mov.w	r2, #4294967295
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4b9c      	ldr	r3, [pc, #624]	; (800df44 <_printf_float+0x2cc>)
 800dcd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd4:	f7f2 fee0 	bl	8000a98 <__aeabi_dcmpun>
 800dcd8:	bb70      	cbnz	r0, 800dd38 <_printf_float+0xc0>
 800dcda:	f04f 32ff 	mov.w	r2, #4294967295
 800dcde:	4640      	mov	r0, r8
 800dce0:	4b98      	ldr	r3, [pc, #608]	; (800df44 <_printf_float+0x2cc>)
 800dce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dce4:	f7f2 feba 	bl	8000a5c <__aeabi_dcmple>
 800dce8:	bb30      	cbnz	r0, 800dd38 <_printf_float+0xc0>
 800dcea:	2200      	movs	r2, #0
 800dcec:	2300      	movs	r3, #0
 800dcee:	4640      	mov	r0, r8
 800dcf0:	4651      	mov	r1, sl
 800dcf2:	f7f2 fea9 	bl	8000a48 <__aeabi_dcmplt>
 800dcf6:	b110      	cbz	r0, 800dcfe <_printf_float+0x86>
 800dcf8:	232d      	movs	r3, #45	; 0x2d
 800dcfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcfe:	4b92      	ldr	r3, [pc, #584]	; (800df48 <_printf_float+0x2d0>)
 800dd00:	4892      	ldr	r0, [pc, #584]	; (800df4c <_printf_float+0x2d4>)
 800dd02:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dd06:	bf94      	ite	ls
 800dd08:	4698      	movls	r8, r3
 800dd0a:	4680      	movhi	r8, r0
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	f04f 0a00 	mov.w	sl, #0
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	f02b 0304 	bic.w	r3, fp, #4
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	4633      	mov	r3, r6
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	9700      	str	r7, [sp, #0]
 800dd22:	aa0f      	add	r2, sp, #60	; 0x3c
 800dd24:	f000 f9d4 	bl	800e0d0 <_printf_common>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f040 8090 	bne.w	800de4e <_printf_float+0x1d6>
 800dd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd32:	b011      	add	sp, #68	; 0x44
 800dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd38:	4642      	mov	r2, r8
 800dd3a:	4653      	mov	r3, sl
 800dd3c:	4640      	mov	r0, r8
 800dd3e:	4651      	mov	r1, sl
 800dd40:	f7f2 feaa 	bl	8000a98 <__aeabi_dcmpun>
 800dd44:	b148      	cbz	r0, 800dd5a <_printf_float+0xe2>
 800dd46:	f1ba 0f00 	cmp.w	sl, #0
 800dd4a:	bfb8      	it	lt
 800dd4c:	232d      	movlt	r3, #45	; 0x2d
 800dd4e:	4880      	ldr	r0, [pc, #512]	; (800df50 <_printf_float+0x2d8>)
 800dd50:	bfb8      	it	lt
 800dd52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd56:	4b7f      	ldr	r3, [pc, #508]	; (800df54 <_printf_float+0x2dc>)
 800dd58:	e7d3      	b.n	800dd02 <_printf_float+0x8a>
 800dd5a:	6863      	ldr	r3, [r4, #4]
 800dd5c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	d142      	bne.n	800ddea <_printf_float+0x172>
 800dd64:	2306      	movs	r3, #6
 800dd66:	6063      	str	r3, [r4, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	9206      	str	r2, [sp, #24]
 800dd6c:	aa0e      	add	r2, sp, #56	; 0x38
 800dd6e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800dd72:	aa0d      	add	r2, sp, #52	; 0x34
 800dd74:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800dd78:	9203      	str	r2, [sp, #12]
 800dd7a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800dd7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	6863      	ldr	r3, [r4, #4]
 800dd86:	4642      	mov	r2, r8
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	4653      	mov	r3, sl
 800dd8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800dd90:	f7ff fed4 	bl	800db3c <__cvt>
 800dd94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd96:	4680      	mov	r8, r0
 800dd98:	2947      	cmp	r1, #71	; 0x47
 800dd9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dd9c:	d108      	bne.n	800ddb0 <_printf_float+0x138>
 800dd9e:	1cc8      	adds	r0, r1, #3
 800dda0:	db02      	blt.n	800dda8 <_printf_float+0x130>
 800dda2:	6863      	ldr	r3, [r4, #4]
 800dda4:	4299      	cmp	r1, r3
 800dda6:	dd40      	ble.n	800de2a <_printf_float+0x1b2>
 800dda8:	f1a9 0902 	sub.w	r9, r9, #2
 800ddac:	fa5f f989 	uxtb.w	r9, r9
 800ddb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ddb4:	d81f      	bhi.n	800ddf6 <_printf_float+0x17e>
 800ddb6:	464a      	mov	r2, r9
 800ddb8:	3901      	subs	r1, #1
 800ddba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ddbe:	910d      	str	r1, [sp, #52]	; 0x34
 800ddc0:	f7ff ff1b 	bl	800dbfa <__exponent>
 800ddc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	1813      	adds	r3, r2, r0
 800ddca:	2a01      	cmp	r2, #1
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	dc02      	bgt.n	800ddd6 <_printf_float+0x15e>
 800ddd0:	6822      	ldr	r2, [r4, #0]
 800ddd2:	07d2      	lsls	r2, r2, #31
 800ddd4:	d501      	bpl.n	800ddda <_printf_float+0x162>
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	6123      	str	r3, [r4, #16]
 800ddda:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d09b      	beq.n	800dd1a <_printf_float+0xa2>
 800dde2:	232d      	movs	r3, #45	; 0x2d
 800dde4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dde8:	e797      	b.n	800dd1a <_printf_float+0xa2>
 800ddea:	2947      	cmp	r1, #71	; 0x47
 800ddec:	d1bc      	bne.n	800dd68 <_printf_float+0xf0>
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1ba      	bne.n	800dd68 <_printf_float+0xf0>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e7b7      	b.n	800dd66 <_printf_float+0xee>
 800ddf6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ddfa:	d118      	bne.n	800de2e <_printf_float+0x1b6>
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	dd0b      	ble.n	800de1a <_printf_float+0x1a2>
 800de02:	6121      	str	r1, [r4, #16]
 800de04:	b913      	cbnz	r3, 800de0c <_printf_float+0x194>
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	07d0      	lsls	r0, r2, #31
 800de0a:	d502      	bpl.n	800de12 <_printf_float+0x19a>
 800de0c:	3301      	adds	r3, #1
 800de0e:	440b      	add	r3, r1
 800de10:	6123      	str	r3, [r4, #16]
 800de12:	f04f 0a00 	mov.w	sl, #0
 800de16:	65a1      	str	r1, [r4, #88]	; 0x58
 800de18:	e7df      	b.n	800ddda <_printf_float+0x162>
 800de1a:	b913      	cbnz	r3, 800de22 <_printf_float+0x1aa>
 800de1c:	6822      	ldr	r2, [r4, #0]
 800de1e:	07d2      	lsls	r2, r2, #31
 800de20:	d501      	bpl.n	800de26 <_printf_float+0x1ae>
 800de22:	3302      	adds	r3, #2
 800de24:	e7f4      	b.n	800de10 <_printf_float+0x198>
 800de26:	2301      	movs	r3, #1
 800de28:	e7f2      	b.n	800de10 <_printf_float+0x198>
 800de2a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800de2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de30:	4299      	cmp	r1, r3
 800de32:	db05      	blt.n	800de40 <_printf_float+0x1c8>
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	6121      	str	r1, [r4, #16]
 800de38:	07d8      	lsls	r0, r3, #31
 800de3a:	d5ea      	bpl.n	800de12 <_printf_float+0x19a>
 800de3c:	1c4b      	adds	r3, r1, #1
 800de3e:	e7e7      	b.n	800de10 <_printf_float+0x198>
 800de40:	2900      	cmp	r1, #0
 800de42:	bfcc      	ite	gt
 800de44:	2201      	movgt	r2, #1
 800de46:	f1c1 0202 	rsble	r2, r1, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	e7e0      	b.n	800de10 <_printf_float+0x198>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	055a      	lsls	r2, r3, #21
 800de52:	d407      	bmi.n	800de64 <_printf_float+0x1ec>
 800de54:	6923      	ldr	r3, [r4, #16]
 800de56:	4642      	mov	r2, r8
 800de58:	4631      	mov	r1, r6
 800de5a:	4628      	mov	r0, r5
 800de5c:	47b8      	blx	r7
 800de5e:	3001      	adds	r0, #1
 800de60:	d12b      	bne.n	800deba <_printf_float+0x242>
 800de62:	e764      	b.n	800dd2e <_printf_float+0xb6>
 800de64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800de68:	f240 80dd 	bls.w	800e026 <_printf_float+0x3ae>
 800de6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de70:	2200      	movs	r2, #0
 800de72:	2300      	movs	r3, #0
 800de74:	f7f2 fdde 	bl	8000a34 <__aeabi_dcmpeq>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d033      	beq.n	800dee4 <_printf_float+0x26c>
 800de7c:	2301      	movs	r3, #1
 800de7e:	4631      	mov	r1, r6
 800de80:	4628      	mov	r0, r5
 800de82:	4a35      	ldr	r2, [pc, #212]	; (800df58 <_printf_float+0x2e0>)
 800de84:	47b8      	blx	r7
 800de86:	3001      	adds	r0, #1
 800de88:	f43f af51 	beq.w	800dd2e <_printf_float+0xb6>
 800de8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800de90:	429a      	cmp	r2, r3
 800de92:	db02      	blt.n	800de9a <_printf_float+0x222>
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	07d8      	lsls	r0, r3, #31
 800de98:	d50f      	bpl.n	800deba <_printf_float+0x242>
 800de9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de9e:	4631      	mov	r1, r6
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b8      	blx	r7
 800dea4:	3001      	adds	r0, #1
 800dea6:	f43f af42 	beq.w	800dd2e <_printf_float+0xb6>
 800deaa:	f04f 0800 	mov.w	r8, #0
 800deae:	f104 091a 	add.w	r9, r4, #26
 800deb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800deb4:	3b01      	subs	r3, #1
 800deb6:	4543      	cmp	r3, r8
 800deb8:	dc09      	bgt.n	800dece <_printf_float+0x256>
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	079b      	lsls	r3, r3, #30
 800debe:	f100 8102 	bmi.w	800e0c6 <_printf_float+0x44e>
 800dec2:	68e0      	ldr	r0, [r4, #12]
 800dec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dec6:	4298      	cmp	r0, r3
 800dec8:	bfb8      	it	lt
 800deca:	4618      	movlt	r0, r3
 800decc:	e731      	b.n	800dd32 <_printf_float+0xba>
 800dece:	2301      	movs	r3, #1
 800ded0:	464a      	mov	r2, r9
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b8      	blx	r7
 800ded8:	3001      	adds	r0, #1
 800deda:	f43f af28 	beq.w	800dd2e <_printf_float+0xb6>
 800dede:	f108 0801 	add.w	r8, r8, #1
 800dee2:	e7e6      	b.n	800deb2 <_printf_float+0x23a>
 800dee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	dc38      	bgt.n	800df5c <_printf_float+0x2e4>
 800deea:	2301      	movs	r3, #1
 800deec:	4631      	mov	r1, r6
 800deee:	4628      	mov	r0, r5
 800def0:	4a19      	ldr	r2, [pc, #100]	; (800df58 <_printf_float+0x2e0>)
 800def2:	47b8      	blx	r7
 800def4:	3001      	adds	r0, #1
 800def6:	f43f af1a 	beq.w	800dd2e <_printf_float+0xb6>
 800defa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800defe:	4313      	orrs	r3, r2
 800df00:	d102      	bne.n	800df08 <_printf_float+0x290>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	07d9      	lsls	r1, r3, #31
 800df06:	d5d8      	bpl.n	800deba <_printf_float+0x242>
 800df08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df0c:	4631      	mov	r1, r6
 800df0e:	4628      	mov	r0, r5
 800df10:	47b8      	blx	r7
 800df12:	3001      	adds	r0, #1
 800df14:	f43f af0b 	beq.w	800dd2e <_printf_float+0xb6>
 800df18:	f04f 0900 	mov.w	r9, #0
 800df1c:	f104 0a1a 	add.w	sl, r4, #26
 800df20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df22:	425b      	negs	r3, r3
 800df24:	454b      	cmp	r3, r9
 800df26:	dc01      	bgt.n	800df2c <_printf_float+0x2b4>
 800df28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df2a:	e794      	b.n	800de56 <_printf_float+0x1de>
 800df2c:	2301      	movs	r3, #1
 800df2e:	4652      	mov	r2, sl
 800df30:	4631      	mov	r1, r6
 800df32:	4628      	mov	r0, r5
 800df34:	47b8      	blx	r7
 800df36:	3001      	adds	r0, #1
 800df38:	f43f aef9 	beq.w	800dd2e <_printf_float+0xb6>
 800df3c:	f109 0901 	add.w	r9, r9, #1
 800df40:	e7ee      	b.n	800df20 <_printf_float+0x2a8>
 800df42:	bf00      	nop
 800df44:	7fefffff 	.word	0x7fefffff
 800df48:	080127ec 	.word	0x080127ec
 800df4c:	080127f0 	.word	0x080127f0
 800df50:	080127f8 	.word	0x080127f8
 800df54:	080127f4 	.word	0x080127f4
 800df58:	080127fc 	.word	0x080127fc
 800df5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df60:	429a      	cmp	r2, r3
 800df62:	bfa8      	it	ge
 800df64:	461a      	movge	r2, r3
 800df66:	2a00      	cmp	r2, #0
 800df68:	4691      	mov	r9, r2
 800df6a:	dc37      	bgt.n	800dfdc <_printf_float+0x364>
 800df6c:	f04f 0b00 	mov.w	fp, #0
 800df70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df74:	f104 021a 	add.w	r2, r4, #26
 800df78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800df7c:	ebaa 0309 	sub.w	r3, sl, r9
 800df80:	455b      	cmp	r3, fp
 800df82:	dc33      	bgt.n	800dfec <_printf_float+0x374>
 800df84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800df88:	429a      	cmp	r2, r3
 800df8a:	db3b      	blt.n	800e004 <_printf_float+0x38c>
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	07da      	lsls	r2, r3, #31
 800df90:	d438      	bmi.n	800e004 <_printf_float+0x38c>
 800df92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df94:	990d      	ldr	r1, [sp, #52]	; 0x34
 800df96:	eba2 030a 	sub.w	r3, r2, sl
 800df9a:	eba2 0901 	sub.w	r9, r2, r1
 800df9e:	4599      	cmp	r9, r3
 800dfa0:	bfa8      	it	ge
 800dfa2:	4699      	movge	r9, r3
 800dfa4:	f1b9 0f00 	cmp.w	r9, #0
 800dfa8:	dc34      	bgt.n	800e014 <_printf_float+0x39c>
 800dfaa:	f04f 0800 	mov.w	r8, #0
 800dfae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfb2:	f104 0a1a 	add.w	sl, r4, #26
 800dfb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dfba:	1a9b      	subs	r3, r3, r2
 800dfbc:	eba3 0309 	sub.w	r3, r3, r9
 800dfc0:	4543      	cmp	r3, r8
 800dfc2:	f77f af7a 	ble.w	800deba <_printf_float+0x242>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	4652      	mov	r2, sl
 800dfca:	4631      	mov	r1, r6
 800dfcc:	4628      	mov	r0, r5
 800dfce:	47b8      	blx	r7
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	f43f aeac 	beq.w	800dd2e <_printf_float+0xb6>
 800dfd6:	f108 0801 	add.w	r8, r8, #1
 800dfda:	e7ec      	b.n	800dfb6 <_printf_float+0x33e>
 800dfdc:	4613      	mov	r3, r2
 800dfde:	4631      	mov	r1, r6
 800dfe0:	4642      	mov	r2, r8
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	47b8      	blx	r7
 800dfe6:	3001      	adds	r0, #1
 800dfe8:	d1c0      	bne.n	800df6c <_printf_float+0x2f4>
 800dfea:	e6a0      	b.n	800dd2e <_printf_float+0xb6>
 800dfec:	2301      	movs	r3, #1
 800dfee:	4631      	mov	r1, r6
 800dff0:	4628      	mov	r0, r5
 800dff2:	920b      	str	r2, [sp, #44]	; 0x2c
 800dff4:	47b8      	blx	r7
 800dff6:	3001      	adds	r0, #1
 800dff8:	f43f ae99 	beq.w	800dd2e <_printf_float+0xb6>
 800dffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dffe:	f10b 0b01 	add.w	fp, fp, #1
 800e002:	e7b9      	b.n	800df78 <_printf_float+0x300>
 800e004:	4631      	mov	r1, r6
 800e006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e00a:	4628      	mov	r0, r5
 800e00c:	47b8      	blx	r7
 800e00e:	3001      	adds	r0, #1
 800e010:	d1bf      	bne.n	800df92 <_printf_float+0x31a>
 800e012:	e68c      	b.n	800dd2e <_printf_float+0xb6>
 800e014:	464b      	mov	r3, r9
 800e016:	4631      	mov	r1, r6
 800e018:	4628      	mov	r0, r5
 800e01a:	eb08 020a 	add.w	r2, r8, sl
 800e01e:	47b8      	blx	r7
 800e020:	3001      	adds	r0, #1
 800e022:	d1c2      	bne.n	800dfaa <_printf_float+0x332>
 800e024:	e683      	b.n	800dd2e <_printf_float+0xb6>
 800e026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e028:	2a01      	cmp	r2, #1
 800e02a:	dc01      	bgt.n	800e030 <_printf_float+0x3b8>
 800e02c:	07db      	lsls	r3, r3, #31
 800e02e:	d537      	bpl.n	800e0a0 <_printf_float+0x428>
 800e030:	2301      	movs	r3, #1
 800e032:	4642      	mov	r2, r8
 800e034:	4631      	mov	r1, r6
 800e036:	4628      	mov	r0, r5
 800e038:	47b8      	blx	r7
 800e03a:	3001      	adds	r0, #1
 800e03c:	f43f ae77 	beq.w	800dd2e <_printf_float+0xb6>
 800e040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e044:	4631      	mov	r1, r6
 800e046:	4628      	mov	r0, r5
 800e048:	47b8      	blx	r7
 800e04a:	3001      	adds	r0, #1
 800e04c:	f43f ae6f 	beq.w	800dd2e <_printf_float+0xb6>
 800e050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	f7f2 fcec 	bl	8000a34 <__aeabi_dcmpeq>
 800e05c:	b9d8      	cbnz	r0, 800e096 <_printf_float+0x41e>
 800e05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e060:	f108 0201 	add.w	r2, r8, #1
 800e064:	3b01      	subs	r3, #1
 800e066:	4631      	mov	r1, r6
 800e068:	4628      	mov	r0, r5
 800e06a:	47b8      	blx	r7
 800e06c:	3001      	adds	r0, #1
 800e06e:	d10e      	bne.n	800e08e <_printf_float+0x416>
 800e070:	e65d      	b.n	800dd2e <_printf_float+0xb6>
 800e072:	2301      	movs	r3, #1
 800e074:	464a      	mov	r2, r9
 800e076:	4631      	mov	r1, r6
 800e078:	4628      	mov	r0, r5
 800e07a:	47b8      	blx	r7
 800e07c:	3001      	adds	r0, #1
 800e07e:	f43f ae56 	beq.w	800dd2e <_printf_float+0xb6>
 800e082:	f108 0801 	add.w	r8, r8, #1
 800e086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e088:	3b01      	subs	r3, #1
 800e08a:	4543      	cmp	r3, r8
 800e08c:	dcf1      	bgt.n	800e072 <_printf_float+0x3fa>
 800e08e:	4653      	mov	r3, sl
 800e090:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e094:	e6e0      	b.n	800de58 <_printf_float+0x1e0>
 800e096:	f04f 0800 	mov.w	r8, #0
 800e09a:	f104 091a 	add.w	r9, r4, #26
 800e09e:	e7f2      	b.n	800e086 <_printf_float+0x40e>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	4642      	mov	r2, r8
 800e0a4:	e7df      	b.n	800e066 <_printf_float+0x3ee>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	464a      	mov	r2, r9
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	47b8      	blx	r7
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	f43f ae3c 	beq.w	800dd2e <_printf_float+0xb6>
 800e0b6:	f108 0801 	add.w	r8, r8, #1
 800e0ba:	68e3      	ldr	r3, [r4, #12]
 800e0bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0be:	1a5b      	subs	r3, r3, r1
 800e0c0:	4543      	cmp	r3, r8
 800e0c2:	dcf0      	bgt.n	800e0a6 <_printf_float+0x42e>
 800e0c4:	e6fd      	b.n	800dec2 <_printf_float+0x24a>
 800e0c6:	f04f 0800 	mov.w	r8, #0
 800e0ca:	f104 0919 	add.w	r9, r4, #25
 800e0ce:	e7f4      	b.n	800e0ba <_printf_float+0x442>

0800e0d0 <_printf_common>:
 800e0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	4699      	mov	r9, r3
 800e0d8:	688a      	ldr	r2, [r1, #8]
 800e0da:	690b      	ldr	r3, [r1, #16]
 800e0dc:	4607      	mov	r7, r0
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	bfb8      	it	lt
 800e0e2:	4613      	movlt	r3, r2
 800e0e4:	6033      	str	r3, [r6, #0]
 800e0e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0f0:	b10a      	cbz	r2, 800e0f6 <_printf_common+0x26>
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	6033      	str	r3, [r6, #0]
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	0699      	lsls	r1, r3, #26
 800e0fa:	bf42      	ittt	mi
 800e0fc:	6833      	ldrmi	r3, [r6, #0]
 800e0fe:	3302      	addmi	r3, #2
 800e100:	6033      	strmi	r3, [r6, #0]
 800e102:	6825      	ldr	r5, [r4, #0]
 800e104:	f015 0506 	ands.w	r5, r5, #6
 800e108:	d106      	bne.n	800e118 <_printf_common+0x48>
 800e10a:	f104 0a19 	add.w	sl, r4, #25
 800e10e:	68e3      	ldr	r3, [r4, #12]
 800e110:	6832      	ldr	r2, [r6, #0]
 800e112:	1a9b      	subs	r3, r3, r2
 800e114:	42ab      	cmp	r3, r5
 800e116:	dc28      	bgt.n	800e16a <_printf_common+0x9a>
 800e118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e11c:	1e13      	subs	r3, r2, #0
 800e11e:	6822      	ldr	r2, [r4, #0]
 800e120:	bf18      	it	ne
 800e122:	2301      	movne	r3, #1
 800e124:	0692      	lsls	r2, r2, #26
 800e126:	d42d      	bmi.n	800e184 <_printf_common+0xb4>
 800e128:	4649      	mov	r1, r9
 800e12a:	4638      	mov	r0, r7
 800e12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e130:	47c0      	blx	r8
 800e132:	3001      	adds	r0, #1
 800e134:	d020      	beq.n	800e178 <_printf_common+0xa8>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	68e5      	ldr	r5, [r4, #12]
 800e13a:	f003 0306 	and.w	r3, r3, #6
 800e13e:	2b04      	cmp	r3, #4
 800e140:	bf18      	it	ne
 800e142:	2500      	movne	r5, #0
 800e144:	6832      	ldr	r2, [r6, #0]
 800e146:	f04f 0600 	mov.w	r6, #0
 800e14a:	68a3      	ldr	r3, [r4, #8]
 800e14c:	bf08      	it	eq
 800e14e:	1aad      	subeq	r5, r5, r2
 800e150:	6922      	ldr	r2, [r4, #16]
 800e152:	bf08      	it	eq
 800e154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e158:	4293      	cmp	r3, r2
 800e15a:	bfc4      	itt	gt
 800e15c:	1a9b      	subgt	r3, r3, r2
 800e15e:	18ed      	addgt	r5, r5, r3
 800e160:	341a      	adds	r4, #26
 800e162:	42b5      	cmp	r5, r6
 800e164:	d11a      	bne.n	800e19c <_printf_common+0xcc>
 800e166:	2000      	movs	r0, #0
 800e168:	e008      	b.n	800e17c <_printf_common+0xac>
 800e16a:	2301      	movs	r3, #1
 800e16c:	4652      	mov	r2, sl
 800e16e:	4649      	mov	r1, r9
 800e170:	4638      	mov	r0, r7
 800e172:	47c0      	blx	r8
 800e174:	3001      	adds	r0, #1
 800e176:	d103      	bne.n	800e180 <_printf_common+0xb0>
 800e178:	f04f 30ff 	mov.w	r0, #4294967295
 800e17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e180:	3501      	adds	r5, #1
 800e182:	e7c4      	b.n	800e10e <_printf_common+0x3e>
 800e184:	2030      	movs	r0, #48	; 0x30
 800e186:	18e1      	adds	r1, r4, r3
 800e188:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e192:	4422      	add	r2, r4
 800e194:	3302      	adds	r3, #2
 800e196:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e19a:	e7c5      	b.n	800e128 <_printf_common+0x58>
 800e19c:	2301      	movs	r3, #1
 800e19e:	4622      	mov	r2, r4
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	47c0      	blx	r8
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	d0e6      	beq.n	800e178 <_printf_common+0xa8>
 800e1aa:	3601      	adds	r6, #1
 800e1ac:	e7d9      	b.n	800e162 <_printf_common+0x92>
	...

0800e1b0 <_printf_i>:
 800e1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	7e27      	ldrb	r7, [r4, #24]
 800e1b8:	4691      	mov	r9, r2
 800e1ba:	2f78      	cmp	r7, #120	; 0x78
 800e1bc:	4680      	mov	r8, r0
 800e1be:	469a      	mov	sl, r3
 800e1c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e1c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1c6:	d807      	bhi.n	800e1d8 <_printf_i+0x28>
 800e1c8:	2f62      	cmp	r7, #98	; 0x62
 800e1ca:	d80a      	bhi.n	800e1e2 <_printf_i+0x32>
 800e1cc:	2f00      	cmp	r7, #0
 800e1ce:	f000 80d9 	beq.w	800e384 <_printf_i+0x1d4>
 800e1d2:	2f58      	cmp	r7, #88	; 0x58
 800e1d4:	f000 80a4 	beq.w	800e320 <_printf_i+0x170>
 800e1d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1e0:	e03a      	b.n	800e258 <_printf_i+0xa8>
 800e1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1e6:	2b15      	cmp	r3, #21
 800e1e8:	d8f6      	bhi.n	800e1d8 <_printf_i+0x28>
 800e1ea:	a001      	add	r0, pc, #4	; (adr r0, 800e1f0 <_printf_i+0x40>)
 800e1ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e1f0:	0800e249 	.word	0x0800e249
 800e1f4:	0800e25d 	.word	0x0800e25d
 800e1f8:	0800e1d9 	.word	0x0800e1d9
 800e1fc:	0800e1d9 	.word	0x0800e1d9
 800e200:	0800e1d9 	.word	0x0800e1d9
 800e204:	0800e1d9 	.word	0x0800e1d9
 800e208:	0800e25d 	.word	0x0800e25d
 800e20c:	0800e1d9 	.word	0x0800e1d9
 800e210:	0800e1d9 	.word	0x0800e1d9
 800e214:	0800e1d9 	.word	0x0800e1d9
 800e218:	0800e1d9 	.word	0x0800e1d9
 800e21c:	0800e36b 	.word	0x0800e36b
 800e220:	0800e28d 	.word	0x0800e28d
 800e224:	0800e34d 	.word	0x0800e34d
 800e228:	0800e1d9 	.word	0x0800e1d9
 800e22c:	0800e1d9 	.word	0x0800e1d9
 800e230:	0800e38d 	.word	0x0800e38d
 800e234:	0800e1d9 	.word	0x0800e1d9
 800e238:	0800e28d 	.word	0x0800e28d
 800e23c:	0800e1d9 	.word	0x0800e1d9
 800e240:	0800e1d9 	.word	0x0800e1d9
 800e244:	0800e355 	.word	0x0800e355
 800e248:	680b      	ldr	r3, [r1, #0]
 800e24a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e24e:	1d1a      	adds	r2, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	600a      	str	r2, [r1, #0]
 800e254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e258:	2301      	movs	r3, #1
 800e25a:	e0a4      	b.n	800e3a6 <_printf_i+0x1f6>
 800e25c:	6825      	ldr	r5, [r4, #0]
 800e25e:	6808      	ldr	r0, [r1, #0]
 800e260:	062e      	lsls	r6, r5, #24
 800e262:	f100 0304 	add.w	r3, r0, #4
 800e266:	d50a      	bpl.n	800e27e <_printf_i+0xce>
 800e268:	6805      	ldr	r5, [r0, #0]
 800e26a:	600b      	str	r3, [r1, #0]
 800e26c:	2d00      	cmp	r5, #0
 800e26e:	da03      	bge.n	800e278 <_printf_i+0xc8>
 800e270:	232d      	movs	r3, #45	; 0x2d
 800e272:	426d      	negs	r5, r5
 800e274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e278:	230a      	movs	r3, #10
 800e27a:	485e      	ldr	r0, [pc, #376]	; (800e3f4 <_printf_i+0x244>)
 800e27c:	e019      	b.n	800e2b2 <_printf_i+0x102>
 800e27e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e282:	6805      	ldr	r5, [r0, #0]
 800e284:	600b      	str	r3, [r1, #0]
 800e286:	bf18      	it	ne
 800e288:	b22d      	sxthne	r5, r5
 800e28a:	e7ef      	b.n	800e26c <_printf_i+0xbc>
 800e28c:	680b      	ldr	r3, [r1, #0]
 800e28e:	6825      	ldr	r5, [r4, #0]
 800e290:	1d18      	adds	r0, r3, #4
 800e292:	6008      	str	r0, [r1, #0]
 800e294:	0628      	lsls	r0, r5, #24
 800e296:	d501      	bpl.n	800e29c <_printf_i+0xec>
 800e298:	681d      	ldr	r5, [r3, #0]
 800e29a:	e002      	b.n	800e2a2 <_printf_i+0xf2>
 800e29c:	0669      	lsls	r1, r5, #25
 800e29e:	d5fb      	bpl.n	800e298 <_printf_i+0xe8>
 800e2a0:	881d      	ldrh	r5, [r3, #0]
 800e2a2:	2f6f      	cmp	r7, #111	; 0x6f
 800e2a4:	bf0c      	ite	eq
 800e2a6:	2308      	moveq	r3, #8
 800e2a8:	230a      	movne	r3, #10
 800e2aa:	4852      	ldr	r0, [pc, #328]	; (800e3f4 <_printf_i+0x244>)
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2b2:	6866      	ldr	r6, [r4, #4]
 800e2b4:	2e00      	cmp	r6, #0
 800e2b6:	bfa8      	it	ge
 800e2b8:	6821      	ldrge	r1, [r4, #0]
 800e2ba:	60a6      	str	r6, [r4, #8]
 800e2bc:	bfa4      	itt	ge
 800e2be:	f021 0104 	bicge.w	r1, r1, #4
 800e2c2:	6021      	strge	r1, [r4, #0]
 800e2c4:	b90d      	cbnz	r5, 800e2ca <_printf_i+0x11a>
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	d04d      	beq.n	800e366 <_printf_i+0x1b6>
 800e2ca:	4616      	mov	r6, r2
 800e2cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2d0:	fb03 5711 	mls	r7, r3, r1, r5
 800e2d4:	5dc7      	ldrb	r7, [r0, r7]
 800e2d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2da:	462f      	mov	r7, r5
 800e2dc:	42bb      	cmp	r3, r7
 800e2de:	460d      	mov	r5, r1
 800e2e0:	d9f4      	bls.n	800e2cc <_printf_i+0x11c>
 800e2e2:	2b08      	cmp	r3, #8
 800e2e4:	d10b      	bne.n	800e2fe <_printf_i+0x14e>
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	07df      	lsls	r7, r3, #31
 800e2ea:	d508      	bpl.n	800e2fe <_printf_i+0x14e>
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	6861      	ldr	r1, [r4, #4]
 800e2f0:	4299      	cmp	r1, r3
 800e2f2:	bfde      	ittt	le
 800e2f4:	2330      	movle	r3, #48	; 0x30
 800e2f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e2fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e2fe:	1b92      	subs	r2, r2, r6
 800e300:	6122      	str	r2, [r4, #16]
 800e302:	464b      	mov	r3, r9
 800e304:	4621      	mov	r1, r4
 800e306:	4640      	mov	r0, r8
 800e308:	f8cd a000 	str.w	sl, [sp]
 800e30c:	aa03      	add	r2, sp, #12
 800e30e:	f7ff fedf 	bl	800e0d0 <_printf_common>
 800e312:	3001      	adds	r0, #1
 800e314:	d14c      	bne.n	800e3b0 <_printf_i+0x200>
 800e316:	f04f 30ff 	mov.w	r0, #4294967295
 800e31a:	b004      	add	sp, #16
 800e31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e320:	4834      	ldr	r0, [pc, #208]	; (800e3f4 <_printf_i+0x244>)
 800e322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e326:	680e      	ldr	r6, [r1, #0]
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e32e:	061f      	lsls	r7, r3, #24
 800e330:	600e      	str	r6, [r1, #0]
 800e332:	d514      	bpl.n	800e35e <_printf_i+0x1ae>
 800e334:	07d9      	lsls	r1, r3, #31
 800e336:	bf44      	itt	mi
 800e338:	f043 0320 	orrmi.w	r3, r3, #32
 800e33c:	6023      	strmi	r3, [r4, #0]
 800e33e:	b91d      	cbnz	r5, 800e348 <_printf_i+0x198>
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	f023 0320 	bic.w	r3, r3, #32
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	2310      	movs	r3, #16
 800e34a:	e7af      	b.n	800e2ac <_printf_i+0xfc>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	f043 0320 	orr.w	r3, r3, #32
 800e352:	6023      	str	r3, [r4, #0]
 800e354:	2378      	movs	r3, #120	; 0x78
 800e356:	4828      	ldr	r0, [pc, #160]	; (800e3f8 <_printf_i+0x248>)
 800e358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e35c:	e7e3      	b.n	800e326 <_printf_i+0x176>
 800e35e:	065e      	lsls	r6, r3, #25
 800e360:	bf48      	it	mi
 800e362:	b2ad      	uxthmi	r5, r5
 800e364:	e7e6      	b.n	800e334 <_printf_i+0x184>
 800e366:	4616      	mov	r6, r2
 800e368:	e7bb      	b.n	800e2e2 <_printf_i+0x132>
 800e36a:	680b      	ldr	r3, [r1, #0]
 800e36c:	6826      	ldr	r6, [r4, #0]
 800e36e:	1d1d      	adds	r5, r3, #4
 800e370:	6960      	ldr	r0, [r4, #20]
 800e372:	600d      	str	r5, [r1, #0]
 800e374:	0635      	lsls	r5, r6, #24
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	d501      	bpl.n	800e37e <_printf_i+0x1ce>
 800e37a:	6018      	str	r0, [r3, #0]
 800e37c:	e002      	b.n	800e384 <_printf_i+0x1d4>
 800e37e:	0671      	lsls	r1, r6, #25
 800e380:	d5fb      	bpl.n	800e37a <_printf_i+0x1ca>
 800e382:	8018      	strh	r0, [r3, #0]
 800e384:	2300      	movs	r3, #0
 800e386:	4616      	mov	r6, r2
 800e388:	6123      	str	r3, [r4, #16]
 800e38a:	e7ba      	b.n	800e302 <_printf_i+0x152>
 800e38c:	680b      	ldr	r3, [r1, #0]
 800e38e:	1d1a      	adds	r2, r3, #4
 800e390:	600a      	str	r2, [r1, #0]
 800e392:	681e      	ldr	r6, [r3, #0]
 800e394:	2100      	movs	r1, #0
 800e396:	4630      	mov	r0, r6
 800e398:	6862      	ldr	r2, [r4, #4]
 800e39a:	f002 fb13 	bl	80109c4 <memchr>
 800e39e:	b108      	cbz	r0, 800e3a4 <_printf_i+0x1f4>
 800e3a0:	1b80      	subs	r0, r0, r6
 800e3a2:	6060      	str	r0, [r4, #4]
 800e3a4:	6863      	ldr	r3, [r4, #4]
 800e3a6:	6123      	str	r3, [r4, #16]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3ae:	e7a8      	b.n	800e302 <_printf_i+0x152>
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	4640      	mov	r0, r8
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	47d0      	blx	sl
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	d0ab      	beq.n	800e316 <_printf_i+0x166>
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	079b      	lsls	r3, r3, #30
 800e3c2:	d413      	bmi.n	800e3ec <_printf_i+0x23c>
 800e3c4:	68e0      	ldr	r0, [r4, #12]
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	4298      	cmp	r0, r3
 800e3ca:	bfb8      	it	lt
 800e3cc:	4618      	movlt	r0, r3
 800e3ce:	e7a4      	b.n	800e31a <_printf_i+0x16a>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	4632      	mov	r2, r6
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	47d0      	blx	sl
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d09b      	beq.n	800e316 <_printf_i+0x166>
 800e3de:	3501      	adds	r5, #1
 800e3e0:	68e3      	ldr	r3, [r4, #12]
 800e3e2:	9903      	ldr	r1, [sp, #12]
 800e3e4:	1a5b      	subs	r3, r3, r1
 800e3e6:	42ab      	cmp	r3, r5
 800e3e8:	dcf2      	bgt.n	800e3d0 <_printf_i+0x220>
 800e3ea:	e7eb      	b.n	800e3c4 <_printf_i+0x214>
 800e3ec:	2500      	movs	r5, #0
 800e3ee:	f104 0619 	add.w	r6, r4, #25
 800e3f2:	e7f5      	b.n	800e3e0 <_printf_i+0x230>
 800e3f4:	080127fe 	.word	0x080127fe
 800e3f8:	0801280f 	.word	0x0801280f

0800e3fc <_scanf_float>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	b087      	sub	sp, #28
 800e402:	9303      	str	r3, [sp, #12]
 800e404:	688b      	ldr	r3, [r1, #8]
 800e406:	4617      	mov	r7, r2
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e40e:	bf85      	ittet	hi
 800e410:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e414:	195b      	addhi	r3, r3, r5
 800e416:	2300      	movls	r3, #0
 800e418:	9302      	strhi	r3, [sp, #8]
 800e41a:	bf88      	it	hi
 800e41c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e420:	468b      	mov	fp, r1
 800e422:	f04f 0500 	mov.w	r5, #0
 800e426:	bf8c      	ite	hi
 800e428:	608b      	strhi	r3, [r1, #8]
 800e42a:	9302      	strls	r3, [sp, #8]
 800e42c:	680b      	ldr	r3, [r1, #0]
 800e42e:	4680      	mov	r8, r0
 800e430:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e434:	f84b 3b1c 	str.w	r3, [fp], #28
 800e438:	460c      	mov	r4, r1
 800e43a:	465e      	mov	r6, fp
 800e43c:	46aa      	mov	sl, r5
 800e43e:	46a9      	mov	r9, r5
 800e440:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e444:	9501      	str	r5, [sp, #4]
 800e446:	68a2      	ldr	r2, [r4, #8]
 800e448:	b152      	cbz	r2, 800e460 <_scanf_float+0x64>
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b4e      	cmp	r3, #78	; 0x4e
 800e450:	d864      	bhi.n	800e51c <_scanf_float+0x120>
 800e452:	2b40      	cmp	r3, #64	; 0x40
 800e454:	d83c      	bhi.n	800e4d0 <_scanf_float+0xd4>
 800e456:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e45a:	b2c8      	uxtb	r0, r1
 800e45c:	280e      	cmp	r0, #14
 800e45e:	d93a      	bls.n	800e4d6 <_scanf_float+0xda>
 800e460:	f1b9 0f00 	cmp.w	r9, #0
 800e464:	d003      	beq.n	800e46e <_scanf_float+0x72>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e472:	f1ba 0f01 	cmp.w	sl, #1
 800e476:	f200 8113 	bhi.w	800e6a0 <_scanf_float+0x2a4>
 800e47a:	455e      	cmp	r6, fp
 800e47c:	f200 8105 	bhi.w	800e68a <_scanf_float+0x28e>
 800e480:	2501      	movs	r5, #1
 800e482:	4628      	mov	r0, r5
 800e484:	b007      	add	sp, #28
 800e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e48e:	2a0d      	cmp	r2, #13
 800e490:	d8e6      	bhi.n	800e460 <_scanf_float+0x64>
 800e492:	a101      	add	r1, pc, #4	; (adr r1, 800e498 <_scanf_float+0x9c>)
 800e494:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e498:	0800e5d7 	.word	0x0800e5d7
 800e49c:	0800e461 	.word	0x0800e461
 800e4a0:	0800e461 	.word	0x0800e461
 800e4a4:	0800e461 	.word	0x0800e461
 800e4a8:	0800e637 	.word	0x0800e637
 800e4ac:	0800e60f 	.word	0x0800e60f
 800e4b0:	0800e461 	.word	0x0800e461
 800e4b4:	0800e461 	.word	0x0800e461
 800e4b8:	0800e5e5 	.word	0x0800e5e5
 800e4bc:	0800e461 	.word	0x0800e461
 800e4c0:	0800e461 	.word	0x0800e461
 800e4c4:	0800e461 	.word	0x0800e461
 800e4c8:	0800e461 	.word	0x0800e461
 800e4cc:	0800e59d 	.word	0x0800e59d
 800e4d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e4d4:	e7db      	b.n	800e48e <_scanf_float+0x92>
 800e4d6:	290e      	cmp	r1, #14
 800e4d8:	d8c2      	bhi.n	800e460 <_scanf_float+0x64>
 800e4da:	a001      	add	r0, pc, #4	; (adr r0, 800e4e0 <_scanf_float+0xe4>)
 800e4dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e4e0:	0800e58f 	.word	0x0800e58f
 800e4e4:	0800e461 	.word	0x0800e461
 800e4e8:	0800e58f 	.word	0x0800e58f
 800e4ec:	0800e623 	.word	0x0800e623
 800e4f0:	0800e461 	.word	0x0800e461
 800e4f4:	0800e53d 	.word	0x0800e53d
 800e4f8:	0800e579 	.word	0x0800e579
 800e4fc:	0800e579 	.word	0x0800e579
 800e500:	0800e579 	.word	0x0800e579
 800e504:	0800e579 	.word	0x0800e579
 800e508:	0800e579 	.word	0x0800e579
 800e50c:	0800e579 	.word	0x0800e579
 800e510:	0800e579 	.word	0x0800e579
 800e514:	0800e579 	.word	0x0800e579
 800e518:	0800e579 	.word	0x0800e579
 800e51c:	2b6e      	cmp	r3, #110	; 0x6e
 800e51e:	d809      	bhi.n	800e534 <_scanf_float+0x138>
 800e520:	2b60      	cmp	r3, #96	; 0x60
 800e522:	d8b2      	bhi.n	800e48a <_scanf_float+0x8e>
 800e524:	2b54      	cmp	r3, #84	; 0x54
 800e526:	d077      	beq.n	800e618 <_scanf_float+0x21c>
 800e528:	2b59      	cmp	r3, #89	; 0x59
 800e52a:	d199      	bne.n	800e460 <_scanf_float+0x64>
 800e52c:	2d07      	cmp	r5, #7
 800e52e:	d197      	bne.n	800e460 <_scanf_float+0x64>
 800e530:	2508      	movs	r5, #8
 800e532:	e029      	b.n	800e588 <_scanf_float+0x18c>
 800e534:	2b74      	cmp	r3, #116	; 0x74
 800e536:	d06f      	beq.n	800e618 <_scanf_float+0x21c>
 800e538:	2b79      	cmp	r3, #121	; 0x79
 800e53a:	e7f6      	b.n	800e52a <_scanf_float+0x12e>
 800e53c:	6821      	ldr	r1, [r4, #0]
 800e53e:	05c8      	lsls	r0, r1, #23
 800e540:	d51a      	bpl.n	800e578 <_scanf_float+0x17c>
 800e542:	9b02      	ldr	r3, [sp, #8]
 800e544:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e548:	6021      	str	r1, [r4, #0]
 800e54a:	f109 0901 	add.w	r9, r9, #1
 800e54e:	b11b      	cbz	r3, 800e558 <_scanf_float+0x15c>
 800e550:	3b01      	subs	r3, #1
 800e552:	3201      	adds	r2, #1
 800e554:	9302      	str	r3, [sp, #8]
 800e556:	60a2      	str	r2, [r4, #8]
 800e558:	68a3      	ldr	r3, [r4, #8]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	60a3      	str	r3, [r4, #8]
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	3301      	adds	r3, #1
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	3b01      	subs	r3, #1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	607b      	str	r3, [r7, #4]
 800e56c:	f340 8084 	ble.w	800e678 <_scanf_float+0x27c>
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	603b      	str	r3, [r7, #0]
 800e576:	e766      	b.n	800e446 <_scanf_float+0x4a>
 800e578:	eb1a 0f05 	cmn.w	sl, r5
 800e57c:	f47f af70 	bne.w	800e460 <_scanf_float+0x64>
 800e580:	6822      	ldr	r2, [r4, #0]
 800e582:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e586:	6022      	str	r2, [r4, #0]
 800e588:	f806 3b01 	strb.w	r3, [r6], #1
 800e58c:	e7e4      	b.n	800e558 <_scanf_float+0x15c>
 800e58e:	6822      	ldr	r2, [r4, #0]
 800e590:	0610      	lsls	r0, r2, #24
 800e592:	f57f af65 	bpl.w	800e460 <_scanf_float+0x64>
 800e596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e59a:	e7f4      	b.n	800e586 <_scanf_float+0x18a>
 800e59c:	f1ba 0f00 	cmp.w	sl, #0
 800e5a0:	d10e      	bne.n	800e5c0 <_scanf_float+0x1c4>
 800e5a2:	f1b9 0f00 	cmp.w	r9, #0
 800e5a6:	d10e      	bne.n	800e5c6 <_scanf_float+0x1ca>
 800e5a8:	6822      	ldr	r2, [r4, #0]
 800e5aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e5ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e5b2:	d108      	bne.n	800e5c6 <_scanf_float+0x1ca>
 800e5b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e5b8:	f04f 0a01 	mov.w	sl, #1
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	e7e3      	b.n	800e588 <_scanf_float+0x18c>
 800e5c0:	f1ba 0f02 	cmp.w	sl, #2
 800e5c4:	d055      	beq.n	800e672 <_scanf_float+0x276>
 800e5c6:	2d01      	cmp	r5, #1
 800e5c8:	d002      	beq.n	800e5d0 <_scanf_float+0x1d4>
 800e5ca:	2d04      	cmp	r5, #4
 800e5cc:	f47f af48 	bne.w	800e460 <_scanf_float+0x64>
 800e5d0:	3501      	adds	r5, #1
 800e5d2:	b2ed      	uxtb	r5, r5
 800e5d4:	e7d8      	b.n	800e588 <_scanf_float+0x18c>
 800e5d6:	f1ba 0f01 	cmp.w	sl, #1
 800e5da:	f47f af41 	bne.w	800e460 <_scanf_float+0x64>
 800e5de:	f04f 0a02 	mov.w	sl, #2
 800e5e2:	e7d1      	b.n	800e588 <_scanf_float+0x18c>
 800e5e4:	b97d      	cbnz	r5, 800e606 <_scanf_float+0x20a>
 800e5e6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ea:	f47f af3c 	bne.w	800e466 <_scanf_float+0x6a>
 800e5ee:	6822      	ldr	r2, [r4, #0]
 800e5f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e5f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e5f8:	f47f af39 	bne.w	800e46e <_scanf_float+0x72>
 800e5fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e600:	2501      	movs	r5, #1
 800e602:	6022      	str	r2, [r4, #0]
 800e604:	e7c0      	b.n	800e588 <_scanf_float+0x18c>
 800e606:	2d03      	cmp	r5, #3
 800e608:	d0e2      	beq.n	800e5d0 <_scanf_float+0x1d4>
 800e60a:	2d05      	cmp	r5, #5
 800e60c:	e7de      	b.n	800e5cc <_scanf_float+0x1d0>
 800e60e:	2d02      	cmp	r5, #2
 800e610:	f47f af26 	bne.w	800e460 <_scanf_float+0x64>
 800e614:	2503      	movs	r5, #3
 800e616:	e7b7      	b.n	800e588 <_scanf_float+0x18c>
 800e618:	2d06      	cmp	r5, #6
 800e61a:	f47f af21 	bne.w	800e460 <_scanf_float+0x64>
 800e61e:	2507      	movs	r5, #7
 800e620:	e7b2      	b.n	800e588 <_scanf_float+0x18c>
 800e622:	6822      	ldr	r2, [r4, #0]
 800e624:	0591      	lsls	r1, r2, #22
 800e626:	f57f af1b 	bpl.w	800e460 <_scanf_float+0x64>
 800e62a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	f8cd 9004 	str.w	r9, [sp, #4]
 800e634:	e7a8      	b.n	800e588 <_scanf_float+0x18c>
 800e636:	6822      	ldr	r2, [r4, #0]
 800e638:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e63c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e640:	d006      	beq.n	800e650 <_scanf_float+0x254>
 800e642:	0550      	lsls	r0, r2, #21
 800e644:	f57f af0c 	bpl.w	800e460 <_scanf_float+0x64>
 800e648:	f1b9 0f00 	cmp.w	r9, #0
 800e64c:	f43f af0f 	beq.w	800e46e <_scanf_float+0x72>
 800e650:	0591      	lsls	r1, r2, #22
 800e652:	bf58      	it	pl
 800e654:	9901      	ldrpl	r1, [sp, #4]
 800e656:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e65a:	bf58      	it	pl
 800e65c:	eba9 0101 	subpl.w	r1, r9, r1
 800e660:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e664:	f04f 0900 	mov.w	r9, #0
 800e668:	bf58      	it	pl
 800e66a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e66e:	6022      	str	r2, [r4, #0]
 800e670:	e78a      	b.n	800e588 <_scanf_float+0x18c>
 800e672:	f04f 0a03 	mov.w	sl, #3
 800e676:	e787      	b.n	800e588 <_scanf_float+0x18c>
 800e678:	4639      	mov	r1, r7
 800e67a:	4640      	mov	r0, r8
 800e67c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e680:	4798      	blx	r3
 800e682:	2800      	cmp	r0, #0
 800e684:	f43f aedf 	beq.w	800e446 <_scanf_float+0x4a>
 800e688:	e6ea      	b.n	800e460 <_scanf_float+0x64>
 800e68a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e68e:	463a      	mov	r2, r7
 800e690:	4640      	mov	r0, r8
 800e692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e696:	4798      	blx	r3
 800e698:	6923      	ldr	r3, [r4, #16]
 800e69a:	3b01      	subs	r3, #1
 800e69c:	6123      	str	r3, [r4, #16]
 800e69e:	e6ec      	b.n	800e47a <_scanf_float+0x7e>
 800e6a0:	1e6b      	subs	r3, r5, #1
 800e6a2:	2b06      	cmp	r3, #6
 800e6a4:	d825      	bhi.n	800e6f2 <_scanf_float+0x2f6>
 800e6a6:	2d02      	cmp	r5, #2
 800e6a8:	d836      	bhi.n	800e718 <_scanf_float+0x31c>
 800e6aa:	455e      	cmp	r6, fp
 800e6ac:	f67f aee8 	bls.w	800e480 <_scanf_float+0x84>
 800e6b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6b4:	463a      	mov	r2, r7
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6bc:	4798      	blx	r3
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	6123      	str	r3, [r4, #16]
 800e6c4:	e7f1      	b.n	800e6aa <_scanf_float+0x2ae>
 800e6c6:	9802      	ldr	r0, [sp, #8]
 800e6c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	9002      	str	r0, [sp, #8]
 800e6d4:	4640      	mov	r0, r8
 800e6d6:	4798      	blx	r3
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6e2:	fa5f fa8a 	uxtb.w	sl, sl
 800e6e6:	f1ba 0f02 	cmp.w	sl, #2
 800e6ea:	d1ec      	bne.n	800e6c6 <_scanf_float+0x2ca>
 800e6ec:	3d03      	subs	r5, #3
 800e6ee:	b2ed      	uxtb	r5, r5
 800e6f0:	1b76      	subs	r6, r6, r5
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	05da      	lsls	r2, r3, #23
 800e6f6:	d52f      	bpl.n	800e758 <_scanf_float+0x35c>
 800e6f8:	055b      	lsls	r3, r3, #21
 800e6fa:	d510      	bpl.n	800e71e <_scanf_float+0x322>
 800e6fc:	455e      	cmp	r6, fp
 800e6fe:	f67f aebf 	bls.w	800e480 <_scanf_float+0x84>
 800e702:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e706:	463a      	mov	r2, r7
 800e708:	4640      	mov	r0, r8
 800e70a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e70e:	4798      	blx	r3
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	3b01      	subs	r3, #1
 800e714:	6123      	str	r3, [r4, #16]
 800e716:	e7f1      	b.n	800e6fc <_scanf_float+0x300>
 800e718:	46aa      	mov	sl, r5
 800e71a:	9602      	str	r6, [sp, #8]
 800e71c:	e7df      	b.n	800e6de <_scanf_float+0x2e2>
 800e71e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	2965      	cmp	r1, #101	; 0x65
 800e726:	f103 33ff 	add.w	r3, r3, #4294967295
 800e72a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e72e:	6123      	str	r3, [r4, #16]
 800e730:	d00c      	beq.n	800e74c <_scanf_float+0x350>
 800e732:	2945      	cmp	r1, #69	; 0x45
 800e734:	d00a      	beq.n	800e74c <_scanf_float+0x350>
 800e736:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e73a:	463a      	mov	r2, r7
 800e73c:	4640      	mov	r0, r8
 800e73e:	4798      	blx	r3
 800e740:	6923      	ldr	r3, [r4, #16]
 800e742:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e746:	3b01      	subs	r3, #1
 800e748:	1eb5      	subs	r5, r6, #2
 800e74a:	6123      	str	r3, [r4, #16]
 800e74c:	463a      	mov	r2, r7
 800e74e:	4640      	mov	r0, r8
 800e750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e754:	4798      	blx	r3
 800e756:	462e      	mov	r6, r5
 800e758:	6825      	ldr	r5, [r4, #0]
 800e75a:	f015 0510 	ands.w	r5, r5, #16
 800e75e:	d159      	bne.n	800e814 <_scanf_float+0x418>
 800e760:	7035      	strb	r5, [r6, #0]
 800e762:	6823      	ldr	r3, [r4, #0]
 800e764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e76c:	d11c      	bne.n	800e7a8 <_scanf_float+0x3ac>
 800e76e:	9b01      	ldr	r3, [sp, #4]
 800e770:	454b      	cmp	r3, r9
 800e772:	eba3 0209 	sub.w	r2, r3, r9
 800e776:	d124      	bne.n	800e7c2 <_scanf_float+0x3c6>
 800e778:	2200      	movs	r2, #0
 800e77a:	4659      	mov	r1, fp
 800e77c:	4640      	mov	r0, r8
 800e77e:	f000 fe9b 	bl	800f4b8 <_strtod_r>
 800e782:	f8d4 c000 	ldr.w	ip, [r4]
 800e786:	9b03      	ldr	r3, [sp, #12]
 800e788:	f01c 0f02 	tst.w	ip, #2
 800e78c:	4606      	mov	r6, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	d021      	beq.n	800e7d8 <_scanf_float+0x3dc>
 800e794:	9903      	ldr	r1, [sp, #12]
 800e796:	1d1a      	adds	r2, r3, #4
 800e798:	600a      	str	r2, [r1, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	e9c3 6700 	strd	r6, r7, [r3]
 800e7a0:	68e3      	ldr	r3, [r4, #12]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	60e3      	str	r3, [r4, #12]
 800e7a6:	e66c      	b.n	800e482 <_scanf_float+0x86>
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0e4      	beq.n	800e778 <_scanf_float+0x37c>
 800e7ae:	9905      	ldr	r1, [sp, #20]
 800e7b0:	230a      	movs	r3, #10
 800e7b2:	462a      	mov	r2, r5
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	3101      	adds	r1, #1
 800e7b8:	f000 ff0a 	bl	800f5d0 <_strtol_r>
 800e7bc:	9b04      	ldr	r3, [sp, #16]
 800e7be:	9e05      	ldr	r6, [sp, #20]
 800e7c0:	1ac2      	subs	r2, r0, r3
 800e7c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e7c6:	429e      	cmp	r6, r3
 800e7c8:	bf28      	it	cs
 800e7ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	4911      	ldr	r1, [pc, #68]	; (800e818 <_scanf_float+0x41c>)
 800e7d2:	f000 f839 	bl	800e848 <siprintf>
 800e7d6:	e7cf      	b.n	800e778 <_scanf_float+0x37c>
 800e7d8:	f01c 0f04 	tst.w	ip, #4
 800e7dc:	f103 0e04 	add.w	lr, r3, #4
 800e7e0:	d003      	beq.n	800e7ea <_scanf_float+0x3ee>
 800e7e2:	9903      	ldr	r1, [sp, #12]
 800e7e4:	f8c1 e000 	str.w	lr, [r1]
 800e7e8:	e7d7      	b.n	800e79a <_scanf_float+0x39e>
 800e7ea:	9a03      	ldr	r2, [sp, #12]
 800e7ec:	f8c2 e000 	str.w	lr, [r2]
 800e7f0:	f8d3 8000 	ldr.w	r8, [r3]
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	f7f2 f94e 	bl	8000a98 <__aeabi_dcmpun>
 800e7fc:	b128      	cbz	r0, 800e80a <_scanf_float+0x40e>
 800e7fe:	4807      	ldr	r0, [pc, #28]	; (800e81c <_scanf_float+0x420>)
 800e800:	f000 f81e 	bl	800e840 <nanf>
 800e804:	f8c8 0000 	str.w	r0, [r8]
 800e808:	e7ca      	b.n	800e7a0 <_scanf_float+0x3a4>
 800e80a:	4630      	mov	r0, r6
 800e80c:	4639      	mov	r1, r7
 800e80e:	f7f2 f9a1 	bl	8000b54 <__aeabi_d2f>
 800e812:	e7f7      	b.n	800e804 <_scanf_float+0x408>
 800e814:	2500      	movs	r5, #0
 800e816:	e634      	b.n	800e482 <_scanf_float+0x86>
 800e818:	08012820 	.word	0x08012820
 800e81c:	08012c38 	.word	0x08012c38

0800e820 <_sbrk_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	2300      	movs	r3, #0
 800e824:	4d05      	ldr	r5, [pc, #20]	; (800e83c <_sbrk_r+0x1c>)
 800e826:	4604      	mov	r4, r0
 800e828:	4608      	mov	r0, r1
 800e82a:	602b      	str	r3, [r5, #0]
 800e82c:	f7f3 fe3e 	bl	80024ac <_sbrk>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d102      	bne.n	800e83a <_sbrk_r+0x1a>
 800e834:	682b      	ldr	r3, [r5, #0]
 800e836:	b103      	cbz	r3, 800e83a <_sbrk_r+0x1a>
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	bd38      	pop	{r3, r4, r5, pc}
 800e83c:	20002df0 	.word	0x20002df0

0800e840 <nanf>:
 800e840:	4800      	ldr	r0, [pc, #0]	; (800e844 <nanf+0x4>)
 800e842:	4770      	bx	lr
 800e844:	7fc00000 	.word	0x7fc00000

0800e848 <siprintf>:
 800e848:	b40e      	push	{r1, r2, r3}
 800e84a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e84e:	b500      	push	{lr}
 800e850:	b09c      	sub	sp, #112	; 0x70
 800e852:	ab1d      	add	r3, sp, #116	; 0x74
 800e854:	9002      	str	r0, [sp, #8]
 800e856:	9006      	str	r0, [sp, #24]
 800e858:	9107      	str	r1, [sp, #28]
 800e85a:	9104      	str	r1, [sp, #16]
 800e85c:	4808      	ldr	r0, [pc, #32]	; (800e880 <siprintf+0x38>)
 800e85e:	4909      	ldr	r1, [pc, #36]	; (800e884 <siprintf+0x3c>)
 800e860:	f853 2b04 	ldr.w	r2, [r3], #4
 800e864:	9105      	str	r1, [sp, #20]
 800e866:	6800      	ldr	r0, [r0, #0]
 800e868:	a902      	add	r1, sp, #8
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	f002 fde6 	bl	801143c <_svfiprintf_r>
 800e870:	2200      	movs	r2, #0
 800e872:	9b02      	ldr	r3, [sp, #8]
 800e874:	701a      	strb	r2, [r3, #0]
 800e876:	b01c      	add	sp, #112	; 0x70
 800e878:	f85d eb04 	ldr.w	lr, [sp], #4
 800e87c:	b003      	add	sp, #12
 800e87e:	4770      	bx	lr
 800e880:	2000003c 	.word	0x2000003c
 800e884:	ffff0208 	.word	0xffff0208

0800e888 <sulp>:
 800e888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88c:	460f      	mov	r7, r1
 800e88e:	4690      	mov	r8, r2
 800e890:	f002 fc22 	bl	80110d8 <__ulp>
 800e894:	4604      	mov	r4, r0
 800e896:	460d      	mov	r5, r1
 800e898:	f1b8 0f00 	cmp.w	r8, #0
 800e89c:	d011      	beq.n	800e8c2 <sulp+0x3a>
 800e89e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e8a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	dd0b      	ble.n	800e8c2 <sulp+0x3a>
 800e8aa:	2400      	movs	r4, #0
 800e8ac:	051b      	lsls	r3, r3, #20
 800e8ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e8b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	462b      	mov	r3, r5
 800e8ba:	f7f1 fe53 	bl	8000564 <__aeabi_dmul>
 800e8be:	4604      	mov	r4, r0
 800e8c0:	460d      	mov	r5, r1
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ca:	0000      	movs	r0, r0
 800e8cc:	0000      	movs	r0, r0
	...

0800e8d0 <_strtod_l>:
 800e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	469b      	mov	fp, r3
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	b0a1      	sub	sp, #132	; 0x84
 800e8da:	931c      	str	r3, [sp, #112]	; 0x70
 800e8dc:	4ba1      	ldr	r3, [pc, #644]	; (800eb64 <_strtod_l+0x294>)
 800e8de:	4682      	mov	sl, r0
 800e8e0:	681f      	ldr	r7, [r3, #0]
 800e8e2:	460e      	mov	r6, r1
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800e8e8:	f7f1 fc78 	bl	80001dc <strlen>
 800e8ec:	f04f 0800 	mov.w	r8, #0
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	f04f 0900 	mov.w	r9, #0
 800e8f6:	961b      	str	r6, [sp, #108]	; 0x6c
 800e8f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8fa:	781a      	ldrb	r2, [r3, #0]
 800e8fc:	2a2b      	cmp	r2, #43	; 0x2b
 800e8fe:	d04c      	beq.n	800e99a <_strtod_l+0xca>
 800e900:	d83a      	bhi.n	800e978 <_strtod_l+0xa8>
 800e902:	2a0d      	cmp	r2, #13
 800e904:	d833      	bhi.n	800e96e <_strtod_l+0x9e>
 800e906:	2a08      	cmp	r2, #8
 800e908:	d833      	bhi.n	800e972 <_strtod_l+0xa2>
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	d03d      	beq.n	800e98a <_strtod_l+0xba>
 800e90e:	2300      	movs	r3, #0
 800e910:	930c      	str	r3, [sp, #48]	; 0x30
 800e912:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e914:	782b      	ldrb	r3, [r5, #0]
 800e916:	2b30      	cmp	r3, #48	; 0x30
 800e918:	f040 80af 	bne.w	800ea7a <_strtod_l+0x1aa>
 800e91c:	786b      	ldrb	r3, [r5, #1]
 800e91e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e922:	2b58      	cmp	r3, #88	; 0x58
 800e924:	d16c      	bne.n	800ea00 <_strtod_l+0x130>
 800e926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e928:	4650      	mov	r0, sl
 800e92a:	9301      	str	r3, [sp, #4]
 800e92c:	ab1c      	add	r3, sp, #112	; 0x70
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	4a8d      	ldr	r2, [pc, #564]	; (800eb68 <_strtod_l+0x298>)
 800e932:	f8cd b008 	str.w	fp, [sp, #8]
 800e936:	ab1d      	add	r3, sp, #116	; 0x74
 800e938:	a91b      	add	r1, sp, #108	; 0x6c
 800e93a:	f001 fd2f 	bl	801039c <__gethex>
 800e93e:	f010 0607 	ands.w	r6, r0, #7
 800e942:	4604      	mov	r4, r0
 800e944:	d005      	beq.n	800e952 <_strtod_l+0x82>
 800e946:	2e06      	cmp	r6, #6
 800e948:	d129      	bne.n	800e99e <_strtod_l+0xce>
 800e94a:	2300      	movs	r3, #0
 800e94c:	3501      	adds	r5, #1
 800e94e:	951b      	str	r5, [sp, #108]	; 0x6c
 800e950:	930c      	str	r3, [sp, #48]	; 0x30
 800e952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e954:	2b00      	cmp	r3, #0
 800e956:	f040 8596 	bne.w	800f486 <_strtod_l+0xbb6>
 800e95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e95c:	b1d3      	cbz	r3, 800e994 <_strtod_l+0xc4>
 800e95e:	4642      	mov	r2, r8
 800e960:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e964:	4610      	mov	r0, r2
 800e966:	4619      	mov	r1, r3
 800e968:	b021      	add	sp, #132	; 0x84
 800e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96e:	2a20      	cmp	r2, #32
 800e970:	d1cd      	bne.n	800e90e <_strtod_l+0x3e>
 800e972:	3301      	adds	r3, #1
 800e974:	931b      	str	r3, [sp, #108]	; 0x6c
 800e976:	e7bf      	b.n	800e8f8 <_strtod_l+0x28>
 800e978:	2a2d      	cmp	r2, #45	; 0x2d
 800e97a:	d1c8      	bne.n	800e90e <_strtod_l+0x3e>
 800e97c:	2201      	movs	r2, #1
 800e97e:	920c      	str	r2, [sp, #48]	; 0x30
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	921b      	str	r2, [sp, #108]	; 0x6c
 800e984:	785b      	ldrb	r3, [r3, #1]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1c3      	bne.n	800e912 <_strtod_l+0x42>
 800e98a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e98c:	961b      	str	r6, [sp, #108]	; 0x6c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f040 8577 	bne.w	800f482 <_strtod_l+0xbb2>
 800e994:	4642      	mov	r2, r8
 800e996:	464b      	mov	r3, r9
 800e998:	e7e4      	b.n	800e964 <_strtod_l+0x94>
 800e99a:	2200      	movs	r2, #0
 800e99c:	e7ef      	b.n	800e97e <_strtod_l+0xae>
 800e99e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e9a0:	b13a      	cbz	r2, 800e9b2 <_strtod_l+0xe2>
 800e9a2:	2135      	movs	r1, #53	; 0x35
 800e9a4:	a81e      	add	r0, sp, #120	; 0x78
 800e9a6:	f002 fc9b 	bl	80112e0 <__copybits>
 800e9aa:	4650      	mov	r0, sl
 800e9ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e9ae:	f002 f863 	bl	8010a78 <_Bfree>
 800e9b2:	3e01      	subs	r6, #1
 800e9b4:	2e05      	cmp	r6, #5
 800e9b6:	d807      	bhi.n	800e9c8 <_strtod_l+0xf8>
 800e9b8:	e8df f006 	tbb	[pc, r6]
 800e9bc:	1d180b0e 	.word	0x1d180b0e
 800e9c0:	030e      	.short	0x030e
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	46c8      	mov	r8, r9
 800e9c8:	0721      	lsls	r1, r4, #28
 800e9ca:	d5c2      	bpl.n	800e952 <_strtod_l+0x82>
 800e9cc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e9d0:	e7bf      	b.n	800e952 <_strtod_l+0x82>
 800e9d2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800e9d6:	e7f7      	b.n	800e9c8 <_strtod_l+0xf8>
 800e9d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e9da:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800e9de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e9e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e9ea:	e7ed      	b.n	800e9c8 <_strtod_l+0xf8>
 800e9ec:	f04f 0800 	mov.w	r8, #0
 800e9f0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eb6c <_strtod_l+0x29c>
 800e9f4:	e7e8      	b.n	800e9c8 <_strtod_l+0xf8>
 800e9f6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e9fa:	f04f 38ff 	mov.w	r8, #4294967295
 800e9fe:	e7e3      	b.n	800e9c8 <_strtod_l+0xf8>
 800ea00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	921b      	str	r2, [sp, #108]	; 0x6c
 800ea06:	785b      	ldrb	r3, [r3, #1]
 800ea08:	2b30      	cmp	r3, #48	; 0x30
 800ea0a:	d0f9      	beq.n	800ea00 <_strtod_l+0x130>
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d0a0      	beq.n	800e952 <_strtod_l+0x82>
 800ea10:	2301      	movs	r3, #1
 800ea12:	9307      	str	r3, [sp, #28]
 800ea14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea16:	220a      	movs	r2, #10
 800ea18:	9308      	str	r3, [sp, #32]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	469b      	mov	fp, r3
 800ea1e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ea24:	7805      	ldrb	r5, [r0, #0]
 800ea26:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ea2a:	b2d9      	uxtb	r1, r3
 800ea2c:	2909      	cmp	r1, #9
 800ea2e:	d926      	bls.n	800ea7e <_strtod_l+0x1ae>
 800ea30:	4622      	mov	r2, r4
 800ea32:	4639      	mov	r1, r7
 800ea34:	f002 fe08 	bl	8011648 <strncmp>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d032      	beq.n	800eaa2 <_strtod_l+0x1d2>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	462b      	mov	r3, r5
 800ea40:	465c      	mov	r4, fp
 800ea42:	4602      	mov	r2, r0
 800ea44:	9004      	str	r0, [sp, #16]
 800ea46:	2b65      	cmp	r3, #101	; 0x65
 800ea48:	d001      	beq.n	800ea4e <_strtod_l+0x17e>
 800ea4a:	2b45      	cmp	r3, #69	; 0x45
 800ea4c:	d113      	bne.n	800ea76 <_strtod_l+0x1a6>
 800ea4e:	b91c      	cbnz	r4, 800ea58 <_strtod_l+0x188>
 800ea50:	9b07      	ldr	r3, [sp, #28]
 800ea52:	4303      	orrs	r3, r0
 800ea54:	d099      	beq.n	800e98a <_strtod_l+0xba>
 800ea56:	2400      	movs	r4, #0
 800ea58:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ea5a:	1c73      	adds	r3, r6, #1
 800ea5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea5e:	7873      	ldrb	r3, [r6, #1]
 800ea60:	2b2b      	cmp	r3, #43	; 0x2b
 800ea62:	d078      	beq.n	800eb56 <_strtod_l+0x286>
 800ea64:	2b2d      	cmp	r3, #45	; 0x2d
 800ea66:	d07b      	beq.n	800eb60 <_strtod_l+0x290>
 800ea68:	2700      	movs	r7, #0
 800ea6a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ea6e:	2909      	cmp	r1, #9
 800ea70:	f240 8082 	bls.w	800eb78 <_strtod_l+0x2a8>
 800ea74:	961b      	str	r6, [sp, #108]	; 0x6c
 800ea76:	2500      	movs	r5, #0
 800ea78:	e09e      	b.n	800ebb8 <_strtod_l+0x2e8>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e7c9      	b.n	800ea12 <_strtod_l+0x142>
 800ea7e:	f1bb 0f08 	cmp.w	fp, #8
 800ea82:	bfd5      	itete	le
 800ea84:	9906      	ldrle	r1, [sp, #24]
 800ea86:	9905      	ldrgt	r1, [sp, #20]
 800ea88:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ea90:	f100 0001 	add.w	r0, r0, #1
 800ea94:	bfd4      	ite	le
 800ea96:	9306      	strle	r3, [sp, #24]
 800ea98:	9305      	strgt	r3, [sp, #20]
 800ea9a:	f10b 0b01 	add.w	fp, fp, #1
 800ea9e:	901b      	str	r0, [sp, #108]	; 0x6c
 800eaa0:	e7bf      	b.n	800ea22 <_strtod_l+0x152>
 800eaa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eaa4:	191a      	adds	r2, r3, r4
 800eaa6:	921b      	str	r2, [sp, #108]	; 0x6c
 800eaa8:	5d1b      	ldrb	r3, [r3, r4]
 800eaaa:	f1bb 0f00 	cmp.w	fp, #0
 800eaae:	d036      	beq.n	800eb1e <_strtod_l+0x24e>
 800eab0:	465c      	mov	r4, fp
 800eab2:	9004      	str	r0, [sp, #16]
 800eab4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eab8:	2a09      	cmp	r2, #9
 800eaba:	d912      	bls.n	800eae2 <_strtod_l+0x212>
 800eabc:	2201      	movs	r2, #1
 800eabe:	e7c2      	b.n	800ea46 <_strtod_l+0x176>
 800eac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eac2:	3001      	adds	r0, #1
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	921b      	str	r2, [sp, #108]	; 0x6c
 800eac8:	785b      	ldrb	r3, [r3, #1]
 800eaca:	2b30      	cmp	r3, #48	; 0x30
 800eacc:	d0f8      	beq.n	800eac0 <_strtod_l+0x1f0>
 800eace:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ead2:	2a08      	cmp	r2, #8
 800ead4:	f200 84dc 	bhi.w	800f490 <_strtod_l+0xbc0>
 800ead8:	9004      	str	r0, [sp, #16]
 800eada:	2000      	movs	r0, #0
 800eadc:	4604      	mov	r4, r0
 800eade:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800eae0:	9208      	str	r2, [sp, #32]
 800eae2:	3b30      	subs	r3, #48	; 0x30
 800eae4:	f100 0201 	add.w	r2, r0, #1
 800eae8:	d013      	beq.n	800eb12 <_strtod_l+0x242>
 800eaea:	9904      	ldr	r1, [sp, #16]
 800eaec:	1905      	adds	r5, r0, r4
 800eaee:	4411      	add	r1, r2
 800eaf0:	9104      	str	r1, [sp, #16]
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	210a      	movs	r1, #10
 800eaf6:	42aa      	cmp	r2, r5
 800eaf8:	d113      	bne.n	800eb22 <_strtod_l+0x252>
 800eafa:	1822      	adds	r2, r4, r0
 800eafc:	2a08      	cmp	r2, #8
 800eafe:	f104 0401 	add.w	r4, r4, #1
 800eb02:	4404      	add	r4, r0
 800eb04:	dc1b      	bgt.n	800eb3e <_strtod_l+0x26e>
 800eb06:	220a      	movs	r2, #10
 800eb08:	9906      	ldr	r1, [sp, #24]
 800eb0a:	fb02 3301 	mla	r3, r2, r1, r3
 800eb0e:	9306      	str	r3, [sp, #24]
 800eb10:	2200      	movs	r2, #0
 800eb12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb14:	4610      	mov	r0, r2
 800eb16:	1c59      	adds	r1, r3, #1
 800eb18:	911b      	str	r1, [sp, #108]	; 0x6c
 800eb1a:	785b      	ldrb	r3, [r3, #1]
 800eb1c:	e7ca      	b.n	800eab4 <_strtod_l+0x1e4>
 800eb1e:	4658      	mov	r0, fp
 800eb20:	e7d3      	b.n	800eaca <_strtod_l+0x1fa>
 800eb22:	2a08      	cmp	r2, #8
 800eb24:	dc04      	bgt.n	800eb30 <_strtod_l+0x260>
 800eb26:	9f06      	ldr	r7, [sp, #24]
 800eb28:	434f      	muls	r7, r1
 800eb2a:	9706      	str	r7, [sp, #24]
 800eb2c:	3201      	adds	r2, #1
 800eb2e:	e7e2      	b.n	800eaf6 <_strtod_l+0x226>
 800eb30:	1c57      	adds	r7, r2, #1
 800eb32:	2f10      	cmp	r7, #16
 800eb34:	bfde      	ittt	le
 800eb36:	9f05      	ldrle	r7, [sp, #20]
 800eb38:	434f      	mulle	r7, r1
 800eb3a:	9705      	strle	r7, [sp, #20]
 800eb3c:	e7f6      	b.n	800eb2c <_strtod_l+0x25c>
 800eb3e:	2c10      	cmp	r4, #16
 800eb40:	bfdf      	itttt	le
 800eb42:	220a      	movle	r2, #10
 800eb44:	9905      	ldrle	r1, [sp, #20]
 800eb46:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb4a:	9305      	strle	r3, [sp, #20]
 800eb4c:	e7e0      	b.n	800eb10 <_strtod_l+0x240>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	2201      	movs	r2, #1
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	e77c      	b.n	800ea50 <_strtod_l+0x180>
 800eb56:	2700      	movs	r7, #0
 800eb58:	1cb3      	adds	r3, r6, #2
 800eb5a:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb5c:	78b3      	ldrb	r3, [r6, #2]
 800eb5e:	e784      	b.n	800ea6a <_strtod_l+0x19a>
 800eb60:	2701      	movs	r7, #1
 800eb62:	e7f9      	b.n	800eb58 <_strtod_l+0x288>
 800eb64:	08012a78 	.word	0x08012a78
 800eb68:	08012828 	.word	0x08012828
 800eb6c:	7ff00000 	.word	0x7ff00000
 800eb70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb72:	1c59      	adds	r1, r3, #1
 800eb74:	911b      	str	r1, [sp, #108]	; 0x6c
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	2b30      	cmp	r3, #48	; 0x30
 800eb7a:	d0f9      	beq.n	800eb70 <_strtod_l+0x2a0>
 800eb7c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800eb80:	2908      	cmp	r1, #8
 800eb82:	f63f af78 	bhi.w	800ea76 <_strtod_l+0x1a6>
 800eb86:	f04f 0e0a 	mov.w	lr, #10
 800eb8a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800eb8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb90:	9309      	str	r3, [sp, #36]	; 0x24
 800eb92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb94:	1c59      	adds	r1, r3, #1
 800eb96:	911b      	str	r1, [sp, #108]	; 0x6c
 800eb98:	785b      	ldrb	r3, [r3, #1]
 800eb9a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800eb9e:	2d09      	cmp	r5, #9
 800eba0:	d935      	bls.n	800ec0e <_strtod_l+0x33e>
 800eba2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800eba4:	1b49      	subs	r1, r1, r5
 800eba6:	2908      	cmp	r1, #8
 800eba8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ebac:	dc02      	bgt.n	800ebb4 <_strtod_l+0x2e4>
 800ebae:	4565      	cmp	r5, ip
 800ebb0:	bfa8      	it	ge
 800ebb2:	4665      	movge	r5, ip
 800ebb4:	b107      	cbz	r7, 800ebb8 <_strtod_l+0x2e8>
 800ebb6:	426d      	negs	r5, r5
 800ebb8:	2c00      	cmp	r4, #0
 800ebba:	d14c      	bne.n	800ec56 <_strtod_l+0x386>
 800ebbc:	9907      	ldr	r1, [sp, #28]
 800ebbe:	4301      	orrs	r1, r0
 800ebc0:	f47f aec7 	bne.w	800e952 <_strtod_l+0x82>
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	f47f aee0 	bne.w	800e98a <_strtod_l+0xba>
 800ebca:	2b69      	cmp	r3, #105	; 0x69
 800ebcc:	d026      	beq.n	800ec1c <_strtod_l+0x34c>
 800ebce:	dc23      	bgt.n	800ec18 <_strtod_l+0x348>
 800ebd0:	2b49      	cmp	r3, #73	; 0x49
 800ebd2:	d023      	beq.n	800ec1c <_strtod_l+0x34c>
 800ebd4:	2b4e      	cmp	r3, #78	; 0x4e
 800ebd6:	f47f aed8 	bne.w	800e98a <_strtod_l+0xba>
 800ebda:	499c      	ldr	r1, [pc, #624]	; (800ee4c <_strtod_l+0x57c>)
 800ebdc:	a81b      	add	r0, sp, #108	; 0x6c
 800ebde:	f001 fe2b 	bl	8010838 <__match>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	f43f aed1 	beq.w	800e98a <_strtod_l+0xba>
 800ebe8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b28      	cmp	r3, #40	; 0x28
 800ebee:	d12c      	bne.n	800ec4a <_strtod_l+0x37a>
 800ebf0:	4997      	ldr	r1, [pc, #604]	; (800ee50 <_strtod_l+0x580>)
 800ebf2:	aa1e      	add	r2, sp, #120	; 0x78
 800ebf4:	a81b      	add	r0, sp, #108	; 0x6c
 800ebf6:	f001 fe33 	bl	8010860 <__hexnan>
 800ebfa:	2805      	cmp	r0, #5
 800ebfc:	d125      	bne.n	800ec4a <_strtod_l+0x37a>
 800ebfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec00:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ec04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ec08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ec0c:	e6a1      	b.n	800e952 <_strtod_l+0x82>
 800ec0e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800ec12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ec16:	e7bc      	b.n	800eb92 <_strtod_l+0x2c2>
 800ec18:	2b6e      	cmp	r3, #110	; 0x6e
 800ec1a:	e7dc      	b.n	800ebd6 <_strtod_l+0x306>
 800ec1c:	498d      	ldr	r1, [pc, #564]	; (800ee54 <_strtod_l+0x584>)
 800ec1e:	a81b      	add	r0, sp, #108	; 0x6c
 800ec20:	f001 fe0a 	bl	8010838 <__match>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	f43f aeb0 	beq.w	800e98a <_strtod_l+0xba>
 800ec2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec2c:	498a      	ldr	r1, [pc, #552]	; (800ee58 <_strtod_l+0x588>)
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	a81b      	add	r0, sp, #108	; 0x6c
 800ec32:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec34:	f001 fe00 	bl	8010838 <__match>
 800ec38:	b910      	cbnz	r0, 800ec40 <_strtod_l+0x370>
 800ec3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec40:	f04f 0800 	mov.w	r8, #0
 800ec44:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ee68 <_strtod_l+0x598>
 800ec48:	e683      	b.n	800e952 <_strtod_l+0x82>
 800ec4a:	4884      	ldr	r0, [pc, #528]	; (800ee5c <_strtod_l+0x58c>)
 800ec4c:	f002 fcf6 	bl	801163c <nan>
 800ec50:	4680      	mov	r8, r0
 800ec52:	4689      	mov	r9, r1
 800ec54:	e67d      	b.n	800e952 <_strtod_l+0x82>
 800ec56:	9b04      	ldr	r3, [sp, #16]
 800ec58:	f1bb 0f00 	cmp.w	fp, #0
 800ec5c:	bf08      	it	eq
 800ec5e:	46a3      	moveq	fp, r4
 800ec60:	1aeb      	subs	r3, r5, r3
 800ec62:	2c10      	cmp	r4, #16
 800ec64:	9806      	ldr	r0, [sp, #24]
 800ec66:	4626      	mov	r6, r4
 800ec68:	9307      	str	r3, [sp, #28]
 800ec6a:	bfa8      	it	ge
 800ec6c:	2610      	movge	r6, #16
 800ec6e:	f7f1 fbff 	bl	8000470 <__aeabi_ui2d>
 800ec72:	2c09      	cmp	r4, #9
 800ec74:	4680      	mov	r8, r0
 800ec76:	4689      	mov	r9, r1
 800ec78:	dd13      	ble.n	800eca2 <_strtod_l+0x3d2>
 800ec7a:	4b79      	ldr	r3, [pc, #484]	; (800ee60 <_strtod_l+0x590>)
 800ec7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ec84:	f7f1 fc6e 	bl	8000564 <__aeabi_dmul>
 800ec88:	4680      	mov	r8, r0
 800ec8a:	9805      	ldr	r0, [sp, #20]
 800ec8c:	4689      	mov	r9, r1
 800ec8e:	f7f1 fbef 	bl	8000470 <__aeabi_ui2d>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	4640      	mov	r0, r8
 800ec98:	4649      	mov	r1, r9
 800ec9a:	f7f1 faad 	bl	80001f8 <__adddf3>
 800ec9e:	4680      	mov	r8, r0
 800eca0:	4689      	mov	r9, r1
 800eca2:	2c0f      	cmp	r4, #15
 800eca4:	dc36      	bgt.n	800ed14 <_strtod_l+0x444>
 800eca6:	9b07      	ldr	r3, [sp, #28]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f43f ae52 	beq.w	800e952 <_strtod_l+0x82>
 800ecae:	dd22      	ble.n	800ecf6 <_strtod_l+0x426>
 800ecb0:	2b16      	cmp	r3, #22
 800ecb2:	dc09      	bgt.n	800ecc8 <_strtod_l+0x3f8>
 800ecb4:	4c6a      	ldr	r4, [pc, #424]	; (800ee60 <_strtod_l+0x590>)
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800ecbc:	464b      	mov	r3, r9
 800ecbe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ecc2:	f7f1 fc4f 	bl	8000564 <__aeabi_dmul>
 800ecc6:	e7c3      	b.n	800ec50 <_strtod_l+0x380>
 800ecc8:	9a07      	ldr	r2, [sp, #28]
 800ecca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	db20      	blt.n	800ed14 <_strtod_l+0x444>
 800ecd2:	4d63      	ldr	r5, [pc, #396]	; (800ee60 <_strtod_l+0x590>)
 800ecd4:	f1c4 040f 	rsb	r4, r4, #15
 800ecd8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ecdc:	4642      	mov	r2, r8
 800ecde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ece2:	464b      	mov	r3, r9
 800ece4:	f7f1 fc3e 	bl	8000564 <__aeabi_dmul>
 800ece8:	9b07      	ldr	r3, [sp, #28]
 800ecea:	1b1c      	subs	r4, r3, r4
 800ecec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ecf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecf4:	e7e5      	b.n	800ecc2 <_strtod_l+0x3f2>
 800ecf6:	9b07      	ldr	r3, [sp, #28]
 800ecf8:	3316      	adds	r3, #22
 800ecfa:	db0b      	blt.n	800ed14 <_strtod_l+0x444>
 800ecfc:	9b04      	ldr	r3, [sp, #16]
 800ecfe:	4a58      	ldr	r2, [pc, #352]	; (800ee60 <_strtod_l+0x590>)
 800ed00:	1b5d      	subs	r5, r3, r5
 800ed02:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ed06:	4640      	mov	r0, r8
 800ed08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	f7f1 fd53 	bl	80007b8 <__aeabi_ddiv>
 800ed12:	e79d      	b.n	800ec50 <_strtod_l+0x380>
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	1ba6      	subs	r6, r4, r6
 800ed18:	441e      	add	r6, r3
 800ed1a:	2e00      	cmp	r6, #0
 800ed1c:	dd71      	ble.n	800ee02 <_strtod_l+0x532>
 800ed1e:	f016 030f 	ands.w	r3, r6, #15
 800ed22:	d00a      	beq.n	800ed3a <_strtod_l+0x46a>
 800ed24:	494e      	ldr	r1, [pc, #312]	; (800ee60 <_strtod_l+0x590>)
 800ed26:	4642      	mov	r2, r8
 800ed28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed30:	464b      	mov	r3, r9
 800ed32:	f7f1 fc17 	bl	8000564 <__aeabi_dmul>
 800ed36:	4680      	mov	r8, r0
 800ed38:	4689      	mov	r9, r1
 800ed3a:	f036 060f 	bics.w	r6, r6, #15
 800ed3e:	d050      	beq.n	800ede2 <_strtod_l+0x512>
 800ed40:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ed44:	dd27      	ble.n	800ed96 <_strtod_l+0x4c6>
 800ed46:	f04f 0b00 	mov.w	fp, #0
 800ed4a:	f8cd b010 	str.w	fp, [sp, #16]
 800ed4e:	f8cd b020 	str.w	fp, [sp, #32]
 800ed52:	f8cd b018 	str.w	fp, [sp, #24]
 800ed56:	2322      	movs	r3, #34	; 0x22
 800ed58:	f04f 0800 	mov.w	r8, #0
 800ed5c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ee68 <_strtod_l+0x598>
 800ed60:	f8ca 3000 	str.w	r3, [sl]
 800ed64:	9b08      	ldr	r3, [sp, #32]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f43f adf3 	beq.w	800e952 <_strtod_l+0x82>
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed70:	f001 fe82 	bl	8010a78 <_Bfree>
 800ed74:	4650      	mov	r0, sl
 800ed76:	9906      	ldr	r1, [sp, #24]
 800ed78:	f001 fe7e 	bl	8010a78 <_Bfree>
 800ed7c:	4650      	mov	r0, sl
 800ed7e:	9904      	ldr	r1, [sp, #16]
 800ed80:	f001 fe7a 	bl	8010a78 <_Bfree>
 800ed84:	4650      	mov	r0, sl
 800ed86:	9908      	ldr	r1, [sp, #32]
 800ed88:	f001 fe76 	bl	8010a78 <_Bfree>
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	4650      	mov	r0, sl
 800ed90:	f001 fe72 	bl	8010a78 <_Bfree>
 800ed94:	e5dd      	b.n	800e952 <_strtod_l+0x82>
 800ed96:	2300      	movs	r3, #0
 800ed98:	4640      	mov	r0, r8
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	461f      	mov	r7, r3
 800ed9e:	1136      	asrs	r6, r6, #4
 800eda0:	2e01      	cmp	r6, #1
 800eda2:	dc21      	bgt.n	800ede8 <_strtod_l+0x518>
 800eda4:	b10b      	cbz	r3, 800edaa <_strtod_l+0x4da>
 800eda6:	4680      	mov	r8, r0
 800eda8:	4689      	mov	r9, r1
 800edaa:	4b2e      	ldr	r3, [pc, #184]	; (800ee64 <_strtod_l+0x594>)
 800edac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800edb0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800edb4:	4642      	mov	r2, r8
 800edb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800edba:	464b      	mov	r3, r9
 800edbc:	f7f1 fbd2 	bl	8000564 <__aeabi_dmul>
 800edc0:	4b29      	ldr	r3, [pc, #164]	; (800ee68 <_strtod_l+0x598>)
 800edc2:	460a      	mov	r2, r1
 800edc4:	400b      	ands	r3, r1
 800edc6:	4929      	ldr	r1, [pc, #164]	; (800ee6c <_strtod_l+0x59c>)
 800edc8:	4680      	mov	r8, r0
 800edca:	428b      	cmp	r3, r1
 800edcc:	d8bb      	bhi.n	800ed46 <_strtod_l+0x476>
 800edce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800edd2:	428b      	cmp	r3, r1
 800edd4:	bf86      	itte	hi
 800edd6:	f04f 38ff 	movhi.w	r8, #4294967295
 800edda:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ee70 <_strtod_l+0x5a0>
 800edde:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ede2:	2300      	movs	r3, #0
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	e07e      	b.n	800eee6 <_strtod_l+0x616>
 800ede8:	07f2      	lsls	r2, r6, #31
 800edea:	d507      	bpl.n	800edfc <_strtod_l+0x52c>
 800edec:	4b1d      	ldr	r3, [pc, #116]	; (800ee64 <_strtod_l+0x594>)
 800edee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	f7f1 fbb5 	bl	8000564 <__aeabi_dmul>
 800edfa:	2301      	movs	r3, #1
 800edfc:	3701      	adds	r7, #1
 800edfe:	1076      	asrs	r6, r6, #1
 800ee00:	e7ce      	b.n	800eda0 <_strtod_l+0x4d0>
 800ee02:	d0ee      	beq.n	800ede2 <_strtod_l+0x512>
 800ee04:	4276      	negs	r6, r6
 800ee06:	f016 020f 	ands.w	r2, r6, #15
 800ee0a:	d00a      	beq.n	800ee22 <_strtod_l+0x552>
 800ee0c:	4b14      	ldr	r3, [pc, #80]	; (800ee60 <_strtod_l+0x590>)
 800ee0e:	4640      	mov	r0, r8
 800ee10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee14:	4649      	mov	r1, r9
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	f7f1 fccd 	bl	80007b8 <__aeabi_ddiv>
 800ee1e:	4680      	mov	r8, r0
 800ee20:	4689      	mov	r9, r1
 800ee22:	1136      	asrs	r6, r6, #4
 800ee24:	d0dd      	beq.n	800ede2 <_strtod_l+0x512>
 800ee26:	2e1f      	cmp	r6, #31
 800ee28:	dd24      	ble.n	800ee74 <_strtod_l+0x5a4>
 800ee2a:	f04f 0b00 	mov.w	fp, #0
 800ee2e:	f8cd b010 	str.w	fp, [sp, #16]
 800ee32:	f8cd b020 	str.w	fp, [sp, #32]
 800ee36:	f8cd b018 	str.w	fp, [sp, #24]
 800ee3a:	2322      	movs	r3, #34	; 0x22
 800ee3c:	f04f 0800 	mov.w	r8, #0
 800ee40:	f04f 0900 	mov.w	r9, #0
 800ee44:	f8ca 3000 	str.w	r3, [sl]
 800ee48:	e78c      	b.n	800ed64 <_strtod_l+0x494>
 800ee4a:	bf00      	nop
 800ee4c:	080127f9 	.word	0x080127f9
 800ee50:	0801283c 	.word	0x0801283c
 800ee54:	080127f1 	.word	0x080127f1
 800ee58:	0801297c 	.word	0x0801297c
 800ee5c:	08012c38 	.word	0x08012c38
 800ee60:	08012b18 	.word	0x08012b18
 800ee64:	08012af0 	.word	0x08012af0
 800ee68:	7ff00000 	.word	0x7ff00000
 800ee6c:	7ca00000 	.word	0x7ca00000
 800ee70:	7fefffff 	.word	0x7fefffff
 800ee74:	f016 0310 	ands.w	r3, r6, #16
 800ee78:	bf18      	it	ne
 800ee7a:	236a      	movne	r3, #106	; 0x6a
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	9305      	str	r3, [sp, #20]
 800ee80:	4649      	mov	r1, r9
 800ee82:	2300      	movs	r3, #0
 800ee84:	4fb2      	ldr	r7, [pc, #712]	; (800f150 <_strtod_l+0x880>)
 800ee86:	07f2      	lsls	r2, r6, #31
 800ee88:	d504      	bpl.n	800ee94 <_strtod_l+0x5c4>
 800ee8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee8e:	f7f1 fb69 	bl	8000564 <__aeabi_dmul>
 800ee92:	2301      	movs	r3, #1
 800ee94:	1076      	asrs	r6, r6, #1
 800ee96:	f107 0708 	add.w	r7, r7, #8
 800ee9a:	d1f4      	bne.n	800ee86 <_strtod_l+0x5b6>
 800ee9c:	b10b      	cbz	r3, 800eea2 <_strtod_l+0x5d2>
 800ee9e:	4680      	mov	r8, r0
 800eea0:	4689      	mov	r9, r1
 800eea2:	9b05      	ldr	r3, [sp, #20]
 800eea4:	b1bb      	cbz	r3, 800eed6 <_strtod_l+0x606>
 800eea6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800eeaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	4649      	mov	r1, r9
 800eeb2:	dd10      	ble.n	800eed6 <_strtod_l+0x606>
 800eeb4:	2b1f      	cmp	r3, #31
 800eeb6:	f340 812b 	ble.w	800f110 <_strtod_l+0x840>
 800eeba:	2b34      	cmp	r3, #52	; 0x34
 800eebc:	bfd8      	it	le
 800eebe:	f04f 32ff 	movle.w	r2, #4294967295
 800eec2:	f04f 0800 	mov.w	r8, #0
 800eec6:	bfcf      	iteee	gt
 800eec8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800eecc:	3b20      	suble	r3, #32
 800eece:	fa02 f303 	lslle.w	r3, r2, r3
 800eed2:	ea03 0901 	andle.w	r9, r3, r1
 800eed6:	2200      	movs	r2, #0
 800eed8:	2300      	movs	r3, #0
 800eeda:	4640      	mov	r0, r8
 800eedc:	4649      	mov	r1, r9
 800eede:	f7f1 fda9 	bl	8000a34 <__aeabi_dcmpeq>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d1a1      	bne.n	800ee2a <_strtod_l+0x55a>
 800eee6:	9b06      	ldr	r3, [sp, #24]
 800eee8:	465a      	mov	r2, fp
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	4650      	mov	r0, sl
 800eeee:	4623      	mov	r3, r4
 800eef0:	9908      	ldr	r1, [sp, #32]
 800eef2:	f001 fe2d 	bl	8010b50 <__s2b>
 800eef6:	9008      	str	r0, [sp, #32]
 800eef8:	2800      	cmp	r0, #0
 800eefa:	f43f af24 	beq.w	800ed46 <_strtod_l+0x476>
 800eefe:	9b04      	ldr	r3, [sp, #16]
 800ef00:	f04f 0b00 	mov.w	fp, #0
 800ef04:	1b5d      	subs	r5, r3, r5
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	f8cd b010 	str.w	fp, [sp, #16]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bfb4      	ite	lt
 800ef10:	462b      	movlt	r3, r5
 800ef12:	2300      	movge	r3, #0
 800ef14:	930e      	str	r3, [sp, #56]	; 0x38
 800ef16:	9b07      	ldr	r3, [sp, #28]
 800ef18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef1c:	9316      	str	r3, [sp, #88]	; 0x58
 800ef1e:	9b08      	ldr	r3, [sp, #32]
 800ef20:	4650      	mov	r0, sl
 800ef22:	6859      	ldr	r1, [r3, #4]
 800ef24:	f001 fd68 	bl	80109f8 <_Balloc>
 800ef28:	9006      	str	r0, [sp, #24]
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	f43f af13 	beq.w	800ed56 <_strtod_l+0x486>
 800ef30:	9b08      	ldr	r3, [sp, #32]
 800ef32:	300c      	adds	r0, #12
 800ef34:	691a      	ldr	r2, [r3, #16]
 800ef36:	f103 010c 	add.w	r1, r3, #12
 800ef3a:	3202      	adds	r2, #2
 800ef3c:	0092      	lsls	r2, r2, #2
 800ef3e:	f7fe fd41 	bl	800d9c4 <memcpy>
 800ef42:	ab1e      	add	r3, sp, #120	; 0x78
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	ab1d      	add	r3, sp, #116	; 0x74
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4642      	mov	r2, r8
 800ef4c:	464b      	mov	r3, r9
 800ef4e:	4650      	mov	r0, sl
 800ef50:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ef54:	f002 f93a 	bl	80111cc <__d2b>
 800ef58:	901c      	str	r0, [sp, #112]	; 0x70
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	f43f aefb 	beq.w	800ed56 <_strtod_l+0x486>
 800ef60:	2101      	movs	r1, #1
 800ef62:	4650      	mov	r0, sl
 800ef64:	f001 fe8c 	bl	8010c80 <__i2b>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	9004      	str	r0, [sp, #16]
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	f43f aef2 	beq.w	800ed56 <_strtod_l+0x486>
 800ef72:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ef74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	bfab      	itete	ge
 800ef7a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ef7c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ef7e:	18ee      	addge	r6, r5, r3
 800ef80:	1b5c      	sublt	r4, r3, r5
 800ef82:	9b05      	ldr	r3, [sp, #20]
 800ef84:	bfa8      	it	ge
 800ef86:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ef88:	eba5 0503 	sub.w	r5, r5, r3
 800ef8c:	4415      	add	r5, r2
 800ef8e:	4b71      	ldr	r3, [pc, #452]	; (800f154 <_strtod_l+0x884>)
 800ef90:	f105 35ff 	add.w	r5, r5, #4294967295
 800ef94:	bfb8      	it	lt
 800ef96:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ef98:	429d      	cmp	r5, r3
 800ef9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ef9e:	f280 80c9 	bge.w	800f134 <_strtod_l+0x864>
 800efa2:	1b5b      	subs	r3, r3, r5
 800efa4:	2b1f      	cmp	r3, #31
 800efa6:	f04f 0701 	mov.w	r7, #1
 800efaa:	eba2 0203 	sub.w	r2, r2, r3
 800efae:	f300 80b6 	bgt.w	800f11e <_strtod_l+0x84e>
 800efb2:	2500      	movs	r5, #0
 800efb4:	fa07 f303 	lsl.w	r3, r7, r3
 800efb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800efba:	18b7      	adds	r7, r6, r2
 800efbc:	9b05      	ldr	r3, [sp, #20]
 800efbe:	42be      	cmp	r6, r7
 800efc0:	4414      	add	r4, r2
 800efc2:	441c      	add	r4, r3
 800efc4:	4633      	mov	r3, r6
 800efc6:	bfa8      	it	ge
 800efc8:	463b      	movge	r3, r7
 800efca:	42a3      	cmp	r3, r4
 800efcc:	bfa8      	it	ge
 800efce:	4623      	movge	r3, r4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	bfc2      	ittt	gt
 800efd4:	1aff      	subgt	r7, r7, r3
 800efd6:	1ae4      	subgt	r4, r4, r3
 800efd8:	1af6      	subgt	r6, r6, r3
 800efda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dd17      	ble.n	800f010 <_strtod_l+0x740>
 800efe0:	461a      	mov	r2, r3
 800efe2:	4650      	mov	r0, sl
 800efe4:	9904      	ldr	r1, [sp, #16]
 800efe6:	f001 ff05 	bl	8010df4 <__pow5mult>
 800efea:	9004      	str	r0, [sp, #16]
 800efec:	2800      	cmp	r0, #0
 800efee:	f43f aeb2 	beq.w	800ed56 <_strtod_l+0x486>
 800eff2:	4601      	mov	r1, r0
 800eff4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eff6:	4650      	mov	r0, sl
 800eff8:	f001 fe58 	bl	8010cac <__multiply>
 800effc:	9009      	str	r0, [sp, #36]	; 0x24
 800effe:	2800      	cmp	r0, #0
 800f000:	f43f aea9 	beq.w	800ed56 <_strtod_l+0x486>
 800f004:	4650      	mov	r0, sl
 800f006:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f008:	f001 fd36 	bl	8010a78 <_Bfree>
 800f00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00e:	931c      	str	r3, [sp, #112]	; 0x70
 800f010:	2f00      	cmp	r7, #0
 800f012:	f300 8093 	bgt.w	800f13c <_strtod_l+0x86c>
 800f016:	9b07      	ldr	r3, [sp, #28]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	dd08      	ble.n	800f02e <_strtod_l+0x75e>
 800f01c:	4650      	mov	r0, sl
 800f01e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f020:	9906      	ldr	r1, [sp, #24]
 800f022:	f001 fee7 	bl	8010df4 <__pow5mult>
 800f026:	9006      	str	r0, [sp, #24]
 800f028:	2800      	cmp	r0, #0
 800f02a:	f43f ae94 	beq.w	800ed56 <_strtod_l+0x486>
 800f02e:	2c00      	cmp	r4, #0
 800f030:	dd08      	ble.n	800f044 <_strtod_l+0x774>
 800f032:	4622      	mov	r2, r4
 800f034:	4650      	mov	r0, sl
 800f036:	9906      	ldr	r1, [sp, #24]
 800f038:	f001 ff36 	bl	8010ea8 <__lshift>
 800f03c:	9006      	str	r0, [sp, #24]
 800f03e:	2800      	cmp	r0, #0
 800f040:	f43f ae89 	beq.w	800ed56 <_strtod_l+0x486>
 800f044:	2e00      	cmp	r6, #0
 800f046:	dd08      	ble.n	800f05a <_strtod_l+0x78a>
 800f048:	4632      	mov	r2, r6
 800f04a:	4650      	mov	r0, sl
 800f04c:	9904      	ldr	r1, [sp, #16]
 800f04e:	f001 ff2b 	bl	8010ea8 <__lshift>
 800f052:	9004      	str	r0, [sp, #16]
 800f054:	2800      	cmp	r0, #0
 800f056:	f43f ae7e 	beq.w	800ed56 <_strtod_l+0x486>
 800f05a:	4650      	mov	r0, sl
 800f05c:	9a06      	ldr	r2, [sp, #24]
 800f05e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f060:	f001 ffaa 	bl	8010fb8 <__mdiff>
 800f064:	4683      	mov	fp, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	f43f ae75 	beq.w	800ed56 <_strtod_l+0x486>
 800f06c:	2400      	movs	r4, #0
 800f06e:	68c3      	ldr	r3, [r0, #12]
 800f070:	9904      	ldr	r1, [sp, #16]
 800f072:	60c4      	str	r4, [r0, #12]
 800f074:	930d      	str	r3, [sp, #52]	; 0x34
 800f076:	f001 ff83 	bl	8010f80 <__mcmp>
 800f07a:	42a0      	cmp	r0, r4
 800f07c:	da70      	bge.n	800f160 <_strtod_l+0x890>
 800f07e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f080:	ea53 0308 	orrs.w	r3, r3, r8
 800f084:	f040 8096 	bne.w	800f1b4 <_strtod_l+0x8e4>
 800f088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 8091 	bne.w	800f1b4 <_strtod_l+0x8e4>
 800f092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f096:	0d1b      	lsrs	r3, r3, #20
 800f098:	051b      	lsls	r3, r3, #20
 800f09a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f09e:	f240 8089 	bls.w	800f1b4 <_strtod_l+0x8e4>
 800f0a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f0a6:	b923      	cbnz	r3, 800f0b2 <_strtod_l+0x7e2>
 800f0a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	f340 8081 	ble.w	800f1b4 <_strtod_l+0x8e4>
 800f0b2:	4659      	mov	r1, fp
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	4650      	mov	r0, sl
 800f0b8:	f001 fef6 	bl	8010ea8 <__lshift>
 800f0bc:	9904      	ldr	r1, [sp, #16]
 800f0be:	4683      	mov	fp, r0
 800f0c0:	f001 ff5e 	bl	8010f80 <__mcmp>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	dd75      	ble.n	800f1b4 <_strtod_l+0x8e4>
 800f0c8:	9905      	ldr	r1, [sp, #20]
 800f0ca:	464b      	mov	r3, r9
 800f0cc:	4a22      	ldr	r2, [pc, #136]	; (800f158 <_strtod_l+0x888>)
 800f0ce:	2900      	cmp	r1, #0
 800f0d0:	f000 8091 	beq.w	800f1f6 <_strtod_l+0x926>
 800f0d4:	ea02 0109 	and.w	r1, r2, r9
 800f0d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f0dc:	f300 808b 	bgt.w	800f1f6 <_strtod_l+0x926>
 800f0e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f0e4:	f77f aea9 	ble.w	800ee3a <_strtod_l+0x56a>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4a1c      	ldr	r2, [pc, #112]	; (800f15c <_strtod_l+0x88c>)
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f0f2:	4649      	mov	r1, r9
 800f0f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f0f8:	f7f1 fa34 	bl	8000564 <__aeabi_dmul>
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4303      	orrs	r3, r0
 800f100:	bf08      	it	eq
 800f102:	2322      	moveq	r3, #34	; 0x22
 800f104:	4680      	mov	r8, r0
 800f106:	4689      	mov	r9, r1
 800f108:	bf08      	it	eq
 800f10a:	f8ca 3000 	streq.w	r3, [sl]
 800f10e:	e62d      	b.n	800ed6c <_strtod_l+0x49c>
 800f110:	f04f 32ff 	mov.w	r2, #4294967295
 800f114:	fa02 f303 	lsl.w	r3, r2, r3
 800f118:	ea03 0808 	and.w	r8, r3, r8
 800f11c:	e6db      	b.n	800eed6 <_strtod_l+0x606>
 800f11e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f122:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f126:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f12a:	35e2      	adds	r5, #226	; 0xe2
 800f12c:	fa07 f505 	lsl.w	r5, r7, r5
 800f130:	970f      	str	r7, [sp, #60]	; 0x3c
 800f132:	e742      	b.n	800efba <_strtod_l+0x6ea>
 800f134:	2301      	movs	r3, #1
 800f136:	2500      	movs	r5, #0
 800f138:	930f      	str	r3, [sp, #60]	; 0x3c
 800f13a:	e73e      	b.n	800efba <_strtod_l+0x6ea>
 800f13c:	463a      	mov	r2, r7
 800f13e:	4650      	mov	r0, sl
 800f140:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f142:	f001 feb1 	bl	8010ea8 <__lshift>
 800f146:	901c      	str	r0, [sp, #112]	; 0x70
 800f148:	2800      	cmp	r0, #0
 800f14a:	f47f af64 	bne.w	800f016 <_strtod_l+0x746>
 800f14e:	e602      	b.n	800ed56 <_strtod_l+0x486>
 800f150:	08012850 	.word	0x08012850
 800f154:	fffffc02 	.word	0xfffffc02
 800f158:	7ff00000 	.word	0x7ff00000
 800f15c:	39500000 	.word	0x39500000
 800f160:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f164:	d166      	bne.n	800f234 <_strtod_l+0x964>
 800f166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f16c:	b35a      	cbz	r2, 800f1c6 <_strtod_l+0x8f6>
 800f16e:	4a9c      	ldr	r2, [pc, #624]	; (800f3e0 <_strtod_l+0xb10>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d12c      	bne.n	800f1ce <_strtod_l+0x8fe>
 800f174:	9b05      	ldr	r3, [sp, #20]
 800f176:	4640      	mov	r0, r8
 800f178:	b303      	cbz	r3, 800f1bc <_strtod_l+0x8ec>
 800f17a:	464b      	mov	r3, r9
 800f17c:	4a99      	ldr	r2, [pc, #612]	; (800f3e4 <_strtod_l+0xb14>)
 800f17e:	f04f 31ff 	mov.w	r1, #4294967295
 800f182:	401a      	ands	r2, r3
 800f184:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f188:	d81b      	bhi.n	800f1c2 <_strtod_l+0x8f2>
 800f18a:	0d12      	lsrs	r2, r2, #20
 800f18c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f190:	fa01 f303 	lsl.w	r3, r1, r3
 800f194:	4298      	cmp	r0, r3
 800f196:	d11a      	bne.n	800f1ce <_strtod_l+0x8fe>
 800f198:	4b93      	ldr	r3, [pc, #588]	; (800f3e8 <_strtod_l+0xb18>)
 800f19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d102      	bne.n	800f1a6 <_strtod_l+0x8d6>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	f43f add8 	beq.w	800ed56 <_strtod_l+0x486>
 800f1a6:	f04f 0800 	mov.w	r8, #0
 800f1aa:	4b8e      	ldr	r3, [pc, #568]	; (800f3e4 <_strtod_l+0xb14>)
 800f1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ae:	401a      	ands	r2, r3
 800f1b0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f1b4:	9b05      	ldr	r3, [sp, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d196      	bne.n	800f0e8 <_strtod_l+0x818>
 800f1ba:	e5d7      	b.n	800ed6c <_strtod_l+0x49c>
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	e7e8      	b.n	800f194 <_strtod_l+0x8c4>
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	e7e6      	b.n	800f194 <_strtod_l+0x8c4>
 800f1c6:	ea53 0308 	orrs.w	r3, r3, r8
 800f1ca:	f43f af7d 	beq.w	800f0c8 <_strtod_l+0x7f8>
 800f1ce:	b1e5      	cbz	r5, 800f20a <_strtod_l+0x93a>
 800f1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d2:	421d      	tst	r5, r3
 800f1d4:	d0ee      	beq.n	800f1b4 <_strtod_l+0x8e4>
 800f1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1d8:	4640      	mov	r0, r8
 800f1da:	4649      	mov	r1, r9
 800f1dc:	9a05      	ldr	r2, [sp, #20]
 800f1de:	b1c3      	cbz	r3, 800f212 <_strtod_l+0x942>
 800f1e0:	f7ff fb52 	bl	800e888 <sulp>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1ec:	f7f1 f804 	bl	80001f8 <__adddf3>
 800f1f0:	4680      	mov	r8, r0
 800f1f2:	4689      	mov	r9, r1
 800f1f4:	e7de      	b.n	800f1b4 <_strtod_l+0x8e4>
 800f1f6:	4013      	ands	r3, r2
 800f1f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f1fc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f200:	f04f 38ff 	mov.w	r8, #4294967295
 800f204:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f208:	e7d4      	b.n	800f1b4 <_strtod_l+0x8e4>
 800f20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f20c:	ea13 0f08 	tst.w	r3, r8
 800f210:	e7e0      	b.n	800f1d4 <_strtod_l+0x904>
 800f212:	f7ff fb39 	bl	800e888 <sulp>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f21e:	f7f0 ffe9 	bl	80001f4 <__aeabi_dsub>
 800f222:	2200      	movs	r2, #0
 800f224:	2300      	movs	r3, #0
 800f226:	4680      	mov	r8, r0
 800f228:	4689      	mov	r9, r1
 800f22a:	f7f1 fc03 	bl	8000a34 <__aeabi_dcmpeq>
 800f22e:	2800      	cmp	r0, #0
 800f230:	d0c0      	beq.n	800f1b4 <_strtod_l+0x8e4>
 800f232:	e602      	b.n	800ee3a <_strtod_l+0x56a>
 800f234:	4658      	mov	r0, fp
 800f236:	9904      	ldr	r1, [sp, #16]
 800f238:	f002 f824 	bl	8011284 <__ratio>
 800f23c:	2200      	movs	r2, #0
 800f23e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f242:	4606      	mov	r6, r0
 800f244:	460f      	mov	r7, r1
 800f246:	f7f1 fc09 	bl	8000a5c <__aeabi_dcmple>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d075      	beq.n	800f33a <_strtod_l+0xa6a>
 800f24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f250:	2b00      	cmp	r3, #0
 800f252:	d047      	beq.n	800f2e4 <_strtod_l+0xa14>
 800f254:	2600      	movs	r6, #0
 800f256:	4f65      	ldr	r7, [pc, #404]	; (800f3ec <_strtod_l+0xb1c>)
 800f258:	4d64      	ldr	r5, [pc, #400]	; (800f3ec <_strtod_l+0xb1c>)
 800f25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f260:	0d1b      	lsrs	r3, r3, #20
 800f262:	051b      	lsls	r3, r3, #20
 800f264:	930f      	str	r3, [sp, #60]	; 0x3c
 800f266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f268:	4b61      	ldr	r3, [pc, #388]	; (800f3f0 <_strtod_l+0xb20>)
 800f26a:	429a      	cmp	r2, r3
 800f26c:	f040 80c8 	bne.w	800f400 <_strtod_l+0xb30>
 800f270:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f274:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27a:	4640      	mov	r0, r8
 800f27c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f280:	4649      	mov	r1, r9
 800f282:	f001 ff29 	bl	80110d8 <__ulp>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	4630      	mov	r0, r6
 800f28c:	4639      	mov	r1, r7
 800f28e:	f7f1 f969 	bl	8000564 <__aeabi_dmul>
 800f292:	4642      	mov	r2, r8
 800f294:	464b      	mov	r3, r9
 800f296:	f7f0 ffaf 	bl	80001f8 <__adddf3>
 800f29a:	460b      	mov	r3, r1
 800f29c:	4951      	ldr	r1, [pc, #324]	; (800f3e4 <_strtod_l+0xb14>)
 800f29e:	4a55      	ldr	r2, [pc, #340]	; (800f3f4 <_strtod_l+0xb24>)
 800f2a0:	4019      	ands	r1, r3
 800f2a2:	4291      	cmp	r1, r2
 800f2a4:	4680      	mov	r8, r0
 800f2a6:	d95e      	bls.n	800f366 <_strtod_l+0xa96>
 800f2a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d103      	bne.n	800f2ba <_strtod_l+0x9ea>
 800f2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	f43f ad4e 	beq.w	800ed56 <_strtod_l+0x486>
 800f2ba:	f04f 38ff 	mov.w	r8, #4294967295
 800f2be:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800f3e8 <_strtod_l+0xb18>
 800f2c2:	4650      	mov	r0, sl
 800f2c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f2c6:	f001 fbd7 	bl	8010a78 <_Bfree>
 800f2ca:	4650      	mov	r0, sl
 800f2cc:	9906      	ldr	r1, [sp, #24]
 800f2ce:	f001 fbd3 	bl	8010a78 <_Bfree>
 800f2d2:	4650      	mov	r0, sl
 800f2d4:	9904      	ldr	r1, [sp, #16]
 800f2d6:	f001 fbcf 	bl	8010a78 <_Bfree>
 800f2da:	4659      	mov	r1, fp
 800f2dc:	4650      	mov	r0, sl
 800f2de:	f001 fbcb 	bl	8010a78 <_Bfree>
 800f2e2:	e61c      	b.n	800ef1e <_strtod_l+0x64e>
 800f2e4:	f1b8 0f00 	cmp.w	r8, #0
 800f2e8:	d119      	bne.n	800f31e <_strtod_l+0xa4e>
 800f2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2f0:	b9e3      	cbnz	r3, 800f32c <_strtod_l+0xa5c>
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	4639      	mov	r1, r7
 800f2f8:	4b3c      	ldr	r3, [pc, #240]	; (800f3ec <_strtod_l+0xb1c>)
 800f2fa:	f7f1 fba5 	bl	8000a48 <__aeabi_dcmplt>
 800f2fe:	b9c8      	cbnz	r0, 800f334 <_strtod_l+0xa64>
 800f300:	2200      	movs	r2, #0
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	4b3c      	ldr	r3, [pc, #240]	; (800f3f8 <_strtod_l+0xb28>)
 800f308:	f7f1 f92c 	bl	8000564 <__aeabi_dmul>
 800f30c:	4604      	mov	r4, r0
 800f30e:	460d      	mov	r5, r1
 800f310:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f314:	9418      	str	r4, [sp, #96]	; 0x60
 800f316:	9319      	str	r3, [sp, #100]	; 0x64
 800f318:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800f31c:	e79d      	b.n	800f25a <_strtod_l+0x98a>
 800f31e:	f1b8 0f01 	cmp.w	r8, #1
 800f322:	d103      	bne.n	800f32c <_strtod_l+0xa5c>
 800f324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	f43f ad87 	beq.w	800ee3a <_strtod_l+0x56a>
 800f32c:	2600      	movs	r6, #0
 800f32e:	2400      	movs	r4, #0
 800f330:	4f32      	ldr	r7, [pc, #200]	; (800f3fc <_strtod_l+0xb2c>)
 800f332:	e791      	b.n	800f258 <_strtod_l+0x988>
 800f334:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f336:	4d30      	ldr	r5, [pc, #192]	; (800f3f8 <_strtod_l+0xb28>)
 800f338:	e7ea      	b.n	800f310 <_strtod_l+0xa40>
 800f33a:	4b2f      	ldr	r3, [pc, #188]	; (800f3f8 <_strtod_l+0xb28>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	4630      	mov	r0, r6
 800f340:	4639      	mov	r1, r7
 800f342:	f7f1 f90f 	bl	8000564 <__aeabi_dmul>
 800f346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	b933      	cbnz	r3, 800f35c <_strtod_l+0xa8c>
 800f34e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f352:	9010      	str	r0, [sp, #64]	; 0x40
 800f354:	9311      	str	r3, [sp, #68]	; 0x44
 800f356:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f35a:	e77e      	b.n	800f25a <_strtod_l+0x98a>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f364:	e7f7      	b.n	800f356 <_strtod_l+0xa86>
 800f366:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f36a:	9b05      	ldr	r3, [sp, #20]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1a8      	bne.n	800f2c2 <_strtod_l+0x9f2>
 800f370:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f376:	0d1b      	lsrs	r3, r3, #20
 800f378:	051b      	lsls	r3, r3, #20
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d1a1      	bne.n	800f2c2 <_strtod_l+0x9f2>
 800f37e:	4620      	mov	r0, r4
 800f380:	4629      	mov	r1, r5
 800f382:	f7f1 fecd 	bl	8001120 <__aeabi_d2lz>
 800f386:	f7f1 f8bf 	bl	8000508 <__aeabi_l2d>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	4620      	mov	r0, r4
 800f390:	4629      	mov	r1, r5
 800f392:	f7f0 ff2f 	bl	80001f4 <__aeabi_dsub>
 800f396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f39c:	ea43 0308 	orr.w	r3, r3, r8
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	460d      	mov	r5, r1
 800f3a6:	d066      	beq.n	800f476 <_strtod_l+0xba6>
 800f3a8:	a309      	add	r3, pc, #36	; (adr r3, 800f3d0 <_strtod_l+0xb00>)
 800f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ae:	f7f1 fb4b 	bl	8000a48 <__aeabi_dcmplt>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	f47f acda 	bne.w	800ed6c <_strtod_l+0x49c>
 800f3b8:	a307      	add	r3, pc, #28	; (adr r3, 800f3d8 <_strtod_l+0xb08>)
 800f3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3be:	4620      	mov	r0, r4
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	f7f1 fb5f 	bl	8000a84 <__aeabi_dcmpgt>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	f43f af7b 	beq.w	800f2c2 <_strtod_l+0x9f2>
 800f3cc:	e4ce      	b.n	800ed6c <_strtod_l+0x49c>
 800f3ce:	bf00      	nop
 800f3d0:	94a03595 	.word	0x94a03595
 800f3d4:	3fdfffff 	.word	0x3fdfffff
 800f3d8:	35afe535 	.word	0x35afe535
 800f3dc:	3fe00000 	.word	0x3fe00000
 800f3e0:	000fffff 	.word	0x000fffff
 800f3e4:	7ff00000 	.word	0x7ff00000
 800f3e8:	7fefffff 	.word	0x7fefffff
 800f3ec:	3ff00000 	.word	0x3ff00000
 800f3f0:	7fe00000 	.word	0x7fe00000
 800f3f4:	7c9fffff 	.word	0x7c9fffff
 800f3f8:	3fe00000 	.word	0x3fe00000
 800f3fc:	bff00000 	.word	0xbff00000
 800f400:	9b05      	ldr	r3, [sp, #20]
 800f402:	b313      	cbz	r3, 800f44a <_strtod_l+0xb7a>
 800f404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f406:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f40a:	d81e      	bhi.n	800f44a <_strtod_l+0xb7a>
 800f40c:	a326      	add	r3, pc, #152	; (adr r3, 800f4a8 <_strtod_l+0xbd8>)
 800f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f412:	4620      	mov	r0, r4
 800f414:	4629      	mov	r1, r5
 800f416:	f7f1 fb21 	bl	8000a5c <__aeabi_dcmple>
 800f41a:	b190      	cbz	r0, 800f442 <_strtod_l+0xb72>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4620      	mov	r0, r4
 800f420:	f7f1 fb78 	bl	8000b14 <__aeabi_d2uiz>
 800f424:	2801      	cmp	r0, #1
 800f426:	bf38      	it	cc
 800f428:	2001      	movcc	r0, #1
 800f42a:	f7f1 f821 	bl	8000470 <__aeabi_ui2d>
 800f42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f430:	4604      	mov	r4, r0
 800f432:	460d      	mov	r5, r1
 800f434:	b9d3      	cbnz	r3, 800f46c <_strtod_l+0xb9c>
 800f436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f43a:	9012      	str	r0, [sp, #72]	; 0x48
 800f43c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f43e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800f442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f444:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800f448:	1a9f      	subs	r7, r3, r2
 800f44a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f44e:	f001 fe43 	bl	80110d8 <__ulp>
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4630      	mov	r0, r6
 800f458:	4639      	mov	r1, r7
 800f45a:	f7f1 f883 	bl	8000564 <__aeabi_dmul>
 800f45e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f462:	f7f0 fec9 	bl	80001f8 <__adddf3>
 800f466:	4680      	mov	r8, r0
 800f468:	4689      	mov	r9, r1
 800f46a:	e77e      	b.n	800f36a <_strtod_l+0xa9a>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800f474:	e7e3      	b.n	800f43e <_strtod_l+0xb6e>
 800f476:	a30e      	add	r3, pc, #56	; (adr r3, 800f4b0 <_strtod_l+0xbe0>)
 800f478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47c:	f7f1 fae4 	bl	8000a48 <__aeabi_dcmplt>
 800f480:	e7a1      	b.n	800f3c6 <_strtod_l+0xaf6>
 800f482:	2300      	movs	r3, #0
 800f484:	930c      	str	r3, [sp, #48]	; 0x30
 800f486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f488:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f48a:	6013      	str	r3, [r2, #0]
 800f48c:	f7ff ba65 	b.w	800e95a <_strtod_l+0x8a>
 800f490:	2b65      	cmp	r3, #101	; 0x65
 800f492:	f43f ab5c 	beq.w	800eb4e <_strtod_l+0x27e>
 800f496:	2b45      	cmp	r3, #69	; 0x45
 800f498:	f43f ab59 	beq.w	800eb4e <_strtod_l+0x27e>
 800f49c:	2201      	movs	r2, #1
 800f49e:	f7ff bb8d 	b.w	800ebbc <_strtod_l+0x2ec>
 800f4a2:	bf00      	nop
 800f4a4:	f3af 8000 	nop.w
 800f4a8:	ffc00000 	.word	0xffc00000
 800f4ac:	41dfffff 	.word	0x41dfffff
 800f4b0:	94a03595 	.word	0x94a03595
 800f4b4:	3fcfffff 	.word	0x3fcfffff

0800f4b8 <_strtod_r>:
 800f4b8:	4b01      	ldr	r3, [pc, #4]	; (800f4c0 <_strtod_r+0x8>)
 800f4ba:	f7ff ba09 	b.w	800e8d0 <_strtod_l>
 800f4be:	bf00      	nop
 800f4c0:	200000a4 	.word	0x200000a4

0800f4c4 <_strtol_l.isra.0>:
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ca:	4686      	mov	lr, r0
 800f4cc:	d001      	beq.n	800f4d2 <_strtol_l.isra.0+0xe>
 800f4ce:	2b24      	cmp	r3, #36	; 0x24
 800f4d0:	d906      	bls.n	800f4e0 <_strtol_l.isra.0+0x1c>
 800f4d2:	f7fe fa3d 	bl	800d950 <__errno>
 800f4d6:	2316      	movs	r3, #22
 800f4d8:	6003      	str	r3, [r0, #0]
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e0:	468c      	mov	ip, r1
 800f4e2:	4e3a      	ldr	r6, [pc, #232]	; (800f5cc <_strtol_l.isra.0+0x108>)
 800f4e4:	4660      	mov	r0, ip
 800f4e6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f4ea:	5da5      	ldrb	r5, [r4, r6]
 800f4ec:	f015 0508 	ands.w	r5, r5, #8
 800f4f0:	d1f8      	bne.n	800f4e4 <_strtol_l.isra.0+0x20>
 800f4f2:	2c2d      	cmp	r4, #45	; 0x2d
 800f4f4:	d133      	bne.n	800f55e <_strtol_l.isra.0+0x9a>
 800f4f6:	f04f 0801 	mov.w	r8, #1
 800f4fa:	f89c 4000 	ldrb.w	r4, [ip]
 800f4fe:	f100 0c02 	add.w	ip, r0, #2
 800f502:	2b00      	cmp	r3, #0
 800f504:	d05d      	beq.n	800f5c2 <_strtol_l.isra.0+0xfe>
 800f506:	2b10      	cmp	r3, #16
 800f508:	d10c      	bne.n	800f524 <_strtol_l.isra.0+0x60>
 800f50a:	2c30      	cmp	r4, #48	; 0x30
 800f50c:	d10a      	bne.n	800f524 <_strtol_l.isra.0+0x60>
 800f50e:	f89c 0000 	ldrb.w	r0, [ip]
 800f512:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f516:	2858      	cmp	r0, #88	; 0x58
 800f518:	d14e      	bne.n	800f5b8 <_strtol_l.isra.0+0xf4>
 800f51a:	2310      	movs	r3, #16
 800f51c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800f520:	f10c 0c02 	add.w	ip, ip, #2
 800f524:	2500      	movs	r5, #0
 800f526:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800f52a:	3f01      	subs	r7, #1
 800f52c:	fbb7 f9f3 	udiv	r9, r7, r3
 800f530:	4628      	mov	r0, r5
 800f532:	fb03 7a19 	mls	sl, r3, r9, r7
 800f536:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800f53a:	2e09      	cmp	r6, #9
 800f53c:	d818      	bhi.n	800f570 <_strtol_l.isra.0+0xac>
 800f53e:	4634      	mov	r4, r6
 800f540:	42a3      	cmp	r3, r4
 800f542:	dd24      	ble.n	800f58e <_strtol_l.isra.0+0xca>
 800f544:	2d00      	cmp	r5, #0
 800f546:	db1f      	blt.n	800f588 <_strtol_l.isra.0+0xc4>
 800f548:	4581      	cmp	r9, r0
 800f54a:	d31d      	bcc.n	800f588 <_strtol_l.isra.0+0xc4>
 800f54c:	d101      	bne.n	800f552 <_strtol_l.isra.0+0x8e>
 800f54e:	45a2      	cmp	sl, r4
 800f550:	db1a      	blt.n	800f588 <_strtol_l.isra.0+0xc4>
 800f552:	2501      	movs	r5, #1
 800f554:	fb00 4003 	mla	r0, r0, r3, r4
 800f558:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f55c:	e7eb      	b.n	800f536 <_strtol_l.isra.0+0x72>
 800f55e:	2c2b      	cmp	r4, #43	; 0x2b
 800f560:	bf08      	it	eq
 800f562:	f89c 4000 	ldrbeq.w	r4, [ip]
 800f566:	46a8      	mov	r8, r5
 800f568:	bf08      	it	eq
 800f56a:	f100 0c02 	addeq.w	ip, r0, #2
 800f56e:	e7c8      	b.n	800f502 <_strtol_l.isra.0+0x3e>
 800f570:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800f574:	2e19      	cmp	r6, #25
 800f576:	d801      	bhi.n	800f57c <_strtol_l.isra.0+0xb8>
 800f578:	3c37      	subs	r4, #55	; 0x37
 800f57a:	e7e1      	b.n	800f540 <_strtol_l.isra.0+0x7c>
 800f57c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800f580:	2e19      	cmp	r6, #25
 800f582:	d804      	bhi.n	800f58e <_strtol_l.isra.0+0xca>
 800f584:	3c57      	subs	r4, #87	; 0x57
 800f586:	e7db      	b.n	800f540 <_strtol_l.isra.0+0x7c>
 800f588:	f04f 35ff 	mov.w	r5, #4294967295
 800f58c:	e7e4      	b.n	800f558 <_strtol_l.isra.0+0x94>
 800f58e:	2d00      	cmp	r5, #0
 800f590:	da08      	bge.n	800f5a4 <_strtol_l.isra.0+0xe0>
 800f592:	2322      	movs	r3, #34	; 0x22
 800f594:	4638      	mov	r0, r7
 800f596:	f8ce 3000 	str.w	r3, [lr]
 800f59a:	2a00      	cmp	r2, #0
 800f59c:	d09e      	beq.n	800f4dc <_strtol_l.isra.0+0x18>
 800f59e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800f5a2:	e007      	b.n	800f5b4 <_strtol_l.isra.0+0xf0>
 800f5a4:	f1b8 0f00 	cmp.w	r8, #0
 800f5a8:	d000      	beq.n	800f5ac <_strtol_l.isra.0+0xe8>
 800f5aa:	4240      	negs	r0, r0
 800f5ac:	2a00      	cmp	r2, #0
 800f5ae:	d095      	beq.n	800f4dc <_strtol_l.isra.0+0x18>
 800f5b0:	2d00      	cmp	r5, #0
 800f5b2:	d1f4      	bne.n	800f59e <_strtol_l.isra.0+0xda>
 800f5b4:	6011      	str	r1, [r2, #0]
 800f5b6:	e791      	b.n	800f4dc <_strtol_l.isra.0+0x18>
 800f5b8:	2430      	movs	r4, #48	; 0x30
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1b2      	bne.n	800f524 <_strtol_l.isra.0+0x60>
 800f5be:	2308      	movs	r3, #8
 800f5c0:	e7b0      	b.n	800f524 <_strtol_l.isra.0+0x60>
 800f5c2:	2c30      	cmp	r4, #48	; 0x30
 800f5c4:	d0a3      	beq.n	800f50e <_strtol_l.isra.0+0x4a>
 800f5c6:	230a      	movs	r3, #10
 800f5c8:	e7ac      	b.n	800f524 <_strtol_l.isra.0+0x60>
 800f5ca:	bf00      	nop
 800f5cc:	08012879 	.word	0x08012879

0800f5d0 <_strtol_r>:
 800f5d0:	f7ff bf78 	b.w	800f4c4 <_strtol_l.isra.0>

0800f5d4 <quorem>:
 800f5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	6903      	ldr	r3, [r0, #16]
 800f5da:	690c      	ldr	r4, [r1, #16]
 800f5dc:	4607      	mov	r7, r0
 800f5de:	42a3      	cmp	r3, r4
 800f5e0:	f2c0 8083 	blt.w	800f6ea <quorem+0x116>
 800f5e4:	3c01      	subs	r4, #1
 800f5e6:	f100 0514 	add.w	r5, r0, #20
 800f5ea:	f101 0814 	add.w	r8, r1, #20
 800f5ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f5f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	429a      	cmp	r2, r3
 800f600:	fbb2 f6f3 	udiv	r6, r2, r3
 800f604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f60c:	d332      	bcc.n	800f674 <quorem+0xa0>
 800f60e:	f04f 0e00 	mov.w	lr, #0
 800f612:	4640      	mov	r0, r8
 800f614:	46ac      	mov	ip, r5
 800f616:	46f2      	mov	sl, lr
 800f618:	f850 2b04 	ldr.w	r2, [r0], #4
 800f61c:	b293      	uxth	r3, r2
 800f61e:	fb06 e303 	mla	r3, r6, r3, lr
 800f622:	0c12      	lsrs	r2, r2, #16
 800f624:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f628:	fb06 e202 	mla	r2, r6, r2, lr
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	ebaa 0303 	sub.w	r3, sl, r3
 800f632:	f8dc a000 	ldr.w	sl, [ip]
 800f636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f63a:	fa1f fa8a 	uxth.w	sl, sl
 800f63e:	4453      	add	r3, sl
 800f640:	fa1f fa82 	uxth.w	sl, r2
 800f644:	f8dc 2000 	ldr.w	r2, [ip]
 800f648:	4581      	cmp	r9, r0
 800f64a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f64e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f652:	b29b      	uxth	r3, r3
 800f654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f658:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f65c:	f84c 3b04 	str.w	r3, [ip], #4
 800f660:	d2da      	bcs.n	800f618 <quorem+0x44>
 800f662:	f855 300b 	ldr.w	r3, [r5, fp]
 800f666:	b92b      	cbnz	r3, 800f674 <quorem+0xa0>
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	3b04      	subs	r3, #4
 800f66c:	429d      	cmp	r5, r3
 800f66e:	461a      	mov	r2, r3
 800f670:	d32f      	bcc.n	800f6d2 <quorem+0xfe>
 800f672:	613c      	str	r4, [r7, #16]
 800f674:	4638      	mov	r0, r7
 800f676:	f001 fc83 	bl	8010f80 <__mcmp>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	db25      	blt.n	800f6ca <quorem+0xf6>
 800f67e:	4628      	mov	r0, r5
 800f680:	f04f 0c00 	mov.w	ip, #0
 800f684:	3601      	adds	r6, #1
 800f686:	f858 1b04 	ldr.w	r1, [r8], #4
 800f68a:	f8d0 e000 	ldr.w	lr, [r0]
 800f68e:	b28b      	uxth	r3, r1
 800f690:	ebac 0303 	sub.w	r3, ip, r3
 800f694:	fa1f f28e 	uxth.w	r2, lr
 800f698:	4413      	add	r3, r2
 800f69a:	0c0a      	lsrs	r2, r1, #16
 800f69c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f6a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6aa:	45c1      	cmp	r9, r8
 800f6ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f6b0:	f840 3b04 	str.w	r3, [r0], #4
 800f6b4:	d2e7      	bcs.n	800f686 <quorem+0xb2>
 800f6b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6be:	b922      	cbnz	r2, 800f6ca <quorem+0xf6>
 800f6c0:	3b04      	subs	r3, #4
 800f6c2:	429d      	cmp	r5, r3
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	d30a      	bcc.n	800f6de <quorem+0x10a>
 800f6c8:	613c      	str	r4, [r7, #16]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	b003      	add	sp, #12
 800f6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d2:	6812      	ldr	r2, [r2, #0]
 800f6d4:	3b04      	subs	r3, #4
 800f6d6:	2a00      	cmp	r2, #0
 800f6d8:	d1cb      	bne.n	800f672 <quorem+0x9e>
 800f6da:	3c01      	subs	r4, #1
 800f6dc:	e7c6      	b.n	800f66c <quorem+0x98>
 800f6de:	6812      	ldr	r2, [r2, #0]
 800f6e0:	3b04      	subs	r3, #4
 800f6e2:	2a00      	cmp	r2, #0
 800f6e4:	d1f0      	bne.n	800f6c8 <quorem+0xf4>
 800f6e6:	3c01      	subs	r4, #1
 800f6e8:	e7eb      	b.n	800f6c2 <quorem+0xee>
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	e7ee      	b.n	800f6cc <quorem+0xf8>
	...

0800f6f0 <_dtoa_r>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	4616      	mov	r6, r2
 800f6f6:	461f      	mov	r7, r3
 800f6f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f6fa:	b099      	sub	sp, #100	; 0x64
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f702:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f706:	b974      	cbnz	r4, 800f726 <_dtoa_r+0x36>
 800f708:	2010      	movs	r0, #16
 800f70a:	f7fe f94b 	bl	800d9a4 <malloc>
 800f70e:	4602      	mov	r2, r0
 800f710:	6268      	str	r0, [r5, #36]	; 0x24
 800f712:	b920      	cbnz	r0, 800f71e <_dtoa_r+0x2e>
 800f714:	21ea      	movs	r1, #234	; 0xea
 800f716:	4bae      	ldr	r3, [pc, #696]	; (800f9d0 <_dtoa_r+0x2e0>)
 800f718:	48ae      	ldr	r0, [pc, #696]	; (800f9d4 <_dtoa_r+0x2e4>)
 800f71a:	f001 ffb5 	bl	8011688 <__assert_func>
 800f71e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f722:	6004      	str	r4, [r0, #0]
 800f724:	60c4      	str	r4, [r0, #12]
 800f726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f728:	6819      	ldr	r1, [r3, #0]
 800f72a:	b151      	cbz	r1, 800f742 <_dtoa_r+0x52>
 800f72c:	685a      	ldr	r2, [r3, #4]
 800f72e:	2301      	movs	r3, #1
 800f730:	4093      	lsls	r3, r2
 800f732:	604a      	str	r2, [r1, #4]
 800f734:	608b      	str	r3, [r1, #8]
 800f736:	4628      	mov	r0, r5
 800f738:	f001 f99e 	bl	8010a78 <_Bfree>
 800f73c:	2200      	movs	r2, #0
 800f73e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	1e3b      	subs	r3, r7, #0
 800f744:	bfaf      	iteee	ge
 800f746:	2300      	movge	r3, #0
 800f748:	2201      	movlt	r2, #1
 800f74a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f74e:	9305      	strlt	r3, [sp, #20]
 800f750:	bfa8      	it	ge
 800f752:	f8c8 3000 	strge.w	r3, [r8]
 800f756:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f75a:	4b9f      	ldr	r3, [pc, #636]	; (800f9d8 <_dtoa_r+0x2e8>)
 800f75c:	bfb8      	it	lt
 800f75e:	f8c8 2000 	strlt.w	r2, [r8]
 800f762:	ea33 0309 	bics.w	r3, r3, r9
 800f766:	d119      	bne.n	800f79c <_dtoa_r+0xac>
 800f768:	f242 730f 	movw	r3, #9999	; 0x270f
 800f76c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f76e:	6013      	str	r3, [r2, #0]
 800f770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f774:	4333      	orrs	r3, r6
 800f776:	f000 8580 	beq.w	801027a <_dtoa_r+0xb8a>
 800f77a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f77c:	b953      	cbnz	r3, 800f794 <_dtoa_r+0xa4>
 800f77e:	4b97      	ldr	r3, [pc, #604]	; (800f9dc <_dtoa_r+0x2ec>)
 800f780:	e022      	b.n	800f7c8 <_dtoa_r+0xd8>
 800f782:	4b97      	ldr	r3, [pc, #604]	; (800f9e0 <_dtoa_r+0x2f0>)
 800f784:	9308      	str	r3, [sp, #32]
 800f786:	3308      	adds	r3, #8
 800f788:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	9808      	ldr	r0, [sp, #32]
 800f78e:	b019      	add	sp, #100	; 0x64
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	4b91      	ldr	r3, [pc, #580]	; (800f9dc <_dtoa_r+0x2ec>)
 800f796:	9308      	str	r3, [sp, #32]
 800f798:	3303      	adds	r3, #3
 800f79a:	e7f5      	b.n	800f788 <_dtoa_r+0x98>
 800f79c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f7a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f7a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f7f1 f942 	bl	8000a34 <__aeabi_dcmpeq>
 800f7b0:	4680      	mov	r8, r0
 800f7b2:	b158      	cbz	r0, 800f7cc <_dtoa_r+0xdc>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 8559 	beq.w	8010274 <_dtoa_r+0xb84>
 800f7c2:	4888      	ldr	r0, [pc, #544]	; (800f9e4 <_dtoa_r+0x2f4>)
 800f7c4:	6018      	str	r0, [r3, #0]
 800f7c6:	1e43      	subs	r3, r0, #1
 800f7c8:	9308      	str	r3, [sp, #32]
 800f7ca:	e7df      	b.n	800f78c <_dtoa_r+0x9c>
 800f7cc:	ab16      	add	r3, sp, #88	; 0x58
 800f7ce:	9301      	str	r3, [sp, #4]
 800f7d0:	ab17      	add	r3, sp, #92	; 0x5c
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7da:	f001 fcf7 	bl	80111cc <__d2b>
 800f7de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f7e2:	4682      	mov	sl, r0
 800f7e4:	2c00      	cmp	r4, #0
 800f7e6:	d07e      	beq.n	800f8e6 <_dtoa_r+0x1f6>
 800f7e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f7f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f7fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f7fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f802:	2200      	movs	r2, #0
 800f804:	4b78      	ldr	r3, [pc, #480]	; (800f9e8 <_dtoa_r+0x2f8>)
 800f806:	f7f0 fcf5 	bl	80001f4 <__aeabi_dsub>
 800f80a:	a36b      	add	r3, pc, #428	; (adr r3, 800f9b8 <_dtoa_r+0x2c8>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	f7f0 fea8 	bl	8000564 <__aeabi_dmul>
 800f814:	a36a      	add	r3, pc, #424	; (adr r3, 800f9c0 <_dtoa_r+0x2d0>)
 800f816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81a:	f7f0 fced 	bl	80001f8 <__adddf3>
 800f81e:	4606      	mov	r6, r0
 800f820:	4620      	mov	r0, r4
 800f822:	460f      	mov	r7, r1
 800f824:	f7f0 fe34 	bl	8000490 <__aeabi_i2d>
 800f828:	a367      	add	r3, pc, #412	; (adr r3, 800f9c8 <_dtoa_r+0x2d8>)
 800f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82e:	f7f0 fe99 	bl	8000564 <__aeabi_dmul>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	f7f0 fcdd 	bl	80001f8 <__adddf3>
 800f83e:	4606      	mov	r6, r0
 800f840:	460f      	mov	r7, r1
 800f842:	f7f1 f93f 	bl	8000ac4 <__aeabi_d2iz>
 800f846:	2200      	movs	r2, #0
 800f848:	4681      	mov	r9, r0
 800f84a:	2300      	movs	r3, #0
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f1 f8fa 	bl	8000a48 <__aeabi_dcmplt>
 800f854:	b148      	cbz	r0, 800f86a <_dtoa_r+0x17a>
 800f856:	4648      	mov	r0, r9
 800f858:	f7f0 fe1a 	bl	8000490 <__aeabi_i2d>
 800f85c:	4632      	mov	r2, r6
 800f85e:	463b      	mov	r3, r7
 800f860:	f7f1 f8e8 	bl	8000a34 <__aeabi_dcmpeq>
 800f864:	b908      	cbnz	r0, 800f86a <_dtoa_r+0x17a>
 800f866:	f109 39ff 	add.w	r9, r9, #4294967295
 800f86a:	f1b9 0f16 	cmp.w	r9, #22
 800f86e:	d857      	bhi.n	800f920 <_dtoa_r+0x230>
 800f870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f874:	4b5d      	ldr	r3, [pc, #372]	; (800f9ec <_dtoa_r+0x2fc>)
 800f876:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f7f1 f8e3 	bl	8000a48 <__aeabi_dcmplt>
 800f882:	2800      	cmp	r0, #0
 800f884:	d04e      	beq.n	800f924 <_dtoa_r+0x234>
 800f886:	2300      	movs	r3, #0
 800f888:	f109 39ff 	add.w	r9, r9, #4294967295
 800f88c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f88e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f890:	1b1c      	subs	r4, r3, r4
 800f892:	1e63      	subs	r3, r4, #1
 800f894:	9309      	str	r3, [sp, #36]	; 0x24
 800f896:	bf49      	itett	mi
 800f898:	f1c4 0301 	rsbmi	r3, r4, #1
 800f89c:	2300      	movpl	r3, #0
 800f89e:	9306      	strmi	r3, [sp, #24]
 800f8a0:	2300      	movmi	r3, #0
 800f8a2:	bf54      	ite	pl
 800f8a4:	9306      	strpl	r3, [sp, #24]
 800f8a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	db3c      	blt.n	800f928 <_dtoa_r+0x238>
 800f8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f8b4:	444b      	add	r3, r9
 800f8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f8bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8be:	2b09      	cmp	r3, #9
 800f8c0:	d86c      	bhi.n	800f99c <_dtoa_r+0x2ac>
 800f8c2:	2b05      	cmp	r3, #5
 800f8c4:	bfc4      	itt	gt
 800f8c6:	3b04      	subgt	r3, #4
 800f8c8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f8ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8cc:	bfc8      	it	gt
 800f8ce:	2400      	movgt	r4, #0
 800f8d0:	f1a3 0302 	sub.w	r3, r3, #2
 800f8d4:	bfd8      	it	le
 800f8d6:	2401      	movle	r4, #1
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	f200 808b 	bhi.w	800f9f4 <_dtoa_r+0x304>
 800f8de:	e8df f003 	tbb	[pc, r3]
 800f8e2:	4f2d      	.short	0x4f2d
 800f8e4:	5b4d      	.short	0x5b4d
 800f8e6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f8ea:	441c      	add	r4, r3
 800f8ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f8f0:	2b20      	cmp	r3, #32
 800f8f2:	bfc3      	ittte	gt
 800f8f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f8f8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f8fc:	fa09 f303 	lslgt.w	r3, r9, r3
 800f900:	f1c3 0320 	rsble	r3, r3, #32
 800f904:	bfc6      	itte	gt
 800f906:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f90a:	4318      	orrgt	r0, r3
 800f90c:	fa06 f003 	lslle.w	r0, r6, r3
 800f910:	f7f0 fdae 	bl	8000470 <__aeabi_ui2d>
 800f914:	2301      	movs	r3, #1
 800f916:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f91a:	3c01      	subs	r4, #1
 800f91c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f91e:	e770      	b.n	800f802 <_dtoa_r+0x112>
 800f920:	2301      	movs	r3, #1
 800f922:	e7b3      	b.n	800f88c <_dtoa_r+0x19c>
 800f924:	900f      	str	r0, [sp, #60]	; 0x3c
 800f926:	e7b2      	b.n	800f88e <_dtoa_r+0x19e>
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	eba3 0309 	sub.w	r3, r3, r9
 800f92e:	9306      	str	r3, [sp, #24]
 800f930:	f1c9 0300 	rsb	r3, r9, #0
 800f934:	930a      	str	r3, [sp, #40]	; 0x28
 800f936:	2300      	movs	r3, #0
 800f938:	930e      	str	r3, [sp, #56]	; 0x38
 800f93a:	e7bf      	b.n	800f8bc <_dtoa_r+0x1cc>
 800f93c:	2300      	movs	r3, #0
 800f93e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f940:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f942:	2b00      	cmp	r3, #0
 800f944:	dc59      	bgt.n	800f9fa <_dtoa_r+0x30a>
 800f946:	f04f 0b01 	mov.w	fp, #1
 800f94a:	465b      	mov	r3, fp
 800f94c:	f8cd b008 	str.w	fp, [sp, #8]
 800f950:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800f954:	2200      	movs	r2, #0
 800f956:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f958:	6042      	str	r2, [r0, #4]
 800f95a:	2204      	movs	r2, #4
 800f95c:	f102 0614 	add.w	r6, r2, #20
 800f960:	429e      	cmp	r6, r3
 800f962:	6841      	ldr	r1, [r0, #4]
 800f964:	d94f      	bls.n	800fa06 <_dtoa_r+0x316>
 800f966:	4628      	mov	r0, r5
 800f968:	f001 f846 	bl	80109f8 <_Balloc>
 800f96c:	9008      	str	r0, [sp, #32]
 800f96e:	2800      	cmp	r0, #0
 800f970:	d14d      	bne.n	800fa0e <_dtoa_r+0x31e>
 800f972:	4602      	mov	r2, r0
 800f974:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f978:	4b1d      	ldr	r3, [pc, #116]	; (800f9f0 <_dtoa_r+0x300>)
 800f97a:	e6cd      	b.n	800f718 <_dtoa_r+0x28>
 800f97c:	2301      	movs	r3, #1
 800f97e:	e7de      	b.n	800f93e <_dtoa_r+0x24e>
 800f980:	2300      	movs	r3, #0
 800f982:	930b      	str	r3, [sp, #44]	; 0x2c
 800f984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f986:	eb09 0b03 	add.w	fp, r9, r3
 800f98a:	f10b 0301 	add.w	r3, fp, #1
 800f98e:	2b01      	cmp	r3, #1
 800f990:	9302      	str	r3, [sp, #8]
 800f992:	bfb8      	it	lt
 800f994:	2301      	movlt	r3, #1
 800f996:	e7dd      	b.n	800f954 <_dtoa_r+0x264>
 800f998:	2301      	movs	r3, #1
 800f99a:	e7f2      	b.n	800f982 <_dtoa_r+0x292>
 800f99c:	2401      	movs	r4, #1
 800f99e:	2300      	movs	r3, #0
 800f9a0:	940b      	str	r4, [sp, #44]	; 0x2c
 800f9a2:	9322      	str	r3, [sp, #136]	; 0x88
 800f9a4:	f04f 3bff 	mov.w	fp, #4294967295
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2312      	movs	r3, #18
 800f9ac:	f8cd b008 	str.w	fp, [sp, #8]
 800f9b0:	9223      	str	r2, [sp, #140]	; 0x8c
 800f9b2:	e7cf      	b.n	800f954 <_dtoa_r+0x264>
 800f9b4:	f3af 8000 	nop.w
 800f9b8:	636f4361 	.word	0x636f4361
 800f9bc:	3fd287a7 	.word	0x3fd287a7
 800f9c0:	8b60c8b3 	.word	0x8b60c8b3
 800f9c4:	3fc68a28 	.word	0x3fc68a28
 800f9c8:	509f79fb 	.word	0x509f79fb
 800f9cc:	3fd34413 	.word	0x3fd34413
 800f9d0:	08012986 	.word	0x08012986
 800f9d4:	0801299d 	.word	0x0801299d
 800f9d8:	7ff00000 	.word	0x7ff00000
 800f9dc:	08012982 	.word	0x08012982
 800f9e0:	08012979 	.word	0x08012979
 800f9e4:	080127fd 	.word	0x080127fd
 800f9e8:	3ff80000 	.word	0x3ff80000
 800f9ec:	08012b18 	.word	0x08012b18
 800f9f0:	080129fc 	.word	0x080129fc
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9f8:	e7d4      	b.n	800f9a4 <_dtoa_r+0x2b4>
 800f9fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800f9fe:	465b      	mov	r3, fp
 800fa00:	f8cd b008 	str.w	fp, [sp, #8]
 800fa04:	e7a6      	b.n	800f954 <_dtoa_r+0x264>
 800fa06:	3101      	adds	r1, #1
 800fa08:	6041      	str	r1, [r0, #4]
 800fa0a:	0052      	lsls	r2, r2, #1
 800fa0c:	e7a6      	b.n	800f95c <_dtoa_r+0x26c>
 800fa0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fa10:	9a08      	ldr	r2, [sp, #32]
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	2b0e      	cmp	r3, #14
 800fa18:	f200 80a8 	bhi.w	800fb6c <_dtoa_r+0x47c>
 800fa1c:	2c00      	cmp	r4, #0
 800fa1e:	f000 80a5 	beq.w	800fb6c <_dtoa_r+0x47c>
 800fa22:	f1b9 0f00 	cmp.w	r9, #0
 800fa26:	dd34      	ble.n	800fa92 <_dtoa_r+0x3a2>
 800fa28:	4a9a      	ldr	r2, [pc, #616]	; (800fc94 <_dtoa_r+0x5a4>)
 800fa2a:	f009 030f 	and.w	r3, r9, #15
 800fa2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fa32:	f419 7f80 	tst.w	r9, #256	; 0x100
 800fa36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fa3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fa3e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800fa42:	d016      	beq.n	800fa72 <_dtoa_r+0x382>
 800fa44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa48:	4b93      	ldr	r3, [pc, #588]	; (800fc98 <_dtoa_r+0x5a8>)
 800fa4a:	2703      	movs	r7, #3
 800fa4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa50:	f7f0 feb2 	bl	80007b8 <__aeabi_ddiv>
 800fa54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa58:	f004 040f 	and.w	r4, r4, #15
 800fa5c:	4e8e      	ldr	r6, [pc, #568]	; (800fc98 <_dtoa_r+0x5a8>)
 800fa5e:	b954      	cbnz	r4, 800fa76 <_dtoa_r+0x386>
 800fa60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa68:	f7f0 fea6 	bl	80007b8 <__aeabi_ddiv>
 800fa6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa70:	e029      	b.n	800fac6 <_dtoa_r+0x3d6>
 800fa72:	2702      	movs	r7, #2
 800fa74:	e7f2      	b.n	800fa5c <_dtoa_r+0x36c>
 800fa76:	07e1      	lsls	r1, r4, #31
 800fa78:	d508      	bpl.n	800fa8c <_dtoa_r+0x39c>
 800fa7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fa7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa82:	f7f0 fd6f 	bl	8000564 <__aeabi_dmul>
 800fa86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fa8a:	3701      	adds	r7, #1
 800fa8c:	1064      	asrs	r4, r4, #1
 800fa8e:	3608      	adds	r6, #8
 800fa90:	e7e5      	b.n	800fa5e <_dtoa_r+0x36e>
 800fa92:	f000 80a5 	beq.w	800fbe0 <_dtoa_r+0x4f0>
 800fa96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa9a:	f1c9 0400 	rsb	r4, r9, #0
 800fa9e:	4b7d      	ldr	r3, [pc, #500]	; (800fc94 <_dtoa_r+0x5a4>)
 800faa0:	f004 020f 	and.w	r2, r4, #15
 800faa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800faa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faac:	f7f0 fd5a 	bl	8000564 <__aeabi_dmul>
 800fab0:	2702      	movs	r7, #2
 800fab2:	2300      	movs	r3, #0
 800fab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fab8:	4e77      	ldr	r6, [pc, #476]	; (800fc98 <_dtoa_r+0x5a8>)
 800faba:	1124      	asrs	r4, r4, #4
 800fabc:	2c00      	cmp	r4, #0
 800fabe:	f040 8084 	bne.w	800fbca <_dtoa_r+0x4da>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1d2      	bne.n	800fa6c <_dtoa_r+0x37c>
 800fac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 808b 	beq.w	800fbe4 <_dtoa_r+0x4f4>
 800face:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fad2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fada:	2200      	movs	r2, #0
 800fadc:	4b6f      	ldr	r3, [pc, #444]	; (800fc9c <_dtoa_r+0x5ac>)
 800fade:	f7f0 ffb3 	bl	8000a48 <__aeabi_dcmplt>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d07e      	beq.n	800fbe4 <_dtoa_r+0x4f4>
 800fae6:	9b02      	ldr	r3, [sp, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d07b      	beq.n	800fbe4 <_dtoa_r+0x4f4>
 800faec:	f1bb 0f00 	cmp.w	fp, #0
 800faf0:	dd38      	ble.n	800fb64 <_dtoa_r+0x474>
 800faf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800faf6:	2200      	movs	r2, #0
 800faf8:	4b69      	ldr	r3, [pc, #420]	; (800fca0 <_dtoa_r+0x5b0>)
 800fafa:	f7f0 fd33 	bl	8000564 <__aeabi_dmul>
 800fafe:	465c      	mov	r4, fp
 800fb00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb04:	f109 38ff 	add.w	r8, r9, #4294967295
 800fb08:	3701      	adds	r7, #1
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7f0 fcc0 	bl	8000490 <__aeabi_i2d>
 800fb10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb14:	f7f0 fd26 	bl	8000564 <__aeabi_dmul>
 800fb18:	2200      	movs	r2, #0
 800fb1a:	4b62      	ldr	r3, [pc, #392]	; (800fca4 <_dtoa_r+0x5b4>)
 800fb1c:	f7f0 fb6c 	bl	80001f8 <__adddf3>
 800fb20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fb24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fb28:	9611      	str	r6, [sp, #68]	; 0x44
 800fb2a:	2c00      	cmp	r4, #0
 800fb2c:	d15d      	bne.n	800fbea <_dtoa_r+0x4fa>
 800fb2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	4b5c      	ldr	r3, [pc, #368]	; (800fca8 <_dtoa_r+0x5b8>)
 800fb36:	f7f0 fb5d 	bl	80001f4 <__aeabi_dsub>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fb42:	4633      	mov	r3, r6
 800fb44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb46:	f7f0 ff9d 	bl	8000a84 <__aeabi_dcmpgt>
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f040 829e 	bne.w	801008c <_dtoa_r+0x99c>
 800fb50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb5a:	f7f0 ff75 	bl	8000a48 <__aeabi_dcmplt>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	f040 8292 	bne.w	8010088 <_dtoa_r+0x998>
 800fb64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800fb68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fb6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f2c0 8153 	blt.w	800fe1a <_dtoa_r+0x72a>
 800fb74:	f1b9 0f0e 	cmp.w	r9, #14
 800fb78:	f300 814f 	bgt.w	800fe1a <_dtoa_r+0x72a>
 800fb7c:	4b45      	ldr	r3, [pc, #276]	; (800fc94 <_dtoa_r+0x5a4>)
 800fb7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fb82:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fb86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800fb8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f280 80db 	bge.w	800fd48 <_dtoa_r+0x658>
 800fb92:	9b02      	ldr	r3, [sp, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f300 80d7 	bgt.w	800fd48 <_dtoa_r+0x658>
 800fb9a:	f040 8274 	bne.w	8010086 <_dtoa_r+0x996>
 800fb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fba2:	2200      	movs	r2, #0
 800fba4:	4b40      	ldr	r3, [pc, #256]	; (800fca8 <_dtoa_r+0x5b8>)
 800fba6:	f7f0 fcdd 	bl	8000564 <__aeabi_dmul>
 800fbaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbae:	f7f0 ff5f 	bl	8000a70 <__aeabi_dcmpge>
 800fbb2:	9c02      	ldr	r4, [sp, #8]
 800fbb4:	4626      	mov	r6, r4
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	f040 824a 	bne.w	8010050 <_dtoa_r+0x960>
 800fbbc:	2331      	movs	r3, #49	; 0x31
 800fbbe:	9f08      	ldr	r7, [sp, #32]
 800fbc0:	f109 0901 	add.w	r9, r9, #1
 800fbc4:	f807 3b01 	strb.w	r3, [r7], #1
 800fbc8:	e246      	b.n	8010058 <_dtoa_r+0x968>
 800fbca:	07e2      	lsls	r2, r4, #31
 800fbcc:	d505      	bpl.n	800fbda <_dtoa_r+0x4ea>
 800fbce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbd2:	f7f0 fcc7 	bl	8000564 <__aeabi_dmul>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	3701      	adds	r7, #1
 800fbda:	1064      	asrs	r4, r4, #1
 800fbdc:	3608      	adds	r6, #8
 800fbde:	e76d      	b.n	800fabc <_dtoa_r+0x3cc>
 800fbe0:	2702      	movs	r7, #2
 800fbe2:	e770      	b.n	800fac6 <_dtoa_r+0x3d6>
 800fbe4:	46c8      	mov	r8, r9
 800fbe6:	9c02      	ldr	r4, [sp, #8]
 800fbe8:	e78f      	b.n	800fb0a <_dtoa_r+0x41a>
 800fbea:	9908      	ldr	r1, [sp, #32]
 800fbec:	4b29      	ldr	r3, [pc, #164]	; (800fc94 <_dtoa_r+0x5a4>)
 800fbee:	4421      	add	r1, r4
 800fbf0:	9112      	str	r1, [sp, #72]	; 0x48
 800fbf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fbf8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800fbfc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc00:	2900      	cmp	r1, #0
 800fc02:	d055      	beq.n	800fcb0 <_dtoa_r+0x5c0>
 800fc04:	2000      	movs	r0, #0
 800fc06:	4929      	ldr	r1, [pc, #164]	; (800fcac <_dtoa_r+0x5bc>)
 800fc08:	f7f0 fdd6 	bl	80007b8 <__aeabi_ddiv>
 800fc0c:	463b      	mov	r3, r7
 800fc0e:	4632      	mov	r2, r6
 800fc10:	f7f0 faf0 	bl	80001f4 <__aeabi_dsub>
 800fc14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fc18:	9f08      	ldr	r7, [sp, #32]
 800fc1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc1e:	f7f0 ff51 	bl	8000ac4 <__aeabi_d2iz>
 800fc22:	4604      	mov	r4, r0
 800fc24:	f7f0 fc34 	bl	8000490 <__aeabi_i2d>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc30:	f7f0 fae0 	bl	80001f4 <__aeabi_dsub>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	3430      	adds	r4, #48	; 0x30
 800fc3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fc3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc42:	f807 4b01 	strb.w	r4, [r7], #1
 800fc46:	f7f0 feff 	bl	8000a48 <__aeabi_dcmplt>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d174      	bne.n	800fd38 <_dtoa_r+0x648>
 800fc4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc52:	2000      	movs	r0, #0
 800fc54:	4911      	ldr	r1, [pc, #68]	; (800fc9c <_dtoa_r+0x5ac>)
 800fc56:	f7f0 facd 	bl	80001f4 <__aeabi_dsub>
 800fc5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc5e:	f7f0 fef3 	bl	8000a48 <__aeabi_dcmplt>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	f040 80b6 	bne.w	800fdd4 <_dtoa_r+0x6e4>
 800fc68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc6a:	429f      	cmp	r7, r3
 800fc6c:	f43f af7a 	beq.w	800fb64 <_dtoa_r+0x474>
 800fc70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fc74:	2200      	movs	r2, #0
 800fc76:	4b0a      	ldr	r3, [pc, #40]	; (800fca0 <_dtoa_r+0x5b0>)
 800fc78:	f7f0 fc74 	bl	8000564 <__aeabi_dmul>
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fc82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc86:	4b06      	ldr	r3, [pc, #24]	; (800fca0 <_dtoa_r+0x5b0>)
 800fc88:	f7f0 fc6c 	bl	8000564 <__aeabi_dmul>
 800fc8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc90:	e7c3      	b.n	800fc1a <_dtoa_r+0x52a>
 800fc92:	bf00      	nop
 800fc94:	08012b18 	.word	0x08012b18
 800fc98:	08012af0 	.word	0x08012af0
 800fc9c:	3ff00000 	.word	0x3ff00000
 800fca0:	40240000 	.word	0x40240000
 800fca4:	401c0000 	.word	0x401c0000
 800fca8:	40140000 	.word	0x40140000
 800fcac:	3fe00000 	.word	0x3fe00000
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	f7f0 fc56 	bl	8000564 <__aeabi_dmul>
 800fcb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fcbe:	9c08      	ldr	r4, [sp, #32]
 800fcc0:	9314      	str	r3, [sp, #80]	; 0x50
 800fcc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcc6:	f7f0 fefd 	bl	8000ac4 <__aeabi_d2iz>
 800fcca:	9015      	str	r0, [sp, #84]	; 0x54
 800fccc:	f7f0 fbe0 	bl	8000490 <__aeabi_i2d>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcd8:	f7f0 fa8c 	bl	80001f4 <__aeabi_dsub>
 800fcdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcde:	4606      	mov	r6, r0
 800fce0:	3330      	adds	r3, #48	; 0x30
 800fce2:	f804 3b01 	strb.w	r3, [r4], #1
 800fce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fce8:	460f      	mov	r7, r1
 800fcea:	429c      	cmp	r4, r3
 800fcec:	f04f 0200 	mov.w	r2, #0
 800fcf0:	d124      	bne.n	800fd3c <_dtoa_r+0x64c>
 800fcf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcf6:	4bb3      	ldr	r3, [pc, #716]	; (800ffc4 <_dtoa_r+0x8d4>)
 800fcf8:	f7f0 fa7e 	bl	80001f8 <__adddf3>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4630      	mov	r0, r6
 800fd02:	4639      	mov	r1, r7
 800fd04:	f7f0 febe 	bl	8000a84 <__aeabi_dcmpgt>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d162      	bne.n	800fdd2 <_dtoa_r+0x6e2>
 800fd0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fd10:	2000      	movs	r0, #0
 800fd12:	49ac      	ldr	r1, [pc, #688]	; (800ffc4 <_dtoa_r+0x8d4>)
 800fd14:	f7f0 fa6e 	bl	80001f4 <__aeabi_dsub>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	4639      	mov	r1, r7
 800fd20:	f7f0 fe92 	bl	8000a48 <__aeabi_dcmplt>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	f43f af1d 	beq.w	800fb64 <_dtoa_r+0x474>
 800fd2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800fd2c:	1e7b      	subs	r3, r7, #1
 800fd2e:	9314      	str	r3, [sp, #80]	; 0x50
 800fd30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800fd34:	2b30      	cmp	r3, #48	; 0x30
 800fd36:	d0f8      	beq.n	800fd2a <_dtoa_r+0x63a>
 800fd38:	46c1      	mov	r9, r8
 800fd3a:	e03a      	b.n	800fdb2 <_dtoa_r+0x6c2>
 800fd3c:	4ba2      	ldr	r3, [pc, #648]	; (800ffc8 <_dtoa_r+0x8d8>)
 800fd3e:	f7f0 fc11 	bl	8000564 <__aeabi_dmul>
 800fd42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd46:	e7bc      	b.n	800fcc2 <_dtoa_r+0x5d2>
 800fd48:	9f08      	ldr	r7, [sp, #32]
 800fd4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd52:	f7f0 fd31 	bl	80007b8 <__aeabi_ddiv>
 800fd56:	f7f0 feb5 	bl	8000ac4 <__aeabi_d2iz>
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	f7f0 fb98 	bl	8000490 <__aeabi_i2d>
 800fd60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd64:	f7f0 fbfe 	bl	8000564 <__aeabi_dmul>
 800fd68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4602      	mov	r2, r0
 800fd70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd74:	f7f0 fa3e 	bl	80001f4 <__aeabi_dsub>
 800fd78:	f807 6b01 	strb.w	r6, [r7], #1
 800fd7c:	9e08      	ldr	r6, [sp, #32]
 800fd7e:	9b02      	ldr	r3, [sp, #8]
 800fd80:	1bbe      	subs	r6, r7, r6
 800fd82:	42b3      	cmp	r3, r6
 800fd84:	d13a      	bne.n	800fdfc <_dtoa_r+0x70c>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	f7f0 fa35 	bl	80001f8 <__adddf3>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd9a:	f7f0 fe73 	bl	8000a84 <__aeabi_dcmpgt>
 800fd9e:	bb58      	cbnz	r0, 800fdf8 <_dtoa_r+0x708>
 800fda0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fda8:	f7f0 fe44 	bl	8000a34 <__aeabi_dcmpeq>
 800fdac:	b108      	cbz	r0, 800fdb2 <_dtoa_r+0x6c2>
 800fdae:	07e1      	lsls	r1, r4, #31
 800fdb0:	d422      	bmi.n	800fdf8 <_dtoa_r+0x708>
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	4651      	mov	r1, sl
 800fdb6:	f000 fe5f 	bl	8010a78 <_Bfree>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	703b      	strb	r3, [r7, #0]
 800fdbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fdc0:	f109 0001 	add.w	r0, r9, #1
 800fdc4:	6018      	str	r0, [r3, #0]
 800fdc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f43f acdf 	beq.w	800f78c <_dtoa_r+0x9c>
 800fdce:	601f      	str	r7, [r3, #0]
 800fdd0:	e4dc      	b.n	800f78c <_dtoa_r+0x9c>
 800fdd2:	4627      	mov	r7, r4
 800fdd4:	463b      	mov	r3, r7
 800fdd6:	461f      	mov	r7, r3
 800fdd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fddc:	2a39      	cmp	r2, #57	; 0x39
 800fdde:	d107      	bne.n	800fdf0 <_dtoa_r+0x700>
 800fde0:	9a08      	ldr	r2, [sp, #32]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d1f7      	bne.n	800fdd6 <_dtoa_r+0x6e6>
 800fde6:	2230      	movs	r2, #48	; 0x30
 800fde8:	9908      	ldr	r1, [sp, #32]
 800fdea:	f108 0801 	add.w	r8, r8, #1
 800fdee:	700a      	strb	r2, [r1, #0]
 800fdf0:	781a      	ldrb	r2, [r3, #0]
 800fdf2:	3201      	adds	r2, #1
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	e79f      	b.n	800fd38 <_dtoa_r+0x648>
 800fdf8:	46c8      	mov	r8, r9
 800fdfa:	e7eb      	b.n	800fdd4 <_dtoa_r+0x6e4>
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4b72      	ldr	r3, [pc, #456]	; (800ffc8 <_dtoa_r+0x8d8>)
 800fe00:	f7f0 fbb0 	bl	8000564 <__aeabi_dmul>
 800fe04:	4602      	mov	r2, r0
 800fe06:	460b      	mov	r3, r1
 800fe08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f7f0 fe10 	bl	8000a34 <__aeabi_dcmpeq>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d098      	beq.n	800fd4a <_dtoa_r+0x65a>
 800fe18:	e7cb      	b.n	800fdb2 <_dtoa_r+0x6c2>
 800fe1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe1c:	2a00      	cmp	r2, #0
 800fe1e:	f000 80cd 	beq.w	800ffbc <_dtoa_r+0x8cc>
 800fe22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fe24:	2a01      	cmp	r2, #1
 800fe26:	f300 80af 	bgt.w	800ff88 <_dtoa_r+0x898>
 800fe2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe2c:	2a00      	cmp	r2, #0
 800fe2e:	f000 80a7 	beq.w	800ff80 <_dtoa_r+0x890>
 800fe32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fe38:	9f06      	ldr	r7, [sp, #24]
 800fe3a:	9a06      	ldr	r2, [sp, #24]
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	441a      	add	r2, r3
 800fe40:	9206      	str	r2, [sp, #24]
 800fe42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe44:	4628      	mov	r0, r5
 800fe46:	441a      	add	r2, r3
 800fe48:	9209      	str	r2, [sp, #36]	; 0x24
 800fe4a:	f000 ff19 	bl	8010c80 <__i2b>
 800fe4e:	4606      	mov	r6, r0
 800fe50:	2f00      	cmp	r7, #0
 800fe52:	dd0c      	ble.n	800fe6e <_dtoa_r+0x77e>
 800fe54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	dd09      	ble.n	800fe6e <_dtoa_r+0x77e>
 800fe5a:	42bb      	cmp	r3, r7
 800fe5c:	bfa8      	it	ge
 800fe5e:	463b      	movge	r3, r7
 800fe60:	9a06      	ldr	r2, [sp, #24]
 800fe62:	1aff      	subs	r7, r7, r3
 800fe64:	1ad2      	subs	r2, r2, r3
 800fe66:	9206      	str	r2, [sp, #24]
 800fe68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe70:	b1f3      	cbz	r3, 800feb0 <_dtoa_r+0x7c0>
 800fe72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 80a9 	beq.w	800ffcc <_dtoa_r+0x8dc>
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	dd10      	ble.n	800fea0 <_dtoa_r+0x7b0>
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4622      	mov	r2, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f000 ffb6 	bl	8010df4 <__pow5mult>
 800fe88:	4652      	mov	r2, sl
 800fe8a:	4601      	mov	r1, r0
 800fe8c:	4606      	mov	r6, r0
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 ff0c 	bl	8010cac <__multiply>
 800fe94:	4680      	mov	r8, r0
 800fe96:	4651      	mov	r1, sl
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f000 fded 	bl	8010a78 <_Bfree>
 800fe9e:	46c2      	mov	sl, r8
 800fea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea2:	1b1a      	subs	r2, r3, r4
 800fea4:	d004      	beq.n	800feb0 <_dtoa_r+0x7c0>
 800fea6:	4651      	mov	r1, sl
 800fea8:	4628      	mov	r0, r5
 800feaa:	f000 ffa3 	bl	8010df4 <__pow5mult>
 800feae:	4682      	mov	sl, r0
 800feb0:	2101      	movs	r1, #1
 800feb2:	4628      	mov	r0, r5
 800feb4:	f000 fee4 	bl	8010c80 <__i2b>
 800feb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feba:	4604      	mov	r4, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	f340 8087 	ble.w	800ffd0 <_dtoa_r+0x8e0>
 800fec2:	461a      	mov	r2, r3
 800fec4:	4601      	mov	r1, r0
 800fec6:	4628      	mov	r0, r5
 800fec8:	f000 ff94 	bl	8010df4 <__pow5mult>
 800fecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fece:	4604      	mov	r4, r0
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	f340 8080 	ble.w	800ffd6 <_dtoa_r+0x8e6>
 800fed6:	f04f 0800 	mov.w	r8, #0
 800feda:	6923      	ldr	r3, [r4, #16]
 800fedc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fee0:	6918      	ldr	r0, [r3, #16]
 800fee2:	f000 fe7f 	bl	8010be4 <__hi0bits>
 800fee6:	f1c0 0020 	rsb	r0, r0, #32
 800feea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feec:	4418      	add	r0, r3
 800feee:	f010 001f 	ands.w	r0, r0, #31
 800fef2:	f000 8092 	beq.w	801001a <_dtoa_r+0x92a>
 800fef6:	f1c0 0320 	rsb	r3, r0, #32
 800fefa:	2b04      	cmp	r3, #4
 800fefc:	f340 808a 	ble.w	8010014 <_dtoa_r+0x924>
 800ff00:	f1c0 001c 	rsb	r0, r0, #28
 800ff04:	9b06      	ldr	r3, [sp, #24]
 800ff06:	4407      	add	r7, r0
 800ff08:	4403      	add	r3, r0
 800ff0a:	9306      	str	r3, [sp, #24]
 800ff0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff0e:	4403      	add	r3, r0
 800ff10:	9309      	str	r3, [sp, #36]	; 0x24
 800ff12:	9b06      	ldr	r3, [sp, #24]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	dd05      	ble.n	800ff24 <_dtoa_r+0x834>
 800ff18:	4651      	mov	r1, sl
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	f000 ffc3 	bl	8010ea8 <__lshift>
 800ff22:	4682      	mov	sl, r0
 800ff24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	dd05      	ble.n	800ff36 <_dtoa_r+0x846>
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f000 ffba 	bl	8010ea8 <__lshift>
 800ff34:	4604      	mov	r4, r0
 800ff36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d070      	beq.n	801001e <_dtoa_r+0x92e>
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	4650      	mov	r0, sl
 800ff40:	f001 f81e 	bl	8010f80 <__mcmp>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	da6a      	bge.n	801001e <_dtoa_r+0x92e>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4651      	mov	r1, sl
 800ff4c:	220a      	movs	r2, #10
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f000 fdb4 	bl	8010abc <__multadd>
 800ff54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff56:	4682      	mov	sl, r0
 800ff58:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 8193 	beq.w	8010288 <_dtoa_r+0xb98>
 800ff62:	4631      	mov	r1, r6
 800ff64:	2300      	movs	r3, #0
 800ff66:	220a      	movs	r2, #10
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f000 fda7 	bl	8010abc <__multadd>
 800ff6e:	f1bb 0f00 	cmp.w	fp, #0
 800ff72:	4606      	mov	r6, r0
 800ff74:	f300 8093 	bgt.w	801009e <_dtoa_r+0x9ae>
 800ff78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff7a:	2b02      	cmp	r3, #2
 800ff7c:	dc57      	bgt.n	801002e <_dtoa_r+0x93e>
 800ff7e:	e08e      	b.n	801009e <_dtoa_r+0x9ae>
 800ff80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff86:	e756      	b.n	800fe36 <_dtoa_r+0x746>
 800ff88:	9b02      	ldr	r3, [sp, #8]
 800ff8a:	1e5c      	subs	r4, r3, #1
 800ff8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	bfb7      	itett	lt
 800ff92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ff94:	1b1c      	subge	r4, r3, r4
 800ff96:	1ae2      	sublt	r2, r4, r3
 800ff98:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ff9a:	bfbe      	ittt	lt
 800ff9c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ff9e:	189b      	addlt	r3, r3, r2
 800ffa0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ffa2:	9b02      	ldr	r3, [sp, #8]
 800ffa4:	bfb8      	it	lt
 800ffa6:	2400      	movlt	r4, #0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	bfbb      	ittet	lt
 800ffac:	9b06      	ldrlt	r3, [sp, #24]
 800ffae:	9a02      	ldrlt	r2, [sp, #8]
 800ffb0:	9f06      	ldrge	r7, [sp, #24]
 800ffb2:	1a9f      	sublt	r7, r3, r2
 800ffb4:	bfac      	ite	ge
 800ffb6:	9b02      	ldrge	r3, [sp, #8]
 800ffb8:	2300      	movlt	r3, #0
 800ffba:	e73e      	b.n	800fe3a <_dtoa_r+0x74a>
 800ffbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ffbe:	9f06      	ldr	r7, [sp, #24]
 800ffc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ffc2:	e745      	b.n	800fe50 <_dtoa_r+0x760>
 800ffc4:	3fe00000 	.word	0x3fe00000
 800ffc8:	40240000 	.word	0x40240000
 800ffcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffce:	e76a      	b.n	800fea6 <_dtoa_r+0x7b6>
 800ffd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	dc19      	bgt.n	801000a <_dtoa_r+0x91a>
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	b9bb      	cbnz	r3, 801000a <_dtoa_r+0x91a>
 800ffda:	9b05      	ldr	r3, [sp, #20]
 800ffdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffe0:	b99b      	cbnz	r3, 801000a <_dtoa_r+0x91a>
 800ffe2:	9b05      	ldr	r3, [sp, #20]
 800ffe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffe8:	0d1b      	lsrs	r3, r3, #20
 800ffea:	051b      	lsls	r3, r3, #20
 800ffec:	b183      	cbz	r3, 8010010 <_dtoa_r+0x920>
 800ffee:	f04f 0801 	mov.w	r8, #1
 800fff2:	9b06      	ldr	r3, [sp, #24]
 800fff4:	3301      	adds	r3, #1
 800fff6:	9306      	str	r3, [sp, #24]
 800fff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffa:	3301      	adds	r3, #1
 800fffc:	9309      	str	r3, [sp, #36]	; 0x24
 800fffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010000:	2b00      	cmp	r3, #0
 8010002:	f47f af6a 	bne.w	800feda <_dtoa_r+0x7ea>
 8010006:	2001      	movs	r0, #1
 8010008:	e76f      	b.n	800feea <_dtoa_r+0x7fa>
 801000a:	f04f 0800 	mov.w	r8, #0
 801000e:	e7f6      	b.n	800fffe <_dtoa_r+0x90e>
 8010010:	4698      	mov	r8, r3
 8010012:	e7f4      	b.n	800fffe <_dtoa_r+0x90e>
 8010014:	f43f af7d 	beq.w	800ff12 <_dtoa_r+0x822>
 8010018:	4618      	mov	r0, r3
 801001a:	301c      	adds	r0, #28
 801001c:	e772      	b.n	800ff04 <_dtoa_r+0x814>
 801001e:	9b02      	ldr	r3, [sp, #8]
 8010020:	2b00      	cmp	r3, #0
 8010022:	dc36      	bgt.n	8010092 <_dtoa_r+0x9a2>
 8010024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010026:	2b02      	cmp	r3, #2
 8010028:	dd33      	ble.n	8010092 <_dtoa_r+0x9a2>
 801002a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801002e:	f1bb 0f00 	cmp.w	fp, #0
 8010032:	d10d      	bne.n	8010050 <_dtoa_r+0x960>
 8010034:	4621      	mov	r1, r4
 8010036:	465b      	mov	r3, fp
 8010038:	2205      	movs	r2, #5
 801003a:	4628      	mov	r0, r5
 801003c:	f000 fd3e 	bl	8010abc <__multadd>
 8010040:	4601      	mov	r1, r0
 8010042:	4604      	mov	r4, r0
 8010044:	4650      	mov	r0, sl
 8010046:	f000 ff9b 	bl	8010f80 <__mcmp>
 801004a:	2800      	cmp	r0, #0
 801004c:	f73f adb6 	bgt.w	800fbbc <_dtoa_r+0x4cc>
 8010050:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010052:	9f08      	ldr	r7, [sp, #32]
 8010054:	ea6f 0903 	mvn.w	r9, r3
 8010058:	f04f 0800 	mov.w	r8, #0
 801005c:	4621      	mov	r1, r4
 801005e:	4628      	mov	r0, r5
 8010060:	f000 fd0a 	bl	8010a78 <_Bfree>
 8010064:	2e00      	cmp	r6, #0
 8010066:	f43f aea4 	beq.w	800fdb2 <_dtoa_r+0x6c2>
 801006a:	f1b8 0f00 	cmp.w	r8, #0
 801006e:	d005      	beq.n	801007c <_dtoa_r+0x98c>
 8010070:	45b0      	cmp	r8, r6
 8010072:	d003      	beq.n	801007c <_dtoa_r+0x98c>
 8010074:	4641      	mov	r1, r8
 8010076:	4628      	mov	r0, r5
 8010078:	f000 fcfe 	bl	8010a78 <_Bfree>
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	f000 fcfa 	bl	8010a78 <_Bfree>
 8010084:	e695      	b.n	800fdb2 <_dtoa_r+0x6c2>
 8010086:	2400      	movs	r4, #0
 8010088:	4626      	mov	r6, r4
 801008a:	e7e1      	b.n	8010050 <_dtoa_r+0x960>
 801008c:	46c1      	mov	r9, r8
 801008e:	4626      	mov	r6, r4
 8010090:	e594      	b.n	800fbbc <_dtoa_r+0x4cc>
 8010092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010094:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f000 80fc 	beq.w	8010296 <_dtoa_r+0xba6>
 801009e:	2f00      	cmp	r7, #0
 80100a0:	dd05      	ble.n	80100ae <_dtoa_r+0x9be>
 80100a2:	4631      	mov	r1, r6
 80100a4:	463a      	mov	r2, r7
 80100a6:	4628      	mov	r0, r5
 80100a8:	f000 fefe 	bl	8010ea8 <__lshift>
 80100ac:	4606      	mov	r6, r0
 80100ae:	f1b8 0f00 	cmp.w	r8, #0
 80100b2:	d05c      	beq.n	801016e <_dtoa_r+0xa7e>
 80100b4:	4628      	mov	r0, r5
 80100b6:	6871      	ldr	r1, [r6, #4]
 80100b8:	f000 fc9e 	bl	80109f8 <_Balloc>
 80100bc:	4607      	mov	r7, r0
 80100be:	b928      	cbnz	r0, 80100cc <_dtoa_r+0x9dc>
 80100c0:	4602      	mov	r2, r0
 80100c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80100c6:	4b7e      	ldr	r3, [pc, #504]	; (80102c0 <_dtoa_r+0xbd0>)
 80100c8:	f7ff bb26 	b.w	800f718 <_dtoa_r+0x28>
 80100cc:	6932      	ldr	r2, [r6, #16]
 80100ce:	f106 010c 	add.w	r1, r6, #12
 80100d2:	3202      	adds	r2, #2
 80100d4:	0092      	lsls	r2, r2, #2
 80100d6:	300c      	adds	r0, #12
 80100d8:	f7fd fc74 	bl	800d9c4 <memcpy>
 80100dc:	2201      	movs	r2, #1
 80100de:	4639      	mov	r1, r7
 80100e0:	4628      	mov	r0, r5
 80100e2:	f000 fee1 	bl	8010ea8 <__lshift>
 80100e6:	46b0      	mov	r8, r6
 80100e8:	4606      	mov	r6, r0
 80100ea:	9b08      	ldr	r3, [sp, #32]
 80100ec:	3301      	adds	r3, #1
 80100ee:	9302      	str	r3, [sp, #8]
 80100f0:	9b08      	ldr	r3, [sp, #32]
 80100f2:	445b      	add	r3, fp
 80100f4:	930a      	str	r3, [sp, #40]	; 0x28
 80100f6:	9b04      	ldr	r3, [sp, #16]
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	9309      	str	r3, [sp, #36]	; 0x24
 80100fe:	9b02      	ldr	r3, [sp, #8]
 8010100:	4621      	mov	r1, r4
 8010102:	4650      	mov	r0, sl
 8010104:	f103 3bff 	add.w	fp, r3, #4294967295
 8010108:	f7ff fa64 	bl	800f5d4 <quorem>
 801010c:	4603      	mov	r3, r0
 801010e:	4641      	mov	r1, r8
 8010110:	3330      	adds	r3, #48	; 0x30
 8010112:	9004      	str	r0, [sp, #16]
 8010114:	4650      	mov	r0, sl
 8010116:	930b      	str	r3, [sp, #44]	; 0x2c
 8010118:	f000 ff32 	bl	8010f80 <__mcmp>
 801011c:	4632      	mov	r2, r6
 801011e:	9006      	str	r0, [sp, #24]
 8010120:	4621      	mov	r1, r4
 8010122:	4628      	mov	r0, r5
 8010124:	f000 ff48 	bl	8010fb8 <__mdiff>
 8010128:	68c2      	ldr	r2, [r0, #12]
 801012a:	4607      	mov	r7, r0
 801012c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801012e:	bb02      	cbnz	r2, 8010172 <_dtoa_r+0xa82>
 8010130:	4601      	mov	r1, r0
 8010132:	4650      	mov	r0, sl
 8010134:	f000 ff24 	bl	8010f80 <__mcmp>
 8010138:	4602      	mov	r2, r0
 801013a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801013c:	4639      	mov	r1, r7
 801013e:	4628      	mov	r0, r5
 8010140:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010144:	f000 fc98 	bl	8010a78 <_Bfree>
 8010148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801014a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801014c:	9f02      	ldr	r7, [sp, #8]
 801014e:	ea43 0102 	orr.w	r1, r3, r2
 8010152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010154:	430b      	orrs	r3, r1
 8010156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010158:	d10d      	bne.n	8010176 <_dtoa_r+0xa86>
 801015a:	2b39      	cmp	r3, #57	; 0x39
 801015c:	d027      	beq.n	80101ae <_dtoa_r+0xabe>
 801015e:	9a06      	ldr	r2, [sp, #24]
 8010160:	2a00      	cmp	r2, #0
 8010162:	dd01      	ble.n	8010168 <_dtoa_r+0xa78>
 8010164:	9b04      	ldr	r3, [sp, #16]
 8010166:	3331      	adds	r3, #49	; 0x31
 8010168:	f88b 3000 	strb.w	r3, [fp]
 801016c:	e776      	b.n	801005c <_dtoa_r+0x96c>
 801016e:	4630      	mov	r0, r6
 8010170:	e7b9      	b.n	80100e6 <_dtoa_r+0x9f6>
 8010172:	2201      	movs	r2, #1
 8010174:	e7e2      	b.n	801013c <_dtoa_r+0xa4c>
 8010176:	9906      	ldr	r1, [sp, #24]
 8010178:	2900      	cmp	r1, #0
 801017a:	db04      	blt.n	8010186 <_dtoa_r+0xa96>
 801017c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801017e:	4301      	orrs	r1, r0
 8010180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010182:	4301      	orrs	r1, r0
 8010184:	d120      	bne.n	80101c8 <_dtoa_r+0xad8>
 8010186:	2a00      	cmp	r2, #0
 8010188:	ddee      	ble.n	8010168 <_dtoa_r+0xa78>
 801018a:	4651      	mov	r1, sl
 801018c:	2201      	movs	r2, #1
 801018e:	4628      	mov	r0, r5
 8010190:	9302      	str	r3, [sp, #8]
 8010192:	f000 fe89 	bl	8010ea8 <__lshift>
 8010196:	4621      	mov	r1, r4
 8010198:	4682      	mov	sl, r0
 801019a:	f000 fef1 	bl	8010f80 <__mcmp>
 801019e:	2800      	cmp	r0, #0
 80101a0:	9b02      	ldr	r3, [sp, #8]
 80101a2:	dc02      	bgt.n	80101aa <_dtoa_r+0xaba>
 80101a4:	d1e0      	bne.n	8010168 <_dtoa_r+0xa78>
 80101a6:	07da      	lsls	r2, r3, #31
 80101a8:	d5de      	bpl.n	8010168 <_dtoa_r+0xa78>
 80101aa:	2b39      	cmp	r3, #57	; 0x39
 80101ac:	d1da      	bne.n	8010164 <_dtoa_r+0xa74>
 80101ae:	2339      	movs	r3, #57	; 0x39
 80101b0:	f88b 3000 	strb.w	r3, [fp]
 80101b4:	463b      	mov	r3, r7
 80101b6:	461f      	mov	r7, r3
 80101b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80101bc:	3b01      	subs	r3, #1
 80101be:	2a39      	cmp	r2, #57	; 0x39
 80101c0:	d050      	beq.n	8010264 <_dtoa_r+0xb74>
 80101c2:	3201      	adds	r2, #1
 80101c4:	701a      	strb	r2, [r3, #0]
 80101c6:	e749      	b.n	801005c <_dtoa_r+0x96c>
 80101c8:	2a00      	cmp	r2, #0
 80101ca:	dd03      	ble.n	80101d4 <_dtoa_r+0xae4>
 80101cc:	2b39      	cmp	r3, #57	; 0x39
 80101ce:	d0ee      	beq.n	80101ae <_dtoa_r+0xabe>
 80101d0:	3301      	adds	r3, #1
 80101d2:	e7c9      	b.n	8010168 <_dtoa_r+0xa78>
 80101d4:	9a02      	ldr	r2, [sp, #8]
 80101d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80101d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80101dc:	428a      	cmp	r2, r1
 80101de:	d02a      	beq.n	8010236 <_dtoa_r+0xb46>
 80101e0:	4651      	mov	r1, sl
 80101e2:	2300      	movs	r3, #0
 80101e4:	220a      	movs	r2, #10
 80101e6:	4628      	mov	r0, r5
 80101e8:	f000 fc68 	bl	8010abc <__multadd>
 80101ec:	45b0      	cmp	r8, r6
 80101ee:	4682      	mov	sl, r0
 80101f0:	f04f 0300 	mov.w	r3, #0
 80101f4:	f04f 020a 	mov.w	r2, #10
 80101f8:	4641      	mov	r1, r8
 80101fa:	4628      	mov	r0, r5
 80101fc:	d107      	bne.n	801020e <_dtoa_r+0xb1e>
 80101fe:	f000 fc5d 	bl	8010abc <__multadd>
 8010202:	4680      	mov	r8, r0
 8010204:	4606      	mov	r6, r0
 8010206:	9b02      	ldr	r3, [sp, #8]
 8010208:	3301      	adds	r3, #1
 801020a:	9302      	str	r3, [sp, #8]
 801020c:	e777      	b.n	80100fe <_dtoa_r+0xa0e>
 801020e:	f000 fc55 	bl	8010abc <__multadd>
 8010212:	4631      	mov	r1, r6
 8010214:	4680      	mov	r8, r0
 8010216:	2300      	movs	r3, #0
 8010218:	220a      	movs	r2, #10
 801021a:	4628      	mov	r0, r5
 801021c:	f000 fc4e 	bl	8010abc <__multadd>
 8010220:	4606      	mov	r6, r0
 8010222:	e7f0      	b.n	8010206 <_dtoa_r+0xb16>
 8010224:	f1bb 0f00 	cmp.w	fp, #0
 8010228:	bfcc      	ite	gt
 801022a:	465f      	movgt	r7, fp
 801022c:	2701      	movle	r7, #1
 801022e:	f04f 0800 	mov.w	r8, #0
 8010232:	9a08      	ldr	r2, [sp, #32]
 8010234:	4417      	add	r7, r2
 8010236:	4651      	mov	r1, sl
 8010238:	2201      	movs	r2, #1
 801023a:	4628      	mov	r0, r5
 801023c:	9302      	str	r3, [sp, #8]
 801023e:	f000 fe33 	bl	8010ea8 <__lshift>
 8010242:	4621      	mov	r1, r4
 8010244:	4682      	mov	sl, r0
 8010246:	f000 fe9b 	bl	8010f80 <__mcmp>
 801024a:	2800      	cmp	r0, #0
 801024c:	dcb2      	bgt.n	80101b4 <_dtoa_r+0xac4>
 801024e:	d102      	bne.n	8010256 <_dtoa_r+0xb66>
 8010250:	9b02      	ldr	r3, [sp, #8]
 8010252:	07db      	lsls	r3, r3, #31
 8010254:	d4ae      	bmi.n	80101b4 <_dtoa_r+0xac4>
 8010256:	463b      	mov	r3, r7
 8010258:	461f      	mov	r7, r3
 801025a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801025e:	2a30      	cmp	r2, #48	; 0x30
 8010260:	d0fa      	beq.n	8010258 <_dtoa_r+0xb68>
 8010262:	e6fb      	b.n	801005c <_dtoa_r+0x96c>
 8010264:	9a08      	ldr	r2, [sp, #32]
 8010266:	429a      	cmp	r2, r3
 8010268:	d1a5      	bne.n	80101b6 <_dtoa_r+0xac6>
 801026a:	2331      	movs	r3, #49	; 0x31
 801026c:	f109 0901 	add.w	r9, r9, #1
 8010270:	7013      	strb	r3, [r2, #0]
 8010272:	e6f3      	b.n	801005c <_dtoa_r+0x96c>
 8010274:	4b13      	ldr	r3, [pc, #76]	; (80102c4 <_dtoa_r+0xbd4>)
 8010276:	f7ff baa7 	b.w	800f7c8 <_dtoa_r+0xd8>
 801027a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801027c:	2b00      	cmp	r3, #0
 801027e:	f47f aa80 	bne.w	800f782 <_dtoa_r+0x92>
 8010282:	4b11      	ldr	r3, [pc, #68]	; (80102c8 <_dtoa_r+0xbd8>)
 8010284:	f7ff baa0 	b.w	800f7c8 <_dtoa_r+0xd8>
 8010288:	f1bb 0f00 	cmp.w	fp, #0
 801028c:	dc03      	bgt.n	8010296 <_dtoa_r+0xba6>
 801028e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010290:	2b02      	cmp	r3, #2
 8010292:	f73f aecc 	bgt.w	801002e <_dtoa_r+0x93e>
 8010296:	9f08      	ldr	r7, [sp, #32]
 8010298:	4621      	mov	r1, r4
 801029a:	4650      	mov	r0, sl
 801029c:	f7ff f99a 	bl	800f5d4 <quorem>
 80102a0:	9a08      	ldr	r2, [sp, #32]
 80102a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80102a6:	f807 3b01 	strb.w	r3, [r7], #1
 80102aa:	1aba      	subs	r2, r7, r2
 80102ac:	4593      	cmp	fp, r2
 80102ae:	ddb9      	ble.n	8010224 <_dtoa_r+0xb34>
 80102b0:	4651      	mov	r1, sl
 80102b2:	2300      	movs	r3, #0
 80102b4:	220a      	movs	r2, #10
 80102b6:	4628      	mov	r0, r5
 80102b8:	f000 fc00 	bl	8010abc <__multadd>
 80102bc:	4682      	mov	sl, r0
 80102be:	e7eb      	b.n	8010298 <_dtoa_r+0xba8>
 80102c0:	080129fc 	.word	0x080129fc
 80102c4:	080127fc 	.word	0x080127fc
 80102c8:	08012979 	.word	0x08012979

080102cc <rshift>:
 80102cc:	6903      	ldr	r3, [r0, #16]
 80102ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80102d6:	f100 0414 	add.w	r4, r0, #20
 80102da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80102de:	dd46      	ble.n	801036e <rshift+0xa2>
 80102e0:	f011 011f 	ands.w	r1, r1, #31
 80102e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80102e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80102ec:	d10c      	bne.n	8010308 <rshift+0x3c>
 80102ee:	4629      	mov	r1, r5
 80102f0:	f100 0710 	add.w	r7, r0, #16
 80102f4:	42b1      	cmp	r1, r6
 80102f6:	d335      	bcc.n	8010364 <rshift+0x98>
 80102f8:	1a9b      	subs	r3, r3, r2
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	1eea      	subs	r2, r5, #3
 80102fe:	4296      	cmp	r6, r2
 8010300:	bf38      	it	cc
 8010302:	2300      	movcc	r3, #0
 8010304:	4423      	add	r3, r4
 8010306:	e015      	b.n	8010334 <rshift+0x68>
 8010308:	46a1      	mov	r9, r4
 801030a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801030e:	f1c1 0820 	rsb	r8, r1, #32
 8010312:	40cf      	lsrs	r7, r1
 8010314:	f105 0e04 	add.w	lr, r5, #4
 8010318:	4576      	cmp	r6, lr
 801031a:	46f4      	mov	ip, lr
 801031c:	d816      	bhi.n	801034c <rshift+0x80>
 801031e:	1a9b      	subs	r3, r3, r2
 8010320:	009a      	lsls	r2, r3, #2
 8010322:	3a04      	subs	r2, #4
 8010324:	3501      	adds	r5, #1
 8010326:	42ae      	cmp	r6, r5
 8010328:	bf38      	it	cc
 801032a:	2200      	movcc	r2, #0
 801032c:	18a3      	adds	r3, r4, r2
 801032e:	50a7      	str	r7, [r4, r2]
 8010330:	b107      	cbz	r7, 8010334 <rshift+0x68>
 8010332:	3304      	adds	r3, #4
 8010334:	42a3      	cmp	r3, r4
 8010336:	eba3 0204 	sub.w	r2, r3, r4
 801033a:	bf08      	it	eq
 801033c:	2300      	moveq	r3, #0
 801033e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010342:	6102      	str	r2, [r0, #16]
 8010344:	bf08      	it	eq
 8010346:	6143      	streq	r3, [r0, #20]
 8010348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801034c:	f8dc c000 	ldr.w	ip, [ip]
 8010350:	fa0c fc08 	lsl.w	ip, ip, r8
 8010354:	ea4c 0707 	orr.w	r7, ip, r7
 8010358:	f849 7b04 	str.w	r7, [r9], #4
 801035c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010360:	40cf      	lsrs	r7, r1
 8010362:	e7d9      	b.n	8010318 <rshift+0x4c>
 8010364:	f851 cb04 	ldr.w	ip, [r1], #4
 8010368:	f847 cf04 	str.w	ip, [r7, #4]!
 801036c:	e7c2      	b.n	80102f4 <rshift+0x28>
 801036e:	4623      	mov	r3, r4
 8010370:	e7e0      	b.n	8010334 <rshift+0x68>

08010372 <__hexdig_fun>:
 8010372:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010376:	2b09      	cmp	r3, #9
 8010378:	d802      	bhi.n	8010380 <__hexdig_fun+0xe>
 801037a:	3820      	subs	r0, #32
 801037c:	b2c0      	uxtb	r0, r0
 801037e:	4770      	bx	lr
 8010380:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010384:	2b05      	cmp	r3, #5
 8010386:	d801      	bhi.n	801038c <__hexdig_fun+0x1a>
 8010388:	3847      	subs	r0, #71	; 0x47
 801038a:	e7f7      	b.n	801037c <__hexdig_fun+0xa>
 801038c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010390:	2b05      	cmp	r3, #5
 8010392:	d801      	bhi.n	8010398 <__hexdig_fun+0x26>
 8010394:	3827      	subs	r0, #39	; 0x27
 8010396:	e7f1      	b.n	801037c <__hexdig_fun+0xa>
 8010398:	2000      	movs	r0, #0
 801039a:	4770      	bx	lr

0801039c <__gethex>:
 801039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a0:	b08b      	sub	sp, #44	; 0x2c
 80103a2:	9306      	str	r3, [sp, #24]
 80103a4:	4bb9      	ldr	r3, [pc, #740]	; (801068c <__gethex+0x2f0>)
 80103a6:	9002      	str	r0, [sp, #8]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	468b      	mov	fp, r1
 80103ac:	4618      	mov	r0, r3
 80103ae:	4690      	mov	r8, r2
 80103b0:	9303      	str	r3, [sp, #12]
 80103b2:	f7ef ff13 	bl	80001dc <strlen>
 80103b6:	4682      	mov	sl, r0
 80103b8:	9b03      	ldr	r3, [sp, #12]
 80103ba:	f8db 2000 	ldr.w	r2, [fp]
 80103be:	4403      	add	r3, r0
 80103c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80103c4:	9307      	str	r3, [sp, #28]
 80103c6:	1c93      	adds	r3, r2, #2
 80103c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80103cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80103d0:	32fe      	adds	r2, #254	; 0xfe
 80103d2:	18d1      	adds	r1, r2, r3
 80103d4:	461f      	mov	r7, r3
 80103d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80103da:	9101      	str	r1, [sp, #4]
 80103dc:	2830      	cmp	r0, #48	; 0x30
 80103de:	d0f8      	beq.n	80103d2 <__gethex+0x36>
 80103e0:	f7ff ffc7 	bl	8010372 <__hexdig_fun>
 80103e4:	4604      	mov	r4, r0
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d13a      	bne.n	8010460 <__gethex+0xc4>
 80103ea:	4652      	mov	r2, sl
 80103ec:	4638      	mov	r0, r7
 80103ee:	9903      	ldr	r1, [sp, #12]
 80103f0:	f001 f92a 	bl	8011648 <strncmp>
 80103f4:	4605      	mov	r5, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d166      	bne.n	80104c8 <__gethex+0x12c>
 80103fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80103fe:	eb07 060a 	add.w	r6, r7, sl
 8010402:	f7ff ffb6 	bl	8010372 <__hexdig_fun>
 8010406:	2800      	cmp	r0, #0
 8010408:	d060      	beq.n	80104cc <__gethex+0x130>
 801040a:	4633      	mov	r3, r6
 801040c:	7818      	ldrb	r0, [r3, #0]
 801040e:	461f      	mov	r7, r3
 8010410:	2830      	cmp	r0, #48	; 0x30
 8010412:	f103 0301 	add.w	r3, r3, #1
 8010416:	d0f9      	beq.n	801040c <__gethex+0x70>
 8010418:	f7ff ffab 	bl	8010372 <__hexdig_fun>
 801041c:	2301      	movs	r3, #1
 801041e:	fab0 f480 	clz	r4, r0
 8010422:	4635      	mov	r5, r6
 8010424:	0964      	lsrs	r4, r4, #5
 8010426:	9301      	str	r3, [sp, #4]
 8010428:	463a      	mov	r2, r7
 801042a:	4616      	mov	r6, r2
 801042c:	7830      	ldrb	r0, [r6, #0]
 801042e:	3201      	adds	r2, #1
 8010430:	f7ff ff9f 	bl	8010372 <__hexdig_fun>
 8010434:	2800      	cmp	r0, #0
 8010436:	d1f8      	bne.n	801042a <__gethex+0x8e>
 8010438:	4652      	mov	r2, sl
 801043a:	4630      	mov	r0, r6
 801043c:	9903      	ldr	r1, [sp, #12]
 801043e:	f001 f903 	bl	8011648 <strncmp>
 8010442:	b980      	cbnz	r0, 8010466 <__gethex+0xca>
 8010444:	b94d      	cbnz	r5, 801045a <__gethex+0xbe>
 8010446:	eb06 050a 	add.w	r5, r6, sl
 801044a:	462a      	mov	r2, r5
 801044c:	4616      	mov	r6, r2
 801044e:	7830      	ldrb	r0, [r6, #0]
 8010450:	3201      	adds	r2, #1
 8010452:	f7ff ff8e 	bl	8010372 <__hexdig_fun>
 8010456:	2800      	cmp	r0, #0
 8010458:	d1f8      	bne.n	801044c <__gethex+0xb0>
 801045a:	1bad      	subs	r5, r5, r6
 801045c:	00ad      	lsls	r5, r5, #2
 801045e:	e004      	b.n	801046a <__gethex+0xce>
 8010460:	2400      	movs	r4, #0
 8010462:	4625      	mov	r5, r4
 8010464:	e7e0      	b.n	8010428 <__gethex+0x8c>
 8010466:	2d00      	cmp	r5, #0
 8010468:	d1f7      	bne.n	801045a <__gethex+0xbe>
 801046a:	7833      	ldrb	r3, [r6, #0]
 801046c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010470:	2b50      	cmp	r3, #80	; 0x50
 8010472:	d139      	bne.n	80104e8 <__gethex+0x14c>
 8010474:	7873      	ldrb	r3, [r6, #1]
 8010476:	2b2b      	cmp	r3, #43	; 0x2b
 8010478:	d02a      	beq.n	80104d0 <__gethex+0x134>
 801047a:	2b2d      	cmp	r3, #45	; 0x2d
 801047c:	d02c      	beq.n	80104d8 <__gethex+0x13c>
 801047e:	f04f 0900 	mov.w	r9, #0
 8010482:	1c71      	adds	r1, r6, #1
 8010484:	7808      	ldrb	r0, [r1, #0]
 8010486:	f7ff ff74 	bl	8010372 <__hexdig_fun>
 801048a:	1e43      	subs	r3, r0, #1
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b18      	cmp	r3, #24
 8010490:	d82a      	bhi.n	80104e8 <__gethex+0x14c>
 8010492:	f1a0 0210 	sub.w	r2, r0, #16
 8010496:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801049a:	f7ff ff6a 	bl	8010372 <__hexdig_fun>
 801049e:	1e43      	subs	r3, r0, #1
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	2b18      	cmp	r3, #24
 80104a4:	d91b      	bls.n	80104de <__gethex+0x142>
 80104a6:	f1b9 0f00 	cmp.w	r9, #0
 80104aa:	d000      	beq.n	80104ae <__gethex+0x112>
 80104ac:	4252      	negs	r2, r2
 80104ae:	4415      	add	r5, r2
 80104b0:	f8cb 1000 	str.w	r1, [fp]
 80104b4:	b1d4      	cbz	r4, 80104ec <__gethex+0x150>
 80104b6:	9b01      	ldr	r3, [sp, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	bf14      	ite	ne
 80104bc:	2700      	movne	r7, #0
 80104be:	2706      	moveq	r7, #6
 80104c0:	4638      	mov	r0, r7
 80104c2:	b00b      	add	sp, #44	; 0x2c
 80104c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c8:	463e      	mov	r6, r7
 80104ca:	4625      	mov	r5, r4
 80104cc:	2401      	movs	r4, #1
 80104ce:	e7cc      	b.n	801046a <__gethex+0xce>
 80104d0:	f04f 0900 	mov.w	r9, #0
 80104d4:	1cb1      	adds	r1, r6, #2
 80104d6:	e7d5      	b.n	8010484 <__gethex+0xe8>
 80104d8:	f04f 0901 	mov.w	r9, #1
 80104dc:	e7fa      	b.n	80104d4 <__gethex+0x138>
 80104de:	230a      	movs	r3, #10
 80104e0:	fb03 0202 	mla	r2, r3, r2, r0
 80104e4:	3a10      	subs	r2, #16
 80104e6:	e7d6      	b.n	8010496 <__gethex+0xfa>
 80104e8:	4631      	mov	r1, r6
 80104ea:	e7e1      	b.n	80104b0 <__gethex+0x114>
 80104ec:	4621      	mov	r1, r4
 80104ee:	1bf3      	subs	r3, r6, r7
 80104f0:	3b01      	subs	r3, #1
 80104f2:	2b07      	cmp	r3, #7
 80104f4:	dc0a      	bgt.n	801050c <__gethex+0x170>
 80104f6:	9802      	ldr	r0, [sp, #8]
 80104f8:	f000 fa7e 	bl	80109f8 <_Balloc>
 80104fc:	4604      	mov	r4, r0
 80104fe:	b940      	cbnz	r0, 8010512 <__gethex+0x176>
 8010500:	4602      	mov	r2, r0
 8010502:	21de      	movs	r1, #222	; 0xde
 8010504:	4b62      	ldr	r3, [pc, #392]	; (8010690 <__gethex+0x2f4>)
 8010506:	4863      	ldr	r0, [pc, #396]	; (8010694 <__gethex+0x2f8>)
 8010508:	f001 f8be 	bl	8011688 <__assert_func>
 801050c:	3101      	adds	r1, #1
 801050e:	105b      	asrs	r3, r3, #1
 8010510:	e7ef      	b.n	80104f2 <__gethex+0x156>
 8010512:	f04f 0b00 	mov.w	fp, #0
 8010516:	f100 0914 	add.w	r9, r0, #20
 801051a:	f1ca 0301 	rsb	r3, sl, #1
 801051e:	f8cd 9010 	str.w	r9, [sp, #16]
 8010522:	f8cd b004 	str.w	fp, [sp, #4]
 8010526:	9308      	str	r3, [sp, #32]
 8010528:	42b7      	cmp	r7, r6
 801052a:	d33f      	bcc.n	80105ac <__gethex+0x210>
 801052c:	9f04      	ldr	r7, [sp, #16]
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	f847 3b04 	str.w	r3, [r7], #4
 8010534:	eba7 0709 	sub.w	r7, r7, r9
 8010538:	10bf      	asrs	r7, r7, #2
 801053a:	6127      	str	r7, [r4, #16]
 801053c:	4618      	mov	r0, r3
 801053e:	f000 fb51 	bl	8010be4 <__hi0bits>
 8010542:	017f      	lsls	r7, r7, #5
 8010544:	f8d8 6000 	ldr.w	r6, [r8]
 8010548:	1a3f      	subs	r7, r7, r0
 801054a:	42b7      	cmp	r7, r6
 801054c:	dd62      	ble.n	8010614 <__gethex+0x278>
 801054e:	1bbf      	subs	r7, r7, r6
 8010550:	4639      	mov	r1, r7
 8010552:	4620      	mov	r0, r4
 8010554:	f000 fee7 	bl	8011326 <__any_on>
 8010558:	4682      	mov	sl, r0
 801055a:	b1a8      	cbz	r0, 8010588 <__gethex+0x1ec>
 801055c:	f04f 0a01 	mov.w	sl, #1
 8010560:	1e7b      	subs	r3, r7, #1
 8010562:	1159      	asrs	r1, r3, #5
 8010564:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010568:	f003 021f 	and.w	r2, r3, #31
 801056c:	fa0a f202 	lsl.w	r2, sl, r2
 8010570:	420a      	tst	r2, r1
 8010572:	d009      	beq.n	8010588 <__gethex+0x1ec>
 8010574:	4553      	cmp	r3, sl
 8010576:	dd05      	ble.n	8010584 <__gethex+0x1e8>
 8010578:	4620      	mov	r0, r4
 801057a:	1eb9      	subs	r1, r7, #2
 801057c:	f000 fed3 	bl	8011326 <__any_on>
 8010580:	2800      	cmp	r0, #0
 8010582:	d144      	bne.n	801060e <__gethex+0x272>
 8010584:	f04f 0a02 	mov.w	sl, #2
 8010588:	4639      	mov	r1, r7
 801058a:	4620      	mov	r0, r4
 801058c:	f7ff fe9e 	bl	80102cc <rshift>
 8010590:	443d      	add	r5, r7
 8010592:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010596:	42ab      	cmp	r3, r5
 8010598:	da4a      	bge.n	8010630 <__gethex+0x294>
 801059a:	4621      	mov	r1, r4
 801059c:	9802      	ldr	r0, [sp, #8]
 801059e:	f000 fa6b 	bl	8010a78 <_Bfree>
 80105a2:	2300      	movs	r3, #0
 80105a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105a6:	27a3      	movs	r7, #163	; 0xa3
 80105a8:	6013      	str	r3, [r2, #0]
 80105aa:	e789      	b.n	80104c0 <__gethex+0x124>
 80105ac:	1e73      	subs	r3, r6, #1
 80105ae:	9a07      	ldr	r2, [sp, #28]
 80105b0:	9305      	str	r3, [sp, #20]
 80105b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d019      	beq.n	80105ee <__gethex+0x252>
 80105ba:	f1bb 0f20 	cmp.w	fp, #32
 80105be:	d107      	bne.n	80105d0 <__gethex+0x234>
 80105c0:	9b04      	ldr	r3, [sp, #16]
 80105c2:	9a01      	ldr	r2, [sp, #4]
 80105c4:	f843 2b04 	str.w	r2, [r3], #4
 80105c8:	9304      	str	r3, [sp, #16]
 80105ca:	2300      	movs	r3, #0
 80105cc:	469b      	mov	fp, r3
 80105ce:	9301      	str	r3, [sp, #4]
 80105d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80105d4:	f7ff fecd 	bl	8010372 <__hexdig_fun>
 80105d8:	9b01      	ldr	r3, [sp, #4]
 80105da:	f000 000f 	and.w	r0, r0, #15
 80105de:	fa00 f00b 	lsl.w	r0, r0, fp
 80105e2:	4303      	orrs	r3, r0
 80105e4:	9301      	str	r3, [sp, #4]
 80105e6:	f10b 0b04 	add.w	fp, fp, #4
 80105ea:	9b05      	ldr	r3, [sp, #20]
 80105ec:	e00d      	b.n	801060a <__gethex+0x26e>
 80105ee:	9b05      	ldr	r3, [sp, #20]
 80105f0:	9a08      	ldr	r2, [sp, #32]
 80105f2:	4413      	add	r3, r2
 80105f4:	42bb      	cmp	r3, r7
 80105f6:	d3e0      	bcc.n	80105ba <__gethex+0x21e>
 80105f8:	4618      	mov	r0, r3
 80105fa:	4652      	mov	r2, sl
 80105fc:	9903      	ldr	r1, [sp, #12]
 80105fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010600:	f001 f822 	bl	8011648 <strncmp>
 8010604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010606:	2800      	cmp	r0, #0
 8010608:	d1d7      	bne.n	80105ba <__gethex+0x21e>
 801060a:	461e      	mov	r6, r3
 801060c:	e78c      	b.n	8010528 <__gethex+0x18c>
 801060e:	f04f 0a03 	mov.w	sl, #3
 8010612:	e7b9      	b.n	8010588 <__gethex+0x1ec>
 8010614:	da09      	bge.n	801062a <__gethex+0x28e>
 8010616:	1bf7      	subs	r7, r6, r7
 8010618:	4621      	mov	r1, r4
 801061a:	463a      	mov	r2, r7
 801061c:	9802      	ldr	r0, [sp, #8]
 801061e:	f000 fc43 	bl	8010ea8 <__lshift>
 8010622:	4604      	mov	r4, r0
 8010624:	1bed      	subs	r5, r5, r7
 8010626:	f100 0914 	add.w	r9, r0, #20
 801062a:	f04f 0a00 	mov.w	sl, #0
 801062e:	e7b0      	b.n	8010592 <__gethex+0x1f6>
 8010630:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010634:	42a8      	cmp	r0, r5
 8010636:	dd71      	ble.n	801071c <__gethex+0x380>
 8010638:	1b45      	subs	r5, r0, r5
 801063a:	42ae      	cmp	r6, r5
 801063c:	dc34      	bgt.n	80106a8 <__gethex+0x30c>
 801063e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010642:	2b02      	cmp	r3, #2
 8010644:	d028      	beq.n	8010698 <__gethex+0x2fc>
 8010646:	2b03      	cmp	r3, #3
 8010648:	d02a      	beq.n	80106a0 <__gethex+0x304>
 801064a:	2b01      	cmp	r3, #1
 801064c:	d115      	bne.n	801067a <__gethex+0x2de>
 801064e:	42ae      	cmp	r6, r5
 8010650:	d113      	bne.n	801067a <__gethex+0x2de>
 8010652:	2e01      	cmp	r6, #1
 8010654:	d10b      	bne.n	801066e <__gethex+0x2d2>
 8010656:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801065a:	9a06      	ldr	r2, [sp, #24]
 801065c:	2762      	movs	r7, #98	; 0x62
 801065e:	6013      	str	r3, [r2, #0]
 8010660:	2301      	movs	r3, #1
 8010662:	6123      	str	r3, [r4, #16]
 8010664:	f8c9 3000 	str.w	r3, [r9]
 8010668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801066a:	601c      	str	r4, [r3, #0]
 801066c:	e728      	b.n	80104c0 <__gethex+0x124>
 801066e:	4620      	mov	r0, r4
 8010670:	1e71      	subs	r1, r6, #1
 8010672:	f000 fe58 	bl	8011326 <__any_on>
 8010676:	2800      	cmp	r0, #0
 8010678:	d1ed      	bne.n	8010656 <__gethex+0x2ba>
 801067a:	4621      	mov	r1, r4
 801067c:	9802      	ldr	r0, [sp, #8]
 801067e:	f000 f9fb 	bl	8010a78 <_Bfree>
 8010682:	2300      	movs	r3, #0
 8010684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010686:	2750      	movs	r7, #80	; 0x50
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	e719      	b.n	80104c0 <__gethex+0x124>
 801068c:	08012a78 	.word	0x08012a78
 8010690:	080129fc 	.word	0x080129fc
 8010694:	08012a0d 	.word	0x08012a0d
 8010698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1ed      	bne.n	801067a <__gethex+0x2de>
 801069e:	e7da      	b.n	8010656 <__gethex+0x2ba>
 80106a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1d7      	bne.n	8010656 <__gethex+0x2ba>
 80106a6:	e7e8      	b.n	801067a <__gethex+0x2de>
 80106a8:	1e6f      	subs	r7, r5, #1
 80106aa:	f1ba 0f00 	cmp.w	sl, #0
 80106ae:	d132      	bne.n	8010716 <__gethex+0x37a>
 80106b0:	b127      	cbz	r7, 80106bc <__gethex+0x320>
 80106b2:	4639      	mov	r1, r7
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 fe36 	bl	8011326 <__any_on>
 80106ba:	4682      	mov	sl, r0
 80106bc:	2101      	movs	r1, #1
 80106be:	117b      	asrs	r3, r7, #5
 80106c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80106c4:	f007 071f 	and.w	r7, r7, #31
 80106c8:	fa01 f707 	lsl.w	r7, r1, r7
 80106cc:	421f      	tst	r7, r3
 80106ce:	f04f 0702 	mov.w	r7, #2
 80106d2:	4629      	mov	r1, r5
 80106d4:	4620      	mov	r0, r4
 80106d6:	bf18      	it	ne
 80106d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80106dc:	1b76      	subs	r6, r6, r5
 80106de:	f7ff fdf5 	bl	80102cc <rshift>
 80106e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106e6:	f1ba 0f00 	cmp.w	sl, #0
 80106ea:	d048      	beq.n	801077e <__gethex+0x3e2>
 80106ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d015      	beq.n	8010720 <__gethex+0x384>
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	d017      	beq.n	8010728 <__gethex+0x38c>
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d109      	bne.n	8010710 <__gethex+0x374>
 80106fc:	f01a 0f02 	tst.w	sl, #2
 8010700:	d006      	beq.n	8010710 <__gethex+0x374>
 8010702:	f8d9 0000 	ldr.w	r0, [r9]
 8010706:	ea4a 0a00 	orr.w	sl, sl, r0
 801070a:	f01a 0f01 	tst.w	sl, #1
 801070e:	d10e      	bne.n	801072e <__gethex+0x392>
 8010710:	f047 0710 	orr.w	r7, r7, #16
 8010714:	e033      	b.n	801077e <__gethex+0x3e2>
 8010716:	f04f 0a01 	mov.w	sl, #1
 801071a:	e7cf      	b.n	80106bc <__gethex+0x320>
 801071c:	2701      	movs	r7, #1
 801071e:	e7e2      	b.n	80106e6 <__gethex+0x34a>
 8010720:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010722:	f1c3 0301 	rsb	r3, r3, #1
 8010726:	9315      	str	r3, [sp, #84]	; 0x54
 8010728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801072a:	2b00      	cmp	r3, #0
 801072c:	d0f0      	beq.n	8010710 <__gethex+0x374>
 801072e:	f04f 0c00 	mov.w	ip, #0
 8010732:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010736:	f104 0314 	add.w	r3, r4, #20
 801073a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801073e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010742:	4618      	mov	r0, r3
 8010744:	f853 2b04 	ldr.w	r2, [r3], #4
 8010748:	f1b2 3fff 	cmp.w	r2, #4294967295
 801074c:	d01c      	beq.n	8010788 <__gethex+0x3ec>
 801074e:	3201      	adds	r2, #1
 8010750:	6002      	str	r2, [r0, #0]
 8010752:	2f02      	cmp	r7, #2
 8010754:	f104 0314 	add.w	r3, r4, #20
 8010758:	d13d      	bne.n	80107d6 <__gethex+0x43a>
 801075a:	f8d8 2000 	ldr.w	r2, [r8]
 801075e:	3a01      	subs	r2, #1
 8010760:	42b2      	cmp	r2, r6
 8010762:	d10a      	bne.n	801077a <__gethex+0x3de>
 8010764:	2201      	movs	r2, #1
 8010766:	1171      	asrs	r1, r6, #5
 8010768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801076c:	f006 061f 	and.w	r6, r6, #31
 8010770:	fa02 f606 	lsl.w	r6, r2, r6
 8010774:	421e      	tst	r6, r3
 8010776:	bf18      	it	ne
 8010778:	4617      	movne	r7, r2
 801077a:	f047 0720 	orr.w	r7, r7, #32
 801077e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010780:	601c      	str	r4, [r3, #0]
 8010782:	9b06      	ldr	r3, [sp, #24]
 8010784:	601d      	str	r5, [r3, #0]
 8010786:	e69b      	b.n	80104c0 <__gethex+0x124>
 8010788:	4299      	cmp	r1, r3
 801078a:	f843 cc04 	str.w	ip, [r3, #-4]
 801078e:	d8d8      	bhi.n	8010742 <__gethex+0x3a6>
 8010790:	68a3      	ldr	r3, [r4, #8]
 8010792:	459b      	cmp	fp, r3
 8010794:	db17      	blt.n	80107c6 <__gethex+0x42a>
 8010796:	6861      	ldr	r1, [r4, #4]
 8010798:	9802      	ldr	r0, [sp, #8]
 801079a:	3101      	adds	r1, #1
 801079c:	f000 f92c 	bl	80109f8 <_Balloc>
 80107a0:	4681      	mov	r9, r0
 80107a2:	b918      	cbnz	r0, 80107ac <__gethex+0x410>
 80107a4:	4602      	mov	r2, r0
 80107a6:	2184      	movs	r1, #132	; 0x84
 80107a8:	4b19      	ldr	r3, [pc, #100]	; (8010810 <__gethex+0x474>)
 80107aa:	e6ac      	b.n	8010506 <__gethex+0x16a>
 80107ac:	6922      	ldr	r2, [r4, #16]
 80107ae:	f104 010c 	add.w	r1, r4, #12
 80107b2:	3202      	adds	r2, #2
 80107b4:	0092      	lsls	r2, r2, #2
 80107b6:	300c      	adds	r0, #12
 80107b8:	f7fd f904 	bl	800d9c4 <memcpy>
 80107bc:	4621      	mov	r1, r4
 80107be:	9802      	ldr	r0, [sp, #8]
 80107c0:	f000 f95a 	bl	8010a78 <_Bfree>
 80107c4:	464c      	mov	r4, r9
 80107c6:	6923      	ldr	r3, [r4, #16]
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	6122      	str	r2, [r4, #16]
 80107cc:	2201      	movs	r2, #1
 80107ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80107d2:	615a      	str	r2, [r3, #20]
 80107d4:	e7bd      	b.n	8010752 <__gethex+0x3b6>
 80107d6:	6922      	ldr	r2, [r4, #16]
 80107d8:	455a      	cmp	r2, fp
 80107da:	dd0b      	ble.n	80107f4 <__gethex+0x458>
 80107dc:	2101      	movs	r1, #1
 80107de:	4620      	mov	r0, r4
 80107e0:	f7ff fd74 	bl	80102cc <rshift>
 80107e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107e8:	3501      	adds	r5, #1
 80107ea:	42ab      	cmp	r3, r5
 80107ec:	f6ff aed5 	blt.w	801059a <__gethex+0x1fe>
 80107f0:	2701      	movs	r7, #1
 80107f2:	e7c2      	b.n	801077a <__gethex+0x3de>
 80107f4:	f016 061f 	ands.w	r6, r6, #31
 80107f8:	d0fa      	beq.n	80107f0 <__gethex+0x454>
 80107fa:	449a      	add	sl, r3
 80107fc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010800:	f000 f9f0 	bl	8010be4 <__hi0bits>
 8010804:	f1c6 0620 	rsb	r6, r6, #32
 8010808:	42b0      	cmp	r0, r6
 801080a:	dbe7      	blt.n	80107dc <__gethex+0x440>
 801080c:	e7f0      	b.n	80107f0 <__gethex+0x454>
 801080e:	bf00      	nop
 8010810:	080129fc 	.word	0x080129fc

08010814 <L_shift>:
 8010814:	f1c2 0208 	rsb	r2, r2, #8
 8010818:	0092      	lsls	r2, r2, #2
 801081a:	b570      	push	{r4, r5, r6, lr}
 801081c:	f1c2 0620 	rsb	r6, r2, #32
 8010820:	6843      	ldr	r3, [r0, #4]
 8010822:	6804      	ldr	r4, [r0, #0]
 8010824:	fa03 f506 	lsl.w	r5, r3, r6
 8010828:	432c      	orrs	r4, r5
 801082a:	40d3      	lsrs	r3, r2
 801082c:	6004      	str	r4, [r0, #0]
 801082e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010832:	4288      	cmp	r0, r1
 8010834:	d3f4      	bcc.n	8010820 <L_shift+0xc>
 8010836:	bd70      	pop	{r4, r5, r6, pc}

08010838 <__match>:
 8010838:	b530      	push	{r4, r5, lr}
 801083a:	6803      	ldr	r3, [r0, #0]
 801083c:	3301      	adds	r3, #1
 801083e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010842:	b914      	cbnz	r4, 801084a <__match+0x12>
 8010844:	6003      	str	r3, [r0, #0]
 8010846:	2001      	movs	r0, #1
 8010848:	bd30      	pop	{r4, r5, pc}
 801084a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801084e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010852:	2d19      	cmp	r5, #25
 8010854:	bf98      	it	ls
 8010856:	3220      	addls	r2, #32
 8010858:	42a2      	cmp	r2, r4
 801085a:	d0f0      	beq.n	801083e <__match+0x6>
 801085c:	2000      	movs	r0, #0
 801085e:	e7f3      	b.n	8010848 <__match+0x10>

08010860 <__hexnan>:
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	2500      	movs	r5, #0
 8010866:	680b      	ldr	r3, [r1, #0]
 8010868:	4682      	mov	sl, r0
 801086a:	115e      	asrs	r6, r3, #5
 801086c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010870:	f013 031f 	ands.w	r3, r3, #31
 8010874:	bf18      	it	ne
 8010876:	3604      	addne	r6, #4
 8010878:	1f37      	subs	r7, r6, #4
 801087a:	4690      	mov	r8, r2
 801087c:	46b9      	mov	r9, r7
 801087e:	463c      	mov	r4, r7
 8010880:	46ab      	mov	fp, r5
 8010882:	b087      	sub	sp, #28
 8010884:	6801      	ldr	r1, [r0, #0]
 8010886:	9301      	str	r3, [sp, #4]
 8010888:	f846 5c04 	str.w	r5, [r6, #-4]
 801088c:	9502      	str	r5, [sp, #8]
 801088e:	784a      	ldrb	r2, [r1, #1]
 8010890:	1c4b      	adds	r3, r1, #1
 8010892:	9303      	str	r3, [sp, #12]
 8010894:	b342      	cbz	r2, 80108e8 <__hexnan+0x88>
 8010896:	4610      	mov	r0, r2
 8010898:	9105      	str	r1, [sp, #20]
 801089a:	9204      	str	r2, [sp, #16]
 801089c:	f7ff fd69 	bl	8010372 <__hexdig_fun>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d14f      	bne.n	8010944 <__hexnan+0xe4>
 80108a4:	9a04      	ldr	r2, [sp, #16]
 80108a6:	9905      	ldr	r1, [sp, #20]
 80108a8:	2a20      	cmp	r2, #32
 80108aa:	d818      	bhi.n	80108de <__hexnan+0x7e>
 80108ac:	9b02      	ldr	r3, [sp, #8]
 80108ae:	459b      	cmp	fp, r3
 80108b0:	dd13      	ble.n	80108da <__hexnan+0x7a>
 80108b2:	454c      	cmp	r4, r9
 80108b4:	d206      	bcs.n	80108c4 <__hexnan+0x64>
 80108b6:	2d07      	cmp	r5, #7
 80108b8:	dc04      	bgt.n	80108c4 <__hexnan+0x64>
 80108ba:	462a      	mov	r2, r5
 80108bc:	4649      	mov	r1, r9
 80108be:	4620      	mov	r0, r4
 80108c0:	f7ff ffa8 	bl	8010814 <L_shift>
 80108c4:	4544      	cmp	r4, r8
 80108c6:	d950      	bls.n	801096a <__hexnan+0x10a>
 80108c8:	2300      	movs	r3, #0
 80108ca:	f1a4 0904 	sub.w	r9, r4, #4
 80108ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80108d2:	461d      	mov	r5, r3
 80108d4:	464c      	mov	r4, r9
 80108d6:	f8cd b008 	str.w	fp, [sp, #8]
 80108da:	9903      	ldr	r1, [sp, #12]
 80108dc:	e7d7      	b.n	801088e <__hexnan+0x2e>
 80108de:	2a29      	cmp	r2, #41	; 0x29
 80108e0:	d156      	bne.n	8010990 <__hexnan+0x130>
 80108e2:	3102      	adds	r1, #2
 80108e4:	f8ca 1000 	str.w	r1, [sl]
 80108e8:	f1bb 0f00 	cmp.w	fp, #0
 80108ec:	d050      	beq.n	8010990 <__hexnan+0x130>
 80108ee:	454c      	cmp	r4, r9
 80108f0:	d206      	bcs.n	8010900 <__hexnan+0xa0>
 80108f2:	2d07      	cmp	r5, #7
 80108f4:	dc04      	bgt.n	8010900 <__hexnan+0xa0>
 80108f6:	462a      	mov	r2, r5
 80108f8:	4649      	mov	r1, r9
 80108fa:	4620      	mov	r0, r4
 80108fc:	f7ff ff8a 	bl	8010814 <L_shift>
 8010900:	4544      	cmp	r4, r8
 8010902:	d934      	bls.n	801096e <__hexnan+0x10e>
 8010904:	4623      	mov	r3, r4
 8010906:	f1a8 0204 	sub.w	r2, r8, #4
 801090a:	f853 1b04 	ldr.w	r1, [r3], #4
 801090e:	429f      	cmp	r7, r3
 8010910:	f842 1f04 	str.w	r1, [r2, #4]!
 8010914:	d2f9      	bcs.n	801090a <__hexnan+0xaa>
 8010916:	1b3b      	subs	r3, r7, r4
 8010918:	f023 0303 	bic.w	r3, r3, #3
 801091c:	3304      	adds	r3, #4
 801091e:	3401      	adds	r4, #1
 8010920:	3e03      	subs	r6, #3
 8010922:	42b4      	cmp	r4, r6
 8010924:	bf88      	it	hi
 8010926:	2304      	movhi	r3, #4
 8010928:	2200      	movs	r2, #0
 801092a:	4443      	add	r3, r8
 801092c:	f843 2b04 	str.w	r2, [r3], #4
 8010930:	429f      	cmp	r7, r3
 8010932:	d2fb      	bcs.n	801092c <__hexnan+0xcc>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	b91b      	cbnz	r3, 8010940 <__hexnan+0xe0>
 8010938:	4547      	cmp	r7, r8
 801093a:	d127      	bne.n	801098c <__hexnan+0x12c>
 801093c:	2301      	movs	r3, #1
 801093e:	603b      	str	r3, [r7, #0]
 8010940:	2005      	movs	r0, #5
 8010942:	e026      	b.n	8010992 <__hexnan+0x132>
 8010944:	3501      	adds	r5, #1
 8010946:	2d08      	cmp	r5, #8
 8010948:	f10b 0b01 	add.w	fp, fp, #1
 801094c:	dd06      	ble.n	801095c <__hexnan+0xfc>
 801094e:	4544      	cmp	r4, r8
 8010950:	d9c3      	bls.n	80108da <__hexnan+0x7a>
 8010952:	2300      	movs	r3, #0
 8010954:	2501      	movs	r5, #1
 8010956:	f844 3c04 	str.w	r3, [r4, #-4]
 801095a:	3c04      	subs	r4, #4
 801095c:	6822      	ldr	r2, [r4, #0]
 801095e:	f000 000f 	and.w	r0, r0, #15
 8010962:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010966:	6022      	str	r2, [r4, #0]
 8010968:	e7b7      	b.n	80108da <__hexnan+0x7a>
 801096a:	2508      	movs	r5, #8
 801096c:	e7b5      	b.n	80108da <__hexnan+0x7a>
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d0df      	beq.n	8010934 <__hexnan+0xd4>
 8010974:	f04f 32ff 	mov.w	r2, #4294967295
 8010978:	f1c3 0320 	rsb	r3, r3, #32
 801097c:	fa22 f303 	lsr.w	r3, r2, r3
 8010980:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010984:	401a      	ands	r2, r3
 8010986:	f846 2c04 	str.w	r2, [r6, #-4]
 801098a:	e7d3      	b.n	8010934 <__hexnan+0xd4>
 801098c:	3f04      	subs	r7, #4
 801098e:	e7d1      	b.n	8010934 <__hexnan+0xd4>
 8010990:	2004      	movs	r0, #4
 8010992:	b007      	add	sp, #28
 8010994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010998 <_localeconv_r>:
 8010998:	4800      	ldr	r0, [pc, #0]	; (801099c <_localeconv_r+0x4>)
 801099a:	4770      	bx	lr
 801099c:	20000194 	.word	0x20000194

080109a0 <__ascii_mbtowc>:
 80109a0:	b082      	sub	sp, #8
 80109a2:	b901      	cbnz	r1, 80109a6 <__ascii_mbtowc+0x6>
 80109a4:	a901      	add	r1, sp, #4
 80109a6:	b142      	cbz	r2, 80109ba <__ascii_mbtowc+0x1a>
 80109a8:	b14b      	cbz	r3, 80109be <__ascii_mbtowc+0x1e>
 80109aa:	7813      	ldrb	r3, [r2, #0]
 80109ac:	600b      	str	r3, [r1, #0]
 80109ae:	7812      	ldrb	r2, [r2, #0]
 80109b0:	1e10      	subs	r0, r2, #0
 80109b2:	bf18      	it	ne
 80109b4:	2001      	movne	r0, #1
 80109b6:	b002      	add	sp, #8
 80109b8:	4770      	bx	lr
 80109ba:	4610      	mov	r0, r2
 80109bc:	e7fb      	b.n	80109b6 <__ascii_mbtowc+0x16>
 80109be:	f06f 0001 	mvn.w	r0, #1
 80109c2:	e7f8      	b.n	80109b6 <__ascii_mbtowc+0x16>

080109c4 <memchr>:
 80109c4:	4603      	mov	r3, r0
 80109c6:	b510      	push	{r4, lr}
 80109c8:	b2c9      	uxtb	r1, r1
 80109ca:	4402      	add	r2, r0
 80109cc:	4293      	cmp	r3, r2
 80109ce:	4618      	mov	r0, r3
 80109d0:	d101      	bne.n	80109d6 <memchr+0x12>
 80109d2:	2000      	movs	r0, #0
 80109d4:	e003      	b.n	80109de <memchr+0x1a>
 80109d6:	7804      	ldrb	r4, [r0, #0]
 80109d8:	3301      	adds	r3, #1
 80109da:	428c      	cmp	r4, r1
 80109dc:	d1f6      	bne.n	80109cc <memchr+0x8>
 80109de:	bd10      	pop	{r4, pc}

080109e0 <__malloc_lock>:
 80109e0:	4801      	ldr	r0, [pc, #4]	; (80109e8 <__malloc_lock+0x8>)
 80109e2:	f000 be82 	b.w	80116ea <__retarget_lock_acquire_recursive>
 80109e6:	bf00      	nop
 80109e8:	20002df8 	.word	0x20002df8

080109ec <__malloc_unlock>:
 80109ec:	4801      	ldr	r0, [pc, #4]	; (80109f4 <__malloc_unlock+0x8>)
 80109ee:	f000 be7d 	b.w	80116ec <__retarget_lock_release_recursive>
 80109f2:	bf00      	nop
 80109f4:	20002df8 	.word	0x20002df8

080109f8 <_Balloc>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80109fc:	4604      	mov	r4, r0
 80109fe:	460d      	mov	r5, r1
 8010a00:	b976      	cbnz	r6, 8010a20 <_Balloc+0x28>
 8010a02:	2010      	movs	r0, #16
 8010a04:	f7fc ffce 	bl	800d9a4 <malloc>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	6260      	str	r0, [r4, #36]	; 0x24
 8010a0c:	b920      	cbnz	r0, 8010a18 <_Balloc+0x20>
 8010a0e:	2166      	movs	r1, #102	; 0x66
 8010a10:	4b17      	ldr	r3, [pc, #92]	; (8010a70 <_Balloc+0x78>)
 8010a12:	4818      	ldr	r0, [pc, #96]	; (8010a74 <_Balloc+0x7c>)
 8010a14:	f000 fe38 	bl	8011688 <__assert_func>
 8010a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a1c:	6006      	str	r6, [r0, #0]
 8010a1e:	60c6      	str	r6, [r0, #12]
 8010a20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a22:	68f3      	ldr	r3, [r6, #12]
 8010a24:	b183      	cbz	r3, 8010a48 <_Balloc+0x50>
 8010a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a2e:	b9b8      	cbnz	r0, 8010a60 <_Balloc+0x68>
 8010a30:	2101      	movs	r1, #1
 8010a32:	fa01 f605 	lsl.w	r6, r1, r5
 8010a36:	1d72      	adds	r2, r6, #5
 8010a38:	4620      	mov	r0, r4
 8010a3a:	0092      	lsls	r2, r2, #2
 8010a3c:	f000 fc94 	bl	8011368 <_calloc_r>
 8010a40:	b160      	cbz	r0, 8010a5c <_Balloc+0x64>
 8010a42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a46:	e00e      	b.n	8010a66 <_Balloc+0x6e>
 8010a48:	2221      	movs	r2, #33	; 0x21
 8010a4a:	2104      	movs	r1, #4
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f000 fc8b 	bl	8011368 <_calloc_r>
 8010a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a54:	60f0      	str	r0, [r6, #12]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d1e4      	bne.n	8010a26 <_Balloc+0x2e>
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	bd70      	pop	{r4, r5, r6, pc}
 8010a60:	6802      	ldr	r2, [r0, #0]
 8010a62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a66:	2300      	movs	r3, #0
 8010a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a6c:	e7f7      	b.n	8010a5e <_Balloc+0x66>
 8010a6e:	bf00      	nop
 8010a70:	08012986 	.word	0x08012986
 8010a74:	08012a8c 	.word	0x08012a8c

08010a78 <_Bfree>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	460c      	mov	r4, r1
 8010a80:	b976      	cbnz	r6, 8010aa0 <_Bfree+0x28>
 8010a82:	2010      	movs	r0, #16
 8010a84:	f7fc ff8e 	bl	800d9a4 <malloc>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	6268      	str	r0, [r5, #36]	; 0x24
 8010a8c:	b920      	cbnz	r0, 8010a98 <_Bfree+0x20>
 8010a8e:	218a      	movs	r1, #138	; 0x8a
 8010a90:	4b08      	ldr	r3, [pc, #32]	; (8010ab4 <_Bfree+0x3c>)
 8010a92:	4809      	ldr	r0, [pc, #36]	; (8010ab8 <_Bfree+0x40>)
 8010a94:	f000 fdf8 	bl	8011688 <__assert_func>
 8010a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a9c:	6006      	str	r6, [r0, #0]
 8010a9e:	60c6      	str	r6, [r0, #12]
 8010aa0:	b13c      	cbz	r4, 8010ab2 <_Bfree+0x3a>
 8010aa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010aa4:	6862      	ldr	r2, [r4, #4]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010aac:	6021      	str	r1, [r4, #0]
 8010aae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	08012986 	.word	0x08012986
 8010ab8:	08012a8c 	.word	0x08012a8c

08010abc <__multadd>:
 8010abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac0:	4698      	mov	r8, r3
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	690e      	ldr	r6, [r1, #16]
 8010ac8:	4607      	mov	r7, r0
 8010aca:	f101 0014 	add.w	r0, r1, #20
 8010ace:	6805      	ldr	r5, [r0, #0]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	b2a9      	uxth	r1, r5
 8010ad4:	fb02 8101 	mla	r1, r2, r1, r8
 8010ad8:	0c2d      	lsrs	r5, r5, #16
 8010ada:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010ade:	fb02 c505 	mla	r5, r2, r5, ip
 8010ae2:	b289      	uxth	r1, r1
 8010ae4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010ae8:	429e      	cmp	r6, r3
 8010aea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010aee:	f840 1b04 	str.w	r1, [r0], #4
 8010af2:	dcec      	bgt.n	8010ace <__multadd+0x12>
 8010af4:	f1b8 0f00 	cmp.w	r8, #0
 8010af8:	d022      	beq.n	8010b40 <__multadd+0x84>
 8010afa:	68a3      	ldr	r3, [r4, #8]
 8010afc:	42b3      	cmp	r3, r6
 8010afe:	dc19      	bgt.n	8010b34 <__multadd+0x78>
 8010b00:	6861      	ldr	r1, [r4, #4]
 8010b02:	4638      	mov	r0, r7
 8010b04:	3101      	adds	r1, #1
 8010b06:	f7ff ff77 	bl	80109f8 <_Balloc>
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	b928      	cbnz	r0, 8010b1a <__multadd+0x5e>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	21b5      	movs	r1, #181	; 0xb5
 8010b12:	4b0d      	ldr	r3, [pc, #52]	; (8010b48 <__multadd+0x8c>)
 8010b14:	480d      	ldr	r0, [pc, #52]	; (8010b4c <__multadd+0x90>)
 8010b16:	f000 fdb7 	bl	8011688 <__assert_func>
 8010b1a:	6922      	ldr	r2, [r4, #16]
 8010b1c:	f104 010c 	add.w	r1, r4, #12
 8010b20:	3202      	adds	r2, #2
 8010b22:	0092      	lsls	r2, r2, #2
 8010b24:	300c      	adds	r0, #12
 8010b26:	f7fc ff4d 	bl	800d9c4 <memcpy>
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	4638      	mov	r0, r7
 8010b2e:	f7ff ffa3 	bl	8010a78 <_Bfree>
 8010b32:	462c      	mov	r4, r5
 8010b34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010b38:	3601      	adds	r6, #1
 8010b3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010b3e:	6126      	str	r6, [r4, #16]
 8010b40:	4620      	mov	r0, r4
 8010b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b46:	bf00      	nop
 8010b48:	080129fc 	.word	0x080129fc
 8010b4c:	08012a8c 	.word	0x08012a8c

08010b50 <__s2b>:
 8010b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b54:	4615      	mov	r5, r2
 8010b56:	2209      	movs	r2, #9
 8010b58:	461f      	mov	r7, r3
 8010b5a:	3308      	adds	r3, #8
 8010b5c:	460c      	mov	r4, r1
 8010b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b62:	4606      	mov	r6, r0
 8010b64:	2201      	movs	r2, #1
 8010b66:	2100      	movs	r1, #0
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	db09      	blt.n	8010b80 <__s2b+0x30>
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7ff ff43 	bl	80109f8 <_Balloc>
 8010b72:	b940      	cbnz	r0, 8010b86 <__s2b+0x36>
 8010b74:	4602      	mov	r2, r0
 8010b76:	21ce      	movs	r1, #206	; 0xce
 8010b78:	4b18      	ldr	r3, [pc, #96]	; (8010bdc <__s2b+0x8c>)
 8010b7a:	4819      	ldr	r0, [pc, #100]	; (8010be0 <__s2b+0x90>)
 8010b7c:	f000 fd84 	bl	8011688 <__assert_func>
 8010b80:	0052      	lsls	r2, r2, #1
 8010b82:	3101      	adds	r1, #1
 8010b84:	e7f0      	b.n	8010b68 <__s2b+0x18>
 8010b86:	9b08      	ldr	r3, [sp, #32]
 8010b88:	2d09      	cmp	r5, #9
 8010b8a:	6143      	str	r3, [r0, #20]
 8010b8c:	f04f 0301 	mov.w	r3, #1
 8010b90:	6103      	str	r3, [r0, #16]
 8010b92:	dd16      	ble.n	8010bc2 <__s2b+0x72>
 8010b94:	f104 0909 	add.w	r9, r4, #9
 8010b98:	46c8      	mov	r8, r9
 8010b9a:	442c      	add	r4, r5
 8010b9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	220a      	movs	r2, #10
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	3b30      	subs	r3, #48	; 0x30
 8010ba8:	f7ff ff88 	bl	8010abc <__multadd>
 8010bac:	45a0      	cmp	r8, r4
 8010bae:	d1f5      	bne.n	8010b9c <__s2b+0x4c>
 8010bb0:	f1a5 0408 	sub.w	r4, r5, #8
 8010bb4:	444c      	add	r4, r9
 8010bb6:	1b2d      	subs	r5, r5, r4
 8010bb8:	1963      	adds	r3, r4, r5
 8010bba:	42bb      	cmp	r3, r7
 8010bbc:	db04      	blt.n	8010bc8 <__s2b+0x78>
 8010bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bc2:	2509      	movs	r5, #9
 8010bc4:	340a      	adds	r4, #10
 8010bc6:	e7f6      	b.n	8010bb6 <__s2b+0x66>
 8010bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010bcc:	4601      	mov	r1, r0
 8010bce:	220a      	movs	r2, #10
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	3b30      	subs	r3, #48	; 0x30
 8010bd4:	f7ff ff72 	bl	8010abc <__multadd>
 8010bd8:	e7ee      	b.n	8010bb8 <__s2b+0x68>
 8010bda:	bf00      	nop
 8010bdc:	080129fc 	.word	0x080129fc
 8010be0:	08012a8c 	.word	0x08012a8c

08010be4 <__hi0bits>:
 8010be4:	0c02      	lsrs	r2, r0, #16
 8010be6:	0412      	lsls	r2, r2, #16
 8010be8:	4603      	mov	r3, r0
 8010bea:	b9ca      	cbnz	r2, 8010c20 <__hi0bits+0x3c>
 8010bec:	0403      	lsls	r3, r0, #16
 8010bee:	2010      	movs	r0, #16
 8010bf0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010bf4:	bf04      	itt	eq
 8010bf6:	021b      	lsleq	r3, r3, #8
 8010bf8:	3008      	addeq	r0, #8
 8010bfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010bfe:	bf04      	itt	eq
 8010c00:	011b      	lsleq	r3, r3, #4
 8010c02:	3004      	addeq	r0, #4
 8010c04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010c08:	bf04      	itt	eq
 8010c0a:	009b      	lsleq	r3, r3, #2
 8010c0c:	3002      	addeq	r0, #2
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	db05      	blt.n	8010c1e <__hi0bits+0x3a>
 8010c12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010c16:	f100 0001 	add.w	r0, r0, #1
 8010c1a:	bf08      	it	eq
 8010c1c:	2020      	moveq	r0, #32
 8010c1e:	4770      	bx	lr
 8010c20:	2000      	movs	r0, #0
 8010c22:	e7e5      	b.n	8010bf0 <__hi0bits+0xc>

08010c24 <__lo0bits>:
 8010c24:	6803      	ldr	r3, [r0, #0]
 8010c26:	4602      	mov	r2, r0
 8010c28:	f013 0007 	ands.w	r0, r3, #7
 8010c2c:	d00b      	beq.n	8010c46 <__lo0bits+0x22>
 8010c2e:	07d9      	lsls	r1, r3, #31
 8010c30:	d422      	bmi.n	8010c78 <__lo0bits+0x54>
 8010c32:	0798      	lsls	r0, r3, #30
 8010c34:	bf49      	itett	mi
 8010c36:	085b      	lsrmi	r3, r3, #1
 8010c38:	089b      	lsrpl	r3, r3, #2
 8010c3a:	2001      	movmi	r0, #1
 8010c3c:	6013      	strmi	r3, [r2, #0]
 8010c3e:	bf5c      	itt	pl
 8010c40:	2002      	movpl	r0, #2
 8010c42:	6013      	strpl	r3, [r2, #0]
 8010c44:	4770      	bx	lr
 8010c46:	b299      	uxth	r1, r3
 8010c48:	b909      	cbnz	r1, 8010c4e <__lo0bits+0x2a>
 8010c4a:	2010      	movs	r0, #16
 8010c4c:	0c1b      	lsrs	r3, r3, #16
 8010c4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c52:	bf04      	itt	eq
 8010c54:	0a1b      	lsreq	r3, r3, #8
 8010c56:	3008      	addeq	r0, #8
 8010c58:	0719      	lsls	r1, r3, #28
 8010c5a:	bf04      	itt	eq
 8010c5c:	091b      	lsreq	r3, r3, #4
 8010c5e:	3004      	addeq	r0, #4
 8010c60:	0799      	lsls	r1, r3, #30
 8010c62:	bf04      	itt	eq
 8010c64:	089b      	lsreq	r3, r3, #2
 8010c66:	3002      	addeq	r0, #2
 8010c68:	07d9      	lsls	r1, r3, #31
 8010c6a:	d403      	bmi.n	8010c74 <__lo0bits+0x50>
 8010c6c:	085b      	lsrs	r3, r3, #1
 8010c6e:	f100 0001 	add.w	r0, r0, #1
 8010c72:	d003      	beq.n	8010c7c <__lo0bits+0x58>
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	4770      	bx	lr
 8010c78:	2000      	movs	r0, #0
 8010c7a:	4770      	bx	lr
 8010c7c:	2020      	movs	r0, #32
 8010c7e:	4770      	bx	lr

08010c80 <__i2b>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	460c      	mov	r4, r1
 8010c84:	2101      	movs	r1, #1
 8010c86:	f7ff feb7 	bl	80109f8 <_Balloc>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	b928      	cbnz	r0, 8010c9a <__i2b+0x1a>
 8010c8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c92:	4b04      	ldr	r3, [pc, #16]	; (8010ca4 <__i2b+0x24>)
 8010c94:	4804      	ldr	r0, [pc, #16]	; (8010ca8 <__i2b+0x28>)
 8010c96:	f000 fcf7 	bl	8011688 <__assert_func>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	6144      	str	r4, [r0, #20]
 8010c9e:	6103      	str	r3, [r0, #16]
 8010ca0:	bd10      	pop	{r4, pc}
 8010ca2:	bf00      	nop
 8010ca4:	080129fc 	.word	0x080129fc
 8010ca8:	08012a8c 	.word	0x08012a8c

08010cac <__multiply>:
 8010cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb0:	4614      	mov	r4, r2
 8010cb2:	690a      	ldr	r2, [r1, #16]
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	bfbe      	ittt	lt
 8010cbc:	460b      	movlt	r3, r1
 8010cbe:	4625      	movlt	r5, r4
 8010cc0:	461c      	movlt	r4, r3
 8010cc2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010cc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010cca:	68ab      	ldr	r3, [r5, #8]
 8010ccc:	6869      	ldr	r1, [r5, #4]
 8010cce:	eb0a 0709 	add.w	r7, sl, r9
 8010cd2:	42bb      	cmp	r3, r7
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	bfb8      	it	lt
 8010cd8:	3101      	addlt	r1, #1
 8010cda:	f7ff fe8d 	bl	80109f8 <_Balloc>
 8010cde:	b930      	cbnz	r0, 8010cee <__multiply+0x42>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	f240 115d 	movw	r1, #349	; 0x15d
 8010ce6:	4b41      	ldr	r3, [pc, #260]	; (8010dec <__multiply+0x140>)
 8010ce8:	4841      	ldr	r0, [pc, #260]	; (8010df0 <__multiply+0x144>)
 8010cea:	f000 fccd 	bl	8011688 <__assert_func>
 8010cee:	f100 0614 	add.w	r6, r0, #20
 8010cf2:	4633      	mov	r3, r6
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010cfa:	4543      	cmp	r3, r8
 8010cfc:	d31e      	bcc.n	8010d3c <__multiply+0x90>
 8010cfe:	f105 0c14 	add.w	ip, r5, #20
 8010d02:	f104 0314 	add.w	r3, r4, #20
 8010d06:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010d0a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010d0e:	9202      	str	r2, [sp, #8]
 8010d10:	ebac 0205 	sub.w	r2, ip, r5
 8010d14:	3a15      	subs	r2, #21
 8010d16:	f022 0203 	bic.w	r2, r2, #3
 8010d1a:	3204      	adds	r2, #4
 8010d1c:	f105 0115 	add.w	r1, r5, #21
 8010d20:	458c      	cmp	ip, r1
 8010d22:	bf38      	it	cc
 8010d24:	2204      	movcc	r2, #4
 8010d26:	9201      	str	r2, [sp, #4]
 8010d28:	9a02      	ldr	r2, [sp, #8]
 8010d2a:	9303      	str	r3, [sp, #12]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d808      	bhi.n	8010d42 <__multiply+0x96>
 8010d30:	2f00      	cmp	r7, #0
 8010d32:	dc55      	bgt.n	8010de0 <__multiply+0x134>
 8010d34:	6107      	str	r7, [r0, #16]
 8010d36:	b005      	add	sp, #20
 8010d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	f843 2b04 	str.w	r2, [r3], #4
 8010d40:	e7db      	b.n	8010cfa <__multiply+0x4e>
 8010d42:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d46:	f1ba 0f00 	cmp.w	sl, #0
 8010d4a:	d020      	beq.n	8010d8e <__multiply+0xe2>
 8010d4c:	46b1      	mov	r9, r6
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f105 0e14 	add.w	lr, r5, #20
 8010d54:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010d58:	f8d9 b000 	ldr.w	fp, [r9]
 8010d5c:	b2a1      	uxth	r1, r4
 8010d5e:	fa1f fb8b 	uxth.w	fp, fp
 8010d62:	fb0a b101 	mla	r1, sl, r1, fp
 8010d66:	4411      	add	r1, r2
 8010d68:	f8d9 2000 	ldr.w	r2, [r9]
 8010d6c:	0c24      	lsrs	r4, r4, #16
 8010d6e:	0c12      	lsrs	r2, r2, #16
 8010d70:	fb0a 2404 	mla	r4, sl, r4, r2
 8010d74:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010d78:	b289      	uxth	r1, r1
 8010d7a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010d7e:	45f4      	cmp	ip, lr
 8010d80:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010d84:	f849 1b04 	str.w	r1, [r9], #4
 8010d88:	d8e4      	bhi.n	8010d54 <__multiply+0xa8>
 8010d8a:	9901      	ldr	r1, [sp, #4]
 8010d8c:	5072      	str	r2, [r6, r1]
 8010d8e:	9a03      	ldr	r2, [sp, #12]
 8010d90:	3304      	adds	r3, #4
 8010d92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d96:	f1b9 0f00 	cmp.w	r9, #0
 8010d9a:	d01f      	beq.n	8010ddc <__multiply+0x130>
 8010d9c:	46b6      	mov	lr, r6
 8010d9e:	f04f 0a00 	mov.w	sl, #0
 8010da2:	6834      	ldr	r4, [r6, #0]
 8010da4:	f105 0114 	add.w	r1, r5, #20
 8010da8:	880a      	ldrh	r2, [r1, #0]
 8010daa:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010dae:	b2a4      	uxth	r4, r4
 8010db0:	fb09 b202 	mla	r2, r9, r2, fp
 8010db4:	4492      	add	sl, r2
 8010db6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010dba:	f84e 4b04 	str.w	r4, [lr], #4
 8010dbe:	f851 4b04 	ldr.w	r4, [r1], #4
 8010dc2:	f8be 2000 	ldrh.w	r2, [lr]
 8010dc6:	0c24      	lsrs	r4, r4, #16
 8010dc8:	fb09 2404 	mla	r4, r9, r4, r2
 8010dcc:	458c      	cmp	ip, r1
 8010dce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010dd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010dd6:	d8e7      	bhi.n	8010da8 <__multiply+0xfc>
 8010dd8:	9a01      	ldr	r2, [sp, #4]
 8010dda:	50b4      	str	r4, [r6, r2]
 8010ddc:	3604      	adds	r6, #4
 8010dde:	e7a3      	b.n	8010d28 <__multiply+0x7c>
 8010de0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1a5      	bne.n	8010d34 <__multiply+0x88>
 8010de8:	3f01      	subs	r7, #1
 8010dea:	e7a1      	b.n	8010d30 <__multiply+0x84>
 8010dec:	080129fc 	.word	0x080129fc
 8010df0:	08012a8c 	.word	0x08012a8c

08010df4 <__pow5mult>:
 8010df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010df8:	4615      	mov	r5, r2
 8010dfa:	f012 0203 	ands.w	r2, r2, #3
 8010dfe:	4606      	mov	r6, r0
 8010e00:	460f      	mov	r7, r1
 8010e02:	d007      	beq.n	8010e14 <__pow5mult+0x20>
 8010e04:	4c25      	ldr	r4, [pc, #148]	; (8010e9c <__pow5mult+0xa8>)
 8010e06:	3a01      	subs	r2, #1
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e0e:	f7ff fe55 	bl	8010abc <__multadd>
 8010e12:	4607      	mov	r7, r0
 8010e14:	10ad      	asrs	r5, r5, #2
 8010e16:	d03d      	beq.n	8010e94 <__pow5mult+0xa0>
 8010e18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e1a:	b97c      	cbnz	r4, 8010e3c <__pow5mult+0x48>
 8010e1c:	2010      	movs	r0, #16
 8010e1e:	f7fc fdc1 	bl	800d9a4 <malloc>
 8010e22:	4602      	mov	r2, r0
 8010e24:	6270      	str	r0, [r6, #36]	; 0x24
 8010e26:	b928      	cbnz	r0, 8010e34 <__pow5mult+0x40>
 8010e28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e2c:	4b1c      	ldr	r3, [pc, #112]	; (8010ea0 <__pow5mult+0xac>)
 8010e2e:	481d      	ldr	r0, [pc, #116]	; (8010ea4 <__pow5mult+0xb0>)
 8010e30:	f000 fc2a 	bl	8011688 <__assert_func>
 8010e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e38:	6004      	str	r4, [r0, #0]
 8010e3a:	60c4      	str	r4, [r0, #12]
 8010e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e44:	b94c      	cbnz	r4, 8010e5a <__pow5mult+0x66>
 8010e46:	f240 2171 	movw	r1, #625	; 0x271
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7ff ff18 	bl	8010c80 <__i2b>
 8010e50:	2300      	movs	r3, #0
 8010e52:	4604      	mov	r4, r0
 8010e54:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	f04f 0900 	mov.w	r9, #0
 8010e5e:	07eb      	lsls	r3, r5, #31
 8010e60:	d50a      	bpl.n	8010e78 <__pow5mult+0x84>
 8010e62:	4639      	mov	r1, r7
 8010e64:	4622      	mov	r2, r4
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff ff20 	bl	8010cac <__multiply>
 8010e6c:	4680      	mov	r8, r0
 8010e6e:	4639      	mov	r1, r7
 8010e70:	4630      	mov	r0, r6
 8010e72:	f7ff fe01 	bl	8010a78 <_Bfree>
 8010e76:	4647      	mov	r7, r8
 8010e78:	106d      	asrs	r5, r5, #1
 8010e7a:	d00b      	beq.n	8010e94 <__pow5mult+0xa0>
 8010e7c:	6820      	ldr	r0, [r4, #0]
 8010e7e:	b938      	cbnz	r0, 8010e90 <__pow5mult+0x9c>
 8010e80:	4622      	mov	r2, r4
 8010e82:	4621      	mov	r1, r4
 8010e84:	4630      	mov	r0, r6
 8010e86:	f7ff ff11 	bl	8010cac <__multiply>
 8010e8a:	6020      	str	r0, [r4, #0]
 8010e8c:	f8c0 9000 	str.w	r9, [r0]
 8010e90:	4604      	mov	r4, r0
 8010e92:	e7e4      	b.n	8010e5e <__pow5mult+0x6a>
 8010e94:	4638      	mov	r0, r7
 8010e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e9a:	bf00      	nop
 8010e9c:	08012be0 	.word	0x08012be0
 8010ea0:	08012986 	.word	0x08012986
 8010ea4:	08012a8c 	.word	0x08012a8c

08010ea8 <__lshift>:
 8010ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eac:	460c      	mov	r4, r1
 8010eae:	4607      	mov	r7, r0
 8010eb0:	4691      	mov	r9, r2
 8010eb2:	6923      	ldr	r3, [r4, #16]
 8010eb4:	6849      	ldr	r1, [r1, #4]
 8010eb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ec0:	f108 0601 	add.w	r6, r8, #1
 8010ec4:	42b3      	cmp	r3, r6
 8010ec6:	db0b      	blt.n	8010ee0 <__lshift+0x38>
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ff fd95 	bl	80109f8 <_Balloc>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	b948      	cbnz	r0, 8010ee6 <__lshift+0x3e>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ed8:	4b27      	ldr	r3, [pc, #156]	; (8010f78 <__lshift+0xd0>)
 8010eda:	4828      	ldr	r0, [pc, #160]	; (8010f7c <__lshift+0xd4>)
 8010edc:	f000 fbd4 	bl	8011688 <__assert_func>
 8010ee0:	3101      	adds	r1, #1
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	e7ee      	b.n	8010ec4 <__lshift+0x1c>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f100 0114 	add.w	r1, r0, #20
 8010eec:	f100 0210 	add.w	r2, r0, #16
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	4553      	cmp	r3, sl
 8010ef4:	db33      	blt.n	8010f5e <__lshift+0xb6>
 8010ef6:	6920      	ldr	r0, [r4, #16]
 8010ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010efc:	f104 0314 	add.w	r3, r4, #20
 8010f00:	f019 091f 	ands.w	r9, r9, #31
 8010f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f0c:	d02b      	beq.n	8010f66 <__lshift+0xbe>
 8010f0e:	468a      	mov	sl, r1
 8010f10:	2200      	movs	r2, #0
 8010f12:	f1c9 0e20 	rsb	lr, r9, #32
 8010f16:	6818      	ldr	r0, [r3, #0]
 8010f18:	fa00 f009 	lsl.w	r0, r0, r9
 8010f1c:	4302      	orrs	r2, r0
 8010f1e:	f84a 2b04 	str.w	r2, [sl], #4
 8010f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f26:	459c      	cmp	ip, r3
 8010f28:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f2c:	d8f3      	bhi.n	8010f16 <__lshift+0x6e>
 8010f2e:	ebac 0304 	sub.w	r3, ip, r4
 8010f32:	3b15      	subs	r3, #21
 8010f34:	f023 0303 	bic.w	r3, r3, #3
 8010f38:	3304      	adds	r3, #4
 8010f3a:	f104 0015 	add.w	r0, r4, #21
 8010f3e:	4584      	cmp	ip, r0
 8010f40:	bf38      	it	cc
 8010f42:	2304      	movcc	r3, #4
 8010f44:	50ca      	str	r2, [r1, r3]
 8010f46:	b10a      	cbz	r2, 8010f4c <__lshift+0xa4>
 8010f48:	f108 0602 	add.w	r6, r8, #2
 8010f4c:	3e01      	subs	r6, #1
 8010f4e:	4638      	mov	r0, r7
 8010f50:	4621      	mov	r1, r4
 8010f52:	612e      	str	r6, [r5, #16]
 8010f54:	f7ff fd90 	bl	8010a78 <_Bfree>
 8010f58:	4628      	mov	r0, r5
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f62:	3301      	adds	r3, #1
 8010f64:	e7c5      	b.n	8010ef2 <__lshift+0x4a>
 8010f66:	3904      	subs	r1, #4
 8010f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f6c:	459c      	cmp	ip, r3
 8010f6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f72:	d8f9      	bhi.n	8010f68 <__lshift+0xc0>
 8010f74:	e7ea      	b.n	8010f4c <__lshift+0xa4>
 8010f76:	bf00      	nop
 8010f78:	080129fc 	.word	0x080129fc
 8010f7c:	08012a8c 	.word	0x08012a8c

08010f80 <__mcmp>:
 8010f80:	4603      	mov	r3, r0
 8010f82:	690a      	ldr	r2, [r1, #16]
 8010f84:	6900      	ldr	r0, [r0, #16]
 8010f86:	b530      	push	{r4, r5, lr}
 8010f88:	1a80      	subs	r0, r0, r2
 8010f8a:	d10d      	bne.n	8010fa8 <__mcmp+0x28>
 8010f8c:	3314      	adds	r3, #20
 8010f8e:	3114      	adds	r1, #20
 8010f90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010f94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010f98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010f9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fa0:	4295      	cmp	r5, r2
 8010fa2:	d002      	beq.n	8010faa <__mcmp+0x2a>
 8010fa4:	d304      	bcc.n	8010fb0 <__mcmp+0x30>
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	bd30      	pop	{r4, r5, pc}
 8010faa:	42a3      	cmp	r3, r4
 8010fac:	d3f4      	bcc.n	8010f98 <__mcmp+0x18>
 8010fae:	e7fb      	b.n	8010fa8 <__mcmp+0x28>
 8010fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb4:	e7f8      	b.n	8010fa8 <__mcmp+0x28>
	...

08010fb8 <__mdiff>:
 8010fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	460c      	mov	r4, r1
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	4611      	mov	r1, r2
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	4692      	mov	sl, r2
 8010fc6:	f7ff ffdb 	bl	8010f80 <__mcmp>
 8010fca:	1e05      	subs	r5, r0, #0
 8010fcc:	d111      	bne.n	8010ff2 <__mdiff+0x3a>
 8010fce:	4629      	mov	r1, r5
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f7ff fd11 	bl	80109f8 <_Balloc>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	b928      	cbnz	r0, 8010fe6 <__mdiff+0x2e>
 8010fda:	f240 2132 	movw	r1, #562	; 0x232
 8010fde:	4b3c      	ldr	r3, [pc, #240]	; (80110d0 <__mdiff+0x118>)
 8010fe0:	483c      	ldr	r0, [pc, #240]	; (80110d4 <__mdiff+0x11c>)
 8010fe2:	f000 fb51 	bl	8011688 <__assert_func>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fec:	4610      	mov	r0, r2
 8010fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff2:	bfa4      	itt	ge
 8010ff4:	4653      	movge	r3, sl
 8010ff6:	46a2      	movge	sl, r4
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010ffe:	bfa6      	itte	ge
 8011000:	461c      	movge	r4, r3
 8011002:	2500      	movge	r5, #0
 8011004:	2501      	movlt	r5, #1
 8011006:	f7ff fcf7 	bl	80109f8 <_Balloc>
 801100a:	4602      	mov	r2, r0
 801100c:	b918      	cbnz	r0, 8011016 <__mdiff+0x5e>
 801100e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011012:	4b2f      	ldr	r3, [pc, #188]	; (80110d0 <__mdiff+0x118>)
 8011014:	e7e4      	b.n	8010fe0 <__mdiff+0x28>
 8011016:	f100 0814 	add.w	r8, r0, #20
 801101a:	f8da 7010 	ldr.w	r7, [sl, #16]
 801101e:	60c5      	str	r5, [r0, #12]
 8011020:	f04f 0c00 	mov.w	ip, #0
 8011024:	f10a 0514 	add.w	r5, sl, #20
 8011028:	f10a 0010 	add.w	r0, sl, #16
 801102c:	46c2      	mov	sl, r8
 801102e:	6926      	ldr	r6, [r4, #16]
 8011030:	f104 0914 	add.w	r9, r4, #20
 8011034:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801103c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011040:	f859 3b04 	ldr.w	r3, [r9], #4
 8011044:	fa1f f18b 	uxth.w	r1, fp
 8011048:	4461      	add	r1, ip
 801104a:	fa1f fc83 	uxth.w	ip, r3
 801104e:	0c1b      	lsrs	r3, r3, #16
 8011050:	eba1 010c 	sub.w	r1, r1, ip
 8011054:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011058:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801105c:	b289      	uxth	r1, r1
 801105e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011062:	454e      	cmp	r6, r9
 8011064:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011068:	f84a 3b04 	str.w	r3, [sl], #4
 801106c:	d8e6      	bhi.n	801103c <__mdiff+0x84>
 801106e:	1b33      	subs	r3, r6, r4
 8011070:	3b15      	subs	r3, #21
 8011072:	f023 0303 	bic.w	r3, r3, #3
 8011076:	3415      	adds	r4, #21
 8011078:	3304      	adds	r3, #4
 801107a:	42a6      	cmp	r6, r4
 801107c:	bf38      	it	cc
 801107e:	2304      	movcc	r3, #4
 8011080:	441d      	add	r5, r3
 8011082:	4443      	add	r3, r8
 8011084:	461e      	mov	r6, r3
 8011086:	462c      	mov	r4, r5
 8011088:	4574      	cmp	r4, lr
 801108a:	d30e      	bcc.n	80110aa <__mdiff+0xf2>
 801108c:	f10e 0103 	add.w	r1, lr, #3
 8011090:	1b49      	subs	r1, r1, r5
 8011092:	f021 0103 	bic.w	r1, r1, #3
 8011096:	3d03      	subs	r5, #3
 8011098:	45ae      	cmp	lr, r5
 801109a:	bf38      	it	cc
 801109c:	2100      	movcc	r1, #0
 801109e:	4419      	add	r1, r3
 80110a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80110a4:	b18b      	cbz	r3, 80110ca <__mdiff+0x112>
 80110a6:	6117      	str	r7, [r2, #16]
 80110a8:	e7a0      	b.n	8010fec <__mdiff+0x34>
 80110aa:	f854 8b04 	ldr.w	r8, [r4], #4
 80110ae:	fa1f f188 	uxth.w	r1, r8
 80110b2:	4461      	add	r1, ip
 80110b4:	1408      	asrs	r0, r1, #16
 80110b6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80110ba:	b289      	uxth	r1, r1
 80110bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110c4:	f846 1b04 	str.w	r1, [r6], #4
 80110c8:	e7de      	b.n	8011088 <__mdiff+0xd0>
 80110ca:	3f01      	subs	r7, #1
 80110cc:	e7e8      	b.n	80110a0 <__mdiff+0xe8>
 80110ce:	bf00      	nop
 80110d0:	080129fc 	.word	0x080129fc
 80110d4:	08012a8c 	.word	0x08012a8c

080110d8 <__ulp>:
 80110d8:	4b11      	ldr	r3, [pc, #68]	; (8011120 <__ulp+0x48>)
 80110da:	400b      	ands	r3, r1
 80110dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dd02      	ble.n	80110ea <__ulp+0x12>
 80110e4:	2000      	movs	r0, #0
 80110e6:	4619      	mov	r1, r3
 80110e8:	4770      	bx	lr
 80110ea:	425b      	negs	r3, r3
 80110ec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80110f0:	f04f 0000 	mov.w	r0, #0
 80110f4:	f04f 0100 	mov.w	r1, #0
 80110f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80110fc:	da04      	bge.n	8011108 <__ulp+0x30>
 80110fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011102:	fa43 f102 	asr.w	r1, r3, r2
 8011106:	4770      	bx	lr
 8011108:	f1a2 0314 	sub.w	r3, r2, #20
 801110c:	2b1e      	cmp	r3, #30
 801110e:	bfd6      	itet	le
 8011110:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011114:	2301      	movgt	r3, #1
 8011116:	fa22 f303 	lsrle.w	r3, r2, r3
 801111a:	4618      	mov	r0, r3
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	7ff00000 	.word	0x7ff00000

08011124 <__b2d>:
 8011124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011128:	6907      	ldr	r7, [r0, #16]
 801112a:	f100 0914 	add.w	r9, r0, #20
 801112e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8011132:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8011136:	f1a7 0804 	sub.w	r8, r7, #4
 801113a:	4630      	mov	r0, r6
 801113c:	f7ff fd52 	bl	8010be4 <__hi0bits>
 8011140:	f1c0 0320 	rsb	r3, r0, #32
 8011144:	280a      	cmp	r0, #10
 8011146:	600b      	str	r3, [r1, #0]
 8011148:	491f      	ldr	r1, [pc, #124]	; (80111c8 <__b2d+0xa4>)
 801114a:	dc17      	bgt.n	801117c <__b2d+0x58>
 801114c:	45c1      	cmp	r9, r8
 801114e:	bf28      	it	cs
 8011150:	2200      	movcs	r2, #0
 8011152:	f1c0 0c0b 	rsb	ip, r0, #11
 8011156:	fa26 f30c 	lsr.w	r3, r6, ip
 801115a:	bf38      	it	cc
 801115c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011160:	ea43 0501 	orr.w	r5, r3, r1
 8011164:	f100 0315 	add.w	r3, r0, #21
 8011168:	fa06 f303 	lsl.w	r3, r6, r3
 801116c:	fa22 f20c 	lsr.w	r2, r2, ip
 8011170:	ea43 0402 	orr.w	r4, r3, r2
 8011174:	4620      	mov	r0, r4
 8011176:	4629      	mov	r1, r5
 8011178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801117c:	45c1      	cmp	r9, r8
 801117e:	bf2e      	itee	cs
 8011180:	2200      	movcs	r2, #0
 8011182:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011186:	f1a7 0808 	subcc.w	r8, r7, #8
 801118a:	f1b0 030b 	subs.w	r3, r0, #11
 801118e:	d016      	beq.n	80111be <__b2d+0x9a>
 8011190:	f1c3 0720 	rsb	r7, r3, #32
 8011194:	fa22 f107 	lsr.w	r1, r2, r7
 8011198:	45c8      	cmp	r8, r9
 801119a:	fa06 f603 	lsl.w	r6, r6, r3
 801119e:	ea46 0601 	orr.w	r6, r6, r1
 80111a2:	bf94      	ite	ls
 80111a4:	2100      	movls	r1, #0
 80111a6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80111aa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80111ae:	fa02 f003 	lsl.w	r0, r2, r3
 80111b2:	40f9      	lsrs	r1, r7
 80111b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80111b8:	ea40 0401 	orr.w	r4, r0, r1
 80111bc:	e7da      	b.n	8011174 <__b2d+0x50>
 80111be:	4614      	mov	r4, r2
 80111c0:	ea46 0501 	orr.w	r5, r6, r1
 80111c4:	e7d6      	b.n	8011174 <__b2d+0x50>
 80111c6:	bf00      	nop
 80111c8:	3ff00000 	.word	0x3ff00000

080111cc <__d2b>:
 80111cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80111d0:	2101      	movs	r1, #1
 80111d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80111d6:	4690      	mov	r8, r2
 80111d8:	461d      	mov	r5, r3
 80111da:	f7ff fc0d 	bl	80109f8 <_Balloc>
 80111de:	4604      	mov	r4, r0
 80111e0:	b930      	cbnz	r0, 80111f0 <__d2b+0x24>
 80111e2:	4602      	mov	r2, r0
 80111e4:	f240 310a 	movw	r1, #778	; 0x30a
 80111e8:	4b24      	ldr	r3, [pc, #144]	; (801127c <__d2b+0xb0>)
 80111ea:	4825      	ldr	r0, [pc, #148]	; (8011280 <__d2b+0xb4>)
 80111ec:	f000 fa4c 	bl	8011688 <__assert_func>
 80111f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80111f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80111f8:	bb2d      	cbnz	r5, 8011246 <__d2b+0x7a>
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	f1b8 0300 	subs.w	r3, r8, #0
 8011200:	d026      	beq.n	8011250 <__d2b+0x84>
 8011202:	4668      	mov	r0, sp
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	f7ff fd0d 	bl	8010c24 <__lo0bits>
 801120a:	9900      	ldr	r1, [sp, #0]
 801120c:	b1f0      	cbz	r0, 801124c <__d2b+0x80>
 801120e:	9a01      	ldr	r2, [sp, #4]
 8011210:	f1c0 0320 	rsb	r3, r0, #32
 8011214:	fa02 f303 	lsl.w	r3, r2, r3
 8011218:	430b      	orrs	r3, r1
 801121a:	40c2      	lsrs	r2, r0
 801121c:	6163      	str	r3, [r4, #20]
 801121e:	9201      	str	r2, [sp, #4]
 8011220:	9b01      	ldr	r3, [sp, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	bf14      	ite	ne
 8011226:	2102      	movne	r1, #2
 8011228:	2101      	moveq	r1, #1
 801122a:	61a3      	str	r3, [r4, #24]
 801122c:	6121      	str	r1, [r4, #16]
 801122e:	b1c5      	cbz	r5, 8011262 <__d2b+0x96>
 8011230:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011234:	4405      	add	r5, r0
 8011236:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801123a:	603d      	str	r5, [r7, #0]
 801123c:	6030      	str	r0, [r6, #0]
 801123e:	4620      	mov	r0, r4
 8011240:	b002      	add	sp, #8
 8011242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801124a:	e7d6      	b.n	80111fa <__d2b+0x2e>
 801124c:	6161      	str	r1, [r4, #20]
 801124e:	e7e7      	b.n	8011220 <__d2b+0x54>
 8011250:	a801      	add	r0, sp, #4
 8011252:	f7ff fce7 	bl	8010c24 <__lo0bits>
 8011256:	2101      	movs	r1, #1
 8011258:	9b01      	ldr	r3, [sp, #4]
 801125a:	6121      	str	r1, [r4, #16]
 801125c:	6163      	str	r3, [r4, #20]
 801125e:	3020      	adds	r0, #32
 8011260:	e7e5      	b.n	801122e <__d2b+0x62>
 8011262:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011266:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801126a:	6038      	str	r0, [r7, #0]
 801126c:	6918      	ldr	r0, [r3, #16]
 801126e:	f7ff fcb9 	bl	8010be4 <__hi0bits>
 8011272:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011276:	6031      	str	r1, [r6, #0]
 8011278:	e7e1      	b.n	801123e <__d2b+0x72>
 801127a:	bf00      	nop
 801127c:	080129fc 	.word	0x080129fc
 8011280:	08012a8c 	.word	0x08012a8c

08011284 <__ratio>:
 8011284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011288:	4688      	mov	r8, r1
 801128a:	4669      	mov	r1, sp
 801128c:	4681      	mov	r9, r0
 801128e:	f7ff ff49 	bl	8011124 <__b2d>
 8011292:	460f      	mov	r7, r1
 8011294:	4604      	mov	r4, r0
 8011296:	460d      	mov	r5, r1
 8011298:	4640      	mov	r0, r8
 801129a:	a901      	add	r1, sp, #4
 801129c:	f7ff ff42 	bl	8011124 <__b2d>
 80112a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80112a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80112a8:	468b      	mov	fp, r1
 80112aa:	eba3 0c02 	sub.w	ip, r3, r2
 80112ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80112b2:	1a9b      	subs	r3, r3, r2
 80112b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	bfd5      	itete	le
 80112bc:	460a      	movle	r2, r1
 80112be:	462a      	movgt	r2, r5
 80112c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80112c4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80112c8:	bfd8      	it	le
 80112ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80112ce:	465b      	mov	r3, fp
 80112d0:	4602      	mov	r2, r0
 80112d2:	4639      	mov	r1, r7
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ef fa6f 	bl	80007b8 <__aeabi_ddiv>
 80112da:	b003      	add	sp, #12
 80112dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112e0 <__copybits>:
 80112e0:	3901      	subs	r1, #1
 80112e2:	b570      	push	{r4, r5, r6, lr}
 80112e4:	1149      	asrs	r1, r1, #5
 80112e6:	6914      	ldr	r4, [r2, #16]
 80112e8:	3101      	adds	r1, #1
 80112ea:	f102 0314 	add.w	r3, r2, #20
 80112ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80112f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80112f6:	1f05      	subs	r5, r0, #4
 80112f8:	42a3      	cmp	r3, r4
 80112fa:	d30c      	bcc.n	8011316 <__copybits+0x36>
 80112fc:	1aa3      	subs	r3, r4, r2
 80112fe:	3b11      	subs	r3, #17
 8011300:	f023 0303 	bic.w	r3, r3, #3
 8011304:	3211      	adds	r2, #17
 8011306:	42a2      	cmp	r2, r4
 8011308:	bf88      	it	hi
 801130a:	2300      	movhi	r3, #0
 801130c:	4418      	add	r0, r3
 801130e:	2300      	movs	r3, #0
 8011310:	4288      	cmp	r0, r1
 8011312:	d305      	bcc.n	8011320 <__copybits+0x40>
 8011314:	bd70      	pop	{r4, r5, r6, pc}
 8011316:	f853 6b04 	ldr.w	r6, [r3], #4
 801131a:	f845 6f04 	str.w	r6, [r5, #4]!
 801131e:	e7eb      	b.n	80112f8 <__copybits+0x18>
 8011320:	f840 3b04 	str.w	r3, [r0], #4
 8011324:	e7f4      	b.n	8011310 <__copybits+0x30>

08011326 <__any_on>:
 8011326:	f100 0214 	add.w	r2, r0, #20
 801132a:	6900      	ldr	r0, [r0, #16]
 801132c:	114b      	asrs	r3, r1, #5
 801132e:	4298      	cmp	r0, r3
 8011330:	b510      	push	{r4, lr}
 8011332:	db11      	blt.n	8011358 <__any_on+0x32>
 8011334:	dd0a      	ble.n	801134c <__any_on+0x26>
 8011336:	f011 011f 	ands.w	r1, r1, #31
 801133a:	d007      	beq.n	801134c <__any_on+0x26>
 801133c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011340:	fa24 f001 	lsr.w	r0, r4, r1
 8011344:	fa00 f101 	lsl.w	r1, r0, r1
 8011348:	428c      	cmp	r4, r1
 801134a:	d10b      	bne.n	8011364 <__any_on+0x3e>
 801134c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011350:	4293      	cmp	r3, r2
 8011352:	d803      	bhi.n	801135c <__any_on+0x36>
 8011354:	2000      	movs	r0, #0
 8011356:	bd10      	pop	{r4, pc}
 8011358:	4603      	mov	r3, r0
 801135a:	e7f7      	b.n	801134c <__any_on+0x26>
 801135c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011360:	2900      	cmp	r1, #0
 8011362:	d0f5      	beq.n	8011350 <__any_on+0x2a>
 8011364:	2001      	movs	r0, #1
 8011366:	e7f6      	b.n	8011356 <__any_on+0x30>

08011368 <_calloc_r>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	fb02 f501 	mul.w	r5, r2, r1
 801136e:	4629      	mov	r1, r5
 8011370:	f7fc fb8a 	bl	800da88 <_malloc_r>
 8011374:	4604      	mov	r4, r0
 8011376:	b118      	cbz	r0, 8011380 <_calloc_r+0x18>
 8011378:	462a      	mov	r2, r5
 801137a:	2100      	movs	r1, #0
 801137c:	f7fc fb30 	bl	800d9e0 <memset>
 8011380:	4620      	mov	r0, r4
 8011382:	bd38      	pop	{r3, r4, r5, pc}

08011384 <__ssputs_r>:
 8011384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011388:	688e      	ldr	r6, [r1, #8]
 801138a:	4682      	mov	sl, r0
 801138c:	429e      	cmp	r6, r3
 801138e:	460c      	mov	r4, r1
 8011390:	4690      	mov	r8, r2
 8011392:	461f      	mov	r7, r3
 8011394:	d838      	bhi.n	8011408 <__ssputs_r+0x84>
 8011396:	898a      	ldrh	r2, [r1, #12]
 8011398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801139c:	d032      	beq.n	8011404 <__ssputs_r+0x80>
 801139e:	6825      	ldr	r5, [r4, #0]
 80113a0:	6909      	ldr	r1, [r1, #16]
 80113a2:	3301      	adds	r3, #1
 80113a4:	eba5 0901 	sub.w	r9, r5, r1
 80113a8:	6965      	ldr	r5, [r4, #20]
 80113aa:	444b      	add	r3, r9
 80113ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113b4:	106d      	asrs	r5, r5, #1
 80113b6:	429d      	cmp	r5, r3
 80113b8:	bf38      	it	cc
 80113ba:	461d      	movcc	r5, r3
 80113bc:	0553      	lsls	r3, r2, #21
 80113be:	d531      	bpl.n	8011424 <__ssputs_r+0xa0>
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7fc fb61 	bl	800da88 <_malloc_r>
 80113c6:	4606      	mov	r6, r0
 80113c8:	b950      	cbnz	r0, 80113e0 <__ssputs_r+0x5c>
 80113ca:	230c      	movs	r3, #12
 80113cc:	f04f 30ff 	mov.w	r0, #4294967295
 80113d0:	f8ca 3000 	str.w	r3, [sl]
 80113d4:	89a3      	ldrh	r3, [r4, #12]
 80113d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113da:	81a3      	strh	r3, [r4, #12]
 80113dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e0:	464a      	mov	r2, r9
 80113e2:	6921      	ldr	r1, [r4, #16]
 80113e4:	f7fc faee 	bl	800d9c4 <memcpy>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f2:	81a3      	strh	r3, [r4, #12]
 80113f4:	6126      	str	r6, [r4, #16]
 80113f6:	444e      	add	r6, r9
 80113f8:	6026      	str	r6, [r4, #0]
 80113fa:	463e      	mov	r6, r7
 80113fc:	6165      	str	r5, [r4, #20]
 80113fe:	eba5 0509 	sub.w	r5, r5, r9
 8011402:	60a5      	str	r5, [r4, #8]
 8011404:	42be      	cmp	r6, r7
 8011406:	d900      	bls.n	801140a <__ssputs_r+0x86>
 8011408:	463e      	mov	r6, r7
 801140a:	4632      	mov	r2, r6
 801140c:	4641      	mov	r1, r8
 801140e:	6820      	ldr	r0, [r4, #0]
 8011410:	f000 f96d 	bl	80116ee <memmove>
 8011414:	68a3      	ldr	r3, [r4, #8]
 8011416:	6822      	ldr	r2, [r4, #0]
 8011418:	1b9b      	subs	r3, r3, r6
 801141a:	4432      	add	r2, r6
 801141c:	2000      	movs	r0, #0
 801141e:	60a3      	str	r3, [r4, #8]
 8011420:	6022      	str	r2, [r4, #0]
 8011422:	e7db      	b.n	80113dc <__ssputs_r+0x58>
 8011424:	462a      	mov	r2, r5
 8011426:	f000 f97c 	bl	8011722 <_realloc_r>
 801142a:	4606      	mov	r6, r0
 801142c:	2800      	cmp	r0, #0
 801142e:	d1e1      	bne.n	80113f4 <__ssputs_r+0x70>
 8011430:	4650      	mov	r0, sl
 8011432:	6921      	ldr	r1, [r4, #16]
 8011434:	f7fc fadc 	bl	800d9f0 <_free_r>
 8011438:	e7c7      	b.n	80113ca <__ssputs_r+0x46>
	...

0801143c <_svfiprintf_r>:
 801143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011440:	4698      	mov	r8, r3
 8011442:	898b      	ldrh	r3, [r1, #12]
 8011444:	4607      	mov	r7, r0
 8011446:	061b      	lsls	r3, r3, #24
 8011448:	460d      	mov	r5, r1
 801144a:	4614      	mov	r4, r2
 801144c:	b09d      	sub	sp, #116	; 0x74
 801144e:	d50e      	bpl.n	801146e <_svfiprintf_r+0x32>
 8011450:	690b      	ldr	r3, [r1, #16]
 8011452:	b963      	cbnz	r3, 801146e <_svfiprintf_r+0x32>
 8011454:	2140      	movs	r1, #64	; 0x40
 8011456:	f7fc fb17 	bl	800da88 <_malloc_r>
 801145a:	6028      	str	r0, [r5, #0]
 801145c:	6128      	str	r0, [r5, #16]
 801145e:	b920      	cbnz	r0, 801146a <_svfiprintf_r+0x2e>
 8011460:	230c      	movs	r3, #12
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	f04f 30ff 	mov.w	r0, #4294967295
 8011468:	e0d1      	b.n	801160e <_svfiprintf_r+0x1d2>
 801146a:	2340      	movs	r3, #64	; 0x40
 801146c:	616b      	str	r3, [r5, #20]
 801146e:	2300      	movs	r3, #0
 8011470:	9309      	str	r3, [sp, #36]	; 0x24
 8011472:	2320      	movs	r3, #32
 8011474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011478:	2330      	movs	r3, #48	; 0x30
 801147a:	f04f 0901 	mov.w	r9, #1
 801147e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011628 <_svfiprintf_r+0x1ec>
 8011486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801148a:	4623      	mov	r3, r4
 801148c:	469a      	mov	sl, r3
 801148e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011492:	b10a      	cbz	r2, 8011498 <_svfiprintf_r+0x5c>
 8011494:	2a25      	cmp	r2, #37	; 0x25
 8011496:	d1f9      	bne.n	801148c <_svfiprintf_r+0x50>
 8011498:	ebba 0b04 	subs.w	fp, sl, r4
 801149c:	d00b      	beq.n	80114b6 <_svfiprintf_r+0x7a>
 801149e:	465b      	mov	r3, fp
 80114a0:	4622      	mov	r2, r4
 80114a2:	4629      	mov	r1, r5
 80114a4:	4638      	mov	r0, r7
 80114a6:	f7ff ff6d 	bl	8011384 <__ssputs_r>
 80114aa:	3001      	adds	r0, #1
 80114ac:	f000 80aa 	beq.w	8011604 <_svfiprintf_r+0x1c8>
 80114b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114b2:	445a      	add	r2, fp
 80114b4:	9209      	str	r2, [sp, #36]	; 0x24
 80114b6:	f89a 3000 	ldrb.w	r3, [sl]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 80a2 	beq.w	8011604 <_svfiprintf_r+0x1c8>
 80114c0:	2300      	movs	r3, #0
 80114c2:	f04f 32ff 	mov.w	r2, #4294967295
 80114c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114ca:	f10a 0a01 	add.w	sl, sl, #1
 80114ce:	9304      	str	r3, [sp, #16]
 80114d0:	9307      	str	r3, [sp, #28]
 80114d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114d6:	931a      	str	r3, [sp, #104]	; 0x68
 80114d8:	4654      	mov	r4, sl
 80114da:	2205      	movs	r2, #5
 80114dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e0:	4851      	ldr	r0, [pc, #324]	; (8011628 <_svfiprintf_r+0x1ec>)
 80114e2:	f7ff fa6f 	bl	80109c4 <memchr>
 80114e6:	9a04      	ldr	r2, [sp, #16]
 80114e8:	b9d8      	cbnz	r0, 8011522 <_svfiprintf_r+0xe6>
 80114ea:	06d0      	lsls	r0, r2, #27
 80114ec:	bf44      	itt	mi
 80114ee:	2320      	movmi	r3, #32
 80114f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114f4:	0711      	lsls	r1, r2, #28
 80114f6:	bf44      	itt	mi
 80114f8:	232b      	movmi	r3, #43	; 0x2b
 80114fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114fe:	f89a 3000 	ldrb.w	r3, [sl]
 8011502:	2b2a      	cmp	r3, #42	; 0x2a
 8011504:	d015      	beq.n	8011532 <_svfiprintf_r+0xf6>
 8011506:	4654      	mov	r4, sl
 8011508:	2000      	movs	r0, #0
 801150a:	f04f 0c0a 	mov.w	ip, #10
 801150e:	9a07      	ldr	r2, [sp, #28]
 8011510:	4621      	mov	r1, r4
 8011512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011516:	3b30      	subs	r3, #48	; 0x30
 8011518:	2b09      	cmp	r3, #9
 801151a:	d94e      	bls.n	80115ba <_svfiprintf_r+0x17e>
 801151c:	b1b0      	cbz	r0, 801154c <_svfiprintf_r+0x110>
 801151e:	9207      	str	r2, [sp, #28]
 8011520:	e014      	b.n	801154c <_svfiprintf_r+0x110>
 8011522:	eba0 0308 	sub.w	r3, r0, r8
 8011526:	fa09 f303 	lsl.w	r3, r9, r3
 801152a:	4313      	orrs	r3, r2
 801152c:	46a2      	mov	sl, r4
 801152e:	9304      	str	r3, [sp, #16]
 8011530:	e7d2      	b.n	80114d8 <_svfiprintf_r+0x9c>
 8011532:	9b03      	ldr	r3, [sp, #12]
 8011534:	1d19      	adds	r1, r3, #4
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	9103      	str	r1, [sp, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	bfbb      	ittet	lt
 801153e:	425b      	neglt	r3, r3
 8011540:	f042 0202 	orrlt.w	r2, r2, #2
 8011544:	9307      	strge	r3, [sp, #28]
 8011546:	9307      	strlt	r3, [sp, #28]
 8011548:	bfb8      	it	lt
 801154a:	9204      	strlt	r2, [sp, #16]
 801154c:	7823      	ldrb	r3, [r4, #0]
 801154e:	2b2e      	cmp	r3, #46	; 0x2e
 8011550:	d10c      	bne.n	801156c <_svfiprintf_r+0x130>
 8011552:	7863      	ldrb	r3, [r4, #1]
 8011554:	2b2a      	cmp	r3, #42	; 0x2a
 8011556:	d135      	bne.n	80115c4 <_svfiprintf_r+0x188>
 8011558:	9b03      	ldr	r3, [sp, #12]
 801155a:	3402      	adds	r4, #2
 801155c:	1d1a      	adds	r2, r3, #4
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	9203      	str	r2, [sp, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	bfb8      	it	lt
 8011566:	f04f 33ff 	movlt.w	r3, #4294967295
 801156a:	9305      	str	r3, [sp, #20]
 801156c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011638 <_svfiprintf_r+0x1fc>
 8011570:	2203      	movs	r2, #3
 8011572:	4650      	mov	r0, sl
 8011574:	7821      	ldrb	r1, [r4, #0]
 8011576:	f7ff fa25 	bl	80109c4 <memchr>
 801157a:	b140      	cbz	r0, 801158e <_svfiprintf_r+0x152>
 801157c:	2340      	movs	r3, #64	; 0x40
 801157e:	eba0 000a 	sub.w	r0, r0, sl
 8011582:	fa03 f000 	lsl.w	r0, r3, r0
 8011586:	9b04      	ldr	r3, [sp, #16]
 8011588:	3401      	adds	r4, #1
 801158a:	4303      	orrs	r3, r0
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011592:	2206      	movs	r2, #6
 8011594:	4825      	ldr	r0, [pc, #148]	; (801162c <_svfiprintf_r+0x1f0>)
 8011596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801159a:	f7ff fa13 	bl	80109c4 <memchr>
 801159e:	2800      	cmp	r0, #0
 80115a0:	d038      	beq.n	8011614 <_svfiprintf_r+0x1d8>
 80115a2:	4b23      	ldr	r3, [pc, #140]	; (8011630 <_svfiprintf_r+0x1f4>)
 80115a4:	bb1b      	cbnz	r3, 80115ee <_svfiprintf_r+0x1b2>
 80115a6:	9b03      	ldr	r3, [sp, #12]
 80115a8:	3307      	adds	r3, #7
 80115aa:	f023 0307 	bic.w	r3, r3, #7
 80115ae:	3308      	adds	r3, #8
 80115b0:	9303      	str	r3, [sp, #12]
 80115b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b4:	4433      	add	r3, r6
 80115b6:	9309      	str	r3, [sp, #36]	; 0x24
 80115b8:	e767      	b.n	801148a <_svfiprintf_r+0x4e>
 80115ba:	460c      	mov	r4, r1
 80115bc:	2001      	movs	r0, #1
 80115be:	fb0c 3202 	mla	r2, ip, r2, r3
 80115c2:	e7a5      	b.n	8011510 <_svfiprintf_r+0xd4>
 80115c4:	2300      	movs	r3, #0
 80115c6:	f04f 0c0a 	mov.w	ip, #10
 80115ca:	4619      	mov	r1, r3
 80115cc:	3401      	adds	r4, #1
 80115ce:	9305      	str	r3, [sp, #20]
 80115d0:	4620      	mov	r0, r4
 80115d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115d6:	3a30      	subs	r2, #48	; 0x30
 80115d8:	2a09      	cmp	r2, #9
 80115da:	d903      	bls.n	80115e4 <_svfiprintf_r+0x1a8>
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d0c5      	beq.n	801156c <_svfiprintf_r+0x130>
 80115e0:	9105      	str	r1, [sp, #20]
 80115e2:	e7c3      	b.n	801156c <_svfiprintf_r+0x130>
 80115e4:	4604      	mov	r4, r0
 80115e6:	2301      	movs	r3, #1
 80115e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80115ec:	e7f0      	b.n	80115d0 <_svfiprintf_r+0x194>
 80115ee:	ab03      	add	r3, sp, #12
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	462a      	mov	r2, r5
 80115f4:	4638      	mov	r0, r7
 80115f6:	4b0f      	ldr	r3, [pc, #60]	; (8011634 <_svfiprintf_r+0x1f8>)
 80115f8:	a904      	add	r1, sp, #16
 80115fa:	f7fc fb3d 	bl	800dc78 <_printf_float>
 80115fe:	1c42      	adds	r2, r0, #1
 8011600:	4606      	mov	r6, r0
 8011602:	d1d6      	bne.n	80115b2 <_svfiprintf_r+0x176>
 8011604:	89ab      	ldrh	r3, [r5, #12]
 8011606:	065b      	lsls	r3, r3, #25
 8011608:	f53f af2c 	bmi.w	8011464 <_svfiprintf_r+0x28>
 801160c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801160e:	b01d      	add	sp, #116	; 0x74
 8011610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011614:	ab03      	add	r3, sp, #12
 8011616:	9300      	str	r3, [sp, #0]
 8011618:	462a      	mov	r2, r5
 801161a:	4638      	mov	r0, r7
 801161c:	4b05      	ldr	r3, [pc, #20]	; (8011634 <_svfiprintf_r+0x1f8>)
 801161e:	a904      	add	r1, sp, #16
 8011620:	f7fc fdc6 	bl	800e1b0 <_printf_i>
 8011624:	e7eb      	b.n	80115fe <_svfiprintf_r+0x1c2>
 8011626:	bf00      	nop
 8011628:	08012bec 	.word	0x08012bec
 801162c:	08012bf6 	.word	0x08012bf6
 8011630:	0800dc79 	.word	0x0800dc79
 8011634:	08011385 	.word	0x08011385
 8011638:	08012bf2 	.word	0x08012bf2

0801163c <nan>:
 801163c:	2000      	movs	r0, #0
 801163e:	4901      	ldr	r1, [pc, #4]	; (8011644 <nan+0x8>)
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	7ff80000 	.word	0x7ff80000

08011648 <strncmp>:
 8011648:	b510      	push	{r4, lr}
 801164a:	b16a      	cbz	r2, 8011668 <strncmp+0x20>
 801164c:	3901      	subs	r1, #1
 801164e:	1884      	adds	r4, r0, r2
 8011650:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011658:	4293      	cmp	r3, r2
 801165a:	d103      	bne.n	8011664 <strncmp+0x1c>
 801165c:	42a0      	cmp	r0, r4
 801165e:	d001      	beq.n	8011664 <strncmp+0x1c>
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1f5      	bne.n	8011650 <strncmp+0x8>
 8011664:	1a98      	subs	r0, r3, r2
 8011666:	bd10      	pop	{r4, pc}
 8011668:	4610      	mov	r0, r2
 801166a:	e7fc      	b.n	8011666 <strncmp+0x1e>

0801166c <__ascii_wctomb>:
 801166c:	4603      	mov	r3, r0
 801166e:	4608      	mov	r0, r1
 8011670:	b141      	cbz	r1, 8011684 <__ascii_wctomb+0x18>
 8011672:	2aff      	cmp	r2, #255	; 0xff
 8011674:	d904      	bls.n	8011680 <__ascii_wctomb+0x14>
 8011676:	228a      	movs	r2, #138	; 0x8a
 8011678:	f04f 30ff 	mov.w	r0, #4294967295
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	4770      	bx	lr
 8011680:	2001      	movs	r0, #1
 8011682:	700a      	strb	r2, [r1, #0]
 8011684:	4770      	bx	lr
	...

08011688 <__assert_func>:
 8011688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801168a:	4614      	mov	r4, r2
 801168c:	461a      	mov	r2, r3
 801168e:	4b09      	ldr	r3, [pc, #36]	; (80116b4 <__assert_func+0x2c>)
 8011690:	4605      	mov	r5, r0
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	68d8      	ldr	r0, [r3, #12]
 8011696:	b14c      	cbz	r4, 80116ac <__assert_func+0x24>
 8011698:	4b07      	ldr	r3, [pc, #28]	; (80116b8 <__assert_func+0x30>)
 801169a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801169e:	9100      	str	r1, [sp, #0]
 80116a0:	462b      	mov	r3, r5
 80116a2:	4906      	ldr	r1, [pc, #24]	; (80116bc <__assert_func+0x34>)
 80116a4:	f000 f80e 	bl	80116c4 <fiprintf>
 80116a8:	f000 fa78 	bl	8011b9c <abort>
 80116ac:	4b04      	ldr	r3, [pc, #16]	; (80116c0 <__assert_func+0x38>)
 80116ae:	461c      	mov	r4, r3
 80116b0:	e7f3      	b.n	801169a <__assert_func+0x12>
 80116b2:	bf00      	nop
 80116b4:	2000003c 	.word	0x2000003c
 80116b8:	08012bfd 	.word	0x08012bfd
 80116bc:	08012c0a 	.word	0x08012c0a
 80116c0:	08012c38 	.word	0x08012c38

080116c4 <fiprintf>:
 80116c4:	b40e      	push	{r1, r2, r3}
 80116c6:	b503      	push	{r0, r1, lr}
 80116c8:	4601      	mov	r1, r0
 80116ca:	ab03      	add	r3, sp, #12
 80116cc:	4805      	ldr	r0, [pc, #20]	; (80116e4 <fiprintf+0x20>)
 80116ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d2:	6800      	ldr	r0, [r0, #0]
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	f000 f871 	bl	80117bc <_vfiprintf_r>
 80116da:	b002      	add	sp, #8
 80116dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80116e0:	b003      	add	sp, #12
 80116e2:	4770      	bx	lr
 80116e4:	2000003c 	.word	0x2000003c

080116e8 <__retarget_lock_init_recursive>:
 80116e8:	4770      	bx	lr

080116ea <__retarget_lock_acquire_recursive>:
 80116ea:	4770      	bx	lr

080116ec <__retarget_lock_release_recursive>:
 80116ec:	4770      	bx	lr

080116ee <memmove>:
 80116ee:	4288      	cmp	r0, r1
 80116f0:	b510      	push	{r4, lr}
 80116f2:	eb01 0402 	add.w	r4, r1, r2
 80116f6:	d902      	bls.n	80116fe <memmove+0x10>
 80116f8:	4284      	cmp	r4, r0
 80116fa:	4623      	mov	r3, r4
 80116fc:	d807      	bhi.n	801170e <memmove+0x20>
 80116fe:	1e43      	subs	r3, r0, #1
 8011700:	42a1      	cmp	r1, r4
 8011702:	d008      	beq.n	8011716 <memmove+0x28>
 8011704:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011708:	f803 2f01 	strb.w	r2, [r3, #1]!
 801170c:	e7f8      	b.n	8011700 <memmove+0x12>
 801170e:	4601      	mov	r1, r0
 8011710:	4402      	add	r2, r0
 8011712:	428a      	cmp	r2, r1
 8011714:	d100      	bne.n	8011718 <memmove+0x2a>
 8011716:	bd10      	pop	{r4, pc}
 8011718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801171c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011720:	e7f7      	b.n	8011712 <memmove+0x24>

08011722 <_realloc_r>:
 8011722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011724:	4607      	mov	r7, r0
 8011726:	4614      	mov	r4, r2
 8011728:	460e      	mov	r6, r1
 801172a:	b921      	cbnz	r1, 8011736 <_realloc_r+0x14>
 801172c:	4611      	mov	r1, r2
 801172e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011732:	f7fc b9a9 	b.w	800da88 <_malloc_r>
 8011736:	b922      	cbnz	r2, 8011742 <_realloc_r+0x20>
 8011738:	f7fc f95a 	bl	800d9f0 <_free_r>
 801173c:	4625      	mov	r5, r4
 801173e:	4628      	mov	r0, r5
 8011740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011742:	f000 fc4f 	bl	8011fe4 <_malloc_usable_size_r>
 8011746:	42a0      	cmp	r0, r4
 8011748:	d20f      	bcs.n	801176a <_realloc_r+0x48>
 801174a:	4621      	mov	r1, r4
 801174c:	4638      	mov	r0, r7
 801174e:	f7fc f99b 	bl	800da88 <_malloc_r>
 8011752:	4605      	mov	r5, r0
 8011754:	2800      	cmp	r0, #0
 8011756:	d0f2      	beq.n	801173e <_realloc_r+0x1c>
 8011758:	4631      	mov	r1, r6
 801175a:	4622      	mov	r2, r4
 801175c:	f7fc f932 	bl	800d9c4 <memcpy>
 8011760:	4631      	mov	r1, r6
 8011762:	4638      	mov	r0, r7
 8011764:	f7fc f944 	bl	800d9f0 <_free_r>
 8011768:	e7e9      	b.n	801173e <_realloc_r+0x1c>
 801176a:	4635      	mov	r5, r6
 801176c:	e7e7      	b.n	801173e <_realloc_r+0x1c>

0801176e <__sfputc_r>:
 801176e:	6893      	ldr	r3, [r2, #8]
 8011770:	b410      	push	{r4}
 8011772:	3b01      	subs	r3, #1
 8011774:	2b00      	cmp	r3, #0
 8011776:	6093      	str	r3, [r2, #8]
 8011778:	da07      	bge.n	801178a <__sfputc_r+0x1c>
 801177a:	6994      	ldr	r4, [r2, #24]
 801177c:	42a3      	cmp	r3, r4
 801177e:	db01      	blt.n	8011784 <__sfputc_r+0x16>
 8011780:	290a      	cmp	r1, #10
 8011782:	d102      	bne.n	801178a <__sfputc_r+0x1c>
 8011784:	bc10      	pop	{r4}
 8011786:	f000 b949 	b.w	8011a1c <__swbuf_r>
 801178a:	6813      	ldr	r3, [r2, #0]
 801178c:	1c58      	adds	r0, r3, #1
 801178e:	6010      	str	r0, [r2, #0]
 8011790:	7019      	strb	r1, [r3, #0]
 8011792:	4608      	mov	r0, r1
 8011794:	bc10      	pop	{r4}
 8011796:	4770      	bx	lr

08011798 <__sfputs_r>:
 8011798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179a:	4606      	mov	r6, r0
 801179c:	460f      	mov	r7, r1
 801179e:	4614      	mov	r4, r2
 80117a0:	18d5      	adds	r5, r2, r3
 80117a2:	42ac      	cmp	r4, r5
 80117a4:	d101      	bne.n	80117aa <__sfputs_r+0x12>
 80117a6:	2000      	movs	r0, #0
 80117a8:	e007      	b.n	80117ba <__sfputs_r+0x22>
 80117aa:	463a      	mov	r2, r7
 80117ac:	4630      	mov	r0, r6
 80117ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117b2:	f7ff ffdc 	bl	801176e <__sfputc_r>
 80117b6:	1c43      	adds	r3, r0, #1
 80117b8:	d1f3      	bne.n	80117a2 <__sfputs_r+0xa>
 80117ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117bc <_vfiprintf_r>:
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	460d      	mov	r5, r1
 80117c2:	4614      	mov	r4, r2
 80117c4:	4698      	mov	r8, r3
 80117c6:	4606      	mov	r6, r0
 80117c8:	b09d      	sub	sp, #116	; 0x74
 80117ca:	b118      	cbz	r0, 80117d4 <_vfiprintf_r+0x18>
 80117cc:	6983      	ldr	r3, [r0, #24]
 80117ce:	b90b      	cbnz	r3, 80117d4 <_vfiprintf_r+0x18>
 80117d0:	f000 fb06 	bl	8011de0 <__sinit>
 80117d4:	4b89      	ldr	r3, [pc, #548]	; (80119fc <_vfiprintf_r+0x240>)
 80117d6:	429d      	cmp	r5, r3
 80117d8:	d11b      	bne.n	8011812 <_vfiprintf_r+0x56>
 80117da:	6875      	ldr	r5, [r6, #4]
 80117dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117de:	07d9      	lsls	r1, r3, #31
 80117e0:	d405      	bmi.n	80117ee <_vfiprintf_r+0x32>
 80117e2:	89ab      	ldrh	r3, [r5, #12]
 80117e4:	059a      	lsls	r2, r3, #22
 80117e6:	d402      	bmi.n	80117ee <_vfiprintf_r+0x32>
 80117e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117ea:	f7ff ff7e 	bl	80116ea <__retarget_lock_acquire_recursive>
 80117ee:	89ab      	ldrh	r3, [r5, #12]
 80117f0:	071b      	lsls	r3, r3, #28
 80117f2:	d501      	bpl.n	80117f8 <_vfiprintf_r+0x3c>
 80117f4:	692b      	ldr	r3, [r5, #16]
 80117f6:	b9eb      	cbnz	r3, 8011834 <_vfiprintf_r+0x78>
 80117f8:	4629      	mov	r1, r5
 80117fa:	4630      	mov	r0, r6
 80117fc:	f000 f960 	bl	8011ac0 <__swsetup_r>
 8011800:	b1c0      	cbz	r0, 8011834 <_vfiprintf_r+0x78>
 8011802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011804:	07dc      	lsls	r4, r3, #31
 8011806:	d50e      	bpl.n	8011826 <_vfiprintf_r+0x6a>
 8011808:	f04f 30ff 	mov.w	r0, #4294967295
 801180c:	b01d      	add	sp, #116	; 0x74
 801180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011812:	4b7b      	ldr	r3, [pc, #492]	; (8011a00 <_vfiprintf_r+0x244>)
 8011814:	429d      	cmp	r5, r3
 8011816:	d101      	bne.n	801181c <_vfiprintf_r+0x60>
 8011818:	68b5      	ldr	r5, [r6, #8]
 801181a:	e7df      	b.n	80117dc <_vfiprintf_r+0x20>
 801181c:	4b79      	ldr	r3, [pc, #484]	; (8011a04 <_vfiprintf_r+0x248>)
 801181e:	429d      	cmp	r5, r3
 8011820:	bf08      	it	eq
 8011822:	68f5      	ldreq	r5, [r6, #12]
 8011824:	e7da      	b.n	80117dc <_vfiprintf_r+0x20>
 8011826:	89ab      	ldrh	r3, [r5, #12]
 8011828:	0598      	lsls	r0, r3, #22
 801182a:	d4ed      	bmi.n	8011808 <_vfiprintf_r+0x4c>
 801182c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801182e:	f7ff ff5d 	bl	80116ec <__retarget_lock_release_recursive>
 8011832:	e7e9      	b.n	8011808 <_vfiprintf_r+0x4c>
 8011834:	2300      	movs	r3, #0
 8011836:	9309      	str	r3, [sp, #36]	; 0x24
 8011838:	2320      	movs	r3, #32
 801183a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801183e:	2330      	movs	r3, #48	; 0x30
 8011840:	f04f 0901 	mov.w	r9, #1
 8011844:	f8cd 800c 	str.w	r8, [sp, #12]
 8011848:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011a08 <_vfiprintf_r+0x24c>
 801184c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011850:	4623      	mov	r3, r4
 8011852:	469a      	mov	sl, r3
 8011854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011858:	b10a      	cbz	r2, 801185e <_vfiprintf_r+0xa2>
 801185a:	2a25      	cmp	r2, #37	; 0x25
 801185c:	d1f9      	bne.n	8011852 <_vfiprintf_r+0x96>
 801185e:	ebba 0b04 	subs.w	fp, sl, r4
 8011862:	d00b      	beq.n	801187c <_vfiprintf_r+0xc0>
 8011864:	465b      	mov	r3, fp
 8011866:	4622      	mov	r2, r4
 8011868:	4629      	mov	r1, r5
 801186a:	4630      	mov	r0, r6
 801186c:	f7ff ff94 	bl	8011798 <__sfputs_r>
 8011870:	3001      	adds	r0, #1
 8011872:	f000 80aa 	beq.w	80119ca <_vfiprintf_r+0x20e>
 8011876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011878:	445a      	add	r2, fp
 801187a:	9209      	str	r2, [sp, #36]	; 0x24
 801187c:	f89a 3000 	ldrb.w	r3, [sl]
 8011880:	2b00      	cmp	r3, #0
 8011882:	f000 80a2 	beq.w	80119ca <_vfiprintf_r+0x20e>
 8011886:	2300      	movs	r3, #0
 8011888:	f04f 32ff 	mov.w	r2, #4294967295
 801188c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011890:	f10a 0a01 	add.w	sl, sl, #1
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	9307      	str	r3, [sp, #28]
 8011898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801189c:	931a      	str	r3, [sp, #104]	; 0x68
 801189e:	4654      	mov	r4, sl
 80118a0:	2205      	movs	r2, #5
 80118a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118a6:	4858      	ldr	r0, [pc, #352]	; (8011a08 <_vfiprintf_r+0x24c>)
 80118a8:	f7ff f88c 	bl	80109c4 <memchr>
 80118ac:	9a04      	ldr	r2, [sp, #16]
 80118ae:	b9d8      	cbnz	r0, 80118e8 <_vfiprintf_r+0x12c>
 80118b0:	06d1      	lsls	r1, r2, #27
 80118b2:	bf44      	itt	mi
 80118b4:	2320      	movmi	r3, #32
 80118b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118ba:	0713      	lsls	r3, r2, #28
 80118bc:	bf44      	itt	mi
 80118be:	232b      	movmi	r3, #43	; 0x2b
 80118c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118c4:	f89a 3000 	ldrb.w	r3, [sl]
 80118c8:	2b2a      	cmp	r3, #42	; 0x2a
 80118ca:	d015      	beq.n	80118f8 <_vfiprintf_r+0x13c>
 80118cc:	4654      	mov	r4, sl
 80118ce:	2000      	movs	r0, #0
 80118d0:	f04f 0c0a 	mov.w	ip, #10
 80118d4:	9a07      	ldr	r2, [sp, #28]
 80118d6:	4621      	mov	r1, r4
 80118d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118dc:	3b30      	subs	r3, #48	; 0x30
 80118de:	2b09      	cmp	r3, #9
 80118e0:	d94e      	bls.n	8011980 <_vfiprintf_r+0x1c4>
 80118e2:	b1b0      	cbz	r0, 8011912 <_vfiprintf_r+0x156>
 80118e4:	9207      	str	r2, [sp, #28]
 80118e6:	e014      	b.n	8011912 <_vfiprintf_r+0x156>
 80118e8:	eba0 0308 	sub.w	r3, r0, r8
 80118ec:	fa09 f303 	lsl.w	r3, r9, r3
 80118f0:	4313      	orrs	r3, r2
 80118f2:	46a2      	mov	sl, r4
 80118f4:	9304      	str	r3, [sp, #16]
 80118f6:	e7d2      	b.n	801189e <_vfiprintf_r+0xe2>
 80118f8:	9b03      	ldr	r3, [sp, #12]
 80118fa:	1d19      	adds	r1, r3, #4
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	9103      	str	r1, [sp, #12]
 8011900:	2b00      	cmp	r3, #0
 8011902:	bfbb      	ittet	lt
 8011904:	425b      	neglt	r3, r3
 8011906:	f042 0202 	orrlt.w	r2, r2, #2
 801190a:	9307      	strge	r3, [sp, #28]
 801190c:	9307      	strlt	r3, [sp, #28]
 801190e:	bfb8      	it	lt
 8011910:	9204      	strlt	r2, [sp, #16]
 8011912:	7823      	ldrb	r3, [r4, #0]
 8011914:	2b2e      	cmp	r3, #46	; 0x2e
 8011916:	d10c      	bne.n	8011932 <_vfiprintf_r+0x176>
 8011918:	7863      	ldrb	r3, [r4, #1]
 801191a:	2b2a      	cmp	r3, #42	; 0x2a
 801191c:	d135      	bne.n	801198a <_vfiprintf_r+0x1ce>
 801191e:	9b03      	ldr	r3, [sp, #12]
 8011920:	3402      	adds	r4, #2
 8011922:	1d1a      	adds	r2, r3, #4
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	9203      	str	r2, [sp, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	bfb8      	it	lt
 801192c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011930:	9305      	str	r3, [sp, #20]
 8011932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a18 <_vfiprintf_r+0x25c>
 8011936:	2203      	movs	r2, #3
 8011938:	4650      	mov	r0, sl
 801193a:	7821      	ldrb	r1, [r4, #0]
 801193c:	f7ff f842 	bl	80109c4 <memchr>
 8011940:	b140      	cbz	r0, 8011954 <_vfiprintf_r+0x198>
 8011942:	2340      	movs	r3, #64	; 0x40
 8011944:	eba0 000a 	sub.w	r0, r0, sl
 8011948:	fa03 f000 	lsl.w	r0, r3, r0
 801194c:	9b04      	ldr	r3, [sp, #16]
 801194e:	3401      	adds	r4, #1
 8011950:	4303      	orrs	r3, r0
 8011952:	9304      	str	r3, [sp, #16]
 8011954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011958:	2206      	movs	r2, #6
 801195a:	482c      	ldr	r0, [pc, #176]	; (8011a0c <_vfiprintf_r+0x250>)
 801195c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011960:	f7ff f830 	bl	80109c4 <memchr>
 8011964:	2800      	cmp	r0, #0
 8011966:	d03f      	beq.n	80119e8 <_vfiprintf_r+0x22c>
 8011968:	4b29      	ldr	r3, [pc, #164]	; (8011a10 <_vfiprintf_r+0x254>)
 801196a:	bb1b      	cbnz	r3, 80119b4 <_vfiprintf_r+0x1f8>
 801196c:	9b03      	ldr	r3, [sp, #12]
 801196e:	3307      	adds	r3, #7
 8011970:	f023 0307 	bic.w	r3, r3, #7
 8011974:	3308      	adds	r3, #8
 8011976:	9303      	str	r3, [sp, #12]
 8011978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801197a:	443b      	add	r3, r7
 801197c:	9309      	str	r3, [sp, #36]	; 0x24
 801197e:	e767      	b.n	8011850 <_vfiprintf_r+0x94>
 8011980:	460c      	mov	r4, r1
 8011982:	2001      	movs	r0, #1
 8011984:	fb0c 3202 	mla	r2, ip, r2, r3
 8011988:	e7a5      	b.n	80118d6 <_vfiprintf_r+0x11a>
 801198a:	2300      	movs	r3, #0
 801198c:	f04f 0c0a 	mov.w	ip, #10
 8011990:	4619      	mov	r1, r3
 8011992:	3401      	adds	r4, #1
 8011994:	9305      	str	r3, [sp, #20]
 8011996:	4620      	mov	r0, r4
 8011998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801199c:	3a30      	subs	r2, #48	; 0x30
 801199e:	2a09      	cmp	r2, #9
 80119a0:	d903      	bls.n	80119aa <_vfiprintf_r+0x1ee>
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d0c5      	beq.n	8011932 <_vfiprintf_r+0x176>
 80119a6:	9105      	str	r1, [sp, #20]
 80119a8:	e7c3      	b.n	8011932 <_vfiprintf_r+0x176>
 80119aa:	4604      	mov	r4, r0
 80119ac:	2301      	movs	r3, #1
 80119ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80119b2:	e7f0      	b.n	8011996 <_vfiprintf_r+0x1da>
 80119b4:	ab03      	add	r3, sp, #12
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	462a      	mov	r2, r5
 80119ba:	4630      	mov	r0, r6
 80119bc:	4b15      	ldr	r3, [pc, #84]	; (8011a14 <_vfiprintf_r+0x258>)
 80119be:	a904      	add	r1, sp, #16
 80119c0:	f7fc f95a 	bl	800dc78 <_printf_float>
 80119c4:	4607      	mov	r7, r0
 80119c6:	1c78      	adds	r0, r7, #1
 80119c8:	d1d6      	bne.n	8011978 <_vfiprintf_r+0x1bc>
 80119ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119cc:	07d9      	lsls	r1, r3, #31
 80119ce:	d405      	bmi.n	80119dc <_vfiprintf_r+0x220>
 80119d0:	89ab      	ldrh	r3, [r5, #12]
 80119d2:	059a      	lsls	r2, r3, #22
 80119d4:	d402      	bmi.n	80119dc <_vfiprintf_r+0x220>
 80119d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119d8:	f7ff fe88 	bl	80116ec <__retarget_lock_release_recursive>
 80119dc:	89ab      	ldrh	r3, [r5, #12]
 80119de:	065b      	lsls	r3, r3, #25
 80119e0:	f53f af12 	bmi.w	8011808 <_vfiprintf_r+0x4c>
 80119e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119e6:	e711      	b.n	801180c <_vfiprintf_r+0x50>
 80119e8:	ab03      	add	r3, sp, #12
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	462a      	mov	r2, r5
 80119ee:	4630      	mov	r0, r6
 80119f0:	4b08      	ldr	r3, [pc, #32]	; (8011a14 <_vfiprintf_r+0x258>)
 80119f2:	a904      	add	r1, sp, #16
 80119f4:	f7fc fbdc 	bl	800e1b0 <_printf_i>
 80119f8:	e7e4      	b.n	80119c4 <_vfiprintf_r+0x208>
 80119fa:	bf00      	nop
 80119fc:	08012c5c 	.word	0x08012c5c
 8011a00:	08012c7c 	.word	0x08012c7c
 8011a04:	08012c3c 	.word	0x08012c3c
 8011a08:	08012bec 	.word	0x08012bec
 8011a0c:	08012bf6 	.word	0x08012bf6
 8011a10:	0800dc79 	.word	0x0800dc79
 8011a14:	08011799 	.word	0x08011799
 8011a18:	08012bf2 	.word	0x08012bf2

08011a1c <__swbuf_r>:
 8011a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1e:	460e      	mov	r6, r1
 8011a20:	4614      	mov	r4, r2
 8011a22:	4605      	mov	r5, r0
 8011a24:	b118      	cbz	r0, 8011a2e <__swbuf_r+0x12>
 8011a26:	6983      	ldr	r3, [r0, #24]
 8011a28:	b90b      	cbnz	r3, 8011a2e <__swbuf_r+0x12>
 8011a2a:	f000 f9d9 	bl	8011de0 <__sinit>
 8011a2e:	4b21      	ldr	r3, [pc, #132]	; (8011ab4 <__swbuf_r+0x98>)
 8011a30:	429c      	cmp	r4, r3
 8011a32:	d12b      	bne.n	8011a8c <__swbuf_r+0x70>
 8011a34:	686c      	ldr	r4, [r5, #4]
 8011a36:	69a3      	ldr	r3, [r4, #24]
 8011a38:	60a3      	str	r3, [r4, #8]
 8011a3a:	89a3      	ldrh	r3, [r4, #12]
 8011a3c:	071a      	lsls	r2, r3, #28
 8011a3e:	d52f      	bpl.n	8011aa0 <__swbuf_r+0x84>
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	b36b      	cbz	r3, 8011aa0 <__swbuf_r+0x84>
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	6820      	ldr	r0, [r4, #0]
 8011a48:	b2f6      	uxtb	r6, r6
 8011a4a:	1ac0      	subs	r0, r0, r3
 8011a4c:	6963      	ldr	r3, [r4, #20]
 8011a4e:	4637      	mov	r7, r6
 8011a50:	4283      	cmp	r3, r0
 8011a52:	dc04      	bgt.n	8011a5e <__swbuf_r+0x42>
 8011a54:	4621      	mov	r1, r4
 8011a56:	4628      	mov	r0, r5
 8011a58:	f000 f92e 	bl	8011cb8 <_fflush_r>
 8011a5c:	bb30      	cbnz	r0, 8011aac <__swbuf_r+0x90>
 8011a5e:	68a3      	ldr	r3, [r4, #8]
 8011a60:	3001      	adds	r0, #1
 8011a62:	3b01      	subs	r3, #1
 8011a64:	60a3      	str	r3, [r4, #8]
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	1c5a      	adds	r2, r3, #1
 8011a6a:	6022      	str	r2, [r4, #0]
 8011a6c:	701e      	strb	r6, [r3, #0]
 8011a6e:	6963      	ldr	r3, [r4, #20]
 8011a70:	4283      	cmp	r3, r0
 8011a72:	d004      	beq.n	8011a7e <__swbuf_r+0x62>
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	07db      	lsls	r3, r3, #31
 8011a78:	d506      	bpl.n	8011a88 <__swbuf_r+0x6c>
 8011a7a:	2e0a      	cmp	r6, #10
 8011a7c:	d104      	bne.n	8011a88 <__swbuf_r+0x6c>
 8011a7e:	4621      	mov	r1, r4
 8011a80:	4628      	mov	r0, r5
 8011a82:	f000 f919 	bl	8011cb8 <_fflush_r>
 8011a86:	b988      	cbnz	r0, 8011aac <__swbuf_r+0x90>
 8011a88:	4638      	mov	r0, r7
 8011a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a8c:	4b0a      	ldr	r3, [pc, #40]	; (8011ab8 <__swbuf_r+0x9c>)
 8011a8e:	429c      	cmp	r4, r3
 8011a90:	d101      	bne.n	8011a96 <__swbuf_r+0x7a>
 8011a92:	68ac      	ldr	r4, [r5, #8]
 8011a94:	e7cf      	b.n	8011a36 <__swbuf_r+0x1a>
 8011a96:	4b09      	ldr	r3, [pc, #36]	; (8011abc <__swbuf_r+0xa0>)
 8011a98:	429c      	cmp	r4, r3
 8011a9a:	bf08      	it	eq
 8011a9c:	68ec      	ldreq	r4, [r5, #12]
 8011a9e:	e7ca      	b.n	8011a36 <__swbuf_r+0x1a>
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f000 f80c 	bl	8011ac0 <__swsetup_r>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d0cb      	beq.n	8011a44 <__swbuf_r+0x28>
 8011aac:	f04f 37ff 	mov.w	r7, #4294967295
 8011ab0:	e7ea      	b.n	8011a88 <__swbuf_r+0x6c>
 8011ab2:	bf00      	nop
 8011ab4:	08012c5c 	.word	0x08012c5c
 8011ab8:	08012c7c 	.word	0x08012c7c
 8011abc:	08012c3c 	.word	0x08012c3c

08011ac0 <__swsetup_r>:
 8011ac0:	4b32      	ldr	r3, [pc, #200]	; (8011b8c <__swsetup_r+0xcc>)
 8011ac2:	b570      	push	{r4, r5, r6, lr}
 8011ac4:	681d      	ldr	r5, [r3, #0]
 8011ac6:	4606      	mov	r6, r0
 8011ac8:	460c      	mov	r4, r1
 8011aca:	b125      	cbz	r5, 8011ad6 <__swsetup_r+0x16>
 8011acc:	69ab      	ldr	r3, [r5, #24]
 8011ace:	b913      	cbnz	r3, 8011ad6 <__swsetup_r+0x16>
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	f000 f985 	bl	8011de0 <__sinit>
 8011ad6:	4b2e      	ldr	r3, [pc, #184]	; (8011b90 <__swsetup_r+0xd0>)
 8011ad8:	429c      	cmp	r4, r3
 8011ada:	d10f      	bne.n	8011afc <__swsetup_r+0x3c>
 8011adc:	686c      	ldr	r4, [r5, #4]
 8011ade:	89a3      	ldrh	r3, [r4, #12]
 8011ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ae4:	0719      	lsls	r1, r3, #28
 8011ae6:	d42c      	bmi.n	8011b42 <__swsetup_r+0x82>
 8011ae8:	06dd      	lsls	r5, r3, #27
 8011aea:	d411      	bmi.n	8011b10 <__swsetup_r+0x50>
 8011aec:	2309      	movs	r3, #9
 8011aee:	6033      	str	r3, [r6, #0]
 8011af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011af4:	f04f 30ff 	mov.w	r0, #4294967295
 8011af8:	81a3      	strh	r3, [r4, #12]
 8011afa:	e03e      	b.n	8011b7a <__swsetup_r+0xba>
 8011afc:	4b25      	ldr	r3, [pc, #148]	; (8011b94 <__swsetup_r+0xd4>)
 8011afe:	429c      	cmp	r4, r3
 8011b00:	d101      	bne.n	8011b06 <__swsetup_r+0x46>
 8011b02:	68ac      	ldr	r4, [r5, #8]
 8011b04:	e7eb      	b.n	8011ade <__swsetup_r+0x1e>
 8011b06:	4b24      	ldr	r3, [pc, #144]	; (8011b98 <__swsetup_r+0xd8>)
 8011b08:	429c      	cmp	r4, r3
 8011b0a:	bf08      	it	eq
 8011b0c:	68ec      	ldreq	r4, [r5, #12]
 8011b0e:	e7e6      	b.n	8011ade <__swsetup_r+0x1e>
 8011b10:	0758      	lsls	r0, r3, #29
 8011b12:	d512      	bpl.n	8011b3a <__swsetup_r+0x7a>
 8011b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b16:	b141      	cbz	r1, 8011b2a <__swsetup_r+0x6a>
 8011b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b1c:	4299      	cmp	r1, r3
 8011b1e:	d002      	beq.n	8011b26 <__swsetup_r+0x66>
 8011b20:	4630      	mov	r0, r6
 8011b22:	f7fb ff65 	bl	800d9f0 <_free_r>
 8011b26:	2300      	movs	r3, #0
 8011b28:	6363      	str	r3, [r4, #52]	; 0x34
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b30:	81a3      	strh	r3, [r4, #12]
 8011b32:	2300      	movs	r3, #0
 8011b34:	6063      	str	r3, [r4, #4]
 8011b36:	6923      	ldr	r3, [r4, #16]
 8011b38:	6023      	str	r3, [r4, #0]
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	f043 0308 	orr.w	r3, r3, #8
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	6923      	ldr	r3, [r4, #16]
 8011b44:	b94b      	cbnz	r3, 8011b5a <__swsetup_r+0x9a>
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b50:	d003      	beq.n	8011b5a <__swsetup_r+0x9a>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4630      	mov	r0, r6
 8011b56:	f000 fa05 	bl	8011f64 <__smakebuf_r>
 8011b5a:	89a0      	ldrh	r0, [r4, #12]
 8011b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b60:	f010 0301 	ands.w	r3, r0, #1
 8011b64:	d00a      	beq.n	8011b7c <__swsetup_r+0xbc>
 8011b66:	2300      	movs	r3, #0
 8011b68:	60a3      	str	r3, [r4, #8]
 8011b6a:	6963      	ldr	r3, [r4, #20]
 8011b6c:	425b      	negs	r3, r3
 8011b6e:	61a3      	str	r3, [r4, #24]
 8011b70:	6923      	ldr	r3, [r4, #16]
 8011b72:	b943      	cbnz	r3, 8011b86 <__swsetup_r+0xc6>
 8011b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b78:	d1ba      	bne.n	8011af0 <__swsetup_r+0x30>
 8011b7a:	bd70      	pop	{r4, r5, r6, pc}
 8011b7c:	0781      	lsls	r1, r0, #30
 8011b7e:	bf58      	it	pl
 8011b80:	6963      	ldrpl	r3, [r4, #20]
 8011b82:	60a3      	str	r3, [r4, #8]
 8011b84:	e7f4      	b.n	8011b70 <__swsetup_r+0xb0>
 8011b86:	2000      	movs	r0, #0
 8011b88:	e7f7      	b.n	8011b7a <__swsetup_r+0xba>
 8011b8a:	bf00      	nop
 8011b8c:	2000003c 	.word	0x2000003c
 8011b90:	08012c5c 	.word	0x08012c5c
 8011b94:	08012c7c 	.word	0x08012c7c
 8011b98:	08012c3c 	.word	0x08012c3c

08011b9c <abort>:
 8011b9c:	2006      	movs	r0, #6
 8011b9e:	b508      	push	{r3, lr}
 8011ba0:	f000 fa50 	bl	8012044 <raise>
 8011ba4:	2001      	movs	r0, #1
 8011ba6:	f7f0 fc0e 	bl	80023c6 <_exit>
	...

08011bac <__sflush_r>:
 8011bac:	898a      	ldrh	r2, [r1, #12]
 8011bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	0710      	lsls	r0, r2, #28
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	d458      	bmi.n	8011c6c <__sflush_r+0xc0>
 8011bba:	684b      	ldr	r3, [r1, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	dc05      	bgt.n	8011bcc <__sflush_r+0x20>
 8011bc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	dc02      	bgt.n	8011bcc <__sflush_r+0x20>
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	d0f9      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bd8:	682f      	ldr	r7, [r5, #0]
 8011bda:	602b      	str	r3, [r5, #0]
 8011bdc:	d032      	beq.n	8011c44 <__sflush_r+0x98>
 8011bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	075a      	lsls	r2, r3, #29
 8011be4:	d505      	bpl.n	8011bf2 <__sflush_r+0x46>
 8011be6:	6863      	ldr	r3, [r4, #4]
 8011be8:	1ac0      	subs	r0, r0, r3
 8011bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bec:	b10b      	cbz	r3, 8011bf2 <__sflush_r+0x46>
 8011bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bf0:	1ac0      	subs	r0, r0, r3
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	6a21      	ldr	r1, [r4, #32]
 8011bfc:	47b0      	blx	r6
 8011bfe:	1c43      	adds	r3, r0, #1
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	d106      	bne.n	8011c12 <__sflush_r+0x66>
 8011c04:	6829      	ldr	r1, [r5, #0]
 8011c06:	291d      	cmp	r1, #29
 8011c08:	d82c      	bhi.n	8011c64 <__sflush_r+0xb8>
 8011c0a:	4a2a      	ldr	r2, [pc, #168]	; (8011cb4 <__sflush_r+0x108>)
 8011c0c:	40ca      	lsrs	r2, r1
 8011c0e:	07d6      	lsls	r6, r2, #31
 8011c10:	d528      	bpl.n	8011c64 <__sflush_r+0xb8>
 8011c12:	2200      	movs	r2, #0
 8011c14:	6062      	str	r2, [r4, #4]
 8011c16:	6922      	ldr	r2, [r4, #16]
 8011c18:	04d9      	lsls	r1, r3, #19
 8011c1a:	6022      	str	r2, [r4, #0]
 8011c1c:	d504      	bpl.n	8011c28 <__sflush_r+0x7c>
 8011c1e:	1c42      	adds	r2, r0, #1
 8011c20:	d101      	bne.n	8011c26 <__sflush_r+0x7a>
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	b903      	cbnz	r3, 8011c28 <__sflush_r+0x7c>
 8011c26:	6560      	str	r0, [r4, #84]	; 0x54
 8011c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c2a:	602f      	str	r7, [r5, #0]
 8011c2c:	2900      	cmp	r1, #0
 8011c2e:	d0ca      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c34:	4299      	cmp	r1, r3
 8011c36:	d002      	beq.n	8011c3e <__sflush_r+0x92>
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f7fb fed9 	bl	800d9f0 <_free_r>
 8011c3e:	2000      	movs	r0, #0
 8011c40:	6360      	str	r0, [r4, #52]	; 0x34
 8011c42:	e7c1      	b.n	8011bc8 <__sflush_r+0x1c>
 8011c44:	6a21      	ldr	r1, [r4, #32]
 8011c46:	2301      	movs	r3, #1
 8011c48:	4628      	mov	r0, r5
 8011c4a:	47b0      	blx	r6
 8011c4c:	1c41      	adds	r1, r0, #1
 8011c4e:	d1c7      	bne.n	8011be0 <__sflush_r+0x34>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d0c4      	beq.n	8011be0 <__sflush_r+0x34>
 8011c56:	2b1d      	cmp	r3, #29
 8011c58:	d001      	beq.n	8011c5e <__sflush_r+0xb2>
 8011c5a:	2b16      	cmp	r3, #22
 8011c5c:	d101      	bne.n	8011c62 <__sflush_r+0xb6>
 8011c5e:	602f      	str	r7, [r5, #0]
 8011c60:	e7b1      	b.n	8011bc6 <__sflush_r+0x1a>
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c68:	81a3      	strh	r3, [r4, #12]
 8011c6a:	e7ad      	b.n	8011bc8 <__sflush_r+0x1c>
 8011c6c:	690f      	ldr	r7, [r1, #16]
 8011c6e:	2f00      	cmp	r7, #0
 8011c70:	d0a9      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011c72:	0793      	lsls	r3, r2, #30
 8011c74:	bf18      	it	ne
 8011c76:	2300      	movne	r3, #0
 8011c78:	680e      	ldr	r6, [r1, #0]
 8011c7a:	bf08      	it	eq
 8011c7c:	694b      	ldreq	r3, [r1, #20]
 8011c7e:	eba6 0807 	sub.w	r8, r6, r7
 8011c82:	600f      	str	r7, [r1, #0]
 8011c84:	608b      	str	r3, [r1, #8]
 8011c86:	f1b8 0f00 	cmp.w	r8, #0
 8011c8a:	dd9c      	ble.n	8011bc6 <__sflush_r+0x1a>
 8011c8c:	4643      	mov	r3, r8
 8011c8e:	463a      	mov	r2, r7
 8011c90:	4628      	mov	r0, r5
 8011c92:	6a21      	ldr	r1, [r4, #32]
 8011c94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c96:	47b0      	blx	r6
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	dc06      	bgt.n	8011caa <__sflush_r+0xfe>
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ca6:	81a3      	strh	r3, [r4, #12]
 8011ca8:	e78e      	b.n	8011bc8 <__sflush_r+0x1c>
 8011caa:	4407      	add	r7, r0
 8011cac:	eba8 0800 	sub.w	r8, r8, r0
 8011cb0:	e7e9      	b.n	8011c86 <__sflush_r+0xda>
 8011cb2:	bf00      	nop
 8011cb4:	20400001 	.word	0x20400001

08011cb8 <_fflush_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	690b      	ldr	r3, [r1, #16]
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	460c      	mov	r4, r1
 8011cc0:	b913      	cbnz	r3, 8011cc8 <_fflush_r+0x10>
 8011cc2:	2500      	movs	r5, #0
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	b118      	cbz	r0, 8011cd2 <_fflush_r+0x1a>
 8011cca:	6983      	ldr	r3, [r0, #24]
 8011ccc:	b90b      	cbnz	r3, 8011cd2 <_fflush_r+0x1a>
 8011cce:	f000 f887 	bl	8011de0 <__sinit>
 8011cd2:	4b14      	ldr	r3, [pc, #80]	; (8011d24 <_fflush_r+0x6c>)
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	d11b      	bne.n	8011d10 <_fflush_r+0x58>
 8011cd8:	686c      	ldr	r4, [r5, #4]
 8011cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d0ef      	beq.n	8011cc2 <_fflush_r+0xa>
 8011ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ce4:	07d0      	lsls	r0, r2, #31
 8011ce6:	d404      	bmi.n	8011cf2 <_fflush_r+0x3a>
 8011ce8:	0599      	lsls	r1, r3, #22
 8011cea:	d402      	bmi.n	8011cf2 <_fflush_r+0x3a>
 8011cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cee:	f7ff fcfc 	bl	80116ea <__retarget_lock_acquire_recursive>
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	f7ff ff59 	bl	8011bac <__sflush_r>
 8011cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	07da      	lsls	r2, r3, #31
 8011d00:	d4e0      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011d02:	89a3      	ldrh	r3, [r4, #12]
 8011d04:	059b      	lsls	r3, r3, #22
 8011d06:	d4dd      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d0a:	f7ff fcef 	bl	80116ec <__retarget_lock_release_recursive>
 8011d0e:	e7d9      	b.n	8011cc4 <_fflush_r+0xc>
 8011d10:	4b05      	ldr	r3, [pc, #20]	; (8011d28 <_fflush_r+0x70>)
 8011d12:	429c      	cmp	r4, r3
 8011d14:	d101      	bne.n	8011d1a <_fflush_r+0x62>
 8011d16:	68ac      	ldr	r4, [r5, #8]
 8011d18:	e7df      	b.n	8011cda <_fflush_r+0x22>
 8011d1a:	4b04      	ldr	r3, [pc, #16]	; (8011d2c <_fflush_r+0x74>)
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	bf08      	it	eq
 8011d20:	68ec      	ldreq	r4, [r5, #12]
 8011d22:	e7da      	b.n	8011cda <_fflush_r+0x22>
 8011d24:	08012c5c 	.word	0x08012c5c
 8011d28:	08012c7c 	.word	0x08012c7c
 8011d2c:	08012c3c 	.word	0x08012c3c

08011d30 <std>:
 8011d30:	2300      	movs	r3, #0
 8011d32:	b510      	push	{r4, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	e9c0 3300 	strd	r3, r3, [r0]
 8011d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d3e:	6083      	str	r3, [r0, #8]
 8011d40:	8181      	strh	r1, [r0, #12]
 8011d42:	6643      	str	r3, [r0, #100]	; 0x64
 8011d44:	81c2      	strh	r2, [r0, #14]
 8011d46:	6183      	str	r3, [r0, #24]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	2208      	movs	r2, #8
 8011d4c:	305c      	adds	r0, #92	; 0x5c
 8011d4e:	f7fb fe47 	bl	800d9e0 <memset>
 8011d52:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <std+0x38>)
 8011d54:	6224      	str	r4, [r4, #32]
 8011d56:	6263      	str	r3, [r4, #36]	; 0x24
 8011d58:	4b04      	ldr	r3, [pc, #16]	; (8011d6c <std+0x3c>)
 8011d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d5c:	4b04      	ldr	r3, [pc, #16]	; (8011d70 <std+0x40>)
 8011d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d60:	4b04      	ldr	r3, [pc, #16]	; (8011d74 <std+0x44>)
 8011d62:	6323      	str	r3, [r4, #48]	; 0x30
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	bf00      	nop
 8011d68:	0801207d 	.word	0x0801207d
 8011d6c:	0801209f 	.word	0x0801209f
 8011d70:	080120d7 	.word	0x080120d7
 8011d74:	080120fb 	.word	0x080120fb

08011d78 <_cleanup_r>:
 8011d78:	4901      	ldr	r1, [pc, #4]	; (8011d80 <_cleanup_r+0x8>)
 8011d7a:	f000 b8af 	b.w	8011edc <_fwalk_reent>
 8011d7e:	bf00      	nop
 8011d80:	08011cb9 	.word	0x08011cb9

08011d84 <__sfmoreglue>:
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	2568      	movs	r5, #104	; 0x68
 8011d88:	1e4a      	subs	r2, r1, #1
 8011d8a:	4355      	muls	r5, r2
 8011d8c:	460e      	mov	r6, r1
 8011d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d92:	f7fb fe79 	bl	800da88 <_malloc_r>
 8011d96:	4604      	mov	r4, r0
 8011d98:	b140      	cbz	r0, 8011dac <__sfmoreglue+0x28>
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8011da0:	300c      	adds	r0, #12
 8011da2:	60a0      	str	r0, [r4, #8]
 8011da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011da8:	f7fb fe1a 	bl	800d9e0 <memset>
 8011dac:	4620      	mov	r0, r4
 8011dae:	bd70      	pop	{r4, r5, r6, pc}

08011db0 <__sfp_lock_acquire>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__sfp_lock_acquire+0x8>)
 8011db2:	f7ff bc9a 	b.w	80116ea <__retarget_lock_acquire_recursive>
 8011db6:	bf00      	nop
 8011db8:	20002dfc 	.word	0x20002dfc

08011dbc <__sfp_lock_release>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__sfp_lock_release+0x8>)
 8011dbe:	f7ff bc95 	b.w	80116ec <__retarget_lock_release_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	20002dfc 	.word	0x20002dfc

08011dc8 <__sinit_lock_acquire>:
 8011dc8:	4801      	ldr	r0, [pc, #4]	; (8011dd0 <__sinit_lock_acquire+0x8>)
 8011dca:	f7ff bc8e 	b.w	80116ea <__retarget_lock_acquire_recursive>
 8011dce:	bf00      	nop
 8011dd0:	20002df7 	.word	0x20002df7

08011dd4 <__sinit_lock_release>:
 8011dd4:	4801      	ldr	r0, [pc, #4]	; (8011ddc <__sinit_lock_release+0x8>)
 8011dd6:	f7ff bc89 	b.w	80116ec <__retarget_lock_release_recursive>
 8011dda:	bf00      	nop
 8011ddc:	20002df7 	.word	0x20002df7

08011de0 <__sinit>:
 8011de0:	b510      	push	{r4, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	f7ff fff0 	bl	8011dc8 <__sinit_lock_acquire>
 8011de8:	69a3      	ldr	r3, [r4, #24]
 8011dea:	b11b      	cbz	r3, 8011df4 <__sinit+0x14>
 8011dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df0:	f7ff bff0 	b.w	8011dd4 <__sinit_lock_release>
 8011df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011df8:	6523      	str	r3, [r4, #80]	; 0x50
 8011dfa:	4b13      	ldr	r3, [pc, #76]	; (8011e48 <__sinit+0x68>)
 8011dfc:	4a13      	ldr	r2, [pc, #76]	; (8011e4c <__sinit+0x6c>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8011e02:	42a3      	cmp	r3, r4
 8011e04:	bf08      	it	eq
 8011e06:	2301      	moveq	r3, #1
 8011e08:	4620      	mov	r0, r4
 8011e0a:	bf08      	it	eq
 8011e0c:	61a3      	streq	r3, [r4, #24]
 8011e0e:	f000 f81f 	bl	8011e50 <__sfp>
 8011e12:	6060      	str	r0, [r4, #4]
 8011e14:	4620      	mov	r0, r4
 8011e16:	f000 f81b 	bl	8011e50 <__sfp>
 8011e1a:	60a0      	str	r0, [r4, #8]
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f000 f817 	bl	8011e50 <__sfp>
 8011e22:	2200      	movs	r2, #0
 8011e24:	2104      	movs	r1, #4
 8011e26:	60e0      	str	r0, [r4, #12]
 8011e28:	6860      	ldr	r0, [r4, #4]
 8011e2a:	f7ff ff81 	bl	8011d30 <std>
 8011e2e:	2201      	movs	r2, #1
 8011e30:	2109      	movs	r1, #9
 8011e32:	68a0      	ldr	r0, [r4, #8]
 8011e34:	f7ff ff7c 	bl	8011d30 <std>
 8011e38:	2202      	movs	r2, #2
 8011e3a:	2112      	movs	r1, #18
 8011e3c:	68e0      	ldr	r0, [r4, #12]
 8011e3e:	f7ff ff77 	bl	8011d30 <std>
 8011e42:	2301      	movs	r3, #1
 8011e44:	61a3      	str	r3, [r4, #24]
 8011e46:	e7d1      	b.n	8011dec <__sinit+0xc>
 8011e48:	080127e8 	.word	0x080127e8
 8011e4c:	08011d79 	.word	0x08011d79

08011e50 <__sfp>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	4607      	mov	r7, r0
 8011e54:	f7ff ffac 	bl	8011db0 <__sfp_lock_acquire>
 8011e58:	4b1e      	ldr	r3, [pc, #120]	; (8011ed4 <__sfp+0x84>)
 8011e5a:	681e      	ldr	r6, [r3, #0]
 8011e5c:	69b3      	ldr	r3, [r6, #24]
 8011e5e:	b913      	cbnz	r3, 8011e66 <__sfp+0x16>
 8011e60:	4630      	mov	r0, r6
 8011e62:	f7ff ffbd 	bl	8011de0 <__sinit>
 8011e66:	3648      	adds	r6, #72	; 0x48
 8011e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	d503      	bpl.n	8011e78 <__sfp+0x28>
 8011e70:	6833      	ldr	r3, [r6, #0]
 8011e72:	b30b      	cbz	r3, 8011eb8 <__sfp+0x68>
 8011e74:	6836      	ldr	r6, [r6, #0]
 8011e76:	e7f7      	b.n	8011e68 <__sfp+0x18>
 8011e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e7c:	b9d5      	cbnz	r5, 8011eb4 <__sfp+0x64>
 8011e7e:	4b16      	ldr	r3, [pc, #88]	; (8011ed8 <__sfp+0x88>)
 8011e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e84:	60e3      	str	r3, [r4, #12]
 8011e86:	6665      	str	r5, [r4, #100]	; 0x64
 8011e88:	f7ff fc2e 	bl	80116e8 <__retarget_lock_init_recursive>
 8011e8c:	f7ff ff96 	bl	8011dbc <__sfp_lock_release>
 8011e90:	2208      	movs	r2, #8
 8011e92:	4629      	mov	r1, r5
 8011e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e9c:	6025      	str	r5, [r4, #0]
 8011e9e:	61a5      	str	r5, [r4, #24]
 8011ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ea4:	f7fb fd9c 	bl	800d9e0 <memset>
 8011ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb4:	3468      	adds	r4, #104	; 0x68
 8011eb6:	e7d9      	b.n	8011e6c <__sfp+0x1c>
 8011eb8:	2104      	movs	r1, #4
 8011eba:	4638      	mov	r0, r7
 8011ebc:	f7ff ff62 	bl	8011d84 <__sfmoreglue>
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	6030      	str	r0, [r6, #0]
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d1d5      	bne.n	8011e74 <__sfp+0x24>
 8011ec8:	f7ff ff78 	bl	8011dbc <__sfp_lock_release>
 8011ecc:	230c      	movs	r3, #12
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	e7ee      	b.n	8011eb0 <__sfp+0x60>
 8011ed2:	bf00      	nop
 8011ed4:	080127e8 	.word	0x080127e8
 8011ed8:	ffff0001 	.word	0xffff0001

08011edc <_fwalk_reent>:
 8011edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee0:	4606      	mov	r6, r0
 8011ee2:	4688      	mov	r8, r1
 8011ee4:	2700      	movs	r7, #0
 8011ee6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eee:	f1b9 0901 	subs.w	r9, r9, #1
 8011ef2:	d505      	bpl.n	8011f00 <_fwalk_reent+0x24>
 8011ef4:	6824      	ldr	r4, [r4, #0]
 8011ef6:	2c00      	cmp	r4, #0
 8011ef8:	d1f7      	bne.n	8011eea <_fwalk_reent+0xe>
 8011efa:	4638      	mov	r0, r7
 8011efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f00:	89ab      	ldrh	r3, [r5, #12]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d907      	bls.n	8011f16 <_fwalk_reent+0x3a>
 8011f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	d003      	beq.n	8011f16 <_fwalk_reent+0x3a>
 8011f0e:	4629      	mov	r1, r5
 8011f10:	4630      	mov	r0, r6
 8011f12:	47c0      	blx	r8
 8011f14:	4307      	orrs	r7, r0
 8011f16:	3568      	adds	r5, #104	; 0x68
 8011f18:	e7e9      	b.n	8011eee <_fwalk_reent+0x12>

08011f1a <__swhatbuf_r>:
 8011f1a:	b570      	push	{r4, r5, r6, lr}
 8011f1c:	460e      	mov	r6, r1
 8011f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f22:	4614      	mov	r4, r2
 8011f24:	2900      	cmp	r1, #0
 8011f26:	461d      	mov	r5, r3
 8011f28:	b096      	sub	sp, #88	; 0x58
 8011f2a:	da07      	bge.n	8011f3c <__swhatbuf_r+0x22>
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	602b      	str	r3, [r5, #0]
 8011f30:	89b3      	ldrh	r3, [r6, #12]
 8011f32:	061a      	lsls	r2, r3, #24
 8011f34:	d410      	bmi.n	8011f58 <__swhatbuf_r+0x3e>
 8011f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f3a:	e00e      	b.n	8011f5a <__swhatbuf_r+0x40>
 8011f3c:	466a      	mov	r2, sp
 8011f3e:	f000 f903 	bl	8012148 <_fstat_r>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	dbf2      	blt.n	8011f2c <__swhatbuf_r+0x12>
 8011f46:	9a01      	ldr	r2, [sp, #4]
 8011f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f50:	425a      	negs	r2, r3
 8011f52:	415a      	adcs	r2, r3
 8011f54:	602a      	str	r2, [r5, #0]
 8011f56:	e7ee      	b.n	8011f36 <__swhatbuf_r+0x1c>
 8011f58:	2340      	movs	r3, #64	; 0x40
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	b016      	add	sp, #88	; 0x58
 8011f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f64 <__smakebuf_r>:
 8011f64:	898b      	ldrh	r3, [r1, #12]
 8011f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f68:	079d      	lsls	r5, r3, #30
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	d507      	bpl.n	8011f80 <__smakebuf_r+0x1c>
 8011f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	6123      	str	r3, [r4, #16]
 8011f78:	2301      	movs	r3, #1
 8011f7a:	6163      	str	r3, [r4, #20]
 8011f7c:	b002      	add	sp, #8
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}
 8011f80:	466a      	mov	r2, sp
 8011f82:	ab01      	add	r3, sp, #4
 8011f84:	f7ff ffc9 	bl	8011f1a <__swhatbuf_r>
 8011f88:	9900      	ldr	r1, [sp, #0]
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f7fb fd7b 	bl	800da88 <_malloc_r>
 8011f92:	b948      	cbnz	r0, 8011fa8 <__smakebuf_r+0x44>
 8011f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f98:	059a      	lsls	r2, r3, #22
 8011f9a:	d4ef      	bmi.n	8011f7c <__smakebuf_r+0x18>
 8011f9c:	f023 0303 	bic.w	r3, r3, #3
 8011fa0:	f043 0302 	orr.w	r3, r3, #2
 8011fa4:	81a3      	strh	r3, [r4, #12]
 8011fa6:	e7e3      	b.n	8011f70 <__smakebuf_r+0xc>
 8011fa8:	4b0d      	ldr	r3, [pc, #52]	; (8011fe0 <__smakebuf_r+0x7c>)
 8011faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	6020      	str	r0, [r4, #0]
 8011fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fb4:	81a3      	strh	r3, [r4, #12]
 8011fb6:	9b00      	ldr	r3, [sp, #0]
 8011fb8:	6120      	str	r0, [r4, #16]
 8011fba:	6163      	str	r3, [r4, #20]
 8011fbc:	9b01      	ldr	r3, [sp, #4]
 8011fbe:	b15b      	cbz	r3, 8011fd8 <__smakebuf_r+0x74>
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fc6:	f000 f8d1 	bl	801216c <_isatty_r>
 8011fca:	b128      	cbz	r0, 8011fd8 <__smakebuf_r+0x74>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	f023 0303 	bic.w	r3, r3, #3
 8011fd2:	f043 0301 	orr.w	r3, r3, #1
 8011fd6:	81a3      	strh	r3, [r4, #12]
 8011fd8:	89a0      	ldrh	r0, [r4, #12]
 8011fda:	4305      	orrs	r5, r0
 8011fdc:	81a5      	strh	r5, [r4, #12]
 8011fde:	e7cd      	b.n	8011f7c <__smakebuf_r+0x18>
 8011fe0:	08011d79 	.word	0x08011d79

08011fe4 <_malloc_usable_size_r>:
 8011fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fe8:	1f18      	subs	r0, r3, #4
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	bfbc      	itt	lt
 8011fee:	580b      	ldrlt	r3, [r1, r0]
 8011ff0:	18c0      	addlt	r0, r0, r3
 8011ff2:	4770      	bx	lr

08011ff4 <_raise_r>:
 8011ff4:	291f      	cmp	r1, #31
 8011ff6:	b538      	push	{r3, r4, r5, lr}
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	460d      	mov	r5, r1
 8011ffc:	d904      	bls.n	8012008 <_raise_r+0x14>
 8011ffe:	2316      	movs	r3, #22
 8012000:	6003      	str	r3, [r0, #0]
 8012002:	f04f 30ff 	mov.w	r0, #4294967295
 8012006:	bd38      	pop	{r3, r4, r5, pc}
 8012008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801200a:	b112      	cbz	r2, 8012012 <_raise_r+0x1e>
 801200c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012010:	b94b      	cbnz	r3, 8012026 <_raise_r+0x32>
 8012012:	4620      	mov	r0, r4
 8012014:	f000 f830 	bl	8012078 <_getpid_r>
 8012018:	462a      	mov	r2, r5
 801201a:	4601      	mov	r1, r0
 801201c:	4620      	mov	r0, r4
 801201e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012022:	f000 b817 	b.w	8012054 <_kill_r>
 8012026:	2b01      	cmp	r3, #1
 8012028:	d00a      	beq.n	8012040 <_raise_r+0x4c>
 801202a:	1c59      	adds	r1, r3, #1
 801202c:	d103      	bne.n	8012036 <_raise_r+0x42>
 801202e:	2316      	movs	r3, #22
 8012030:	6003      	str	r3, [r0, #0]
 8012032:	2001      	movs	r0, #1
 8012034:	e7e7      	b.n	8012006 <_raise_r+0x12>
 8012036:	2400      	movs	r4, #0
 8012038:	4628      	mov	r0, r5
 801203a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801203e:	4798      	blx	r3
 8012040:	2000      	movs	r0, #0
 8012042:	e7e0      	b.n	8012006 <_raise_r+0x12>

08012044 <raise>:
 8012044:	4b02      	ldr	r3, [pc, #8]	; (8012050 <raise+0xc>)
 8012046:	4601      	mov	r1, r0
 8012048:	6818      	ldr	r0, [r3, #0]
 801204a:	f7ff bfd3 	b.w	8011ff4 <_raise_r>
 801204e:	bf00      	nop
 8012050:	2000003c 	.word	0x2000003c

08012054 <_kill_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	2300      	movs	r3, #0
 8012058:	4d06      	ldr	r5, [pc, #24]	; (8012074 <_kill_r+0x20>)
 801205a:	4604      	mov	r4, r0
 801205c:	4608      	mov	r0, r1
 801205e:	4611      	mov	r1, r2
 8012060:	602b      	str	r3, [r5, #0]
 8012062:	f7f0 f9a0 	bl	80023a6 <_kill>
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	d102      	bne.n	8012070 <_kill_r+0x1c>
 801206a:	682b      	ldr	r3, [r5, #0]
 801206c:	b103      	cbz	r3, 8012070 <_kill_r+0x1c>
 801206e:	6023      	str	r3, [r4, #0]
 8012070:	bd38      	pop	{r3, r4, r5, pc}
 8012072:	bf00      	nop
 8012074:	20002df0 	.word	0x20002df0

08012078 <_getpid_r>:
 8012078:	f7f0 b98e 	b.w	8002398 <_getpid>

0801207c <__sread>:
 801207c:	b510      	push	{r4, lr}
 801207e:	460c      	mov	r4, r1
 8012080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012084:	f000 f894 	bl	80121b0 <_read_r>
 8012088:	2800      	cmp	r0, #0
 801208a:	bfab      	itete	ge
 801208c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801208e:	89a3      	ldrhlt	r3, [r4, #12]
 8012090:	181b      	addge	r3, r3, r0
 8012092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012096:	bfac      	ite	ge
 8012098:	6563      	strge	r3, [r4, #84]	; 0x54
 801209a:	81a3      	strhlt	r3, [r4, #12]
 801209c:	bd10      	pop	{r4, pc}

0801209e <__swrite>:
 801209e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a2:	461f      	mov	r7, r3
 80120a4:	898b      	ldrh	r3, [r1, #12]
 80120a6:	4605      	mov	r5, r0
 80120a8:	05db      	lsls	r3, r3, #23
 80120aa:	460c      	mov	r4, r1
 80120ac:	4616      	mov	r6, r2
 80120ae:	d505      	bpl.n	80120bc <__swrite+0x1e>
 80120b0:	2302      	movs	r3, #2
 80120b2:	2200      	movs	r2, #0
 80120b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b8:	f000 f868 	bl	801218c <_lseek_r>
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	4632      	mov	r2, r6
 80120c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	4628      	mov	r0, r5
 80120c8:	463b      	mov	r3, r7
 80120ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120d2:	f000 b817 	b.w	8012104 <_write_r>

080120d6 <__sseek>:
 80120d6:	b510      	push	{r4, lr}
 80120d8:	460c      	mov	r4, r1
 80120da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120de:	f000 f855 	bl	801218c <_lseek_r>
 80120e2:	1c43      	adds	r3, r0, #1
 80120e4:	89a3      	ldrh	r3, [r4, #12]
 80120e6:	bf15      	itete	ne
 80120e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80120ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120f2:	81a3      	strheq	r3, [r4, #12]
 80120f4:	bf18      	it	ne
 80120f6:	81a3      	strhne	r3, [r4, #12]
 80120f8:	bd10      	pop	{r4, pc}

080120fa <__sclose>:
 80120fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fe:	f000 b813 	b.w	8012128 <_close_r>
	...

08012104 <_write_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	4611      	mov	r1, r2
 801210c:	2200      	movs	r2, #0
 801210e:	4d05      	ldr	r5, [pc, #20]	; (8012124 <_write_r+0x20>)
 8012110:	602a      	str	r2, [r5, #0]
 8012112:	461a      	mov	r2, r3
 8012114:	f7f0 f97e 	bl	8002414 <_write>
 8012118:	1c43      	adds	r3, r0, #1
 801211a:	d102      	bne.n	8012122 <_write_r+0x1e>
 801211c:	682b      	ldr	r3, [r5, #0]
 801211e:	b103      	cbz	r3, 8012122 <_write_r+0x1e>
 8012120:	6023      	str	r3, [r4, #0]
 8012122:	bd38      	pop	{r3, r4, r5, pc}
 8012124:	20002df0 	.word	0x20002df0

08012128 <_close_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	2300      	movs	r3, #0
 801212c:	4d05      	ldr	r5, [pc, #20]	; (8012144 <_close_r+0x1c>)
 801212e:	4604      	mov	r4, r0
 8012130:	4608      	mov	r0, r1
 8012132:	602b      	str	r3, [r5, #0]
 8012134:	f7f0 f98a 	bl	800244c <_close>
 8012138:	1c43      	adds	r3, r0, #1
 801213a:	d102      	bne.n	8012142 <_close_r+0x1a>
 801213c:	682b      	ldr	r3, [r5, #0]
 801213e:	b103      	cbz	r3, 8012142 <_close_r+0x1a>
 8012140:	6023      	str	r3, [r4, #0]
 8012142:	bd38      	pop	{r3, r4, r5, pc}
 8012144:	20002df0 	.word	0x20002df0

08012148 <_fstat_r>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	2300      	movs	r3, #0
 801214c:	4d06      	ldr	r5, [pc, #24]	; (8012168 <_fstat_r+0x20>)
 801214e:	4604      	mov	r4, r0
 8012150:	4608      	mov	r0, r1
 8012152:	4611      	mov	r1, r2
 8012154:	602b      	str	r3, [r5, #0]
 8012156:	f7f0 f984 	bl	8002462 <_fstat>
 801215a:	1c43      	adds	r3, r0, #1
 801215c:	d102      	bne.n	8012164 <_fstat_r+0x1c>
 801215e:	682b      	ldr	r3, [r5, #0]
 8012160:	b103      	cbz	r3, 8012164 <_fstat_r+0x1c>
 8012162:	6023      	str	r3, [r4, #0]
 8012164:	bd38      	pop	{r3, r4, r5, pc}
 8012166:	bf00      	nop
 8012168:	20002df0 	.word	0x20002df0

0801216c <_isatty_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	2300      	movs	r3, #0
 8012170:	4d05      	ldr	r5, [pc, #20]	; (8012188 <_isatty_r+0x1c>)
 8012172:	4604      	mov	r4, r0
 8012174:	4608      	mov	r0, r1
 8012176:	602b      	str	r3, [r5, #0]
 8012178:	f7f0 f982 	bl	8002480 <_isatty>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_isatty_r+0x1a>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_isatty_r+0x1a>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20002df0 	.word	0x20002df0

0801218c <_lseek_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4604      	mov	r4, r0
 8012190:	4608      	mov	r0, r1
 8012192:	4611      	mov	r1, r2
 8012194:	2200      	movs	r2, #0
 8012196:	4d05      	ldr	r5, [pc, #20]	; (80121ac <_lseek_r+0x20>)
 8012198:	602a      	str	r2, [r5, #0]
 801219a:	461a      	mov	r2, r3
 801219c:	f7f0 f97a 	bl	8002494 <_lseek>
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	d102      	bne.n	80121aa <_lseek_r+0x1e>
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	b103      	cbz	r3, 80121aa <_lseek_r+0x1e>
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	20002df0 	.word	0x20002df0

080121b0 <_read_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4604      	mov	r4, r0
 80121b4:	4608      	mov	r0, r1
 80121b6:	4611      	mov	r1, r2
 80121b8:	2200      	movs	r2, #0
 80121ba:	4d05      	ldr	r5, [pc, #20]	; (80121d0 <_read_r+0x20>)
 80121bc:	602a      	str	r2, [r5, #0]
 80121be:	461a      	mov	r2, r3
 80121c0:	f7f0 f90b 	bl	80023da <_read>
 80121c4:	1c43      	adds	r3, r0, #1
 80121c6:	d102      	bne.n	80121ce <_read_r+0x1e>
 80121c8:	682b      	ldr	r3, [r5, #0]
 80121ca:	b103      	cbz	r3, 80121ce <_read_r+0x1e>
 80121cc:	6023      	str	r3, [r4, #0]
 80121ce:	bd38      	pop	{r3, r4, r5, pc}
 80121d0:	20002df0 	.word	0x20002df0

080121d4 <_init>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	bf00      	nop
 80121d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121da:	bc08      	pop	{r3}
 80121dc:	469e      	mov	lr, r3
 80121de:	4770      	bx	lr

080121e0 <_fini>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	bf00      	nop
 80121e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e6:	bc08      	pop	{r3}
 80121e8:	469e      	mov	lr, r3
 80121ea:	4770      	bx	lr
