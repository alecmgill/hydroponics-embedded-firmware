
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0801a5b0  0801a5b0  0002a5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac24  0801ac24  00030464  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac24  0801ac24  0002ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac2c  0801ac2c  00030464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac2c  0801ac2c  0002ac2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac30  0801ac30  0002ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000464  20000000  0801ac34  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e1a0  20000468  0801b098  00030468  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2000e608  0801b098  0003e608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c686  00000000  00000000  0003048d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091eb  00000000  00000000  0008cb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  00095d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de8  00000000  00000000  00097e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5ff  00000000  00000000  00099c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034be3  00000000  00000000  000c7247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db730  00000000  00000000  000fbe2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d755a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b9c  00000000  00000000  001d75b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a598 	.word	0x0801a598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0801a598 	.word	0x0801a598

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b9a6 	b.w	8000f60 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f83e 	bl	8000c9c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4605      	mov	r5, r0
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f7ff ff09 	bl	8000a50 <__aeabi_dcmplt>
 8000c3e:	b928      	cbnz	r0, 8000c4c <__aeabi_d2lz+0x20>
 8000c40:	4628      	mov	r0, r5
 8000c42:	4621      	mov	r1, r4
 8000c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c48:	f000 b80a 	b.w	8000c60 <__aeabi_d2ulz>
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c52:	f000 f805 	bl	8000c60 <__aeabi_d2ulz>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	2200      	movs	r2, #0
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__aeabi_d2ulz+0x34>)
 8000c66:	4606      	mov	r6, r0
 8000c68:	460f      	mov	r7, r1
 8000c6a:	f7ff fc7f 	bl	800056c <__aeabi_dmul>
 8000c6e:	f7ff ff55 	bl	8000b1c <__aeabi_d2uiz>
 8000c72:	4604      	mov	r4, r0
 8000c74:	f7ff fc00 	bl	8000478 <__aeabi_ui2d>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <__aeabi_d2ulz+0x38>)
 8000c7c:	f7ff fc76 	bl	800056c <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4630      	mov	r0, r6
 8000c86:	4639      	mov	r1, r7
 8000c88:	f7ff fab8 	bl	80001fc <__aeabi_dsub>
 8000c8c:	f7ff ff46 	bl	8000b1c <__aeabi_d2uiz>
 8000c90:	4621      	mov	r1, r4
 8000c92:	bdd0      	pop	{r4, r6, r7, pc}
 8000c94:	3df00000 	.word	0x3df00000
 8000c98:	41f00000 	.word	0x41f00000

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	468e      	mov	lr, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 8083 	bne.w	8000db4 <__udivmoddi4+0x118>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4617      	mov	r7, r2
 8000cb2:	d947      	bls.n	8000d44 <__udivmoddi4+0xa8>
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	b14b      	cbz	r3, 8000cce <__udivmoddi4+0x32>
 8000cba:	f1c3 0120 	rsb	r1, r3, #32
 8000cbe:	fa05 fe03 	lsl.w	lr, r5, r3
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	409f      	lsls	r7, r3
 8000cc8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd2:	fbbe fcf8 	udiv	ip, lr, r8
 8000cd6:	fa1f f987 	uxth.w	r9, r7
 8000cda:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cde:	fb0c f009 	mul.w	r0, ip, r9
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x66>
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000cf2:	f080 8118 	bcs.w	8000f26 <__udivmoddi4+0x28a>
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	f240 8115 	bls.w	8000f26 <__udivmoddi4+0x28a>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443a      	add	r2, r7
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d08:	fb08 2210 	mls	r2, r8, r0, r2
 8000d0c:	fb00 f109 	mul.w	r1, r0, r9
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d1a:	193c      	adds	r4, r7, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	f080 8103 	bcs.w	8000f2a <__udivmoddi4+0x28e>
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	f240 8100 	bls.w	8000f2a <__udivmoddi4+0x28e>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	1a64      	subs	r4, r4, r1
 8000d30:	2100      	movs	r1, #0
 8000d32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d36:	b11e      	cbz	r6, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	e9c6 4200 	strd	r4, r2, [r6]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	b902      	cbnz	r2, 8000d48 <__udivmoddi4+0xac>
 8000d46:	deff      	udf	#255	; 0xff
 8000d48:	fab2 f382 	clz	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14f      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d50:	1a8d      	subs	r5, r1, r2
 8000d52:	2101      	movs	r1, #1
 8000d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d58:	fa1f f882 	uxth.w	r8, r2
 8000d5c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d60:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d64:	fb08 f00c 	mul.w	r0, r8, ip
 8000d68:	0c22      	lsrs	r2, r4, #16
 8000d6a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0xe6>
 8000d72:	197d      	adds	r5, r7, r5
 8000d74:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0xe4>
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	f200 80e9 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000d80:	4694      	mov	ip, r2
 8000d82:	1a2d      	subs	r5, r5, r0
 8000d84:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d88:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x10e>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x10c>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	f200 80d9 	bhi.w	8000f5a <__udivmoddi4+0x2be>
 8000da8:	4610      	mov	r0, r2
 8000daa:	eba4 0408 	sub.w	r4, r4, r8
 8000dae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db2:	e7c0      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	f000 80b1 	beq.w	8000f20 <__udivmoddi4+0x284>
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e9c6 0500 	strd	r0, r5, [r6]
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f183 	clz	r1, r3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d14b      	bne.n	8000e6a <__udivmoddi4+0x1ce>
 8000dd2:	42ab      	cmp	r3, r5
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b9 	bhi.w	8000f4e <__udivmoddi4+0x2b2>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb65 0303 	sbc.w	r3, r5, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0aa      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000dea:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dee:	e7a7      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000df0:	409f      	lsls	r7, r3
 8000df2:	f1c3 0220 	rsb	r2, r3, #32
 8000df6:	40d1      	lsrs	r1, r2
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fa1f f887 	uxth.w	r8, r7
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	fa24 f202 	lsr.w	r2, r4, r2
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	fb00 fc08 	mul.w	ip, r0, r8
 8000e12:	432a      	orrs	r2, r5
 8000e14:	0c15      	lsrs	r5, r2, #16
 8000e16:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e1a:	45ac      	cmp	ip, r5
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x19a>
 8000e22:	197d      	adds	r5, r7, r5
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	f080 808f 	bcs.w	8000f4a <__udivmoddi4+0x2ae>
 8000e2c:	45ac      	cmp	ip, r5
 8000e2e:	f240 808c 	bls.w	8000f4a <__udivmoddi4+0x2ae>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	eba5 050c 	sub.w	r5, r5, ip
 8000e3a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e3e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e42:	fb01 f908 	mul.w	r9, r1, r8
 8000e46:	b295      	uxth	r5, r2
 8000e48:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e4c:	45a9      	cmp	r9, r5
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	197d      	adds	r5, r7, r5
 8000e52:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e56:	d274      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d972      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	eba5 0509 	sub.w	r5, r5, r9
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e778      	b.n	8000d5c <__udivmoddi4+0xc0>
 8000e6a:	f1c1 0720 	rsb	r7, r1, #32
 8000e6e:	408b      	lsls	r3, r1
 8000e70:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e74:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e78:	fa25 f407 	lsr.w	r4, r5, r7
 8000e7c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e84:	fa1f f88c 	uxth.w	r8, ip
 8000e88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e8c:	fa20 f307 	lsr.w	r3, r0, r7
 8000e90:	fb09 fa08 	mul.w	sl, r9, r8
 8000e94:	408d      	lsls	r5, r1
 8000e96:	431d      	orrs	r5, r3
 8000e98:	0c2b      	lsrs	r3, r5, #16
 8000e9a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea4:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea8:	d909      	bls.n	8000ebe <__udivmoddi4+0x222>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb2:	d248      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb4:	45a2      	cmp	sl, r4
 8000eb6:	d946      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb8:	f1a9 0902 	sub.w	r9, r9, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ec6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eca:	fb00 fa08 	mul.w	sl, r0, r8
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	45a2      	cmp	sl, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x24e>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee0:	d22d      	bcs.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee2:	45a2      	cmp	sl, r4
 8000ee4:	d92b      	bls.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4464      	add	r4, ip
 8000eea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	eba4 040a 	sub.w	r4, r4, sl
 8000ef6:	454c      	cmp	r4, r9
 8000ef8:	46c6      	mov	lr, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	d319      	bcc.n	8000f32 <__udivmoddi4+0x296>
 8000efe:	d016      	beq.n	8000f2e <__udivmoddi4+0x292>
 8000f00:	b15e      	cbz	r6, 8000f1a <__udivmoddi4+0x27e>
 8000f02:	ebb3 020e 	subs.w	r2, r3, lr
 8000f06:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f12:	431f      	orrs	r7, r3
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	4631      	mov	r1, r6
 8000f22:	4630      	mov	r0, r6
 8000f24:	e70c      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f26:	468c      	mov	ip, r1
 8000f28:	e6eb      	b.n	8000d02 <__udivmoddi4+0x66>
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	e6ff      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f2e:	4543      	cmp	r3, r8
 8000f30:	d2e6      	bcs.n	8000f00 <__udivmoddi4+0x264>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 050c 	sbc.w	r5, r9, ip
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e0      	b.n	8000f00 <__udivmoddi4+0x264>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d3      	b.n	8000eea <__udivmoddi4+0x24e>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e78c      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7b9      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e773      	b.n	8000e36 <__udivmoddi4+0x19a>
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e749      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f52:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	e713      	b.n	8000d82 <__udivmoddi4+0xe6>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e724      	b.n	8000daa <__udivmoddi4+0x10e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Mount_USB>:




void Mount_USB (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <Mount_USB+0x1c>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <Mount_USB+0x20>)
 8000f6e:	f010 fb9b 	bl	80116a8 <f_mount>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <Mount_USB+0x24>)
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000da70 	.word	0x2000da70
 8000f84:	2000dca0 	.word	0x2000dca0
 8000f88:	20009600 	.word	0x20009600

08000f8c <Unmount_USB>:
void Unmount_USB (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <Unmount_USB+0x1c>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f010 fb87 	bl	80116a8 <f_mount>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <Unmount_USB+0x20>)
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000da70 	.word	0x2000da70
 8000fac:	20009600 	.word	0x20009600

08000fb0 <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Scan_USB+0xd4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f011 f8d8 	bl	8012182 <f_opendir>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <Scan_USB+0xd8>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <Scan_USB+0xd8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d143      	bne.n	800106a <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4929      	ldr	r1, [pc, #164]	; (800108c <Scan_USB+0xdc>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f011 f97f 	bl	80122ec <f_readdir>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <Scan_USB+0xd8>)
 8000ff4:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <Scan_USB+0xd8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <Scan_USB+0xb0>
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <Scan_USB+0xdc>)
 8001000:	7a5b      	ldrb	r3, [r3, #9]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d02c      	beq.n	8001060 <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <Scan_USB+0xdc>)
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e7      	beq.n	8000fe2 <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <Scan_USB+0xe0>)
 8001014:	481f      	ldr	r0, [pc, #124]	; (8001094 <Scan_USB+0xe4>)
 8001016:	f7ff f8db 	bl	80001d0 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01a      	beq.n	8001056 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <Scan_USB+0xe0>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <Scan_USB+0xe8>)
 8001024:	f7ff f8d4 	bl	80001d0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <Scan_USB+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffbc 	bl	8000fb0 <Scan_USB>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Scan_USB+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <Scan_USB+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10a      	bne.n	800105e <Scan_USB+0xae>
                path[i] = 0;
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <Scan_USB+0xd4>)
 800104a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800104e:	2100      	movs	r1, #0
 8001050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001054:	e7c5      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001056:	bf00      	nop
 8001058:	e7c3      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800105a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800105c:	e7c1      	b.n	8000fe2 <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800105e:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f011 f914 	bl	8012292 <f_closedir>
    }
    free(*path);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <Scan_USB+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f014 ff10 	bl	8015e94 <free>
    return fresult;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Scan_USB+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000484 	.word	0x20000484
 8001088:	20009600 	.word	0x20009600
 800108c:	20009604 	.word	0x20009604
 8001090:	2000960d 	.word	0x2000960d
 8001094:	0801a5b0 	.word	0x0801a5b0
 8001098:	0801a5bc 	.word	0x0801a5bc

0800109c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010a6:	491c      	ldr	r1, [pc, #112]	; (8001118 <Write_File+0x7c>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f011 f96d 	bl	8012388 <f_stat>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <Write_File+0x80>)
 80010b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <Write_File+0x80>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Write_File+0x28>
	{
	    return fresult;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <Write_File+0x80>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	e025      	b.n	8001110 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80010c4:	2202      	movs	r2, #2
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <Write_File+0x84>)
 80010ca:	f010 fb55 	bl	8011778 <f_open>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <Write_File+0x80>)
 80010d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <Write_File+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Write_File+0x48>
	    {
	        return fresult;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Write_File+0x80>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff f87d 	bl	80001e4 <strlen>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Write_File+0x88>)
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <Write_File+0x84>)
 80010f2:	f010 fd56 	bl	8011ba2 <f_write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <Write_File+0x80>)
 80010fc:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <Write_File+0x84>)
 8001100:	f011 f80f 	bl	8012122 <f_close>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Write_File+0x80>)
 800110a:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <Write_File+0x80>)
 800110e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20009604 	.word	0x20009604
 800111c:	20009600 	.word	0x20009600
 8001120:	2000da74 	.word	0x2000da74
 8001124:	200095fc 	.word	0x200095fc

08001128 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <Create_File+0x60>)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f011 f928 	bl	8012388 <f_stat>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <Create_File+0x64>)
 800113e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <Create_File+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <Create_File+0x26>
	{
	    return fresult;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <Create_File+0x64>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	e018      	b.n	8001180 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800114e:	220b      	movs	r2, #11
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <Create_File+0x68>)
 8001154:	f010 fb10 	bl	8011778 <f_open>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <Create_File+0x64>)
 800115e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <Create_File+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Create_File+0x46>
		{

		    return fresult;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <Create_File+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	e008      	b.n	8001180 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <Create_File+0x68>)
 8001170:	f010 ffd7 	bl	8012122 <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <Create_File+0x64>)
 800117a:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <Create_File+0x64>)
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20009604 	.word	0x20009604
 800118c:	20009600 	.word	0x20009600
 8001190:	2000da74 	.word	0x2000da74

08001194 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <Check_USB_Details+0x80>)
 800119a:	491f      	ldr	r1, [pc, #124]	; (8001218 <Check_USB_Details+0x84>)
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <Check_USB_Details+0x88>)
 800119e:	f011 f946 	bl	801242e <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Check_USB_Details+0x80>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011aa:	3b02      	subs	r3, #2
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <Check_USB_Details+0x80>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f95d 	bl	8000478 <__aeabi_ui2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Check_USB_Details+0x8c>)
 80011c4:	f7ff f9d2 	bl	800056c <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fca4 	bl	8000b1c <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <Check_USB_Details+0x90>)
 80011d8:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0x80>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <Check_USB_Details+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fb03 f302 	mul.w	r3, r3, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f943 	bl	8000478 <__aeabi_ui2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Check_USB_Details+0x8c>)
 80011f8:	f7ff f9b8 	bl	800056c <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc8a 	bl	8000b1c <__aeabi_d2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <Check_USB_Details+0x94>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200095f4 	.word	0x200095f4
 8001218:	200095ec 	.word	0x200095ec
 800121c:	0801a5d8 	.word	0x0801a5d8
 8001220:	3fe00000 	.word	0x3fe00000
 8001224:	2000961c 	.word	0x2000961c
 8001228:	200095f8 	.word	0x200095f8

0800122c <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8001230:	2200      	movs	r2, #0
 8001232:	4905      	ldr	r1, [pc, #20]	; (8001248 <getTime+0x1c>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <getTime+0x20>)
 8001236:	f008 fe7f 	bl	8009f38 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 800123a:	2200      	movs	r2, #0
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <getTime+0x24>)
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <getTime+0x20>)
 8001240:	f008 ff6c 	bl	800a11c <HAL_RTC_GetDate>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20005458 	.word	0x20005458
 800124c:	2000c948 	.word	0x2000c948
 8001250:	20005464 	.word	0x20005464

08001254 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <setTimeDate+0x84>)
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <setTimeDate+0x84>)
 800127a:	7e3b      	ldrb	r3, [r7, #24]
 800127c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <setTimeDate+0x84>)
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <setTimeDate+0x84>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <setTimeDate+0x84>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001290:	2201      	movs	r2, #1
 8001292:	4911      	ldr	r1, [pc, #68]	; (80012d8 <setTimeDate+0x84>)
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <setTimeDate+0x88>)
 8001296:	f008 fd99 	bl	8009dcc <HAL_RTC_SetTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <setTimeDate+0x50>
 80012a0:	f003 f8fa 	bl	8004498 <Error_Handler>

	sDate.WeekDay = 0x01;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <setTimeDate+0x8c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <setTimeDate+0x8c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <setTimeDate+0x8c>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <setTimeDate+0x8c>)
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80012bc:	2201      	movs	r2, #1
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <setTimeDate+0x8c>)
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <setTimeDate+0x88>)
 80012c2:	f008 fe8b 	bl	8009fdc <HAL_RTC_SetDate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <setTimeDate+0x7c>
 80012cc:	f003 f8e4 	bl	8004498 <Error_Handler>
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20005458 	.word	0x20005458
 80012dc:	2000c948 	.word	0x2000c948
 80012e0:	20005464 	.word	0x20005464

080012e4 <fanOn>:

double system_fan_sp = 5.5;
double plant_fan_sp = 3.5;
double heat_cool_fan_sp = 2.5; // set default fan speed values
void fanOn()
{
 80012e4:	b598      	push	{r3, r4, r7, lr}
 80012e6:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 80012e8:	2100      	movs	r1, #0
 80012ea:	4847      	ldr	r0, [pc, #284]	; (8001408 <fanOn+0x124>)
 80012ec:	f009 faa2 	bl	800a834 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <fanOn+0x128>)
 80012f2:	f640 323f 	movw	r2, #2879	; 0xb3f
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
   if(heat_cool_fan_sp == 0)  TIM1->CCR1  = 0;
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <fanOn+0x12c>)
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f7ff fb99 	bl	8000a3c <__aeabi_dcmpeq>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <fanOn+0x34>
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <fanOn+0x128>)
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e012      	b.n	800133e <fanOn+0x5a>
   else TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <fanOn+0x128>)
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f8ab 	bl	8000478 <__aeabi_ui2d>
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <fanOn+0x12c>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa4a 	bl	80007c0 <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4c36      	ldr	r4, [pc, #216]	; (800140c <fanOn+0x128>)
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fbf1 	bl	8000b1c <__aeabi_d2uiz>
 800133a:	4603      	mov	r3, r0
 800133c:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <fanOn+0x128>)
 8001340:	f245 0214 	movw	r2, #20500	; 0x5014
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8001346:	2108      	movs	r1, #8
 8001348:	482f      	ldr	r0, [pc, #188]	; (8001408 <fanOn+0x124>)
 800134a:	f009 fa73 	bl	800a834 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <fanOn+0x128>)
 8001350:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
   if(system_fan_sp == 0) TIM1->CCR1  = 0;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <fanOn+0x130>)
 8001358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	f7ff fb6a 	bl	8000a3c <__aeabi_dcmpeq>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <fanOn+0x92>
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <fanOn+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
 8001374:	e012      	b.n	800139c <fanOn+0xb8>
   else TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <fanOn+0x128>)
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f87c 	bl	8000478 <__aeabi_ui2d>
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <fanOn+0x130>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fa1b 	bl	80007c0 <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4c1f      	ldr	r4, [pc, #124]	; (800140c <fanOn+0x128>)
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fbc2 	bl	8000b1c <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <fanOn+0x128>)
 800139e:	f245 0214 	movw	r2, #20500	; 0x5014
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 80013a4:	2100      	movs	r1, #0
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <fanOn+0x134>)
 80013a8:	f009 fa44 	bl	800a834 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <fanOn+0x138>)
 80013ae:	f640 323f 	movw	r2, #2879	; 0xb3f
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
   if(plant_fan_sp == 0) TIM10->ARR = 0;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <fanOn+0x13c>)
 80013b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f7ff fb3b 	bl	8000a3c <__aeabi_dcmpeq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <fanOn+0xf0>
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <fanOn+0x138>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d2:	e012      	b.n	80013fa <fanOn+0x116>
   else TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <fanOn+0x138>)
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f84d 	bl	8000478 <__aeabi_ui2d>
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <fanOn+0x13c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f9ec 	bl	80007c0 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <fanOn+0x138>)
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fb93 	bl	8000b1c <__aeabi_d2uiz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <fanOn+0x138>)
 80013fc:	f245 0214 	movw	r2, #20500	; 0x5014
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001402:	bf00      	nop
 8001404:	bd98      	pop	{r3, r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	2000c97c 	.word	0x2000c97c
 800140c:	40010000 	.word	0x40010000
 8001410:	20000010 	.word	0x20000010
 8001414:	20000000 	.word	0x20000000
 8001418:	200097e4 	.word	0x200097e4
 800141c:	40014400 	.word	0x40014400
 8001420:	20000008 	.word	0x20000008

08001424 <setFanSpeed>:
   TIM10->CCR1 = 0;								// sets the fan speed
   TIM10->CNT = 20500;

}
void setFanSpeed(float sys_fan,float plant_fan,float heat_cool_fan)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	system_fan_sp = sys_fan;
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff f843 	bl	80004bc <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <setFanSpeed+0x48>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
	plant_fan_sp = plant_fan;
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f83b 	bl	80004bc <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4909      	ldr	r1, [pc, #36]	; (8001470 <setFanSpeed+0x4c>)
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
	heat_cool_fan_sp = heat_cool_fan;
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f833 	bl	80004bc <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4906      	ldr	r1, [pc, #24]	; (8001474 <setFanSpeed+0x50>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	fanOn();
 8001460:	f7ff ff40 	bl	80012e4 <fanOn>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000010 	.word	0x20000010

08001478 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <vApplicationGetIdleTaskMemory+0x30>)
 800148e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000704 	.word	0x20000704
 80014a8:	200007b8 	.word	0x200007b8

080014ac <heatOn>:
#include "stm32f2xx_hal.h"
#include "main.h"
#include "sensors.h"
#include "heater_driver.h"
void heatOn()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_RESET);			// set to heat
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <heatOn+0x28>)
 80014b8:	f006 f923 	bl	8007702 <HAL_GPIO_WritePin>
	osDelay(200);
 80014bc:	20c8      	movs	r0, #200	; 0xc8
 80014be:	f011 fad6 	bl	8012a6e <osDelay>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// enable the heater
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <heatOn+0x28>)
 80014ca:	f006 f91a 	bl	8007702 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <heatCoolOff>:
void heatCoolOff()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// disable the heater
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <heatCoolOff+0x20>)
 80014e4:	f006 f90d 	bl	8007702 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);			// turn off active relays so not to waste power... This also sets the heater/cooler to the cool mode however, since the heater power-supply is disabled no cooling will take place
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <heatCoolOff+0x20>)
 80014f0:	f006 f907 	bl	8007702 <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <coolOn>:
void coolOn()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);		// set to cool
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <coolOn+0x28>)
 8001508:	f006 f8fb 	bl	8007702 <HAL_GPIO_WritePin>
	osDelay(200);
 800150c:	20c8      	movs	r0, #200	; 0xc8
 800150e:	f011 faae 	bl	8012a6e <osDelay>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// enable the cooler
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <coolOn+0x28>)
 800151a:	f006 f8f2 	bl	8007702 <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <floatToString>:
		setting_nutrient = 'n', heat_on = 'n', cool_on = 'n', setting_water_temp = 'n', run_once = 'n', error = 'n', pH_up = 'n', pH_down = 'n', nutrient_up = 'n', write_header = 'n', temp_up = 'n', temp_down = 0;

long int befdec, aftdec;

void floatToString(double FP_NUM)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	e9c7 0100 	strd	r0, r1, [r7]
	fpnumber = FP_NUM;					// Fractional part is truncated
 8001532:	4990      	ldr	r1, [pc, #576]	; (8001774 <floatToString+0x24c>)
 8001534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	befdec = fpnumber;                  // 12.163456 becomes 12
 800153c:	4b8d      	ldr	r3, [pc, #564]	; (8001774 <floatToString+0x24c>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fac1 	bl	8000acc <__aeabi_d2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <floatToString+0x250>)
 800154e:	6013      	str	r3, [r2, #0]
	aftdec = fpnumber * 100;            // 12.163456 becomes 1216
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <floatToString+0x24c>)
 8001552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <floatToString+0x254>)
 800155c:	f7ff f806 	bl	800056c <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fab0 	bl	8000acc <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	4a84      	ldr	r2, [pc, #528]	; (8001780 <floatToString+0x258>)
 8001570:	6013      	str	r3, [r2, #0]
	aftdec = aftdec - (befdec * 100);   // 1216 - 1200 = 16
 8001572:	4b81      	ldr	r3, [pc, #516]	; (8001778 <floatToString+0x250>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	4b80      	ldr	r3, [pc, #512]	; (8001780 <floatToString+0x258>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a7e      	ldr	r2, [pc, #504]	; (8001780 <floatToString+0x258>)
 8001586:	6013      	str	r3, [r2, #0]
	if (fpnumber < 1)
 8001588:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <floatToString+0x24c>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <floatToString+0x25c>)
 8001594:	f7ff fa5c 	bl	8000a50 <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d031      	beq.n	8001602 <floatToString+0xda>
	{
		convertedString[0] = '0';
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <floatToString+0x260>)
 80015a0:	2230      	movs	r2, #48	; 0x30
 80015a2:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <floatToString+0x260>)
 80015a6:	222e      	movs	r2, #46	; 0x2e
 80015a8:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 80015aa:	4b75      	ldr	r3, [pc, #468]	; (8001780 <floatToString+0x258>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a77      	ldr	r2, [pc, #476]	; (800178c <floatToString+0x264>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1092      	asrs	r2, r2, #2
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3330      	adds	r3, #48	; 0x30
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b71      	ldr	r3, [pc, #452]	; (8001788 <floatToString+0x260>)
 80015c2:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 80015c4:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <floatToString+0x258>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <floatToString+0x264>)
 80015ca:	fb83 1302 	smull	r1, r3, r3, r2
 80015ce:	1099      	asrs	r1, r3, #2
 80015d0:	17d3      	asrs	r3, r2, #31
 80015d2:	1ac9      	subs	r1, r1, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad1      	subs	r1, r2, r3
 80015de:	b2cb      	uxtb	r3, r1
 80015e0:	3330      	adds	r3, #48	; 0x30
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <floatToString+0x260>)
 80015e6:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <floatToString+0x260>)
 80015ea:	2220      	movs	r2, #32
 80015ec:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 80015ee:	4b66      	ldr	r3, [pc, #408]	; (8001788 <floatToString+0x260>)
 80015f0:	2220      	movs	r2, #32
 80015f2:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <floatToString+0x260>)
 80015f6:	2220      	movs	r2, #32
 80015f8:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <floatToString+0x260>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	71da      	strb	r2, [r3, #7]
		convertedString[4] = (befdec/1)%10 + 48;
		convertedString[5] = '.';
		convertedString[6] = (aftdec/10) + 48;
		convertedString[7] = '\0';
	}
}
 8001600:	e25b      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 1) && (fpnumber < 10))
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <floatToString+0x24c>)
 8001604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <floatToString+0x25c>)
 800160e:	f7ff fa33 	bl	8000a78 <__aeabi_dcmpge>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d04b      	beq.n	80016b0 <floatToString+0x188>
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <floatToString+0x24c>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <floatToString+0x268>)
 8001624:	f7ff fa14 	bl	8000a50 <__aeabi_dcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d040      	beq.n	80016b0 <floatToString+0x188>
		convertedString[0] = (befdec/1)%10 + 48;
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <floatToString+0x250>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <floatToString+0x264>)
 8001634:	fb83 1302 	smull	r1, r3, r3, r2
 8001638:	1099      	asrs	r1, r3, #2
 800163a:	17d3      	asrs	r3, r2, #31
 800163c:	1ac9      	subs	r1, r1, r3
 800163e:	460b      	mov	r3, r1
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	1ad1      	subs	r1, r2, r3
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <floatToString+0x260>)
 8001650:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <floatToString+0x260>)
 8001654:	222e      	movs	r2, #46	; 0x2e
 8001656:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <floatToString+0x258>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <floatToString+0x264>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1092      	asrs	r2, r2, #2
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3330      	adds	r3, #48	; 0x30
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b46      	ldr	r3, [pc, #280]	; (8001788 <floatToString+0x260>)
 8001670:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <floatToString+0x258>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <floatToString+0x264>)
 8001678:	fb83 1302 	smull	r1, r3, r3, r2
 800167c:	1099      	asrs	r1, r3, #2
 800167e:	17d3      	asrs	r3, r2, #31
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	460b      	mov	r3, r1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1ad1      	subs	r1, r2, r3
 800168c:	b2cb      	uxtb	r3, r1
 800168e:	3330      	adds	r3, #48	; 0x30
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <floatToString+0x260>)
 8001694:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <floatToString+0x260>)
 8001698:	2220      	movs	r2, #32
 800169a:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <floatToString+0x260>)
 800169e:	2220      	movs	r2, #32
 80016a0:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <floatToString+0x260>)
 80016a4:	2220      	movs	r2, #32
 80016a6:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <floatToString+0x260>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	71da      	strb	r2, [r3, #7]
 80016ae:	e204      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10) && (fpnumber < 100))
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <floatToString+0x24c>)
 80016b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <floatToString+0x268>)
 80016bc:	f7ff f9dc 	bl	8000a78 <__aeabi_dcmpge>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d066      	beq.n	8001794 <floatToString+0x26c>
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <floatToString+0x24c>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b2a      	ldr	r3, [pc, #168]	; (800177c <floatToString+0x254>)
 80016d2:	f7ff f9bd 	bl	8000a50 <__aeabi_dcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <floatToString+0x26c>
		convertedString[0] = (befdec/10) + 48;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <floatToString+0x250>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2a      	ldr	r2, [pc, #168]	; (800178c <floatToString+0x264>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1092      	asrs	r2, r2, #2
 80016e8:	17db      	asrs	r3, r3, #31
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3330      	adds	r3, #48	; 0x30
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <floatToString+0x260>)
 80016f4:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1)%10 + 48;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <floatToString+0x250>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <floatToString+0x264>)
 80016fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001700:	1099      	asrs	r1, r3, #2
 8001702:	17d3      	asrs	r3, r2, #31
 8001704:	1ac9      	subs	r1, r1, r3
 8001706:	460b      	mov	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	1ad1      	subs	r1, r2, r3
 8001710:	b2cb      	uxtb	r3, r1
 8001712:	3330      	adds	r3, #48	; 0x30
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <floatToString+0x260>)
 8001718:	705a      	strb	r2, [r3, #1]
		convertedString[2] = '.';
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <floatToString+0x260>)
 800171c:	222e      	movs	r2, #46	; 0x2e
 800171e:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/10) + 48;
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <floatToString+0x258>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <floatToString+0x264>)
 8001726:	fb82 1203 	smull	r1, r2, r2, r3
 800172a:	1092      	asrs	r2, r2, #2
 800172c:	17db      	asrs	r3, r3, #31
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <floatToString+0x260>)
 8001738:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/1)%10 + 48;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <floatToString+0x258>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <floatToString+0x264>)
 8001740:	fb83 1302 	smull	r1, r3, r3, r2
 8001744:	1099      	asrs	r1, r3, #2
 8001746:	17d3      	asrs	r3, r2, #31
 8001748:	1ac9      	subs	r1, r1, r3
 800174a:	460b      	mov	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	b2cb      	uxtb	r3, r1
 8001756:	3330      	adds	r3, #48	; 0x30
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <floatToString+0x260>)
 800175c:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <floatToString+0x260>)
 8001760:	2220      	movs	r2, #32
 8001762:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <floatToString+0x260>)
 8001766:	2220      	movs	r2, #32
 8001768:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <floatToString+0x260>)
 800176c:	2200      	movs	r2, #0
 800176e:	71da      	strb	r2, [r3, #7]
 8001770:	e1a3      	b.n	8001aba <floatToString+0x592>
 8001772:	bf00      	nop
 8001774:	20009628 	.word	0x20009628
 8001778:	20009620 	.word	0x20009620
 800177c:	40590000 	.word	0x40590000
 8001780:	20009624 	.word	0x20009624
 8001784:	3ff00000 	.word	0x3ff00000
 8001788:	200040a8 	.word	0x200040a8
 800178c:	66666667 	.word	0x66666667
 8001790:	40240000 	.word	0x40240000
	else if ((fpnumber >= 100) && (fpnumber < 1000))
 8001794:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <floatToString+0x478>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <floatToString+0x47c>)
 80017a0:	f7ff f96a 	bl	8000a78 <__aeabi_dcmpge>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d05b      	beq.n	8001862 <floatToString+0x33a>
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <floatToString+0x478>)
 80017ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <floatToString+0x480>)
 80017b6:	f7ff f94b 	bl	8000a50 <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d050      	beq.n	8001862 <floatToString+0x33a>
		convertedString[0] = (befdec/100) + 48;
 80017c0:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <floatToString+0x484>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <floatToString+0x488>)
 80017c6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ca:	1152      	asrs	r2, r2, #5
 80017cc:	17db      	asrs	r3, r3, #31
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3330      	adds	r3, #48	; 0x30
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <floatToString+0x48c>)
 80017d8:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/10)%10 + 48;
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <floatToString+0x484>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a76      	ldr	r2, [pc, #472]	; (80019b8 <floatToString+0x490>)
 80017e0:	fb82 1203 	smull	r1, r2, r2, r3
 80017e4:	1092      	asrs	r2, r2, #2
 80017e6:	17db      	asrs	r3, r3, #31
 80017e8:	1ad2      	subs	r2, r2, r3
 80017ea:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <floatToString+0x490>)
 80017ec:	fb83 1302 	smull	r1, r3, r3, r2
 80017f0:	1099      	asrs	r1, r3, #2
 80017f2:	17d3      	asrs	r3, r2, #31
 80017f4:	1ac9      	subs	r1, r1, r3
 80017f6:	460b      	mov	r3, r1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1ad1      	subs	r1, r2, r3
 8001800:	b2cb      	uxtb	r3, r1
 8001802:	3330      	adds	r3, #48	; 0x30
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <floatToString+0x48c>)
 8001808:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/1)%10 + 48;
 800180a:	4b68      	ldr	r3, [pc, #416]	; (80019ac <floatToString+0x484>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <floatToString+0x490>)
 8001810:	fb83 1302 	smull	r1, r3, r3, r2
 8001814:	1099      	asrs	r1, r3, #2
 8001816:	17d3      	asrs	r3, r2, #31
 8001818:	1ac9      	subs	r1, r1, r3
 800181a:	460b      	mov	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	1ad1      	subs	r1, r2, r3
 8001824:	b2cb      	uxtb	r3, r1
 8001826:	3330      	adds	r3, #48	; 0x30
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <floatToString+0x48c>)
 800182c:	709a      	strb	r2, [r3, #2]
		convertedString[3] = '.';
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <floatToString+0x48c>)
 8001830:	222e      	movs	r2, #46	; 0x2e
 8001832:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/10) + 48;
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <floatToString+0x494>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	; (80019b8 <floatToString+0x490>)
 800183a:	fb82 1203 	smull	r1, r2, r2, r3
 800183e:	1092      	asrs	r2, r2, #2
 8001840:	17db      	asrs	r3, r3, #31
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <floatToString+0x48c>)
 800184c:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <floatToString+0x48c>)
 8001850:	2220      	movs	r2, #32
 8001852:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <floatToString+0x48c>)
 8001856:	2220      	movs	r2, #32
 8001858:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <floatToString+0x48c>)
 800185c:	2200      	movs	r2, #0
 800185e:	71da      	strb	r2, [r3, #7]
 8001860:	e12b      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 1000) && (fpnumber < 10000))
 8001862:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <floatToString+0x478>)
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <floatToString+0x480>)
 800186e:	f7ff f903 	bl	8000a78 <__aeabi_dcmpge>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d070      	beq.n	800195a <floatToString+0x432>
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <floatToString+0x478>)
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	a344      	add	r3, pc, #272	; (adr r3, 8001990 <floatToString+0x468>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f8e4 	bl	8000a50 <__aeabi_dcmplt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d065      	beq.n	800195a <floatToString+0x432>
		convertedString[0] = (befdec/1000) + 48;
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <floatToString+0x484>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <floatToString+0x498>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1192      	asrs	r2, r2, #6
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3330      	adds	r3, #48	; 0x30
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <floatToString+0x48c>)
 80018a6:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/100)%10 + 48;
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <floatToString+0x484>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <floatToString+0x488>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1152      	asrs	r2, r2, #5
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad2      	subs	r2, r2, r3
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <floatToString+0x490>)
 80018ba:	fb83 1302 	smull	r1, r3, r3, r2
 80018be:	1099      	asrs	r1, r3, #2
 80018c0:	17d3      	asrs	r3, r2, #31
 80018c2:	1ac9      	subs	r1, r1, r3
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	1ad1      	subs	r1, r2, r3
 80018ce:	b2cb      	uxtb	r3, r1
 80018d0:	3330      	adds	r3, #48	; 0x30
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <floatToString+0x48c>)
 80018d6:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/10)%10 + 48;
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <floatToString+0x484>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <floatToString+0x490>)
 80018de:	fb82 1203 	smull	r1, r2, r2, r3
 80018e2:	1092      	asrs	r2, r2, #2
 80018e4:	17db      	asrs	r3, r3, #31
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <floatToString+0x490>)
 80018ea:	fb83 1302 	smull	r1, r3, r3, r2
 80018ee:	1099      	asrs	r1, r3, #2
 80018f0:	17d3      	asrs	r3, r2, #31
 80018f2:	1ac9      	subs	r1, r1, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	1ad1      	subs	r1, r2, r3
 80018fe:	b2cb      	uxtb	r3, r1
 8001900:	3330      	adds	r3, #48	; 0x30
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <floatToString+0x48c>)
 8001906:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/1)%10 + 48;
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <floatToString+0x484>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <floatToString+0x490>)
 800190e:	fb83 1302 	smull	r1, r3, r3, r2
 8001912:	1099      	asrs	r1, r3, #2
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	1ad1      	subs	r1, r2, r3
 8001922:	b2cb      	uxtb	r3, r1
 8001924:	3330      	adds	r3, #48	; 0x30
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <floatToString+0x48c>)
 800192a:	70da      	strb	r2, [r3, #3]
		convertedString[4] = '.';
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <floatToString+0x48c>)
 800192e:	222e      	movs	r2, #46	; 0x2e
 8001930:	711a      	strb	r2, [r3, #4]
		convertedString[5] = (aftdec/10) + 48;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <floatToString+0x494>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <floatToString+0x490>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1092      	asrs	r2, r2, #2
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <floatToString+0x48c>)
 800194a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <floatToString+0x48c>)
 800194e:	2220      	movs	r2, #32
 8001950:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <floatToString+0x48c>)
 8001954:	2200      	movs	r2, #0
 8001956:	71da      	strb	r2, [r3, #7]
 8001958:	e0af      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <floatToString+0x478>)
 800195c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001960:	a30b      	add	r3, pc, #44	; (adr r3, 8001990 <floatToString+0x468>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7ff f887 	bl	8000a78 <__aeabi_dcmpge>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <floatToString+0x44a>
}
 8001970:	e0a3      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <floatToString+0x478>)
 8001974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001978:	a307      	add	r3, pc, #28	; (adr r3, 8001998 <floatToString+0x470>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7ff f867 	bl	8000a50 <__aeabi_dcmplt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11d      	bne.n	80019c4 <floatToString+0x49c>
}
 8001988:	e097      	b.n	8001aba <floatToString+0x592>
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w
 8001990:	00000000 	.word	0x00000000
 8001994:	40c38800 	.word	0x40c38800
 8001998:	00000000 	.word	0x00000000
 800199c:	40f86a00 	.word	0x40f86a00
 80019a0:	20009628 	.word	0x20009628
 80019a4:	40590000 	.word	0x40590000
 80019a8:	408f4000 	.word	0x408f4000
 80019ac:	20009620 	.word	0x20009620
 80019b0:	51eb851f 	.word	0x51eb851f
 80019b4:	200040a8 	.word	0x200040a8
 80019b8:	66666667 	.word	0x66666667
 80019bc:	20009624 	.word	0x20009624
 80019c0:	10624dd3 	.word	0x10624dd3
		convertedString[0] = (befdec/10000) + 48;
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <floatToString+0x59c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <floatToString+0x5a0>)
 80019ca:	fb82 1203 	smull	r1, r2, r2, r3
 80019ce:	1312      	asrs	r2, r2, #12
 80019d0:	17db      	asrs	r3, r3, #31
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <floatToString+0x5a4>)
 80019dc:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1000)%10 + 48;
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <floatToString+0x59c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <floatToString+0x5a8>)
 80019e4:	fb82 1203 	smull	r1, r2, r2, r3
 80019e8:	1192      	asrs	r2, r2, #6
 80019ea:	17db      	asrs	r3, r3, #31
 80019ec:	1ad2      	subs	r2, r2, r3
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <floatToString+0x5ac>)
 80019f0:	fb83 1302 	smull	r1, r3, r3, r2
 80019f4:	1099      	asrs	r1, r3, #2
 80019f6:	17d3      	asrs	r3, r2, #31
 80019f8:	1ac9      	subs	r1, r1, r3
 80019fa:	460b      	mov	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	1ad1      	subs	r1, r2, r3
 8001a04:	b2cb      	uxtb	r3, r1
 8001a06:	3330      	adds	r3, #48	; 0x30
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <floatToString+0x5a4>)
 8001a0c:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/100)%10 + 48;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <floatToString+0x59c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <floatToString+0x5b0>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1152      	asrs	r2, r2, #5
 8001a1a:	17db      	asrs	r3, r3, #31
 8001a1c:	1ad2      	subs	r2, r2, r3
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <floatToString+0x5ac>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1099      	asrs	r1, r3, #2
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad1      	subs	r1, r2, r3
 8001a34:	b2cb      	uxtb	r3, r1
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <floatToString+0x5a4>)
 8001a3c:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/10)%10 + 48;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <floatToString+0x59c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <floatToString+0x5ac>)
 8001a44:	fb82 1203 	smull	r1, r2, r2, r3
 8001a48:	1092      	asrs	r2, r2, #2
 8001a4a:	17db      	asrs	r3, r3, #31
 8001a4c:	1ad2      	subs	r2, r2, r3
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <floatToString+0x5ac>)
 8001a50:	fb83 1302 	smull	r1, r3, r3, r2
 8001a54:	1099      	asrs	r1, r3, #2
 8001a56:	17d3      	asrs	r3, r2, #31
 8001a58:	1ac9      	subs	r1, r1, r3
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	1ad1      	subs	r1, r2, r3
 8001a64:	b2cb      	uxtb	r3, r1
 8001a66:	3330      	adds	r3, #48	; 0x30
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <floatToString+0x5a4>)
 8001a6c:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (befdec/1)%10 + 48;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <floatToString+0x59c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <floatToString+0x5ac>)
 8001a74:	fb83 1302 	smull	r1, r3, r3, r2
 8001a78:	1099      	asrs	r1, r3, #2
 8001a7a:	17d3      	asrs	r3, r2, #31
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	1ad1      	subs	r1, r2, r3
 8001a88:	b2cb      	uxtb	r3, r1
 8001a8a:	3330      	adds	r3, #48	; 0x30
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <floatToString+0x5a4>)
 8001a90:	711a      	strb	r2, [r3, #4]
		convertedString[5] = '.';
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <floatToString+0x5a4>)
 8001a94:	222e      	movs	r2, #46	; 0x2e
 8001a96:	715a      	strb	r2, [r3, #5]
		convertedString[6] = (aftdec/10) + 48;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <floatToString+0x5b4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <floatToString+0x5ac>)
 8001a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa2:	1092      	asrs	r2, r2, #2
 8001aa4:	17db      	asrs	r3, r3, #31
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <floatToString+0x5a4>)
 8001ab0:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <floatToString+0x5a4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	71da      	strb	r2, [r3, #7]
}
 8001ab8:	e7ff      	b.n	8001aba <floatToString+0x592>
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20009620 	.word	0x20009620
 8001ac8:	68db8bad 	.word	0x68db8bad
 8001acc:	200040a8 	.word	0x200040a8
 8001ad0:	10624dd3 	.word	0x10624dd3
 8001ad4:	66666667 	.word	0x66666667
 8001ad8:	51eb851f 	.word	0x51eb851f
 8001adc:	20009624 	.word	0x20009624

08001ae0 <write_balance_data_file>:

void write_balance_data_file(char buffer_full)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]

	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++) buffer[file_index] = file_name[file_index];
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <write_balance_data_file+0x194>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e00c      	b.n	8001b0c <write_balance_data_file+0x2c>
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <write_balance_data_file+0x194>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <write_balance_data_file+0x194>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	495f      	ldr	r1, [pc, #380]	; (8001c78 <write_balance_data_file+0x198>)
 8001afc:	5c89      	ldrb	r1, [r1, r2]
 8001afe:	4a5f      	ldr	r2, [pc, #380]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b00:	54d1      	strb	r1, [r2, r3]
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <write_balance_data_file+0x194>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <write_balance_data_file+0x194>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <write_balance_data_file+0x194>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	dc05      	bgt.n	8001b20 <write_balance_data_file+0x40>
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <write_balance_data_file+0x194>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <write_balance_data_file+0x198>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e8      	bne.n	8001af2 <write_balance_data_file+0x12>

	floatToString((int)file_number);
 8001b20:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fcb7 	bl	8000498 <__aeabi_i2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff fcf9 	bl	8001528 <floatToString>

	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)buffer[file_index] = convertedString[i];
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e011      	b.n	8001b62 <write_balance_data_file+0x82>
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <write_balance_data_file+0x194>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4950      	ldr	r1, [pc, #320]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b48:	5c89      	ldrb	r1, [r1, r2]
 8001b4a:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b4c:	54d1      	strb	r1, [r2, r3]
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <write_balance_data_file+0x194>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a45      	ldr	r2, [pc, #276]	; (8001c74 <write_balance_data_file+0x194>)
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d80b      	bhi.n	8001b82 <write_balance_data_file+0xa2>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a46      	ldr	r2, [pc, #280]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <write_balance_data_file+0xa2>
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b80:	d1dd      	bne.n	8001b3e <write_balance_data_file+0x5e>

	if(buffer_full == 'y')
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b79      	cmp	r3, #121	; 0x79
 8001b86:	d109      	bne.n	8001b9c <write_balance_data_file+0xbc>
	{
		buffer[file_index] = 'B';
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <write_balance_data_file+0x194>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b8e:	2142      	movs	r1, #66	; 0x42
 8001b90:	54d1      	strb	r1, [r2, r3]
		file_index++;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <write_balance_data_file+0x194>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <write_balance_data_file+0x194>)
 8001b9a:	6013      	str	r3, [r2, #0]
	}

	for(i=0;i<4 && extention[i]!='\0';i++,file_index++) buffer[file_index]=extention[i];
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e011      	b.n	8001bc8 <write_balance_data_file+0xe8>
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <write_balance_data_file+0x194>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <write_balance_data_file+0x1ac>)
 8001bae:	5c89      	ldrb	r1, [r1, r2]
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <write_balance_data_file+0x19c>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <write_balance_data_file+0x194>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <write_balance_data_file+0x194>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	dc05      	bgt.n	8001bdc <write_balance_data_file+0xfc>
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <write_balance_data_file+0x1ac>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e3      	bne.n	8001ba4 <write_balance_data_file+0xc4>

	Create_File(buffer);								  // create the file based on the created file name
 8001bdc:	4827      	ldr	r0, [pc, #156]	; (8001c7c <write_balance_data_file+0x19c>)
 8001bde:	f7ff faa3 	bl	8001128 <Create_File>
	Write_File(buffer,balance_data);	      // write the data to the file.
 8001be2:	492b      	ldr	r1, [pc, #172]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001be4:	4825      	ldr	r0, [pc, #148]	; (8001c7c <write_balance_data_file+0x19c>)
 8001be6:	f7ff fa59 	bl	800109c <Write_File>
	balance_index = 0;
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <write_balance_data_file+0x1b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	write_header  = 'n';
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <write_balance_data_file+0x1b8>)
 8001bf2:	226e      	movs	r2, #110	; 0x6e
 8001bf4:	701a      	strb	r2, [r3, #0]
	get_init_conditions = 0;
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <write_balance_data_file+0x1bc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	file_number++;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001c04:	6013      	str	r3, [r2, #0]

	for(i=0;i<10000 && balance_data[i]!='\0';i++)balance_data[i] = '\0';
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e009      	b.n	8001c22 <write_balance_data_file+0x142>
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001c14:	2100      	movs	r1, #0
 8001c16:	54d1      	strb	r1, [r2, r3]
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dc05      	bgt.n	8001c3a <write_balance_data_file+0x15a>
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e9      	bne.n	8001c0e <write_balance_data_file+0x12e>
	for(i=0;i<11 && buffer[i]!='\0';i++)buffer[i] = '\0';
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e009      	b.n	8001c56 <write_balance_data_file+0x176>
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <write_balance_data_file+0x19c>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	54d1      	strb	r1, [r2, r3]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	dc05      	bgt.n	8001c6a <write_balance_data_file+0x18a>
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <write_balance_data_file+0x19c>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1eb      	bne.n	8001c42 <write_balance_data_file+0x162>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004064 	.word	0x20004064
 8001c78:	20000090 	.word	0x20000090
 8001c7c:	2000408c 	.word	0x2000408c
 8001c80:	20004060 	.word	0x20004060
 8001c84:	20004054 	.word	0x20004054
 8001c88:	200040a8 	.word	0x200040a8
 8001c8c:	200000ac 	.word	0x200000ac
 8001c90:	200040b4 	.word	0x200040b4
 8001c94:	20004050 	.word	0x20004050
 8001c98:	20000208 	.word	0x20000208
 8001c9c:	200000b2 	.word	0x200000b2

08001ca0 <add_data_to_array>:

void add_data_to_array()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	if(write_header == 'n')
 8001ca4:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <add_data_to_array+0x1f4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8001caa:	d123      	bne.n	8001cf4 <add_data_to_array+0x54>
	{
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001cac:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e011      	b.n	8001cd8 <add_data_to_array+0x38>
		{
			balance_data[balance_index] = balance_header[i];
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <add_data_to_array+0x1fc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4978      	ldr	r1, [pc, #480]	; (8001ea0 <add_data_to_array+0x200>)
 8001cbe:	5c89      	ldrb	r1, [r1, r2]
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <add_data_to_array+0x204>)
 8001cc2:	54d1      	strb	r1, [r2, r3]
			balance_index++;
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <add_data_to_array+0x1fc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a74      	ldr	r2, [pc, #464]	; (8001e9c <add_data_to_array+0x1fc>)
 8001ccc:	6013      	str	r3, [r2, #0]
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a70      	ldr	r2, [pc, #448]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001ce0:	d205      	bcs.n	8001cee <add_data_to_array+0x4e>
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <add_data_to_array+0x1f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <add_data_to_array+0x200>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e2      	bne.n	8001cb4 <add_data_to_array+0x14>
		}
		write_header = 'y';
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <add_data_to_array+0x1f4>)
 8001cf0:	2279      	movs	r2, #121	; 0x79
 8001cf2:	701a      	strb	r2, [r3, #0]
	}
	// CSV file data format: pH, total_pH_up_ml, total_pH_down_ml, time_to_bal_pH, TDS, total_nutrient_ml, time_to_bal_nutrient, error, water_temp
	floatToString((double)pH);	// convert water temp to char array and write it to the data buffer
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <add_data_to_array+0x208>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7ff fc13 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e011      	b.n	8001d2e <add_data_to_array+0x8e>
	{
		balance_data[balance_index] = convertedString[i];
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4966      	ldr	r1, [pc, #408]	; (8001eac <add_data_to_array+0x20c>)
 8001d14:	5c89      	ldrb	r1, [r1, r2]
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <add_data_to_array+0x204>)
 8001d18:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d22:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d805      	bhi.n	8001d42 <add_data_to_array+0xa2>
 8001d36:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5c      	ldr	r2, [pc, #368]	; (8001eac <add_data_to_array+0x20c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e3      	bne.n	8001d0a <add_data_to_array+0x6a>
	}
	balance_data[balance_index] = ',';
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <add_data_to_array+0x204>)
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d54:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml);	// convert water temp to char array and write it to the data buffer
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <add_data_to_array+0x210>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff fbe2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e011      	b.n	8001d90 <add_data_to_array+0xf0>
	{
		balance_data[balance_index] = convertedString[i];
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <add_data_to_array+0x20c>)
 8001d76:	5c89      	ldrb	r1, [r1, r2]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <add_data_to_array+0x204>)
 8001d7a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d84:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d805      	bhi.n	8001da4 <add_data_to_array+0x104>
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a43      	ldr	r2, [pc, #268]	; (8001eac <add_data_to_array+0x20c>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e3      	bne.n	8001d6c <add_data_to_array+0xcc>
	}
	balance_data[balance_index] = ',';
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <add_data_to_array+0x1fc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <add_data_to_array+0x204>)
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <add_data_to_array+0x1fc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a39      	ldr	r2, [pc, #228]	; (8001e9c <add_data_to_array+0x1fc>)
 8001db6:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_up_dose);	// convert water temp to char array and write it to the data buffer
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <add_data_to_array+0x214>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7ff fbb1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e011      	b.n	8001df2 <add_data_to_array+0x152>
	{
		balance_data[balance_index] = convertedString[i];
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <add_data_to_array+0x1fc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4935      	ldr	r1, [pc, #212]	; (8001eac <add_data_to_array+0x20c>)
 8001dd8:	5c89      	ldrb	r1, [r1, r2]
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <add_data_to_array+0x204>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <add_data_to_array+0x1fc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <add_data_to_array+0x1fc>)
 8001de6:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <add_data_to_array+0x1f8>)
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <add_data_to_array+0x1f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d805      	bhi.n	8001e06 <add_data_to_array+0x166>
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <add_data_to_array+0x20c>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e3      	bne.n	8001dce <add_data_to_array+0x12e>
	}
	balance_data[balance_index] = ',';
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <add_data_to_array+0x204>)
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e18:	6013      	str	r3, [r2, #0]


	floatToString((double)total_pH_down_ml);	// convert water temp to char array and write it to the data buffer
 8001e1a:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <add_data_to_array+0x218>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fb80 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e011      	b.n	8001e54 <add_data_to_array+0x1b4>
	{
		balance_data[balance_index] = convertedString[i];
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	491c      	ldr	r1, [pc, #112]	; (8001eac <add_data_to_array+0x20c>)
 8001e3a:	5c89      	ldrb	r1, [r1, r2]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <add_data_to_array+0x204>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e48:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d805      	bhi.n	8001e68 <add_data_to_array+0x1c8>
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a12      	ldr	r2, [pc, #72]	; (8001eac <add_data_to_array+0x20c>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e3      	bne.n	8001e30 <add_data_to_array+0x190>
	}
	balance_data[balance_index] = ',';
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <add_data_to_array+0x204>)
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e7a:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_down_dose);	// convert water temp to char array and write it to the data buffer
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <add_data_to_array+0x21c>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7ff fb4f 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e028      	b.n	8001ee4 <add_data_to_array+0x244>
 8001e92:	bf00      	nop
 8001e94:	20000208 	.word	0x20000208
 8001e98:	20004054 	.word	0x20004054
 8001e9c:	20004050 	.word	0x20004050
 8001ea0:	200000f4 	.word	0x200000f4
 8001ea4:	200040b4 	.word	0x200040b4
 8001ea8:	20001808 	.word	0x20001808
 8001eac:	200040a8 	.word	0x200040a8
 8001eb0:	200017d8 	.word	0x200017d8
 8001eb4:	200017b8 	.word	0x200017b8
 8001eb8:	200017e0 	.word	0x200017e0
 8001ebc:	200017c0 	.word	0x200017c0
	{
		balance_data[balance_index] = convertedString[i];
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <add_data_to_array+0x41c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <add_data_to_array+0x420>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	497e      	ldr	r1, [pc, #504]	; (80020c4 <add_data_to_array+0x424>)
 8001eca:	5c89      	ldrb	r1, [r1, r2]
 8001ecc:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <add_data_to_array+0x428>)
 8001ece:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001ed0:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <add_data_to_array+0x420>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <add_data_to_array+0x420>)
 8001ed8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <add_data_to_array+0x41c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4a76      	ldr	r2, [pc, #472]	; (80020bc <add_data_to_array+0x41c>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <add_data_to_array+0x41c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d805      	bhi.n	8001ef8 <add_data_to_array+0x258>
 8001eec:	4b73      	ldr	r3, [pc, #460]	; (80020bc <add_data_to_array+0x41c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a74      	ldr	r2, [pc, #464]	; (80020c4 <add_data_to_array+0x424>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e3      	bne.n	8001ec0 <add_data_to_array+0x220>
	}
	balance_data[balance_index] = ',';
 8001ef8:	4b71      	ldr	r3, [pc, #452]	; (80020c0 <add_data_to_array+0x420>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <add_data_to_array+0x428>)
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f02:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <add_data_to_array+0x420>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a6d      	ldr	r2, [pc, #436]	; (80020c0 <add_data_to_array+0x420>)
 8001f0a:	6013      	str	r3, [r2, #0]


	floatToString(time_to_bal_pH);	// convert water temp to char array and write it to the data buffer
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <add_data_to_array+0x42c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fac1 	bl	8000498 <__aeabi_i2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff fb03 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <add_data_to_array+0x41c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e011      	b.n	8001f4e <add_data_to_array+0x2ae>
	{
		balance_data[balance_index] = convertedString[i];
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <add_data_to_array+0x41c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <add_data_to_array+0x420>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4964      	ldr	r1, [pc, #400]	; (80020c4 <add_data_to_array+0x424>)
 8001f34:	5c89      	ldrb	r1, [r1, r2]
 8001f36:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <add_data_to_array+0x428>)
 8001f38:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f3a:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <add_data_to_array+0x420>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a5f      	ldr	r2, [pc, #380]	; (80020c0 <add_data_to_array+0x420>)
 8001f42:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <add_data_to_array+0x41c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <add_data_to_array+0x41c>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b5b      	ldr	r3, [pc, #364]	; (80020bc <add_data_to_array+0x41c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d805      	bhi.n	8001f62 <add_data_to_array+0x2c2>
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <add_data_to_array+0x41c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <add_data_to_array+0x424>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e3      	bne.n	8001f2a <add_data_to_array+0x28a>
	}
	balance_data[balance_index] = ',';
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <add_data_to_array+0x420>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <add_data_to_array+0x428>)
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <add_data_to_array+0x420>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a53      	ldr	r2, [pc, #332]	; (80020c0 <add_data_to_array+0x420>)
 8001f74:	6013      	str	r3, [r2, #0]

	floatToString( (double)TDS);	// convert water temp to char array and write it to the data buffer
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <add_data_to_array+0x430>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fad2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <add_data_to_array+0x41c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e011      	b.n	8001fb0 <add_data_to_array+0x310>
	{
		balance_data[balance_index] = convertedString[i];
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <add_data_to_array+0x41c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <add_data_to_array+0x420>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	494b      	ldr	r1, [pc, #300]	; (80020c4 <add_data_to_array+0x424>)
 8001f96:	5c89      	ldrb	r1, [r1, r2]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <add_data_to_array+0x428>)
 8001f9a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <add_data_to_array+0x420>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <add_data_to_array+0x420>)
 8001fa4:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <add_data_to_array+0x41c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <add_data_to_array+0x41c>)
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <add_data_to_array+0x41c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d805      	bhi.n	8001fc4 <add_data_to_array+0x324>
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <add_data_to_array+0x41c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <add_data_to_array+0x424>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e3      	bne.n	8001f8c <add_data_to_array+0x2ec>
	}
	balance_data[balance_index] = ',';
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <add_data_to_array+0x420>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <add_data_to_array+0x428>)
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <add_data_to_array+0x420>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <add_data_to_array+0x420>)
 8001fd6:	6013      	str	r3, [r2, #0]

	floatToString((double)total_nutrient_ml);	// convert water temp to char array and write it to the data buffer
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <add_data_to_array+0x434>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff faa1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <add_data_to_array+0x41c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e011      	b.n	8002012 <add_data_to_array+0x372>
	{
		balance_data[balance_index] = convertedString[i];
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <add_data_to_array+0x41c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <add_data_to_array+0x420>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4933      	ldr	r1, [pc, #204]	; (80020c4 <add_data_to_array+0x424>)
 8001ff8:	5c89      	ldrb	r1, [r1, r2]
 8001ffa:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <add_data_to_array+0x428>)
 8001ffc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <add_data_to_array+0x420>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <add_data_to_array+0x420>)
 8002006:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <add_data_to_array+0x41c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <add_data_to_array+0x41c>)
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <add_data_to_array+0x41c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b09      	cmp	r3, #9
 8002018:	d805      	bhi.n	8002026 <add_data_to_array+0x386>
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <add_data_to_array+0x41c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <add_data_to_array+0x424>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e3      	bne.n	8001fee <add_data_to_array+0x34e>
	}
	balance_data[balance_index] = ',';
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <add_data_to_array+0x420>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <add_data_to_array+0x428>)
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <add_data_to_array+0x420>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <add_data_to_array+0x420>)
 8002038:	6013      	str	r3, [r2, #0]

	floatToString( (double)nutrient_dose);	// convert water temp to char array and write it to the data buffer
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <add_data_to_array+0x438>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fa70 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <add_data_to_array+0x41c>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e011      	b.n	8002074 <add_data_to_array+0x3d4>
	{
		balance_data[balance_index] = convertedString[i];
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <add_data_to_array+0x41c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <add_data_to_array+0x420>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <add_data_to_array+0x424>)
 800205a:	5c89      	ldrb	r1, [r1, r2]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <add_data_to_array+0x428>)
 800205e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <add_data_to_array+0x420>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <add_data_to_array+0x420>)
 8002068:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <add_data_to_array+0x41c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <add_data_to_array+0x41c>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <add_data_to_array+0x41c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d805      	bhi.n	8002088 <add_data_to_array+0x3e8>
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <add_data_to_array+0x41c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <add_data_to_array+0x424>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e3      	bne.n	8002050 <add_data_to_array+0x3b0>
	}
	balance_data[balance_index] = ',';
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <add_data_to_array+0x420>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <add_data_to_array+0x428>)
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <add_data_to_array+0x420>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <add_data_to_array+0x420>)
 800209a:	6013      	str	r3, [r2, #0]

	floatToString(time_to_bal_nutrient);	// convert water temp to char array and write it to the data buffer
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <add_data_to_array+0x43c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9f9 	bl	8000498 <__aeabi_i2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fa3b 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020b2:	4b02      	ldr	r3, [pc, #8]	; (80020bc <add_data_to_array+0x41c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e024      	b.n	8002104 <add_data_to_array+0x464>
 80020ba:	bf00      	nop
 80020bc:	20004054 	.word	0x20004054
 80020c0:	20004050 	.word	0x20004050
 80020c4:	200040a8 	.word	0x200040a8
 80020c8:	200040b4 	.word	0x200040b4
 80020cc:	2000405c 	.word	0x2000405c
 80020d0:	20001800 	.word	0x20001800
 80020d4:	200017d0 	.word	0x200017d0
 80020d8:	200017c8 	.word	0x200017c8
 80020dc:	20004058 	.word	0x20004058
	{
		balance_data[balance_index] = convertedString[i];
 80020e0:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <add_data_to_array+0x658>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <add_data_to_array+0x65c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4985      	ldr	r1, [pc, #532]	; (8002300 <add_data_to_array+0x660>)
 80020ea:	5c89      	ldrb	r1, [r1, r2]
 80020ec:	4a85      	ldr	r2, [pc, #532]	; (8002304 <add_data_to_array+0x664>)
 80020ee:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <add_data_to_array+0x65c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a81      	ldr	r2, [pc, #516]	; (80022fc <add_data_to_array+0x65c>)
 80020f8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <add_data_to_array+0x658>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a7d      	ldr	r2, [pc, #500]	; (80022f8 <add_data_to_array+0x658>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b7c      	ldr	r3, [pc, #496]	; (80022f8 <add_data_to_array+0x658>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b09      	cmp	r3, #9
 800210a:	d805      	bhi.n	8002118 <add_data_to_array+0x478>
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <add_data_to_array+0x658>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <add_data_to_array+0x660>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e3      	bne.n	80020e0 <add_data_to_array+0x440>
	}
	balance_data[balance_index] = ',';
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <add_data_to_array+0x65c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a79      	ldr	r2, [pc, #484]	; (8002304 <add_data_to_array+0x664>)
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <add_data_to_array+0x65c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a74      	ldr	r2, [pc, #464]	; (80022fc <add_data_to_array+0x65c>)
 800212a:	6013      	str	r3, [r2, #0]

	balance_data[balance_index] = error;
 800212c:	4b73      	ldr	r3, [pc, #460]	; (80022fc <add_data_to_array+0x65c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a75      	ldr	r2, [pc, #468]	; (8002308 <add_data_to_array+0x668>)
 8002132:	7811      	ldrb	r1, [r2, #0]
 8002134:	4a73      	ldr	r2, [pc, #460]	; (8002304 <add_data_to_array+0x664>)
 8002136:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <add_data_to_array+0x65c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <add_data_to_array+0x65c>)
 8002140:	6013      	str	r3, [r2, #0]
	balance_data[balance_index] = ',';
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <add_data_to_array+0x65c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <add_data_to_array+0x664>)
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <add_data_to_array+0x65c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <add_data_to_array+0x65c>)
 8002154:	6013      	str	r3, [r2, #0]

	floatToString((double)water_temp);	// convert water temp to char array and write it to the data buffer
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <add_data_to_array+0x66c>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff f9e2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <add_data_to_array+0x658>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e011      	b.n	8002190 <add_data_to_array+0x4f0>
	{
		balance_data[balance_index] = convertedString[i];
 800216c:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <add_data_to_array+0x658>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <add_data_to_array+0x65c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4962      	ldr	r1, [pc, #392]	; (8002300 <add_data_to_array+0x660>)
 8002176:	5c89      	ldrb	r1, [r1, r2]
 8002178:	4a62      	ldr	r2, [pc, #392]	; (8002304 <add_data_to_array+0x664>)
 800217a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <add_data_to_array+0x65c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a5e      	ldr	r2, [pc, #376]	; (80022fc <add_data_to_array+0x65c>)
 8002184:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <add_data_to_array+0x658>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <add_data_to_array+0x658>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <add_data_to_array+0x658>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b09      	cmp	r3, #9
 8002196:	d805      	bhi.n	80021a4 <add_data_to_array+0x504>
 8002198:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <add_data_to_array+0x658>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <add_data_to_array+0x660>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e3      	bne.n	800216c <add_data_to_array+0x4cc>
	}
	balance_data[balance_index] = ',';
 80021a4:	4b55      	ldr	r3, [pc, #340]	; (80022fc <add_data_to_array+0x65c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <add_data_to_array+0x664>)
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <add_data_to_array+0x65c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <add_data_to_array+0x65c>)
 80021b6:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 80021b8:	4b55      	ldr	r3, [pc, #340]	; (8002310 <add_data_to_array+0x670>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7ff f9b1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <add_data_to_array+0x658>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e011      	b.n	80021f2 <add_data_to_array+0x552>
	{
		balance_data[balance_index] = convertedString[i];
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <add_data_to_array+0x658>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <add_data_to_array+0x65c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	494a      	ldr	r1, [pc, #296]	; (8002300 <add_data_to_array+0x660>)
 80021d8:	5c89      	ldrb	r1, [r1, r2]
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <add_data_to_array+0x664>)
 80021dc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <add_data_to_array+0x65c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <add_data_to_array+0x65c>)
 80021e6:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <add_data_to_array+0x658>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <add_data_to_array+0x658>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <add_data_to_array+0x658>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d805      	bhi.n	8002206 <add_data_to_array+0x566>
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <add_data_to_array+0x658>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a40      	ldr	r2, [pc, #256]	; (8002300 <add_data_to_array+0x660>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e3      	bne.n	80021ce <add_data_to_array+0x52e>
	}
	balance_data[balance_index] = ',';
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <add_data_to_array+0x65c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <add_data_to_array+0x664>)
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002210:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <add_data_to_array+0x65c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a39      	ldr	r2, [pc, #228]	; (80022fc <add_data_to_array+0x65c>)
 8002218:	6013      	str	r3, [r2, #0]
	floatToString((double)total_pH_down_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <add_data_to_array+0x674>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff f980 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <add_data_to_array+0x658>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e011      	b.n	8002254 <add_data_to_array+0x5b4>
	{
		balance_data[balance_index] = convertedString[i];
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <add_data_to_array+0x658>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <add_data_to_array+0x65c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4931      	ldr	r1, [pc, #196]	; (8002300 <add_data_to_array+0x660>)
 800223a:	5c89      	ldrb	r1, [r1, r2]
 800223c:	4a31      	ldr	r2, [pc, #196]	; (8002304 <add_data_to_array+0x664>)
 800223e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <add_data_to_array+0x65c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <add_data_to_array+0x65c>)
 8002248:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <add_data_to_array+0x658>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <add_data_to_array+0x658>)
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <add_data_to_array+0x658>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d805      	bhi.n	8002268 <add_data_to_array+0x5c8>
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <add_data_to_array+0x658>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <add_data_to_array+0x660>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e3      	bne.n	8002230 <add_data_to_array+0x590>
	}
	balance_data[balance_index] = ',';
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <add_data_to_array+0x65c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <add_data_to_array+0x664>)
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <add_data_to_array+0x65c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <add_data_to_array+0x65c>)
 800227a:	6013      	str	r3, [r2, #0]
	floatToString((double)total_nutrient_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <add_data_to_array+0x678>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7ff f94f 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <add_data_to_array+0x658>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e011      	b.n	80022b6 <add_data_to_array+0x616>
	{
		balance_data[balance_index] = convertedString[i];
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <add_data_to_array+0x658>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <add_data_to_array+0x65c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4919      	ldr	r1, [pc, #100]	; (8002300 <add_data_to_array+0x660>)
 800229c:	5c89      	ldrb	r1, [r1, r2]
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <add_data_to_array+0x664>)
 80022a0:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <add_data_to_array+0x65c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <add_data_to_array+0x65c>)
 80022aa:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <add_data_to_array+0x658>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <add_data_to_array+0x658>)
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <add_data_to_array+0x658>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d805      	bhi.n	80022ca <add_data_to_array+0x62a>
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <add_data_to_array+0x658>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <add_data_to_array+0x660>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e3      	bne.n	8002292 <add_data_to_array+0x5f2>
	}
	balance_data[balance_index] = ',';
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <add_data_to_array+0x65c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <add_data_to_array+0x664>)
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <add_data_to_array+0x65c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <add_data_to_array+0x65c>)
 80022dc:	6013      	str	r3, [r2, #0]

	balance_data[balance_index] = '\n';
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <add_data_to_array+0x65c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <add_data_to_array+0x664>)
 80022e4:	210a      	movs	r1, #10
 80022e6:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <add_data_to_array+0x65c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a03      	ldr	r2, [pc, #12]	; (80022fc <add_data_to_array+0x65c>)
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20004054 	.word	0x20004054
 80022fc:	20004050 	.word	0x20004050
 8002300:	200040a8 	.word	0x200040a8
 8002304:	200040b4 	.word	0x200040b4
 8002308:	20000204 	.word	0x20000204
 800230c:	20001810 	.word	0x20001810
 8002310:	20004038 	.word	0x20004038
 8002314:	20004040 	.word	0x20004040
 8002318:	20004048 	.word	0x20004048

0800231c <appendInitialConditions>:

void appendInitialConditions()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <appendInitialConditions+0x230>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e011      	b.n	800234c <appendInitialConditions+0x30>
	{
		balance_data[balance_index] = pH_init_title[i];
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <appendInitialConditions+0x230>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <appendInitialConditions+0x234>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4988      	ldr	r1, [pc, #544]	; (8002554 <appendInitialConditions+0x238>)
 8002332:	5c89      	ldrb	r1, [r1, r2]
 8002334:	4a88      	ldr	r2, [pc, #544]	; (8002558 <appendInitialConditions+0x23c>)
 8002336:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <appendInitialConditions+0x234>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a84      	ldr	r2, [pc, #528]	; (8002550 <appendInitialConditions+0x234>)
 8002340:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <appendInitialConditions+0x230>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a80      	ldr	r2, [pc, #512]	; (800254c <appendInitialConditions+0x230>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b7f      	ldr	r3, [pc, #508]	; (800254c <appendInitialConditions+0x230>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b10      	cmp	r3, #16
 8002352:	dc05      	bgt.n	8002360 <appendInitialConditions+0x44>
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <appendInitialConditions+0x230>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <appendInitialConditions+0x238>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e3      	bne.n	8002328 <appendInitialConditions+0xc>
	}
	balance_data[balance_index] = ',';
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <appendInitialConditions+0x234>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <appendInitialConditions+0x23c>)
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <appendInitialConditions+0x234>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a77      	ldr	r2, [pc, #476]	; (8002550 <appendInitialConditions+0x234>)
 8002372:	6013      	str	r3, [r2, #0]
	floatToString( pH);									// convert pH to char array and write it to the data buffer
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <appendInitialConditions+0x240>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7ff f8d3 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <appendInitialConditions+0x230>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e011      	b.n	80023ae <appendInitialConditions+0x92>
	{
		balance_data[balance_index] = convertedString[i];
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <appendInitialConditions+0x230>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <appendInitialConditions+0x234>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4973      	ldr	r1, [pc, #460]	; (8002560 <appendInitialConditions+0x244>)
 8002394:	5c89      	ldrb	r1, [r1, r2]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <appendInitialConditions+0x23c>)
 8002398:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <appendInitialConditions+0x234>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a6b      	ldr	r2, [pc, #428]	; (8002550 <appendInitialConditions+0x234>)
 80023a2:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <appendInitialConditions+0x230>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <appendInitialConditions+0x230>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <appendInitialConditions+0x230>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d805      	bhi.n	80023c2 <appendInitialConditions+0xa6>
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <appendInitialConditions+0x230>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <appendInitialConditions+0x244>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e3      	bne.n	800238a <appendInitialConditions+0x6e>
	}
	balance_data[balance_index] = ',';
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <appendInitialConditions+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <appendInitialConditions+0x23c>)
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <appendInitialConditions+0x234>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <appendInitialConditions+0x234>)
 80023d4:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <appendInitialConditions+0x230>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e011      	b.n	8002402 <appendInitialConditions+0xe6>
	{
		balance_data[balance_index] = pH_set_point_title[i];
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <appendInitialConditions+0x230>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <appendInitialConditions+0x234>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	495f      	ldr	r1, [pc, #380]	; (8002564 <appendInitialConditions+0x248>)
 80023e8:	5c89      	ldrb	r1, [r1, r2]
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <appendInitialConditions+0x23c>)
 80023ec:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <appendInitialConditions+0x234>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a56      	ldr	r2, [pc, #344]	; (8002550 <appendInitialConditions+0x234>)
 80023f6:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <appendInitialConditions+0x230>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a53      	ldr	r2, [pc, #332]	; (800254c <appendInitialConditions+0x230>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <appendInitialConditions+0x230>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	dc05      	bgt.n	8002416 <appendInitialConditions+0xfa>
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <appendInitialConditions+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <appendInitialConditions+0x248>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e3      	bne.n	80023de <appendInitialConditions+0xc2>
	}
	balance_data[balance_index] = ',';
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <appendInitialConditions+0x234>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <appendInitialConditions+0x23c>)
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <appendInitialConditions+0x234>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <appendInitialConditions+0x234>)
 8002428:	6013      	str	r3, [r2, #0]
	floatToString( pH_set_point);									// convert pH set point to char array and write it to the data buffer
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <appendInitialConditions+0x24c>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7ff f878 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 8002438:	4b44      	ldr	r3, [pc, #272]	; (800254c <appendInitialConditions+0x230>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e011      	b.n	8002464 <appendInitialConditions+0x148>
	{
		balance_data[balance_index] = convertedString[i];
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <appendInitialConditions+0x230>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <appendInitialConditions+0x234>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4945      	ldr	r1, [pc, #276]	; (8002560 <appendInitialConditions+0x244>)
 800244a:	5c89      	ldrb	r1, [r1, r2]
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <appendInitialConditions+0x23c>)
 800244e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <appendInitialConditions+0x234>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <appendInitialConditions+0x234>)
 8002458:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <appendInitialConditions+0x230>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a3a      	ldr	r2, [pc, #232]	; (800254c <appendInitialConditions+0x230>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <appendInitialConditions+0x230>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b09      	cmp	r3, #9
 800246a:	d805      	bhi.n	8002478 <appendInitialConditions+0x15c>
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <appendInitialConditions+0x230>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <appendInitialConditions+0x244>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e3      	bne.n	8002440 <appendInitialConditions+0x124>
	}
	balance_data[balance_index] = '\n';
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <appendInitialConditions+0x234>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <appendInitialConditions+0x23c>)
 800247e:	210a      	movs	r1, #10
 8002480:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <appendInitialConditions+0x234>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <appendInitialConditions+0x234>)
 800248a:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <appendInitialConditions+0x230>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e011      	b.n	80024b8 <appendInitialConditions+0x19c>
	{
		balance_data[balance_index] = TDS_init_title[i];
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <appendInitialConditions+0x230>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <appendInitialConditions+0x234>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4933      	ldr	r1, [pc, #204]	; (800256c <appendInitialConditions+0x250>)
 800249e:	5c89      	ldrb	r1, [r1, r2]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <appendInitialConditions+0x23c>)
 80024a2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <appendInitialConditions+0x234>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <appendInitialConditions+0x234>)
 80024ac:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <appendInitialConditions+0x230>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <appendInitialConditions+0x230>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <appendInitialConditions+0x230>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b10      	cmp	r3, #16
 80024be:	dc05      	bgt.n	80024cc <appendInitialConditions+0x1b0>
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <appendInitialConditions+0x230>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <appendInitialConditions+0x250>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e3      	bne.n	8002494 <appendInitialConditions+0x178>
	}
	balance_data[balance_index] = ',';
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <appendInitialConditions+0x234>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a21      	ldr	r2, [pc, #132]	; (8002558 <appendInitialConditions+0x23c>)
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <appendInitialConditions+0x234>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <appendInitialConditions+0x234>)
 80024de:	6013      	str	r3, [r2, #0]
	floatToString( TDS);									// convert pH to char array and write it to the data buffer
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <appendInitialConditions+0x254>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff f81d 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <appendInitialConditions+0x230>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e011      	b.n	800251a <appendInitialConditions+0x1fe>
	{
		balance_data[balance_index] = convertedString[i];
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <appendInitialConditions+0x230>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <appendInitialConditions+0x234>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <appendInitialConditions+0x244>)
 8002500:	5c89      	ldrb	r1, [r1, r2]
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <appendInitialConditions+0x23c>)
 8002504:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <appendInitialConditions+0x234>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <appendInitialConditions+0x234>)
 800250e:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <appendInitialConditions+0x230>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <appendInitialConditions+0x230>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <appendInitialConditions+0x230>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d805      	bhi.n	800252e <appendInitialConditions+0x212>
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <appendInitialConditions+0x230>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <appendInitialConditions+0x244>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e3      	bne.n	80024f6 <appendInitialConditions+0x1da>
	}
	balance_data[balance_index] = ',';
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <appendInitialConditions+0x234>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <appendInitialConditions+0x23c>)
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <appendInitialConditions+0x234>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <appendInitialConditions+0x234>)
 8002540:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <appendInitialConditions+0x230>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e026      	b.n	8002598 <appendInitialConditions+0x27c>
 800254a:	bf00      	nop
 800254c:	20004054 	.word	0x20004054
 8002550:	20004050 	.word	0x20004050
 8002554:	200000b4 	.word	0x200000b4
 8002558:	200040b4 	.word	0x200040b4
 800255c:	20001808 	.word	0x20001808
 8002560:	200040a8 	.word	0x200040a8
 8002564:	200000c4 	.word	0x200000c4
 8002568:	20000020 	.word	0x20000020
 800256c:	200000d4 	.word	0x200000d4
 8002570:	20001800 	.word	0x20001800
	{
		balance_data[balance_index] = TDS_set_point_title[i];
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <appendInitialConditions+0x310>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <appendInitialConditions+0x314>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	492d      	ldr	r1, [pc, #180]	; (8002634 <appendInitialConditions+0x318>)
 800257e:	5c89      	ldrb	r1, [r1, r2]
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <appendInitialConditions+0x31c>)
 8002582:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <appendInitialConditions+0x314>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <appendInitialConditions+0x314>)
 800258c:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <appendInitialConditions+0x310>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <appendInitialConditions+0x310>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <appendInitialConditions+0x310>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	dc05      	bgt.n	80025ac <appendInitialConditions+0x290>
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <appendInitialConditions+0x310>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <appendInitialConditions+0x318>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e3      	bne.n	8002574 <appendInitialConditions+0x258>
	}
	balance_data[balance_index] = ',';
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <appendInitialConditions+0x314>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <appendInitialConditions+0x31c>)
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <appendInitialConditions+0x314>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <appendInitialConditions+0x314>)
 80025be:	6013      	str	r3, [r2, #0]
	floatToString( nutrient_set_point);									// convert pH set point to char array and write it to the data buffer
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <appendInitialConditions+0x320>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe ffad 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <appendInitialConditions+0x310>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e011      	b.n	80025fa <appendInitialConditions+0x2de>
	{
		balance_data[balance_index] = convertedString[i];
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <appendInitialConditions+0x310>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <appendInitialConditions+0x314>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4918      	ldr	r1, [pc, #96]	; (8002640 <appendInitialConditions+0x324>)
 80025e0:	5c89      	ldrb	r1, [r1, r2]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <appendInitialConditions+0x31c>)
 80025e4:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <appendInitialConditions+0x314>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <appendInitialConditions+0x314>)
 80025ee:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <appendInitialConditions+0x310>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <appendInitialConditions+0x310>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <appendInitialConditions+0x310>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d805      	bhi.n	800260e <appendInitialConditions+0x2f2>
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <appendInitialConditions+0x310>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <appendInitialConditions+0x324>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e3      	bne.n	80025d6 <appendInitialConditions+0x2ba>
	}
	balance_data[balance_index] = '\n';
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <appendInitialConditions+0x314>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <appendInitialConditions+0x31c>)
 8002614:	210a      	movs	r1, #10
 8002616:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <appendInitialConditions+0x314>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <appendInitialConditions+0x314>)
 8002620:	6013      	str	r3, [r2, #0]
    get_init_conditions = 'y';
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <appendInitialConditions+0x328>)
 8002624:	2279      	movs	r2, #121	; 0x79
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20004054 	.word	0x20004054
 8002630:	20004050 	.word	0x20004050
 8002634:	200000e4 	.word	0x200000e4
 8002638:	200040b4 	.word	0x200040b4
 800263c:	20000018 	.word	0x20000018
 8002640:	200040a8 	.word	0x200040a8
 8002644:	200000b2 	.word	0x200000b2

08002648 <balancePhAndNutrient>:

void balancePhAndNutrient()
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af04      	add	r7, sp, #16
	TDS_avg_check = 0;
 800264e:	4998      	ldr	r1, [pc, #608]	; (80028b0 <balancePhAndNutrient+0x268>)
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
	pH_avg_check = 0;
 800265c:	4995      	ldr	r1, [pc, #596]	; (80028b4 <balancePhAndNutrient+0x26c>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c1 2300 	strd	r2, r3, [r1]
	if(waiting_to_write == 'n')	getSensorValues();
 800266a:	4b93      	ldr	r3, [pc, #588]	; (80028b8 <balancePhAndNutrient+0x270>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b6e      	cmp	r3, #110	; 0x6e
 8002670:	d101      	bne.n	8002676 <balancePhAndNutrient+0x2e>
 8002672:	f002 ffb3 	bl	80055dc <getSensorValues>

	pH_up = 'n';
 8002676:	4b91      	ldr	r3, [pc, #580]	; (80028bc <balancePhAndNutrient+0x274>)
 8002678:	226e      	movs	r2, #110	; 0x6e
 800267a:	701a      	strb	r2, [r3, #0]
	pH_down = 'n';
 800267c:	4b90      	ldr	r3, [pc, #576]	; (80028c0 <balancePhAndNutrient+0x278>)
 800267e:	226e      	movs	r2, #110	; 0x6e
 8002680:	701a      	strb	r2, [r3, #0]
	nutrient_up = 'n';	// check twice to see if we need to add nutrient
 8002682:	4b90      	ldr	r3, [pc, #576]	; (80028c4 <balancePhAndNutrient+0x27c>)
 8002684:	226e      	movs	r2, #110	; 0x6e
 8002686:	701a      	strb	r2, [r3, #0]

	if(setting_nutrient == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <balancePhAndNutrient+0x280>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b6e      	cmp	r3, #110	; 0x6e
 800268e:	d158      	bne.n	8002742 <balancePhAndNutrient+0xfa>
	{
		if(     TDS > nutrient_set_point && (TDS - nutrient_bounds_check) > nutrient_set_point) 	error = 'y'; 				 // if we are over our TDS set point ERROR
 8002690:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <balancePhAndNutrient+0x284>)
 8002692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002696:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <balancePhAndNutrient+0x288>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f9f6 	bl	8000a8c <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d017      	beq.n	80026d6 <balancePhAndNutrient+0x8e>
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <balancePhAndNutrient+0x284>)
 80026a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ac:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <balancePhAndNutrient+0x28c>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd fda3 	bl	80001fc <__aeabi_dsub>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <balancePhAndNutrient+0x288>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fe f9e2 	bl	8000a8c <__aeabi_dcmpgt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <balancePhAndNutrient+0x8e>
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <balancePhAndNutrient+0x290>)
 80026d0:	2279      	movs	r2, #121	; 0x79
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e057      	b.n	8002786 <balancePhAndNutrient+0x13e>
		else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_check) < nutrient_set_point )
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <balancePhAndNutrient+0x284>)
 80026d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <balancePhAndNutrient+0x288>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f9b5 	bl	8000a50 <__aeabi_dcmplt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04c      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 80026ec:	4b77      	ldr	r3, [pc, #476]	; (80028cc <balancePhAndNutrient+0x284>)
 80026ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <balancePhAndNutrient+0x28c>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fd82 	bl	8000200 <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <balancePhAndNutrient+0x288>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fe f9a1 	bl	8000a50 <__aeabi_dcmplt>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d038      	beq.n	8002786 <balancePhAndNutrient+0x13e>
		{
			nutrient_up = calibrateDosage('n',pH,pH_bounds_set,nutrient_bounds_set);// if we checked twice and we still need to dose nutrients then go for it.
 8002714:	4b71      	ldr	r3, [pc, #452]	; (80028dc <balancePhAndNutrient+0x294>)
 8002716:	e9d3 4500 	ldrd	r4, r5, [r3]
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <balancePhAndNutrient+0x298>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	4970      	ldr	r1, [pc, #448]	; (80028e4 <balancePhAndNutrient+0x29c>)
 8002722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800272a:	e9cd 2300 	strd	r2, r3, [sp]
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	206e      	movs	r0, #110	; 0x6e
 8002734:	f001 ff60 	bl	80045f8 <calibrateDosage>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <balancePhAndNutrient+0x27c>)
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e021      	b.n	8002786 <balancePhAndNutrient+0x13e>
		}
	}
	else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_set) < nutrient_set_point) nutrient_up = 'y';		 // if we are under our set point dose the water with pH-down
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <balancePhAndNutrient+0x284>)
 8002744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002748:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <balancePhAndNutrient+0x288>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fe f97f 	bl	8000a50 <__aeabi_dcmplt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d016      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 8002758:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <balancePhAndNutrient+0x284>)
 800275a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275e:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <balancePhAndNutrient+0x29c>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd fd4c 	bl	8000200 <__adddf3>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <balancePhAndNutrient+0x288>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fe f96b 	bl	8000a50 <__aeabi_dcmplt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <balancePhAndNutrient+0x27c>)
 8002782:	2279      	movs	r2, #121	; 0x79
 8002784:	701a      	strb	r2, [r3, #0]

	if(setting_pH == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002786:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b6e      	cmp	r3, #110	; 0x6e
 800278c:	d16c      	bne.n	8002868 <balancePhAndNutrient+0x220>
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <balancePhAndNutrient+0x294>)
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <balancePhAndNutrient+0x2a4>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fe f977 	bl	8000a8c <__aeabi_dcmpgt>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02a      	beq.n	80027fa <balancePhAndNutrient+0x1b2>
 80027a4:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <balancePhAndNutrient+0x294>)
 80027a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd24 	bl	80001fc <__aeabi_dsub>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <balancePhAndNutrient+0x2a4>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fe f963 	bl	8000a8c <__aeabi_dcmpgt>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <balancePhAndNutrient+0x1b2>
		{
			pH_down = calibrateDosage('d', pH,pH_bounds_set,nutrient_bounds_set);		// if we are over our set point dose the water with pH-down
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <balancePhAndNutrient+0x294>)
 80027ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <balancePhAndNutrient+0x298>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	4942      	ldr	r1, [pc, #264]	; (80028e4 <balancePhAndNutrient+0x29c>)
 80027da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027e2:	e9cd 2300 	strd	r2, r3, [sp]
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	f001 ff04 	bl	80045f8 <calibrateDosage>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <balancePhAndNutrient+0x278>)
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e09e      	b.n	8002938 <balancePhAndNutrient+0x2f0>
		}
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <balancePhAndNutrient+0x294>)
 80027fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <balancePhAndNutrient+0x2a4>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fe f923 	bl	8000a50 <__aeabi_dcmplt>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8093 	beq.w	8002938 <balancePhAndNutrient+0x2f0>
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <balancePhAndNutrient+0x294>)
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fcef 	bl	8000200 <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <balancePhAndNutrient+0x2a4>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fe f90e 	bl	8000a50 <__aeabi_dcmplt>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07e      	beq.n	8002938 <balancePhAndNutrient+0x2f0>
		{
			pH_up 	= calibrateDosage('u',pH,pH_bounds_set,nutrient_bounds_set); 				// if we are under our set point dose the water with pH-up
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <balancePhAndNutrient+0x294>)
 800283c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <balancePhAndNutrient+0x298>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	4927      	ldr	r1, [pc, #156]	; (80028e4 <balancePhAndNutrient+0x29c>)
 8002848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800284c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002850:	e9cd 2300 	strd	r2, r3, [sp]
 8002854:	4622      	mov	r2, r4
 8002856:	462b      	mov	r3, r5
 8002858:	2075      	movs	r0, #117	; 0x75
 800285a:	f001 fecd 	bl	80045f8 <calibrateDosage>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <balancePhAndNutrient+0x274>)
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e067      	b.n	8002938 <balancePhAndNutrient+0x2f0>
		}
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_set) > pH_set_point)   				pH_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <balancePhAndNutrient+0x294>)
 800286a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <balancePhAndNutrient+0x2a4>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fe f90a 	bl	8000a8c <__aeabi_dcmpgt>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03a      	beq.n	80028f4 <balancePhAndNutrient+0x2ac>
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <balancePhAndNutrient+0x294>)
 8002880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <balancePhAndNutrient+0x298>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fcb7 	bl	80001fc <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <balancePhAndNutrient+0x2a4>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fe f8f6 	bl	8000a8c <__aeabi_dcmpgt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d026      	beq.n	80028f4 <balancePhAndNutrient+0x2ac>
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <balancePhAndNutrient+0x278>)
 80028a8:	2279      	movs	r2, #121	; 0x79
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e044      	b.n	8002938 <balancePhAndNutrient+0x2f0>
 80028ae:	bf00      	nop
 80028b0:	20004028 	.word	0x20004028
 80028b4:	20004030 	.word	0x20004030
 80028b8:	200000b1 	.word	0x200000b1
 80028bc:	20000205 	.word	0x20000205
 80028c0:	20000206 	.word	0x20000206
 80028c4:	20000207 	.word	0x20000207
 80028c8:	200001ff 	.word	0x200001ff
 80028cc:	20001800 	.word	0x20001800
 80028d0:	20000018 	.word	0x20000018
 80028d4:	20000050 	.word	0x20000050
 80028d8:	20000204 	.word	0x20000204
 80028dc:	20001808 	.word	0x20001808
 80028e0:	20000048 	.word	0x20000048
 80028e4:	20000058 	.word	0x20000058
 80028e8:	200001fe 	.word	0x200001fe
 80028ec:	20000020 	.word	0x20000020
 80028f0:	20000040 	.word	0x20000040
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_set) < pH_set_point)  				pH_up 	= 'y'; 				// if we are under our set point dose the water with pH-up
 80028f4:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 80028f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fa:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <balancePhAndNutrient+0x4bc>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fe f8a6 	bl	8000a50 <__aeabi_dcmplt>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <balancePhAndNutrient+0x2f0>
 800290a:	4b7d      	ldr	r3, [pc, #500]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 800290c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002910:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <balancePhAndNutrient+0x4c0>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fc73 	bl	8000200 <__adddf3>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	4b78      	ldr	r3, [pc, #480]	; (8002b04 <balancePhAndNutrient+0x4bc>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fe f892 	bl	8000a50 <__aeabi_dcmplt>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <balancePhAndNutrient+0x2f0>
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <balancePhAndNutrient+0x4c4>)
 8002934:	2279      	movs	r2, #121	; 0x79
 8002936:	701a      	strb	r2, [r3, #0]
	}


	if(get_init_conditions == 'n') appendInitialConditions();
 8002938:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b6e      	cmp	r3, #110	; 0x6e
 800293e:	d101      	bne.n	8002944 <balancePhAndNutrient+0x2fc>
 8002940:	f7ff fcec 	bl	800231c <appendInitialConditions>

	if((pH_down == 'y' || pH_up == 'y' || nutrient_up == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8002944:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b79      	cmp	r3, #121	; 0x79
 800294a:	d007      	beq.n	800295c <balancePhAndNutrient+0x314>
 800294c:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <balancePhAndNutrient+0x4c4>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b79      	cmp	r3, #121	; 0x79
 8002952:	d003      	beq.n	800295c <balancePhAndNutrient+0x314>
 8002954:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b79      	cmp	r3, #121	; 0x79
 800295a:	d11d      	bne.n	8002998 <balancePhAndNutrient+0x350>
	{
		if(nutrient_up == 'y') 			setting_nutrient = 'y';
 800295c:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b79      	cmp	r3, #121	; 0x79
 8002962:	d103      	bne.n	800296c <balancePhAndNutrient+0x324>
 8002964:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 8002966:	2279      	movs	r2, #121	; 0x79
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e002      	b.n	8002972 <balancePhAndNutrient+0x32a>
		else setting_nutrient = 'n';
 800296c:	4b6b      	ldr	r3, [pc, #428]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 800296e:	226e      	movs	r2, #110	; 0x6e
 8002970:	701a      	strb	r2, [r3, #0]

		if(pH_down == 'y' || pH_up == 'y')  setting_pH = 'y';
 8002972:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b79      	cmp	r3, #121	; 0x79
 8002978:	d003      	beq.n	8002982 <balancePhAndNutrient+0x33a>
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <balancePhAndNutrient+0x4c4>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b79      	cmp	r3, #121	; 0x79
 8002980:	d103      	bne.n	800298a <balancePhAndNutrient+0x342>
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 8002984:	2279      	movs	r2, #121	; 0x79
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e002      	b.n	8002990 <balancePhAndNutrient+0x348>
		else setting_pH = 'n';
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 800298c:	226e      	movs	r2, #110	; 0x6e
 800298e:	701a      	strb	r2, [r3, #0]
		num_of_stable_runs = 0;
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <balancePhAndNutrient+0x4dc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e006      	b.n	80029a6 <balancePhAndNutrient+0x35e>
	}
	else if(pH_down == 'n')		// else if we are not setting anything, signify that
 8002998:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b6e      	cmp	r3, #110	; 0x6e
 800299e:	d102      	bne.n	80029a6 <balancePhAndNutrient+0x35e>
	{
		setting_nutrient = 'n';
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 80029a2:	226e      	movs	r2, #110	; 0x6e
 80029a4:	701a      	strb	r2, [r3, #0]
	}
	if(pH_up == 'n' && nutrient_up == 'n')
 80029a6:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <balancePhAndNutrient+0x4c4>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b6e      	cmp	r3, #110	; 0x6e
 80029ac:	d106      	bne.n	80029bc <balancePhAndNutrient+0x374>
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b6e      	cmp	r3, #110	; 0x6e
 80029b4:	d102      	bne.n	80029bc <balancePhAndNutrient+0x374>
	{
		setting_pH = 'n';
 80029b6:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 80029b8:	226e      	movs	r2, #110	; 0x6e
 80029ba:	701a      	strb	r2, [r3, #0]
	}

	if(num_of_stable_runs >= 0 && num_of_stable_runs < 7 && ((5000 - balance_index) >= 500) && waiting_to_write == 'n' ) // consider changing to 10
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <balancePhAndNutrient+0x4dc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f2c0 812a 	blt.w	8002c1a <balancePhAndNutrient+0x5d2>
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <balancePhAndNutrient+0x4dc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	f300 8125 	bgt.w	8002c1a <balancePhAndNutrient+0x5d2>
 80029d0:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <balancePhAndNutrient+0x4e0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80029d8:	3308      	adds	r3, #8
 80029da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029de:	f2c0 811c 	blt.w	8002c1a <balancePhAndNutrient+0x5d2>
 80029e2:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <balancePhAndNutrient+0x4e4>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b6e      	cmp	r3, #110	; 0x6e
 80029e8:	f040 8117 	bne.w	8002c1a <balancePhAndNutrient+0x5d2>
	{
		time_to_bal_pH = 0;
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <balancePhAndNutrient+0x4e8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
		time_to_bal_nutrient = 0;
 80029f2:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <balancePhAndNutrient+0x4ec>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

		if(nutrient_up == 'y')	// if we need to add nutrients and we also need to adjust the pH, add the nutrients first and wait to stabilize then add pH-up/down
 80029f8:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b79      	cmp	r3, #121	; 0x79
 80029fe:	d13b      	bne.n	8002a78 <balancePhAndNutrient+0x430>
		{
			nutrient_dose = calcNutrientDose(pH_set_point, nutrient_set_point);
 8002a00:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <balancePhAndNutrient+0x4bc>)
 8002a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f001 fdc4 	bl	8004598 <calcNutrientDose>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4949      	ldr	r1, [pc, #292]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a16:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,0,nutrient_dose);
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	e9cd 2300 	strd	r2, r3, [sp]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	f001 fd35 	bl	80044a2 <doseWater>
			total_nutrient_ml += nutrient_dose;
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 8002a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fbdc 	bl	8000200 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	493c      	ldr	r1, [pc, #240]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
			total_nutrient_ml_per_file += nutrient_dose;
 8002a52:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fbcf 	bl	8000200 <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4937      	ldr	r1, [pc, #220]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002a68:	e9c1 2300 	strd	r2, r3, [r1]
			time_to_bal_nutrient = waitForWaterToStabilize();
 8002a6c:	f000 ff20 	bl	80038b0 <waitForWaterToStabilize>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <balancePhAndNutrient+0x4ec>)
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e0af      	b.n	8002bd8 <balancePhAndNutrient+0x590>
				total_pH_up_ml_per_file+= pH_up_dose;
				pH_up = 'n';
				time_to_bal_pH = waitForWaterToStabilize();
			}*/
		}
		else if(pH_down == 'y')
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b79      	cmp	r3, #121	; 0x79
 8002a7e:	d169      	bne.n	8002b54 <balancePhAndNutrient+0x50c>
		{
			pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <balancePhAndNutrient+0x4bc>)
 8002a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f001 fd56 	bl	800453c <calcPhDownDose>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	492c      	ldr	r1, [pc, #176]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002a96:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(pH_down_dose,0,0);
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f001 fcf5 	bl	80044a2 <doseWater>
			total_pH_down_ml += pH_down_dose;
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fb9c 	bl	8000200 <__adddf3>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	491f      	ldr	r1, [pc, #124]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002ace:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_down_ml_per_file += pH_down_dose;
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <balancePhAndNutrient+0x508>)
 8002ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fb8f 	bl	8000200 <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	491a      	ldr	r1, [pc, #104]	; (8002b50 <balancePhAndNutrient+0x508>)
 8002ae8:	e9c1 2300 	strd	r2, r3, [r1]
			pH_down = 'n';
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 8002aee:	226e      	movs	r2, #110	; 0x6e
 8002af0:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002af2:	f000 fedd 	bl	80038b0 <waitForWaterToStabilize>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <balancePhAndNutrient+0x4e8>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e06c      	b.n	8002bd8 <balancePhAndNutrient+0x590>
 8002afe:	bf00      	nop
 8002b00:	20001808 	.word	0x20001808
 8002b04:	20000020 	.word	0x20000020
 8002b08:	20000048 	.word	0x20000048
 8002b0c:	20000205 	.word	0x20000205
 8002b10:	200000b2 	.word	0x200000b2
 8002b14:	20000206 	.word	0x20000206
 8002b18:	20000207 	.word	0x20000207
 8002b1c:	200001ff 	.word	0x200001ff
 8002b20:	200001fe 	.word	0x200001fe
 8002b24:	20004068 	.word	0x20004068
 8002b28:	20004050 	.word	0x20004050
 8002b2c:	200000b1 	.word	0x200000b1
 8002b30:	2000405c 	.word	0x2000405c
 8002b34:	20004058 	.word	0x20004058
 8002b38:	20000018 	.word	0x20000018
 8002b3c:	200017c8 	.word	0x200017c8
 8002b40:	200017d0 	.word	0x200017d0
 8002b44:	200017e8 	.word	0x200017e8
 8002b48:	200017c0 	.word	0x200017c0
 8002b4c:	200017e0 	.word	0x200017e0
 8002b50:	200017f8 	.word	0x200017f8
		}
		else if(pH_up == 'y')
 8002b54:	4b7c      	ldr	r3, [pc, #496]	; (8002d48 <balancePhAndNutrient+0x700>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b79      	cmp	r3, #121	; 0x79
 8002b5a:	d13d      	bne.n	8002bd8 <balancePhAndNutrient+0x590>
		{
			pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <balancePhAndNutrient+0x704>)
 8002b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b62:	4b7b      	ldr	r3, [pc, #492]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f001 fcba 	bl	80044e0 <calcPhUpDose>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4978      	ldr	r1, [pc, #480]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002b72:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,pH_up_dose,0);
 8002b76:	4b77      	ldr	r3, [pc, #476]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f04f 0000 	mov.w	r0, #0
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	e9cd 0100 	strd	r0, r1, [sp]
 8002b88:	f04f 0000 	mov.w	r0, #0
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	f001 fc87 	bl	80044a2 <doseWater>
			total_pH_up_ml += pH_up_dose;
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fb2e 	bl	8000200 <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	496b      	ldr	r1, [pc, #428]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002baa:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_up_ml_per_file += pH_up_dose;
 8002bae:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <balancePhAndNutrient+0x714>)
 8002bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb4:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fb21 	bl	8000200 <__adddf3>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4966      	ldr	r1, [pc, #408]	; (8002d5c <balancePhAndNutrient+0x714>)
 8002bc4:	e9c1 2300 	strd	r2, r3, [r1]
			pH_up = 'n';
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <balancePhAndNutrient+0x700>)
 8002bca:	226e      	movs	r2, #110	; 0x6e
 8002bcc:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002bce:	f000 fe6f 	bl	80038b0 <waitForWaterToStabilize>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a62      	ldr	r2, [pc, #392]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002bd6:	6013      	str	r3, [r2, #0]
		}
		osDelay(500);
 8002bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bdc:	f00f ff47 	bl	8012a6e <osDelay>
		num_of_stable_runs++;
 8002be0:	4b60      	ldr	r3, [pc, #384]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a5f      	ldr	r2, [pc, #380]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002be8:	6013      	str	r3, [r2, #0]
		add_data_to_array();
 8002bea:	f7ff f859 	bl	8001ca0 <add_data_to_array>
		pH_up_dose = 0;
 8002bee:	4959      	ldr	r1, [pc, #356]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose = 0;
 8002bfc:	495a      	ldr	r1, [pc, #360]	; (8002d68 <balancePhAndNutrient+0x720>)
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9c1 2300 	strd	r2, r3, [r1]
		nutrient_dose = 0;
 8002c0a:	4958      	ldr	r1, [pc, #352]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9c1 2300 	strd	r2, r3, [r1]
 8002c18:	e04b      	b.n	8002cb2 <balancePhAndNutrient+0x66a>
	}
	else if(num_of_stable_runs>=7 && waiting_to_write == 'n' && (total_pH_up_ml_per_file > 0 || total_pH_down_ml_per_file > 0 || total_nutrient_ml_per_file > 0) && setting_nutrient =='n' && setting_pH == 'n')
 8002c1a:	4b52      	ldr	r3, [pc, #328]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	dd47      	ble.n	8002cb2 <balancePhAndNutrient+0x66a>
 8002c22:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b6e      	cmp	r3, #110	; 0x6e
 8002c28:	d143      	bne.n	8002cb2 <balancePhAndNutrient+0x66a>
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <balancePhAndNutrient+0x714>)
 8002c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	f7fd ff28 	bl	8000a8c <__aeabi_dcmpgt>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d117      	bne.n	8002c72 <balancePhAndNutrient+0x62a>
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	f7fd ff1c 	bl	8000a8c <__aeabi_dcmpgt>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <balancePhAndNutrient+0x62a>
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f7fd ff10 	bl	8000a8c <__aeabi_dcmpgt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01f      	beq.n	8002cb2 <balancePhAndNutrient+0x66a>
 8002c72:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <balancePhAndNutrient+0x734>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b6e      	cmp	r3, #110	; 0x6e
 8002c78:	d11b      	bne.n	8002cb2 <balancePhAndNutrient+0x66a>
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <balancePhAndNutrient+0x738>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b6e      	cmp	r3, #110	; 0x6e
 8002c80:	d117      	bne.n	8002cb2 <balancePhAndNutrient+0x66a>
	{
		waiting_to_write = 'y';
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002c84:	2279      	movs	r2, #121	; 0x79
 8002c86:	701a      	strb	r2, [r3, #0]
		total_pH_down_ml_per_file = 0;
 8002c88:	493a      	ldr	r1, [pc, #232]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9c1 2300 	strd	r2, r3, [r1]
		total_pH_up_ml_per_file = 0;
 8002c96:	4931      	ldr	r1, [pc, #196]	; (8002d5c <balancePhAndNutrient+0x714>)
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9c1 2300 	strd	r2, r3, [r1]
		total_nutrient_ml_per_file = 0;
 8002ca4:	4934      	ldr	r1, [pc, #208]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(usb_good == 1 && num_of_stable_runs >= 7 && waiting_to_write == 'y')
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d131      	bne.n	8002d1e <balancePhAndNutrient+0x6d6>
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	dd2d      	ble.n	8002d1e <balancePhAndNutrient+0x6d6>
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b79      	cmp	r3, #121	; 0x79
 8002cc8:	d129      	bne.n	8002d1e <balancePhAndNutrient+0x6d6>
	{
		write_balance_data_file('n');
 8002cca:	206e      	movs	r0, #110	; 0x6e
 8002ccc:	f7fe ff08 	bl	8001ae0 <write_balance_data_file>
		num_of_stable_runs = 0;
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
		balance_index = 0;
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <balancePhAndNutrient+0x740>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
		get_init_conditions  = 'n';
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <balancePhAndNutrient+0x744>)
 8002cde:	226e      	movs	r2, #110	; 0x6e
 8002ce0:	701a      	strb	r2, [r3, #0]
		waiting_to_write = 'n';
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002ce4:	226e      	movs	r2, #110	; 0x6e
 8002ce6:	701a      	strb	r2, [r3, #0]
		resetStabilityVars();
 8002ce8:	f000 f856 	bl	8002d98 <resetStabilityVars>
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	e00f      	b.n	8002d12 <balancePhAndNutrient+0x6ca>
		{
			balance_data[a]   = '\0';
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <balancePhAndNutrient+0x748>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
			if(a<25)buffer[a] = '\0';
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b18      	cmp	r3, #24
 8002d00:	dc04      	bgt.n	8002d0c <balancePhAndNutrient+0x6c4>
 8002d02:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <balancePhAndNutrient+0x74c>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f241 3287 	movw	r2, #4999	; 0x1387
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d9ea      	bls.n	8002cf2 <balancePhAndNutrient+0x6aa>
 8002d1c:	e00f      	b.n	8002d3e <balancePhAndNutrient+0x6f6>
		}
	}
	else if(usb_good == 1 && ((5000 - balance_index) < 500)) write_balance_data_file('y'); // if the buffer is full write the file
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10b      	bne.n	8002d3e <balancePhAndNutrient+0x6f6>
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <balancePhAndNutrient+0x740>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002d2e:	3308      	adds	r3, #8
 8002d30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d34:	da03      	bge.n	8002d3e <balancePhAndNutrient+0x6f6>
 8002d36:	2079      	movs	r0, #121	; 0x79
 8002d38:	f7fe fed2 	bl	8001ae0 <write_balance_data_file>
}
 8002d3c:	e7ff      	b.n	8002d3e <balancePhAndNutrient+0x6f6>
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000205 	.word	0x20000205
 8002d4c:	20000020 	.word	0x20000020
 8002d50:	20000018 	.word	0x20000018
 8002d54:	200017b8 	.word	0x200017b8
 8002d58:	200017d8 	.word	0x200017d8
 8002d5c:	200017f0 	.word	0x200017f0
 8002d60:	2000405c 	.word	0x2000405c
 8002d64:	20004068 	.word	0x20004068
 8002d68:	200017c0 	.word	0x200017c0
 8002d6c:	200017c8 	.word	0x200017c8
 8002d70:	200000b1 	.word	0x200000b1
 8002d74:	200017f8 	.word	0x200017f8
 8002d78:	200017e8 	.word	0x200017e8
 8002d7c:	200001ff 	.word	0x200001ff
 8002d80:	200001fe 	.word	0x200001fe
 8002d84:	200095e0 	.word	0x200095e0
 8002d88:	20004050 	.word	0x20004050
 8002d8c:	200000b2 	.word	0x200000b2
 8002d90:	200040b4 	.word	0x200040b4
 8002d94:	2000408c 	.word	0x2000408c

08002d98 <resetStabilityVars>:

void resetStabilityVars()
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
	average_pH = 0;
 8002d9e:	492e      	ldr	r1, [pc, #184]	; (8002e58 <resetStabilityVars+0xc0>)
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9c1 2300 	strd	r2, r3, [r1]
	average_TDS = 0;
 8002dac:	492b      	ldr	r1, [pc, #172]	; (8002e5c <resetStabilityVars+0xc4>)
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9c1 2300 	strd	r2, r3, [r1]
	run_again = 1; 		// set to one its the first run 2 is multiple 0 is do not run again
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <resetStabilityVars+0xc8>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
	valid = 0;
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <resetStabilityVars+0xcc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
	historic_sample_index = 0;
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <resetStabilityVars+0xd0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
	slope_factor_average_TDS = 0;
 8002dcc:	4927      	ldr	r1, [pc, #156]	; (8002e6c <resetStabilityVars+0xd4>)
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9c1 2300 	strd	r2, r3, [r1]
	slope_factor_average_ph = 0;
 8002dda:	4925      	ldr	r1, [pc, #148]	; (8002e70 <resetStabilityVars+0xd8>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9c1 2300 	strd	r2, r3, [r1]

	for(int h = 0; h<200; h++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e02a      	b.n	8002e44 <resetStabilityVars+0xac>
	{
		historic_largest_pH[h] = 0;
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <resetStabilityVars+0xdc>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	18d1      	adds	r1, r2, r3
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[h] = 0;
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <resetStabilityVars+0xe0>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	18d1      	adds	r1, r2, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[h] = 0;
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <resetStabilityVars+0xe4>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	18d1      	adds	r1, r2, r3
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[h] = 0;
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <resetStabilityVars+0xe8>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	18d1      	adds	r1, r2, r3
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
	for(int h = 0; h<200; h++)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3301      	adds	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2bc7      	cmp	r3, #199	; 0xc7
 8002e48:	ddd1      	ble.n	8002dee <resetStabilityVars+0x56>
	}
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20003dc8 	.word	0x20003dc8
 8002e5c:	20003dd0 	.word	0x20003dd0
 8002e60:	2000008c 	.word	0x2000008c
 8002e64:	20004084 	.word	0x20004084
 8002e68:	20004088 	.word	0x20004088
 8002e6c:	20003e08 	.word	0x20003e08
 8002e70:	20003e10 	.word	0x20003e10
 8002e74:	20001828 	.word	0x20001828
 8002e78:	20001e68 	.word	0x20001e68
 8002e7c:	200024a8 	.word	0x200024a8
 8002e80:	20002ae8 	.word	0x20002ae8
 8002e84:	00000000 	.word	0x00000000

08002e88 <isStabalized>:

void isStabalized()  // will take a few samples of the waters pH and TDS to determine if the solution has stabilized. If stabilized returns one else 0
{		// get the current system time sets global variables sTime and sDate in RTC_driver.c
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0

	end_time_seconds = 0;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <isStabalized+0xa0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
	prev_smallest_ph = smallest_value_pH;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <isStabalized+0xa4>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <isStabalized+0xa8>)
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
	prev_smallest_TDS = smallest_value_TDS;
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <isStabalized+0xac>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	4924      	ldr	r1, [pc, #144]	; (8002f38 <isStabalized+0xb0>)
 8002ea8:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_TDS = largest_value_TDS;
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <isStabalized+0xb4>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	4923      	ldr	r1, [pc, #140]	; (8002f40 <isStabalized+0xb8>)
 8002eb4:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_pH = largest_value_pH;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <isStabalized+0xbc>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	4922      	ldr	r1, [pc, #136]	; (8002f48 <isStabalized+0xc0>)
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]

	getSensorValues();
 8002ec4:	f002 fb8a 	bl	80055dc <getSensorValues>

	smallest_value_TDS = 10000;							   // set smallest values to value much higher than expected
 8002ec8:	491a      	ldr	r1, [pc, #104]	; (8002f34 <isStabalized+0xac>)
 8002eca:	a315      	add	r3, pc, #84	; (adr r3, 8002f20 <isStabalized+0x98>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	e9c1 2300 	strd	r2, r3, [r1]
	largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 8002ed4:	4919      	ldr	r1, [pc, #100]	; (8002f3c <isStabalized+0xb4>)
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
	smallest_value_pH = 100;
 8002ee2:	4912      	ldr	r1, [pc, #72]	; (8002f2c <isStabalized+0xa4>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <isStabalized+0xc4>)
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
    largest_value_pH = 0;
 8002eee:	4915      	ldr	r1, [pc, #84]	; (8002f44 <isStabalized+0xbc>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]


    average_pH = 0;
 8002efc:	4914      	ldr	r1, [pc, #80]	; (8002f50 <isStabalized+0xc8>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]
    average_TDS = 0;
 8002f0a:	4912      	ldr	r1, [pc, #72]	; (8002f54 <isStabalized+0xcc>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<num_sensor_samples-1;i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e0fa      	b.n	8003114 <isStabalized+0x28c>
 8002f1e:	bf00      	nop
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40c38800 	.word	0x40c38800
 8002f28:	20004074 	.word	0x20004074
 8002f2c:	20000078 	.word	0x20000078
 8002f30:	20001818 	.word	0x20001818
 8002f34:	20000070 	.word	0x20000070
 8002f38:	20001820 	.word	0x20001820
 8002f3c:	20003ff8 	.word	0x20003ff8
 8002f40:	20004010 	.word	0x20004010
 8002f44:	20004000 	.word	0x20004000
 8002f48:	20004008 	.word	0x20004008
 8002f4c:	40590000 	.word	0x40590000
 8002f50:	20003dc8 	.word	0x20003dc8
 8002f54:	20003dd0 	.word	0x20003dd0
	{
		if(sample_array_TDS[i] > largest_value_TDS  && sample_array_TDS[i] != 0)  largest_value_TDS  = sample_array_TDS[i];	// find largest and smallest values in our data
 8002f58:	4aa7      	ldr	r2, [pc, #668]	; (80031f8 <isStabalized+0x370>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f64:	4ba5      	ldr	r3, [pc, #660]	; (80031fc <isStabalized+0x374>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fd8f 	bl	8000a8c <__aeabi_dcmpgt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <isStabalized+0x11c>
 8002f74:	4aa0      	ldr	r2, [pc, #640]	; (80031f8 <isStabalized+0x370>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f7fd fd58 	bl	8000a3c <__aeabi_dcmpeq>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <isStabalized+0x11c>
 8002f92:	4a99      	ldr	r2, [pc, #612]	; (80031f8 <isStabalized+0x370>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	4997      	ldr	r1, [pc, #604]	; (80031fc <isStabalized+0x374>)
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_TDS[i] < smallest_value_TDS && sample_array_TDS[i] != 0) smallest_value_TDS = sample_array_TDS[i];
 8002fa4:	4a94      	ldr	r2, [pc, #592]	; (80031f8 <isStabalized+0x370>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb0:	4b93      	ldr	r3, [pc, #588]	; (8003200 <isStabalized+0x378>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fd4b 	bl	8000a50 <__aeabi_dcmplt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <isStabalized+0x168>
 8002fc0:	4a8d      	ldr	r2, [pc, #564]	; (80031f8 <isStabalized+0x370>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f7fd fd32 	bl	8000a3c <__aeabi_dcmpeq>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <isStabalized+0x168>
 8002fde:	4a86      	ldr	r2, [pc, #536]	; (80031f8 <isStabalized+0x370>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	4985      	ldr	r1, [pc, #532]	; (8003200 <isStabalized+0x378>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  > largest_value_pH && sample_array_pH[i] != 0) 	 largest_value_pH   = sample_array_pH[i];
 8002ff0:	4a84      	ldr	r2, [pc, #528]	; (8003204 <isStabalized+0x37c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ffc:	4b82      	ldr	r3, [pc, #520]	; (8003208 <isStabalized+0x380>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fd43 	bl	8000a8c <__aeabi_dcmpgt>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <isStabalized+0x1b4>
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <isStabalized+0x37c>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	f7fd fd0c 	bl	8000a3c <__aeabi_dcmpeq>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <isStabalized+0x1b4>
 800302a:	4a76      	ldr	r2, [pc, #472]	; (8003204 <isStabalized+0x37c>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	4974      	ldr	r1, [pc, #464]	; (8003208 <isStabalized+0x380>)
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  < smallest_value_pH && sample_array_pH[i] != 0)   smallest_value_pH  = sample_array_pH[i];
 800303c:	4a71      	ldr	r2, [pc, #452]	; (8003204 <isStabalized+0x37c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <isStabalized+0x384>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fcff 	bl	8000a50 <__aeabi_dcmplt>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <isStabalized+0x200>
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <isStabalized+0x37c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f7fd fce6 	bl	8000a3c <__aeabi_dcmpeq>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <isStabalized+0x200>
 8003076:	4a63      	ldr	r2, [pc, #396]	; (8003204 <isStabalized+0x37c>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	4962      	ldr	r1, [pc, #392]	; (800320c <isStabalized+0x384>)
 8003084:	e9c1 2300 	strd	r2, r3, [r1]
		if( sample_array_TDS[i] != 0 && sample_array_pH[i] != 0)
 8003088:	4a5b      	ldr	r2, [pc, #364]	; (80031f8 <isStabalized+0x370>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	f7fd fcce 	bl	8000a3c <__aeabi_dcmpeq>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d133      	bne.n	800310e <isStabalized+0x286>
 80030a6:	4a57      	ldr	r2, [pc, #348]	; (8003204 <isStabalized+0x37c>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f7fd fcbf 	bl	8000a3c <__aeabi_dcmpeq>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d124      	bne.n	800310e <isStabalized+0x286>
		{
			average_pH  += sample_array_pH[i];
 80030c4:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <isStabalized+0x37c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d0:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <isStabalized+0x388>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd f893 	bl	8000200 <__adddf3>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	494c      	ldr	r1, [pc, #304]	; (8003210 <isStabalized+0x388>)
 80030e0:	e9c1 2300 	strd	r2, r3, [r1]
			average_TDS += sample_array_TDS[i];
 80030e4:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <isStabalized+0x370>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f0:	4b48      	ldr	r3, [pc, #288]	; (8003214 <isStabalized+0x38c>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f7fd f883 	bl	8000200 <__adddf3>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4945      	ldr	r1, [pc, #276]	; (8003214 <isStabalized+0x38c>)
 8003100:	e9c1 2300 	strd	r2, r3, [r1]
			sample_index1++;
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <isStabalized+0x390>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a43      	ldr	r2, [pc, #268]	; (8003218 <isStabalized+0x390>)
 800310c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<num_sensor_samples-1;i++)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3301      	adds	r3, #1
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <isStabalized+0x394>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	f6ff af1b 	blt.w	8002f58 <isStabalized+0xd0>
		}
	}

	TDS_range = largest_value_TDS - smallest_value_TDS; // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <isStabalized+0x374>)
 8003124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <isStabalized+0x378>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd f865 	bl	80001fc <__aeabi_dsub>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	493a      	ldr	r1, [pc, #232]	; (8003220 <isStabalized+0x398>)
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
	pH_range  = largest_value_pH  - smallest_value_pH;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <isStabalized+0x380>)
 800313e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <isStabalized+0x384>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd f858 	bl	80001fc <__aeabi_dsub>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4934      	ldr	r1, [pc, #208]	; (8003224 <isStabalized+0x39c>)
 8003152:	e9c1 2300 	strd	r2, r3, [r1]

	historic_TDS_max = 0;
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <isStabalized+0x3a0>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9c1 2300 	strd	r2, r3, [r1]
	historic_TDS_min = 100000;
 8003164:	4931      	ldr	r1, [pc, #196]	; (800322c <isStabalized+0x3a4>)
 8003166:	a322      	add	r3, pc, #136	; (adr r3, 80031f0 <isStabalized+0x368>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_max  = 0;
 8003170:	492f      	ldr	r1, [pc, #188]	; (8003230 <isStabalized+0x3a8>)
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_min  = 100000;
 800317e:	492d      	ldr	r1, [pc, #180]	; (8003234 <isStabalized+0x3ac>)
 8003180:	a31b      	add	r3, pc, #108	; (adr r3, 80031f0 <isStabalized+0x368>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	e9c1 2300 	strd	r2, r3, [r1]

	average_pH  = average_pH/(sample_index1);
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <isStabalized+0x388>)
 800318c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <isStabalized+0x390>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f97f 	bl	8000498 <__aeabi_i2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd fb0d 	bl	80007c0 <__aeabi_ddiv>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4919      	ldr	r1, [pc, #100]	; (8003210 <isStabalized+0x388>)
 80031ac:	e9c1 2300 	strd	r2, r3, [r1]
 	average_TDS = average_TDS/(sample_index1);
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <isStabalized+0x38c>)
 80031b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <isStabalized+0x390>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f96c 	bl	8000498 <__aeabi_i2d>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd fafa 	bl	80007c0 <__aeabi_ddiv>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4910      	ldr	r1, [pc, #64]	; (8003214 <isStabalized+0x38c>)
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
	sample_index1 = 0;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <isStabalized+0x390>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
	if(historic_sample_index < number_historic_samples)
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <isStabalized+0x3b0>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <isStabalized+0x3b4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	da6d      	bge.n	80032c4 <isStabalized+0x43c>
 80031e8:	e02a      	b.n	8003240 <isStabalized+0x3b8>
 80031ea:	bf00      	nop
 80031ec:	f3af 8000 	nop.w
 80031f0:	00000000 	.word	0x00000000
 80031f4:	40f86a00 	.word	0x40f86a00
 80031f8:	20003e18 	.word	0x20003e18
 80031fc:	20003ff8 	.word	0x20003ff8
 8003200:	20000070 	.word	0x20000070
 8003204:	20003f08 	.word	0x20003f08
 8003208:	20004000 	.word	0x20004000
 800320c:	20000078 	.word	0x20000078
 8003210:	20003dc8 	.word	0x20003dc8
 8003214:	20003dd0 	.word	0x20003dd0
 8003218:	2000407c 	.word	0x2000407c
 800321c:	20000080 	.word	0x20000080
 8003220:	20004018 	.word	0x20004018
 8003224:	20004020 	.word	0x20004020
 8003228:	20003de8 	.word	0x20003de8
 800322c:	20003e00 	.word	0x20003e00
 8003230:	20003df0 	.word	0x20003df0
 8003234:	20003df8 	.word	0x20003df8
 8003238:	20004088 	.word	0x20004088
 800323c:	20000088 	.word	0x20000088
	{
		historic_largest_pH[historic_sample_index]   = largest_value_pH;
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <isStabalized+0x4e8>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <isStabalized+0x4ec>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	484b      	ldr	r0, [pc, #300]	; (8003378 <isStabalized+0x4f0>)
 800324c:	00c9      	lsls	r1, r1, #3
 800324e:	4401      	add	r1, r0
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[historic_sample_index]  = smallest_value_pH;
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <isStabalized+0x4e8>)
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <isStabalized+0x4f4>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	4848      	ldr	r0, [pc, #288]	; (8003380 <isStabalized+0x4f8>)
 8003260:	00c9      	lsls	r1, r1, #3
 8003262:	4401      	add	r1, r0
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[historic_sample_index]  = largest_value_TDS;
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <isStabalized+0x4e8>)
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <isStabalized+0x4fc>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	4845      	ldr	r0, [pc, #276]	; (8003388 <isStabalized+0x500>)
 8003274:	00c9      	lsls	r1, r1, #3
 8003276:	4401      	add	r1, r0
 8003278:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[historic_sample_index] = smallest_value_TDS;
 800327c:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <isStabalized+0x4e8>)
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <isStabalized+0x504>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	4842      	ldr	r0, [pc, #264]	; (8003390 <isStabalized+0x508>)
 8003288:	00c9      	lsls	r1, r1, #3
 800328a:	4401      	add	r1, r0
 800328c:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH[historic_sample_index]   = average_pH;
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <isStabalized+0x4e8>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <isStabalized+0x50c>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	483f      	ldr	r0, [pc, #252]	; (8003398 <isStabalized+0x510>)
 800329c:	00c9      	lsls	r1, r1, #3
 800329e:	4401      	add	r1, r0
 80032a0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS[historic_sample_index]  = average_TDS;
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <isStabalized+0x4e8>)
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <isStabalized+0x514>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	483c      	ldr	r0, [pc, #240]	; (80033a0 <isStabalized+0x518>)
 80032b0:	00c9      	lsls	r1, r1, #3
 80032b2:	4401      	add	r1, r0
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_sample_index++;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <isStabalized+0x4e8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <isStabalized+0x4e8>)
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e004      	b.n	80032ce <isStabalized+0x446>
	}
	else
	{
		resetStabilityVars();
 80032c4:	f7ff fd68 	bl	8002d98 <resetStabilityVars>
		run_again = 2;
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <isStabalized+0x51c>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
	}

	if(historic_sample_index > 20)
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <isStabalized+0x4e8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b14      	cmp	r3, #20
 80032d4:	f340 81a7 	ble.w	8003626 <isStabalized+0x79e>
	{
		historic_average_pH_min = 1000;
 80032d8:	4933      	ldr	r1, [pc, #204]	; (80033a8 <isStabalized+0x520>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <isStabalized+0x524>)
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_max = 0;
 80032e4:	4932      	ldr	r1, [pc, #200]	; (80033b0 <isStabalized+0x528>)
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_min = 100000;
 80032f2:	4930      	ldr	r1, [pc, #192]	; (80033b4 <isStabalized+0x52c>)
 80032f4:	a31c      	add	r3, pc, #112	; (adr r3, 8003368 <isStabalized+0x4e0>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_max = 0;
 80032fe:	492e      	ldr	r1, [pc, #184]	; (80033b8 <isStabalized+0x530>)
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_TDS = 100000;							   // set smallest values to value much higher than expected
 800330c:	491f      	ldr	r1, [pc, #124]	; (800338c <isStabalized+0x504>)
 800330e:	a316      	add	r3, pc, #88	; (adr r3, 8003368 <isStabalized+0x4e0>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 8003318:	491a      	ldr	r1, [pc, #104]	; (8003384 <isStabalized+0x4fc>)
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_pH = 100;
 8003326:	4915      	ldr	r1, [pc, #84]	; (800337c <isStabalized+0x4f4>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <isStabalized+0x534>)
 800332e:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_pH = 0;
 8003332:	4910      	ldr	r1, [pc, #64]	; (8003374 <isStabalized+0x4ec>)
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_TDS = 0;
 8003340:	491f      	ldr	r1, [pc, #124]	; (80033c0 <isStabalized+0x538>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_ph = 0;
 800334e:	491d      	ldr	r1, [pc, #116]	; (80033c4 <isStabalized+0x53c>)
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <isStabalized+0x4e8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3b14      	subs	r3, #20
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	e125      	b.n	80035b2 <isStabalized+0x72a>
 8003366:	bf00      	nop
 8003368:	00000000 	.word	0x00000000
 800336c:	40f86a00 	.word	0x40f86a00
 8003370:	20004088 	.word	0x20004088
 8003374:	20004000 	.word	0x20004000
 8003378:	20001828 	.word	0x20001828
 800337c:	20000078 	.word	0x20000078
 8003380:	20001e68 	.word	0x20001e68
 8003384:	20003ff8 	.word	0x20003ff8
 8003388:	200024a8 	.word	0x200024a8
 800338c:	20000070 	.word	0x20000070
 8003390:	20002ae8 	.word	0x20002ae8
 8003394:	20003dc8 	.word	0x20003dc8
 8003398:	20003128 	.word	0x20003128
 800339c:	20003dd0 	.word	0x20003dd0
 80033a0:	20003768 	.word	0x20003768
 80033a4:	2000008c 	.word	0x2000008c
 80033a8:	20000060 	.word	0x20000060
 80033ac:	408f4000 	.word	0x408f4000
 80033b0:	20003dd8 	.word	0x20003dd8
 80033b4:	20000068 	.word	0x20000068
 80033b8:	20003de0 	.word	0x20003de0
 80033bc:	40590000 	.word	0x40590000
 80033c0:	20003e08 	.word	0x20003e08
 80033c4:	20003e10 	.word	0x20003e10
		{
			if(historic_largest_TDS[k]  > historic_TDS_max)   		historic_TDS_max 		  = historic_largest_TDS[k];	// find largest and smallest valuesin our data
 80033c8:	4a9b      	ldr	r2, [pc, #620]	; (8003638 <isStabalized+0x7b0>)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <isStabalized+0x7b4>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd fb57 	bl	8000a8c <__aeabi_dcmpgt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <isStabalized+0x56e>
 80033e4:	4a94      	ldr	r2, [pc, #592]	; (8003638 <isStabalized+0x7b0>)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	4992      	ldr	r1, [pc, #584]	; (800363c <isStabalized+0x7b4>)
 80033f2:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_TDS[k] < historic_TDS_min)  		historic_TDS_min		  = historic_smallest_TDS[k];
 80033f6:	4a92      	ldr	r2, [pc, #584]	; (8003640 <isStabalized+0x7b8>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003402:	4b90      	ldr	r3, [pc, #576]	; (8003644 <isStabalized+0x7bc>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fd fb22 	bl	8000a50 <__aeabi_dcmplt>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <isStabalized+0x59c>
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <isStabalized+0x7b8>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	4989      	ldr	r1, [pc, #548]	; (8003644 <isStabalized+0x7bc>)
 8003420:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_largest_pH[k]   > historic_pH_max )     	historic_pH_max  		  = historic_largest_pH[k];
 8003424:	4a88      	ldr	r2, [pc, #544]	; (8003648 <isStabalized+0x7c0>)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <isStabalized+0x7c4>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fd fb29 	bl	8000a8c <__aeabi_dcmpgt>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <isStabalized+0x5ca>
 8003440:	4a81      	ldr	r2, [pc, #516]	; (8003648 <isStabalized+0x7c0>)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	497f      	ldr	r1, [pc, #508]	; (800364c <isStabalized+0x7c4>)
 800344e:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_pH[k]  < historic_pH_min )    		historic_pH_min  		  = historic_smallest_pH[k];
 8003452:	4a7f      	ldr	r2, [pc, #508]	; (8003650 <isStabalized+0x7c8>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800345e:	4b7d      	ldr	r3, [pc, #500]	; (8003654 <isStabalized+0x7cc>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd faf4 	bl	8000a50 <__aeabi_dcmplt>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <isStabalized+0x5f8>
 800346e:	4a78      	ldr	r2, [pc, #480]	; (8003650 <isStabalized+0x7c8>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	4976      	ldr	r1, [pc, #472]	; (8003654 <isStabalized+0x7cc>)
 800347c:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   < historic_average_pH_min)  historic_average_pH_min   = historic_average_pH[k];
 8003480:	4a75      	ldr	r2, [pc, #468]	; (8003658 <isStabalized+0x7d0>)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <isStabalized+0x7d4>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd fadd 	bl	8000a50 <__aeabi_dcmplt>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <isStabalized+0x626>
 800349c:	4a6e      	ldr	r2, [pc, #440]	; (8003658 <isStabalized+0x7d0>)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	496c      	ldr	r1, [pc, #432]	; (800365c <isStabalized+0x7d4>)
 80034aa:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   > historic_average_pH_max)  historic_average_pH_max   = historic_average_pH[k];
 80034ae:	4a6a      	ldr	r2, [pc, #424]	; (8003658 <isStabalized+0x7d0>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ba:	4b69      	ldr	r3, [pc, #420]	; (8003660 <isStabalized+0x7d8>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd fae4 	bl	8000a8c <__aeabi_dcmpgt>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <isStabalized+0x654>
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <isStabalized+0x7d0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	4962      	ldr	r1, [pc, #392]	; (8003660 <isStabalized+0x7d8>)
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  < historic_average_TDS_min) historic_average_TDS_min  = historic_average_TDS[k];
 80034dc:	4a61      	ldr	r2, [pc, #388]	; (8003664 <isStabalized+0x7dc>)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e8:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <isStabalized+0x7e0>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd faaf 	bl	8000a50 <__aeabi_dcmplt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <isStabalized+0x682>
 80034f8:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <isStabalized+0x7dc>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	4958      	ldr	r1, [pc, #352]	; (8003668 <isStabalized+0x7e0>)
 8003506:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  > historic_average_TDS_max) historic_average_TDS_max  = historic_average_TDS[k];
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <isStabalized+0x7dc>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003516:	4b55      	ldr	r3, [pc, #340]	; (800366c <isStabalized+0x7e4>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd fab6 	bl	8000a8c <__aeabi_dcmpgt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <isStabalized+0x6b0>
 8003526:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <isStabalized+0x7dc>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	494e      	ldr	r1, [pc, #312]	; (800366c <isStabalized+0x7e4>)
 8003534:	e9c1 2300 	strd	r2, r3, [r1]

			slope_factor_average_TDS += (historic_average_TDS[k]-historic_average_TDS[k-1]);
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <isStabalized+0x7dc>)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	4a46      	ldr	r2, [pc, #280]	; (8003664 <isStabalized+0x7dc>)
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fc fe53 	bl	80001fc <__aeabi_dsub>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <isStabalized+0x7e8>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc fe4c 	bl	8000200 <__adddf3>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4940      	ldr	r1, [pc, #256]	; (8003670 <isStabalized+0x7e8>)
 800356e:	e9c1 2300 	strd	r2, r3, [r1]
			slope_factor_average_ph  += (historic_average_pH[k]-historic_average_pH[k-1]);
 8003572:	4a39      	ldr	r2, [pc, #228]	; (8003658 <isStabalized+0x7d0>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	4a35      	ldr	r2, [pc, #212]	; (8003658 <isStabalized+0x7d0>)
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fc fe36 	bl	80001fc <__aeabi_dsub>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <isStabalized+0x7ec>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fc fe2f 	bl	8000200 <__adddf3>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4933      	ldr	r1, [pc, #204]	; (8003674 <isStabalized+0x7ec>)
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <isStabalized+0x7f0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f6ff af05 	blt.w	80033c8 <isStabalized+0x540>
		}
		historic_range_pH  = historic_pH_max  - historic_pH_min;
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <isStabalized+0x7c4>)
 80035c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <isStabalized+0x7cc>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fc fe17 	bl	80001fc <__aeabi_dsub>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	492a      	ldr	r1, [pc, #168]	; (800367c <isStabalized+0x7f4>)
 80035d4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_range_TDS = historic_TDS_max - historic_TDS_min;
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <isStabalized+0x7b4>)
 80035da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <isStabalized+0x7bc>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc fe0a 	bl	80001fc <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4924      	ldr	r1, [pc, #144]	; (8003680 <isStabalized+0x7f8>)
 80035ee:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_range  = historic_average_pH_max  - historic_average_pH_min;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <isStabalized+0x7d8>)
 80035f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <isStabalized+0x7d4>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc fdfd 	bl	80001fc <__aeabi_dsub>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	491f      	ldr	r1, [pc, #124]	; (8003684 <isStabalized+0x7fc>)
 8003608:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_range = historic_average_TDS_max - historic_average_TDS_min;
 800360c:	4b17      	ldr	r3, [pc, #92]	; (800366c <isStabalized+0x7e4>)
 800360e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <isStabalized+0x7e0>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fdf0 	bl	80001fc <__aeabi_dsub>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4919      	ldr	r1, [pc, #100]	; (8003688 <isStabalized+0x800>)
 8003622:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(run_again != 2 && ( slope_factor_average_TDS > 1.5 ||  slope_factor_average_TDS < -1.5 || slope_factor_average_ph > 0.04 || slope_factor_average_ph < -0.04 || historic_sample_index <= 20 || TDS_range > 10.5 || pH_range > 0.25 || historic_average_pH_range > 0.05 || historic_average_pH_range < -0.05  || historic_range_pH > 0.30 || historic_range_pH < -0.30 || historic_range_TDS > 11 || historic_range_TDS < -11 || historic_average_TDS_range > 5.0 || historic_average_TDS_range < -5.0))
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <isStabalized+0x804>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b02      	cmp	r3, #2
 800362c:	f000 80d9 	beq.w	80037e2 <isStabalized+0x95a>
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <isStabalized+0x7e8>)
 8003632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003636:	e02b      	b.n	8003690 <isStabalized+0x808>
 8003638:	200024a8 	.word	0x200024a8
 800363c:	20003de8 	.word	0x20003de8
 8003640:	20002ae8 	.word	0x20002ae8
 8003644:	20003e00 	.word	0x20003e00
 8003648:	20001828 	.word	0x20001828
 800364c:	20003df0 	.word	0x20003df0
 8003650:	20001e68 	.word	0x20001e68
 8003654:	20003df8 	.word	0x20003df8
 8003658:	20003128 	.word	0x20003128
 800365c:	20000060 	.word	0x20000060
 8003660:	20003dd8 	.word	0x20003dd8
 8003664:	20003768 	.word	0x20003768
 8003668:	20000068 	.word	0x20000068
 800366c:	20003de0 	.word	0x20003de0
 8003670:	20003e08 	.word	0x20003e08
 8003674:	20003e10 	.word	0x20003e10
 8003678:	20004088 	.word	0x20004088
 800367c:	20003db8 	.word	0x20003db8
 8003680:	20003dc0 	.word	0x20003dc0
 8003684:	20003da8 	.word	0x20003da8
 8003688:	20003db0 	.word	0x20003db0
 800368c:	2000008c 	.word	0x2000008c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b72      	ldr	r3, [pc, #456]	; (8003860 <isStabalized+0x9d8>)
 8003696:	f7fd f9f9 	bl	8000a8c <__aeabi_dcmpgt>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 8094 	bne.w	80037ca <isStabalized+0x942>
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <isStabalized+0x9dc>)
 80036a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <isStabalized+0x9e0>)
 80036ae:	f7fd f9cf 	bl	8000a50 <__aeabi_dcmplt>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 8088 	bne.w	80037ca <isStabalized+0x942>
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <isStabalized+0x9e4>)
 80036bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c0:	a35b      	add	r3, pc, #364	; (adr r3, 8003830 <isStabalized+0x9a8>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fd f9e1 	bl	8000a8c <__aeabi_dcmpgt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d17c      	bne.n	80037ca <isStabalized+0x942>
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <isStabalized+0x9e4>)
 80036d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d6:	a358      	add	r3, pc, #352	; (adr r3, 8003838 <isStabalized+0x9b0>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fd f9b8 	bl	8000a50 <__aeabi_dcmplt>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d171      	bne.n	80037ca <isStabalized+0x942>
 80036e6:	4b62      	ldr	r3, [pc, #392]	; (8003870 <isStabalized+0x9e8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b14      	cmp	r3, #20
 80036ec:	dd6d      	ble.n	80037ca <isStabalized+0x942>
 80036ee:	4b61      	ldr	r3, [pc, #388]	; (8003874 <isStabalized+0x9ec>)
 80036f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <isStabalized+0x9f0>)
 80036fa:	f7fd f9c7 	bl	8000a8c <__aeabi_dcmpgt>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d162      	bne.n	80037ca <isStabalized+0x942>
 8003704:	4b5d      	ldr	r3, [pc, #372]	; (800387c <isStabalized+0x9f4>)
 8003706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	4b5c      	ldr	r3, [pc, #368]	; (8003880 <isStabalized+0x9f8>)
 8003710:	f7fd f9bc 	bl	8000a8c <__aeabi_dcmpgt>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d157      	bne.n	80037ca <isStabalized+0x942>
 800371a:	4b5a      	ldr	r3, [pc, #360]	; (8003884 <isStabalized+0x9fc>)
 800371c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003720:	a347      	add	r3, pc, #284	; (adr r3, 8003840 <isStabalized+0x9b8>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fd f9b1 	bl	8000a8c <__aeabi_dcmpgt>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14c      	bne.n	80037ca <isStabalized+0x942>
 8003730:	4b54      	ldr	r3, [pc, #336]	; (8003884 <isStabalized+0x9fc>)
 8003732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003736:	a344      	add	r3, pc, #272	; (adr r3, 8003848 <isStabalized+0x9c0>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fd f988 	bl	8000a50 <__aeabi_dcmplt>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d141      	bne.n	80037ca <isStabalized+0x942>
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <isStabalized+0xa00>)
 8003748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374c:	a340      	add	r3, pc, #256	; (adr r3, 8003850 <isStabalized+0x9c8>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fd f99b 	bl	8000a8c <__aeabi_dcmpgt>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d136      	bne.n	80037ca <isStabalized+0x942>
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <isStabalized+0xa00>)
 800375e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003762:	a33d      	add	r3, pc, #244	; (adr r3, 8003858 <isStabalized+0x9d0>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fd f972 	bl	8000a50 <__aeabi_dcmplt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12b      	bne.n	80037ca <isStabalized+0x942>
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <isStabalized+0xa04>)
 8003774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <isStabalized+0xa08>)
 800377e:	f7fd f985 	bl	8000a8c <__aeabi_dcmpgt>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d120      	bne.n	80037ca <isStabalized+0x942>
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <isStabalized+0xa04>)
 800378a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <isStabalized+0xa0c>)
 8003794:	f7fd f95c 	bl	8000a50 <__aeabi_dcmplt>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <isStabalized+0x942>
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <isStabalized+0xa10>)
 80037a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b3c      	ldr	r3, [pc, #240]	; (800389c <isStabalized+0xa14>)
 80037aa:	f7fd f96f 	bl	8000a8c <__aeabi_dcmpgt>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <isStabalized+0x942>
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <isStabalized+0xa10>)
 80037b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <isStabalized+0xa18>)
 80037c0:	f7fd f946 	bl	8000a50 <__aeabi_dcmplt>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <isStabalized+0x95a>
	{
 		valid = 0;
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <isStabalized+0xa1c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 		recheck_count++;
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <isStabalized+0xa20>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a34      	ldr	r2, [pc, #208]	; (80038a8 <isStabalized+0xa20>)
 80037d8:	6013      	str	r3, [r2, #0]
 		run_again = 2; 				// if the ph or TDS values are still changing check again, or the smallest value is at the beginning of the array, or the largest value is at the end of the array
 80037da:	4b34      	ldr	r3, [pc, #208]	; (80038ac <isStabalized+0xa24>)
 80037dc:	2202      	movs	r2, #2
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e012      	b.n	8003808 <isStabalized+0x980>
	}
	else if(run_again == 1)		    // we are stabilized however, the system could still be changing so we need to check how many times we re-sampled the water if its > 1 check until its 1
 80037e2:	4b32      	ldr	r3, [pc, #200]	; (80038ac <isStabalized+0xa24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10e      	bne.n	8003808 <isStabalized+0x980>
	{
		run_again = 0; 				// set run again to 0(no) however, if our validity is not high enough we will set run_again to 2(yes)
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <isStabalized+0xa24>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
		valid++;
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <isStabalized+0xa1c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <isStabalized+0xa1c>)
 80037f8:	6013      	str	r3, [r2, #0]
		if(valid < 10) run_again = 2;			// if we have not completed three valid runs in a row re-run
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <isStabalized+0xa1c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	dc02      	bgt.n	8003808 <isStabalized+0x980>
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <isStabalized+0xa24>)
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
	}
	if(run_again == 1) run_again = 0;
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <isStabalized+0xa24>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d103      	bne.n	8003818 <isStabalized+0x990>
 8003810:	4b26      	ldr	r3, [pc, #152]	; (80038ac <isStabalized+0xa24>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
	else if (run_again == 2) run_again = 1;
}
 8003816:	e006      	b.n	8003826 <isStabalized+0x99e>
	else if (run_again == 2) run_again = 1;
 8003818:	4b24      	ldr	r3, [pc, #144]	; (80038ac <isStabalized+0xa24>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d102      	bne.n	8003826 <isStabalized+0x99e>
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <isStabalized+0xa24>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bdb0      	pop	{r4, r5, r7, pc}
 800382e:	bf00      	nop
 8003830:	47ae147b 	.word	0x47ae147b
 8003834:	3fa47ae1 	.word	0x3fa47ae1
 8003838:	47ae147b 	.word	0x47ae147b
 800383c:	bfa47ae1 	.word	0xbfa47ae1
 8003840:	9999999a 	.word	0x9999999a
 8003844:	3fa99999 	.word	0x3fa99999
 8003848:	9999999a 	.word	0x9999999a
 800384c:	bfa99999 	.word	0xbfa99999
 8003850:	33333333 	.word	0x33333333
 8003854:	3fd33333 	.word	0x3fd33333
 8003858:	33333333 	.word	0x33333333
 800385c:	bfd33333 	.word	0xbfd33333
 8003860:	3ff80000 	.word	0x3ff80000
 8003864:	20003e08 	.word	0x20003e08
 8003868:	bff80000 	.word	0xbff80000
 800386c:	20003e10 	.word	0x20003e10
 8003870:	20004088 	.word	0x20004088
 8003874:	20004018 	.word	0x20004018
 8003878:	40250000 	.word	0x40250000
 800387c:	20004020 	.word	0x20004020
 8003880:	3fd00000 	.word	0x3fd00000
 8003884:	20003da8 	.word	0x20003da8
 8003888:	20003db8 	.word	0x20003db8
 800388c:	20003dc0 	.word	0x20003dc0
 8003890:	40260000 	.word	0x40260000
 8003894:	c0260000 	.word	0xc0260000
 8003898:	20003db0 	.word	0x20003db0
 800389c:	40140000 	.word	0x40140000
 80038a0:	c0140000 	.word	0xc0140000
 80038a4:	20004084 	.word	0x20004084
 80038a8:	20004080 	.word	0x20004080
 80038ac:	2000008c 	.word	0x2000008c

080038b0 <waitForWaterToStabilize>:

int waitForWaterToStabilize() // Returns the total time in seconds
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	getTime();
 80038b4:	f7fd fcba 	bl	800122c <getTime>
	eq_start_time_sec = sTime.Seconds + sTime.Minutes*60;
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038ba:	789b      	ldrb	r3, [r3, #2]
 80038bc:	4619      	mov	r1, r3
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	4a20      	ldr	r2, [pc, #128]	; (8003950 <waitForWaterToStabilize+0xa0>)
 80038d0:	6013      	str	r3, [r2, #0]

	while(run_again > 0)
 80038d2:	e005      	b.n	80038e0 <waitForWaterToStabilize+0x30>
	{
		isStabalized();// if we are not stabilized wait until we are
 80038d4:	f7ff fad8 	bl	8002e88 <isStabalized>
		osDelay(2000);
 80038d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038dc:	f00f f8c7 	bl	8012a6e <osDelay>
	while(run_again > 0)
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <waitForWaterToStabilize+0xa4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	dcf5      	bgt.n	80038d4 <waitForWaterToStabilize+0x24>
	}
	getTime();
 80038e8:	f7fd fca0 	bl	800122c <getTime>
	eq_end_time_sec = sTime.Seconds + sTime.Minutes*60;
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <waitForWaterToStabilize+0xa8>)
 8003904:	6013      	str	r3, [r2, #0]
	if(eq_start_time_sec > eq_end_time_sec) total_time_seconds = (3600-eq_start_time_sec)+eq_end_time_sec;	// if seconds rolled over we cannot just subtract since we will get a negative
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <waitForWaterToStabilize+0xa0>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <waitForWaterToStabilize+0xa8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	dd09      	ble.n	8003926 <waitForWaterToStabilize+0x76>
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <waitForWaterToStabilize+0xa0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f5c3 6261 	rsb	r2, r3, #3600	; 0xe10
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <waitForWaterToStabilize+0xa8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <waitForWaterToStabilize+0xac>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e006      	b.n	8003934 <waitForWaterToStabilize+0x84>
	else total_time_seconds = eq_end_time_sec-eq_start_time_sec;	// else we did not roll over so total seconds is end time - start time
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <waitForWaterToStabilize+0xa8>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <waitForWaterToStabilize+0xa0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <waitForWaterToStabilize+0xac>)
 8003932:	6013      	str	r3, [r2, #0]

	stability_value = 0;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <waitForWaterToStabilize+0xb0>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
	recheck_count = 0;
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <waitForWaterToStabilize+0xb4>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
	resetStabilityVars();
 8003940:	f7ff fa2a 	bl	8002d98 <resetStabilityVars>
	return (total_time_seconds);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <waitForWaterToStabilize+0xac>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20005458 	.word	0x20005458
 8003950:	20004070 	.word	0x20004070
 8003954:	2000008c 	.word	0x2000008c
 8003958:	2000406c 	.word	0x2000406c
 800395c:	20004078 	.word	0x20004078
 8003960:	20000084 	.word	0x20000084
 8003964:	20004080 	.word	0x20004080

08003968 <waterTempControl>:

void waterTempControl()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	temp_up = 'n';
 800396c:	4b74      	ldr	r3, [pc, #464]	; (8003b40 <waterTempControl+0x1d8>)
 800396e:	226e      	movs	r2, #110	; 0x6e
 8003970:	701a      	strb	r2, [r3, #0]
	temp_down = 'n';
 8003972:	4b74      	ldr	r3, [pc, #464]	; (8003b44 <waterTempControl+0x1dc>)
 8003974:	226e      	movs	r2, #110	; 0x6e
 8003976:	701a      	strb	r2, [r3, #0]

	if(setting_water_temp == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8003978:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <waterTempControl+0x1e0>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b6e      	cmp	r3, #110	; 0x6e
 800397e:	d145      	bne.n	8003a0c <waterTempControl+0xa4>
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_check) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003980:	4b72      	ldr	r3, [pc, #456]	; (8003b4c <waterTempControl+0x1e4>)
 8003982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003986:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <waterTempControl+0x1e8>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fd f87e 	bl	8000a8c <__aeabi_dcmpgt>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <waterTempControl+0x5e>
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <waterTempControl+0x1e4>)
 8003998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399c:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <waterTempControl+0x1ec>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fc2b 	bl	80001fc <__aeabi_dsub>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4b68      	ldr	r3, [pc, #416]	; (8003b50 <waterTempControl+0x1e8>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fd f86a 	bl	8000a8c <__aeabi_dcmpgt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <waterTempControl+0x5e>
 80039be:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <waterTempControl+0x1dc>)
 80039c0:	2279      	movs	r2, #121	; 0x79
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e067      	b.n	8003a96 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_check) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <waterTempControl+0x1e4>)
 80039c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039cc:	4b60      	ldr	r3, [pc, #384]	; (8003b50 <waterTempControl+0x1e8>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fd f83d 	bl	8000a50 <__aeabi_dcmplt>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05c      	beq.n	8003a96 <waterTempControl+0x12e>
 80039dc:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <waterTempControl+0x1e4>)
 80039de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <waterTempControl+0x1ec>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fc0a 	bl	8000200 <__adddf3>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	4b56      	ldr	r3, [pc, #344]	; (8003b50 <waterTempControl+0x1e8>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fd f829 	bl	8000a50 <__aeabi_dcmplt>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d048      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a04:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <waterTempControl+0x1d8>)
 8003a06:	2279      	movs	r2, #121	; 0x79
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e044      	b.n	8003a96 <waterTempControl+0x12e>
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_set) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <waterTempControl+0x1e4>)
 8003a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a12:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <waterTempControl+0x1e8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fd f838 	bl	8000a8c <__aeabi_dcmpgt>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <waterTempControl+0xea>
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <waterTempControl+0x1e4>)
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <waterTempControl+0x1f0>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fbe5 	bl	80001fc <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <waterTempControl+0x1e8>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fd f824 	bl	8000a8c <__aeabi_dcmpgt>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <waterTempControl+0xea>
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <waterTempControl+0x1dc>)
 8003a4c:	2279      	movs	r2, #121	; 0x79
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e021      	b.n	8003a96 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_set) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <waterTempControl+0x1e4>)
 8003a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <waterTempControl+0x1e8>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fff7 	bl	8000a50 <__aeabi_dcmplt>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <waterTempControl+0x1e4>)
 8003a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <waterTempControl+0x1f0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbc4 	bl	8000200 <__adddf3>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <waterTempControl+0x1e8>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc ffe3 	bl	8000a50 <__aeabi_dcmplt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <waterTempControl+0x1d8>)
 8003a92:	2279      	movs	r2, #121	; 0x79
 8003a94:	701a      	strb	r2, [r3, #0]
	}

	if((temp_up == 'y' || temp_down == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <waterTempControl+0x1d8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b79      	cmp	r3, #121	; 0x79
 8003a9c:	d003      	beq.n	8003aa6 <waterTempControl+0x13e>
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <waterTempControl+0x1dc>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b79      	cmp	r3, #121	; 0x79
 8003aa4:	d103      	bne.n	8003aae <waterTempControl+0x146>
	{
		setting_water_temp = 'y';
 8003aa6:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <waterTempControl+0x1e0>)
 8003aa8:	2279      	movs	r2, #121	; 0x79
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e002      	b.n	8003ab4 <waterTempControl+0x14c>
	}
	else setting_water_temp = 'n';
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <waterTempControl+0x1e0>)
 8003ab0:	226e      	movs	r2, #110	; 0x6e
 8003ab2:	701a      	strb	r2, [r3, #0]

	if(temp_up == 'y' && heat_on == 'n')
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <waterTempControl+0x1d8>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b79      	cmp	r3, #121	; 0x79
 8003aba:	d111      	bne.n	8003ae0 <waterTempControl+0x178>
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <waterTempControl+0x1f4>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ac2:	d10d      	bne.n	8003ae0 <waterTempControl+0x178>
	{
		heatOn();	// if we need heat the water turn on the heater
 8003ac4:	f7fd fcf2 	bl	80014ac <heatOn>
		setFanSpeed(3.5,3.5,3.5);
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <waterTempControl+0x1f8>)
 8003aca:	4925      	ldr	r1, [pc, #148]	; (8003b60 <waterTempControl+0x1f8>)
 8003acc:	4824      	ldr	r0, [pc, #144]	; (8003b60 <waterTempControl+0x1f8>)
 8003ace:	f7fd fca9 	bl	8001424 <setFanSpeed>
		heat_on = 'y';
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <waterTempControl+0x1f4>)
 8003ad4:	2279      	movs	r2, #121	; 0x79
 8003ad6:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <waterTempControl+0x1fc>)
 8003ada:	226e      	movs	r2, #110	; 0x6e
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e02c      	b.n	8003b3a <waterTempControl+0x1d2>
	}
	else if(temp_down == 'y' && cool_on == 'n')
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <waterTempControl+0x1dc>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b79      	cmp	r3, #121	; 0x79
 8003ae6:	d111      	bne.n	8003b0c <waterTempControl+0x1a4>
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <waterTempControl+0x1fc>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b6e      	cmp	r3, #110	; 0x6e
 8003aee:	d10d      	bne.n	8003b0c <waterTempControl+0x1a4>
	{
		coolOn();	// if we need cool the water turn on the cooler
 8003af0:	f7fd fd04 	bl	80014fc <coolOn>
		setFanSpeed(3.5,3.5,2.5);
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <waterTempControl+0x200>)
 8003af6:	491a      	ldr	r1, [pc, #104]	; (8003b60 <waterTempControl+0x1f8>)
 8003af8:	4819      	ldr	r0, [pc, #100]	; (8003b60 <waterTempControl+0x1f8>)
 8003afa:	f7fd fc93 	bl	8001424 <setFanSpeed>
		cool_on = 'y';
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <waterTempControl+0x1fc>)
 8003b00:	2279      	movs	r2, #121	; 0x79
 8003b02:	701a      	strb	r2, [r3, #0]
		heat_on = 'n';
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <waterTempControl+0x1f4>)
 8003b06:	226e      	movs	r2, #110	; 0x6e
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e016      	b.n	8003b3a <waterTempControl+0x1d2>
	}
	else if(temp_up == 'n' && temp_down == 'n')
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <waterTempControl+0x1d8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b6e      	cmp	r3, #110	; 0x6e
 8003b12:	d112      	bne.n	8003b3a <waterTempControl+0x1d2>
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <waterTempControl+0x1dc>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b6e      	cmp	r3, #110	; 0x6e
 8003b1a:	d10e      	bne.n	8003b3a <waterTempControl+0x1d2>
	{
		heat_on = 'n';
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <waterTempControl+0x1f4>)
 8003b1e:	226e      	movs	r2, #110	; 0x6e
 8003b20:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <waterTempControl+0x1fc>)
 8003b24:	226e      	movs	r2, #110	; 0x6e
 8003b26:	701a      	strb	r2, [r3, #0]
		heatCoolOff();
 8003b28:	f7fd fcd6 	bl	80014d8 <heatCoolOff>
		setFanSpeed(3.5,3.5,0);
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	490b      	ldr	r1, [pc, #44]	; (8003b60 <waterTempControl+0x1f8>)
 8003b32:	480b      	ldr	r0, [pc, #44]	; (8003b60 <waterTempControl+0x1f8>)
 8003b34:	f7fd fc76 	bl	8001424 <setFanSpeed>
	}
}
 8003b38:	e7ff      	b.n	8003b3a <waterTempControl+0x1d2>
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000209 	.word	0x20000209
 8003b44:	2000543c 	.word	0x2000543c
 8003b48:	20000202 	.word	0x20000202
 8003b4c:	20001810 	.word	0x20001810
 8003b50:	20000028 	.word	0x20000028
 8003b54:	20000038 	.word	0x20000038
 8003b58:	20000030 	.word	0x20000030
 8003b5c:	20000200 	.word	0x20000200
 8003b60:	40600000 	.word	0x40600000
 8003b64:	20000201 	.word	0x20000201
 8003b68:	40200000 	.word	0x40200000

08003b6c <systemControl>:

void systemControl()
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af02      	add	r7, sp, #8

	if(run_once == 'n')
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <systemControl+0x54>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b6e      	cmp	r3, #110	; 0x6e
 8003b78:	d11a      	bne.n	8003bb0 <systemControl+0x44>
	{
		//doseWater(100,100,100);
		run_once = 'y';
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <systemControl+0x54>)
 8003b7c:	2279      	movs	r2, #121	; 0x79
 8003b7e:	701a      	strb	r2, [r3, #0]
		fanOn();
 8003b80:	f7fd fbb0 	bl	80012e4 <fanOn>
		setFanSpeed(3.5,3.5,0);
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <systemControl+0x58>)
 8003b8a:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <systemControl+0x58>)
 8003b8c:	f7fd fc4a 	bl	8001424 <setFanSpeed>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8003b90:	2300      	movs	r3, #0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2309      	movs	r3, #9
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	2108      	movs	r1, #8
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fd fb58 	bl	8001254 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8003ba4:	230a      	movs	r3, #10
 8003ba6:	2213      	movs	r2, #19
 8003ba8:	2109      	movs	r1, #9
 8003baa:	2013      	movs	r0, #19
 8003bac:	f000 f80c 	bl	8003bc8 <setLightCyle>
		//doseWater(100,100,100);
	}

	getSensorValues();
 8003bb0:	f001 fd14 	bl	80055dc <getSensorValues>
	balancePhAndNutrient();
 8003bb4:	f7fe fd48 	bl	8002648 <balancePhAndNutrient>
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000203 	.word	0x20000203
 8003bc4:	40600000 	.word	0x40600000

08003bc8 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8003bc8:	b490      	push	{r4, r7}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	71fb      	strb	r3, [r7, #7]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71bb      	strb	r3, [r7, #6]
 8003bde:	460b      	mov	r3, r1
 8003be0:	717b      	strb	r3, [r7, #5]
 8003be2:	4613      	mov	r3, r2
 8003be4:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <setLightCyle+0x40>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8003bec:	4a06      	ldr	r2, [pc, #24]	; (8003c08 <setLightCyle+0x40>)
 8003bee:	79bb      	ldrb	r3, [r7, #6]
 8003bf0:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8003bf2:	4a06      	ldr	r2, [pc, #24]	; (8003c0c <setLightCyle+0x44>)
 8003bf4:	797b      	ldrb	r3, [r7, #5]
 8003bf6:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <setLightCyle+0x44>)
 8003bfa:	793b      	ldrb	r3, [r7, #4]
 8003bfc:	7053      	strb	r3, [r2, #1]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc90      	pop	{r4, r7}
 8003c06:	4770      	bx	lr
 8003c08:	20005440 	.word	0x20005440
 8003c0c:	2000544c 	.word	0x2000544c

08003c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b08e      	sub	sp, #56	; 0x38
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c16:	f002 f9e1 	bl	8005fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c1a:	f000 f84b 	bl	8003cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c1e:	f000 fb3d 	bl	800429c <MX_GPIO_Init>
  MX_TIM1_Init();
 8003c22:	f000 f999 	bl	8003f58 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003c26:	f000 fa43 	bl	80040b0 <MX_TIM4_Init>
  MX_TIM10_Init();
 8003c2a:	f000 fa8f 	bl	800414c <MX_TIM10_Init>
  MX_RTC_Init();
 8003c2e:	f000 f901 	bl	8003e34 <MX_RTC_Init>
  MX_TIM12_Init();
 8003c32:	f000 fad9 	bl	80041e8 <MX_TIM12_Init>
  MX_FATFS_Init();
 8003c36:	f008 fcf1 	bl	800c61c <MX_FATFS_Init>
  MX_DMA_Init();
 8003c3a:	f000 fb0f 	bl	800425c <MX_DMA_Init>
  MX_ADC1_Init();
 8003c3e:	f000 f899 	bl	8003d74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 // (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
//HAL_DMA_RegisterCallback(&hdma_adc2,HAL_DMA_XFER_CPLT_CB_ID,&DMATransferComplete);
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&nutrient_ph_values, 80);
 8003c42:	2250      	movs	r2, #80	; 0x50
 8003c44:	4915      	ldr	r1, [pc, #84]	; (8003c9c <main+0x8c>)
 8003c46:	4816      	ldr	r0, [pc, #88]	; (8003ca0 <main+0x90>)
 8003c48:	f002 fbae 	bl	80063a8 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityNormal, 0, 3100, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <main+0x94>)
 8003c4e:	f107 041c 	add.w	r4, r7, #28
 8003c52:	461d      	mov	r5, r3
 8003c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f00e feb5 	bl	80129d6 <osThreadCreate>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <main+0x98>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebAppCom */
  osThreadStaticDef(WebAppCom, StartWebAppCom, osPriorityNormal, 0, 1024, myTask02Buffer, &myTask02ControlBlock);
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <main+0x9c>)
 8003c74:	463c      	mov	r4, r7
 8003c76:	461d      	mov	r5, r3
 8003c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebAppComHandle = osThreadCreate(osThread(WebAppCom), NULL);
 8003c84:	463b      	mov	r3, r7
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f00e fea4 	bl	80129d6 <osThreadCreate>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <main+0xa0>)
 8003c92:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003c94:	f00e fe98 	bl	80129c8 <osKernelStart>
  GPIO_InitStruct.Pull = GPIO_NOPULL;


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
 8003c98:	e7fe      	b.n	8003c98 <main+0x88>
 8003c9a:	bf00      	nop
 8003c9c:	20005468 	.word	0x20005468
 8003ca0:	2000982c 	.word	0x2000982c
 8003ca4:	0801a5f8 	.word	0x0801a5f8
 8003ca8:	20009630 	.word	0x20009630
 8003cac:	0801a614 	.word	0x0801a614
 8003cb0:	2000c8e4 	.word	0x2000c8e4

08003cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b096      	sub	sp, #88	; 0x58
 8003cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cbe:	2230      	movs	r2, #48	; 0x30
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f012 f8fc 	bl	8015ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cd8:	463b      	mov	r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cea:	2301      	movs	r3, #1
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cee:	2310      	movs	r3, #16
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003d02:	23d8      	movs	r3, #216	; 0xd8
 8003d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003d06:	2306      	movs	r3, #6
 8003d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003d0a:	2309      	movs	r3, #9
 8003d0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d12:	4618      	mov	r0, r3
 8003d14:	f005 fa8c 	bl	8009230 <HAL_RCC_OscConfig>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003d1e:	f000 fbbb 	bl	8004498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d22:	230f      	movs	r3, #15
 8003d24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d26:	2302      	movs	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 fcc5 	bl	80096d0 <HAL_RCC_ClockConfig>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003d4c:	f000 fba4 	bl	8004498 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d50:	2304      	movs	r3, #4
 8003d52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f005 feb5 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003d68:	f000 fb96 	bl	8004498 <Error_Handler>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3758      	adds	r7, #88	; 0x58
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003d88:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <MX_ADC1_Init+0xb8>)
 8003d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003d8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <MX_ADC1_Init+0xbc>)
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003dd4:	4814      	ldr	r0, [pc, #80]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003dd6:	f002 f963 	bl	80060a0 <HAL_ADC_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003de0:	f000 fb5a 	bl	8004498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003de4:	2305      	movs	r3, #5
 8003de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003de8:	2301      	movs	r3, #1
 8003dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003dec:	2307      	movs	r3, #7
 8003dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003df0:	463b      	mov	r3, r7
 8003df2:	4619      	mov	r1, r3
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003df6:	f002 fbd1 	bl	800659c <HAL_ADC_ConfigChannel>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e00:	f000 fb4a 	bl	8004498 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003e04:	2304      	movs	r3, #4
 8003e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_ADC1_Init+0xb4>)
 8003e12:	f002 fbc3 	bl	800659c <HAL_ADC_ConfigChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003e1c:	f000 fb3c 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	2000982c 	.word	0x2000982c
 8003e2c:	40012000 	.word	0x40012000
 8003e30:	0f000001 	.word	0x0f000001

08003e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	; 0x30
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
 8003e58:	615a      	str	r2, [r3, #20]
 8003e5a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e5c:	4b3c      	ldr	r3, [pc, #240]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <MX_RTC_Init+0x120>)
 8003e60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e68:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e6a:	227f      	movs	r2, #127	; 0x7f
 8003e6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e86:	4832      	ldr	r0, [pc, #200]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003e88:	f005 ff16 	bl	8009cb8 <HAL_RTC_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8003e92:	f000 fb01 	bl	8004498 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4825      	ldr	r0, [pc, #148]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003eba:	f005 ff87 	bl	8009dcc <HAL_RTC_SetTime>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8003ec4:	f000 fae8 	bl	8004498 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ee0:	f107 0320 	add.w	r3, r7, #32
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4819      	ldr	r0, [pc, #100]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003eea:	f006 f877 	bl	8009fdc <HAL_RTC_SetDate>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003ef4:	f000 fad0 	bl	8004498 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8003f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f1c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	2201      	movs	r2, #1
 8003f22:	4619      	mov	r1, r3
 8003f24:	480a      	ldr	r0, [pc, #40]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003f26:	f006 f948 	bl	800a1ba <HAL_RTC_SetAlarm>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8003f30:	f000 fab2 	bl	8004498 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003f34:	2200      	movs	r2, #0
 8003f36:	2100      	movs	r1, #0
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <MX_RTC_Init+0x11c>)
 8003f3a:	f006 fad2 	bl	800a4e2 <HAL_RTCEx_SetWakeUpTimer>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8003f44:	f000 faa8 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f48:	bf00      	nop
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2000c948 	.word	0x2000c948
 8003f54:	40002800 	.word	0x40002800

08003f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b096      	sub	sp, #88	; 0x58
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	615a      	str	r2, [r3, #20]
 8003f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f011 ff95 	bl	8015ec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003f98:	4a44      	ldr	r2, [pc, #272]	; (80040ac <MX_TIM1_Init+0x154>)
 8003f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fbc:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fc2:	4839      	ldr	r0, [pc, #228]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fc4:	f006 fb21 	bl	800a60a <HAL_TIM_Base_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003fce:	f000 fa63 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4832      	ldr	r0, [pc, #200]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003fe0:	f006 feb6 	bl	800ad50 <HAL_TIM_ConfigClockSource>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003fea:	f000 fa55 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fee:	482e      	ldr	r0, [pc, #184]	; (80040a8 <MX_TIM1_Init+0x150>)
 8003ff0:	f006 fbc8 	bl	800a784 <HAL_TIM_PWM_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003ffa:	f000 fa4d 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800400a:	4619      	mov	r1, r3
 800400c:	4826      	ldr	r0, [pc, #152]	; (80040a8 <MX_TIM1_Init+0x150>)
 800400e:	f007 fa8b 	bl	800b528 <HAL_TIMEx_MasterConfigSynchronization>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004018:	f000 fa3e 	bl	8004498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800401c:	2360      	movs	r3, #96	; 0x60
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004028:	2300      	movs	r3, #0
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800402c:	2304      	movs	r3, #4
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004030:	2300      	movs	r3, #0
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403c:	2200      	movs	r2, #0
 800403e:	4619      	mov	r1, r3
 8004040:	4819      	ldr	r0, [pc, #100]	; (80040a8 <MX_TIM1_Init+0x150>)
 8004042:	f006 fdc7 	bl	800abd4 <HAL_TIM_PWM_ConfigChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800404c:	f000 fa24 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004054:	2208      	movs	r2, #8
 8004056:	4619      	mov	r1, r3
 8004058:	4813      	ldr	r0, [pc, #76]	; (80040a8 <MX_TIM1_Init+0x150>)
 800405a:	f006 fdbb 	bl	800abd4 <HAL_TIM_PWM_ConfigChannel>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004064:	f000 fa18 	bl	8004498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800407c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004080:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4807      	ldr	r0, [pc, #28]	; (80040a8 <MX_TIM1_Init+0x150>)
 800408c:	f007 fac6 	bl	800b61c <HAL_TIMEx_ConfigBreakDeadTime>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8004096:	f000 f9ff 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800409a:	4803      	ldr	r0, [pc, #12]	; (80040a8 <MX_TIM1_Init+0x150>)
 800409c:	f001 fc6c 	bl	8005978 <HAL_TIM_MspPostInit>

}
 80040a0:	bf00      	nop
 80040a2:	3758      	adds	r7, #88	; 0x58
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	2000c97c 	.word	0x2000c97c
 80040ac:	40010000 	.word	0x40010000

080040b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c4:	463b      	mov	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <MX_TIM4_Init+0x94>)
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <MX_TIM4_Init+0x98>)
 80040d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <MX_TIM4_Init+0x94>)
 80040d4:	2223      	movs	r2, #35	; 0x23
 80040d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <MX_TIM4_Init+0x94>)
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80040de:	4b19      	ldr	r3, [pc, #100]	; (8004144 <MX_TIM4_Init+0x94>)
 80040e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <MX_TIM4_Init+0x94>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <MX_TIM4_Init+0x94>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80040f2:	4814      	ldr	r0, [pc, #80]	; (8004144 <MX_TIM4_Init+0x94>)
 80040f4:	f006 fa89 	bl	800a60a <HAL_TIM_Base_Init>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80040fe:	f000 f9cb 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004108:	f107 0308 	add.w	r3, r7, #8
 800410c:	4619      	mov	r1, r3
 800410e:	480d      	ldr	r0, [pc, #52]	; (8004144 <MX_TIM4_Init+0x94>)
 8004110:	f006 fe1e 	bl	800ad50 <HAL_TIM_ConfigClockSource>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800411a:	f000 f9bd 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004126:	463b      	mov	r3, r7
 8004128:	4619      	mov	r1, r3
 800412a:	4806      	ldr	r0, [pc, #24]	; (8004144 <MX_TIM4_Init+0x94>)
 800412c:	f007 f9fc 	bl	800b528 <HAL_TIMEx_MasterConfigSynchronization>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004136:	f000 f9af 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2000979c 	.word	0x2000979c
 8004148:	40000800 	.word	0x40000800

0800414c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	611a      	str	r2, [r3, #16]
 8004160:	615a      	str	r2, [r3, #20]
 8004162:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004164:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <MX_TIM10_Init+0x94>)
 8004166:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <MX_TIM10_Init+0x98>)
 8004168:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <MX_TIM10_Init+0x94>)
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <MX_TIM10_Init+0x94>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <MX_TIM10_Init+0x94>)
 8004178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800417c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <MX_TIM10_Init+0x94>)
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <MX_TIM10_Init+0x94>)
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800418a:	4815      	ldr	r0, [pc, #84]	; (80041e0 <MX_TIM10_Init+0x94>)
 800418c:	f006 fa3d 	bl	800a60a <HAL_TIM_Base_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004196:	f000 f97f 	bl	8004498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800419a:	4811      	ldr	r0, [pc, #68]	; (80041e0 <MX_TIM10_Init+0x94>)
 800419c:	f006 faf2 	bl	800a784 <HAL_TIM_PWM_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80041a6:	f000 f977 	bl	8004498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041aa:	2360      	movs	r3, #96	; 0x60
 80041ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	2200      	movs	r2, #0
 80041be:	4619      	mov	r1, r3
 80041c0:	4807      	ldr	r0, [pc, #28]	; (80041e0 <MX_TIM10_Init+0x94>)
 80041c2:	f006 fd07 	bl	800abd4 <HAL_TIM_PWM_ConfigChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80041cc:	f000 f964 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80041d0:	4803      	ldr	r0, [pc, #12]	; (80041e0 <MX_TIM10_Init+0x94>)
 80041d2:	f001 fbd1 	bl	8005978 <HAL_TIM_MspPostInit>

}
 80041d6:	bf00      	nop
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200097e4 	.word	0x200097e4
 80041e4:	40014400 	.word	0x40014400

080041e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ee:	463b      	mov	r3, r7
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <MX_TIM12_Init+0x6c>)
 80041fc:	4a16      	ldr	r2, [pc, #88]	; (8004258 <MX_TIM12_Init+0x70>)
 80041fe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <MX_TIM12_Init+0x6c>)
 8004202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004206:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <MX_TIM12_Init+0x6c>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MX_TIM12_Init+0x6c>)
 8004210:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8004214:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <MX_TIM12_Init+0x6c>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <MX_TIM12_Init+0x6c>)
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004222:	480c      	ldr	r0, [pc, #48]	; (8004254 <MX_TIM12_Init+0x6c>)
 8004224:	f006 f9f1 	bl	800a60a <HAL_TIM_Base_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800422e:	f000 f933 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004236:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004238:	463b      	mov	r3, r7
 800423a:	4619      	mov	r1, r3
 800423c:	4805      	ldr	r0, [pc, #20]	; (8004254 <MX_TIM12_Init+0x6c>)
 800423e:	f006 fd87 	bl	800ad50 <HAL_TIM_ConfigClockSource>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004248:	f000 f926 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2000c9c4 	.word	0x2000c9c4
 8004258:	40001800 	.word	0x40001800

0800425c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <MX_DMA_Init+0x3c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <MX_DMA_Init+0x3c>)
 800426c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <MX_DMA_Init+0x3c>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2105      	movs	r1, #5
 8004282:	2038      	movs	r0, #56	; 0x38
 8004284:	f002 fcf1 	bl	8006c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004288:	2038      	movs	r0, #56	; 0x38
 800428a:	f002 fd0a 	bl	8006ca2 <HAL_NVIC_EnableIRQ>

}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800

0800429c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042bc:	f043 0310 	orr.w	r3, r3, #16
 80042c0:	6313      	str	r3, [r2, #48]	; 0x30
 80042c2:	4b55      	ldr	r3, [pc, #340]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b51      	ldr	r3, [pc, #324]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a50      	ldr	r2, [pc, #320]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a49      	ldr	r2, [pc, #292]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <MX_GPIO_Init+0x17c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	4b43      	ldr	r3, [pc, #268]	; (8004418 <MX_GPIO_Init+0x17c>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	4a42      	ldr	r2, [pc, #264]	; (8004418 <MX_GPIO_Init+0x17c>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6313      	str	r3, [r2, #48]	; 0x30
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <MX_GPIO_Init+0x17c>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <MX_GPIO_Init+0x17c>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <MX_GPIO_Init+0x17c>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <MX_GPIO_Init+0x17c>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 800433e:	2201      	movs	r2, #1
 8004340:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8004344:	4835      	ldr	r0, [pc, #212]	; (800441c <MX_GPIO_Init+0x180>)
 8004346:	f003 f9dc 	bl	8007702 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800434a:	2200      	movs	r2, #0
 800434c:	2104      	movs	r1, #4
 800434e:	4834      	ldr	r0, [pc, #208]	; (8004420 <MX_GPIO_Init+0x184>)
 8004350:	f003 f9d7 	bl	8007702 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8004354:	2200      	movs	r2, #0
 8004356:	2140      	movs	r1, #64	; 0x40
 8004358:	4832      	ldr	r0, [pc, #200]	; (8004424 <MX_GPIO_Init+0x188>)
 800435a:	f003 f9d2 	bl	8007702 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 800435e:	2200      	movs	r2, #0
 8004360:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004364:	482d      	ldr	r0, [pc, #180]	; (800441c <MX_GPIO_Init+0x180>)
 8004366:	f003 f9cc 	bl	8007702 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 800436a:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800436e:	617b      	str	r3, [r7, #20]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004370:	2301      	movs	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004378:	2303      	movs	r3, #3
 800437a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4619      	mov	r1, r3
 8004382:	4826      	ldr	r0, [pc, #152]	; (800441c <MX_GPIO_Init+0x180>)
 8004384:	f003 f808 	bl	8007398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004388:	2304      	movs	r3, #4
 800438a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438c:	2301      	movs	r3, #1
 800438e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004394:	2300      	movs	r3, #0
 8004396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4619      	mov	r1, r3
 800439e:	4820      	ldr	r0, [pc, #128]	; (8004420 <MX_GPIO_Init+0x184>)
 80043a0:	f002 fffa 	bl	8007398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80043a4:	2320      	movs	r3, #32
 80043a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043a8:	2303      	movs	r3, #3
 80043aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	481b      	ldr	r0, [pc, #108]	; (8004424 <MX_GPIO_Init+0x188>)
 80043b8:	f002 ffee 	bl	8007398 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2300      	movs	r3, #0
 80043ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4619      	mov	r1, r3
 80043d2:	4814      	ldr	r0, [pc, #80]	; (8004424 <MX_GPIO_Init+0x188>)
 80043d4:	f002 ffe0 	bl	8007398 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 80043d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80043dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	4619      	mov	r1, r3
 80043f0:	480a      	ldr	r0, [pc, #40]	; (800441c <MX_GPIO_Init+0x180>)
 80043f2:	f002 ffd1 	bl	8007398 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 80043f6:	2302      	movs	r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	4619      	mov	r1, r3
 8004408:	4804      	ldr	r0, [pc, #16]	; (800441c <MX_GPIO_Init+0x180>)
 800440a:	f002 ffc5 	bl	8007398 <HAL_GPIO_Init>

}
 800440e:	bf00      	nop
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	40021000 	.word	0x40021000
 8004420:	40020800 	.word	0x40020800
 8004424:	40020000 	.word	0x40020000

08004428 <HAL_ADC_ConvCpltCallback>:



char retrieved_ADC_values = 'n';
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	retrieved_ADC_values = 'y';
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_ADC_ConvCpltCallback+0x18>)
 8004432:	2279      	movs	r2, #121	; 0x79
 8004434:	701a      	strb	r2, [r3, #0]
	//water_temp = readWaterTemp();

}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	2000020a 	.word	0x2000020a

08004444 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800444c:	f011 f8b6 	bl	80155bc <MX_USB_HOST_Init>
  getSensorValues();
 8004450:	f001 f8c4 	bl	80055dc <getSensorValues>
  /* Infinite loop */
  for(;;)
  {

	 // MX_USB_HOST_Process();
	systemControl();
 8004454:	f7ff fb8a 	bl	8003b6c <systemControl>
    osDelay(1000);
 8004458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445c:	f00e fb07 	bl	8012a6e <osDelay>
	systemControl();
 8004460:	e7f8      	b.n	8004454 <StartBalanceWater+0x10>

08004462 <StartWebAppCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebAppCom */
void StartWebAppCom(void const * argument)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebAppCom */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800446a:	2001      	movs	r0, #1
 800446c:	f00e faff 	bl	8012a6e <osDelay>
 8004470:	e7fb      	b.n	800446a <StartWebAppCom+0x8>
	...

08004474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004486:	f001 fdcb 	bl	8006020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40001000 	.word	0x40001000

08004498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800449c:	b672      	cpsid	i
}
 800449e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <Error_Handler+0x8>

080044a2 <doseWater>:
double nutrient_volume = 0;
char cont_cal_additions_PH_up = 'n',cont_cal_additions_PH_down = 'n',cont_cal_additions_nutrient = 'n';
//int cont_additions = 0; // 0: (first cal run) we need to figure out what cal dosage we need based on the TDS level. 2: (fine tuning the cal dosage) add 0.1ml to pH dose and see if that changed the waters pH enough to calaculate a dose. 3: signifies we are/need to dosing water via calc methods above)

void doseWater(double acid_ml, double base_ml, double nutrient_ml)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b088      	sub	sp, #32
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044ac:	e9c7 2300 	strd	r2, r3, [r7]
	int ph_down_steps = calc_dose_steps(acid_ml);
 80044b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044b4:	f000 fc38 	bl	8004d28 <calc_dose_steps>
 80044b8:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 80044ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044be:	f000 fc33 	bl	8004d28 <calc_dose_steps>
 80044c2:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 80044c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044c8:	f000 fc2e 	bl	8004d28 <calc_dose_steps>
 80044cc:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f000 fdfe 	bl	80050d4 <step>
}
 80044d8:	bf00      	nop
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <calcPhUpDose>:
//max_pH_up_dose = 1.0, max_pH_down_dose = 1.0, max_nutrient_dose = 50
double d  = 0;
double pH_up_ml_per_val_change = 0, pH_down_ml_per_val_change = 0, nutrient_ml_per_val_change = 0;
double calcPhUpDose(double pH_set_val, double TDS_set_val)      // following dose methods return a double in milliliters.
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044ea:	e9c7 2300 	strd	r2, r3, [r7]
	//cont_additions = 0;
	pH_up_volume = (pH_up_ml_per_val_change)*(pH_set_point-pH);
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <calcPhUpDose+0x4c>)
 80044f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <calcPhUpDose+0x50>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb fe7f 	bl	80001fc <__aeabi_dsub>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <calcPhUpDose+0x54>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fc f82e 	bl	800056c <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4908      	ldr	r1, [pc, #32]	; (8004538 <calcPhUpDose+0x58>)
 8004516:	e9c1 2300 	strd	r2, r3, [r1]
	return pH_up_volume;
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <calcPhUpDose+0x58>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000020 	.word	0x20000020
 8004530:	20001808 	.word	0x20001808
 8004534:	200055d8 	.word	0x200055d8
 8004538:	200055c0 	.word	0x200055c0

0800453c <calcPhDownDose>:

double calcPhDownDose(double pH_set_val, double TDS_set_val)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004546:	e9c7 2300 	strd	r2, r3, [r7]
//cont_additions = 0;
	pH_down_volume = (pH_down_ml_per_val_change)*(pH-pH_set_point);
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <calcPhDownDose+0x4c>)
 800454c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <calcPhDownDose+0x50>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f7fb fe51 	bl	80001fc <__aeabi_dsub>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <calcPhDownDose+0x54>)
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f7fc f800 	bl	800056c <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4908      	ldr	r1, [pc, #32]	; (8004594 <calcPhDownDose+0x58>)
 8004572:	e9c1 2300 	strd	r2, r3, [r1]
	return pH_down_volume;
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <calcPhDownDose+0x58>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20001808 	.word	0x20001808
 800458c:	20000020 	.word	0x20000020
 8004590:	200055e0 	.word	0x200055e0
 8004594:	200055c8 	.word	0x200055c8

08004598 <calcNutrientDose>:

double calcNutrientDose(double pH_set_val, double TDS_set_val)	// calculates nutrient dosage based on how far we are away from the set-point
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80045a2:	e9c7 2300 	strd	r2, r3, [r7]
	//cont_additions = 0;
	nutrient_volume = (nutrient_ml_per_val_change)*(nutrient_set_point - TDS);
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <calcNutrientDose+0x4c>)
 80045a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <calcNutrientDose+0x50>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f7fb fe23 	bl	80001fc <__aeabi_dsub>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <calcNutrientDose+0x54>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb ffd2 	bl	800056c <__aeabi_dmul>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4908      	ldr	r1, [pc, #32]	; (80045f0 <calcNutrientDose+0x58>)
 80045ce:	e9c1 2300 	strd	r2, r3, [r1]
	return nutrient_volume;
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <calcNutrientDose+0x58>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000018 	.word	0x20000018
 80045e8:	20001800 	.word	0x20001800
 80045ec:	200055e8 	.word	0x200055e8
 80045f0:	200055d0 	.word	0x200055d0
 80045f4:	00000000 	.word	0x00000000

080045f8 <calibrateDosage>:
double Start_Nutrient = 0;
double pH_up_cal_dosage = 0.1, pH_down_cal_dosage = 0.1, nutrient_up_cal_dosage = 10;
char calibrating = 'n';

char calibrateDosage(char what_to_cal,double Cal_pH, double p_bounds_set, double n_bounds_set)	// goal: Calculate the pH/nutrient change given a set volume. This will allow us to reduce over/undershooting without PID
{
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	4601      	mov	r1, r0
 8004600:	e9c7 2300 	strd	r2, r3, [r7]
 8004604:	460b      	mov	r3, r1
 8004606:	73fb      	strb	r3, [r7, #15]
//	getSensorValues();

	Start_pH = Cal_pH;
 8004608:	498b      	ldr	r1, [pc, #556]	; (8004838 <calibrateDosage+0x240>)
 800460a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460e:	e9c1 2300 	strd	r2, r3, [r1]
	Start_Nutrient = TDS;
 8004612:	4b8a      	ldr	r3, [pc, #552]	; (800483c <calibrateDosage+0x244>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	4989      	ldr	r1, [pc, #548]	; (8004840 <calibrateDosage+0x248>)
 800461a:	e9c1 2300 	strd	r2, r3, [r1]

	// NEED TO ACCOUNT FOR what_to_cal
	if(TDS > 300 && TDS <= 500)// && calibrating == 'y')
 800461e:	4b87      	ldr	r3, [pc, #540]	; (800483c <calibrateDosage+0x244>)
 8004620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004624:	a37c      	add	r3, pc, #496	; (adr r3, 8004818 <calibrateDosage+0x220>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fc fa2f 	bl	8000a8c <__aeabi_dcmpgt>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d028      	beq.n	8004686 <calibrateDosage+0x8e>
 8004634:	4b81      	ldr	r3, [pc, #516]	; (800483c <calibrateDosage+0x244>)
 8004636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	4b81      	ldr	r3, [pc, #516]	; (8004844 <calibrateDosage+0x24c>)
 8004640:	f7fc fa10 	bl	8000a64 <__aeabi_dcmple>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01d      	beq.n	8004686 <calibrateDosage+0x8e>
	{
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b64      	cmp	r3, #100	; 0x64
 800464e:	d10a      	bne.n	8004666 <calibrateDosage+0x6e>
 8004650:	4b7d      	ldr	r3, [pc, #500]	; (8004848 <calibrateDosage+0x250>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b6e      	cmp	r3, #110	; 0x6e
 8004656:	d106      	bne.n	8004666 <calibrateDosage+0x6e>
 8004658:	497c      	ldr	r1, [pc, #496]	; (800484c <calibrateDosage+0x254>)
 800465a:	a371      	add	r3, pc, #452	; (adr r3, 8004820 <calibrateDosage+0x228>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	e9c1 2300 	strd	r2, r3, [r1]
 8004664:	e092      	b.n	800478c <calibrateDosage+0x194>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n')   pH_up_cal_dosage = 0.2;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b75      	cmp	r3, #117	; 0x75
 800466a:	f040 808f 	bne.w	800478c <calibrateDosage+0x194>
 800466e:	4b78      	ldr	r3, [pc, #480]	; (8004850 <calibrateDosage+0x258>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b6e      	cmp	r3, #110	; 0x6e
 8004674:	f040 808a 	bne.w	800478c <calibrateDosage+0x194>
 8004678:	4976      	ldr	r1, [pc, #472]	; (8004854 <calibrateDosage+0x25c>)
 800467a:	a369      	add	r3, pc, #420	; (adr r3, 8004820 <calibrateDosage+0x228>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	e9c1 2300 	strd	r2, r3, [r1]
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 8004684:	e082      	b.n	800478c <calibrateDosage+0x194>
	}
	else if(TDS > 500 && TDS < 700) // && calibrating != 'y')
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <calibrateDosage+0x244>)
 8004688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	4b6c      	ldr	r3, [pc, #432]	; (8004844 <calibrateDosage+0x24c>)
 8004692:	f7fc f9fb 	bl	8000a8c <__aeabi_dcmpgt>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d026      	beq.n	80046ea <calibrateDosage+0xf2>
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <calibrateDosage+0x244>)
 800469e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <calibrateDosage+0x260>)
 80046a8:	f7fc f9d2 	bl	8000a50 <__aeabi_dcmplt>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01b      	beq.n	80046ea <calibrateDosage+0xf2>
	{
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b64      	cmp	r3, #100	; 0x64
 80046b6:	d10a      	bne.n	80046ce <calibrateDosage+0xd6>
 80046b8:	4b63      	ldr	r3, [pc, #396]	; (8004848 <calibrateDosage+0x250>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b6e      	cmp	r3, #110	; 0x6e
 80046be:	d106      	bne.n	80046ce <calibrateDosage+0xd6>
 80046c0:	4962      	ldr	r1, [pc, #392]	; (800484c <calibrateDosage+0x254>)
 80046c2:	a359      	add	r3, pc, #356	; (adr r3, 8004828 <calibrateDosage+0x230>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	e9c1 2300 	strd	r2, r3, [r1]
 80046cc:	e060      	b.n	8004790 <calibrateDosage+0x198>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n') pH_up_cal_dosage = 0.4;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b75      	cmp	r3, #117	; 0x75
 80046d2:	d15d      	bne.n	8004790 <calibrateDosage+0x198>
 80046d4:	4b5e      	ldr	r3, [pc, #376]	; (8004850 <calibrateDosage+0x258>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b6e      	cmp	r3, #110	; 0x6e
 80046da:	d159      	bne.n	8004790 <calibrateDosage+0x198>
 80046dc:	495d      	ldr	r1, [pc, #372]	; (8004854 <calibrateDosage+0x25c>)
 80046de:	a352      	add	r3, pc, #328	; (adr r3, 8004828 <calibrateDosage+0x230>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	e9c1 2300 	strd	r2, r3, [r1]
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 80046e8:	e052      	b.n	8004790 <calibrateDosage+0x198>
	}
	else if(TDS >= 700)//&& calibrating != 'y')
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <calibrateDosage+0x244>)
 80046ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <calibrateDosage+0x260>)
 80046f6:	f7fc f9bf 	bl	8000a78 <__aeabi_dcmpge>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <calibrateDosage+0x140>
	{
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n')  pH_down_cal_dosage = 0.5;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d10a      	bne.n	800471c <calibrateDosage+0x124>
 8004706:	4b50      	ldr	r3, [pc, #320]	; (8004848 <calibrateDosage+0x250>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b6e      	cmp	r3, #110	; 0x6e
 800470c:	d106      	bne.n	800471c <calibrateDosage+0x124>
 800470e:	494f      	ldr	r1, [pc, #316]	; (800484c <calibrateDosage+0x254>)
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	4b51      	ldr	r3, [pc, #324]	; (800485c <calibrateDosage+0x264>)
 8004716:	e9c1 2300 	strd	r2, r3, [r1]
 800471a:	e03a      	b.n	8004792 <calibrateDosage+0x19a>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n') pH_up_cal_dosage = 0.5;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b75      	cmp	r3, #117	; 0x75
 8004720:	d137      	bne.n	8004792 <calibrateDosage+0x19a>
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <calibrateDosage+0x258>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b6e      	cmp	r3, #110	; 0x6e
 8004728:	d133      	bne.n	8004792 <calibrateDosage+0x19a>
 800472a:	494a      	ldr	r1, [pc, #296]	; (8004854 <calibrateDosage+0x25c>)
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	4b4a      	ldr	r3, [pc, #296]	; (800485c <calibrateDosage+0x264>)
 8004732:	e9c1 2300 	strd	r2, r3, [r1]
 8004736:	e02c      	b.n	8004792 <calibrateDosage+0x19a>
	}
	else  //calibrating != 'n')
	{
		if(what_to_cal == 'd' &&  cont_cal_additions_PH_down == 'n') 	 pH_down_cal_dosage = 0.1;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d10a      	bne.n	8004754 <calibrateDosage+0x15c>
 800473e:	4b42      	ldr	r3, [pc, #264]	; (8004848 <calibrateDosage+0x250>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b6e      	cmp	r3, #110	; 0x6e
 8004744:	d106      	bne.n	8004754 <calibrateDosage+0x15c>
 8004746:	4941      	ldr	r1, [pc, #260]	; (800484c <calibrateDosage+0x254>)
 8004748:	a339      	add	r3, pc, #228	; (adr r3, 8004830 <calibrateDosage+0x238>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	e9c1 2300 	strd	r2, r3, [r1]
 8004752:	e01e      	b.n	8004792 <calibrateDosage+0x19a>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n' )  pH_up_cal_dosage = 0.1;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b75      	cmp	r3, #117	; 0x75
 8004758:	d10a      	bne.n	8004770 <calibrateDosage+0x178>
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <calibrateDosage+0x258>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b6e      	cmp	r3, #110	; 0x6e
 8004760:	d106      	bne.n	8004770 <calibrateDosage+0x178>
 8004762:	493c      	ldr	r1, [pc, #240]	; (8004854 <calibrateDosage+0x25c>)
 8004764:	a332      	add	r3, pc, #200	; (adr r3, 8004830 <calibrateDosage+0x238>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	e9c1 2300 	strd	r2, r3, [r1]
 800476e:	e010      	b.n	8004792 <calibrateDosage+0x19a>
		else if(what_to_cal == 'n' && cont_cal_additions_nutrient == 'n')nutrient_up_cal_dosage = 5;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b6e      	cmp	r3, #110	; 0x6e
 8004774:	d10d      	bne.n	8004792 <calibrateDosage+0x19a>
 8004776:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <calibrateDosage+0x268>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b6e      	cmp	r3, #110	; 0x6e
 800477c:	d109      	bne.n	8004792 <calibrateDosage+0x19a>
 800477e:	4939      	ldr	r1, [pc, #228]	; (8004864 <calibrateDosage+0x26c>)
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	4b38      	ldr	r3, [pc, #224]	; (8004868 <calibrateDosage+0x270>)
 8004786:	e9c1 2300 	strd	r2, r3, [r1]
 800478a:	e002      	b.n	8004792 <calibrateDosage+0x19a>
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <calibrateDosage+0x19a>
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 8004790:	bf00      	nop
	}
	if(what_to_cal == 'u')
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b75      	cmp	r3, #117	; 0x75
 8004796:	d11c      	bne.n	80047d2 <calibrateDosage+0x1da>
	{
		doseWater(0,pH_up_cal_dosage,0);// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004798:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <calibrateDosage+0x25c>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f04f 0000 	mov.w	r0, #0
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	e9cd 0100 	strd	r0, r1, [sp]
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	f7ff fe76 	bl	80044a2 <doseWater>
		total_pH_up_ml_cal_step += pH_up_cal_dosage;
 80047b6:	4b2d      	ldr	r3, [pc, #180]	; (800486c <calibrateDosage+0x274>)
 80047b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <calibrateDosage+0x25c>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb fd1d 	bl	8000200 <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4928      	ldr	r1, [pc, #160]	; (800486c <calibrateDosage+0x274>)
 80047cc:	e9c1 2300 	strd	r2, r3, [r1]
 80047d0:	e06f      	b.n	80048b2 <calibrateDosage+0x2ba>
	}
	else if(what_to_cal == 'd')
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d14d      	bne.n	8004874 <calibrateDosage+0x27c>
	{
		doseWater(pH_down_cal_dosage,0,0);// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <calibrateDosage+0x254>)
 80047da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9cd 2300 	strd	r2, r3, [sp]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f7ff fe56 	bl	80044a2 <doseWater>
		total_pH_down_ml_cal_step += pH_down_cal_dosage;
 80047f6:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <calibrateDosage+0x278>)
 80047f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <calibrateDosage+0x254>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fcfd 	bl	8000200 <__adddf3>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4919      	ldr	r1, [pc, #100]	; (8004870 <calibrateDosage+0x278>)
 800480c:	e9c1 2300 	strd	r2, r3, [r1]
 8004810:	e04f      	b.n	80048b2 <calibrateDosage+0x2ba>
 8004812:	bf00      	nop
 8004814:	f3af 8000 	nop.w
 8004818:	00000000 	.word	0x00000000
 800481c:	4072c000 	.word	0x4072c000
 8004820:	9999999a 	.word	0x9999999a
 8004824:	3fc99999 	.word	0x3fc99999
 8004828:	9999999a 	.word	0x9999999a
 800482c:	3fd99999 	.word	0x3fd99999
 8004830:	9999999a 	.word	0x9999999a
 8004834:	3fb99999 	.word	0x3fb99999
 8004838:	200055f0 	.word	0x200055f0
 800483c:	20001800 	.word	0x20001800
 8004840:	200055f8 	.word	0x200055f8
 8004844:	407f4000 	.word	0x407f4000
 8004848:	2000020c 	.word	0x2000020c
 800484c:	20000218 	.word	0x20000218
 8004850:	2000020b 	.word	0x2000020b
 8004854:	20000210 	.word	0x20000210
 8004858:	4085e000 	.word	0x4085e000
 800485c:	3fe00000 	.word	0x3fe00000
 8004860:	2000020d 	.word	0x2000020d
 8004864:	20000220 	.word	0x20000220
 8004868:	40140000 	.word	0x40140000
 800486c:	20004038 	.word	0x20004038
 8004870:	20004040 	.word	0x20004040
	}
	else if(what_to_cal == 'n')
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b6e      	cmp	r3, #110	; 0x6e
 8004878:	d11b      	bne.n	80048b2 <calibrateDosage+0x2ba>
	{
		doseWater(0,0,nutrient_up_cal_dosage);
 800487a:	4ba5      	ldr	r3, [pc, #660]	; (8004b10 <calibrateDosage+0x518>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	e9cd 2300 	strd	r2, r3, [sp]
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	f04f 0000 	mov.w	r0, #0
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	f7ff fe05 	bl	80044a2 <doseWater>
		total_nutrient_ml_cal_step += nutrient_up_cal_dosage;
 8004898:	4b9e      	ldr	r3, [pc, #632]	; (8004b14 <calibrateDosage+0x51c>)
 800489a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800489e:	4b9c      	ldr	r3, [pc, #624]	; (8004b10 <calibrateDosage+0x518>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb fcac 	bl	8000200 <__adddf3>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4999      	ldr	r1, [pc, #612]	; (8004b14 <calibrateDosage+0x51c>)
 80048ae:	e9c1 2300 	strd	r2, r3, [r1]
	}
	waitForWaterToStabilize();
 80048b2:	f7fe fffd 	bl	80038b0 <waitForWaterToStabilize>

	if(what_to_cal == 'u' && (pH+p_bounds_set) > pH_set_point)			   return 'n';
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b75      	cmp	r3, #117	; 0x75
 80048ba:	d114      	bne.n	80048e6 <calibrateDosage+0x2ee>
 80048bc:	4b96      	ldr	r3, [pc, #600]	; (8004b18 <calibrateDosage+0x520>)
 80048be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c6:	f7fb fc9b 	bl	8000200 <__adddf3>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <calibrateDosage+0x524>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fc f8d8 	bl	8000a8c <__aeabi_dcmpgt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <calibrateDosage+0x2ee>
 80048e2:	236e      	movs	r3, #110	; 0x6e
 80048e4:	e163      	b.n	8004bae <calibrateDosage+0x5b6>
	else if(what_to_cal == 'd' && (pH-p_bounds_set) < pH_set_point) 	   return 'n';
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b64      	cmp	r3, #100	; 0x64
 80048ea:	d114      	bne.n	8004916 <calibrateDosage+0x31e>
 80048ec:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <calibrateDosage+0x520>)
 80048ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048f6:	f7fb fc81 	bl	80001fc <__aeabi_dsub>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4b86      	ldr	r3, [pc, #536]	; (8004b1c <calibrateDosage+0x524>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f7fc f8a2 	bl	8000a50 <__aeabi_dcmplt>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <calibrateDosage+0x31e>
 8004912:	236e      	movs	r3, #110	; 0x6e
 8004914:	e14b      	b.n	8004bae <calibrateDosage+0x5b6>
	else if(what_to_cal == 'n' && (TDS+n_bounds_set) > nutrient_set_point) return 'n';
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b6e      	cmp	r3, #110	; 0x6e
 800491a:	d114      	bne.n	8004946 <calibrateDosage+0x34e>
 800491c:	4b80      	ldr	r3, [pc, #512]	; (8004b20 <calibrateDosage+0x528>)
 800491e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004926:	f7fb fc6b 	bl	8000200 <__adddf3>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <calibrateDosage+0x52c>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fc f8a8 	bl	8000a8c <__aeabi_dcmpgt>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <calibrateDosage+0x34e>
 8004942:	236e      	movs	r3, #110	; 0x6e
 8004944:	e133      	b.n	8004bae <calibrateDosage+0x5b6>
	// NEED to make sure we did not reach our required pH or nutrient
	else if(what_to_cal == 'u' && pH-Start_pH <= 0.03)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b75      	cmp	r3, #117	; 0x75
 800494a:	d128      	bne.n	800499e <calibrateDosage+0x3a6>
 800494c:	4b72      	ldr	r3, [pc, #456]	; (8004b18 <calibrateDosage+0x520>)
 800494e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004952:	4b75      	ldr	r3, [pc, #468]	; (8004b28 <calibrateDosage+0x530>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc50 	bl	80001fc <__aeabi_dsub>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	a364      	add	r3, pc, #400	; (adr r3, 8004af8 <calibrateDosage+0x500>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fc f87b 	bl	8000a64 <__aeabi_dcmple>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <calibrateDosage+0x3a6>
	{
		cont_cal_additions_PH_up = 'y';
 8004974:	4b6d      	ldr	r3, [pc, #436]	; (8004b2c <calibrateDosage+0x534>)
 8004976:	2279      	movs	r2, #121	; 0x79
 8004978:	701a      	strb	r2, [r3, #0]
		calibrating = 'y';
 800497a:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <calibrateDosage+0x538>)
 800497c:	2279      	movs	r2, #121	; 0x79
 800497e:	701a      	strb	r2, [r3, #0]
		pH_up_cal_dosage += 0.1;								// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004980:	4b6c      	ldr	r3, [pc, #432]	; (8004b34 <calibrateDosage+0x53c>)
 8004982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004986:	a35e      	add	r3, pc, #376	; (adr r3, 8004b00 <calibrateDosage+0x508>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f7fb fc38 	bl	8000200 <__adddf3>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4967      	ldr	r1, [pc, #412]	; (8004b34 <calibrateDosage+0x53c>)
 8004996:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 800499a:	236e      	movs	r3, #110	; 0x6e
 800499c:	e107      	b.n	8004bae <calibrateDosage+0x5b6>
	}
	else if(what_to_cal == 'd' && Start_pH-pH <= 0.03)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b64      	cmp	r3, #100	; 0x64
 80049a2:	d128      	bne.n	80049f6 <calibrateDosage+0x3fe>
 80049a4:	4b60      	ldr	r3, [pc, #384]	; (8004b28 <calibrateDosage+0x530>)
 80049a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049aa:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <calibrateDosage+0x520>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fc24 	bl	80001fc <__aeabi_dsub>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	a34e      	add	r3, pc, #312	; (adr r3, 8004af8 <calibrateDosage+0x500>)
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f7fc f84f 	bl	8000a64 <__aeabi_dcmple>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d014      	beq.n	80049f6 <calibrateDosage+0x3fe>
	{
		cont_cal_additions_PH_down = 'y';
 80049cc:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <calibrateDosage+0x540>)
 80049ce:	2279      	movs	r2, #121	; 0x79
 80049d0:	701a      	strb	r2, [r3, #0]
		//cont_additions = 2;
		calibrating = 'y';
 80049d2:	4b57      	ldr	r3, [pc, #348]	; (8004b30 <calibrateDosage+0x538>)
 80049d4:	2279      	movs	r2, #121	; 0x79
 80049d6:	701a      	strb	r2, [r3, #0]
		pH_down_cal_dosage += 0.1;	// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 80049d8:	4b58      	ldr	r3, [pc, #352]	; (8004b3c <calibrateDosage+0x544>)
 80049da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049de:	a348      	add	r3, pc, #288	; (adr r3, 8004b00 <calibrateDosage+0x508>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fc0c 	bl	8000200 <__adddf3>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4953      	ldr	r1, [pc, #332]	; (8004b3c <calibrateDosage+0x544>)
 80049ee:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 80049f2:	236e      	movs	r3, #110	; 0x6e
 80049f4:	e0db      	b.n	8004bae <calibrateDosage+0x5b6>
	}
	else if(what_to_cal == 'n' && TDS-Start_Nutrient < 5 )
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b6e      	cmp	r3, #110	; 0x6e
 80049fa:	d128      	bne.n	8004a4e <calibrateDosage+0x456>
 80049fc:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <calibrateDosage+0x528>)
 80049fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a02:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <calibrateDosage+0x548>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb fbf8 	bl	80001fc <__aeabi_dsub>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <calibrateDosage+0x54c>)
 8004a1a:	f7fc f819 	bl	8000a50 <__aeabi_dcmplt>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d014      	beq.n	8004a4e <calibrateDosage+0x456>
	{
		cont_cal_additions_nutrient = 'y';
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <calibrateDosage+0x550>)
 8004a26:	2279      	movs	r2, #121	; 0x79
 8004a28:	701a      	strb	r2, [r3, #0]
		//cont_additions = 2;
		calibrating = 'y';
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <calibrateDosage+0x538>)
 8004a2c:	2279      	movs	r2, #121	; 0x79
 8004a2e:	701a      	strb	r2, [r3, #0]
		nutrient_up_cal_dosage += 3;
 8004a30:	4b37      	ldr	r3, [pc, #220]	; (8004b10 <calibrateDosage+0x518>)
 8004a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <calibrateDosage+0x554>)
 8004a3c:	f7fb fbe0 	bl	8000200 <__adddf3>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4932      	ldr	r1, [pc, #200]	; (8004b10 <calibrateDosage+0x518>)
 8004a46:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 8004a4a:	236e      	movs	r3, #110	; 0x6e
 8004a4c:	e0af      	b.n	8004bae <calibrateDosage+0x5b6>
	}
	else if(what_to_cal == 'u')
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b75      	cmp	r3, #117	; 0x75
 8004a52:	d126      	bne.n	8004aa2 <calibrateDosage+0x4aa>
	{
		pH_up_ml_per_val_change  =  (pH_up_cal_dosage/((pH-Start_pH)-0.01)); // constant is used to slightly underestimate the max amount of pH solution we dose so not to overshoot
 8004a54:	4b37      	ldr	r3, [pc, #220]	; (8004b34 <calibrateDosage+0x53c>)
 8004a56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <calibrateDosage+0x520>)
 8004a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a60:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <calibrateDosage+0x530>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fbc9 	bl	80001fc <__aeabi_dsub>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	a325      	add	r3, pc, #148	; (adr r3, 8004b08 <calibrateDosage+0x510>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fbc0 	bl	80001fc <__aeabi_dsub>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4620      	mov	r0, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	f7fb fe9c 	bl	80007c0 <__aeabi_ddiv>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4930      	ldr	r1, [pc, #192]	; (8004b50 <calibrateDosage+0x558>)
 8004a8e:	e9c1 2300 	strd	r2, r3, [r1]
		cont_cal_additions_PH_up = 'n';
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <calibrateDosage+0x534>)
 8004a94:	226e      	movs	r2, #110	; 0x6e
 8004a96:	701a      	strb	r2, [r3, #0]
		//pH_up_dose_factor    = 90/(pH-Start_pH);
		calibrating = 'n';
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <calibrateDosage+0x538>)
 8004a9a:	226e      	movs	r2, #110	; 0x6e
 8004a9c:	701a      	strb	r2, [r3, #0]
	//	cont_additions = 3;
		return 'y';
 8004a9e:	2379      	movs	r3, #121	; 0x79
 8004aa0:	e085      	b.n	8004bae <calibrateDosage+0x5b6>
	}
	else if(what_to_cal == 'd')
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b64      	cmp	r3, #100	; 0x64
 8004aa6:	d157      	bne.n	8004b58 <calibrateDosage+0x560>
	{
		cont_cal_additions_PH_down = 'n';
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <calibrateDosage+0x540>)
 8004aaa:	226e      	movs	r2, #110	; 0x6e
 8004aac:	701a      	strb	r2, [r3, #0]
		pH_down_ml_per_val_change  = (pH_down_cal_dosage/((Start_pH-pH)-0.01));
 8004aae:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <calibrateDosage+0x544>)
 8004ab0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <calibrateDosage+0x530>)
 8004ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aba:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <calibrateDosage+0x520>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fb9c 	bl	80001fc <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	a30e      	add	r3, pc, #56	; (adr r3, 8004b08 <calibrateDosage+0x510>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f7fb fb93 	bl	80001fc <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb fe6f 	bl	80007c0 <__aeabi_ddiv>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	491b      	ldr	r1, [pc, #108]	; (8004b54 <calibrateDosage+0x55c>)
 8004ae8:	e9c1 2300 	strd	r2, r3, [r1]
		calibrating = 'n';
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <calibrateDosage+0x538>)
 8004aee:	226e      	movs	r2, #110	; 0x6e
 8004af0:	701a      	strb	r2, [r3, #0]
		//cont_additions = 3;
		return 'y';
 8004af2:	2379      	movs	r3, #121	; 0x79
 8004af4:	e05b      	b.n	8004bae <calibrateDosage+0x5b6>
 8004af6:	bf00      	nop
 8004af8:	eb851eb8 	.word	0xeb851eb8
 8004afc:	3f9eb851 	.word	0x3f9eb851
 8004b00:	9999999a 	.word	0x9999999a
 8004b04:	3fb99999 	.word	0x3fb99999
 8004b08:	47ae147b 	.word	0x47ae147b
 8004b0c:	3f847ae1 	.word	0x3f847ae1
 8004b10:	20000220 	.word	0x20000220
 8004b14:	20004048 	.word	0x20004048
 8004b18:	20001808 	.word	0x20001808
 8004b1c:	20000020 	.word	0x20000020
 8004b20:	20001800 	.word	0x20001800
 8004b24:	20000018 	.word	0x20000018
 8004b28:	200055f0 	.word	0x200055f0
 8004b2c:	2000020b 	.word	0x2000020b
 8004b30:	20000228 	.word	0x20000228
 8004b34:	20000210 	.word	0x20000210
 8004b38:	2000020c 	.word	0x2000020c
 8004b3c:	20000218 	.word	0x20000218
 8004b40:	200055f8 	.word	0x200055f8
 8004b44:	40140000 	.word	0x40140000
 8004b48:	2000020d 	.word	0x2000020d
 8004b4c:	40080000 	.word	0x40080000
 8004b50:	200055d8 	.word	0x200055d8
 8004b54:	200055e0 	.word	0x200055e0
	}
	else if(what_to_cal == 'n')
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b6e      	cmp	r3, #110	; 0x6e
 8004b5c:	d126      	bne.n	8004bac <calibrateDosage+0x5b4>
	{
		cont_cal_additions_nutrient = 'n';
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <calibrateDosage+0x5c0>)
 8004b60:	226e      	movs	r2, #110	; 0x6e
 8004b62:	701a      	strb	r2, [r3, #0]
		nutrient_ml_per_val_change = (nutrient_up_cal_dosage/((TDS-Start_Nutrient)-0.5));
 8004b64:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <calibrateDosage+0x5c4>)
 8004b66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <calibrateDosage+0x5c8>)
 8004b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <calibrateDosage+0x5cc>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f7fb fb41 	bl	80001fc <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <calibrateDosage+0x5d0>)
 8004b88:	f7fb fb38 	bl	80001fc <__aeabi_dsub>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fe14 	bl	80007c0 <__aeabi_ddiv>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	490b      	ldr	r1, [pc, #44]	; (8004bcc <calibrateDosage+0x5d4>)
 8004b9e:	e9c1 2300 	strd	r2, r3, [r1]
		calibrating = 'n';
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <calibrateDosage+0x5d8>)
 8004ba4:	226e      	movs	r2, #110	; 0x6e
 8004ba6:	701a      	strb	r2, [r3, #0]
//		cont_additions = 3;
		return 'y';
 8004ba8:	2379      	movs	r3, #121	; 0x79
 8004baa:	e000      	b.n	8004bae <calibrateDosage+0x5b6>
	}
	return 'n';
 8004bac:	236e      	movs	r3, #110	; 0x6e
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000020d 	.word	0x2000020d
 8004bbc:	20000220 	.word	0x20000220
 8004bc0:	20001800 	.word	0x20001800
 8004bc4:	200055f8 	.word	0x200055f8
 8004bc8:	3fe00000 	.word	0x3fe00000
 8004bcc:	200055e8 	.word	0x200055e8
 8004bd0:	20000228 	.word	0x20000228

08004bd4 <convert_ph>:
double ph_voltage_buffer[30] = {0};
double pH_low_cal = 3047.0, pH_mid_cal = 2939.0, pH_high_cal= 2852.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
double slope = 0, ph_Value_Buf = 0;

double convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 8004bd4:	b5b0      	push	{r4, r5, r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fb fc6d 	bl	80004bc <__aeabi_f2d>
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <convert_ph+0x138>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb ff50 	bl	8000a8c <__aeabi_dcmpgt>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d03b      	beq.n	8004c6a <convert_ph+0x96>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <convert_ph+0x13c>)
 8004bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf8:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <convert_ph+0x140>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fafd 	bl	80001fc <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	4b40      	ldr	r3, [pc, #256]	; (8004d0c <convert_ph+0x138>)
 8004c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c10:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <convert_ph+0x144>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb faf1 	bl	80001fc <__aeabi_dsub>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4620      	mov	r0, r4
 8004c20:	4629      	mov	r1, r5
 8004c22:	f7fb fdcd 	bl	80007c0 <__aeabi_ddiv>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	493c      	ldr	r1, [pc, #240]	; (8004d1c <convert_ph+0x148>)
 8004c2c:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fb fc43 	bl	80004bc <__aeabi_f2d>
 8004c36:	4b38      	ldr	r3, [pc, #224]	; (8004d18 <convert_ph+0x144>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb fade 	bl	80001fc <__aeabi_dsub>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <convert_ph+0x148>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fc8d 	bl	800056c <__aeabi_dmul>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <convert_ph+0x140>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb face 	bl	8000200 <__adddf3>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	e04a      	b.n	8004d00 <convert_ph+0x12c>
	}
	else if(voltage_mV<=pH_mid_cal)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fb fc26 	bl	80004bc <__aeabi_f2d>
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <convert_ph+0x138>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fef5 	bl	8000a64 <__aeabi_dcmple>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03b      	beq.n	8004cf8 <convert_ph+0x124>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <convert_ph+0x14c>)
 8004c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <convert_ph+0x13c>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb fab6 	bl	80001fc <__aeabi_dsub>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <convert_ph+0x150>)
 8004c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <convert_ph+0x138>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb faaa 	bl	80001fc <__aeabi_dsub>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f7fb fd86 	bl	80007c0 <__aeabi_ddiv>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4918      	ldr	r1, [pc, #96]	; (8004d1c <convert_ph+0x148>)
 8004cba:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fb fbfc 	bl	80004bc <__aeabi_f2d>
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <convert_ph+0x138>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb fa97 	bl	80001fc <__aeabi_dsub>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <convert_ph+0x148>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fc46 	bl	800056c <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <convert_ph+0x13c>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f7fb fa87 	bl	8000200 <__adddf3>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e003      	b.n	8004d00 <convert_ph+0x12c>
	}
	return 0;
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
}
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000238 	.word	0x20000238
 8004d10:	20000250 	.word	0x20000250
 8004d14:	20000248 	.word	0x20000248
 8004d18:	20000230 	.word	0x20000230
 8004d1c:	20005600 	.word	0x20005600
 8004d20:	20000258 	.word	0x20000258
 8004d24:	20000240 	.word	0x20000240

08004d28 <calc_dose_steps>:
//extern TIM_HandleTypeDef step_timer;


double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d3e:	f7fb fea5 	bl	8000a8c <__aeabi_dcmpgt>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d028      	beq.n	8004d9a <calc_dose_steps+0x72>
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	4bbe      	ldr	r3, [pc, #760]	; (8005048 <calc_dose_steps+0x320>)
 8004d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d52:	f7fb fe87 	bl	8000a64 <__aeabi_dcmple>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01e      	beq.n	8004d9a <calc_dose_steps+0x72>
 8004d5c:	a3ae      	add	r3, pc, #696	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d66:	f7fb fa4b 	bl	8000200 <__adddf3>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	a3ab      	add	r3, pc, #684	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb fbf8 	bl	800056c <__aeabi_dmul>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	a3a8      	add	r3, pc, #672	; (adr r3, 8005028 <calc_dose_steps+0x300>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fbef 	bl	800056c <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	49ae      	ldr	r1, [pc, #696]	; (800504c <calc_dose_steps+0x324>)
 8004d94:	e9c1 2300 	strd	r2, r3, [r1]
 8004d98:	e131      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4baa      	ldr	r3, [pc, #680]	; (8005048 <calc_dose_steps+0x320>)
 8004da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da4:	f7fb fe72 	bl	8000a8c <__aeabi_dcmpgt>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d029      	beq.n	8004e02 <calc_dose_steps+0xda>
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dba:	f7fb fe53 	bl	8000a64 <__aeabi_dcmple>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01e      	beq.n	8004e02 <calc_dose_steps+0xda>
 8004dc4:	a394      	add	r3, pc, #592	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dce:	f7fb fa17 	bl	8000200 <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	a391      	add	r3, pc, #580	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fbc4 	bl	800056c <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	a390      	add	r3, pc, #576	; (adr r3, 8005030 <calc_dose_steps+0x308>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fbbb 	bl	800056c <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4994      	ldr	r1, [pc, #592]	; (800504c <calc_dose_steps+0x324>)
 8004dfc:	e9c1 2300 	strd	r2, r3, [r1]
 8004e00:	e0fd      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0e:	f7fb fe3d 	bl	8000a8c <__aeabi_dcmpgt>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d028      	beq.n	8004e6a <calc_dose_steps+0x142>
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	4b8c      	ldr	r3, [pc, #560]	; (8005050 <calc_dose_steps+0x328>)
 8004e1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e22:	f7fb fe1f 	bl	8000a64 <__aeabi_dcmple>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01e      	beq.n	8004e6a <calc_dose_steps+0x142>
 8004e2c:	a37a      	add	r3, pc, #488	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e36:	f7fb f9e3 	bl	8000200 <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	a377      	add	r3, pc, #476	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fb90 	bl	800056c <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	a378      	add	r3, pc, #480	; (adr r3, 8005038 <calc_dose_steps+0x310>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb fb87 	bl	800056c <__aeabi_dmul>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	497a      	ldr	r1, [pc, #488]	; (800504c <calc_dose_steps+0x324>)
 8004e64:	e9c1 2300 	strd	r2, r3, [r1]
 8004e68:	e0c9      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	4b78      	ldr	r3, [pc, #480]	; (8005050 <calc_dose_steps+0x328>)
 8004e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e74:	f7fb fe0a 	bl	8000a8c <__aeabi_dcmpgt>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d028      	beq.n	8004ed0 <calc_dose_steps+0x1a8>
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	4b74      	ldr	r3, [pc, #464]	; (8005054 <calc_dose_steps+0x32c>)
 8004e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e88:	f7fb fdec 	bl	8000a64 <__aeabi_dcmple>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01e      	beq.n	8004ed0 <calc_dose_steps+0x1a8>
 8004e92:	a361      	add	r3, pc, #388	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e9c:	f7fb f9b0 	bl	8000200 <__adddf3>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	a35d      	add	r3, pc, #372	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fb5d 	bl	800056c <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	a35f      	add	r3, pc, #380	; (adr r3, 8005038 <calc_dose_steps+0x310>)
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f7fb fb54 	bl	800056c <__aeabi_dmul>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4960      	ldr	r1, [pc, #384]	; (800504c <calc_dose_steps+0x324>)
 8004eca:	e9c1 2300 	strd	r2, r3, [r1]
 8004ece:	e096      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <calc_dose_steps+0x32c>)
 8004ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eda:	f7fb fdd7 	bl	8000a8c <__aeabi_dcmpgt>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d028      	beq.n	8004f36 <calc_dose_steps+0x20e>
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <calc_dose_steps+0x330>)
 8004eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eee:	f7fb fdb9 	bl	8000a64 <__aeabi_dcmple>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01e      	beq.n	8004f36 <calc_dose_steps+0x20e>
 8004ef8:	a347      	add	r3, pc, #284	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f02:	f7fb f97d 	bl	8000200 <__adddf3>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	a344      	add	r3, pc, #272	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fb2a 	bl	800056c <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	a345      	add	r3, pc, #276	; (adr r3, 8005038 <calc_dose_steps+0x310>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fb21 	bl	800056c <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4947      	ldr	r1, [pc, #284]	; (800504c <calc_dose_steps+0x324>)
 8004f30:	e9c1 2300 	strd	r2, r3, [r1]
 8004f34:	e063      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	4b47      	ldr	r3, [pc, #284]	; (8005058 <calc_dose_steps+0x330>)
 8004f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f40:	f7fb fda4 	bl	8000a8c <__aeabi_dcmpgt>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d028      	beq.n	8004f9c <calc_dose_steps+0x274>
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	4b43      	ldr	r3, [pc, #268]	; (800505c <calc_dose_steps+0x334>)
 8004f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f54:	f7fb fd86 	bl	8000a64 <__aeabi_dcmple>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01e      	beq.n	8004f9c <calc_dose_steps+0x274>
 8004f5e:	a32e      	add	r3, pc, #184	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f68:	f7fb f94a 	bl	8000200 <__adddf3>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	a32a      	add	r3, pc, #168	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb faf7 	bl	800056c <__aeabi_dmul>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	a32c      	add	r3, pc, #176	; (adr r3, 8005038 <calc_dose_steps+0x310>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb faee 	bl	800056c <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	492d      	ldr	r1, [pc, #180]	; (800504c <calc_dose_steps+0x324>)
 8004f96:	e9c1 2300 	strd	r2, r3, [r1]
 8004f9a:	e030      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa8:	f7fb fd48 	bl	8000a3c <__aeabi_dcmpeq>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <calc_dose_steps+0x29a>
 8004fb2:	4926      	ldr	r1, [pc, #152]	; (800504c <calc_dose_steps+0x324>)
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9c1 2300 	strd	r2, r3, [r1]
 8004fc0:	e01d      	b.n	8004ffe <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8004fc2:	a315      	add	r3, pc, #84	; (adr r3, 8005018 <calc_dose_steps+0x2f0>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fcc:	f7fb f918 	bl	8000200 <__adddf3>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	a311      	add	r3, pc, #68	; (adr r3, 8005020 <calc_dose_steps+0x2f8>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb fac5 	bl	800056c <__aeabi_dmul>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	a315      	add	r3, pc, #84	; (adr r3, 8005040 <calc_dose_steps+0x318>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb fabc 	bl	800056c <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4914      	ldr	r1, [pc, #80]	; (800504c <calc_dose_steps+0x324>)
 8004ffa:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <calc_dose_steps+0x324>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	f7fb fd60 	bl	8000acc <__aeabi_d2iz>
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	edfa43fe 	.word	0xedfa43fe
 800501c:	3fc9c0eb 	.word	0x3fc9c0eb
 8005020:	f2197bf2 	.word	0xf2197bf2
 8005024:	4012197b 	.word	0x4012197b
 8005028:	00000000 	.word	0x00000000
 800502c:	409b4400 	.word	0x409b4400
 8005030:	00000000 	.word	0x00000000
 8005034:	409bf800 	.word	0x409bf800
 8005038:	00000000 	.word	0x00000000
 800503c:	409ef000 	.word	0x409ef000
 8005040:	00000000 	.word	0x00000000
 8005044:	409dec00 	.word	0x409dec00
 8005048:	3ff00000 	.word	0x3ff00000
 800504c:	20005608 	.word	0x20005608
 8005050:	40080000 	.word	0x40080000
 8005054:	40100000 	.word	0x40100000
 8005058:	40140000 	.word	0x40140000
 800505c:	403e0000 	.word	0x403e0000

08005060 <disablePumps>:

void disablePumps()	// disable all pumps
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 8005064:	2201      	movs	r2, #1
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	4807      	ldr	r0, [pc, #28]	; (8005088 <disablePumps+0x28>)
 800506a:	f002 fb4a 	bl	8007702 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 800506e:	2201      	movs	r2, #1
 8005070:	2140      	movs	r1, #64	; 0x40
 8005072:	4805      	ldr	r0, [pc, #20]	; (8005088 <disablePumps+0x28>)
 8005074:	f002 fb45 	bl	8007702 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8005078:	2201      	movs	r2, #1
 800507a:	2120      	movs	r1, #32
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <disablePumps+0x28>)
 800507e:	f002 fb40 	bl	8007702 <HAL_GPIO_WritePin>

}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd04      	ble.n	80050a8 <enablePumps+0x1c>
 800509e:	2200      	movs	r2, #0
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	480b      	ldr	r0, [pc, #44]	; (80050d0 <enablePumps+0x44>)
 80050a4:	f002 fb2d 	bl	8007702 <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dd04      	ble.n	80050b8 <enablePumps+0x2c>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	4807      	ldr	r0, [pc, #28]	; (80050d0 <enablePumps+0x44>)
 80050b4:	f002 fb25 	bl	8007702 <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dd04      	ble.n	80050c8 <enablePumps+0x3c>
 80050be:	2200      	movs	r2, #0
 80050c0:	2120      	movs	r1, #32
 80050c2:	4803      	ldr	r0, [pc, #12]	; (80050d0 <enablePumps+0x44>)
 80050c4:	f002 fb1d 	bl	8007702 <HAL_GPIO_WritePin>
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000

080050d4 <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
	 DWT_Delay_Init();
 80050e0:	f000 fe0a 	bl	8005cf8 <DWT_Delay_Init>

	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	dd01      	ble.n	80050f4 <step+0x20>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dd01      	ble.n	8005100 <step+0x2c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ffc1 	bl	800508c <enablePumps>

	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e038      	b.n	8005182 <step+0xae>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	da03      	bge.n	8005120 <step+0x4c>
 8005118:	2110      	movs	r1, #16
 800511a:	481f      	ldr	r0, [pc, #124]	; (8005198 <step+0xc4>)
 800511c:	f002 fb09 	bl	8007732 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	da03      	bge.n	8005130 <step+0x5c>
 8005128:	2104      	movs	r1, #4
 800512a:	481b      	ldr	r0, [pc, #108]	; (8005198 <step+0xc4>)
 800512c:	f002 fb01 	bl	8007732 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	da03      	bge.n	8005140 <step+0x6c>
 8005138:	2108      	movs	r1, #8
 800513a:	4817      	ldr	r0, [pc, #92]	; (8005198 <step+0xc4>)
 800513c:	f002 faf9 	bl	8007732 <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 8005140:	2028      	movs	r0, #40	; 0x28
 8005142:	f000 fe09 	bl	8005d58 <DWT_Delay_us>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	429a      	cmp	r2, r3
 800514c:	da03      	bge.n	8005156 <step+0x82>
 800514e:	2110      	movs	r1, #16
 8005150:	4811      	ldr	r0, [pc, #68]	; (8005198 <step+0xc4>)
 8005152:	f002 faee 	bl	8007732 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	da03      	bge.n	8005166 <step+0x92>
 800515e:	2104      	movs	r1, #4
 8005160:	480d      	ldr	r0, [pc, #52]	; (8005198 <step+0xc4>)
 8005162:	f002 fae6 	bl	8007732 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	da03      	bge.n	8005176 <step+0xa2>
 800516e:	2108      	movs	r1, #8
 8005170:	4809      	ldr	r0, [pc, #36]	; (8005198 <step+0xc4>)
 8005172:	f002 fade 	bl	8007732 <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 8005176:	2028      	movs	r0, #40	; 0x28
 8005178:	f000 fdee 	bl	8005d58 <DWT_Delay_us>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3301      	adds	r3, #1
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	429a      	cmp	r2, r3
 8005188:	dbc2      	blt.n	8005110 <step+0x3c>
	}
	disablePumps();
 800518a:	f7ff ff69 	bl	8005060 <disablePumps>
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <readWaterTemp>:

int TDS_computation_buffer[80] = {0}, valid_value_pH  = 0, valid_value_TDS  = 0;
double TDS_voltage = 0, compensationCoefficient = 0, compensationVolatge = 0, DMA_pH_sample_avg = 0, mili_voltage, Humidity = 0;

void readWaterTemp()
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80051a0:	f00f ff34 	bl	801500c <vPortEnterCritical>
	{
		 DWT_Delay_Init();
 80051a4:	f000 fda8 	bl	8005cf8 <DWT_Delay_Init>
		 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 80051a8:	2201      	movs	r2, #1
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	4828      	ldr	r0, [pc, #160]	; (8005250 <readWaterTemp+0xb4>)
 80051ae:	f002 faa8 	bl	8007702 <HAL_GPIO_WritePin>
		 DWT_Delay_us(100);
 80051b2:	2064      	movs	r0, #100	; 0x64
 80051b4:	f000 fdd0 	bl	8005d58 <DWT_Delay_us>
		 Presence = DS18B20_Start();
 80051b8:	f000 fdf6 	bl	8005da8 <DS18B20_Start>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <readWaterTemp+0xb8>)
 80051c2:	701a      	strb	r2, [r3, #0]

		 DWT_Delay_us (300);
 80051c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80051c8:	f000 fdc6 	bl	8005d58 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 80051cc:	20cc      	movs	r0, #204	; 0xcc
 80051ce:	f000 fe1b 	bl	8005e08 <DS18B20_Write>
		 DS18B20_Write (0x44);  // convert t
 80051d2:	2044      	movs	r0, #68	; 0x44
 80051d4:	f000 fe18 	bl	8005e08 <DS18B20_Write>

		 Presence = DS18B20_Start();
 80051d8:	f000 fde6 	bl	8005da8 <DS18B20_Start>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <readWaterTemp+0xb8>)
 80051e2:	701a      	strb	r2, [r3, #0]
		 DWT_Delay_us (300);
 80051e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80051e8:	f000 fdb6 	bl	8005d58 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 80051ec:	20cc      	movs	r0, #204	; 0xcc
 80051ee:	f000 fe0b 	bl	8005e08 <DS18B20_Write>
		 DS18B20_Write (0xBE);  // Read Scratch-pad
 80051f2:	20be      	movs	r0, #190	; 0xbe
 80051f4:	f000 fe08 	bl	8005e08 <DS18B20_Write>

		 Temp_byte1 = DS18B20_Read();
 80051f8:	f000 fe4c 	bl	8005e94 <DS18B20_Read>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	4b15      	ldr	r3, [pc, #84]	; (8005258 <readWaterTemp+0xbc>)
 8005202:	701a      	strb	r2, [r3, #0]
		 Temp_byte2 = DS18B20_Read();
 8005204:	f000 fe46 	bl	8005e94 <DS18B20_Read>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <readWaterTemp+0xc0>)
 800520e:	701a      	strb	r2, [r3, #0]
		 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8005210:	4b12      	ldr	r3, [pc, #72]	; (800525c <readWaterTemp+0xc0>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b21a      	sxth	r2, r3
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <readWaterTemp+0xbc>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b21b      	sxth	r3, r3
 800521e:	4313      	orrs	r3, r2
 8005220:	b21b      	sxth	r3, r3
 8005222:	b29a      	uxth	r2, r3
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <readWaterTemp+0xc4>)
 8005226:	801a      	strh	r2, [r3, #0]
		 water_temp = (double)TEMP/16;
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <readWaterTemp+0xc4>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb f923 	bl	8000478 <__aeabi_ui2d>
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <readWaterTemp+0xc8>)
 8005238:	f7fb fac2 	bl	80007c0 <__aeabi_ddiv>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <readWaterTemp+0xcc>)
 8005242:	e9c1 2300 	strd	r2, r3, [r1]
	} taskEXIT_CRITICAL();
 8005246:	f00f ff11 	bl	801506c <vPortExitCritical>
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40020000 	.word	0x40020000
 8005254:	20005610 	.word	0x20005610
 8005258:	2000da12 	.word	0x2000da12
 800525c:	2000da20 	.word	0x2000da20
 8005260:	2000da10 	.word	0x2000da10
 8005264:	40300000 	.word	0x40300000
 8005268:	20001810 	.word	0x20001810
 800526c:	00000000 	.word	0x00000000

08005270 <convertWaterTDS>:


void convertWaterTDS() // Get nutrient level
{TDS_voltage = 0;
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	496e      	ldr	r1, [pc, #440]	; (8005430 <convertWaterTDS+0x1c0>)
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9c1 2300 	strd	r2, r3, [r1]
	int j = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	607b      	str	r3, [r7, #4]
	for(j = 0; j < 38; j++)
 8005288:	2300      	movs	r3, #0
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	e013      	b.n	80052b6 <convertWaterTDS+0x46>
	{
		TDS_voltage += TDS_computation_buffer[j];
 800528e:	4a69      	ldr	r2, [pc, #420]	; (8005434 <convertWaterTDS+0x1c4>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fb f8fe 	bl	8000498 <__aeabi_i2d>
 800529c:	4b64      	ldr	r3, [pc, #400]	; (8005430 <convertWaterTDS+0x1c0>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fa ffad 	bl	8000200 <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4961      	ldr	r1, [pc, #388]	; (8005430 <convertWaterTDS+0x1c0>)
 80052ac:	e9c1 2300 	strd	r2, r3, [r1]
	for(j = 0; j < 38; j++)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3301      	adds	r3, #1
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b25      	cmp	r3, #37	; 0x25
 80052ba:	dde8      	ble.n	800528e <convertWaterTDS+0x1e>
	}
	TDS_voltage = (double)TDS_voltage/j;
 80052bc:	4b5c      	ldr	r3, [pc, #368]	; (8005430 <convertWaterTDS+0x1c0>)
 80052be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fb f8e8 	bl	8000498 <__aeabi_i2d>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb fa76 	bl	80007c0 <__aeabi_ddiv>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4955      	ldr	r1, [pc, #340]	; (8005430 <convertWaterTDS+0x1c0>)
 80052da:	e9c1 2300 	strd	r2, r3, [r1]
	TDS_voltage = TDS_voltage*(double)0.000805664; 																					 // read the analog value more stable by averaging and convert to voltage value
 80052de:	4b54      	ldr	r3, [pc, #336]	; (8005430 <convertWaterTDS+0x1c0>)
 80052e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052e4:	a348      	add	r3, pc, #288	; (adr r3, 8005408 <convertWaterTDS+0x198>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fb f93f 	bl	800056c <__aeabi_dmul>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	494f      	ldr	r1, [pc, #316]	; (8005430 <convertWaterTDS+0x1c0>)
 80052f4:	e9c1 2300 	strd	r2, r3, [r1]
	compensationCoefficient=1.0+0.02*(water_temp-25.0);   																								    		 //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80052f8:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <convertWaterTDS+0x1c8>)
 80052fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	4b4e      	ldr	r3, [pc, #312]	; (800543c <convertWaterTDS+0x1cc>)
 8005304:	f7fa ff7a 	bl	80001fc <__aeabi_dsub>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	a33f      	add	r3, pc, #252	; (adr r3, 8005410 <convertWaterTDS+0x1a0>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f7fb f929 	bl	800056c <__aeabi_dmul>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	4b46      	ldr	r3, [pc, #280]	; (8005440 <convertWaterTDS+0x1d0>)
 8005328:	f7fa ff6a 	bl	8000200 <__adddf3>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4944      	ldr	r1, [pc, #272]	; (8005444 <convertWaterTDS+0x1d4>)
 8005332:	e9c1 2300 	strd	r2, r3, [r1]
	compensationVolatge=TDS_voltage/compensationCoefficient;  																									 //temperature compensation
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <convertWaterTDS+0x1c0>)
 8005338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800533c:	4b41      	ldr	r3, [pc, #260]	; (8005444 <convertWaterTDS+0x1d4>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fb fa3d 	bl	80007c0 <__aeabi_ddiv>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	493f      	ldr	r1, [pc, #252]	; (8005448 <convertWaterTDS+0x1d8>)
 800534c:	e9c1 2300 	strd	r2, r3, [r1]
	TDS =(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds
 8005350:	4b3d      	ldr	r3, [pc, #244]	; (8005448 <convertWaterTDS+0x1d8>)
 8005352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005356:	a330      	add	r3, pc, #192	; (adr r3, 8005418 <convertWaterTDS+0x1a8>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f906 	bl	800056c <__aeabi_dmul>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	4b37      	ldr	r3, [pc, #220]	; (8005448 <convertWaterTDS+0x1d8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb f8fd 	bl	800056c <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	4b33      	ldr	r3, [pc, #204]	; (8005448 <convertWaterTDS+0x1d8>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fb f8f4 	bl	800056c <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4614      	mov	r4, r2
 800538a:	461d      	mov	r5, r3
 800538c:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <convertWaterTDS+0x1d8>)
 800538e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005392:	a323      	add	r3, pc, #140	; (adr r3, 8005420 <convertWaterTDS+0x1b0>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fb f8e8 	bl	800056c <__aeabi_dmul>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	4b28      	ldr	r3, [pc, #160]	; (8005448 <convertWaterTDS+0x1d8>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fb f8df 	bl	800056c <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fa ff21 	bl	80001fc <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	461d      	mov	r5, r3
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <convertWaterTDS+0x1d8>)
 80053c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053c8:	a317      	add	r3, pc, #92	; (adr r3, 8005428 <convertWaterTDS+0x1b8>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fb f8cd 	bl	800056c <__aeabi_dmul>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	f7fa ff11 	bl	8000200 <__adddf3>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	4b18      	ldr	r3, [pc, #96]	; (800544c <convertWaterTDS+0x1dc>)
 80053ec:	f7fb f8be 	bl	800056c <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4916      	ldr	r1, [pc, #88]	; (8005450 <convertWaterTDS+0x1e0>)
 80053f6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bdb0      	pop	{r4, r5, r7, pc}
 8005402:	bf00      	nop
 8005404:	f3af 8000 	nop.w
 8005408:	440a4e96 	.word	0x440a4e96
 800540c:	3f4a6666 	.word	0x3f4a6666
 8005410:	47ae147b 	.word	0x47ae147b
 8005414:	3f947ae1 	.word	0x3f947ae1
 8005418:	a3d70a3d 	.word	0xa3d70a3d
 800541c:	4060ad70 	.word	0x4060ad70
 8005420:	1eb851ec 	.word	0x1eb851ec
 8005424:	406ffb85 	.word	0x406ffb85
 8005428:	b851eb85 	.word	0xb851eb85
 800542c:	408acb1e 	.word	0x408acb1e
 8005430:	20005760 	.word	0x20005760
 8005434:	20005614 	.word	0x20005614
 8005438:	20001810 	.word	0x20001810
 800543c:	40390000 	.word	0x40390000
 8005440:	3ff00000 	.word	0x3ff00000
 8005444:	20005768 	.word	0x20005768
 8005448:	20005770 	.word	0x20005770
 800544c:	3fe00000 	.word	0x3fe00000
 8005450:	20001800 	.word	0x20001800

08005454 <get_DMA_nutrient_ph_value>:

char micro_reset = 'y';
int pH_val_buf[55] = {0};
void get_DMA_nutrient_ph_value()	// gets nutrient and ph values from the ADC DMA buffer and place it in a buffer
{
 8005454:	b5b0      	push	{r4, r5, r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
	valid_value_pH = 0;
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <get_DMA_nutrient_ph_value+0xe8>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
	valid_value_TDS = 0;
 8005460:	4b37      	ldr	r3, [pc, #220]	; (8005540 <get_DMA_nutrient_ph_value+0xec>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	DMA_pH_sample_avg = 0;
 8005466:	4937      	ldr	r1, [pc, #220]	; (8005544 <get_DMA_nutrient_ph_value+0xf0>)
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9c1 2300 	strd	r2, r3, [r1]
	taskENTER_CRITICAL();
 8005474:	f00f fdca 	bl	801500c <vPortEnterCritical>
	{
		for(int j = 0; j<79; j++ )
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	e042      	b.n	8005504 <get_DMA_nutrient_ph_value+0xb0>
		{
			if(j%2 == 0)//&& nutrient_ph_values[j] < 80)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <get_DMA_nutrient_ph_value+0x54>
			{
				TDS_computation_buffer[valid_value_TDS] = nutrient_ph_values[j];
 8005488:	4a2f      	ldr	r2, [pc, #188]	; (8005548 <get_DMA_nutrient_ph_value+0xf4>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <get_DMA_nutrient_ph_value+0xec>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4611      	mov	r1, r2
 8005496:	4a2d      	ldr	r2, [pc, #180]	; (800554c <get_DMA_nutrient_ph_value+0xf8>)
 8005498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				valid_value_TDS++;
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <get_DMA_nutrient_ph_value+0xec>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a27      	ldr	r2, [pc, #156]	; (8005540 <get_DMA_nutrient_ph_value+0xec>)
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e02a      	b.n	80054fe <get_DMA_nutrient_ph_value+0xaa>
			}
			else if(j%2 != 0 && nutrient_ph_values[j] != 0)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d025      	beq.n	80054fe <get_DMA_nutrient_ph_value+0xaa>
 80054b2:	4a25      	ldr	r2, [pc, #148]	; (8005548 <get_DMA_nutrient_ph_value+0xf4>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01f      	beq.n	80054fe <get_DMA_nutrient_ph_value+0xaa>
			{
				pH_val_buf[valid_value_pH] = nutrient_ph_values[j];
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <get_DMA_nutrient_ph_value+0xf4>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <get_DMA_nutrient_ph_value+0xe8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4a20      	ldr	r2, [pc, #128]	; (8005550 <get_DMA_nutrient_ph_value+0xfc>)
 80054ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_pH_sample_avg += nutrient_ph_values[j];
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <get_DMA_nutrient_ph_value+0xf4>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa ffcc 	bl	8000478 <__aeabi_ui2d>
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <get_DMA_nutrient_ph_value+0xf0>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fe8b 	bl	8000200 <__adddf3>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4915      	ldr	r1, [pc, #84]	; (8005544 <get_DMA_nutrient_ph_value+0xf0>)
 80054f0:	e9c1 2300 	strd	r2, r3, [r1]
				valid_value_pH++;
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <get_DMA_nutrient_ph_value+0xe8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <get_DMA_nutrient_ph_value+0xe8>)
 80054fc:	6013      	str	r3, [r2, #0]
		for(int j = 0; j<79; j++ )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3301      	adds	r3, #1
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b4e      	cmp	r3, #78	; 0x4e
 8005508:	ddb9      	ble.n	800547e <get_DMA_nutrient_ph_value+0x2a>
			}
		}
	}
	taskEXIT_CRITICAL();
 800550a:	f00f fdaf 	bl	801506c <vPortExitCritical>
	DMA_pH_sample_avg = DMA_pH_sample_avg/valid_value_pH;
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <get_DMA_nutrient_ph_value+0xf0>)
 8005510:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <get_DMA_nutrient_ph_value+0xe8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fa ffbd 	bl	8000498 <__aeabi_i2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4620      	mov	r0, r4
 8005524:	4629      	mov	r1, r5
 8005526:	f7fb f94b 	bl	80007c0 <__aeabi_ddiv>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4905      	ldr	r1, [pc, #20]	; (8005544 <get_DMA_nutrient_ph_value+0xf0>)
 8005530:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bdb0      	pop	{r4, r5, r7, pc}
 800553c:	20005754 	.word	0x20005754
 8005540:	20005758 	.word	0x20005758
 8005544:	20005778 	.word	0x20005778
 8005548:	20005468 	.word	0x20005468
 800554c:	20005614 	.word	0x20005614
 8005550:	20005780 	.word	0x20005780
 8005554:	00000000 	.word	0x00000000

08005558 <convertPH>:
{

}

void convertPH()
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	mili_voltage = ((DMA_pH_sample_avg/4096.0)*3.3)*1000;
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <convertPH+0x70>)
 800555e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <convertPH+0x74>)
 8005568:	f7fb f92a 	bl	80007c0 <__aeabi_ddiv>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	a312      	add	r3, pc, #72	; (adr r3, 80055c0 <convertPH+0x68>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fa fff7 	bl	800056c <__aeabi_dmul>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <convertPH+0x78>)
 800558c:	f7fa ffee 	bl	800056c <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	490f      	ldr	r1, [pc, #60]	; (80055d4 <convertPH+0x7c>)
 8005596:	e9c1 2300 	strd	r2, r3, [r1]
	pH = convert_ph(mili_voltage);
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <convertPH+0x7c>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f7fb fada 	bl	8000b5c <__aeabi_d2f>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fb12 	bl	8004bd4 <convert_ph>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4908      	ldr	r1, [pc, #32]	; (80055d8 <convertPH+0x80>)
 80055b6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	66666666 	.word	0x66666666
 80055c4:	400a6666 	.word	0x400a6666
 80055c8:	20005778 	.word	0x20005778
 80055cc:	40b00000 	.word	0x40b00000
 80055d0:	408f4000 	.word	0x408f4000
 80055d4:	2000da18 	.word	0x2000da18
 80055d8:	20001808 	.word	0x20001808

080055dc <getSensorValues>:


int runs_after = 0;
void getSensorValues()
{
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0

	readWaterTemp();
 80055e2:	f7ff fddb 	bl	800519c <readWaterTemp>
			if(pH <= 14 ) runs_after++;
		}
		else micro_reset ='n';
	}*/

	for(int checkSamples = 0; checkSamples<num_sensor_samples+3; checkSamples++)			   // sample TDS and PH every half second for 30 times
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	e034      	b.n	8005656 <getSensorValues+0x7a>
	{
		//osDelay(100);
		get_DMA_nutrient_ph_value();
 80055ec:	f7ff ff32 	bl	8005454 <get_DMA_nutrient_ph_value>
				//osDelay(10);
		convertWaterTDS();
 80055f0:	f7ff fe3e 	bl	8005270 <convertWaterTDS>
				//osDelay(10);
		convertPH();
 80055f4:	f7ff ffb0 	bl	8005558 <convertPH>

		if(checkSamples >= 3) // Sometimes the first 3 samples are invalad so lets just skip them
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	dd17      	ble.n	800562e <getSensorValues+0x52>
		{
			 sample_array_TDS[checkSamples-3] = TDS;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	1ed9      	subs	r1, r3, #3
 8005602:	4b45      	ldr	r3, [pc, #276]	; (8005718 <getSensorValues+0x13c>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	4844      	ldr	r0, [pc, #272]	; (800571c <getSensorValues+0x140>)
 800560a:	00c9      	lsls	r1, r1, #3
 800560c:	4401      	add	r1, r0
 800560e:	e9c1 2300 	strd	r2, r3, [r1]
			 sample_array_pH[checkSamples-3] = pH;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	1ed9      	subs	r1, r3, #3
 8005616:	4b42      	ldr	r3, [pc, #264]	; (8005720 <getSensorValues+0x144>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	4841      	ldr	r0, [pc, #260]	; (8005724 <getSensorValues+0x148>)
 800561e:	00c9      	lsls	r1, r1, #3
 8005620:	4401      	add	r1, r0
 8005622:	e9c1 2300 	strd	r2, r3, [r1]
			 osDelay(10);
 8005626:	200a      	movs	r0, #10
 8005628:	f00d fa21 	bl	8012a6e <osDelay>
 800562c:	e002      	b.n	8005634 <getSensorValues+0x58>
		}
		else  osDelay(100);
 800562e:	2064      	movs	r0, #100	; 0x64
 8005630:	f00d fa1d 	bl	8012a6e <osDelay>
		TDS = 0;
 8005634:	4938      	ldr	r1, [pc, #224]	; (8005718 <getSensorValues+0x13c>)
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9c1 2300 	strd	r2, r3, [r1]
		pH = 0;
 8005642:	4937      	ldr	r1, [pc, #220]	; (8005720 <getSensorValues+0x144>)
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int checkSamples = 0; checkSamples<num_sensor_samples+3; checkSamples++)			   // sample TDS and PH every half second for 30 times
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3301      	adds	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	4b34      	ldr	r3, [pc, #208]	; (8005728 <getSensorValues+0x14c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3302      	adds	r3, #2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	ddc4      	ble.n	80055ec <getSensorValues+0x10>
	}
//	TDS = 0;
//	pH = 0;

	for(int get_average = 0; get_average<num_sensor_samples; get_average++)			   // sample TDS and PH every half second for 30 times
 8005662:	2300      	movs	r3, #0
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	e022      	b.n	80056ae <getSensorValues+0xd2>
	{
		TDS += sample_array_TDS[get_average];
 8005668:	4a2c      	ldr	r2, [pc, #176]	; (800571c <getSensorValues+0x140>)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005674:	4b28      	ldr	r3, [pc, #160]	; (8005718 <getSensorValues+0x13c>)
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f7fa fdc1 	bl	8000200 <__adddf3>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4925      	ldr	r1, [pc, #148]	; (8005718 <getSensorValues+0x13c>)
 8005684:	e9c1 2300 	strd	r2, r3, [r1]
		pH += sample_array_pH[get_average];
 8005688:	4a26      	ldr	r2, [pc, #152]	; (8005724 <getSensorValues+0x148>)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <getSensorValues+0x144>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa fdb1 	bl	8000200 <__adddf3>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	491f      	ldr	r1, [pc, #124]	; (8005720 <getSensorValues+0x144>)
 80056a4:	e9c1 2300 	strd	r2, r3, [r1]
	for(int get_average = 0; get_average<num_sensor_samples; get_average++)			   // sample TDS and PH every half second for 30 times
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <getSensorValues+0x14c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	dbd7      	blt.n	8005668 <getSensorValues+0x8c>
	}
	TDS = TDS/num_sensor_samples;
 80056b8:	4b17      	ldr	r3, [pc, #92]	; (8005718 <getSensorValues+0x13c>)
 80056ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <getSensorValues+0x14c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fa fee8 	bl	8000498 <__aeabi_i2d>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f7fb f876 	bl	80007c0 <__aeabi_ddiv>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	490f      	ldr	r1, [pc, #60]	; (8005718 <getSensorValues+0x13c>)
 80056da:	e9c1 2300 	strd	r2, r3, [r1]
	pH  = pH/num_sensor_samples;
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <getSensorValues+0x144>)
 80056e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <getSensorValues+0x14c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fa fed5 	bl	8000498 <__aeabi_i2d>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fb f863 	bl	80007c0 <__aeabi_ddiv>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4908      	ldr	r1, [pc, #32]	; (8005720 <getSensorValues+0x144>)
 8005700:	e9c1 2300 	strd	r2, r3, [r1]
	runs_after = 0;
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <getSensorValues+0x150>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]



	waterTempControl();
 800570a:	f7fe f92d 	bl	8003968 <waterTempControl>
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bdb0      	pop	{r4, r5, r7, pc}
 8005716:	bf00      	nop
 8005718:	20001800 	.word	0x20001800
 800571c:	20003e18 	.word	0x20003e18
 8005720:	20001808 	.word	0x20001808
 8005724:	20003f08 	.word	0x20003f08
 8005728:	20000080 	.word	0x20000080
 800572c:	2000585c 	.word	0x2000585c

08005730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HAL_MspInit+0x54>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	4a11      	ldr	r2, [pc, #68]	; (8005784 <HAL_MspInit+0x54>)
 8005740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005744:	6453      	str	r3, [r2, #68]	; 0x44
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_MspInit+0x54>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_MspInit+0x54>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <HAL_MspInit+0x54>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	; 0x40
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_MspInit+0x54>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800576e:	2200      	movs	r2, #0
 8005770:	210f      	movs	r1, #15
 8005772:	f06f 0001 	mvn.w	r0, #1
 8005776:	f001 fa78 	bl	8006c6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 0314 	add.w	r3, r7, #20
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a33      	ldr	r2, [pc, #204]	; (8005874 <HAL_ADC_MspInit+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d15f      	bne.n	800586a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	4b32      	ldr	r3, [pc, #200]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	4a31      	ldr	r2, [pc, #196]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ba:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_ADC_MspInit+0xf0>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057e2:	2330      	movs	r3, #48	; 0x30
 80057e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057e6:	2303      	movs	r3, #3
 80057e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	4619      	mov	r1, r3
 80057f4:	4821      	ldr	r0, [pc, #132]	; (800587c <HAL_ADC_MspInit+0xf4>)
 80057f6:	f001 fdcf 	bl	8007398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <HAL_ADC_MspInit+0xfc>)
 80057fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005802:	2200      	movs	r2, #0
 8005804:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800580c:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 800580e:	2200      	movs	r2, #0
 8005810:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005818:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800581a:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 800581c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005820:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005828:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 800582c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005830:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005834:	2200      	movs	r2, #0
 8005836:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 800583a:	2200      	movs	r2, #0
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800583e:	4810      	ldr	r0, [pc, #64]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005840:	f001 fa3e 	bl	8006cc0 <HAL_DMA_Init>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800584a:	f7fe fe25 	bl	8004498 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
 8005854:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <HAL_ADC_MspInit+0xf8>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800585a:	2200      	movs	r2, #0
 800585c:	2105      	movs	r1, #5
 800585e:	2012      	movs	r0, #18
 8005860:	f001 fa03 	bl	8006c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005864:	2012      	movs	r0, #18
 8005866:	f001 fa1c 	bl	8006ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800586a:	bf00      	nop
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40012000 	.word	0x40012000
 8005878:	40023800 	.word	0x40023800
 800587c:	40020000 	.word	0x40020000
 8005880:	2000c8e8 	.word	0x2000c8e8
 8005884:	40026410 	.word	0x40026410

08005888 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a05      	ldr	r2, [pc, #20]	; (80058ac <HAL_RTC_MspInit+0x24>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d102      	bne.n	80058a0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_RTC_MspInit+0x28>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40002800 	.word	0x40002800
 80058b0:	42470e3c 	.word	0x42470e3c

080058b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <HAL_TIM_Base_MspInit+0xb0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	4b27      	ldr	r3, [pc, #156]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	4a26      	ldr	r2, [pc, #152]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6453      	str	r3, [r2, #68]	; 0x44
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80058e2:	e03a      	b.n	800595a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_TIM_Base_MspInit+0xb8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	6413      	str	r3, [r2, #64]	; 0x40
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
}
 800590a:	e026      	b.n	800595a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a17      	ldr	r2, [pc, #92]	; (8005970 <HAL_TIM_Base_MspInit+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10e      	bne.n	8005934 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	6453      	str	r3, [r2, #68]	; 0x44
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	e012      	b.n	800595a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a0e      	ldr	r2, [pc, #56]	; (8005974 <HAL_TIM_Base_MspInit+0xc0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10d      	bne.n	800595a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	4a08      	ldr	r2, [pc, #32]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594c:	6413      	str	r3, [r2, #64]	; 0x40
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <HAL_TIM_Base_MspInit+0xb4>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	40010000 	.word	0x40010000
 8005968:	40023800 	.word	0x40023800
 800596c:	40000800 	.word	0x40000800
 8005970:	40014400 	.word	0x40014400
 8005974:	40001800 	.word	0x40001800

08005978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a24      	ldr	r2, [pc, #144]	; (8005a28 <HAL_TIM_MspPostInit+0xb0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d11f      	bne.n	80059da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059a4:	f043 0310 	orr.w	r3, r3, #16
 80059a8:	6313      	str	r3, [r2, #48]	; 0x30
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 80059b6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80059ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059bc:	2302      	movs	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059c8:	2301      	movs	r3, #1
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	4619      	mov	r1, r3
 80059d2:	4817      	ldr	r0, [pc, #92]	; (8005a30 <HAL_TIM_MspPostInit+0xb8>)
 80059d4:	f001 fce0 	bl	8007398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80059d8:	e022      	b.n	8005a20 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d11d      	bne.n	8005a20 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	4a0f      	ldr	r2, [pc, #60]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059ee:	f043 0320 	orr.w	r3, r3, #32
 80059f2:	6313      	str	r3, [r2, #48]	; 0x30
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <HAL_TIM_MspPostInit+0xb4>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8005a00:	2340      	movs	r3, #64	; 0x40
 8005a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a04:	2302      	movs	r3, #2
 8005a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005a10:	2303      	movs	r3, #3
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4807      	ldr	r0, [pc, #28]	; (8005a38 <HAL_TIM_MspPostInit+0xc0>)
 8005a1c:	f001 fcbc 	bl	8007398 <HAL_GPIO_Init>
}
 8005a20:	bf00      	nop
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40021400 	.word	0x40021400

08005a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08c      	sub	sp, #48	; 0x30
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	2036      	movs	r0, #54	; 0x36
 8005a52:	f001 f90a 	bl	8006c6a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a56:	2036      	movs	r0, #54	; 0x36
 8005a58:	f001 f923 	bl	8006ca2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <HAL_InitTick+0xa4>)
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_InitTick+0xa4>)
 8005a66:	f043 0310 	orr.w	r3, r3, #16
 8005a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <HAL_InitTick+0xa4>)
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a78:	f107 0210 	add.w	r2, r7, #16
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f003 fff2 	bl	8009a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005a88:	f003 ffce 	bl	8009a28 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <HAL_InitTick+0xa8>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	0c9b      	lsrs	r3, r3, #18
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <HAL_InitTick+0xac>)
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <HAL_InitTick+0xb0>)
 8005aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <HAL_InitTick+0xac>)
 8005aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005aac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005aae:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <HAL_InitTick+0xac>)
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_InitTick+0xac>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_InitTick+0xac>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <HAL_InitTick+0xac>)
 8005ac2:	f004 fda2 	bl	800a60a <HAL_TIM_Base_Init>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005acc:	4806      	ldr	r0, [pc, #24]	; (8005ae8 <HAL_InitTick+0xac>)
 8005ace:	f004 fdeb 	bl	800a6a8 <HAL_TIM_Base_Start_IT>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e000      	b.n	8005ad8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3730      	adds	r7, #48	; 0x30
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	431bde83 	.word	0x431bde83
 8005ae8:	2000da24 	.word	0x2000da24
 8005aec:	40001000 	.word	0x40001000

08005af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005af4:	e7fe      	b.n	8005af4 <NMI_Handler+0x4>

08005af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005afa:	e7fe      	b.n	8005afa <HardFault_Handler+0x4>

08005afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b00:	e7fe      	b.n	8005b00 <MemManage_Handler+0x4>

08005b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b02:	b480      	push	{r7}
 8005b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b06:	e7fe      	b.n	8005b06 <BusFault_Handler+0x4>

08005b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b0c:	e7fe      	b.n	8005b0c <UsageFault_Handler+0x4>

08005b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
	...

08005b1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005b20:	4802      	ldr	r0, [pc, #8]	; (8005b2c <ADC_IRQHandler+0x10>)
 8005b22:	f000 fb00 	bl	8006126 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000982c 	.word	0x2000982c

08005b30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <TIM6_DAC_IRQHandler+0x10>)
 8005b36:	f004 ff45 	bl	800a9c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000da24 	.word	0x2000da24

08005b44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b48:	4802      	ldr	r0, [pc, #8]	; (8005b54 <DMA2_Stream0_IRQHandler+0x10>)
 8005b4a:	f001 f9bf 	bl	8006ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	2000c8e8 	.word	0x2000c8e8

08005b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005b5c:	4802      	ldr	r0, [pc, #8]	; (8005b68 <OTG_FS_IRQHandler+0x10>)
 8005b5e:	f002 f86b 	bl	8007c38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000e2f4 	.word	0x2000e2f4

08005b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
	return 1;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <_kill>:

int _kill(int pid, int sig)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b84:	f010 f85a 	bl	8015c3c <__errno>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2216      	movs	r2, #22
 8005b8c:	601a      	str	r2, [r3, #0]
	return -1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <_exit>:

void _exit (int status)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ffe7 	bl	8005b7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8005bac:	e7fe      	b.n	8005bac <_exit+0x12>

08005bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e00a      	b.n	8005bd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005bc0:	f3af 8000 	nop.w
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	60ba      	str	r2, [r7, #8]
 8005bcc:	b2ca      	uxtb	r2, r1
 8005bce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	dbf0      	blt.n	8005bc0 <_read+0x12>
	}

return len;
 8005bde:	687b      	ldr	r3, [r7, #4]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e009      	b.n	8005c0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	60ba      	str	r2, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	dbf1      	blt.n	8005bfa <_write+0x12>
	}
	return len;
 8005c16:	687b      	ldr	r3, [r7, #4]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_close>:

int _close(int file)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	return -1;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c46:	605a      	str	r2, [r3, #4]
	return 0;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <_isatty>:

int _isatty(int file)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	return 1;
 8005c5c:	2301      	movs	r3, #1
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
	return 0;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <_sbrk+0x5c>)
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <_sbrk+0x60>)
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <_sbrk+0x64>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <_sbrk+0x64>)
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <_sbrk+0x68>)
 8005ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <_sbrk+0x64>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4413      	add	r3, r2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d207      	bcs.n	8005cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cb0:	f00f ffc4 	bl	8015c3c <__errno>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	220c      	movs	r2, #12
 8005cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbe:	e009      	b.n	8005cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cc0:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <_sbrk+0x64>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <_sbrk+0x64>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <_sbrk+0x64>)
 8005cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	2001c000 	.word	0x2001c000
 8005ce0:	00000800 	.word	0x00000800
 8005ce4:	20005860 	.word	0x20005860
 8005ce8:	2000e608 	.word	0x2000e608

08005cec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <DWT_Delay_Init+0x58>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <DWT_Delay_Init+0x58>)
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d06:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <DWT_Delay_Init+0x58>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <DWT_Delay_Init+0x58>)
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d12:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a0e      	ldr	r2, [pc, #56]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a0b      	ldr	r2, [pc, #44]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005d32:	bf00      	nop
    __ASM volatile ("NOP");
 8005d34:	bf00      	nop
    __ASM volatile ("NOP");
 8005d36:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <DWT_Delay_Init+0x5c>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005d44:	2301      	movs	r3, #1
    }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	e000edf0 	.word	0xe000edf0
 8005d54:	e0001000 	.word	0xe0001000

08005d58 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <DWT_Delay_us+0x48>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8005d66:	f003 fe55 	bl	8009a14 <HAL_RCC_GetHCLKFreq>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <DWT_Delay_us+0x4c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8005d80:	bf00      	nop
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <DWT_Delay_us+0x48>)
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad2      	subs	r2, r2, r3
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3f6      	bcc.n	8005d82 <DWT_Delay_us+0x2a>
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e0001000 	.word	0xe0001000
 8005da4:	431bde83 	.word	0x431bde83

08005da8 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 8005db2:	2140      	movs	r1, #64	; 0x40
 8005db4:	4813      	ldr	r0, [pc, #76]	; (8005e04 <DS18B20_Start+0x5c>)
 8005db6:	f000 f8ab 	bl	8005f10 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2140      	movs	r1, #64	; 0x40
 8005dbe:	4811      	ldr	r0, [pc, #68]	; (8005e04 <DS18B20_Start+0x5c>)
 8005dc0:	f001 fc9f 	bl	8007702 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8005dc4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005dc8:	f7ff ffc6 	bl	8005d58 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8005dcc:	2140      	movs	r1, #64	; 0x40
 8005dce:	480d      	ldr	r0, [pc, #52]	; (8005e04 <DS18B20_Start+0x5c>)
 8005dd0:	f000 f8bc 	bl	8005f4c <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8005dd4:	2050      	movs	r0, #80	; 0x50
 8005dd6:	f7ff ffbf 	bl	8005d58 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8005dda:	2140      	movs	r1, #64	; 0x40
 8005ddc:	4809      	ldr	r0, [pc, #36]	; (8005e04 <DS18B20_Start+0x5c>)
 8005dde:	f001 fc79 	bl	80076d4 <HAL_GPIO_ReadPin>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <DS18B20_Start+0x46>
 8005de8:	2301      	movs	r3, #1
 8005dea:	71fb      	strb	r3, [r7, #7]
 8005dec:	e001      	b.n	8005df2 <DS18B20_Start+0x4a>
	else Response = -1;
 8005dee:	23ff      	movs	r3, #255	; 0xff
 8005df0:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8005df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005df6:	f7ff ffaf 	bl	8005d58 <DWT_Delay_us>

	return Response;
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40020000 	.word	0x40020000

08005e08 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8005e12:	2140      	movs	r1, #64	; 0x40
 8005e14:	481e      	ldr	r0, [pc, #120]	; (8005e90 <DS18B20_Write+0x88>)
 8005e16:	f000 f87b 	bl	8005f10 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e02e      	b.n	8005e7e <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8005e20:	79fa      	ldrb	r2, [r7, #7]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	fa42 f303 	asr.w	r3, r2, r3
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8005e30:	2140      	movs	r1, #64	; 0x40
 8005e32:	4817      	ldr	r0, [pc, #92]	; (8005e90 <DS18B20_Write+0x88>)
 8005e34:	f000 f86c 	bl	8005f10 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	; 0x40
 8005e3c:	4814      	ldr	r0, [pc, #80]	; (8005e90 <DS18B20_Write+0x88>)
 8005e3e:	f001 fc60 	bl	8007702 <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 8005e42:	2005      	movs	r0, #5
 8005e44:	f7ff ff88 	bl	8005d58 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8005e48:	2140      	movs	r1, #64	; 0x40
 8005e4a:	4811      	ldr	r0, [pc, #68]	; (8005e90 <DS18B20_Write+0x88>)
 8005e4c:	f000 f87e 	bl	8005f4c <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8005e50:	2041      	movs	r0, #65	; 0x41
 8005e52:	f7ff ff81 	bl	8005d58 <DWT_Delay_us>
 8005e56:	e00f      	b.n	8005e78 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8005e58:	2140      	movs	r1, #64	; 0x40
 8005e5a:	480d      	ldr	r0, [pc, #52]	; (8005e90 <DS18B20_Write+0x88>)
 8005e5c:	f000 f858 	bl	8005f10 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8005e60:	2200      	movs	r2, #0
 8005e62:	2140      	movs	r1, #64	; 0x40
 8005e64:	480a      	ldr	r0, [pc, #40]	; (8005e90 <DS18B20_Write+0x88>)
 8005e66:	f001 fc4c 	bl	8007702 <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 8005e6a:	2041      	movs	r0, #65	; 0x41
 8005e6c:	f7ff ff74 	bl	8005d58 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8005e70:	2140      	movs	r1, #64	; 0x40
 8005e72:	4807      	ldr	r0, [pc, #28]	; (8005e90 <DS18B20_Write+0x88>)
 8005e74:	f000 f86a 	bl	8005f4c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b07      	cmp	r3, #7
 8005e82:	ddcd      	ble.n	8005e20 <DS18B20_Write+0x18>
		}
	}
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40020000 	.word	0x40020000

08005e94 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8005e9e:	2140      	movs	r1, #64	; 0x40
 8005ea0:	481a      	ldr	r0, [pc, #104]	; (8005f0c <DS18B20_Read+0x78>)
 8005ea2:	f000 f853 	bl	8005f4c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	e026      	b.n	8005efa <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8005eac:	2140      	movs	r1, #64	; 0x40
 8005eae:	4817      	ldr	r0, [pc, #92]	; (8005f0c <DS18B20_Read+0x78>)
 8005eb0:	f000 f82e 	bl	8005f10 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2140      	movs	r1, #64	; 0x40
 8005eb8:	4814      	ldr	r0, [pc, #80]	; (8005f0c <DS18B20_Read+0x78>)
 8005eba:	f001 fc22 	bl	8007702 <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 8005ebe:	2005      	movs	r0, #5
 8005ec0:	f7ff ff4a 	bl	8005d58 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8005ec4:	2140      	movs	r1, #64	; 0x40
 8005ec6:	4811      	ldr	r0, [pc, #68]	; (8005f0c <DS18B20_Read+0x78>)
 8005ec8:	f000 f840 	bl	8005f4c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	480f      	ldr	r0, [pc, #60]	; (8005f0c <DS18B20_Read+0x78>)
 8005ed0:	f001 fc00 	bl	80076d4 <HAL_GPIO_ReadPin>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8005eda:	2201      	movs	r2, #1
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	b25a      	sxtb	r2, r3
 8005ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 8005eee:	2032      	movs	r0, #50	; 0x32
 8005ef0:	f7ff ff32 	bl	8005d58 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	ddd5      	ble.n	8005eac <DS18B20_Read+0x18>
	}
	return value;
 8005f00:	79fb      	ldrb	r3, [r7, #7]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40020000 	.word	0x40020000

08005f10 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	609a      	str	r2, [r3, #8]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8005f2c:	887b      	ldrh	r3, [r7, #2]
 8005f2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f30:	2301      	movs	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fa2a 	bl	8007398 <HAL_GPIO_Init>
}
 8005f44:	bf00      	nop
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8005f68:	887b      	ldrh	r3, [r7, #2]
 8005f6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005f74:	f107 030c 	add.w	r3, r7, #12
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fa0c 	bl	8007398 <HAL_GPIO_Init>
}
 8005f80:	bf00      	nop
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f8c:	480d      	ldr	r0, [pc, #52]	; (8005fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f8e:	490e      	ldr	r1, [pc, #56]	; (8005fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f90:	4a0e      	ldr	r2, [pc, #56]	; (8005fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f94:	e002      	b.n	8005f9c <LoopCopyDataInit>

08005f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f9a:	3304      	adds	r3, #4

08005f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa0:	d3f9      	bcc.n	8005f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fa2:	4a0b      	ldr	r2, [pc, #44]	; (8005fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fa4:	4c0b      	ldr	r4, [pc, #44]	; (8005fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fa8:	e001      	b.n	8005fae <LoopFillZerobss>

08005faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fac:	3204      	adds	r2, #4

08005fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb0:	d3fb      	bcc.n	8005faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005fb2:	f7ff fe9b 	bl	8005cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fb6:	f00f ff3d 	bl	8015e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fba:	f7fd fe29 	bl	8003c10 <main>
  bx  lr
 8005fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005fc0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fc8:	20000464 	.word	0x20000464
  ldr r2, =_sidata
 8005fcc:	0801ac34 	.word	0x0801ac34
  ldr r2, =_sbss
 8005fd0:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8005fd4:	2000e608 	.word	0x2000e608

08005fd8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fd8:	e7fe      	b.n	8005fd8 <CAN1_RX0_IRQHandler>
	...

08005fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <HAL_Init+0x40>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <HAL_Init+0x40>)
 8005fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <HAL_Init+0x40>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <HAL_Init+0x40>)
 8005ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <HAL_Init+0x40>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a07      	ldr	r2, [pc, #28]	; (800601c <HAL_Init+0x40>)
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006004:	2003      	movs	r0, #3
 8006006:	f000 fe25 	bl	8006c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800600a:	200f      	movs	r0, #15
 800600c:	f7ff fd16 	bl	8005a3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006010:	f7ff fb8e 	bl	8005730 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023c00 	.word	0x40023c00

08006020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_IncTick+0x1c>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_IncTick+0x20>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4413      	add	r3, r2
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_IncTick+0x20>)
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	20000268 	.word	0x20000268
 8006040:	2000da6c 	.word	0x2000da6c

08006044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return uwTick;
 8006048:	4b02      	ldr	r3, [pc, #8]	; (8006054 <HAL_GetTick+0x10>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	2000da6c 	.word	0x2000da6c

08006058 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006060:	f7ff fff0 	bl	8006044 <HAL_GetTick>
 8006064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d005      	beq.n	800607e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_Delay+0x44>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800607e:	bf00      	nop
 8006080:	f7ff ffe0 	bl	8006044 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	d8f7      	bhi.n	8006080 <HAL_Delay+0x28>
  {
  }
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000268 	.word	0x20000268

080060a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e033      	b.n	800611e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fb62 	bl	8005788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d118      	bne.n	8006110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060e6:	f023 0302 	bic.w	r3, r3, #2
 80060ea:	f043 0202 	orr.w	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb72 	bl	80067dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
 800610e:	e001      	b.n	8006114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b02      	cmp	r3, #2
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	bf0c      	ite	eq
 800615a:	2301      	moveq	r3, #1
 800615c:	2300      	movne	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d049      	beq.n	80061fc <HAL_ADC_IRQHandler+0xd6>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d046      	beq.n	80061fc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d12b      	bne.n	80061ec <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006198:	2b00      	cmp	r3, #0
 800619a:	d127      	bne.n	80061ec <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d006      	beq.n	80061b8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d119      	bne.n	80061ec <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0220 	bic.w	r2, r2, #32
 80061c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe f91b 	bl	8004428 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f06f 0212 	mvn.w	r2, #18
 80061fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	bf0c      	ite	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	2300      	movne	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d057      	beq.n	80062de <HAL_ADC_IRQHandler+0x1b8>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d054      	beq.n	80062de <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d139      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006264:	2b00      	cmp	r3, #0
 8006266:	d006      	beq.n	8006276 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006272:	2b00      	cmp	r3, #0
 8006274:	d12b      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006280:	2b00      	cmp	r3, #0
 8006282:	d124      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800628e:	2b00      	cmp	r3, #0
 8006290:	d11d      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006296:	2b00      	cmp	r3, #0
 8006298:	d119      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0201 	orr.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc0c 	bl	8006aec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 020c 	mvn.w	r2, #12
 80062dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_ADC_IRQHandler+0x21a>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d014      	beq.n	8006340 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d10d      	bne.n	8006340 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f920 	bl	8006576 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f06f 0201 	mvn.w	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d015      	beq.n	80063a0 <HAL_ADC_IRQHandler+0x27a>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d012      	beq.n	80063a0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	f043 0202 	orr.w	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0220 	mvn.w	r2, #32
 800638e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8f9 	bl	8006588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0220 	mvn.w	r2, #32
 800639e:	601a      	str	r2, [r3, #0]
  }
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_ADC_Start_DMA+0x1e>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e0bc      	b.n	8006540 <HAL_ADC_Start_DMA+0x198>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d018      	beq.n	800640e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80063ec:	4b56      	ldr	r3, [pc, #344]	; (8006548 <HAL_ADC_Start_DMA+0x1a0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <HAL_ADC_Start_DMA+0x1a4>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0c9a      	lsrs	r2, r3, #18
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006400:	e002      	b.n	8006408 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3b01      	subs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f9      	bne.n	8006402 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	f040 8084 	bne.w	8006526 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645c:	d106      	bne.n	800646c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f023 0206 	bic.w	r2, r3, #6
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
 800646a:	e002      	b.n	8006472 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	4a34      	ldr	r2, [pc, #208]	; (8006550 <HAL_ADC_Start_DMA+0x1a8>)
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	4a33      	ldr	r2, [pc, #204]	; (8006554 <HAL_ADC_Start_DMA+0x1ac>)
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	4a32      	ldr	r2, [pc, #200]	; (8006558 <HAL_ADC_Start_DMA+0x1b0>)
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800649a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	334c      	adds	r3, #76	; 0x4c
 80064c6:	4619      	mov	r1, r3
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f000 fca6 	bl	8006e1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80064d0:	4b22      	ldr	r3, [pc, #136]	; (800655c <HAL_ADC_Start_DMA+0x1b4>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10f      	bne.n	80064fc <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d129      	bne.n	800653e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064f8:	609a      	str	r2, [r3, #8]
 80064fa:	e020      	b.n	800653e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a17      	ldr	r2, [pc, #92]	; (8006560 <HAL_ADC_Start_DMA+0x1b8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d11b      	bne.n	800653e <HAL_ADC_Start_DMA+0x196>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d114      	bne.n	800653e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	e00b      	b.n	800653e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0210 	orr.w	r2, r3, #16
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000260 	.word	0x20000260
 800654c:	431bde83 	.word	0x431bde83
 8006550:	080069e9 	.word	0x080069e9
 8006554:	08006aa3 	.word	0x08006aa3
 8006558:	08006abf 	.word	0x08006abf
 800655c:	40012300 	.word	0x40012300
 8006560:	40012000 	.word	0x40012000

08006564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
	...

0800659c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x1c>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e103      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x224>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	d925      	bls.n	8006614 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68d9      	ldr	r1, [r3, #12]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	3b1e      	subs	r3, #30
 80065de:	2207      	movs	r2, #7
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43da      	mvns	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	400a      	ands	r2, r1
 80065ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68d9      	ldr	r1, [r3, #12]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	4618      	mov	r0, r3
 8006600:	4603      	mov	r3, r0
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4403      	add	r3, r0
 8006606:	3b1e      	subs	r3, #30
 8006608:	409a      	lsls	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	60da      	str	r2, [r3, #12]
 8006612:	e022      	b.n	800665a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6919      	ldr	r1, [r3, #16]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	2207      	movs	r2, #7
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43da      	mvns	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	400a      	ands	r2, r1
 8006636:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6919      	ldr	r1, [r3, #16]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	4618      	mov	r0, r3
 800664a:	4603      	mov	r3, r0
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	4403      	add	r3, r0
 8006650:	409a      	lsls	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b06      	cmp	r3, #6
 8006660:	d824      	bhi.n	80066ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	3b05      	subs	r3, #5
 8006674:	221f      	movs	r2, #31
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43da      	mvns	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	400a      	ands	r2, r1
 8006682:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	4618      	mov	r0, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	3b05      	subs	r3, #5
 800669e:	fa00 f203 	lsl.w	r2, r0, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	635a      	str	r2, [r3, #52]	; 0x34
 80066aa:	e04c      	b.n	8006746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	d824      	bhi.n	80066fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	3b23      	subs	r3, #35	; 0x23
 80066c6:	221f      	movs	r2, #31
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43da      	mvns	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	400a      	ands	r2, r1
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	4618      	mov	r0, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	3b23      	subs	r3, #35	; 0x23
 80066f0:	fa00 f203 	lsl.w	r2, r0, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
 80066fc:	e023      	b.n	8006746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	3b41      	subs	r3, #65	; 0x41
 8006710:	221f      	movs	r2, #31
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43da      	mvns	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	400a      	ands	r2, r1
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	4618      	mov	r0, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	3b41      	subs	r3, #65	; 0x41
 800673a:	fa00 f203 	lsl.w	r2, r0, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a20      	ldr	r2, [pc, #128]	; (80067cc <HAL_ADC_ConfigChannel+0x230>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d109      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x1c8>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b12      	cmp	r3, #18
 8006756:	d105      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <HAL_ADC_ConfigChannel+0x234>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_ADC_ConfigChannel+0x234>)
 800675e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006762:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	; (80067cc <HAL_ADC_ConfigChannel+0x230>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d123      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x21a>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b10      	cmp	r3, #16
 8006774:	d003      	beq.n	800677e <HAL_ADC_ConfigChannel+0x1e2>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b11      	cmp	r3, #17
 800677c:	d11b      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800677e:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <HAL_ADC_ConfigChannel+0x234>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <HAL_ADC_ConfigChannel+0x234>)
 8006784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006788:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b10      	cmp	r3, #16
 8006790:	d111      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <HAL_ADC_ConfigChannel+0x238>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <HAL_ADC_ConfigChannel+0x23c>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	0c9a      	lsrs	r2, r3, #18
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80067a8:	e002      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f9      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40012000 	.word	0x40012000
 80067d0:	40012300 	.word	0x40012300
 80067d4:	20000260 	.word	0x20000260
 80067d8:	431bde83 	.word	0x431bde83

080067dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80067e4:	4b7e      	ldr	r3, [pc, #504]	; (80069e0 <ADC_Init+0x204>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	4a7d      	ldr	r2, [pc, #500]	; (80069e0 <ADC_Init+0x204>)
 80067ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80067ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80067f0:	4b7b      	ldr	r3, [pc, #492]	; (80069e0 <ADC_Init+0x204>)
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4979      	ldr	r1, [pc, #484]	; (80069e0 <ADC_Init+0x204>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800680c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6859      	ldr	r1, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	021a      	lsls	r2, r3, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6899      	ldr	r1, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	4a5e      	ldr	r2, [pc, #376]	; (80069e4 <ADC_Init+0x208>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800687e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6899      	ldr	r1, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	e00f      	b.n	80068d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0202 	bic.w	r2, r2, #2
 80068e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6899      	ldr	r1, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7e1b      	ldrb	r3, [r3, #24]
 80068f0:	005a      	lsls	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d027      	beq.n	8006954 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	3b01      	subs	r3, #1
 800692a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800692e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	fa92 f2a2 	rbit	r2, r2
 8006936:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	fab2 f282 	clz	r2, r2
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	fa03 f102 	lsl.w	r1, r3, r2
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e007      	b.n	8006964 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	3b01      	subs	r3, #1
 8006980:	051a      	lsls	r2, r3, #20
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6899      	ldr	r1, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069a6:	025a      	lsls	r2, r3, #9
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6899      	ldr	r1, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	029a      	lsls	r2, r3, #10
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012300 	.word	0x40012300
 80069e4:	0f000001 	.word	0x0f000001

080069e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d13c      	bne.n	8006a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d12b      	bne.n	8006a74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d127      	bne.n	8006a74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d119      	bne.n	8006a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0220 	bic.w	r2, r2, #32
 8006a4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	f043 0201 	orr.w	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7fd fcd7 	bl	8004428 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a7a:	e00e      	b.n	8006a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fd7d 	bl	8006588 <HAL_ADC_ErrorCallback>
}
 8006a8e:	e004      	b.n	8006a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff fd57 	bl	8006564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f043 0204 	orr.w	r2, r3, #4
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff fd52 	bl	8006588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
	...

08006b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <__NVIC_SetPriorityGrouping+0x44>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b32:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <__NVIC_SetPriorityGrouping+0x44>)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	60d3      	str	r3, [r2, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <__NVIC_GetPriorityGrouping+0x18>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	0a1b      	lsrs	r3, r3, #8
 8006b52:	f003 0307 	and.w	r3, r3, #7
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000ed00 	.word	0xe000ed00

08006b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	db0b      	blt.n	8006b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	f003 021f 	and.w	r2, r3, #31
 8006b7c:	4906      	ldr	r1, [pc, #24]	; (8006b98 <__NVIC_EnableIRQ+0x34>)
 8006b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	2001      	movs	r0, #1
 8006b86:	fa00 f202 	lsl.w	r2, r0, r2
 8006b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr
 8006b98:	e000e100 	.word	0xe000e100

08006b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db0a      	blt.n	8006bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	490c      	ldr	r1, [pc, #48]	; (8006be8 <__NVIC_SetPriority+0x4c>)
 8006bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bba:	0112      	lsls	r2, r2, #4
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bc4:	e00a      	b.n	8006bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4908      	ldr	r1, [pc, #32]	; (8006bec <__NVIC_SetPriority+0x50>)
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	0112      	lsls	r2, r2, #4
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	440b      	add	r3, r1
 8006bda:	761a      	strb	r2, [r3, #24]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	e000e100 	.word	0xe000e100
 8006bec:	e000ed00 	.word	0xe000ed00

08006bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b089      	sub	sp, #36	; 0x24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f1c3 0307 	rsb	r3, r3, #7
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	bf28      	it	cs
 8006c0e:	2304      	movcs	r3, #4
 8006c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3304      	adds	r3, #4
 8006c16:	2b06      	cmp	r3, #6
 8006c18:	d902      	bls.n	8006c20 <NVIC_EncodePriority+0x30>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3b03      	subs	r3, #3
 8006c1e:	e000      	b.n	8006c22 <NVIC_EncodePriority+0x32>
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	43da      	mvns	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	401a      	ands	r2, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c38:	f04f 31ff 	mov.w	r1, #4294967295
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	43d9      	mvns	r1, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c48:	4313      	orrs	r3, r2
         );
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3724      	adds	r7, #36	; 0x24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff4f 	bl	8006b00 <__NVIC_SetPriorityGrouping>
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	4603      	mov	r3, r0
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c7c:	f7ff ff64 	bl	8006b48 <__NVIC_GetPriorityGrouping>
 8006c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	6978      	ldr	r0, [r7, #20]
 8006c88:	f7ff ffb2 	bl	8006bf0 <NVIC_EncodePriority>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ff81 	bl	8006b9c <__NVIC_SetPriority>
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	4603      	mov	r3, r0
 8006caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff ff57 	bl	8006b64 <__NVIC_EnableIRQ>
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ccc:	f7ff f9ba 	bl	8006044 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e099      	b.n	8006e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cfc:	e00f      	b.n	8006d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cfe:	f7ff f9a1 	bl	8006044 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d908      	bls.n	8006d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2203      	movs	r2, #3
 8006d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e078      	b.n	8006e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e8      	bne.n	8006cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4b38      	ldr	r3, [pc, #224]	; (8006e18 <HAL_DMA_Init+0x158>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d107      	bne.n	8006d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	4313      	orrs	r3, r2
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d117      	bne.n	8006de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa6d 	bl	80072a4 <DMA_CheckFifoParam>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006dde:	2301      	movs	r3, #1
 8006de0:	e016      	b.n	8006e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa26 	bl	800723c <DMA_CalcBaseAndBitshift>
 8006df0:	4603      	mov	r3, r0
 8006df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df8:	223f      	movs	r2, #63	; 0x3f
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	f010803f 	.word	0xf010803f

08006e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_DMA_Start_IT+0x26>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e040      	b.n	8006ec4 <HAL_DMA_Start_IT+0xa8>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d12f      	bne.n	8006eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f9b8 	bl	80071e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	223f      	movs	r2, #63	; 0x3f
 8006e76:	409a      	lsls	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0216 	orr.w	r2, r2, #22
 8006e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0208 	orr.w	r2, r2, #8
 8006ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e005      	b.n	8006ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ed8:	4b92      	ldr	r3, [pc, #584]	; (8007124 <HAL_DMA_IRQHandler+0x258>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a92      	ldr	r2, [pc, #584]	; (8007128 <HAL_DMA_IRQHandler+0x25c>)
 8006ede:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee2:	0a9b      	lsrs	r3, r3, #10
 8006ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01a      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d013      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0204 	bic.w	r2, r2, #4
 8006f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	2208      	movs	r2, #8
 8006f26:	409a      	lsls	r2, r3
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	f043 0201 	orr.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f043 0202 	orr.w	r2, r3, #2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	2204      	movs	r2, #4
 8006f74:	409a      	lsls	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d012      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	2204      	movs	r2, #4
 8006f92:	409a      	lsls	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9c:	f043 0204 	orr.w	r2, r3, #4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	2210      	movs	r2, #16
 8006faa:	409a      	lsls	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d043      	beq.n	800703c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d03c      	beq.n	800703c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d018      	beq.n	800700e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d108      	bne.n	8006ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d024      	beq.n	800703c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
 8006ffa:	e01f      	b.n	800703c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01b      	beq.n	800703c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	e016      	b.n	800703c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0208 	bic.w	r2, r2, #8
 800702a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007040:	2220      	movs	r2, #32
 8007042:	409a      	lsls	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4013      	ands	r3, r2
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 808e 	beq.w	800716a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8086 	beq.w	800716a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007062:	2220      	movs	r2, #32
 8007064:	409a      	lsls	r2, r3
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b05      	cmp	r3, #5
 8007074:	d136      	bne.n	80070e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0216 	bic.w	r2, r2, #22
 8007084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x1da>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0208 	bic.w	r2, r2, #8
 80070b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ba:	223f      	movs	r2, #63	; 0x3f
 80070bc:	409a      	lsls	r2, r3
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d07d      	beq.n	80071d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
        }
        return;
 80070e2:	e078      	b.n	80071d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01c      	beq.n	800712c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007104:	2b00      	cmp	r3, #0
 8007106:	d030      	beq.n	800716a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
 8007110:	e02b      	b.n	800716a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d027      	beq.n	800716a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	e022      	b.n	800716a <HAL_DMA_IRQHandler+0x29e>
 8007124:	20000260 	.word	0x20000260
 8007128:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10f      	bne.n	800715a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0210 	bic.w	r2, r2, #16
 8007148:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	2b00      	cmp	r3, #0
 8007170:	d032      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d022      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2205      	movs	r2, #5
 8007182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3301      	adds	r3, #1
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d307      	bcc.n	80071b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f2      	bne.n	8007196 <HAL_DMA_IRQHandler+0x2ca>
 80071b0:	e000      	b.n	80071b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80071b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
 80071d4:	e000      	b.n	80071d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80071d6:	bf00      	nop
    }
  }
}
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop

080071e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d108      	bne.n	8007220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800721e:	e007      	b.n	8007230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	60da      	str	r2, [r3, #12]
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
	...

0800723c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	3b10      	subs	r3, #16
 800724c:	4a13      	ldr	r2, [pc, #76]	; (800729c <DMA_CalcBaseAndBitshift+0x60>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	091b      	lsrs	r3, r3, #4
 8007254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007256:	4a12      	ldr	r2, [pc, #72]	; (80072a0 <DMA_CalcBaseAndBitshift+0x64>)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d909      	bls.n	800727e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	1d1a      	adds	r2, r3, #4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	659a      	str	r2, [r3, #88]	; 0x58
 800727c:	e007      	b.n	800728e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	aaaaaaab 	.word	0xaaaaaaab
 80072a0:	0801a6d4 	.word	0x0801a6d4

080072a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d11f      	bne.n	80072fe <DMA_CheckFifoParam+0x5a>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d856      	bhi.n	8007372 <DMA_CheckFifoParam+0xce>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <DMA_CheckFifoParam+0x28>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	080072ef 	.word	0x080072ef
 80072d4:	080072dd 	.word	0x080072dd
 80072d8:	08007373 	.word	0x08007373
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d046      	beq.n	8007376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ec:	e043      	b.n	8007376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072f6:	d140      	bne.n	800737a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072fc:	e03d      	b.n	800737a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007306:	d121      	bne.n	800734c <DMA_CheckFifoParam+0xa8>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d837      	bhi.n	800737e <DMA_CheckFifoParam+0xda>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <DMA_CheckFifoParam+0x70>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007325 	.word	0x08007325
 8007318:	0800732b 	.word	0x0800732b
 800731c:	08007325 	.word	0x08007325
 8007320:	0800733d 	.word	0x0800733d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e030      	b.n	800738c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d025      	beq.n	8007382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800733a:	e022      	b.n	8007382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007344:	d11f      	bne.n	8007386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800734a:	e01c      	b.n	8007386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d903      	bls.n	800735a <DMA_CheckFifoParam+0xb6>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d003      	beq.n	8007360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007358:	e018      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e015      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
      break;
 8007370:	e00b      	b.n	800738a <DMA_CheckFifoParam+0xe6>
      break;
 8007372:	bf00      	nop
 8007374:	e00a      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 8007376:	bf00      	nop
 8007378:	e008      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800737a:	bf00      	nop
 800737c:	e006      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800737e:	bf00      	nop
 8007380:	e004      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 8007382:	bf00      	nop
 8007384:	e002      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;   
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800738a:	bf00      	nop
    }
  } 
  
  return status; 
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073a6:	e16f      	b.n	8007688 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	2101      	movs	r1, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	4013      	ands	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8161 	beq.w	8007682 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d005      	beq.n	80073d8 <HAL_GPIO_Init+0x40>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d130      	bne.n	800743a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	2203      	movs	r2, #3
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4013      	ands	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800740e:	2201      	movs	r2, #1
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	43db      	mvns	r3, r3
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4013      	ands	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0201 	and.w	r2, r3, #1
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d017      	beq.n	8007476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	2203      	movs	r2, #3
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4013      	ands	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d123      	bne.n	80074ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	08da      	lsrs	r2, r3, #3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3208      	adds	r2, #8
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	220f      	movs	r2, #15
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4013      	ands	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	08da      	lsrs	r2, r3, #3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3208      	adds	r2, #8
 80074c4:	6939      	ldr	r1, [r7, #16]
 80074c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	2203      	movs	r2, #3
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4013      	ands	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f003 0203 	and.w	r2, r3, #3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80bb 	beq.w	8007682 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800750c:	2300      	movs	r3, #0
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	4b64      	ldr	r3, [pc, #400]	; (80076a4 <HAL_GPIO_Init+0x30c>)
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	4a63      	ldr	r2, [pc, #396]	; (80076a4 <HAL_GPIO_Init+0x30c>)
 8007516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800751a:	6453      	str	r3, [r2, #68]	; 0x44
 800751c:	4b61      	ldr	r3, [pc, #388]	; (80076a4 <HAL_GPIO_Init+0x30c>)
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007528:	4a5f      	ldr	r2, [pc, #380]	; (80076a8 <HAL_GPIO_Init+0x310>)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	089b      	lsrs	r3, r3, #2
 800752e:	3302      	adds	r3, #2
 8007530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	220f      	movs	r2, #15
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	43db      	mvns	r3, r3
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4013      	ands	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a57      	ldr	r2, [pc, #348]	; (80076ac <HAL_GPIO_Init+0x314>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <HAL_GPIO_Init+0x220>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a56      	ldr	r2, [pc, #344]	; (80076b0 <HAL_GPIO_Init+0x318>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d02b      	beq.n	80075b4 <HAL_GPIO_Init+0x21c>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a55      	ldr	r2, [pc, #340]	; (80076b4 <HAL_GPIO_Init+0x31c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d025      	beq.n	80075b0 <HAL_GPIO_Init+0x218>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a54      	ldr	r2, [pc, #336]	; (80076b8 <HAL_GPIO_Init+0x320>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d01f      	beq.n	80075ac <HAL_GPIO_Init+0x214>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a53      	ldr	r2, [pc, #332]	; (80076bc <HAL_GPIO_Init+0x324>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d019      	beq.n	80075a8 <HAL_GPIO_Init+0x210>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a52      	ldr	r2, [pc, #328]	; (80076c0 <HAL_GPIO_Init+0x328>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <HAL_GPIO_Init+0x20c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a51      	ldr	r2, [pc, #324]	; (80076c4 <HAL_GPIO_Init+0x32c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00d      	beq.n	80075a0 <HAL_GPIO_Init+0x208>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a50      	ldr	r2, [pc, #320]	; (80076c8 <HAL_GPIO_Init+0x330>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <HAL_GPIO_Init+0x204>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a4f      	ldr	r2, [pc, #316]	; (80076cc <HAL_GPIO_Init+0x334>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d101      	bne.n	8007598 <HAL_GPIO_Init+0x200>
 8007594:	2308      	movs	r3, #8
 8007596:	e010      	b.n	80075ba <HAL_GPIO_Init+0x222>
 8007598:	2309      	movs	r3, #9
 800759a:	e00e      	b.n	80075ba <HAL_GPIO_Init+0x222>
 800759c:	2307      	movs	r3, #7
 800759e:	e00c      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075a0:	2306      	movs	r3, #6
 80075a2:	e00a      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075a4:	2305      	movs	r3, #5
 80075a6:	e008      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075a8:	2304      	movs	r3, #4
 80075aa:	e006      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075ac:	2303      	movs	r3, #3
 80075ae:	e004      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e002      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_GPIO_Init+0x222>
 80075b8:	2300      	movs	r3, #0
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	f002 0203 	and.w	r2, r2, #3
 80075c0:	0092      	lsls	r2, r2, #2
 80075c2:	4093      	lsls	r3, r2
 80075c4:	461a      	mov	r2, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075cc:	4936      	ldr	r1, [pc, #216]	; (80076a8 <HAL_GPIO_Init+0x310>)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	089b      	lsrs	r3, r3, #2
 80075d2:	3302      	adds	r3, #2
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075da:	4b3d      	ldr	r3, [pc, #244]	; (80076d0 <HAL_GPIO_Init+0x338>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	43db      	mvns	r3, r3
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4013      	ands	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80075fe:	4a34      	ldr	r2, [pc, #208]	; (80076d0 <HAL_GPIO_Init+0x338>)
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007604:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <HAL_GPIO_Init+0x338>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	43db      	mvns	r3, r3
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4013      	ands	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007628:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <HAL_GPIO_Init+0x338>)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800762e:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <HAL_GPIO_Init+0x338>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	43db      	mvns	r3, r3
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4013      	ands	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <HAL_GPIO_Init+0x338>)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_GPIO_Init+0x338>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	43db      	mvns	r3, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4013      	ands	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <HAL_GPIO_Init+0x338>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	3301      	adds	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	f47f ae88 	bne.w	80073a8 <HAL_GPIO_Init+0x10>
  }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40013800 	.word	0x40013800
 80076ac:	40020000 	.word	0x40020000
 80076b0:	40020400 	.word	0x40020400
 80076b4:	40020800 	.word	0x40020800
 80076b8:	40020c00 	.word	0x40020c00
 80076bc:	40021000 	.word	0x40021000
 80076c0:	40021400 	.word	0x40021400
 80076c4:	40021800 	.word	0x40021800
 80076c8:	40021c00 	.word	0x40021c00
 80076cc:	40022000 	.word	0x40022000
 80076d0:	40013c00 	.word	0x40013c00

080076d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	887b      	ldrh	r3, [r7, #2]
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
 80076f0:	e001      	b.n	80076f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr

08007702 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	807b      	strh	r3, [r7, #2]
 800770e:	4613      	mov	r3, r2
 8007710:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007712:	787b      	ldrb	r3, [r7, #1]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007718:	887a      	ldrh	r2, [r7, #2]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800771e:	e003      	b.n	8007728 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	041a      	lsls	r2, r3, #16
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	619a      	str	r2, [r3, #24]
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007744:	887a      	ldrh	r2, [r7, #2]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4013      	ands	r3, r2
 800774a:	041a      	lsls	r2, r3, #16
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	43d9      	mvns	r1, r3
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	400b      	ands	r3, r1
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	619a      	str	r2, [r3, #24]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	b08f      	sub	sp, #60	; 0x3c
 8007768:	af0a      	add	r7, sp, #40	; 0x28
 800776a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e054      	b.n	8007820 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d106      	bne.n	8007796 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f00d ff77 	bl	8015684 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2203      	movs	r2, #3
 800779a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f003 fffb 	bl	800b7b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	687e      	ldr	r6, [r7, #4]
 80077c2:	466d      	mov	r5, sp
 80077c4:	f106 0410 	add.w	r4, r6, #16
 80077c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80077d8:	1d33      	adds	r3, r6, #4
 80077da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077dc:	6838      	ldr	r0, [r7, #0]
 80077de:	f003 ff80 	bl	800b6e2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2101      	movs	r1, #1
 80077e8:	4618      	mov	r0, r3
 80077ea:	f003 fff1 	bl	800b7d0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	687e      	ldr	r6, [r7, #4]
 80077f6:	466d      	mov	r5, sp
 80077f8:	f106 0410 	add.w	r4, r6, #16
 80077fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007804:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007808:	e885 0003 	stmia.w	r5, {r0, r1}
 800780c:	1d33      	adds	r3, r6, #4
 800780e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007810:	6838      	ldr	r0, [r7, #0]
 8007812:	f004 f953 	bl	800babc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007828 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b089      	sub	sp, #36	; 0x24
 800782c:	af04      	add	r7, sp, #16
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	461a      	mov	r2, r3
 8007836:	4603      	mov	r3, r0
 8007838:	70fb      	strb	r3, [r7, #3]
 800783a:	460b      	mov	r3, r1
 800783c:	70bb      	strb	r3, [r7, #2]
 800783e:	4613      	mov	r3, r2
 8007840:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_HCD_HC_Init+0x28>
 800784c:	2302      	movs	r3, #2
 800784e:	e076      	b.n	800793e <HAL_HCD_HC_Init+0x116>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	212c      	movs	r1, #44	; 0x2c
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	333d      	adds	r3, #61	; 0x3d
 8007866:	2200      	movs	r2, #0
 8007868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	212c      	movs	r1, #44	; 0x2c
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	4413      	add	r3, r2
 8007876:	3338      	adds	r3, #56	; 0x38
 8007878:	787a      	ldrb	r2, [r7, #1]
 800787a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	212c      	movs	r1, #44	; 0x2c
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	4413      	add	r3, r2
 8007888:	3340      	adds	r3, #64	; 0x40
 800788a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800788c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	212c      	movs	r1, #44	; 0x2c
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	4413      	add	r3, r2
 800789a:	3339      	adds	r3, #57	; 0x39
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	212c      	movs	r1, #44	; 0x2c
 80078a6:	fb01 f303 	mul.w	r3, r1, r3
 80078aa:	4413      	add	r3, r2
 80078ac:	333f      	adds	r3, #63	; 0x3f
 80078ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80078b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	78ba      	ldrb	r2, [r7, #2]
 80078b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078bc:	b2d0      	uxtb	r0, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	212c      	movs	r1, #44	; 0x2c
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	333a      	adds	r3, #58	; 0x3a
 80078ca:	4602      	mov	r2, r0
 80078cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80078ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da09      	bge.n	80078ea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80078d6:	78fb      	ldrb	r3, [r7, #3]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	212c      	movs	r1, #44	; 0x2c
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	4413      	add	r3, r2
 80078e2:	333b      	adds	r3, #59	; 0x3b
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	e008      	b.n	80078fc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	212c      	movs	r1, #44	; 0x2c
 80078f0:	fb01 f303 	mul.w	r3, r1, r3
 80078f4:	4413      	add	r3, r2
 80078f6:	333b      	adds	r3, #59	; 0x3b
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	212c      	movs	r1, #44	; 0x2c
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	4413      	add	r3, r2
 8007908:	333c      	adds	r3, #60	; 0x3c
 800790a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800790e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	787c      	ldrb	r4, [r7, #1]
 8007916:	78ba      	ldrb	r2, [r7, #2]
 8007918:	78f9      	ldrb	r1, [r7, #3]
 800791a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800791c:	9302      	str	r3, [sp, #8]
 800791e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4623      	mov	r3, r4
 800792c:	f004 fa3c 	bl	800bda8 <USB_HC_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bd90      	pop	{r4, r7, pc}

08007946 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_HCD_HC_Halt+0x1e>
 8007960:	2302      	movs	r3, #2
 8007962:	e00f      	b.n	8007984 <HAL_HCD_HC_Halt+0x3e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f004 fc77 	bl	800c268 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	4608      	mov	r0, r1
 8007996:	4611      	mov	r1, r2
 8007998:	461a      	mov	r2, r3
 800799a:	4603      	mov	r3, r0
 800799c:	70fb      	strb	r3, [r7, #3]
 800799e:	460b      	mov	r3, r1
 80079a0:	70bb      	strb	r3, [r7, #2]
 80079a2:	4613      	mov	r3, r2
 80079a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	212c      	movs	r1, #44	; 0x2c
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	333b      	adds	r3, #59	; 0x3b
 80079b4:	78ba      	ldrb	r2, [r7, #2]
 80079b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	212c      	movs	r1, #44	; 0x2c
 80079be:	fb01 f303 	mul.w	r3, r1, r3
 80079c2:	4413      	add	r3, r2
 80079c4:	333f      	adds	r3, #63	; 0x3f
 80079c6:	787a      	ldrb	r2, [r7, #1]
 80079c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80079ca:	7c3b      	ldrb	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d112      	bne.n	80079f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	212c      	movs	r1, #44	; 0x2c
 80079d6:	fb01 f303 	mul.w	r3, r1, r3
 80079da:	4413      	add	r3, r2
 80079dc:	3342      	adds	r3, #66	; 0x42
 80079de:	2203      	movs	r2, #3
 80079e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	212c      	movs	r1, #44	; 0x2c
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	333d      	adds	r3, #61	; 0x3d
 80079f0:	7f3a      	ldrb	r2, [r7, #28]
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e008      	b.n	8007a08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80079f6:	78fb      	ldrb	r3, [r7, #3]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	212c      	movs	r1, #44	; 0x2c
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	3342      	adds	r3, #66	; 0x42
 8007a04:	2202      	movs	r2, #2
 8007a06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007a08:	787b      	ldrb	r3, [r7, #1]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	f200 80c6 	bhi.w	8007b9c <HAL_HCD_HC_SubmitRequest+0x210>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a29 	.word	0x08007a29
 8007a1c:	08007b89 	.word	0x08007b89
 8007a20:	08007a8d 	.word	0x08007a8d
 8007a24:	08007b0b 	.word	0x08007b0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8007a28:	7c3b      	ldrb	r3, [r7, #16]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	f040 80b8 	bne.w	8007ba0 <HAL_HCD_HC_SubmitRequest+0x214>
 8007a30:	78bb      	ldrb	r3, [r7, #2]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 80b4 	bne.w	8007ba0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8007a38:	8b3b      	ldrh	r3, [r7, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d108      	bne.n	8007a50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	212c      	movs	r1, #44	; 0x2c
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	3355      	adds	r3, #85	; 0x55
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	212c      	movs	r1, #44	; 0x2c
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3355      	adds	r3, #85	; 0x55
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	212c      	movs	r1, #44	; 0x2c
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	3342      	adds	r3, #66	; 0x42
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007a76:	e093      	b.n	8007ba0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	212c      	movs	r1, #44	; 0x2c
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	3342      	adds	r3, #66	; 0x42
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
      break;
 8007a8a:	e089      	b.n	8007ba0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007a8c:	78bb      	ldrb	r3, [r7, #2]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11d      	bne.n	8007ace <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	212c      	movs	r1, #44	; 0x2c
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3355      	adds	r3, #85	; 0x55
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	212c      	movs	r1, #44	; 0x2c
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3342      	adds	r3, #66	; 0x42
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007ab8:	e073      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	212c      	movs	r1, #44	; 0x2c
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3342      	adds	r3, #66	; 0x42
 8007ac8:	2202      	movs	r2, #2
 8007aca:	701a      	strb	r2, [r3, #0]
      break;
 8007acc:	e069      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	212c      	movs	r1, #44	; 0x2c
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	4413      	add	r3, r2
 8007ada:	3354      	adds	r3, #84	; 0x54
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	212c      	movs	r1, #44	; 0x2c
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	4413      	add	r3, r2
 8007aee:	3342      	adds	r3, #66	; 0x42
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
      break;
 8007af4:	e055      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	212c      	movs	r1, #44	; 0x2c
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	3342      	adds	r3, #66	; 0x42
 8007b04:	2202      	movs	r2, #2
 8007b06:	701a      	strb	r2, [r3, #0]
      break;
 8007b08:	e04b      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007b0a:	78bb      	ldrb	r3, [r7, #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d11d      	bne.n	8007b4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3355      	adds	r3, #85	; 0x55
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3342      	adds	r3, #66	; 0x42
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007b36:	e034      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	212c      	movs	r1, #44	; 0x2c
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	3342      	adds	r3, #66	; 0x42
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	e02a      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	212c      	movs	r1, #44	; 0x2c
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	4413      	add	r3, r2
 8007b58:	3354      	adds	r3, #84	; 0x54
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	212c      	movs	r1, #44	; 0x2c
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3342      	adds	r3, #66	; 0x42
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
      break;
 8007b72:	e016      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	212c      	movs	r1, #44	; 0x2c
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	4413      	add	r3, r2
 8007b80:	3342      	adds	r3, #66	; 0x42
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e00c      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	212c      	movs	r1, #44	; 0x2c
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	3342      	adds	r3, #66	; 0x42
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
      break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007ba0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	212c      	movs	r1, #44	; 0x2c
 8007ba8:	fb01 f303 	mul.w	r3, r1, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	3344      	adds	r3, #68	; 0x44
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	8b3a      	ldrh	r2, [r7, #24]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	202c      	movs	r0, #44	; 0x2c
 8007bbc:	fb00 f303 	mul.w	r3, r0, r3
 8007bc0:	440b      	add	r3, r1
 8007bc2:	334c      	adds	r3, #76	; 0x4c
 8007bc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	212c      	movs	r1, #44	; 0x2c
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3360      	adds	r3, #96	; 0x60
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	212c      	movs	r1, #44	; 0x2c
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	3350      	adds	r3, #80	; 0x50
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	212c      	movs	r1, #44	; 0x2c
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3339      	adds	r3, #57	; 0x39
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	212c      	movs	r1, #44	; 0x2c
 8007c02:	fb01 f303 	mul.w	r3, r1, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	3361      	adds	r3, #97	; 0x61
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	222c      	movs	r2, #44	; 0x2c
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	3338      	adds	r3, #56	; 0x38
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	18d1      	adds	r1, r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	f004 f9cc 	bl	800bfc4 <USB_HC_StartXfer>
 8007c2c:	4603      	mov	r3, r0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f003 fef4 	bl	800ba3c <USB_GetMode>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	f040 80ef 	bne.w	8007e3a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f003 fed9 	bl	800ba18 <USB_ReadInterrupts>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80e5 	beq.w	8007e38 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f003 fed0 	bl	800ba18 <USB_ReadInterrupts>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c82:	d104      	bne.n	8007c8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007c8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f003 fec0 	bl	800ba18 <USB_ReadInterrupts>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca2:	d104      	bne.n	8007cae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f003 feb0 	bl	800ba18 <USB_ReadInterrupts>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cc2:	d104      	bne.n	8007cce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007ccc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f003 fea0 	bl	800ba18 <USB_ReadInterrupts>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f003 fe92 	bl	800ba18 <USB_ReadInterrupts>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfe:	d115      	bne.n	8007d2c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d108      	bne.n	8007d2c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f00d fd30 	bl	8015780 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2101      	movs	r1, #1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f003 ff7c 	bl	800bc24 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f003 fe71 	bl	800ba18 <USB_ReadInterrupts>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d40:	d102      	bne.n	8007d48 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fa01 	bl	800914a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f003 fe63 	bl	800ba18 <USB_ReadInterrupts>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d106      	bne.n	8007d6a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f00d fcf3 	bl	8015748 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2208      	movs	r2, #8
 8007d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f003 fe52 	bl	800ba18 <USB_ReadInterrupts>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d101      	bne.n	8007d82 <HAL_HCD_IRQHandler+0x14a>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <HAL_HCD_IRQHandler+0x14c>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d012      	beq.n	8007dae <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0210 	bic.w	r2, r2, #16
 8007d96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f904 	bl	8008fa6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0210 	orr.w	r2, r2, #16
 8007dac:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f003 fe30 	bl	800ba18 <USB_ReadInterrupts>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dc2:	d13a      	bne.n	8007e3a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f004 fa3d 	bl	800c248 <USB_HC_ReadInterrupt>
 8007dce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	e025      	b.n	8007e22 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d018      	beq.n	8007e1c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e00:	d106      	bne.n	8007e10 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8a9 	bl	8007f60 <HCD_HC_IN_IRQHandler>
 8007e0e:	e005      	b.n	8007e1c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fcc4 	bl	80087a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d3d4      	bcc.n	8007dd6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e34:	615a      	str	r2, [r3, #20]
 8007e36:	e000      	b.n	8007e3a <HAL_HCD_IRQHandler+0x202>
      return;
 8007e38:	bf00      	nop
    }
  }
}
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_HCD_Start+0x16>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e013      	b.n	8007e7e <HAL_HCD_Start+0x3e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2101      	movs	r1, #1
 8007e64:	4618      	mov	r0, r3
 8007e66:	f003 ff40 	bl	800bcea <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f003 fc8e 	bl	800b790 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_HCD_Stop+0x16>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e00d      	b.n	8007eb8 <HAL_HCD_Stop+0x32>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f004 fb33 	bl	800c514 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f003 fee2 	bl	800bc96 <USB_ResetPort>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	212c      	movs	r1, #44	; 0x2c
 8007eee:	fb01 f303 	mul.w	r3, r1, r3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3360      	adds	r3, #96	; 0x60
 8007ef6:	781b      	ldrb	r3, [r3, #0]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	212c      	movs	r1, #44	; 0x2c
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	4413      	add	r3, r2
 8007f1a:	3350      	adds	r3, #80	; 0x50
 8007f1c:	681b      	ldr	r3, [r3, #0]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr

08007f28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f003 ff26 	bl	800bd86 <USB_GetCurrentFrame>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f003 ff02 	bl	800bd5a <USB_GetHostSpeed>
 8007f56:	4603      	mov	r3, r0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d119      	bne.n	8007fc4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fbc:	f043 0302 	orr.w	r3, r3, #2
 8007fc0:	60d3      	str	r3, [r2, #12]
 8007fc2:	e101      	b.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fda:	d12b      	bne.n	8008034 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe8:	461a      	mov	r2, r3
 8007fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	212c      	movs	r1, #44	; 0x2c
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3361      	adds	r3, #97	; 0x61
 8007ffe:	2207      	movs	r2, #7
 8008000:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	440a      	add	r2, r1
 8008018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800801c:	f043 0302 	orr.w	r3, r3, #2
 8008020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f004 f91b 	bl	800c268 <USB_HC_Halt>
 8008032:	e0c9      	b.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4413      	add	r3, r2
 800803c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b20      	cmp	r3, #32
 8008048:	d109      	bne.n	800805e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4413      	add	r3, r2
 8008052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008056:	461a      	mov	r2, r3
 8008058:	2320      	movs	r3, #32
 800805a:	6093      	str	r3, [r2, #8]
 800805c:	e0b4      	b.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d133      	bne.n	80080dc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4413      	add	r3, r2
 800807c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	440a      	add	r2, r1
 800808a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800808e:	f043 0302 	orr.w	r3, r3, #2
 8008092:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	212c      	movs	r1, #44	; 0x2c
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	4413      	add	r3, r2
 80080a0:	3361      	adds	r3, #97	; 0x61
 80080a2:	2205      	movs	r2, #5
 80080a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b2:	461a      	mov	r2, r3
 80080b4:	2310      	movs	r3, #16
 80080b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c4:	461a      	mov	r2, r3
 80080c6:	2308      	movs	r3, #8
 80080c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f004 f8c7 	bl	800c268 <USB_HC_Halt>
 80080da:	e075      	b.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f2:	d134      	bne.n	800815e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	0151      	lsls	r1, r2, #5
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	440a      	add	r2, r1
 800810a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	212c      	movs	r1, #44	; 0x2c
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	4413      	add	r3, r2
 8008120:	3361      	adds	r3, #97	; 0x61
 8008122:	2208      	movs	r2, #8
 8008124:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008132:	461a      	mov	r2, r3
 8008134:	2310      	movs	r3, #16
 8008136:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4413      	add	r3, r2
 8008140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008144:	461a      	mov	r2, r3
 8008146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800814a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f004 f886 	bl	800c268 <USB_HC_Halt>
 800815c:	e034      	b.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d129      	bne.n	80081c8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4413      	add	r3, r2
 800817c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	440a      	add	r2, r1
 800818a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800818e:	f043 0302 	orr.w	r3, r3, #2
 8008192:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	212c      	movs	r1, #44	; 0x2c
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	4413      	add	r3, r2
 80081a0:	3361      	adds	r3, #97	; 0x61
 80081a2:	2206      	movs	r2, #6
 80081a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f004 f859 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c2:	461a      	mov	r2, r3
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081de:	d122      	bne.n	8008226 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081fa:	f043 0302 	orr.w	r3, r3, #2
 80081fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f004 f82c 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821c:	461a      	mov	r2, r3
 800821e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008222:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008224:	e2ba      	b.n	800879c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b01      	cmp	r3, #1
 800823a:	f040 811b 	bne.w	8008474 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d019      	beq.n	800827a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	212c      	movs	r1, #44	; 0x2c
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	4413      	add	r3, r2
 8008252:	3348      	adds	r3, #72	; 0x48
 8008254:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	0159      	lsls	r1, r3, #5
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	440b      	add	r3, r1
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008268:	1ad2      	subs	r2, r2, r3
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	202c      	movs	r0, #44	; 0x2c
 8008270:	fb00 f303 	mul.w	r3, r0, r3
 8008274:	440b      	add	r3, r1
 8008276:	3350      	adds	r3, #80	; 0x50
 8008278:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	212c      	movs	r1, #44	; 0x2c
 8008280:	fb01 f303 	mul.w	r3, r1, r3
 8008284:	4413      	add	r3, r2
 8008286:	3361      	adds	r3, #97	; 0x61
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	212c      	movs	r1, #44	; 0x2c
 8008292:	fb01 f303 	mul.w	r3, r1, r3
 8008296:	4413      	add	r3, r2
 8008298:	335c      	adds	r3, #92	; 0x5c
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082aa:	461a      	mov	r2, r3
 80082ac:	2301      	movs	r3, #1
 80082ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	212c      	movs	r1, #44	; 0x2c
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	333f      	adds	r3, #63	; 0x3f
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	212c      	movs	r1, #44	; 0x2c
 80082ca:	fb01 f303 	mul.w	r3, r1, r3
 80082ce:	4413      	add	r3, r2
 80082d0:	333f      	adds	r3, #63	; 0x3f
 80082d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d121      	bne.n	800831c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f2:	f043 0302 	orr.w	r3, r3, #2
 80082f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f003 ffb0 	bl	800c268 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008314:	461a      	mov	r2, r3
 8008316:	2310      	movs	r3, #16
 8008318:	6093      	str	r3, [r2, #8]
 800831a:	e066      	b.n	80083ea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	212c      	movs	r1, #44	; 0x2c
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	4413      	add	r3, r2
 8008328:	333f      	adds	r3, #63	; 0x3f
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d127      	bne.n	8008380 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	440a      	add	r2, r1
 8008346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800834a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800834e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	212c      	movs	r1, #44	; 0x2c
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	4413      	add	r3, r2
 800835c:	3360      	adds	r3, #96	; 0x60
 800835e:	2201      	movs	r2, #1
 8008360:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	b2d9      	uxtb	r1, r3
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	202c      	movs	r0, #44	; 0x2c
 800836c:	fb00 f303 	mul.w	r3, r0, r3
 8008370:	4413      	add	r3, r2
 8008372:	3360      	adds	r3, #96	; 0x60
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f00d fa0f 	bl	801579c <HAL_HCD_HC_NotifyURBChange_Callback>
 800837e:	e034      	b.n	80083ea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	212c      	movs	r1, #44	; 0x2c
 8008386:	fb01 f303 	mul.w	r3, r1, r3
 800838a:	4413      	add	r3, r2
 800838c:	333f      	adds	r3, #63	; 0x3f
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d12a      	bne.n	80083ea <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	212c      	movs	r1, #44	; 0x2c
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	4413      	add	r3, r2
 80083a0:	3360      	adds	r3, #96	; 0x60
 80083a2:	2201      	movs	r2, #1
 80083a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	212c      	movs	r1, #44	; 0x2c
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	3354      	adds	r3, #84	; 0x54
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f083 0301 	eor.w	r3, r3, #1
 80083ba:	b2d8      	uxtb	r0, r3
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	212c      	movs	r1, #44	; 0x2c
 80083c2:	fb01 f303 	mul.w	r3, r1, r3
 80083c6:	4413      	add	r3, r2
 80083c8:	3354      	adds	r3, #84	; 0x54
 80083ca:	4602      	mov	r2, r0
 80083cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	b2d9      	uxtb	r1, r3
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	202c      	movs	r0, #44	; 0x2c
 80083d8:	fb00 f303 	mul.w	r3, r0, r3
 80083dc:	4413      	add	r3, r2
 80083de:	3360      	adds	r3, #96	; 0x60
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f00d f9d9 	bl	801579c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d12b      	bne.n	800844a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	212c      	movs	r1, #44	; 0x2c
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	4413      	add	r3, r2
 80083fe:	3348      	adds	r3, #72	; 0x48
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	202c      	movs	r0, #44	; 0x2c
 8008408:	fb00 f202 	mul.w	r2, r0, r2
 800840c:	440a      	add	r2, r1
 800840e:	3240      	adds	r2, #64	; 0x40
 8008410:	8812      	ldrh	r2, [r2, #0]
 8008412:	fbb3 f3f2 	udiv	r3, r3, r2
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 81be 	beq.w	800879c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	212c      	movs	r1, #44	; 0x2c
 8008426:	fb01 f303 	mul.w	r3, r1, r3
 800842a:	4413      	add	r3, r2
 800842c:	3354      	adds	r3, #84	; 0x54
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f083 0301 	eor.w	r3, r3, #1
 8008434:	b2d8      	uxtb	r0, r3
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	212c      	movs	r1, #44	; 0x2c
 800843c:	fb01 f303 	mul.w	r3, r1, r3
 8008440:	4413      	add	r3, r2
 8008442:	3354      	adds	r3, #84	; 0x54
 8008444:	4602      	mov	r2, r0
 8008446:	701a      	strb	r2, [r3, #0]
}
 8008448:	e1a8      	b.n	800879c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	212c      	movs	r1, #44	; 0x2c
 8008450:	fb01 f303 	mul.w	r3, r1, r3
 8008454:	4413      	add	r3, r2
 8008456:	3354      	adds	r3, #84	; 0x54
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f083 0301 	eor.w	r3, r3, #1
 800845e:	b2d8      	uxtb	r0, r3
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	212c      	movs	r1, #44	; 0x2c
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	4413      	add	r3, r2
 800846c:	3354      	adds	r3, #84	; 0x54
 800846e:	4602      	mov	r2, r0
 8008470:	701a      	strb	r2, [r3, #0]
}
 8008472:	e193      	b.n	800879c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4413      	add	r3, r2
 800847c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b02      	cmp	r3, #2
 8008488:	f040 8106 	bne.w	8008698 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	4413      	add	r3, r2
 8008494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a6:	f023 0302 	bic.w	r3, r3, #2
 80084aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	212c      	movs	r1, #44	; 0x2c
 80084b2:	fb01 f303 	mul.w	r3, r1, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	3361      	adds	r3, #97	; 0x61
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d109      	bne.n	80084d4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	212c      	movs	r1, #44	; 0x2c
 80084c6:	fb01 f303 	mul.w	r3, r1, r3
 80084ca:	4413      	add	r3, r2
 80084cc:	3360      	adds	r3, #96	; 0x60
 80084ce:	2201      	movs	r2, #1
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e0c9      	b.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	212c      	movs	r1, #44	; 0x2c
 80084da:	fb01 f303 	mul.w	r3, r1, r3
 80084de:	4413      	add	r3, r2
 80084e0:	3361      	adds	r3, #97	; 0x61
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d109      	bne.n	80084fc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	212c      	movs	r1, #44	; 0x2c
 80084ee:	fb01 f303 	mul.w	r3, r1, r3
 80084f2:	4413      	add	r3, r2
 80084f4:	3360      	adds	r3, #96	; 0x60
 80084f6:	2205      	movs	r2, #5
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e0b5      	b.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	212c      	movs	r1, #44	; 0x2c
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	4413      	add	r3, r2
 8008508:	3361      	adds	r3, #97	; 0x61
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b06      	cmp	r3, #6
 800850e:	d009      	beq.n	8008524 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	212c      	movs	r1, #44	; 0x2c
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	4413      	add	r3, r2
 800851c:	3361      	adds	r3, #97	; 0x61
 800851e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008520:	2b08      	cmp	r3, #8
 8008522:	d150      	bne.n	80085c6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	212c      	movs	r1, #44	; 0x2c
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	4413      	add	r3, r2
 8008530:	335c      	adds	r3, #92	; 0x5c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	202c      	movs	r0, #44	; 0x2c
 800853c:	fb00 f303 	mul.w	r3, r0, r3
 8008540:	440b      	add	r3, r1
 8008542:	335c      	adds	r3, #92	; 0x5c
 8008544:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	212c      	movs	r1, #44	; 0x2c
 800854c:	fb01 f303 	mul.w	r3, r1, r3
 8008550:	4413      	add	r3, r2
 8008552:	335c      	adds	r3, #92	; 0x5c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d912      	bls.n	8008580 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	212c      	movs	r1, #44	; 0x2c
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	4413      	add	r3, r2
 8008566:	335c      	adds	r3, #92	; 0x5c
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	212c      	movs	r1, #44	; 0x2c
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	3360      	adds	r3, #96	; 0x60
 800857a:	2204      	movs	r2, #4
 800857c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800857e:	e073      	b.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	212c      	movs	r1, #44	; 0x2c
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	3360      	adds	r3, #96	; 0x60
 800858e:	2202      	movs	r2, #2
 8008590:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	4413      	add	r3, r2
 800859a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085be:	461a      	mov	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80085c4:	e050      	b.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	212c      	movs	r1, #44	; 0x2c
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	4413      	add	r3, r2
 80085d2:	3361      	adds	r3, #97	; 0x61
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d122      	bne.n	8008620 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	212c      	movs	r1, #44	; 0x2c
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	4413      	add	r3, r2
 80085e6:	3360      	adds	r3, #96	; 0x60
 80085e8:	2202      	movs	r2, #2
 80085ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008602:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800860a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008618:	461a      	mov	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	e023      	b.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	212c      	movs	r1, #44	; 0x2c
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	4413      	add	r3, r2
 800862c:	3361      	adds	r3, #97	; 0x61
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b07      	cmp	r3, #7
 8008632:	d119      	bne.n	8008668 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	212c      	movs	r1, #44	; 0x2c
 800863a:	fb01 f303 	mul.w	r3, r1, r3
 800863e:	4413      	add	r3, r2
 8008640:	335c      	adds	r3, #92	; 0x5c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	202c      	movs	r0, #44	; 0x2c
 800864c:	fb00 f303 	mul.w	r3, r0, r3
 8008650:	440b      	add	r3, r1
 8008652:	335c      	adds	r3, #92	; 0x5c
 8008654:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	212c      	movs	r1, #44	; 0x2c
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	3360      	adds	r3, #96	; 0x60
 8008664:	2204      	movs	r2, #4
 8008666:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008674:	461a      	mov	r2, r3
 8008676:	2302      	movs	r3, #2
 8008678:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	b2d9      	uxtb	r1, r3
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	202c      	movs	r0, #44	; 0x2c
 8008684:	fb00 f303 	mul.w	r3, r0, r3
 8008688:	4413      	add	r3, r2
 800868a:	3360      	adds	r3, #96	; 0x60
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f00d f883 	bl	801579c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008696:	e081      	b.n	800879c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d176      	bne.n	800879c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	212c      	movs	r1, #44	; 0x2c
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	4413      	add	r3, r2
 80086ba:	333f      	adds	r3, #63	; 0x3f
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d121      	bne.n	8008706 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	212c      	movs	r1, #44	; 0x2c
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	335c      	adds	r3, #92	; 0x5c
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ee:	f043 0302 	orr.w	r3, r3, #2
 80086f2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f003 fdb2 	bl	800c268 <USB_HC_Halt>
 8008704:	e041      	b.n	800878a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	212c      	movs	r1, #44	; 0x2c
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	4413      	add	r3, r2
 8008712:	333f      	adds	r3, #63	; 0x3f
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	212c      	movs	r1, #44	; 0x2c
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	4413      	add	r3, r2
 8008726:	333f      	adds	r3, #63	; 0x3f
 8008728:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800872a:	2b02      	cmp	r3, #2
 800872c:	d12d      	bne.n	800878a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	212c      	movs	r1, #44	; 0x2c
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	4413      	add	r3, r2
 800873a:	335c      	adds	r3, #92	; 0x5c
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d120      	bne.n	800878a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	212c      	movs	r1, #44	; 0x2c
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	4413      	add	r3, r2
 8008754:	3361      	adds	r3, #97	; 0x61
 8008756:	2203      	movs	r2, #3
 8008758:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	440a      	add	r2, r1
 8008770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008774:	f043 0302 	orr.w	r3, r3, #2
 8008778:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f003 fd6f 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008796:	461a      	mov	r2, r3
 8008798:	2310      	movs	r3, #16
 800879a:	6093      	str	r3, [r2, #8]
}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d119      	bne.n	8008808 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e0:	461a      	mov	r2, r3
 80087e2:	2304      	movs	r3, #4
 80087e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008800:	f043 0302 	orr.w	r3, r3, #2
 8008804:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008806:	e3ca      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b20      	cmp	r3, #32
 800881c:	d13e      	bne.n	800889c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882a:	461a      	mov	r2, r3
 800882c:	2320      	movs	r3, #32
 800882e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	212c      	movs	r1, #44	; 0x2c
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	4413      	add	r3, r2
 800883c:	333d      	adds	r3, #61	; 0x3d
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	f040 83ac 	bne.w	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	212c      	movs	r1, #44	; 0x2c
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	4413      	add	r3, r2
 8008852:	333d      	adds	r3, #61	; 0x3d
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	212c      	movs	r1, #44	; 0x2c
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	4413      	add	r3, r2
 8008864:	3360      	adds	r3, #96	; 0x60
 8008866:	2202      	movs	r2, #2
 8008868:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	440a      	add	r2, r1
 8008880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008884:	f043 0302 	orr.w	r3, r3, #2
 8008888:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f003 fce7 	bl	800c268 <USB_HC_Halt>
}
 800889a:	e380      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b2:	d122      	bne.n	80088fa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ce:	f043 0302 	orr.w	r3, r3, #2
 80088d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f003 fcc2 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f0:	461a      	mov	r2, r3
 80088f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f6:	6093      	str	r3, [r2, #8]
}
 80088f8:	e351      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d150      	bne.n	80089b2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	212c      	movs	r1, #44	; 0x2c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	4413      	add	r3, r2
 800891c:	335c      	adds	r3, #92	; 0x5c
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d111      	bne.n	800895c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	212c      	movs	r1, #44	; 0x2c
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	333d      	adds	r3, #61	; 0x3d
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	461a      	mov	r2, r3
 8008958:	2340      	movs	r3, #64	; 0x40
 800895a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	4413      	add	r3, r2
 8008964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	440a      	add	r2, r1
 8008972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008976:	f043 0302 	orr.w	r3, r3, #2
 800897a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f003 fc6e 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	4413      	add	r3, r2
 8008994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008998:	461a      	mov	r2, r3
 800899a:	2301      	movs	r3, #1
 800899c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	212c      	movs	r1, #44	; 0x2c
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	3361      	adds	r3, #97	; 0x61
 80089ac:	2201      	movs	r2, #1
 80089ae:	701a      	strb	r2, [r3, #0]
}
 80089b0:	e2f5      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d13c      	bne.n	8008a42 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	212c      	movs	r1, #44	; 0x2c
 80089ce:	fb01 f303 	mul.w	r3, r1, r3
 80089d2:	4413      	add	r3, r2
 80089d4:	3361      	adds	r3, #97	; 0x61
 80089d6:	2204      	movs	r2, #4
 80089d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	212c      	movs	r1, #44	; 0x2c
 80089e0:	fb01 f303 	mul.w	r3, r1, r3
 80089e4:	4413      	add	r3, r2
 80089e6:	333d      	adds	r3, #61	; 0x3d
 80089e8:	2201      	movs	r2, #1
 80089ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	212c      	movs	r1, #44	; 0x2c
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	335c      	adds	r3, #92	; 0x5c
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a18:	f043 0302 	orr.w	r3, r3, #2
 8008a1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	b2d2      	uxtb	r2, r2
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f003 fc1d 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	6093      	str	r3, [r2, #8]
}
 8008a40:	e2ad      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d12a      	bne.n	8008aae <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a64:	461a      	mov	r2, r3
 8008a66:	2308      	movs	r3, #8
 8008a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f003 fbe7 	bl	800c268 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	212c      	movs	r1, #44	; 0x2c
 8008aa0:	fb01 f303 	mul.w	r3, r1, r3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3361      	adds	r3, #97	; 0x61
 8008aa8:	2205      	movs	r2, #5
 8008aaa:	701a      	strb	r2, [r3, #0]
}
 8008aac:	e277      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b10      	cmp	r3, #16
 8008ac2:	d150      	bne.n	8008b66 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	335c      	adds	r3, #92	; 0x5c
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	212c      	movs	r1, #44	; 0x2c
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3361      	adds	r3, #97	; 0x61
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	212c      	movs	r1, #44	; 0x2c
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	333d      	adds	r3, #61	; 0x3d
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d112      	bne.n	8008b22 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	212c      	movs	r1, #44	; 0x2c
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	333c      	adds	r3, #60	; 0x3c
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	212c      	movs	r1, #44	; 0x2c
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	333d      	adds	r3, #61	; 0x3d
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3c:	f043 0302 	orr.w	r3, r3, #2
 8008b40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	b2d2      	uxtb	r2, r2
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f003 fb8b 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2310      	movs	r3, #16
 8008b62:	6093      	str	r3, [r2, #8]
}
 8008b64:	e21b      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b78:	2b80      	cmp	r3, #128	; 0x80
 8008b7a:	d174      	bne.n	8008c66 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d121      	bne.n	8008bc8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	212c      	movs	r1, #44	; 0x2c
 8008b8a:	fb01 f303 	mul.w	r3, r1, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	3361      	adds	r3, #97	; 0x61
 8008b92:	2206      	movs	r2, #6
 8008b94:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bb0:	f043 0302 	orr.w	r3, r3, #2
 8008bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	b2d2      	uxtb	r2, r2
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f003 fb51 	bl	800c268 <USB_HC_Halt>
 8008bc6:	e044      	b.n	8008c52 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	212c      	movs	r1, #44	; 0x2c
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	335c      	adds	r3, #92	; 0x5c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	202c      	movs	r0, #44	; 0x2c
 8008be0:	fb00 f303 	mul.w	r3, r0, r3
 8008be4:	440b      	add	r3, r1
 8008be6:	335c      	adds	r3, #92	; 0x5c
 8008be8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	212c      	movs	r1, #44	; 0x2c
 8008bf0:	fb01 f303 	mul.w	r3, r1, r3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	335c      	adds	r3, #92	; 0x5c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d920      	bls.n	8008c40 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	212c      	movs	r1, #44	; 0x2c
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	335c      	adds	r3, #92	; 0x5c
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	212c      	movs	r1, #44	; 0x2c
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3360      	adds	r3, #96	; 0x60
 8008c1e:	2204      	movs	r2, #4
 8008c20:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	b2d9      	uxtb	r1, r3
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	202c      	movs	r0, #44	; 0x2c
 8008c2c:	fb00 f303 	mul.w	r3, r0, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	3360      	adds	r3, #96	; 0x60
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f00c fdaf 	bl	801579c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c3e:	e008      	b.n	8008c52 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	212c      	movs	r1, #44	; 0x2c
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3360      	adds	r3, #96	; 0x60
 8008c4e:	2202      	movs	r2, #2
 8008c50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5e:	461a      	mov	r2, r3
 8008c60:	2380      	movs	r3, #128	; 0x80
 8008c62:	6093      	str	r3, [r2, #8]
}
 8008c64:	e19b      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7c:	d134      	bne.n	8008ce8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c98:	f043 0302 	orr.w	r3, r3, #2
 8008c9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f003 fadd 	bl	800c268 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cba:	461a      	mov	r2, r3
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ccc:	461a      	mov	r2, r3
 8008cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	212c      	movs	r1, #44	; 0x2c
 8008cda:	fb01 f303 	mul.w	r3, r1, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	3361      	adds	r3, #97	; 0x61
 8008ce2:	2208      	movs	r2, #8
 8008ce4:	701a      	strb	r2, [r3, #0]
}
 8008ce6:	e15a      	b.n	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	f040 814f 	bne.w	8008f9e <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d1a:	f023 0302 	bic.w	r3, r3, #2
 8008d1e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	212c      	movs	r1, #44	; 0x2c
 8008d26:	fb01 f303 	mul.w	r3, r1, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3361      	adds	r3, #97	; 0x61
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d17d      	bne.n	8008e30 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	212c      	movs	r1, #44	; 0x2c
 8008d3a:	fb01 f303 	mul.w	r3, r1, r3
 8008d3e:	4413      	add	r3, r2
 8008d40:	3360      	adds	r3, #96	; 0x60
 8008d42:	2201      	movs	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	212c      	movs	r1, #44	; 0x2c
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	333f      	adds	r3, #63	; 0x3f
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d00a      	beq.n	8008d70 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	212c      	movs	r1, #44	; 0x2c
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	4413      	add	r3, r2
 8008d66:	333f      	adds	r3, #63	; 0x3f
 8008d68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	f040 8100 	bne.w	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d113      	bne.n	8008da0 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	212c      	movs	r1, #44	; 0x2c
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	3355      	adds	r3, #85	; 0x55
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f083 0301 	eor.w	r3, r3, #1
 8008d8c:	b2d8      	uxtb	r0, r3
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	212c      	movs	r1, #44	; 0x2c
 8008d94:	fb01 f303 	mul.w	r3, r1, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	3355      	adds	r3, #85	; 0x55
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 80e3 	bne.w	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	212c      	movs	r1, #44	; 0x2c
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	334c      	adds	r3, #76	; 0x4c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 80d8 	beq.w	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	212c      	movs	r1, #44	; 0x2c
 8008dc6:	fb01 f303 	mul.w	r3, r1, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	334c      	adds	r3, #76	; 0x4c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	202c      	movs	r0, #44	; 0x2c
 8008dd6:	fb00 f202 	mul.w	r2, r0, r2
 8008dda:	440a      	add	r2, r1
 8008ddc:	3240      	adds	r2, #64	; 0x40
 8008dde:	8812      	ldrh	r2, [r2, #0]
 8008de0:	4413      	add	r3, r2
 8008de2:	3b01      	subs	r3, #1
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	202c      	movs	r0, #44	; 0x2c
 8008dea:	fb00 f202 	mul.w	r2, r0, r2
 8008dee:	440a      	add	r2, r1
 8008df0:	3240      	adds	r2, #64	; 0x40
 8008df2:	8812      	ldrh	r2, [r2, #0]
 8008df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80b5 	beq.w	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	212c      	movs	r1, #44	; 0x2c
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	4413      	add	r3, r2
 8008e12:	3355      	adds	r3, #85	; 0x55
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f083 0301 	eor.w	r3, r3, #1
 8008e1a:	b2d8      	uxtb	r0, r3
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	212c      	movs	r1, #44	; 0x2c
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	3355      	adds	r3, #85	; 0x55
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e09f      	b.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	212c      	movs	r1, #44	; 0x2c
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3361      	adds	r3, #97	; 0x61
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d109      	bne.n	8008e58 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	212c      	movs	r1, #44	; 0x2c
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	3360      	adds	r3, #96	; 0x60
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e08b      	b.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	212c      	movs	r1, #44	; 0x2c
 8008e5e:	fb01 f303 	mul.w	r3, r1, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	3361      	adds	r3, #97	; 0x61
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d109      	bne.n	8008e80 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	212c      	movs	r1, #44	; 0x2c
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	3360      	adds	r3, #96	; 0x60
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	e077      	b.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	212c      	movs	r1, #44	; 0x2c
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3361      	adds	r3, #97	; 0x61
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	d109      	bne.n	8008ea8 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	212c      	movs	r1, #44	; 0x2c
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3360      	adds	r3, #96	; 0x60
 8008ea2:	2205      	movs	r2, #5
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e063      	b.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	212c      	movs	r1, #44	; 0x2c
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3361      	adds	r3, #97	; 0x61
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d009      	beq.n	8008ed0 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	212c      	movs	r1, #44	; 0x2c
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3361      	adds	r3, #97	; 0x61
 8008eca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d14f      	bne.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	212c      	movs	r1, #44	; 0x2c
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	335c      	adds	r3, #92	; 0x5c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	202c      	movs	r0, #44	; 0x2c
 8008ee8:	fb00 f303 	mul.w	r3, r0, r3
 8008eec:	440b      	add	r3, r1
 8008eee:	335c      	adds	r3, #92	; 0x5c
 8008ef0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	212c      	movs	r1, #44	; 0x2c
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	335c      	adds	r3, #92	; 0x5c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d912      	bls.n	8008f2c <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	212c      	movs	r1, #44	; 0x2c
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	4413      	add	r3, r2
 8008f12:	335c      	adds	r3, #92	; 0x5c
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	212c      	movs	r1, #44	; 0x2c
 8008f1e:	fb01 f303 	mul.w	r3, r1, r3
 8008f22:	4413      	add	r3, r2
 8008f24:	3360      	adds	r3, #96	; 0x60
 8008f26:	2204      	movs	r2, #4
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e021      	b.n	8008f70 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	212c      	movs	r1, #44	; 0x2c
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	3360      	adds	r3, #96	; 0x60
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2302      	movs	r3, #2
 8008f80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	b2d9      	uxtb	r1, r3
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	202c      	movs	r0, #44	; 0x2c
 8008f8c:	fb00 f303 	mul.w	r3, r0, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	3360      	adds	r3, #96	; 0x60
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f00c fbff 	bl	801579c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008f9e:	bf00      	nop
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b08a      	sub	sp, #40	; 0x28
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	0c5b      	lsrs	r3, r3, #17
 8008fcc:	f003 030f 	and.w	r3, r3, #15
 8008fd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d004      	beq.n	8008fec <HCD_RXQLVL_IRQHandler+0x46>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b05      	cmp	r3, #5
 8008fe6:	f000 80a9 	beq.w	800913c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008fea:	e0aa      	b.n	8009142 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 80a6 	beq.w	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	212c      	movs	r1, #44	; 0x2c
 8008ffa:	fb01 f303 	mul.w	r3, r1, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	3344      	adds	r3, #68	; 0x44
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 809b 	beq.w	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	212c      	movs	r1, #44	; 0x2c
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	4413      	add	r3, r2
 8009016:	3350      	adds	r3, #80	; 0x50
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	441a      	add	r2, r3
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	202c      	movs	r0, #44	; 0x2c
 8009024:	fb00 f303 	mul.w	r3, r0, r3
 8009028:	440b      	add	r3, r1
 800902a:	334c      	adds	r3, #76	; 0x4c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d87a      	bhi.n	8009128 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	212c      	movs	r1, #44	; 0x2c
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	4413      	add	r3, r2
 8009042:	3344      	adds	r3, #68	; 0x44
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	b292      	uxth	r2, r2
 800904a:	4619      	mov	r1, r3
 800904c:	f002 fc8d 	bl	800b96a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	212c      	movs	r1, #44	; 0x2c
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	4413      	add	r3, r2
 800905c:	3344      	adds	r3, #68	; 0x44
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	441a      	add	r2, r3
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	202c      	movs	r0, #44	; 0x2c
 800906a:	fb00 f303 	mul.w	r3, r0, r3
 800906e:	440b      	add	r3, r1
 8009070:	3344      	adds	r3, #68	; 0x44
 8009072:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3350      	adds	r3, #80	; 0x50
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	441a      	add	r2, r3
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	202c      	movs	r0, #44	; 0x2c
 800908e:	fb00 f303 	mul.w	r3, r0, r3
 8009092:	440b      	add	r3, r1
 8009094:	3350      	adds	r3, #80	; 0x50
 8009096:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	0cdb      	lsrs	r3, r3, #19
 80090a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	212c      	movs	r1, #44	; 0x2c
 80090b4:	fb01 f303 	mul.w	r3, r1, r3
 80090b8:	4413      	add	r3, r2
 80090ba:	3340      	adds	r3, #64	; 0x40
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d13c      	bne.n	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d039      	beq.n	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f8:	461a      	mov	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	212c      	movs	r1, #44	; 0x2c
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	4413      	add	r3, r2
 800910a:	3354      	adds	r3, #84	; 0x54
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f083 0301 	eor.w	r3, r3, #1
 8009112:	b2d8      	uxtb	r0, r3
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	212c      	movs	r1, #44	; 0x2c
 800911a:	fb01 f303 	mul.w	r3, r1, r3
 800911e:	4413      	add	r3, r2
 8009120:	3354      	adds	r3, #84	; 0x54
 8009122:	4602      	mov	r2, r0
 8009124:	701a      	strb	r2, [r3, #0]
      break;
 8009126:	e00b      	b.n	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	212c      	movs	r1, #44	; 0x2c
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	4413      	add	r3, r2
 8009134:	3360      	adds	r3, #96	; 0x60
 8009136:	2204      	movs	r2, #4
 8009138:	701a      	strb	r2, [r3, #0]
      break;
 800913a:	e001      	b.n	8009140 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800913c:	bf00      	nop
 800913e:	e000      	b.n	8009142 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009140:	bf00      	nop
  }
}
 8009142:	bf00      	nop
 8009144:	3728      	adds	r7, #40	; 0x28
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009176:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b02      	cmp	r3, #2
 8009180:	d10b      	bne.n	800919a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b01      	cmp	r3, #1
 800918a:	d102      	bne.n	8009192 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f00c fae9 	bl	8015764 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d132      	bne.n	800920a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f043 0308 	orr.w	r3, r3, #8
 80091aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d126      	bne.n	8009204 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d113      	bne.n	80091e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80091c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091c8:	d106      	bne.n	80091d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fd27 	bl	800bc24 <USB_InitFSLSPClkSel>
 80091d6:	e011      	b.n	80091fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2101      	movs	r1, #1
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 fd20 	bl	800bc24 <USB_InitFSLSPClkSel>
 80091e4:	e00a      	b.n	80091fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d106      	bne.n	80091fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091f4:	461a      	mov	r2, r3
 80091f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80091fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f00c fadf 	bl	80157c0 <HAL_HCD_PortEnabled_Callback>
 8009202:	e002      	b.n	800920a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f00c fae9 	bl	80157dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b20      	cmp	r3, #32
 8009212:	d103      	bne.n	800921c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f043 0320 	orr.w	r3, r3, #32
 800921a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009222:	461a      	mov	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6013      	str	r3, [r2, #0]
}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08a      	sub	sp, #40	; 0x28
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e237      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d050      	beq.n	80092f0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800924e:	4ba3      	ldr	r3, [pc, #652]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 030c 	and.w	r3, r3, #12
 8009256:	2b04      	cmp	r3, #4
 8009258:	d00c      	beq.n	8009274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800925a:	4ba0      	ldr	r3, [pc, #640]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009262:	2b08      	cmp	r3, #8
 8009264:	d112      	bne.n	800928c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009266:	4b9d      	ldr	r3, [pc, #628]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800926e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009272:	d10b      	bne.n	800928c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009274:	4b99      	ldr	r3, [pc, #612]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d036      	beq.n	80092ee <HAL_RCC_OscConfig+0xbe>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d132      	bne.n	80092ee <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e212      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	4b93      	ldr	r3, [pc, #588]	; (80094e0 <HAL_RCC_OscConfig+0x2b0>)
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d013      	beq.n	80092c6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800929e:	f7fc fed1 	bl	8006044 <HAL_GetTick>
 80092a2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092a4:	e008      	b.n	80092b8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092a6:	f7fc fecd 	bl	8006044 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	2b64      	cmp	r3, #100	; 0x64
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e1fc      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b8:	4b88      	ldr	r3, [pc, #544]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0f0      	beq.n	80092a6 <HAL_RCC_OscConfig+0x76>
 80092c4:	e014      	b.n	80092f0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092c6:	f7fc febd 	bl	8006044 <HAL_GetTick>
 80092ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092ce:	f7fc feb9 	bl	8006044 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b64      	cmp	r3, #100	; 0x64
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e1e8      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e0:	4b7e      	ldr	r3, [pc, #504]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f0      	bne.n	80092ce <HAL_RCC_OscConfig+0x9e>
 80092ec:	e000      	b.n	80092f0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d077      	beq.n	80093ec <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092fc:	4b77      	ldr	r3, [pc, #476]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f003 030c 	and.w	r3, r3, #12
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009308:	4b74      	ldr	r3, [pc, #464]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009310:	2b08      	cmp	r3, #8
 8009312:	d126      	bne.n	8009362 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009314:	4b71      	ldr	r3, [pc, #452]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d120      	bne.n	8009362 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009320:	4b6e      	ldr	r3, [pc, #440]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCC_OscConfig+0x108>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d001      	beq.n	8009338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e1bc      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009338:	4b68      	ldr	r3, [pc, #416]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	21f8      	movs	r1, #248	; 0xf8
 8009346:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	fa91 f1a1 	rbit	r1, r1
 800934e:	6179      	str	r1, [r7, #20]
  return result;
 8009350:	6979      	ldr	r1, [r7, #20]
 8009352:	fab1 f181 	clz	r1, r1
 8009356:	b2c9      	uxtb	r1, r1
 8009358:	408b      	lsls	r3, r1
 800935a:	4960      	ldr	r1, [pc, #384]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800935c:	4313      	orrs	r3, r2
 800935e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009360:	e044      	b.n	80093ec <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d02a      	beq.n	80093c0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800936a:	4b5e      	ldr	r3, [pc, #376]	; (80094e4 <HAL_RCC_OscConfig+0x2b4>)
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009370:	f7fc fe68 	bl	8006044 <HAL_GetTick>
 8009374:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009378:	f7fc fe64 	bl	8006044 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e193      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938a:	4b54      	ldr	r3, [pc, #336]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f0      	beq.n	8009378 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009396:	4b51      	ldr	r3, [pc, #324]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	21f8      	movs	r1, #248	; 0xf8
 80093a4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a6:	6939      	ldr	r1, [r7, #16]
 80093a8:	fa91 f1a1 	rbit	r1, r1
 80093ac:	60f9      	str	r1, [r7, #12]
  return result;
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	fab1 f181 	clz	r1, r1
 80093b4:	b2c9      	uxtb	r1, r1
 80093b6:	408b      	lsls	r3, r1
 80093b8:	4948      	ldr	r1, [pc, #288]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	600b      	str	r3, [r1, #0]
 80093be:	e015      	b.n	80093ec <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093c0:	4b48      	ldr	r3, [pc, #288]	; (80094e4 <HAL_RCC_OscConfig+0x2b4>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093c6:	f7fc fe3d 	bl	8006044 <HAL_GetTick>
 80093ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093cc:	e008      	b.n	80093e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093ce:	f7fc fe39 	bl	8006044 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d901      	bls.n	80093e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e168      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093e0:	4b3e      	ldr	r3, [pc, #248]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f0      	bne.n	80093ce <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d030      	beq.n	800945a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d016      	beq.n	800942e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009400:	4b39      	ldr	r3, [pc, #228]	; (80094e8 <HAL_RCC_OscConfig+0x2b8>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009406:	f7fc fe1d 	bl	8006044 <HAL_GetTick>
 800940a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800940c:	e008      	b.n	8009420 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800940e:	f7fc fe19 	bl	8006044 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b02      	cmp	r3, #2
 800941a:	d901      	bls.n	8009420 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e148      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009420:	4b2e      	ldr	r3, [pc, #184]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0f0      	beq.n	800940e <HAL_RCC_OscConfig+0x1de>
 800942c:	e015      	b.n	800945a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800942e:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <HAL_RCC_OscConfig+0x2b8>)
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009434:	f7fc fe06 	bl	8006044 <HAL_GetTick>
 8009438:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800943c:	f7fc fe02 	bl	8006044 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b02      	cmp	r3, #2
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e131      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800944e:	4b23      	ldr	r3, [pc, #140]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1f0      	bne.n	800943c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8088 	beq.w	8009578 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009468:	2300      	movs	r3, #0
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d110      	bne.n	800949c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800947a:	2300      	movs	r3, #0
 800947c:	60bb      	str	r3, [r7, #8]
 800947e:	4b17      	ldr	r3, [pc, #92]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	4a16      	ldr	r2, [pc, #88]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	6413      	str	r3, [r2, #64]	; 0x40
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009492:	60bb      	str	r3, [r7, #8]
 8009494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800949c:	4b13      	ldr	r3, [pc, #76]	; (80094ec <HAL_RCC_OscConfig+0x2bc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a12      	ldr	r2, [pc, #72]	; (80094ec <HAL_RCC_OscConfig+0x2bc>)
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <HAL_RCC_OscConfig+0x2bc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d123      	bne.n	80094fc <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <HAL_RCC_OscConfig+0x2bc>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <HAL_RCC_OscConfig+0x2bc>)
 80094ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094c0:	f7fc fdc0 	bl	8006044 <HAL_GetTick>
 80094c4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094c6:	e013      	b.n	80094f0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c8:	f7fc fdbc 	bl	8006044 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d90c      	bls.n	80094f0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e0eb      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800
 80094e0:	40023802 	.word	0x40023802
 80094e4:	42470000 	.word	0x42470000
 80094e8:	42470e80 	.word	0x42470e80
 80094ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094f0:	4b72      	ldr	r3, [pc, #456]	; (80096bc <HAL_RCC_OscConfig+0x48c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0e5      	beq.n	80094c8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	4b6f      	ldr	r3, [pc, #444]	; (80096c0 <HAL_RCC_OscConfig+0x490>)
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d015      	beq.n	800953a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800950e:	f7fc fd99 	bl	8006044 <HAL_GetTick>
 8009512:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009514:	e00a      	b.n	800952c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009516:	f7fc fd95 	bl	8006044 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	f241 3288 	movw	r2, #5000	; 0x1388
 8009524:	4293      	cmp	r3, r2
 8009526:	d901      	bls.n	800952c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e0c2      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800952c:	4b65      	ldr	r3, [pc, #404]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 800952e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d0ee      	beq.n	8009516 <HAL_RCC_OscConfig+0x2e6>
 8009538:	e014      	b.n	8009564 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800953a:	f7fc fd83 	bl	8006044 <HAL_GetTick>
 800953e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009540:	e00a      	b.n	8009558 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009542:	f7fc fd7f 	bl	8006044 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009550:	4293      	cmp	r3, r2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e0ac      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009558:	4b5a      	ldr	r3, [pc, #360]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 800955a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1ee      	bne.n	8009542 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009568:	2b01      	cmp	r3, #1
 800956a:	d105      	bne.n	8009578 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800956c:	4b55      	ldr	r3, [pc, #340]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	4a54      	ldr	r2, [pc, #336]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 8009572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 8097 	beq.w	80096b0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009582:	4b50      	ldr	r3, [pc, #320]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b08      	cmp	r3, #8
 800958c:	d061      	beq.n	8009652 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d146      	bne.n	8009624 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009596:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <HAL_RCC_OscConfig+0x498>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800959c:	f7fc fd52 	bl	8006044 <HAL_GetTick>
 80095a0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095a2:	e008      	b.n	80095b6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a4:	f7fc fd4e 	bl	8006044 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	2b64      	cmp	r3, #100	; 0x64
 80095b0:	d901      	bls.n	80095b6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e07d      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095b6:	4b43      	ldr	r3, [pc, #268]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1f0      	bne.n	80095a4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095c2:	4b40      	ldr	r3, [pc, #256]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	4b41      	ldr	r3, [pc, #260]	; (80096cc <HAL_RCC_OscConfig+0x49c>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	69d1      	ldr	r1, [r2, #28]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6a12      	ldr	r2, [r2, #32]
 80095d2:	4311      	orrs	r1, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095d8:	0192      	lsls	r2, r2, #6
 80095da:	4311      	orrs	r1, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80095e0:	0612      	lsls	r2, r2, #24
 80095e2:	4311      	orrs	r1, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80095e8:	0852      	lsrs	r2, r2, #1
 80095ea:	3a01      	subs	r2, #1
 80095ec:	0412      	lsls	r2, r2, #16
 80095ee:	430a      	orrs	r2, r1
 80095f0:	4934      	ldr	r1, [pc, #208]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095f6:	4b34      	ldr	r3, [pc, #208]	; (80096c8 <HAL_RCC_OscConfig+0x498>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fc:	f7fc fd22 	bl	8006044 <HAL_GetTick>
 8009600:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009602:	e008      	b.n	8009616 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009604:	f7fc fd1e 	bl	8006044 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b64      	cmp	r3, #100	; 0x64
 8009610:	d901      	bls.n	8009616 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e04d      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0f0      	beq.n	8009604 <HAL_RCC_OscConfig+0x3d4>
 8009622:	e045      	b.n	80096b0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009624:	4b28      	ldr	r3, [pc, #160]	; (80096c8 <HAL_RCC_OscConfig+0x498>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962a:	f7fc fd0b 	bl	8006044 <HAL_GetTick>
 800962e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009630:	e008      	b.n	8009644 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009632:	f7fc fd07 	bl	8006044 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b64      	cmp	r3, #100	; 0x64
 800963e:	d901      	bls.n	8009644 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e036      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009644:	4b1f      	ldr	r3, [pc, #124]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f0      	bne.n	8009632 <HAL_RCC_OscConfig+0x402>
 8009650:	e02e      	b.n	80096b0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e029      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <HAL_RCC_OscConfig+0x494>)
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	429a      	cmp	r2, r3
 8009670:	d11c      	bne.n	80096ac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967c:	429a      	cmp	r2, r3
 800967e:	d115      	bne.n	80096ac <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	099b      	lsrs	r3, r3, #6
 8009684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800968c:	429a      	cmp	r2, r3
 800968e:	d10d      	bne.n	80096ac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800969a:	429a      	cmp	r2, r3
 800969c:	d106      	bne.n	80096ac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d001      	beq.n	80096b0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e000      	b.n	80096b2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3728      	adds	r7, #40	; 0x28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	40007000 	.word	0x40007000
 80096c0:	40023870 	.word	0x40023870
 80096c4:	40023800 	.word	0x40023800
 80096c8:	42470060 	.word	0x42470060
 80096cc:	f0bc8000 	.word	0xf0bc8000

080096d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e0d2      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096e4:	4b6b      	ldr	r3, [pc, #428]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d90c      	bls.n	800970c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096f2:	4b68      	ldr	r3, [pc, #416]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096fa:	4b66      	ldr	r3, [pc, #408]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d001      	beq.n	800970c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e0be      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d020      	beq.n	800975a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009724:	4b5c      	ldr	r3, [pc, #368]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	4a5b      	ldr	r2, [pc, #364]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800972a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800972e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800973c:	4b56      	ldr	r3, [pc, #344]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	4a55      	ldr	r2, [pc, #340]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009746:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009748:	4b53      	ldr	r3, [pc, #332]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	4950      	ldr	r1, [pc, #320]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009756:	4313      	orrs	r3, r2
 8009758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d040      	beq.n	80097e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d107      	bne.n	800977e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800976e:	4b4a      	ldr	r3, [pc, #296]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d115      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e085      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d107      	bne.n	8009796 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009786:	4b44      	ldr	r3, [pc, #272]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e079      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009796:	4b40      	ldr	r3, [pc, #256]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e071      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097a6:	4b3c      	ldr	r3, [pc, #240]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f023 0203 	bic.w	r2, r3, #3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4939      	ldr	r1, [pc, #228]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097b8:	f7fc fc44 	bl	8006044 <HAL_GetTick>
 80097bc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097be:	e00a      	b.n	80097d6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c0:	f7fc fc40 	bl	8006044 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e059      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d6:	4b30      	ldr	r3, [pc, #192]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 020c 	and.w	r2, r3, #12
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d1eb      	bne.n	80097c0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097e8:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d20c      	bcs.n	8009810 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f6:	4b27      	ldr	r3, [pc, #156]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097fe:	4b25      	ldr	r3, [pc, #148]	; (8009894 <HAL_RCC_ClockConfig+0x1c4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d001      	beq.n	8009810 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e03c      	b.n	800988a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b00      	cmp	r3, #0
 800981a:	d008      	beq.n	800982e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800981c:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	491b      	ldr	r1, [pc, #108]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800982a:	4313      	orrs	r3, r2
 800982c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0308 	and.w	r3, r3, #8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800983a:	4b17      	ldr	r3, [pc, #92]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	4913      	ldr	r1, [pc, #76]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 800984a:	4313      	orrs	r3, r2
 800984c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800984e:	f000 f82b 	bl	80098a8 <HAL_RCC_GetSysClockFreq>
 8009852:	4601      	mov	r1, r0
 8009854:	4b10      	ldr	r3, [pc, #64]	; (8009898 <HAL_RCC_ClockConfig+0x1c8>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985c:	22f0      	movs	r2, #240	; 0xf0
 800985e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	fa92 f2a2 	rbit	r2, r2
 8009866:	60fa      	str	r2, [r7, #12]
  return result;
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	fab2 f282 	clz	r2, r2
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	40d3      	lsrs	r3, r2
 8009872:	4a0a      	ldr	r2, [pc, #40]	; (800989c <HAL_RCC_ClockConfig+0x1cc>)
 8009874:	5cd3      	ldrb	r3, [r2, r3]
 8009876:	fa21 f303 	lsr.w	r3, r1, r3
 800987a:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <HAL_RCC_ClockConfig+0x1d0>)
 800987c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <HAL_RCC_ClockConfig+0x1d4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7fc f8da 	bl	8005a3c <HAL_InitTick>

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	40023c00 	.word	0x40023c00
 8009898:	40023800 	.word	0x40023800
 800989c:	0801a6bc 	.word	0x0801a6bc
 80098a0:	20000260 	.word	0x20000260
 80098a4:	20000264 	.word	0x20000264

080098a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098a8:	b5b0      	push	{r4, r5, r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098ae:	2100      	movs	r1, #0
 80098b0:	6079      	str	r1, [r7, #4]
 80098b2:	2100      	movs	r1, #0
 80098b4:	60f9      	str	r1, [r7, #12]
 80098b6:	2100      	movs	r1, #0
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80098ba:	2100      	movs	r1, #0
 80098bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098be:	4952      	ldr	r1, [pc, #328]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80098c0:	6889      	ldr	r1, [r1, #8]
 80098c2:	f001 010c 	and.w	r1, r1, #12
 80098c6:	2908      	cmp	r1, #8
 80098c8:	d00d      	beq.n	80098e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80098ca:	2908      	cmp	r1, #8
 80098cc:	f200 8094 	bhi.w	80099f8 <HAL_RCC_GetSysClockFreq+0x150>
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d002      	beq.n	80098da <HAL_RCC_GetSysClockFreq+0x32>
 80098d4:	2904      	cmp	r1, #4
 80098d6:	d003      	beq.n	80098e0 <HAL_RCC_GetSysClockFreq+0x38>
 80098d8:	e08e      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80098da:	4b4c      	ldr	r3, [pc, #304]	; (8009a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80098dc:	60bb      	str	r3, [r7, #8]
       break;
 80098de:	e08e      	b.n	80099fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80098e0:	4b4b      	ldr	r3, [pc, #300]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x168>)
 80098e2:	60bb      	str	r3, [r7, #8]
      break;
 80098e4:	e08b      	b.n	80099fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80098e6:	4948      	ldr	r1, [pc, #288]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80098e8:	6849      	ldr	r1, [r1, #4]
 80098ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80098ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098f0:	4945      	ldr	r1, [pc, #276]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80098f2:	6849      	ldr	r1, [r1, #4]
 80098f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d024      	beq.n	8009946 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098fc:	4942      	ldr	r1, [pc, #264]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80098fe:	6849      	ldr	r1, [r1, #4]
 8009900:	0989      	lsrs	r1, r1, #6
 8009902:	4608      	mov	r0, r1
 8009904:	f04f 0100 	mov.w	r1, #0
 8009908:	f240 14ff 	movw	r4, #511	; 0x1ff
 800990c:	f04f 0500 	mov.w	r5, #0
 8009910:	ea00 0204 	and.w	r2, r0, r4
 8009914:	ea01 0305 	and.w	r3, r1, r5
 8009918:	493d      	ldr	r1, [pc, #244]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x168>)
 800991a:	fb01 f003 	mul.w	r0, r1, r3
 800991e:	2100      	movs	r1, #0
 8009920:	fb01 f102 	mul.w	r1, r1, r2
 8009924:	1844      	adds	r4, r0, r1
 8009926:	493a      	ldr	r1, [pc, #232]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x168>)
 8009928:	fba2 0101 	umull	r0, r1, r2, r1
 800992c:	1863      	adds	r3, r4, r1
 800992e:	4619      	mov	r1, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	461a      	mov	r2, r3
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	f7f7 f960 	bl	8000bfc <__aeabi_uldivmod>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4613      	mov	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e04a      	b.n	80099dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009946:	4b30      	ldr	r3, [pc, #192]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	099b      	lsrs	r3, r3, #6
 800994c:	461a      	mov	r2, r3
 800994e:	f04f 0300 	mov.w	r3, #0
 8009952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009956:	f04f 0100 	mov.w	r1, #0
 800995a:	ea02 0400 	and.w	r4, r2, r0
 800995e:	ea03 0501 	and.w	r5, r3, r1
 8009962:	4620      	mov	r0, r4
 8009964:	4629      	mov	r1, r5
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	f04f 0300 	mov.w	r3, #0
 800996e:	014b      	lsls	r3, r1, #5
 8009970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009974:	0142      	lsls	r2, r0, #5
 8009976:	4610      	mov	r0, r2
 8009978:	4619      	mov	r1, r3
 800997a:	1b00      	subs	r0, r0, r4
 800997c:	eb61 0105 	sbc.w	r1, r1, r5
 8009980:	f04f 0200 	mov.w	r2, #0
 8009984:	f04f 0300 	mov.w	r3, #0
 8009988:	018b      	lsls	r3, r1, #6
 800998a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800998e:	0182      	lsls	r2, r0, #6
 8009990:	1a12      	subs	r2, r2, r0
 8009992:	eb63 0301 	sbc.w	r3, r3, r1
 8009996:	f04f 0000 	mov.w	r0, #0
 800999a:	f04f 0100 	mov.w	r1, #0
 800999e:	00d9      	lsls	r1, r3, #3
 80099a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099a4:	00d0      	lsls	r0, r2, #3
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	1912      	adds	r2, r2, r4
 80099ac:	eb45 0303 	adc.w	r3, r5, r3
 80099b0:	f04f 0000 	mov.w	r0, #0
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	0299      	lsls	r1, r3, #10
 80099ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80099be:	0290      	lsls	r0, r2, #10
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4610      	mov	r0, r2
 80099c6:	4619      	mov	r1, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f04f 0300 	mov.w	r3, #0
 80099d0:	f7f7 f914 	bl	8000bfc <__aeabi_uldivmod>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4613      	mov	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	3301      	adds	r3, #1
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f4:	60bb      	str	r3, [r7, #8]
      break;
 80099f6:	e002      	b.n	80099fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80099fa:	60bb      	str	r3, [r7, #8]
      break;
 80099fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099fe:	68bb      	ldr	r3, [r7, #8]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bdb0      	pop	{r4, r5, r7, pc}
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	00f42400 	.word	0x00f42400
 8009a10:	017d7840 	.word	0x017d7840

08009a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr
 8009a24:	20000260 	.word	0x20000260

08009a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009a2e:	f7ff fff1 	bl	8009a14 <HAL_RCC_GetHCLKFreq>
 8009a32:	4601      	mov	r1, r0
 8009a34:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009a3c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8009a40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	fa92 f2a2 	rbit	r2, r2
 8009a48:	603a      	str	r2, [r7, #0]
  return result;
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	fab2 f282 	clz	r2, r2
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	40d3      	lsrs	r3, r2
 8009a54:	4a04      	ldr	r2, [pc, #16]	; (8009a68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009a56:	5cd3      	ldrb	r3, [r2, r3]
 8009a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40023800 	.word	0x40023800
 8009a68:	0801a6cc 	.word	0x0801a6cc

08009a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	220f      	movs	r2, #15
 8009a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009a7c:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <HAL_RCC_GetClockConfig+0x58>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 0203 	and.w	r2, r3, #3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009a88:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <HAL_RCC_GetClockConfig+0x58>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <HAL_RCC_GetClockConfig+0x58>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009aa0:	4b08      	ldr	r3, [pc, #32]	; (8009ac4 <HAL_RCC_GetClockConfig+0x58>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009aae:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 020f 	and.w	r2, r3, #15
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bc80      	pop	{r7}
 8009ac2:	4770      	bx	lr
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	40023c00 	.word	0x40023c00

08009acc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d14c      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009af0:	4b6d      	ldr	r3, [pc, #436]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009af6:	f7fc faa5 	bl	8006044 <HAL_GetTick>
 8009afa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009afc:	e008      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009afe:	f7fc faa1 	bl	8006044 <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e0c7      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b10:	4b66      	ldr	r3, [pc, #408]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1f0      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8009b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	fa92 f2a2 	rbit	r2, r2
 8009b2c:	613a      	str	r2, [r7, #16]
  return result;
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	fab2 f282 	clz	r2, r2
 8009b34:	b2d2      	uxtb	r2, r2
 8009b36:	fa03 f202 	lsl.w	r2, r3, r2
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8009b42:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b44:	69f9      	ldr	r1, [r7, #28]
 8009b46:	fa91 f1a1 	rbit	r1, r1
 8009b4a:	61b9      	str	r1, [r7, #24]
  return result;
 8009b4c:	69b9      	ldr	r1, [r7, #24]
 8009b4e:	fab1 f181 	clz	r1, r1
 8009b52:	b2c9      	uxtb	r1, r1
 8009b54:	408b      	lsls	r3, r1
 8009b56:	4955      	ldr	r1, [pc, #340]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b5e:	4b52      	ldr	r3, [pc, #328]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009b60:	2201      	movs	r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b64:	f7fc fa6e 	bl	8006044 <HAL_GetTick>
 8009b68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b6a:	e008      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b6c:	f7fc fa6a 	bl	8006044 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e090      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b7e:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0f0      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8083 	beq.w	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	4b43      	ldr	r3, [pc, #268]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	4a42      	ldr	r2, [pc, #264]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8009ba8:	4b40      	ldr	r3, [pc, #256]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009bb4:	4b3e      	ldr	r3, [pc, #248]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a3d      	ldr	r2, [pc, #244]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bbe:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8009bc0:	f7fc fa40 	bl	8006044 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009bc6:	e008      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009bc8:	f7fc fa3c 	bl	8006044 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e062      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009bda:	4b35      	ldr	r3, [pc, #212]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0f0      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009be6:	4b31      	ldr	r3, [pc, #196]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bee:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d02f      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bfe:	6a3a      	ldr	r2, [r7, #32]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d028      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0c:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c0e:	4b29      	ldr	r3, [pc, #164]	; (8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c14:	4b27      	ldr	r3, [pc, #156]	; (8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009c1a:	4a24      	ldr	r2, [pc, #144]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009c20:	4b22      	ldr	r3, [pc, #136]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d114      	bne.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009c2c:	f7fc fa0a 	bl	8006044 <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c32:	e00a      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c34:	f7fc fa06 	bl	8006044 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d901      	bls.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	e02a      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c4a:	4b18      	ldr	r3, [pc, #96]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0ee      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c62:	d10d      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c78:	490c      	ldr	r1, [pc, #48]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	608b      	str	r3, [r1, #8]
 8009c7e:	e005      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009c80:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	4a09      	ldr	r2, [pc, #36]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c8a:	6093      	str	r3, [r2, #8]
 8009c8c:	4b07      	ldr	r3, [pc, #28]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c98:	4904      	ldr	r1, [pc, #16]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3728      	adds	r7, #40	; 0x28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	42470068 	.word	0x42470068
 8009cac:	40023800 	.word	0x40023800
 8009cb0:	40007000 	.word	0x40007000
 8009cb4:	42470e40 	.word	0x42470e40

08009cb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e07c      	b.n	8009dc4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7f5b      	ldrb	r3, [r3, #29]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d105      	bne.n	8009ce0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7fb fdd4 	bl	8005888 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	22ca      	movs	r2, #202	; 0xca
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2253      	movs	r2, #83	; 0x53
 8009cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb8d 	bl	800a416 <RTC_EnterInitMode>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	22ff      	movs	r2, #255	; 0xff
 8009d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e057      	b.n	8009dc4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6899      	ldr	r1, [r3, #8]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	68d2      	ldr	r2, [r2, #12]
 8009d4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6919      	ldr	r1, [r3, #16]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	041a      	lsls	r2, r3, #16
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d72:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fb26 	bl	800a3c6 <HAL_RTC_WaitForSynchro>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d008      	beq.n	8009d92 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e018      	b.n	8009dc4 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	22ff      	movs	r2, #255	; 0xff
 8009dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dcc:	b590      	push	{r4, r7, lr}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	7f1b      	ldrb	r3, [r3, #28]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_RTC_SetTime+0x1c>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e0a3      	b.n	8009f30 <HAL_RTC_SetTime+0x164>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2202      	movs	r2, #2
 8009df2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d126      	bne.n	8009e48 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fb2b 	bl	800a46e <RTC_ByteToBcd2>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fb24 	bl	800a46e <RTC_ByteToBcd2>
 8009e26:	4603      	mov	r3, r0
 8009e28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	789b      	ldrb	r3, [r3, #2]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fb1c 	bl	800a46e <RTC_ByteToBcd2>
 8009e36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009e38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	78db      	ldrb	r3, [r3, #3]
 8009e40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e42:	4313      	orrs	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]
 8009e46:	e018      	b.n	8009e7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009e6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	78db      	ldrb	r3, [r3, #3]
 8009e74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e76:	4313      	orrs	r3, r2
 8009e78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	22ca      	movs	r2, #202	; 0xca
 8009e80:	625a      	str	r2, [r3, #36]	; 0x24
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2253      	movs	r2, #83	; 0x53
 8009e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 fac3 	bl	800a416 <RTC_EnterInitMode>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	22ff      	movs	r2, #255	; 0xff
 8009e9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e040      	b.n	8009f30 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009eb8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009ebc:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ecc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6899      	ldr	r1, [r3, #8]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef4:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fa65 	bl	800a3c6 <HAL_RTC_WaitForSynchro>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	22ff      	movs	r2, #255	; 0xff
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e00a      	b.n	8009f30 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	22ff      	movs	r2, #255	; 0xff
 8009f20:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
  }
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	371c      	adds	r7, #28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd90      	pop	{r4, r7, pc}

08009f38 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009f52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009f56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	0c1b      	lsrs	r3, r3, #16
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	0a1b      	lsrs	r3, r3, #8
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11a      	bne.n	8009fd2 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fa81 	bl	800a4a8 <RTC_Bcd2ToByte>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	785b      	ldrb	r3, [r3, #1]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fa78 	bl	800a4a8 <RTC_Bcd2ToByte>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	789b      	ldrb	r3, [r3, #2]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fa6f 	bl	800a4a8 <RTC_Bcd2ToByte>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	7f1b      	ldrb	r3, [r3, #28]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_RTC_SetDate+0x1c>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e08d      	b.n	800a114 <HAL_RTC_SetDate+0x138>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2202      	movs	r2, #2
 800a002:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10e      	bne.n	800a028 <HAL_RTC_SetDate+0x4c>
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	f023 0310 	bic.w	r3, r3, #16
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	330a      	adds	r3, #10
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d11c      	bne.n	800a068 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	78db      	ldrb	r3, [r3, #3]
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fa1b 	bl	800a46e <RTC_ByteToBcd2>
 800a038:	4603      	mov	r3, r0
 800a03a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	4618      	mov	r0, r3
 800a042:	f000 fa14 	bl	800a46e <RTC_ByteToBcd2>
 800a046:	4603      	mov	r3, r0
 800a048:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a04a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	789b      	ldrb	r3, [r3, #2]
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fa0c 	bl	800a46e <RTC_ByteToBcd2>
 800a056:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a058:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a062:	4313      	orrs	r3, r2
 800a064:	617b      	str	r3, [r7, #20]
 800a066:	e00e      	b.n	800a086 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	78db      	ldrb	r3, [r3, #3]
 800a06c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a074:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a07a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	22ca      	movs	r2, #202	; 0xca
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2253      	movs	r2, #83	; 0x53
 800a094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f9bd 	bl	800a416 <RTC_EnterInitMode>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00b      	beq.n	800a0ba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	22ff      	movs	r2, #255	; 0xff
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e02c      	b.n	800a114 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0d8:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f973 	bl	800a3c6 <HAL_RTC_WaitForSynchro>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	22ff      	movs	r2, #255	; 0xff
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e00a      	b.n	800a114 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	22ff      	movs	r2, #255	; 0xff
 800a104:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2201      	movs	r2, #1
 800a10a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a112:	2300      	movs	r3, #0
  }
}
 800a114:	4618      	mov	r0, r3
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd90      	pop	{r4, r7, pc}

0800a11c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a136:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a13a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	0c1b      	lsrs	r3, r3, #16
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	0a1b      	lsrs	r3, r3, #8
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 031f 	and.w	r3, r3, #31
 800a150:	b2da      	uxtb	r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	0b5b      	lsrs	r3, r3, #13
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d11a      	bne.n	800a1b0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	78db      	ldrb	r3, [r3, #3]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f992 	bl	800a4a8 <RTC_Bcd2ToByte>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	785b      	ldrb	r3, [r3, #1]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f989 	bl	800a4a8 <RTC_Bcd2ToByte>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	789b      	ldrb	r3, [r3, #2]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f980 	bl	800a4a8 <RTC_Bcd2ToByte>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a1ba:	b590      	push	{r4, r7, lr}
 800a1bc:	b087      	sub	sp, #28
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7f1b      	ldrb	r3, [r3, #28]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_RTC_SetAlarm+0x20>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e0f1      	b.n	800a3be <HAL_RTC_SetAlarm+0x204>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d136      	bne.n	800a25a <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f932 	bl	800a46e <RTC_ByteToBcd2>
 800a20a:	4603      	mov	r3, r0
 800a20c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f92b 	bl	800a46e <RTC_ByteToBcd2>
 800a218:	4603      	mov	r3, r0
 800a21a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a21c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	789b      	ldrb	r3, [r3, #2]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f923 	bl	800a46e <RTC_ByteToBcd2>
 800a228:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a22a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	78db      	ldrb	r3, [r3, #3]
 800a232:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a234:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	7d1b      	ldrb	r3, [r3, #20]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 f916 	bl	800a46e <RTC_ByteToBcd2>
 800a242:	4603      	mov	r3, r0
 800a244:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a246:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a24e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	e022      	b.n	800a2a0 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a27a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a280:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	78db      	ldrb	r3, [r3, #3]
 800a286:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a288:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a290:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a296:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	22ca      	movs	r2, #202	; 0xca
 800a2a6:	625a      	str	r2, [r3, #36]	; 0x24
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2253      	movs	r2, #83	; 0x53
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2b8:	d13b      	bne.n	800a332 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689a      	ldr	r2, [r3, #8]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2c8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2d8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2da:	f7fb feb3 	bl	8006044 <HAL_GetTick>
 800a2de:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a2e0:	e013      	b.n	800a30a <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2e2:	f7fb feaf 	bl	8006044 <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2f0:	d90b      	bls.n	800a30a <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	22ff      	movs	r2, #255	; 0xff
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e059      	b.n	800a3be <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d0e4      	beq.n	800a2e2 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a32e:	609a      	str	r2, [r3, #8]
 800a330:	e03a      	b.n	800a3a8 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a340:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a350:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a352:	f7fb fe77 	bl	8006044 <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a358:	e013      	b.n	800a382 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a35a:	f7fb fe73 	bl	8006044 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a368:	d90b      	bls.n	800a382 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	22ff      	movs	r2, #255	; 0xff
 800a370:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2203      	movs	r2, #3
 800a376:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e01d      	b.n	800a3be <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0e4      	beq.n	800a35a <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3a6:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	22ff      	movs	r2, #255	; 0xff
 800a3ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd90      	pop	{r4, r7, pc}

0800a3c6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a3e0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3e2:	f7fb fe2f 	bl	8006044 <HAL_GetTick>
 800a3e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a3e8:	e009      	b.n	800a3fe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3ea:	f7fb fe2b 	bl	8006044 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3f8:	d901      	bls.n	800a3fe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e007      	b.n	800a40e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f003 0320 	and.w	r3, r3, #32
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0ee      	beq.n	800a3ea <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d119      	bne.n	800a464 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a43a:	f7fb fe03 	bl	8006044 <HAL_GetTick>
 800a43e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a440:	e009      	b.n	800a456 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a442:	f7fb fdff 	bl	8006044 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a450:	d901      	bls.n	800a456 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e007      	b.n	800a466 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0ee      	beq.n	800a442 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	4603      	mov	r3, r0
 800a476:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800a47c:	e005      	b.n	800a48a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	3b0a      	subs	r3, #10
 800a488:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d8f6      	bhi.n	800a47e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	b2da      	uxtb	r2, r3
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	b2db      	uxtb	r3, r3
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr

0800a4a8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	091b      	lsrs	r3, r3, #4
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	4413      	add	r3, r2
 800a4d6:	b2db      	uxtb	r3, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr

0800a4e2 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	7f1b      	ldrb	r3, [r3, #28]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e081      	b.n	800a602 <HAL_RTCEx_SetWakeUpTimer+0x120>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2202      	movs	r2, #2
 800a508:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	22ca      	movs	r2, #202	; 0xca
 800a510:	625a      	str	r2, [r3, #36]	; 0x24
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2253      	movs	r2, #83	; 0x53
 800a518:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 800a528:	f7fb fd8c 	bl	8006044 <HAL_GetTick>
 800a52c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a52e:	e013      	b.n	800a558 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a530:	f7fb fd88 	bl	8006044 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a53e:	d90b      	bls.n	800a558 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	22ff      	movs	r2, #255	; 0xff
 800a546:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2203      	movs	r2, #3
 800a54c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e054      	b.n	800a602 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f003 0304 	and.w	r3, r3, #4
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e4      	bne.n	800a530 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a574:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a576:	f7fb fd65 	bl	8006044 <HAL_GetTick>
 800a57a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a57c:	e013      	b.n	800a5a6 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a57e:	f7fb fd61 	bl	8006044 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a58c:	d90b      	bls.n	800a5a6 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	22ff      	movs	r2, #255	; 0xff
 800a594:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2203      	movs	r2, #3
 800a59a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e02d      	b.n	800a602 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0e4      	beq.n	800a57e <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0207 	bic.w	r2, r2, #7
 800a5c2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6899      	ldr	r1, [r3, #8]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	22ff      	movs	r2, #255	; 0xff
 800a5f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e041      	b.n	800a6a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	d106      	bne.n	800a636 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7fb f93f 	bl	80058b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2202      	movs	r2, #2
 800a63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3304      	adds	r3, #4
 800a646:	4619      	mov	r1, r3
 800a648:	4610      	mov	r0, r2
 800a64a:	f000 fc69 	bl	800af20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d001      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e04e      	b.n	800a75e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f042 0201 	orr.w	r2, r2, #1
 800a6d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a22      	ldr	r2, [pc, #136]	; (800a768 <HAL_TIM_Base_Start_IT+0xc0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d022      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ea:	d01d      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a1e      	ldr	r2, [pc, #120]	; (800a76c <HAL_TIM_Base_Start_IT+0xc4>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d018      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1d      	ldr	r2, [pc, #116]	; (800a770 <HAL_TIM_Base_Start_IT+0xc8>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d013      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1b      	ldr	r2, [pc, #108]	; (800a774 <HAL_TIM_Base_Start_IT+0xcc>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00e      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a1a      	ldr	r2, [pc, #104]	; (800a778 <HAL_TIM_Base_Start_IT+0xd0>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d009      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a18      	ldr	r2, [pc, #96]	; (800a77c <HAL_TIM_Base_Start_IT+0xd4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d004      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x80>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a17      	ldr	r2, [pc, #92]	; (800a780 <HAL_TIM_Base_Start_IT+0xd8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d111      	bne.n	800a74c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b06      	cmp	r3, #6
 800a738:	d010      	beq.n	800a75c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	e007      	b.n	800a75c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr
 800a768:	40010000 	.word	0x40010000
 800a76c:	40000400 	.word	0x40000400
 800a770:	40000800 	.word	0x40000800
 800a774:	40000c00 	.word	0x40000c00
 800a778:	40010400 	.word	0x40010400
 800a77c:	40014000 	.word	0x40014000
 800a780:	40001800 	.word	0x40001800

0800a784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e041      	b.n	800a81a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f839 	bl	800a822 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 fbac 	bl	800af20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr

0800a834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d109      	bne.n	800a858 <HAL_TIM_PWM_Start+0x24>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	bf14      	ite	ne
 800a850:	2301      	movne	r3, #1
 800a852:	2300      	moveq	r3, #0
 800a854:	b2db      	uxtb	r3, r3
 800a856:	e022      	b.n	800a89e <HAL_TIM_PWM_Start+0x6a>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d109      	bne.n	800a872 <HAL_TIM_PWM_Start+0x3e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b01      	cmp	r3, #1
 800a868:	bf14      	ite	ne
 800a86a:	2301      	movne	r3, #1
 800a86c:	2300      	moveq	r3, #0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e015      	b.n	800a89e <HAL_TIM_PWM_Start+0x6a>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b08      	cmp	r3, #8
 800a876:	d109      	bne.n	800a88c <HAL_TIM_PWM_Start+0x58>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b01      	cmp	r3, #1
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	e008      	b.n	800a89e <HAL_TIM_PWM_Start+0x6a>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b01      	cmp	r3, #1
 800a896:	bf14      	ite	ne
 800a898:	2301      	movne	r3, #1
 800a89a:	2300      	moveq	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e07c      	b.n	800a9a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <HAL_TIM_PWM_Start+0x82>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8b4:	e013      	b.n	800a8de <HAL_TIM_PWM_Start+0xaa>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d104      	bne.n	800a8c6 <HAL_TIM_PWM_Start+0x92>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8c4:	e00b      	b.n	800a8de <HAL_TIM_PWM_Start+0xaa>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d104      	bne.n	800a8d6 <HAL_TIM_PWM_Start+0xa2>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8d4:	e003      	b.n	800a8de <HAL_TIM_PWM_Start+0xaa>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fdfa 	bl	800b4e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a2d      	ldr	r2, [pc, #180]	; (800a9a8 <HAL_TIM_PWM_Start+0x174>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d004      	beq.n	800a900 <HAL_TIM_PWM_Start+0xcc>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a2c      	ldr	r2, [pc, #176]	; (800a9ac <HAL_TIM_PWM_Start+0x178>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d101      	bne.n	800a904 <HAL_TIM_PWM_Start+0xd0>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <HAL_TIM_PWM_Start+0xd2>
 800a904:	2300      	movs	r3, #0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a22      	ldr	r2, [pc, #136]	; (800a9a8 <HAL_TIM_PWM_Start+0x174>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d022      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a92c:	d01d      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1f      	ldr	r2, [pc, #124]	; (800a9b0 <HAL_TIM_PWM_Start+0x17c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d018      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <HAL_TIM_PWM_Start+0x180>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a1c      	ldr	r2, [pc, #112]	; (800a9b8 <HAL_TIM_PWM_Start+0x184>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <HAL_TIM_PWM_Start+0x178>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a18      	ldr	r2, [pc, #96]	; (800a9bc <HAL_TIM_PWM_Start+0x188>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIM_PWM_Start+0x136>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a16      	ldr	r2, [pc, #88]	; (800a9c0 <HAL_TIM_PWM_Start+0x18c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d111      	bne.n	800a98e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b06      	cmp	r3, #6
 800a97a:	d010      	beq.n	800a99e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0201 	orr.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a98c:	e007      	b.n	800a99e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f042 0201 	orr.w	r2, r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40000400 	.word	0x40000400
 800a9b4:	40000800 	.word	0x40000800
 800a9b8:	40000c00 	.word	0x40000c00
 800a9bc:	40014000 	.word	0x40014000
 800a9c0:	40001800 	.word	0x40001800

0800a9c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d122      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d11b      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0202 	mvn.w	r2, #2
 800a9f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fa6f 	bl	800aeea <HAL_TIM_IC_CaptureCallback>
 800aa0c:	e005      	b.n	800aa1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa62 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fa71 	bl	800aefc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 0304 	and.w	r3, r3, #4
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d122      	bne.n	800aa74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b04      	cmp	r3, #4
 800aa3a:	d11b      	bne.n	800aa74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f06f 0204 	mvn.w	r2, #4
 800aa44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa45 	bl	800aeea <HAL_TIM_IC_CaptureCallback>
 800aa60:	e005      	b.n	800aa6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa38 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fa47 	bl	800aefc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b08      	cmp	r3, #8
 800aa80:	d122      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d11b      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f06f 0208 	mvn.w	r2, #8
 800aa98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2204      	movs	r2, #4
 800aa9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa1b 	bl	800aeea <HAL_TIM_IC_CaptureCallback>
 800aab4:	e005      	b.n	800aac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa0e 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fa1d 	bl	800aefc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d122      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b10      	cmp	r3, #16
 800aae2:	d11b      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f06f 0210 	mvn.w	r2, #16
 800aaec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f9f1 	bl	800aeea <HAL_TIM_IC_CaptureCallback>
 800ab08:	e005      	b.n	800ab16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f9e4 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f9f3 	bl	800aefc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d10e      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d107      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f06f 0201 	mvn.w	r2, #1
 800ab40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7f9 fc96 	bl	8004474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab52:	2b80      	cmp	r3, #128	; 0x80
 800ab54:	d10e      	bne.n	800ab74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab60:	2b80      	cmp	r3, #128	; 0x80
 800ab62:	d107      	bne.n	800ab74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fdae 	bl	800b6d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7e:	2b40      	cmp	r3, #64	; 0x40
 800ab80:	d10e      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8c:	2b40      	cmp	r3, #64	; 0x40
 800ab8e:	d107      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f9b7 	bl	800af0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d10e      	bne.n	800abcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b20      	cmp	r3, #32
 800abba:	d107      	bne.n	800abcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0220 	mvn.w	r2, #32
 800abc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fd79 	bl	800b6be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800abea:	2302      	movs	r3, #2
 800abec:	e0ac      	b.n	800ad48 <HAL_TIM_PWM_ConfigChannel+0x174>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b0c      	cmp	r3, #12
 800abfa:	f200 809f 	bhi.w	800ad3c <HAL_TIM_PWM_ConfigChannel+0x168>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac39 	.word	0x0800ac39
 800ac08:	0800ad3d 	.word	0x0800ad3d
 800ac0c:	0800ad3d 	.word	0x0800ad3d
 800ac10:	0800ad3d 	.word	0x0800ad3d
 800ac14:	0800ac79 	.word	0x0800ac79
 800ac18:	0800ad3d 	.word	0x0800ad3d
 800ac1c:	0800ad3d 	.word	0x0800ad3d
 800ac20:	0800ad3d 	.word	0x0800ad3d
 800ac24:	0800acbb 	.word	0x0800acbb
 800ac28:	0800ad3d 	.word	0x0800ad3d
 800ac2c:	0800ad3d 	.word	0x0800ad3d
 800ac30:	0800ad3d 	.word	0x0800ad3d
 800ac34:	0800acfb 	.word	0x0800acfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68b9      	ldr	r1, [r7, #8]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fa0c 	bl	800b05c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	699a      	ldr	r2, [r3, #24]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f042 0208 	orr.w	r2, r2, #8
 800ac52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	699a      	ldr	r2, [r3, #24]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0204 	bic.w	r2, r2, #4
 800ac62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6999      	ldr	r1, [r3, #24]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	619a      	str	r2, [r3, #24]
      break;
 800ac76:	e062      	b.n	800ad3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fa5c 	bl	800b13c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6999      	ldr	r1, [r3, #24]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	021a      	lsls	r2, r3, #8
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	619a      	str	r2, [r3, #24]
      break;
 800acb8:	e041      	b.n	800ad3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 faaf 	bl	800b224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69da      	ldr	r2, [r3, #28]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0208 	orr.w	r2, r2, #8
 800acd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	69da      	ldr	r2, [r3, #28]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f022 0204 	bic.w	r2, r2, #4
 800ace4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	69d9      	ldr	r1, [r3, #28]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	691a      	ldr	r2, [r3, #16]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	430a      	orrs	r2, r1
 800acf6:	61da      	str	r2, [r3, #28]
      break;
 800acf8:	e021      	b.n	800ad3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68b9      	ldr	r1, [r7, #8]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fb03 	bl	800b30c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69da      	ldr	r2, [r3, #28]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69da      	ldr	r2, [r3, #28]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	69d9      	ldr	r1, [r3, #28]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	021a      	lsls	r2, r3, #8
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	61da      	str	r2, [r3, #28]
      break;
 800ad3a:	e000      	b.n	800ad3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ad3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_TIM_ConfigClockSource+0x18>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e0b3      	b.n	800aed0 <HAL_TIM_ConfigClockSource+0x180>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ada0:	d03e      	beq.n	800ae20 <HAL_TIM_ConfigClockSource+0xd0>
 800ada2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ada6:	f200 8087 	bhi.w	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adae:	f000 8085 	beq.w	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb6:	d87f      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800adb8:	2b70      	cmp	r3, #112	; 0x70
 800adba:	d01a      	beq.n	800adf2 <HAL_TIM_ConfigClockSource+0xa2>
 800adbc:	2b70      	cmp	r3, #112	; 0x70
 800adbe:	d87b      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800adc0:	2b60      	cmp	r3, #96	; 0x60
 800adc2:	d050      	beq.n	800ae66 <HAL_TIM_ConfigClockSource+0x116>
 800adc4:	2b60      	cmp	r3, #96	; 0x60
 800adc6:	d877      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800adc8:	2b50      	cmp	r3, #80	; 0x50
 800adca:	d03c      	beq.n	800ae46 <HAL_TIM_ConfigClockSource+0xf6>
 800adcc:	2b50      	cmp	r3, #80	; 0x50
 800adce:	d873      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800add0:	2b40      	cmp	r3, #64	; 0x40
 800add2:	d058      	beq.n	800ae86 <HAL_TIM_ConfigClockSource+0x136>
 800add4:	2b40      	cmp	r3, #64	; 0x40
 800add6:	d86f      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800add8:	2b30      	cmp	r3, #48	; 0x30
 800adda:	d064      	beq.n	800aea6 <HAL_TIM_ConfigClockSource+0x156>
 800addc:	2b30      	cmp	r3, #48	; 0x30
 800adde:	d86b      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d060      	beq.n	800aea6 <HAL_TIM_ConfigClockSource+0x156>
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d867      	bhi.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d05c      	beq.n	800aea6 <HAL_TIM_ConfigClockSource+0x156>
 800adec:	2b10      	cmp	r3, #16
 800adee:	d05a      	beq.n	800aea6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800adf0:	e062      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	6899      	ldr	r1, [r3, #8]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	f000 fb4e 	bl	800b4a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	609a      	str	r2, [r3, #8]
      break;
 800ae1e:	e04e      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	6899      	ldr	r1, [r3, #8]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f000 fb37 	bl	800b4a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	689a      	ldr	r2, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae42:	609a      	str	r2, [r3, #8]
      break;
 800ae44:	e03b      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	6859      	ldr	r1, [r3, #4]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	461a      	mov	r2, r3
 800ae54:	f000 faae 	bl	800b3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2150      	movs	r1, #80	; 0x50
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 fb05 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800ae64:	e02b      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	6859      	ldr	r1, [r3, #4]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f000 facc 	bl	800b410 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2160      	movs	r1, #96	; 0x60
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 faf5 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800ae84:	e01b      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	6859      	ldr	r1, [r3, #4]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	461a      	mov	r2, r3
 800ae94:	f000 fa8e 	bl	800b3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2140      	movs	r1, #64	; 0x40
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fae5 	bl	800b46e <TIM_ITRx_SetConfig>
      break;
 800aea4:	e00b      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f000 fadc 	bl	800b46e <TIM_ITRx_SetConfig>
        break;
 800aeb6:	e002      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aeb8:	bf00      	nop
 800aeba:	e000      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bc80      	pop	{r7}
 800aee8:	4770      	bx	lr

0800aeea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr

0800aefc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	bc80      	pop	{r7}
 800af0c:	4770      	bx	lr

0800af0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr

0800af20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a3f      	ldr	r2, [pc, #252]	; (800b030 <TIM_Base_SetConfig+0x110>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d013      	beq.n	800af60 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af3e:	d00f      	beq.n	800af60 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a3c      	ldr	r2, [pc, #240]	; (800b034 <TIM_Base_SetConfig+0x114>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00b      	beq.n	800af60 <TIM_Base_SetConfig+0x40>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a3b      	ldr	r2, [pc, #236]	; (800b038 <TIM_Base_SetConfig+0x118>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d007      	beq.n	800af60 <TIM_Base_SetConfig+0x40>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a3a      	ldr	r2, [pc, #232]	; (800b03c <TIM_Base_SetConfig+0x11c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_Base_SetConfig+0x40>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a39      	ldr	r2, [pc, #228]	; (800b040 <TIM_Base_SetConfig+0x120>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d108      	bne.n	800af72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a2e      	ldr	r2, [pc, #184]	; (800b030 <TIM_Base_SetConfig+0x110>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d02b      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af80:	d027      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a2b      	ldr	r2, [pc, #172]	; (800b034 <TIM_Base_SetConfig+0x114>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d023      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a2a      	ldr	r2, [pc, #168]	; (800b038 <TIM_Base_SetConfig+0x118>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d01f      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a29      	ldr	r2, [pc, #164]	; (800b03c <TIM_Base_SetConfig+0x11c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d01b      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a28      	ldr	r2, [pc, #160]	; (800b040 <TIM_Base_SetConfig+0x120>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d017      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a27      	ldr	r2, [pc, #156]	; (800b044 <TIM_Base_SetConfig+0x124>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d013      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a26      	ldr	r2, [pc, #152]	; (800b048 <TIM_Base_SetConfig+0x128>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00f      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a25      	ldr	r2, [pc, #148]	; (800b04c <TIM_Base_SetConfig+0x12c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00b      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a24      	ldr	r2, [pc, #144]	; (800b050 <TIM_Base_SetConfig+0x130>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d007      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a23      	ldr	r2, [pc, #140]	; (800b054 <TIM_Base_SetConfig+0x134>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d003      	beq.n	800afd2 <TIM_Base_SetConfig+0xb2>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a22      	ldr	r2, [pc, #136]	; (800b058 <TIM_Base_SetConfig+0x138>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d108      	bne.n	800afe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a09      	ldr	r2, [pc, #36]	; (800b030 <TIM_Base_SetConfig+0x110>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d003      	beq.n	800b018 <TIM_Base_SetConfig+0xf8>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a0b      	ldr	r2, [pc, #44]	; (800b040 <TIM_Base_SetConfig+0x120>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d103      	bne.n	800b020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	615a      	str	r2, [r3, #20]
}
 800b026:	bf00      	nop
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bc80      	pop	{r7}
 800b02e:	4770      	bx	lr
 800b030:	40010000 	.word	0x40010000
 800b034:	40000400 	.word	0x40000400
 800b038:	40000800 	.word	0x40000800
 800b03c:	40000c00 	.word	0x40000c00
 800b040:	40010400 	.word	0x40010400
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800
 800b050:	40001800 	.word	0x40001800
 800b054:	40001c00 	.word	0x40001c00
 800b058:	40002000 	.word	0x40002000

0800b05c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f023 0201 	bic.w	r2, r3, #1
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0303 	bic.w	r3, r3, #3
 800b092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f023 0302 	bic.w	r3, r3, #2
 800b0a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a20      	ldr	r2, [pc, #128]	; (800b134 <TIM_OC1_SetConfig+0xd8>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d003      	beq.n	800b0c0 <TIM_OC1_SetConfig+0x64>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a1f      	ldr	r2, [pc, #124]	; (800b138 <TIM_OC1_SetConfig+0xdc>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d10c      	bne.n	800b0da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f023 0308 	bic.w	r3, r3, #8
 800b0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f023 0304 	bic.w	r3, r3, #4
 800b0d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a15      	ldr	r2, [pc, #84]	; (800b134 <TIM_OC1_SetConfig+0xd8>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d003      	beq.n	800b0ea <TIM_OC1_SetConfig+0x8e>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a14      	ldr	r2, [pc, #80]	; (800b138 <TIM_OC1_SetConfig+0xdc>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d111      	bne.n	800b10e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	4313      	orrs	r3, r2
 800b102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	621a      	str	r2, [r3, #32]
}
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bc80      	pop	{r7}
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	40010000 	.word	0x40010000
 800b138:	40010400 	.word	0x40010400

0800b13c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	f023 0210 	bic.w	r2, r3, #16
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	021b      	lsls	r3, r3, #8
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f023 0320 	bic.w	r3, r3, #32
 800b186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4313      	orrs	r3, r2
 800b192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a21      	ldr	r2, [pc, #132]	; (800b21c <TIM_OC2_SetConfig+0xe0>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d003      	beq.n	800b1a4 <TIM_OC2_SetConfig+0x68>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a20      	ldr	r2, [pc, #128]	; (800b220 <TIM_OC2_SetConfig+0xe4>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d10d      	bne.n	800b1c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a16      	ldr	r2, [pc, #88]	; (800b21c <TIM_OC2_SetConfig+0xe0>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d003      	beq.n	800b1d0 <TIM_OC2_SetConfig+0x94>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a15      	ldr	r2, [pc, #84]	; (800b220 <TIM_OC2_SetConfig+0xe4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d113      	bne.n	800b1f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	621a      	str	r2, [r3, #32]
}
 800b212:	bf00      	nop
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr
 800b21c:	40010000 	.word	0x40010000
 800b220:	40010400 	.word	0x40010400

0800b224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0303 	bic.w	r3, r3, #3
 800b25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	4313      	orrs	r3, r2
 800b278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a21      	ldr	r2, [pc, #132]	; (800b304 <TIM_OC3_SetConfig+0xe0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d003      	beq.n	800b28a <TIM_OC3_SetConfig+0x66>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a20      	ldr	r2, [pc, #128]	; (800b308 <TIM_OC3_SetConfig+0xe4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d10d      	bne.n	800b2a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a16      	ldr	r2, [pc, #88]	; (800b304 <TIM_OC3_SetConfig+0xe0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d003      	beq.n	800b2b6 <TIM_OC3_SetConfig+0x92>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a15      	ldr	r2, [pc, #84]	; (800b308 <TIM_OC3_SetConfig+0xe4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d113      	bne.n	800b2de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	621a      	str	r2, [r3, #32]
}
 800b2f8:	bf00      	nop
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bc80      	pop	{r7}
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	40010000 	.word	0x40010000
 800b308:	40010400 	.word	0x40010400

0800b30c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	021b      	lsls	r3, r3, #8
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	031b      	lsls	r3, r3, #12
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a11      	ldr	r2, [pc, #68]	; (800b3ac <TIM_OC4_SetConfig+0xa0>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_OC4_SetConfig+0x68>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a10      	ldr	r2, [pc, #64]	; (800b3b0 <TIM_OC4_SetConfig+0xa4>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d109      	bne.n	800b388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b37a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	019b      	lsls	r3, r3, #6
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4313      	orrs	r3, r2
 800b386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	621a      	str	r2, [r3, #32]
}
 800b3a2:	bf00      	nop
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bc80      	pop	{r7}
 800b3aa:	4770      	bx	lr
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40010400 	.word	0x40010400

0800b3b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	f023 0201 	bic.w	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f023 030a 	bic.w	r3, r3, #10
 800b3f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	621a      	str	r2, [r3, #32]
}
 800b406:	bf00      	nop
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bc80      	pop	{r7}
 800b40e:	4770      	bx	lr

0800b410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	f023 0210 	bic.w	r2, r3, #16
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b43a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	031b      	lsls	r3, r3, #12
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	4313      	orrs	r3, r2
 800b444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b44c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	621a      	str	r2, [r3, #32]
}
 800b464:	bf00      	nop
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr

0800b46e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	f043 0307 	orr.w	r3, r3, #7
 800b490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	609a      	str	r2, [r3, #8]
}
 800b498:	bf00      	nop
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bc80      	pop	{r7}
 800b4a0:	4770      	bx	lr

0800b4a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
 800b4ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	021a      	lsls	r2, r3, #8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	609a      	str	r2, [r3, #8]
}
 800b4d6:	bf00      	nop
 800b4d8:	371c      	adds	r7, #28
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bc80      	pop	{r7}
 800b4de:	4770      	bx	lr

0800b4e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f003 031f 	and.w	r3, r3, #31
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a1a      	ldr	r2, [r3, #32]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	43db      	mvns	r3, r3
 800b502:	401a      	ands	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6a1a      	ldr	r2, [r3, #32]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f003 031f 	and.w	r3, r3, #31
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	fa01 f303 	lsl.w	r3, r1, r3
 800b518:	431a      	orrs	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	621a      	str	r2, [r3, #32]
}
 800b51e:	bf00      	nop
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr

0800b528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d101      	bne.n	800b540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b53c:	2302      	movs	r3, #2
 800b53e:	e05a      	b.n	800b5f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2202      	movs	r2, #2
 800b54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a20      	ldr	r2, [pc, #128]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d022      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58c:	d01d      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d018      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a1a      	ldr	r2, [pc, #104]	; (800b608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d013      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a19      	ldr	r2, [pc, #100]	; (800b60c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d00e      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a17      	ldr	r2, [pc, #92]	; (800b610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d009      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a16      	ldr	r2, [pc, #88]	; (800b614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d004      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a14      	ldr	r2, [pc, #80]	; (800b618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d10c      	bne.n	800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr
 800b600:	40010000 	.word	0x40010000
 800b604:	40000400 	.word	0x40000400
 800b608:	40000800 	.word	0x40000800
 800b60c:	40000c00 	.word	0x40000c00
 800b610:	40010400 	.word	0x40010400
 800b614:	40014000 	.word	0x40014000
 800b618:	40001800 	.word	0x40001800

0800b61c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b634:	2302      	movs	r3, #2
 800b636:	e03d      	b.n	800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr

0800b6be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bc80      	pop	{r7}
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr

0800b6e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	f107 001c 	add.w	r0, r7, #28
 800b6f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d122      	bne.n	800b740 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b70e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b724:	2b01      	cmp	r3, #1
 800b726:	d105      	bne.n	800b734 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f98f 	bl	800ba58 <USB_CoreReset>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]
 800b73e:	e010      	b.n	800b762 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f983 	bl	800ba58 <USB_CoreReset>
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	2b01      	cmp	r3, #1
 800b766:	d10b      	bne.n	800b780 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f043 0206 	orr.w	r2, r3, #6
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f043 0220 	orr.w	r2, r3, #32
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b78c:	b004      	add	sp, #16
 800b78e:	4770      	bx	lr

0800b790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f043 0201 	orr.w	r2, r3, #1
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bc80      	pop	{r7}
 800b7ae:	4770      	bx	lr

0800b7b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f023 0201 	bic.w	r2, r3, #1
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bc80      	pop	{r7}
 800b7ce:	4770      	bx	lr

0800b7d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b7ec:	78fb      	ldrb	r3, [r7, #3]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d115      	bne.n	800b81e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7fe:	2001      	movs	r0, #1
 800b800:	f7fa fc2a 	bl	8006058 <HAL_Delay>
      ms++;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3301      	adds	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f916 	bl	800ba3c <USB_GetMode>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d01e      	beq.n	800b854 <USB_SetCurrentMode+0x84>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b31      	cmp	r3, #49	; 0x31
 800b81a:	d9f0      	bls.n	800b7fe <USB_SetCurrentMode+0x2e>
 800b81c:	e01a      	b.n	800b854 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d115      	bne.n	800b850 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b830:	2001      	movs	r0, #1
 800b832:	f7fa fc11 	bl	8006058 <HAL_Delay>
      ms++;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3301      	adds	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f8fd 	bl	800ba3c <USB_GetMode>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <USB_SetCurrentMode+0x84>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b31      	cmp	r3, #49	; 0x31
 800b84c:	d9f0      	bls.n	800b830 <USB_SetCurrentMode+0x60>
 800b84e:	e001      	b.n	800b854 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e005      	b.n	800b860 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b32      	cmp	r3, #50	; 0x32
 800b858:	d101      	bne.n	800b85e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	019b      	lsls	r3, r3, #6
 800b87a:	f043 0220 	orr.w	r2, r3, #32
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3301      	adds	r3, #1
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a08      	ldr	r2, [pc, #32]	; (800b8ac <USB_FlushTxFifo+0x44>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d901      	bls.n	800b894 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b890:	2303      	movs	r3, #3
 800b892:	e006      	b.n	800b8a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d0f0      	beq.n	800b882 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bc80      	pop	{r7}
 800b8aa:	4770      	bx	lr
 800b8ac:	00030d40 	.word	0x00030d40

0800b8b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2210      	movs	r2, #16
 800b8c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4a08      	ldr	r2, [pc, #32]	; (800b8ec <USB_FlushRxFifo+0x3c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d901      	bls.n	800b8d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e006      	b.n	800b8e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	f003 0310 	and.w	r3, r3, #16
 800b8dc:	2b10      	cmp	r3, #16
 800b8de:	d0f0      	beq.n	800b8c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bc80      	pop	{r7}
 800b8ea:	4770      	bx	lr
 800b8ec:	00030d40 	.word	0x00030d40

0800b8f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b089      	sub	sp, #36	; 0x24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	460b      	mov	r3, r1
 800b900:	71fb      	strb	r3, [r7, #7]
 800b902:	4613      	mov	r3, r2
 800b904:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b90e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	d123      	bne.n	800b95e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b916:	88bb      	ldrh	r3, [r7, #4]
 800b918:	3303      	adds	r3, #3
 800b91a:	089b      	lsrs	r3, r3, #2
 800b91c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b91e:	2300      	movs	r3, #0
 800b920:	61bb      	str	r3, [r7, #24]
 800b922:	e018      	b.n	800b956 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	031a      	lsls	r2, r3, #12
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b930:	461a      	mov	r2, r3
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	3301      	adds	r3, #1
 800b93c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	3301      	adds	r3, #1
 800b942:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3301      	adds	r3, #1
 800b948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	3301      	adds	r3, #1
 800b94e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	3301      	adds	r3, #1
 800b954:	61bb      	str	r3, [r7, #24]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d3e2      	bcc.n	800b924 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3724      	adds	r7, #36	; 0x24
 800b964:	46bd      	mov	sp, r7
 800b966:	bc80      	pop	{r7}
 800b968:	4770      	bx	lr

0800b96a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b96a:	b480      	push	{r7}
 800b96c:	b08b      	sub	sp, #44	; 0x2c
 800b96e:	af00      	add	r7, sp, #0
 800b970:	60f8      	str	r0, [r7, #12]
 800b972:	60b9      	str	r1, [r7, #8]
 800b974:	4613      	mov	r3, r2
 800b976:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	089b      	lsrs	r3, r3, #2
 800b984:	b29b      	uxth	r3, r3
 800b986:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b988:	88fb      	ldrh	r3, [r7, #6]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b990:	2300      	movs	r3, #0
 800b992:	623b      	str	r3, [r7, #32]
 800b994:	e014      	b.n	800b9c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	623b      	str	r3, [r7, #32]
 800b9c0:	6a3a      	ldr	r2, [r7, #32]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d3e6      	bcc.n	800b996 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b9c8:	8bfb      	ldrh	r3, [r7, #30]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d01e      	beq.n	800ba0c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f107 0310 	add.w	r3, r7, #16
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	701a      	strb	r2, [r3, #0]
      i++;
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	623b      	str	r3, [r7, #32]
      pDest++;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ba00:	8bfb      	ldrh	r3, [r7, #30]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba06:	8bfb      	ldrh	r3, [r7, #30]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1ea      	bne.n	800b9e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	372c      	adds	r7, #44	; 0x2c
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bc80      	pop	{r7}
 800ba16:	4770      	bx	lr

0800ba18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba30:	68fb      	ldr	r3, [r7, #12]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bc80      	pop	{r7}
 800ba3a:	4770      	bx	lr

0800ba3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	f003 0301 	and.w	r3, r3, #1
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr
	...

0800ba58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3301      	adds	r3, #1
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4a12      	ldr	r2, [pc, #72]	; (800bab8 <USB_CoreReset+0x60>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d901      	bls.n	800ba76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e01b      	b.n	800baae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	daf2      	bge.n	800ba64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	f043 0201 	orr.w	r2, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <USB_CoreReset+0x60>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d901      	bls.n	800baa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e006      	b.n	800baae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d0f0      	beq.n	800ba8e <USB_CoreReset+0x36>

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc80      	pop	{r7}
 800bab6:	4770      	bx	lr
 800bab8:	00030d40 	.word	0x00030d40

0800babc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800babc:	b084      	sub	sp, #16
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	f107 001c 	add.w	r0, r7, #28
 800baca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bad8:	461a      	mov	r2, r3
 800bada:	2300      	movs	r3, #0
 800badc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d018      	beq.n	800bb40 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d10a      	bne.n	800bb2a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb22:	f043 0304 	orr.w	r3, r3, #4
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	e014      	b.n	800bb54 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb38:	f023 0304 	bic.w	r3, r3, #4
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	e009      	b.n	800bb54 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb4e:	f023 0304 	bic.w	r3, r3, #4
 800bb52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bb54:	2110      	movs	r1, #16
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff fe86 	bl	800b868 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fea7 	bl	800b8b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bb62:	2300      	movs	r3, #0
 800bb64:	60fb      	str	r3, [r7, #12]
 800bb66:	e015      	b.n	800bb94 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb74:	461a      	mov	r2, r3
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	015a      	lsls	r2, r3, #5
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb88:	461a      	mov	r2, r3
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d3e5      	bcc.n	800bb68 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f04f 32ff 	mov.w	r2, #4294967295
 800bba8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00b      	beq.n	800bbce <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbbc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a13      	ldr	r2, [pc, #76]	; (800bc10 <USB_HostInit+0x154>)
 800bbc2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a13      	ldr	r2, [pc, #76]	; (800bc14 <USB_HostInit+0x158>)
 800bbc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bbcc:	e009      	b.n	800bbe2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2280      	movs	r2, #128	; 0x80
 800bbd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a10      	ldr	r2, [pc, #64]	; (800bc18 <USB_HostInit+0x15c>)
 800bbd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a0f      	ldr	r2, [pc, #60]	; (800bc1c <USB_HostInit+0x160>)
 800bbde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d105      	bne.n	800bbf4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	f043 0210 	orr.w	r2, r3, #16
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	699a      	ldr	r2, [r3, #24]
 800bbf8:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <USB_HostInit+0x164>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc0c:	b004      	add	sp, #16
 800bc0e:	4770      	bx	lr
 800bc10:	01000200 	.word	0x01000200
 800bc14:	00e00300 	.word	0x00e00300
 800bc18:	00600080 	.word	0x00600080
 800bc1c:	004000e0 	.word	0x004000e0
 800bc20:	a3200008 	.word	0xa3200008

0800bc24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	78fb      	ldrb	r3, [r7, #3]
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d107      	bne.n	800bc76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bc72:	6053      	str	r3, [r2, #4]
 800bc74:	e009      	b.n	800bc8a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d106      	bne.n	800bc8a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc82:	461a      	mov	r2, r3
 800bc84:	f241 7370 	movw	r3, #6000	; 0x1770
 800bc88:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr

0800bc96 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bcb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bcc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bcc6:	2064      	movs	r0, #100	; 0x64
 800bcc8:	f7fa f9c6 	bl	8006058 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bcd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcd8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bcda:	200a      	movs	r0, #10
 800bcdc:	f7fa f9bc 	bl	8006058 <HAL_Delay>

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bd0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <USB_DriveVbus+0x44>
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d106      	bne.n	800bd2e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bd28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd2c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd38:	d109      	bne.n	800bd4e <USB_DriveVbus+0x64>
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bd48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd4c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bc80      	pop	{r7}
 800bd58:	4770      	bx	lr

0800bd5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	0c5b      	lsrs	r3, r3, #17
 800bd78:	f003 0303 	and.w	r3, r3, #3
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr

0800bd86 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b085      	sub	sp, #20
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	b29b      	uxth	r3, r3
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bc80      	pop	{r7}
 800bda4:	4770      	bx	lr
	...

0800bda8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	70fb      	strb	r3, [r7, #3]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70bb      	strb	r3, [r7, #2]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bdca:	78fb      	ldrb	r3, [r7, #3]
 800bdcc:	015a      	lsls	r2, r3, #5
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bddc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bdde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d87e      	bhi.n	800bee4 <USB_HC_Init+0x13c>
 800bde6:	a201      	add	r2, pc, #4	; (adr r2, 800bdec <USB_HC_Init+0x44>)
 800bde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800bea7 	.word	0x0800bea7
 800bdf4:	0800bdfd 	.word	0x0800bdfd
 800bdf8:	0800be69 	.word	0x0800be69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bdfc:	78fb      	ldrb	r3, [r7, #3]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	4413      	add	r3, r2
 800be04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be08:	461a      	mov	r2, r3
 800be0a:	f240 439d 	movw	r3, #1181	; 0x49d
 800be0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800be10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be14:	2b00      	cmp	r3, #0
 800be16:	da10      	bge.n	800be3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	015a      	lsls	r2, r3, #5
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	4413      	add	r3, r2
 800be20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	0151      	lsls	r1, r2, #5
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	440a      	add	r2, r1
 800be2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be36:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800be38:	e057      	b.n	800beea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be42:	2b00      	cmp	r3, #0
 800be44:	d051      	beq.n	800beea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800be46:	78fb      	ldrb	r3, [r7, #3]
 800be48:	015a      	lsls	r2, r3, #5
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	78fa      	ldrb	r2, [r7, #3]
 800be56:	0151      	lsls	r1, r2, #5
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	440a      	add	r2, r1
 800be5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800be64:	60d3      	str	r3, [r2, #12]
      break;
 800be66:	e040      	b.n	800beea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800be68:	78fb      	ldrb	r3, [r7, #3]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be74:	461a      	mov	r2, r3
 800be76:	f240 639d 	movw	r3, #1693	; 0x69d
 800be7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800be7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be80:	2b00      	cmp	r3, #0
 800be82:	da34      	bge.n	800beee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	0151      	lsls	r1, r2, #5
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	440a      	add	r2, r1
 800be9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bea2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bea4:	e023      	b.n	800beee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	015a      	lsls	r2, r3, #5
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	4413      	add	r3, r2
 800beae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb2:	461a      	mov	r2, r3
 800beb4:	f240 2325 	movw	r3, #549	; 0x225
 800beb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800beba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da17      	bge.n	800bef2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bedc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bee0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bee2:	e006      	b.n	800bef2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	77fb      	strb	r3, [r7, #31]
      break;
 800bee8:	e004      	b.n	800bef4 <USB_HC_Init+0x14c>
      break;
 800beea:	bf00      	nop
 800beec:	e002      	b.n	800bef4 <USB_HC_Init+0x14c>
      break;
 800beee:	bf00      	nop
 800bef0:	e000      	b.n	800bef4 <USB_HC_Init+0x14c>
      break;
 800bef2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	f003 030f 	and.w	r3, r3, #15
 800bf02:	2101      	movs	r1, #1
 800bf04:	fa01 f303 	lsl.w	r3, r1, r3
 800bf08:	6939      	ldr	r1, [r7, #16]
 800bf0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bf1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	da03      	bge.n	800bf2e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bf26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf2a:	61bb      	str	r3, [r7, #24]
 800bf2c:	e001      	b.n	800bf32 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff ff11 	bl	800bd5a <USB_GetHostSpeed>
 800bf38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800bf3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d106      	bne.n	800bf50 <USB_HC_Init+0x1a8>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d003      	beq.n	800bf50 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bf48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf4c:	617b      	str	r3, [r7, #20]
 800bf4e:	e001      	b.n	800bf54 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf54:	787b      	ldrb	r3, [r7, #1]
 800bf56:	059b      	lsls	r3, r3, #22
 800bf58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bf5c:	78bb      	ldrb	r3, [r7, #2]
 800bf5e:	02db      	lsls	r3, r3, #11
 800bf60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bf66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bf6a:	049b      	lsls	r3, r3, #18
 800bf6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bf70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bf74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bf78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	0159      	lsls	r1, r3, #5
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	440b      	add	r3, r1
 800bf86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf90:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bf92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d10f      	bne.n	800bfba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bf9a:	78fb      	ldrb	r3, [r7, #3]
 800bf9c:	015a      	lsls	r2, r3, #5
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	78fa      	ldrb	r2, [r7, #3]
 800bfaa:	0151      	lsls	r1, r2, #5
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	440a      	add	r2, r1
 800bfb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bfba:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08c      	sub	sp, #48	; 0x30
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	785b      	ldrb	r3, [r3, #1]
 800bfda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bfdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d02d      	beq.n	800c04a <USB_HC_StartXfer+0x86>
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	791b      	ldrb	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d129      	bne.n	800c04a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d117      	bne.n	800c02c <USB_HC_StartXfer+0x68>
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	79db      	ldrb	r3, [r3, #7]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <USB_HC_StartXfer+0x48>
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	79db      	ldrb	r3, [r3, #7]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d10f      	bne.n	800c02c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	4413      	add	r3, r2
 800c014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	0151      	lsls	r1, r2, #5
 800c01e:	6a3a      	ldr	r2, [r7, #32]
 800c020:	440a      	add	r2, r1
 800c022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10b      	bne.n	800c04a <USB_HC_StartXfer+0x86>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	795b      	ldrb	r3, [r3, #5]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d107      	bne.n	800c04a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	4619      	mov	r1, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 fa2d 	bl	800c4a0 <USB_DoPing>
      return HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	e0f8      	b.n	800c23c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d018      	beq.n	800c084 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	8912      	ldrh	r2, [r2, #8]
 800c05a:	4413      	add	r3, r2
 800c05c:	3b01      	subs	r3, #1
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	8912      	ldrh	r2, [r2, #8]
 800c062:	fbb3 f3f2 	udiv	r3, r3, r2
 800c066:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c06a:	8b7b      	ldrh	r3, [r7, #26]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d90b      	bls.n	800c088 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c070:	8b7b      	ldrh	r3, [r7, #26]
 800c072:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	8912      	ldrh	r2, [r2, #8]
 800c07a:	fb02 f203 	mul.w	r2, r2, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	611a      	str	r2, [r3, #16]
 800c082:	e001      	b.n	800c088 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c084:	2301      	movs	r3, #1
 800c086:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	78db      	ldrb	r3, [r3, #3]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	8912      	ldrh	r2, [r2, #8]
 800c096:	fb02 f203 	mul.w	r2, r2, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	611a      	str	r2, [r3, #16]
 800c09e:	e003      	b.n	800c0a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	695a      	ldr	r2, [r3, #20]
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c0b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0b2:	04d9      	lsls	r1, r3, #19
 800c0b4:	4b63      	ldr	r3, [pc, #396]	; (800c244 <USB_HC_StartXfer+0x280>)
 800c0b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c0b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	7a9b      	ldrb	r3, [r3, #10]
 800c0be:	075b      	lsls	r3, r3, #29
 800c0c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c0c4:	69f9      	ldr	r1, [r7, #28]
 800c0c6:	0148      	lsls	r0, r1, #5
 800c0c8:	6a39      	ldr	r1, [r7, #32]
 800c0ca:	4401      	add	r1, r0
 800c0cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c0d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c0d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	68d9      	ldr	r1, [r3, #12]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	015a      	lsls	r2, r3, #5
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ea:	460a      	mov	r2, r1
 800c0ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c0ee:	6a3b      	ldr	r3, [r7, #32]
 800c0f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bf0c      	ite	eq
 800c0fe:	2301      	moveq	r3, #1
 800c100:	2300      	movne	r3, #0
 800c102:	b2db      	uxtb	r3, r3
 800c104:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69fa      	ldr	r2, [r7, #28]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	6a3a      	ldr	r2, [r7, #32]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c120:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c124:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	7e7b      	ldrb	r3, [r7, #25]
 800c136:	075b      	lsls	r3, r3, #29
 800c138:	69f9      	ldr	r1, [r7, #28]
 800c13a:	0148      	lsls	r0, r1, #5
 800c13c:	6a39      	ldr	r1, [r7, #32]
 800c13e:	4401      	add	r1, r0
 800c140:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c144:	4313      	orrs	r3, r2
 800c146:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c15e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	78db      	ldrb	r3, [r3, #3]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	e003      	b.n	800c17a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c178:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c180:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	015a      	lsls	r2, r3, #5
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	4413      	add	r3, r2
 800c18a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c18e:	461a      	mov	r2, r3
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c194:	79fb      	ldrb	r3, [r7, #7]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	e04e      	b.n	800c23c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	78db      	ldrb	r3, [r3, #3]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d149      	bne.n	800c23a <USB_HC_StartXfer+0x276>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d045      	beq.n	800c23a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	79db      	ldrb	r3, [r3, #7]
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	d830      	bhi.n	800c218 <USB_HC_StartXfer+0x254>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <USB_HC_StartXfer+0x1f8>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1cd 	.word	0x0800c1cd
 800c1c0:	0800c1f1 	.word	0x0800c1f1
 800c1c4:	0800c1cd 	.word	0x0800c1cd
 800c1c8:	0800c1f1 	.word	0x0800c1f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	089b      	lsrs	r3, r3, #2
 800c1d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c1d6:	8afa      	ldrh	r2, [r7, #22]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d91c      	bls.n	800c21c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	f043 0220 	orr.w	r2, r3, #32
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800c1ee:	e015      	b.n	800c21c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	3303      	adds	r3, #3
 800c1f6:	089b      	lsrs	r3, r3, #2
 800c1f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c1fa:	8afa      	ldrh	r2, [r7, #22]
 800c1fc:	6a3b      	ldr	r3, [r7, #32]
 800c1fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	b29b      	uxth	r3, r3
 800c206:	429a      	cmp	r2, r3
 800c208:	d90a      	bls.n	800c220 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	619a      	str	r2, [r3, #24]
        }
        break;
 800c216:	e003      	b.n	800c220 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c218:	bf00      	nop
 800c21a:	e002      	b.n	800c222 <USB_HC_StartXfer+0x25e>
        break;
 800c21c:	bf00      	nop
 800c21e:	e000      	b.n	800c222 <USB_HC_StartXfer+0x25e>
        break;
 800c220:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	68d9      	ldr	r1, [r3, #12]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	785a      	ldrb	r2, [r3, #1]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2000      	movs	r0, #0
 800c232:	9000      	str	r0, [sp, #0]
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f7ff fb5b 	bl	800b8f0 <USB_WritePacket>
  }

  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3728      	adds	r7, #40	; 0x28
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	1ff80000 	.word	0x1ff80000

0800c248 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	b29b      	uxth	r3, r3
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	bc80      	pop	{r7}
 800c266:	4770      	bx	lr

0800c268 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c268:	b480      	push	{r7}
 800c26a:	b089      	sub	sp, #36	; 0x24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c278:	78fb      	ldrb	r3, [r7, #3]
 800c27a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	4413      	add	r3, r2
 800c288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	0c9b      	lsrs	r3, r3, #18
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	0fdb      	lsrs	r3, r3, #31
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f003 0320 	and.w	r3, r3, #32
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	d104      	bne.n	800c2c2 <USB_HC_Halt+0x5a>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e0e8      	b.n	800c494 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <USB_HC_Halt+0x66>
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d173      	bne.n	800c3b6 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	0151      	lsls	r1, r2, #5
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	440a      	add	r2, r1
 800c2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2ec:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f003 0320 	and.w	r3, r3, #32
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f040 80cb 	bne.w	800c492 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d143      	bne.n	800c390 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	0151      	lsls	r1, r2, #5
 800c31a:	69ba      	ldr	r2, [r7, #24]
 800c31c:	440a      	add	r2, r1
 800c31e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c326:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	015a      	lsls	r2, r3, #5
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	0151      	lsls	r1, r2, #5
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	440a      	add	r2, r1
 800c33e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c346:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	0151      	lsls	r1, r2, #5
 800c35a:	69ba      	ldr	r2, [r7, #24]
 800c35c:	440a      	add	r2, r1
 800c35e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c366:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3301      	adds	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c374:	d81d      	bhi.n	800c3b2 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c38c:	d0ec      	beq.n	800c368 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c38e:	e080      	b.n	800c492 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	015a      	lsls	r2, r3, #5
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	4413      	add	r3, r2
 800c398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	0151      	lsls	r1, r2, #5
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	440a      	add	r2, r1
 800c3a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3ae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c3b0:	e06f      	b.n	800c492 <USB_HC_Halt+0x22a>
            break;
 800c3b2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c3b4:	e06d      	b.n	800c492 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	0151      	lsls	r1, r2, #5
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	440a      	add	r2, r1
 800c3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d143      	bne.n	800c46e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	0151      	lsls	r1, r2, #5
 800c3f8:	69ba      	ldr	r2, [r7, #24]
 800c3fa:	440a      	add	r2, r1
 800c3fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c404:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	0151      	lsls	r1, r2, #5
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	440a      	add	r2, r1
 800c41c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c424:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	0151      	lsls	r1, r2, #5
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	440a      	add	r2, r1
 800c43c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c444:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	3301      	adds	r3, #1
 800c44a:	61fb      	str	r3, [r7, #28]
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c452:	d81d      	bhi.n	800c490 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c46a:	d0ec      	beq.n	800c446 <USB_HC_Halt+0x1de>
 800c46c:	e011      	b.n	800c492 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	015a      	lsls	r2, r3, #5
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	4413      	add	r3, r2
 800c476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	0151      	lsls	r1, r2, #5
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	440a      	add	r2, r1
 800c484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c48c:	6013      	str	r3, [r2, #0]
 800c48e:	e000      	b.n	800c492 <USB_HC_Halt+0x22a>
          break;
 800c490:	bf00      	nop
    }
  }

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3724      	adds	r7, #36	; 0x24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr
	...

0800c4a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	04da      	lsls	r2, r3, #19
 800c4bc:	4b14      	ldr	r3, [pc, #80]	; (800c510 <USB_DoPing+0x70>)
 800c4be:	4013      	ands	r3, r2
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	0151      	lsls	r1, r2, #5
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	440a      	add	r2, r1
 800c4c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c4e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4fe:	461a      	mov	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	371c      	adds	r7, #28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bc80      	pop	{r7}
 800c50e:	4770      	bx	lr
 800c510:	1ff80000 	.word	0x1ff80000

0800c514 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff f943 	bl	800b7b0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c52a:	2110      	movs	r1, #16
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff f99b 	bl	800b868 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff f9bc 	bl	800b8b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c538:	2300      	movs	r3, #0
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	e01f      	b.n	800c57e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c554:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c55c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c564:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c572:	461a      	mov	r2, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	3301      	adds	r3, #1
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b0f      	cmp	r3, #15
 800c582:	d9dc      	bls.n	800c53e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c584:	2300      	movs	r3, #0
 800c586:	613b      	str	r3, [r7, #16]
 800c588:	e034      	b.n	800c5f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	015a      	lsls	r2, r3, #5
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	4413      	add	r3, r2
 800c592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5be:	461a      	mov	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	617b      	str	r3, [r7, #20]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5d0:	d80c      	bhi.n	800c5ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e8:	d0ec      	beq.n	800c5c4 <USB_StopHost+0xb0>
 800c5ea:	e000      	b.n	800c5ee <USB_StopHost+0xda>
        break;
 800c5ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d9c7      	bls.n	800c58a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c600:	461a      	mov	r2, r3
 800c602:	f04f 33ff 	mov.w	r3, #4294967295
 800c606:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f04f 32ff 	mov.w	r2, #4294967295
 800c60e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800c620:	4904      	ldr	r1, [pc, #16]	; (800c634 <MX_FATFS_Init+0x18>)
 800c622:	4805      	ldr	r0, [pc, #20]	; (800c638 <MX_FATFS_Init+0x1c>)
 800c624:	f006 f820 	bl	8012668 <FATFS_LinkDriver>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	4b03      	ldr	r3, [pc, #12]	; (800c63c <MX_FATFS_Init+0x20>)
 800c62e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c630:	bf00      	nop
 800c632:	bd80      	pop	{r7, pc}
 800c634:	2000da70 	.word	0x2000da70
 800c638:	0801a75c 	.word	0x0801a75c
 800c63c:	2000ded4 	.word	0x2000ded4

0800c640 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c640:	b480      	push	{r7}
 800c642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c644:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c646:	4618      	mov	r0, r3
 800c648:	46bd      	mov	sp, r7
 800c64a:	bc80      	pop	{r7}
 800c64c:	4770      	bx	lr

0800c64e <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c64e:	b590      	push	{r4, r7, lr}
 800c650:	b089      	sub	sp, #36	; 0x24
 800c652:	af04      	add	r7, sp, #16
 800c654:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c65c:	7919      	ldrb	r1, [r3, #4]
 800c65e:	2350      	movs	r3, #80	; 0x50
 800c660:	2206      	movs	r2, #6
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 fd3b 	bl	800e0de <USBH_FindInterface>
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2bff      	cmp	r3, #255	; 0xff
 800c670:	d002      	beq.n	800c678 <USBH_MSC_InterfaceInit+0x2a>
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d901      	bls.n	800c67c <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c678:	2302      	movs	r3, #2
 800c67a:	e0ef      	b.n	800c85c <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f001 fd11 	bl	800e0a8 <USBH_SelectInterface>
 800c686:	4603      	mov	r3, r0
 800c688:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c690:	2302      	movs	r3, #2
 800c692:	e0e3      	b.n	800c85c <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c69a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c69e:	f009 fbf1 	bl	8015e84 <malloc>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e0d0      	b.n	800c85c <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c6ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6be:	2100      	movs	r1, #0
 800c6c0:	68b8      	ldr	r0, [r7, #8]
 800c6c2:	f009 fbfd 	bl	8015ec0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	211a      	movs	r1, #26
 800c6cc:	fb01 f303 	mul.w	r3, r1, r3
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	b25b      	sxtb	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da16      	bge.n	800c70c <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	211a      	movs	r1, #26
 800c6e4:	fb01 f303 	mul.w	r3, r1, r3
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	211a      	movs	r1, #26
 800c6fa:	fb01 f303 	mul.w	r3, r1, r3
 800c6fe:	4413      	add	r3, r2
 800c700:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c704:	881a      	ldrh	r2, [r3, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	815a      	strh	r2, [r3, #10]
 800c70a:	e015      	b.n	800c738 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	211a      	movs	r1, #26
 800c712:	fb01 f303 	mul.w	r3, r1, r3
 800c716:	4413      	add	r3, r2
 800c718:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c722:	7bfb      	ldrb	r3, [r7, #15]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	211a      	movs	r1, #26
 800c728:	fb01 f303 	mul.w	r3, r1, r3
 800c72c:	4413      	add	r3, r2
 800c72e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c732:	881a      	ldrh	r2, [r3, #0]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	211a      	movs	r1, #26
 800c73e:	fb01 f303 	mul.w	r3, r1, r3
 800c742:	4413      	add	r3, r2
 800c744:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	b25b      	sxtb	r3, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da16      	bge.n	800c77e <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	211a      	movs	r1, #26
 800c756:	fb01 f303 	mul.w	r3, r1, r3
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	211a      	movs	r1, #26
 800c76c:	fb01 f303 	mul.w	r3, r1, r3
 800c770:	4413      	add	r3, r2
 800c772:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c776:	881a      	ldrh	r2, [r3, #0]
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	815a      	strh	r2, [r3, #10]
 800c77c:	e015      	b.n	800c7aa <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	211a      	movs	r1, #26
 800c784:	fb01 f303 	mul.w	r3, r1, r3
 800c788:	4413      	add	r3, r2
 800c78a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c78e:	781a      	ldrb	r2, [r3, #0]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	211a      	movs	r1, #26
 800c79a:	fb01 f303 	mul.w	r3, r1, r3
 800c79e:	4413      	add	r3, r2
 800c7a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c7a4:	881a      	ldrh	r2, [r3, #0]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	799b      	ldrb	r3, [r3, #6]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f002 ff77 	bl	800f6b6 <USBH_AllocPipe>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	79db      	ldrb	r3, [r3, #7]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f002 ff6d 	bl	800f6b6 <USBH_AllocPipe>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fdeb 	bl	800d3c0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	7959      	ldrb	r1, [r3, #5]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	7998      	ldrb	r0, [r3, #6]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	8912      	ldrh	r2, [r2, #8]
 800c802:	9202      	str	r2, [sp, #8]
 800c804:	2202      	movs	r2, #2
 800c806:	9201      	str	r2, [sp, #4]
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	4623      	mov	r3, r4
 800c80c:	4602      	mov	r2, r0
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f002 ff22 	bl	800f658 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	7919      	ldrb	r1, [r3, #4]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	79d8      	ldrb	r0, [r3, #7]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	8952      	ldrh	r2, [r2, #10]
 800c82c:	9202      	str	r2, [sp, #8]
 800c82e:	2202      	movs	r2, #2
 800c830:	9201      	str	r2, [sp, #4]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4623      	mov	r3, r4
 800c836:	4602      	mov	r2, r0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f002 ff0d 	bl	800f658 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	791b      	ldrb	r3, [r3, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f009 f946 	bl	8015ad8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	795b      	ldrb	r3, [r3, #5]
 800c850:	2200      	movs	r2, #0
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f009 f93f 	bl	8015ad8 <USBH_LL_SetToggle>

  return USBH_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}

0800c864 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c872:	69db      	ldr	r3, [r3, #28]
 800c874:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	795b      	ldrb	r3, [r3, #5]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00e      	beq.n	800c89c <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	795b      	ldrb	r3, [r3, #5]
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f002 ff06 	bl	800f696 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	795b      	ldrb	r3, [r3, #5]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f002 ff30 	bl	800f6f6 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	791b      	ldrb	r3, [r3, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00e      	beq.n	800c8c2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	791b      	ldrb	r3, [r3, #4]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f002 fef3 	bl	800f696 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	791b      	ldrb	r3, [r3, #4]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f002 ff1d 	bl	800f6f6 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f009 fadc 	bl	8015e94 <free>
    phost->pActiveClass->pData = 0U;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c902:	2301      	movs	r3, #1
 800c904:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	7b9b      	ldrb	r3, [r3, #14]
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d042      	beq.n	800c994 <USBH_MSC_ClassRequest+0xa4>
 800c90e:	2b03      	cmp	r3, #3
 800c910:	dc4c      	bgt.n	800c9ac <USBH_MSC_ClassRequest+0xbc>
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <USBH_MSC_ClassRequest+0x2a>
 800c916:	2b02      	cmp	r3, #2
 800c918:	d148      	bne.n	800c9ac <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fd30 	bl	800d384 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d104      	bne.n	800c938 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d138      	bne.n	800c9b0 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	b2db      	uxtb	r3, r3
 800c944:	2b02      	cmp	r3, #2
 800c946:	d804      	bhi.n	800c952 <USBH_MSC_ClassRequest+0x62>
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	3301      	adds	r3, #1
 800c950:	e000      	b.n	800c954 <USBH_MSC_ClassRequest+0x64>
 800c952:	2302      	movs	r3, #2
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c958:	2300      	movs	r3, #0
 800c95a:	73bb      	strb	r3, [r7, #14]
 800c95c:	e014      	b.n	800c988 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	2134      	movs	r1, #52	; 0x34
 800c964:	fb01 f303 	mul.w	r3, r1, r3
 800c968:	4413      	add	r3, r2
 800c96a:	3392      	adds	r3, #146	; 0x92
 800c96c:	2202      	movs	r2, #2
 800c96e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	2134      	movs	r1, #52	; 0x34
 800c976:	fb01 f303 	mul.w	r3, r1, r3
 800c97a:	4413      	add	r3, r2
 800c97c:	33c1      	adds	r3, #193	; 0xc1
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	3301      	adds	r3, #1
 800c986:	73bb      	strb	r3, [r7, #14]
 800c988:	7bba      	ldrb	r2, [r7, #14]
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d3e5      	bcc.n	800c95e <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 800c992:	e00d      	b.n	800c9b0 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f002 f94f 	bl	800ec3a <USBH_ClrFeature>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d108      	bne.n	800c9b4 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	7bda      	ldrb	r2, [r3, #15]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	739a      	strb	r2, [r3, #14]
      }
      break;
 800c9aa:	e003      	b.n	800c9b4 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800c9ac:	bf00      	nop
 800c9ae:	e002      	b.n	800c9b6 <USBH_MSC_ClassRequest+0xc6>
      break;
 800c9b0:	bf00      	nop
 800c9b2:	e000      	b.n	800c9b6 <USBH_MSC_ClassRequest+0xc6>
      break;
 800c9b4:	bf00      	nop
  }

  return status;
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	7b1b      	ldrb	r3, [r3, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <USBH_MSC_Process+0x2e>
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	f000 828d 	beq.w	800cf06 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c9ec:	e28e      	b.n	800cf0c <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	f080 8267 	bcs.w	800cece <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca06:	4619      	mov	r1, r3
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	2334      	movs	r3, #52	; 0x34
 800ca0c:	fb03 f301 	mul.w	r3, r3, r1
 800ca10:	4413      	add	r3, r2
 800ca12:	3391      	adds	r3, #145	; 0x91
 800ca14:	2201      	movs	r2, #1
 800ca16:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca1e:	4619      	mov	r1, r3
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	2334      	movs	r3, #52	; 0x34
 800ca24:	fb03 f301 	mul.w	r3, r3, r1
 800ca28:	4413      	add	r3, r2
 800ca2a:	3390      	adds	r3, #144	; 0x90
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	f200 8235 	bhi.w	800ce9e <USBH_MSC_Process+0x4de>
 800ca34:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <USBH_MSC_Process+0x7c>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800ca61 	.word	0x0800ca61
 800ca40:	0800ce9f 	.word	0x0800ce9f
 800ca44:	0800cb29 	.word	0x0800cb29
 800ca48:	0800ccad 	.word	0x0800ccad
 800ca4c:	0800ca87 	.word	0x0800ca87
 800ca50:	0800cd79 	.word	0x0800cd79
 800ca54:	0800ce9f 	.word	0x0800ce9f
 800ca58:	0800ce9f 	.word	0x0800ce9f
 800ca5c:	0800ce8d 	.word	0x0800ce8d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca66:	4619      	mov	r1, r3
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	2334      	movs	r3, #52	; 0x34
 800ca6c:	fb03 f301 	mul.w	r3, r3, r1
 800ca70:	4413      	add	r3, r2
 800ca72:	3390      	adds	r3, #144	; 0x90
 800ca74:	2204      	movs	r2, #4
 800ca76:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ca84:	e214      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca8c:	b2d9      	uxtb	r1, r3
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca94:	461a      	mov	r2, r3
 800ca96:	2334      	movs	r3, #52	; 0x34
 800ca98:	fb03 f302 	mul.w	r3, r3, r2
 800ca9c:	3398      	adds	r3, #152	; 0x98
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	4413      	add	r3, r2
 800caa2:	3307      	adds	r3, #7
 800caa4:	461a      	mov	r2, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 f834 	bl	800db14 <USBH_MSC_SCSI_Inquiry>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10b      	bne.n	800cace <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cabc:	4619      	mov	r1, r3
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	2334      	movs	r3, #52	; 0x34
 800cac2:	fb03 f301 	mul.w	r3, r3, r1
 800cac6:	4413      	add	r3, r2
 800cac8:	3390      	adds	r3, #144	; 0x90
 800caca:	2202      	movs	r2, #2
 800cacc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d10c      	bne.n	800caee <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cada:	4619      	mov	r1, r3
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	2334      	movs	r3, #52	; 0x34
 800cae0:	fb03 f301 	mul.w	r3, r3, r1
 800cae4:	4413      	add	r3, r2
 800cae6:	3390      	adds	r3, #144	; 0x90
 800cae8:	2205      	movs	r2, #5
 800caea:	701a      	strb	r2, [r3, #0]
            break;
 800caec:	e1d9      	b.n	800cea2 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	f040 81d6 	bne.w	800cea2 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cafc:	4619      	mov	r1, r3
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	2334      	movs	r3, #52	; 0x34
 800cb02:	fb03 f301 	mul.w	r3, r3, r1
 800cb06:	4413      	add	r3, r2
 800cb08:	3390      	adds	r3, #144	; 0x90
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb14:	4619      	mov	r1, r3
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	2334      	movs	r3, #52	; 0x34
 800cb1a:	fb03 f301 	mul.w	r3, r3, r1
 800cb1e:	4413      	add	r3, r2
 800cb20:	3391      	adds	r3, #145	; 0x91
 800cb22:	2202      	movs	r2, #2
 800cb24:	701a      	strb	r2, [r3, #0]
            break;
 800cb26:	e1bc      	b.n	800cea2 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 ff30 	bl	800d998 <USBH_MSC_SCSI_TestUnitReady>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d149      	bne.n	800cbd6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb48:	4619      	mov	r1, r3
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	2334      	movs	r3, #52	; 0x34
 800cb4e:	fb03 f301 	mul.w	r3, r3, r1
 800cb52:	4413      	add	r3, r2
 800cb54:	3392      	adds	r3, #146	; 0x92
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb62:	4619      	mov	r1, r3
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	2334      	movs	r3, #52	; 0x34
 800cb68:	fb03 f301 	mul.w	r3, r3, r1
 800cb6c:	4413      	add	r3, r2
 800cb6e:	33c1      	adds	r3, #193	; 0xc1
 800cb70:	2201      	movs	r2, #1
 800cb72:	701a      	strb	r2, [r3, #0]
 800cb74:	e00b      	b.n	800cb8e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	2334      	movs	r3, #52	; 0x34
 800cb82:	fb03 f301 	mul.w	r3, r3, r1
 800cb86:	4413      	add	r3, r2
 800cb88:	33c1      	adds	r3, #193	; 0xc1
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb94:	4619      	mov	r1, r3
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	2334      	movs	r3, #52	; 0x34
 800cb9a:	fb03 f301 	mul.w	r3, r3, r1
 800cb9e:	4413      	add	r3, r2
 800cba0:	3390      	adds	r3, #144	; 0x90
 800cba2:	2203      	movs	r2, #3
 800cba4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbac:	4619      	mov	r1, r3
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	2334      	movs	r3, #52	; 0x34
 800cbb2:	fb03 f301 	mul.w	r3, r3, r1
 800cbb6:	4413      	add	r3, r2
 800cbb8:	3391      	adds	r3, #145	; 0x91
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	2334      	movs	r3, #52	; 0x34
 800cbca:	fb03 f301 	mul.w	r3, r3, r1
 800cbce:	4413      	add	r3, r2
 800cbd0:	3392      	adds	r3, #146	; 0x92
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d14a      	bne.n	800cc72 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	2334      	movs	r3, #52	; 0x34
 800cbe8:	fb03 f301 	mul.w	r3, r3, r1
 800cbec:	4413      	add	r3, r2
 800cbee:	3392      	adds	r3, #146	; 0x92
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d00c      	beq.n	800cc10 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	2334      	movs	r3, #52	; 0x34
 800cc02:	fb03 f301 	mul.w	r3, r3, r1
 800cc06:	4413      	add	r3, r2
 800cc08:	33c1      	adds	r3, #193	; 0xc1
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e00b      	b.n	800cc28 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc16:	4619      	mov	r1, r3
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	2334      	movs	r3, #52	; 0x34
 800cc1c:	fb03 f301 	mul.w	r3, r3, r1
 800cc20:	4413      	add	r3, r2
 800cc22:	33c1      	adds	r3, #193	; 0xc1
 800cc24:	2200      	movs	r2, #0
 800cc26:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc2e:	4619      	mov	r1, r3
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	2334      	movs	r3, #52	; 0x34
 800cc34:	fb03 f301 	mul.w	r3, r3, r1
 800cc38:	4413      	add	r3, r2
 800cc3a:	3390      	adds	r3, #144	; 0x90
 800cc3c:	2205      	movs	r2, #5
 800cc3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc46:	4619      	mov	r1, r3
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	2334      	movs	r3, #52	; 0x34
 800cc4c:	fb03 f301 	mul.w	r3, r3, r1
 800cc50:	4413      	add	r3, r2
 800cc52:	3391      	adds	r3, #145	; 0x91
 800cc54:	2201      	movs	r2, #1
 800cc56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc5e:	4619      	mov	r1, r3
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	2334      	movs	r3, #52	; 0x34
 800cc64:	fb03 f301 	mul.w	r3, r3, r1
 800cc68:	4413      	add	r3, r2
 800cc6a:	3392      	adds	r3, #146	; 0x92
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	701a      	strb	r2, [r3, #0]
            break;
 800cc70:	e119      	b.n	800cea6 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
 800cc74:	2b04      	cmp	r3, #4
 800cc76:	f040 8116 	bne.w	800cea6 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc80:	4619      	mov	r1, r3
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	2334      	movs	r3, #52	; 0x34
 800cc86:	fb03 f301 	mul.w	r3, r3, r1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	3390      	adds	r3, #144	; 0x90
 800cc8e:	2201      	movs	r2, #1
 800cc90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc98:	4619      	mov	r1, r3
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	2334      	movs	r3, #52	; 0x34
 800cc9e:	fb03 f301 	mul.w	r3, r3, r1
 800cca2:	4413      	add	r3, r2
 800cca4:	3391      	adds	r3, #145	; 0x91
 800cca6:	2202      	movs	r2, #2
 800cca8:	701a      	strb	r2, [r3, #0]
            break;
 800ccaa:	e0fc      	b.n	800cea6 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ccb2:	b2d9      	uxtb	r1, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ccba:	461a      	mov	r2, r3
 800ccbc:	2334      	movs	r3, #52	; 0x34
 800ccbe:	fb03 f302 	mul.w	r3, r3, r2
 800ccc2:	3390      	adds	r3, #144	; 0x90
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	3304      	adds	r3, #4
 800ccca:	461a      	mov	r2, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fea6 	bl	800da1e <USBH_MSC_SCSI_ReadCapacity>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d120      	bne.n	800cd1e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cce2:	4619      	mov	r1, r3
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	2334      	movs	r3, #52	; 0x34
 800cce8:	fb03 f301 	mul.w	r3, r3, r1
 800ccec:	4413      	add	r3, r2
 800ccee:	3390      	adds	r3, #144	; 0x90
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	2334      	movs	r3, #52	; 0x34
 800cd00:	fb03 f301 	mul.w	r3, r3, r1
 800cd04:	4413      	add	r3, r2
 800cd06:	3391      	adds	r3, #145	; 0x91
 800cd08:	2200      	movs	r2, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd12:	3301      	adds	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800cd1c:	e0c5      	b.n	800ceaa <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d10c      	bne.n	800cd3e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	2334      	movs	r3, #52	; 0x34
 800cd30:	fb03 f301 	mul.w	r3, r3, r1
 800cd34:	4413      	add	r3, r2
 800cd36:	3390      	adds	r3, #144	; 0x90
 800cd38:	2205      	movs	r2, #5
 800cd3a:	701a      	strb	r2, [r3, #0]
            break;
 800cd3c:	e0b5      	b.n	800ceaa <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	f040 80b2 	bne.w	800ceaa <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	2334      	movs	r3, #52	; 0x34
 800cd52:	fb03 f301 	mul.w	r3, r3, r1
 800cd56:	4413      	add	r3, r2
 800cd58:	3390      	adds	r3, #144	; 0x90
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd64:	4619      	mov	r1, r3
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	2334      	movs	r3, #52	; 0x34
 800cd6a:	fb03 f301 	mul.w	r3, r3, r1
 800cd6e:	4413      	add	r3, r2
 800cd70:	3391      	adds	r3, #145	; 0x91
 800cd72:	2202      	movs	r2, #2
 800cd74:	701a      	strb	r2, [r3, #0]
            break;
 800cd76:	e098      	b.n	800ceaa <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd7e:	b2d9      	uxtb	r1, r3
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd86:	461a      	mov	r2, r3
 800cd88:	2334      	movs	r3, #52	; 0x34
 800cd8a:	fb03 f302 	mul.w	r3, r3, r2
 800cd8e:	3398      	adds	r3, #152	; 0x98
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4413      	add	r3, r2
 800cd94:	3304      	adds	r3, #4
 800cd96:	461a      	mov	r2, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 ff60 	bl	800dc5e <USBH_MSC_SCSI_RequestSense>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d145      	bne.n	800ce34 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdae:	4619      	mov	r1, r3
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	2334      	movs	r3, #52	; 0x34
 800cdb4:	fb03 f301 	mul.w	r3, r3, r1
 800cdb8:	4413      	add	r3, r2
 800cdba:	339c      	adds	r3, #156	; 0x9c
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b06      	cmp	r3, #6
 800cdc0:	d00c      	beq.n	800cddc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdc8:	4619      	mov	r1, r3
 800cdca:	693a      	ldr	r2, [r7, #16]
 800cdcc:	2334      	movs	r3, #52	; 0x34
 800cdce:	fb03 f301 	mul.w	r3, r3, r1
 800cdd2:	4413      	add	r3, r2
 800cdd4:	339c      	adds	r3, #156	; 0x9c
 800cdd6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d117      	bne.n	800ce0c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	f242 720f 	movw	r2, #9999	; 0x270f
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d80c      	bhi.n	800ce0c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	2334      	movs	r3, #52	; 0x34
 800cdfe:	fb03 f301 	mul.w	r3, r3, r1
 800ce02:	4413      	add	r3, r2
 800ce04:	3390      	adds	r3, #144	; 0x90
 800ce06:	2202      	movs	r2, #2
 800ce08:	701a      	strb	r2, [r3, #0]
                  break;
 800ce0a:	e051      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce12:	4619      	mov	r1, r3
 800ce14:	693a      	ldr	r2, [r7, #16]
 800ce16:	2334      	movs	r3, #52	; 0x34
 800ce18:	fb03 f301 	mul.w	r3, r3, r1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3390      	adds	r3, #144	; 0x90
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d10c      	bne.n	800ce54 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce40:	4619      	mov	r1, r3
 800ce42:	693a      	ldr	r2, [r7, #16]
 800ce44:	2334      	movs	r3, #52	; 0x34
 800ce46:	fb03 f301 	mul.w	r3, r3, r1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	3390      	adds	r3, #144	; 0x90
 800ce4e:	2208      	movs	r2, #8
 800ce50:	701a      	strb	r2, [r3, #0]
            break;
 800ce52:	e02c      	b.n	800ceae <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	d129      	bne.n	800ceae <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce60:	4619      	mov	r1, r3
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	2334      	movs	r3, #52	; 0x34
 800ce66:	fb03 f301 	mul.w	r3, r3, r1
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3390      	adds	r3, #144	; 0x90
 800ce6e:	2201      	movs	r2, #1
 800ce70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce78:	4619      	mov	r1, r3
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	2334      	movs	r3, #52	; 0x34
 800ce7e:	fb03 f301 	mul.w	r3, r3, r1
 800ce82:	4413      	add	r3, r2
 800ce84:	3391      	adds	r3, #145	; 0x91
 800ce86:	2202      	movs	r2, #2
 800ce88:	701a      	strb	r2, [r3, #0]
            break;
 800ce8a:	e010      	b.n	800ceae <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce92:	3301      	adds	r3, #1
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ce9c:	e008      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            break;
 800ce9e:	bf00      	nop
 800cea0:	e006      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            break;
 800cea2:	bf00      	nop
 800cea4:	e004      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            break;
 800cea6:	bf00      	nop
 800cea8:	e002      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            break;
 800ceaa:	bf00      	nop
 800ceac:	e000      	b.n	800ceb0 <USBH_MSC_Process+0x4f0>
            break;
 800ceae:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2204      	movs	r2, #4
 800ceb4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cec4:	2200      	movs	r2, #0
 800cec6:	4619      	mov	r1, r3
 800cec8:	f005 fed8 	bl	8012c7c <osMessagePut>
      break;
 800cecc:	e01e      	b.n	800cf0c <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2201      	movs	r2, #1
 800ceda:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2204      	movs	r2, #4
 800cee0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cef0:	2200      	movs	r2, #0
 800cef2:	4619      	mov	r1, r3
 800cef4:	f005 fec2 	bl	8012c7c <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cefe:	2102      	movs	r1, #2
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
      break;
 800cf04:	e002      	b.n	800cf0c <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	75fb      	strb	r3, [r7, #23]
      break;
 800cf0a:	bf00      	nop
  }
  return error;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop

0800cf18 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bc80      	pop	{r7}
 800cf2a:	4770      	bx	lr

0800cf2c <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800cf42:	2301      	movs	r3, #1
 800cf44:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800cf46:	2301      	movs	r3, #1
 800cf48:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	2134      	movs	r1, #52	; 0x34
 800cf50:	fb01 f303 	mul.w	r3, r1, r3
 800cf54:	4413      	add	r3, r2
 800cf56:	3390      	adds	r3, #144	; 0x90
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b07      	cmp	r3, #7
 800cf5c:	d04b      	beq.n	800cff6 <USBH_MSC_RdWrProcess+0xca>
 800cf5e:	2b07      	cmp	r3, #7
 800cf60:	f300 80d2 	bgt.w	800d108 <USBH_MSC_RdWrProcess+0x1dc>
 800cf64:	2b05      	cmp	r3, #5
 800cf66:	f000 8089 	beq.w	800d07c <USBH_MSC_RdWrProcess+0x150>
 800cf6a:	2b06      	cmp	r3, #6
 800cf6c:	f040 80cc 	bne.w	800d108 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800cf70:	78f9      	ldrb	r1, [r7, #3]
 800cf72:	2300      	movs	r3, #0
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	2300      	movs	r3, #0
 800cf78:	2200      	movs	r2, #0
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 ff53 	bl	800de26 <USBH_MSC_SCSI_Read>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10b      	bne.n	800cfa2 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	2134      	movs	r1, #52	; 0x34
 800cf90:	fb01 f303 	mul.w	r3, r1, r3
 800cf94:	4413      	add	r3, r2
 800cf96:	3390      	adds	r3, #144	; 0x90
 800cf98:	2201      	movs	r2, #1
 800cf9a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	75fb      	strb	r3, [r7, #23]
 800cfa0:	e01a      	b.n	800cfd8 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d109      	bne.n	800cfbc <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	2134      	movs	r1, #52	; 0x34
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	3390      	adds	r3, #144	; 0x90
 800cfb6:	2205      	movs	r2, #5
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	e00d      	b.n	800cfd8 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	2b04      	cmp	r3, #4
 800cfc0:	d10a      	bne.n	800cfd8 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cfc2:	78fb      	ldrb	r3, [r7, #3]
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	2134      	movs	r1, #52	; 0x34
 800cfc8:	fb01 f303 	mul.w	r3, r1, r3
 800cfcc:	4413      	add	r3, r2
 800cfce:	3390      	adds	r3, #144	; 0x90
 800cfd0:	2208      	movs	r2, #8
 800cfd2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cfec:	2200      	movs	r2, #0
 800cfee:	4619      	mov	r1, r3
 800cff0:	f005 fe44 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cff4:	e089      	b.n	800d10a <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800cff6:	78f9      	ldrb	r1, [r7, #3]
 800cff8:	2300      	movs	r3, #0
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	2300      	movs	r3, #0
 800cffe:	2200      	movs	r2, #0
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fea5 	bl	800dd50 <USBH_MSC_SCSI_Write>
 800d006:	4603      	mov	r3, r0
 800d008:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10b      	bne.n	800d028 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d010:	78fb      	ldrb	r3, [r7, #3]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	2134      	movs	r1, #52	; 0x34
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	3390      	adds	r3, #144	; 0x90
 800d01e:	2201      	movs	r2, #1
 800d020:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	75fb      	strb	r3, [r7, #23]
 800d026:	e01a      	b.n	800d05e <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d109      	bne.n	800d042 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	2134      	movs	r1, #52	; 0x34
 800d034:	fb01 f303 	mul.w	r3, r1, r3
 800d038:	4413      	add	r3, r2
 800d03a:	3390      	adds	r3, #144	; 0x90
 800d03c:	2205      	movs	r2, #5
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e00d      	b.n	800d05e <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	2b04      	cmp	r3, #4
 800d046:	d10a      	bne.n	800d05e <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	2134      	movs	r1, #52	; 0x34
 800d04e:	fb01 f303 	mul.w	r3, r1, r3
 800d052:	4413      	add	r3, r2
 800d054:	3390      	adds	r3, #144	; 0x90
 800d056:	2208      	movs	r2, #8
 800d058:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d05a:	2302      	movs	r3, #2
 800d05c:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2204      	movs	r2, #4
 800d062:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d072:	2200      	movs	r2, #0
 800d074:	4619      	mov	r1, r3
 800d076:	f005 fe01 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d07a:	e046      	b.n	800d10a <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800d07c:	78fb      	ldrb	r3, [r7, #3]
 800d07e:	2234      	movs	r2, #52	; 0x34
 800d080:	fb02 f303 	mul.w	r3, r2, r3
 800d084:	3398      	adds	r3, #152	; 0x98
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4413      	add	r3, r2
 800d08a:	1d1a      	adds	r2, r3, #4
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fde4 	bl	800dc5e <USBH_MSC_SCSI_RequestSense>
 800d096:	4603      	mov	r3, r0
 800d098:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d113      	bne.n	800d0c8 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	2134      	movs	r1, #52	; 0x34
 800d0a6:	fb01 f303 	mul.w	r3, r1, r3
 800d0aa:	4413      	add	r3, r2
 800d0ac:	3390      	adds	r3, #144	; 0x90
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800d0b2:	78fb      	ldrb	r3, [r7, #3]
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	2134      	movs	r1, #52	; 0x34
 800d0b8:	fb01 f303 	mul.w	r3, r1, r3
 800d0bc:	4413      	add	r3, r2
 800d0be:	3391      	adds	r3, #145	; 0x91
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d00d      	beq.n	800d0ea <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d10a      	bne.n	800d0ea <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d0d4:	78fb      	ldrb	r3, [r7, #3]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	2134      	movs	r1, #52	; 0x34
 800d0da:	fb01 f303 	mul.w	r3, r1, r3
 800d0de:	4413      	add	r3, r2
 800d0e0:	3390      	adds	r3, #144	; 0x90
 800d0e2:	2208      	movs	r2, #8
 800d0e4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2204      	movs	r2, #4
 800d0ee:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d0fe:	2200      	movs	r2, #0
 800d100:	4619      	mov	r1, r3
 800d102:	f005 fdbb 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d106:	e000      	b.n	800d10a <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800d108:	bf00      	nop

  }
  return error;
 800d10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d126:	69db      	ldr	r3, [r3, #28]
 800d128:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b0b      	cmp	r3, #11
 800d132:	d10c      	bne.n	800d14e <USBH_MSC_UnitIsReady+0x3a>
 800d134:	78fb      	ldrb	r3, [r7, #3]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	2134      	movs	r1, #52	; 0x34
 800d13a:	fb01 f303 	mul.w	r3, r1, r3
 800d13e:	4413      	add	r3, r2
 800d140:	3391      	adds	r3, #145	; 0x91
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800d148:	2301      	movs	r3, #1
 800d14a:	73fb      	strb	r3, [r7, #15]
 800d14c:	e001      	b.n	800d152 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d152:	7bfb      	ldrb	r3, [r7, #15]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	bc80      	pop	{r7}
 800d15c:	4770      	bx	lr

0800d15e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b086      	sub	sp, #24
 800d162:	af00      	add	r7, sp, #0
 800d164:	60f8      	str	r0, [r7, #12]
 800d166:	460b      	mov	r3, r1
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d172:	69db      	ldr	r3, [r3, #28]
 800d174:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b0b      	cmp	r3, #11
 800d17e:	d10d      	bne.n	800d19c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800d180:	7afb      	ldrb	r3, [r7, #11]
 800d182:	2234      	movs	r2, #52	; 0x34
 800d184:	fb02 f303 	mul.w	r3, r2, r3
 800d188:	3390      	adds	r3, #144	; 0x90
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	4413      	add	r3, r2
 800d18e:	2234      	movs	r2, #52	; 0x34
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f008 fe86 	bl	8015ea4 <memcpy>
    return USBH_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	e000      	b.n	800d19e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800d19c:	2302      	movs	r3, #2
  }
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b088      	sub	sp, #32
 800d1aa:	af02      	add	r7, sp, #8
 800d1ac:	60f8      	str	r0, [r7, #12]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00e      	beq.n	800d1ea <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d1d2:	2b0b      	cmp	r3, #11
 800d1d4:	d109      	bne.n	800d1ea <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d1d6:	7afb      	ldrb	r3, [r7, #11]
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	2134      	movs	r1, #52	; 0x34
 800d1dc:	fb01 f303 	mul.w	r3, r1, r3
 800d1e0:	4413      	add	r3, r2
 800d1e2:	3390      	adds	r3, #144	; 0x90
 800d1e4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d001      	beq.n	800d1ee <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	e040      	b.n	800d270 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2206      	movs	r2, #6
 800d1f2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	2134      	movs	r1, #52	; 0x34
 800d1fa:	fb01 f303 	mul.w	r3, r1, r3
 800d1fe:	4413      	add	r3, r2
 800d200:	3390      	adds	r3, #144	; 0x90
 800d202:	2206      	movs	r2, #6
 800d204:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d206:	7afb      	ldrb	r3, [r7, #11]
 800d208:	b29a      	uxth	r2, r3
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800d210:	7af9      	ldrb	r1, [r7, #11]
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 fe03 	bl	800de26 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d226:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d228:	e016      	b.n	800d258 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	1ad2      	subs	r2, r2, r3
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	f242 7110 	movw	r1, #10000	; 0x2710
 800d23a:	fb01 f303 	mul.w	r3, r1, r3
 800d23e:	429a      	cmp	r2, r3
 800d240:	d805      	bhi.n	800d24e <USBH_MSC_Read+0xa8>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d104      	bne.n	800d258 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2201      	movs	r2, #1
 800d252:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d254:	2302      	movs	r3, #2
 800d256:	e00b      	b.n	800d270 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	4619      	mov	r1, r3
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f7ff fe65 	bl	800cf2c <USBH_MSC_RdWrProcess>
 800d262:	4603      	mov	r3, r0
 800d264:	2b01      	cmp	r3, #1
 800d266:	d0e0      	beq.n	800d22a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2201      	movs	r2, #1
 800d26c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3718      	adds	r7, #24
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	607a      	str	r2, [r7, #4]
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	460b      	mov	r3, r1
 800d286:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d28e:	69db      	ldr	r3, [r3, #28]
 800d290:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00e      	beq.n	800d2bc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d2a4:	2b0b      	cmp	r3, #11
 800d2a6:	d109      	bne.n	800d2bc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d2a8:	7afb      	ldrb	r3, [r7, #11]
 800d2aa:	697a      	ldr	r2, [r7, #20]
 800d2ac:	2134      	movs	r1, #52	; 0x34
 800d2ae:	fb01 f303 	mul.w	r3, r1, r3
 800d2b2:	4413      	add	r3, r2
 800d2b4:	3390      	adds	r3, #144	; 0x90
 800d2b6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d001      	beq.n	800d2c0 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d2bc:	2302      	movs	r3, #2
 800d2be:	e040      	b.n	800d342 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	2207      	movs	r2, #7
 800d2c4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d2c6:	7afb      	ldrb	r3, [r7, #11]
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	2134      	movs	r1, #52	; 0x34
 800d2cc:	fb01 f303 	mul.w	r3, r1, r3
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3390      	adds	r3, #144	; 0x90
 800d2d4:	2207      	movs	r2, #7
 800d2d6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d2d8:	7afb      	ldrb	r3, [r7, #11]
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d2e2:	7af9      	ldrb	r1, [r7, #11]
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 fd2f 	bl	800dd50 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d2f8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d2fa:	e016      	b.n	800d32a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	1ad2      	subs	r2, r2, r3
 800d306:	6a3b      	ldr	r3, [r7, #32]
 800d308:	f242 7110 	movw	r1, #10000	; 0x2710
 800d30c:	fb01 f303 	mul.w	r3, r1, r3
 800d310:	429a      	cmp	r2, r3
 800d312:	d805      	bhi.n	800d320 <USBH_MSC_Write+0xa8>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d104      	bne.n	800d32a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2201      	movs	r2, #1
 800d324:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d326:	2302      	movs	r3, #2
 800d328:	e00b      	b.n	800d342 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d32a:	7afb      	ldrb	r3, [r7, #11]
 800d32c:	4619      	mov	r1, r3
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7ff fdfc 	bl	800cf2c <USBH_MSC_RdWrProcess>
 800d334:	4603      	mov	r3, r0
 800d336:	2b01      	cmp	r3, #1
 800d338:	d0e0      	beq.n	800d2fc <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2201      	movs	r2, #1
 800d33e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2221      	movs	r2, #33	; 0x21
 800d356:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	22ff      	movs	r2, #255	; 0xff
 800d35c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800d370:	2200      	movs	r2, #0
 800d372:	2100      	movs	r1, #0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f001 fe3b 	bl	800eff0 <USBH_CtlReq>
 800d37a:	4603      	mov	r3, r0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	22a1      	movs	r2, #161	; 0xa1
 800d392:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	22fe      	movs	r2, #254	; 0xfe
 800d398:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f001 fe1d 	bl	800eff0 <USBH_CtlReq>
 800d3b6:	4603      	mov	r3, r0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d3ce:	69db      	ldr	r3, [r3, #28]
 800d3d0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	4a09      	ldr	r2, [pc, #36]	; (800d3fc <USBH_MSC_BOT_Init+0x3c>)
 800d3d6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	4a09      	ldr	r2, [pc, #36]	; (800d400 <USBH_MSC_BOT_Init+0x40>)
 800d3dc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bc80      	pop	{r7}
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	43425355 	.word	0x43425355
 800d400:	20304050 	.word	0x20304050

0800d404 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af02      	add	r7, sp, #8
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d414:	2301      	movs	r3, #1
 800d416:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800d418:	2301      	movs	r3, #1
 800d41a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d434:	3b01      	subs	r3, #1
 800d436:	2b0a      	cmp	r3, #10
 800d438:	f200 822a 	bhi.w	800d890 <USBH_MSC_BOT_Process+0x48c>
 800d43c:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <USBH_MSC_BOT_Process+0x40>)
 800d43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d442:	bf00      	nop
 800d444:	0800d471 	.word	0x0800d471
 800d448:	0800d499 	.word	0x0800d499
 800d44c:	0800d557 	.word	0x0800d557
 800d450:	0800d575 	.word	0x0800d575
 800d454:	0800d631 	.word	0x0800d631
 800d458:	0800d653 	.word	0x0800d653
 800d45c:	0800d73f 	.word	0x0800d73f
 800d460:	0800d75b 	.word	0x0800d75b
 800d464:	0800d7e5 	.word	0x0800d7e5
 800d468:	0800d815 	.word	0x0800d815
 800d46c:	0800d877 	.word	0x0800d877
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	78fa      	ldrb	r2, [r7, #3]
 800d474:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2202      	movs	r2, #2
 800d47c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	795b      	ldrb	r3, [r3, #5]
 800d48a:	2201      	movs	r2, #1
 800d48c:	9200      	str	r2, [sp, #0]
 800d48e:	221f      	movs	r2, #31
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f002 f89e 	bl	800f5d2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d496:	e20a      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	795b      	ldrb	r3, [r3, #5]
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f008 faf0 	bl	8015a84 <USBH_LL_GetURBState>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d4a8:	7d3b      	ldrb	r3, [r7, #20]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d126      	bne.n	800d4fc <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00f      	beq.n	800d4d6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da04      	bge.n	800d4cc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2203      	movs	r2, #3
 800d4c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d4ca:	e008      	b.n	800d4de <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	2205      	movs	r2, #5
 800d4d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d4d4:	e003      	b.n	800d4de <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2207      	movs	r2, #7
 800d4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f005 fbc1 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d4fa:	e1cb      	b.n	800d894 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d4fc:	7d3b      	ldrb	r3, [r7, #20]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d112      	bne.n	800d528 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2202      	movs	r2, #2
 800d50e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d51e:	2200      	movs	r2, #0
 800d520:	4619      	mov	r1, r3
 800d522:	f005 fbab 	bl	8012c7c <osMessagePut>
      break;
 800d526:	e1b5      	b.n	800d894 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800d528:	7d3b      	ldrb	r3, [r7, #20]
 800d52a:	2b05      	cmp	r3, #5
 800d52c:	f040 81b2 	bne.w	800d894 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	220a      	movs	r2, #10
 800d534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2202      	movs	r2, #2
 800d53c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d54c:	2200      	movs	r2, #0
 800d54e:	4619      	mov	r1, r3
 800d550:	f005 fb94 	bl	8012c7c <osMessagePut>
      break;
 800d554:	e19e      	b.n	800d894 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	895a      	ldrh	r2, [r3, #10]
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	791b      	ldrb	r3, [r3, #4]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f002 f859 	bl	800f61c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2204      	movs	r2, #4
 800d56e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800d572:	e19c      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	791b      	ldrb	r3, [r3, #4]
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f008 fa82 	bl	8015a84 <USBH_LL_GetURBState>
 800d580:	4603      	mov	r3, r0
 800d582:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d584:	7d3b      	ldrb	r3, [r7, #20]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d13b      	bne.n	800d602 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	8952      	ldrh	r2, [r2, #10]
 800d592:	4293      	cmp	r3, r2
 800d594:	d910      	bls.n	800d5b8 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	8952      	ldrh	r2, [r2, #10]
 800d5a0:	441a      	add	r2, r3
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	8952      	ldrh	r2, [r2, #10]
 800d5b0:	1a9a      	subs	r2, r3, r2
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	65da      	str	r2, [r3, #92]	; 0x5c
 800d5b6:	e002      	b.n	800d5be <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00a      	beq.n	800d5dc <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	895a      	ldrh	r2, [r3, #10]
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	791b      	ldrb	r3, [r3, #4]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f002 f821 	bl	800f61c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d5da:	e15d      	b.n	800d898 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2207      	movs	r2, #7
 800d5e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f005 fb3e 	bl	8012c7c <osMessagePut>
      break;
 800d600:	e14a      	b.n	800d898 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800d602:	7d3b      	ldrb	r3, [r7, #20]
 800d604:	2b05      	cmp	r3, #5
 800d606:	f040 8147 	bne.w	800d898 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2209      	movs	r2, #9
 800d60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2202      	movs	r2, #2
 800d616:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d626:	2200      	movs	r2, #0
 800d628:	4619      	mov	r1, r3
 800d62a:	f005 fb27 	bl	8012c7c <osMessagePut>
      break;
 800d62e:	e133      	b.n	800d898 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	891a      	ldrh	r2, [r3, #8]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	795b      	ldrb	r3, [r3, #5]
 800d63e:	2001      	movs	r0, #1
 800d640:	9000      	str	r0, [sp, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f001 ffc5 	bl	800f5d2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2206      	movs	r2, #6
 800d64c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d650:	e12d      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	795b      	ldrb	r3, [r3, #5]
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f008 fa13 	bl	8015a84 <USBH_LL_GetURBState>
 800d65e:	4603      	mov	r3, r0
 800d660:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d662:	7d3b      	ldrb	r3, [r7, #20]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d13d      	bne.n	800d6e4 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	8912      	ldrh	r2, [r2, #8]
 800d670:	4293      	cmp	r3, r2
 800d672:	d910      	bls.n	800d696 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d67a:	693a      	ldr	r2, [r7, #16]
 800d67c:	8912      	ldrh	r2, [r2, #8]
 800d67e:	441a      	add	r2, r3
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	8912      	ldrh	r2, [r2, #8]
 800d68e:	1a9a      	subs	r2, r3, r2
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	65da      	str	r2, [r3, #92]	; 0x5c
 800d694:	e002      	b.n	800d69c <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	2200      	movs	r2, #0
 800d69a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00c      	beq.n	800d6be <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	891a      	ldrh	r2, [r3, #8]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	795b      	ldrb	r3, [r3, #5]
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	9000      	str	r0, [sp, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 ff8b 	bl	800f5d2 <USBH_BulkSendData>
 800d6bc:	e003      	b.n	800d6c6 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f005 facd 	bl	8012c7c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d6e2:	e0db      	b.n	800d89c <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d6e4:	7d3b      	ldrb	r3, [r7, #20]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d112      	bne.n	800d710 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2205      	movs	r2, #5
 800d6ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d706:	2200      	movs	r2, #0
 800d708:	4619      	mov	r1, r3
 800d70a:	f005 fab7 	bl	8012c7c <osMessagePut>
      break;
 800d70e:	e0c5      	b.n	800d89c <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800d710:	7d3b      	ldrb	r3, [r7, #20]
 800d712:	2b05      	cmp	r3, #5
 800d714:	f040 80c2 	bne.w	800d89c <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	220a      	movs	r2, #10
 800d71c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2202      	movs	r2, #2
 800d724:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d734:	2200      	movs	r2, #0
 800d736:	4619      	mov	r1, r3
 800d738:	f005 faa0 	bl	8012c7c <osMessagePut>
      break;
 800d73c:	e0ae      	b.n	800d89c <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	791b      	ldrb	r3, [r3, #4]
 800d748:	220d      	movs	r2, #13
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f001 ff66 	bl	800f61c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2208      	movs	r2, #8
 800d754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d758:	e0a9      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	791b      	ldrb	r3, [r3, #4]
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f008 f98f 	bl	8015a84 <USBH_LL_GetURBState>
 800d766:	4603      	mov	r3, r0
 800d768:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d76a:	7d3b      	ldrb	r3, [r7, #20]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d123      	bne.n	800d7b8 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f8c5 	bl	800d910 <USBH_MSC_DecodeCSW>
 800d786:	4603      	mov	r3, r0
 800d788:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d78a:	7d7b      	ldrb	r3, [r7, #21]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	75fb      	strb	r3, [r7, #23]
 800d794:	e001      	b.n	800d79a <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800d796:	2302      	movs	r3, #2
 800d798:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2202      	movs	r2, #2
 800d79e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	f005 fa63 	bl	8012c7c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d7b6:	e073      	b.n	800d8a0 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800d7b8:	7d3b      	ldrb	r3, [r7, #20]
 800d7ba:	2b05      	cmp	r3, #5
 800d7bc:	d170      	bne.n	800d8a0 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	2209      	movs	r2, #9
 800d7c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2202      	movs	r2, #2
 800d7ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d7da:	2200      	movs	r2, #0
 800d7dc:	4619      	mov	r1, r3
 800d7de:	f005 fa4d 	bl	8012c7c <osMessagePut>
      break;
 800d7e2:	e05d      	b.n	800d8a0 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d7e4:	78fb      	ldrb	r3, [r7, #3]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f864 	bl	800d8b8 <USBH_MSC_BOT_Abort>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d7f4:	7dbb      	ldrb	r3, [r7, #22]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d104      	bne.n	800d804 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2207      	movs	r2, #7
 800d7fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d802:	e04f      	b.n	800d8a4 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d804:	7dbb      	ldrb	r3, [r7, #22]
 800d806:	2b04      	cmp	r3, #4
 800d808:	d14c      	bne.n	800d8a4 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	220b      	movs	r2, #11
 800d80e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d812:	e047      	b.n	800d8a4 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	2201      	movs	r2, #1
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f84c 	bl	800d8b8 <USBH_MSC_BOT_Abort>
 800d820:	4603      	mov	r3, r0
 800d822:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d824:	7dbb      	ldrb	r3, [r7, #22]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d11d      	bne.n	800d866 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	795b      	ldrb	r3, [r3, #5]
 800d82e:	4619      	mov	r1, r3
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f008 f980 	bl	8015b36 <USBH_LL_GetToggle>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	7959      	ldrb	r1, [r3, #5]
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	f1c3 0301 	rsb	r3, r3, #1
 800d844:	b2db      	uxtb	r3, r3
 800d846:	461a      	mov	r2, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f008 f945 	bl	8015ad8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	791b      	ldrb	r3, [r3, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	4619      	mov	r1, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f008 f93e 	bl	8015ad8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	2209      	movs	r2, #9
 800d860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d864:	e020      	b.n	800d8a8 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800d866:	7dbb      	ldrb	r3, [r7, #22]
 800d868:	2b04      	cmp	r3, #4
 800d86a:	d11d      	bne.n	800d8a8 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	220b      	movs	r2, #11
 800d870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d874:	e018      	b.n	800d8a8 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fd67 	bl	800d34a <USBH_MSC_BOT_REQ_Reset>
 800d87c:	4603      	mov	r3, r0
 800d87e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d880:	7dfb      	ldrb	r3, [r7, #23]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d112      	bne.n	800d8ac <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800d88e:	e00d      	b.n	800d8ac <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800d890:	bf00      	nop
 800d892:	e00c      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d894:	bf00      	nop
 800d896:	e00a      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d898:	bf00      	nop
 800d89a:	e008      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d89c:	bf00      	nop
 800d89e:	e006      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d8a0:	bf00      	nop
 800d8a2:	e004      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d8a4:	bf00      	nop
 800d8a6:	e002      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d8a8:	bf00      	nop
 800d8aa:	e000      	b.n	800d8ae <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d8ac:	bf00      	nop
  }
  return status;
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3718      	adds	r7, #24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	70fb      	strb	r3, [r7, #3]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d8d2:	69db      	ldr	r3, [r3, #28]
 800d8d4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d8d6:	78bb      	ldrb	r3, [r7, #2]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <USBH_MSC_BOT_Abort+0x2a>
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d009      	beq.n	800d8f4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d8e0:	e011      	b.n	800d906 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	79db      	ldrb	r3, [r3, #7]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f9a6 	bl	800ec3a <USBH_ClrFeature>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8f2:	e008      	b.n	800d906 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	799b      	ldrb	r3, [r3, #6]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 f99d 	bl	800ec3a <USBH_ClrFeature>
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]
      break;
 800d904:	bf00      	nop
  }
  return status;
 800d906:	7bfb      	ldrb	r3, [r7, #15]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d922:	2301      	movs	r3, #1
 800d924:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	791b      	ldrb	r3, [r3, #4]
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f008 f817 	bl	8015960 <USBH_LL_GetLastXferSize>
 800d932:	4603      	mov	r3, r0
 800d934:	2b0d      	cmp	r3, #13
 800d936:	d002      	beq.n	800d93e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800d938:	2302      	movs	r3, #2
 800d93a:	73fb      	strb	r3, [r7, #15]
 800d93c:	e024      	b.n	800d988 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d942:	4a14      	ldr	r2, [pc, #80]	; (800d994 <USBH_MSC_DecodeCSW+0x84>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d11d      	bne.n	800d984 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d950:	429a      	cmp	r2, r3
 800d952:	d119      	bne.n	800d988 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800d95e:	2300      	movs	r3, #0
 800d960:	73fb      	strb	r3, [r7, #15]
 800d962:	e011      	b.n	800d988 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d102      	bne.n	800d974 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d96e:	2301      	movs	r3, #1
 800d970:	73fb      	strb	r3, [r7, #15]
 800d972:	e009      	b.n	800d988 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d104      	bne.n	800d988 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d97e:	2302      	movs	r3, #2
 800d980:	73fb      	strb	r3, [r7, #15]
 800d982:	e001      	b.n	800d988 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d984:	2302      	movs	r3, #2
 800d986:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	53425355 	.word	0x53425355

0800d998 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d002      	beq.n	800d9c2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d021      	beq.n	800da04 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d9c0:	e028      	b.n	800da14 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	220a      	movs	r2, #10
 800d9d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	3363      	adds	r3, #99	; 0x63
 800d9dc:	2210      	movs	r2, #16
 800d9de:	2100      	movs	r1, #0
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f008 fa6d 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800d9fe:	2301      	movs	r3, #1
 800da00:	73fb      	strb	r3, [r7, #15]
      break;
 800da02:	e007      	b.n	800da14 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fcfb 	bl	800d404 <USBH_MSC_BOT_Process>
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
      break;
 800da12:	bf00      	nop
  }

  return error;
 800da14:	7bfb      	ldrb	r3, [r7, #15]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b086      	sub	sp, #24
 800da22:	af00      	add	r7, sp, #0
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	460b      	mov	r3, r1
 800da28:	607a      	str	r2, [r7, #4]
 800da2a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800da2c:	2301      	movs	r3, #1
 800da2e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800da40:	2b01      	cmp	r3, #1
 800da42:	d002      	beq.n	800da4a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800da44:	2b02      	cmp	r3, #2
 800da46:	d027      	beq.n	800da98 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800da48:	e05f      	b.n	800db0a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	2208      	movs	r2, #8
 800da4e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	2280      	movs	r2, #128	; 0x80
 800da54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	220a      	movs	r2, #10
 800da5c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	3363      	adds	r3, #99	; 0x63
 800da64:	2210      	movs	r2, #16
 800da66:	2100      	movs	r1, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f008 fa29 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2225      	movs	r2, #37	; 0x25
 800da72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2202      	movs	r2, #2
 800da82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	f103 0210 	add.w	r2, r3, #16
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800da92:	2301      	movs	r3, #1
 800da94:	75fb      	strb	r3, [r7, #23]
      break;
 800da96:	e038      	b.n	800db0a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800da98:	7afb      	ldrb	r3, [r7, #11]
 800da9a:	4619      	mov	r1, r3
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f7ff fcb1 	bl	800d404 <USBH_MSC_BOT_Process>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d12d      	bne.n	800db08 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dab2:	3303      	adds	r3, #3
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dabe:	3302      	adds	r3, #2
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	021b      	lsls	r3, r3, #8
 800dac4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dacc:	3301      	adds	r3, #1
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800dad2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	061b      	lsls	r3, r3, #24
 800dade:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daea:	3307      	adds	r3, #7
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daf6:	3306      	adds	r3, #6
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	b29b      	uxth	r3, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	809a      	strh	r2, [r3, #4]
      break;
 800db08:	bf00      	nop
  }

  return error;
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3718      	adds	r7, #24
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	460b      	mov	r3, r1
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800db22:	2302      	movs	r3, #2
 800db24:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800db2c:	69db      	ldr	r3, [r3, #28]
 800db2e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800db36:	2b01      	cmp	r3, #1
 800db38:	d002      	beq.n	800db40 <USBH_MSC_SCSI_Inquiry+0x2c>
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d03d      	beq.n	800dbba <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800db3e:	e089      	b.n	800dc54 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	2224      	movs	r2, #36	; 0x24
 800db44:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2280      	movs	r2, #128	; 0x80
 800db4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	220a      	movs	r2, #10
 800db52:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	3363      	adds	r3, #99	; 0x63
 800db5a:	220a      	movs	r2, #10
 800db5c:	2100      	movs	r1, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f008 f9ae 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2212      	movs	r2, #18
 800db68:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800db6c:	7afb      	ldrb	r3, [r7, #11]
 800db6e:	015b      	lsls	r3, r3, #5
 800db70:	b2da      	uxtb	r2, r3
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2224      	movs	r2, #36	; 0x24
 800db8c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2202      	movs	r2, #2
 800dba4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	f103 0210 	add.w	r2, r3, #16
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
      break;
 800dbb8:	e04c      	b.n	800dc54 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dbba:	7afb      	ldrb	r3, [r7, #11]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7ff fc20 	bl	800d404 <USBH_MSC_BOT_Process>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d141      	bne.n	800dc52 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800dbce:	2222      	movs	r2, #34	; 0x22
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f008 f974 	bl	8015ec0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	f003 031f 	and.w	r3, r3, #31
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	095b      	lsrs	r3, r3, #5
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc00:	3301      	adds	r3, #1
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	b25b      	sxtb	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	da03      	bge.n	800dc12 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	709a      	strb	r2, [r3, #2]
 800dc10:	e002      	b.n	800dc18 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	1cd8      	adds	r0, r3, #3
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc22:	3308      	adds	r3, #8
 800dc24:	2208      	movs	r2, #8
 800dc26:	4619      	mov	r1, r3
 800dc28:	f008 f93c 	bl	8015ea4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f103 000c 	add.w	r0, r3, #12
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc38:	3310      	adds	r3, #16
 800dc3a:	2210      	movs	r2, #16
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f008 f931 	bl	8015ea4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	331d      	adds	r3, #29
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800dc4c:	3220      	adds	r2, #32
 800dc4e:	6812      	ldr	r2, [r2, #0]
 800dc50:	601a      	str	r2, [r3, #0]
      break;
 800dc52:	bf00      	nop
  }

  return error;
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b086      	sub	sp, #24
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	460b      	mov	r3, r1
 800dc68:	607a      	str	r2, [r7, #4]
 800dc6a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d002      	beq.n	800dc8a <USBH_MSC_SCSI_RequestSense+0x2c>
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d03d      	beq.n	800dd04 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800dc88:	e05d      	b.n	800dd46 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	220e      	movs	r2, #14
 800dc8e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	2280      	movs	r2, #128	; 0x80
 800dc94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	220a      	movs	r2, #10
 800dc9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	3363      	adds	r3, #99	; 0x63
 800dca4:	2210      	movs	r2, #16
 800dca6:	2100      	movs	r1, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f008 f909 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	2203      	movs	r2, #3
 800dcb2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800dcb6:	7afb      	ldrb	r3, [r7, #11]
 800dcb8:	015b      	lsls	r3, r3, #5
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	220e      	movs	r2, #14
 800dcd6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2202      	movs	r2, #2
 800dcee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	f103 0210 	add.w	r2, r3, #16
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	75fb      	strb	r3, [r7, #23]
      break;
 800dd02:	e020      	b.n	800dd46 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dd04:	7afb      	ldrb	r3, [r7, #11]
 800dd06:	4619      	mov	r1, r3
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f7ff fb7b 	bl	800d404 <USBH_MSC_BOT_Process>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800dd12:	7dfb      	ldrb	r3, [r7, #23]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d115      	bne.n	800dd44 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd1e:	3302      	adds	r3, #2
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 030f 	and.w	r3, r3, #15
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd32:	7b1a      	ldrb	r2, [r3, #12]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd3e:	7b5a      	ldrb	r2, [r3, #13]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	709a      	strb	r2, [r3, #2]
      break;
 800dd44:	bf00      	nop
  }

  return error;
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	607a      	str	r2, [r7, #4]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800dd60:	2302      	movs	r3, #2
 800dd62:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dd6a:	69db      	ldr	r3, [r3, #28]
 800dd6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d002      	beq.n	800dd7e <USBH_MSC_SCSI_Write+0x2e>
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d047      	beq.n	800de0c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dd7c:	e04e      	b.n	800de1c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800dd84:	461a      	mov	r2, r3
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	fb03 f202 	mul.w	r2, r3, r2
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	220a      	movs	r2, #10
 800dd9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3363      	adds	r3, #99	; 0x63
 800dda4:	2210      	movs	r2, #16
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f008 f889 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	222a      	movs	r2, #42	; 0x2a
 800ddb2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ddb6:	79fa      	ldrb	r2, [r7, #7]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ddbe:	79ba      	ldrb	r2, [r7, #6]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ddc6:	797a      	ldrb	r2, [r7, #5]
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ddce:	1d3b      	adds	r3, r7, #4
 800ddd0:	781a      	ldrb	r2, [r3, #0]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ddd8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800dde2:	f107 0320 	add.w	r3, r7, #32
 800dde6:	781a      	ldrb	r2, [r3, #0]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800de06:	2301      	movs	r3, #1
 800de08:	75fb      	strb	r3, [r7, #23]
      break;
 800de0a:	e007      	b.n	800de1c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800de0c:	7afb      	ldrb	r3, [r7, #11]
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff faf7 	bl	800d404 <USBH_MSC_BOT_Process>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]
      break;
 800de1a:	bf00      	nop
  }

  return error;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	460b      	mov	r3, r1
 800de34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800de36:	2302      	movs	r3, #2
 800de38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de40:	69db      	ldr	r3, [r3, #28]
 800de42:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d002      	beq.n	800de54 <USBH_MSC_SCSI_Read+0x2e>
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d047      	beq.n	800dee2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800de52:	e04e      	b.n	800def2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800de5a:	461a      	mov	r2, r3
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	fb03 f202 	mul.w	r2, r3, r2
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2280      	movs	r2, #128	; 0x80
 800de6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	220a      	movs	r2, #10
 800de72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	3363      	adds	r3, #99	; 0x63
 800de7a:	2210      	movs	r2, #16
 800de7c:	2100      	movs	r1, #0
 800de7e:	4618      	mov	r0, r3
 800de80:	f008 f81e 	bl	8015ec0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2228      	movs	r2, #40	; 0x28
 800de88:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800de8c:	79fa      	ldrb	r2, [r7, #7]
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800de94:	79ba      	ldrb	r2, [r7, #6]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800de9c:	797a      	ldrb	r2, [r7, #5]
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800dea4:	1d3b      	adds	r3, r7, #4
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800deae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800deb8:	f107 0320 	add.w	r3, r7, #32
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dedc:	2301      	movs	r3, #1
 800dede:	75fb      	strb	r3, [r7, #23]
      break;
 800dee0:	e007      	b.n	800def2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dee2:	7afb      	ldrb	r3, [r7, #11]
 800dee4:	4619      	mov	r1, r3
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7ff fa8c 	bl	800d404 <USBH_MSC_BOT_Process>
 800deec:	4603      	mov	r3, r0
 800deee:	75fb      	strb	r3, [r7, #23]
      break;
 800def0:	bf00      	nop
  }

  return error;
 800def2:	7dfb      	ldrb	r3, [r7, #23]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800defc:	b5b0      	push	{r4, r5, r7, lr}
 800defe:	b090      	sub	sp, #64	; 0x40
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800df10:	2302      	movs	r3, #2
 800df12:	e04d      	b.n	800dfb0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	79fa      	ldrb	r2, [r7, #7]
 800df18:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 f847 	bl	800dfc0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800df60:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <USBH_Init+0xbc>)
 800df62:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800df66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800df6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f004 fe59 	bl	8012c2a <osMessageCreate>
 800df78:	4602      	mov	r2, r0
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800df80:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <USBH_Init+0xc0>)
 800df82:	f107 0414 	add.w	r4, r7, #20
 800df86:	461d      	mov	r5, r3
 800df88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800df94:	f107 0314 	add.w	r3, r7, #20
 800df98:	68f9      	ldr	r1, [r7, #12]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f004 fd1b 	bl	80129d6 <osThreadCreate>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f007 fc25 	bl	80157f8 <USBH_LL_Init>

  return USBH_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3740      	adds	r7, #64	; 0x40
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bdb0      	pop	{r4, r5, r7, pc}
 800dfb8:	0801a640 	.word	0x0801a640
 800dfbc:	0801a650 	.word	0x0801a650

0800dfc0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	e008      	b.n	800dfe4 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	32e0      	adds	r2, #224	; 0xe0
 800dfd8:	2100      	movs	r1, #0
 800dfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b0e      	cmp	r3, #14
 800dfe8:	d9f3      	bls.n	800dfd2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e009      	b.n	800e004 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dffa:	2200      	movs	r2, #0
 800dffc:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3301      	adds	r3, #1
 800e002:	60fb      	str	r3, [r7, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e00a:	d3f1      	bcc.n	800dff0 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2240      	movs	r2, #64	; 0x40
 800e030:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	bc80      	pop	{r7}
 800e052:	4770      	bx	lr

0800e054 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d017      	beq.n	800e098 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10f      	bne.n	800e092 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e078:	1c59      	adds	r1, r3, #1
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	33dc      	adds	r3, #220	; 0xdc
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4413      	add	r3, r2
 800e088:	683a      	ldr	r2, [r7, #0]
 800e08a:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
 800e090:	e004      	b.n	800e09c <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e092:	2302      	movs	r3, #2
 800e094:	73fb      	strb	r3, [r7, #15]
 800e096:	e001      	b.n	800e09c <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e098:	2302      	movs	r3, #2
 800e09a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bc80      	pop	{r7}
 800e0a6:	4770      	bx	lr

0800e0a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800e0be:	78fa      	ldrb	r2, [r7, #3]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d204      	bcs.n	800e0ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800e0cc:	e001      	b.n	800e0d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bc80      	pop	{r7}
 800e0dc:	4770      	bx	lr

0800e0de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e0de:	b480      	push	{r7}
 800e0e0:	b087      	sub	sp, #28
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	4608      	mov	r0, r1
 800e0e8:	4611      	mov	r1, r2
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	70fb      	strb	r3, [r7, #3]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	70bb      	strb	r3, [r7, #2]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f203 3336 	addw	r3, r3, #822	; 0x336
 800e106:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e108:	e025      	b.n	800e156 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e10a:	7dfb      	ldrb	r3, [r7, #23]
 800e10c:	221a      	movs	r2, #26
 800e10e:	fb02 f303 	mul.w	r3, r2, r3
 800e112:	3308      	adds	r3, #8
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	3302      	adds	r3, #2
 800e11a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	795b      	ldrb	r3, [r3, #5]
 800e120:	78fa      	ldrb	r2, [r7, #3]
 800e122:	429a      	cmp	r2, r3
 800e124:	d002      	beq.n	800e12c <USBH_FindInterface+0x4e>
 800e126:	78fb      	ldrb	r3, [r7, #3]
 800e128:	2bff      	cmp	r3, #255	; 0xff
 800e12a:	d111      	bne.n	800e150 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e130:	78ba      	ldrb	r2, [r7, #2]
 800e132:	429a      	cmp	r2, r3
 800e134:	d002      	beq.n	800e13c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e136:	78bb      	ldrb	r3, [r7, #2]
 800e138:	2bff      	cmp	r3, #255	; 0xff
 800e13a:	d109      	bne.n	800e150 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e140:	787a      	ldrb	r2, [r7, #1]
 800e142:	429a      	cmp	r2, r3
 800e144:	d002      	beq.n	800e14c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e146:	787b      	ldrb	r3, [r7, #1]
 800e148:	2bff      	cmp	r3, #255	; 0xff
 800e14a:	d101      	bne.n	800e150 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
 800e14e:	e006      	b.n	800e15e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	3301      	adds	r3, #1
 800e154:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d9d6      	bls.n	800e10a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e15c:	23ff      	movs	r3, #255	; 0xff
}
 800e15e:	4618      	mov	r0, r3
 800e160:	371c      	adds	r7, #28
 800e162:	46bd      	mov	sp, r7
 800e164:	bc80      	pop	{r7}
 800e166:	4770      	bx	lr

0800e168 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f007 fb7d 	bl	8015870 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e176:	2101      	movs	r1, #1
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f007 fc96 	bl	8015aaa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af04      	add	r7, sp, #16
 800e18e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e190:	2302      	movs	r3, #2
 800e192:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d102      	bne.n	800e1aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	2b0b      	cmp	r3, #11
 800e1b2:	f200 81e4 	bhi.w	800e57e <USBH_Process+0x3f6>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <USBH_Process+0x34>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1ed 	.word	0x0800e1ed
 800e1c0:	0800e22b 	.word	0x0800e22b
 800e1c4:	0800e23f 	.word	0x0800e23f
 800e1c8:	0800e4fd 	.word	0x0800e4fd
 800e1cc:	0800e57f 	.word	0x0800e57f
 800e1d0:	0800e2ff 	.word	0x0800e2ff
 800e1d4:	0800e497 	.word	0x0800e497
 800e1d8:	0800e32f 	.word	0x0800e32f
 800e1dc:	0800e36b 	.word	0x0800e36b
 800e1e0:	0800e3a5 	.word	0x0800e3a5
 800e1e4:	0800e3ed 	.word	0x0800e3ed
 800e1e8:	0800e4e5 	.word	0x0800e4e5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 81c4 	beq.w	800e582 <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e200:	20c8      	movs	r0, #200	; 0xc8
 800e202:	f007 fcc7 	bl	8015b94 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f007 fb8f 	bl	801592a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e220:	2200      	movs	r2, #0
 800e222:	4619      	mov	r1, r3
 800e224:	f004 fd2a 	bl	8012c7c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e228:	e1ab      	b.n	800e582 <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e230:	2b01      	cmp	r3, #1
 800e232:	f040 81a8 	bne.w	800e586 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2202      	movs	r2, #2
 800e23a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e23c:	e1a3      	b.n	800e586 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e24e:	2104      	movs	r1, #4
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e254:	2064      	movs	r0, #100	; 0x64
 800e256:	f007 fc9d 	bl	8015b94 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f007 fb3e 	bl	80158dc <USBH_LL_GetSpeed>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2205      	movs	r2, #5
 800e26e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e270:	2100      	movs	r1, #0
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f001 fa1f 	bl	800f6b6 <USBH_AllocPipe>
 800e278:	4603      	mov	r3, r0
 800e27a:	461a      	mov	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e280:	2180      	movs	r1, #128	; 0x80
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 fa17 	bl	800f6b6 <USBH_AllocPipe>
 800e288:	4603      	mov	r3, r0
 800e28a:	461a      	mov	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	7919      	ldrb	r1, [r3, #4]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	9202      	str	r2, [sp, #8]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	9201      	str	r2, [sp, #4]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2280      	movs	r2, #128	; 0x80
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f001 f9d0 	bl	800f658 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	7959      	ldrb	r1, [r3, #5]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e2cc:	b292      	uxth	r2, r2
 800e2ce:	9202      	str	r2, [sp, #8]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	9201      	str	r2, [sp, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2200      	movs	r2, #0
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f001 f9bc 	bl	800f658 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f004 fcc0 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e2fc:	e14c      	b.n	800e598 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f950 	bl	800e5a4 <USBH_HandleEnum>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	f040 813f 	bne.w	800e58a <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d103      	bne.n	800e326 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2208      	movs	r2, #8
 800e322:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800e324:	e131      	b.n	800e58a <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2207      	movs	r2, #7
 800e32a:	701a      	strb	r2, [r3, #0]
      break;
 800e32c:	e12d      	b.n	800e58a <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 812a 	beq.w	800e58e <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e340:	2101      	movs	r1, #1
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2208      	movs	r2, #8
 800e34a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2205      	movs	r2, #5
 800e350:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e360:	2200      	movs	r2, #0
 800e362:	4619      	mov	r1, r3
 800e364:	f004 fc8a 	bl	8012c7c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e368:	e111      	b.n	800e58e <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800e370:	b29b      	uxth	r3, r3
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fc19 	bl	800ebac <USBH_SetCfg>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2209      	movs	r2, #9
 800e384:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e39a:	2200      	movs	r2, #0
 800e39c:	4619      	mov	r1, r3
 800e39e:	f004 fc6d 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e3a2:	e0f9      	b.n	800e598 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e3aa:	f003 0320 	and.w	r3, r3, #32
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00a      	beq.n	800e3c8 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fc1c 	bl	800ebf2 <USBH_SetFeature>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d106      	bne.n	800e3ce <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	220a      	movs	r2, #10
 800e3c4:	701a      	strb	r2, [r3, #0]
 800e3c6:	e002      	b.n	800e3ce <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	220a      	movs	r2, #10
 800e3cc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f004 fc49 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e3ea:	e0d5      	b.n	800e598 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d040      	beq.n	800e478 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e3fe:	2300      	movs	r3, #0
 800e400:	73fb      	strb	r3, [r7, #15]
 800e402:	e017      	b.n	800e434 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	33dc      	adds	r3, #220	; 0xdc
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	791a      	ldrb	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800e418:	429a      	cmp	r2, r3
 800e41a:	d108      	bne.n	800e42e <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	33dc      	adds	r3, #220	; 0xdc
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
 800e430:	3301      	adds	r3, #1
 800e432:	73fb      	strb	r3, [r7, #15]
 800e434:	7bfb      	ldrb	r3, [r7, #15]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0e4      	beq.n	800e404 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e440:	2b00      	cmp	r3, #0
 800e442:	d016      	beq.n	800e472 <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	4798      	blx	r3
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d109      	bne.n	800e46a <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2206      	movs	r2, #6
 800e45a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e462:	2103      	movs	r1, #3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	4798      	blx	r3
 800e468:	e006      	b.n	800e478 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	220d      	movs	r2, #13
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e002      	b.n	800e478 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	220d      	movs	r2, #13
 800e476:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2205      	movs	r2, #5
 800e47c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e48c:	2200      	movs	r2, #0
 800e48e:	4619      	mov	r1, r3
 800e490:	f004 fbf4 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e494:	e080      	b.n	800e598 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00f      	beq.n	800e4c0 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	4798      	blx	r3
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d16c      	bne.n	800e592 <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	220b      	movs	r2, #11
 800e4bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e4be:	e068      	b.n	800e592 <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	220d      	movs	r2, #13
 800e4c4:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2205      	movs	r2, #5
 800e4ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e4da:	2200      	movs	r2, #0
 800e4dc:	4619      	mov	r1, r3
 800e4de:	f004 fbcd 	bl	8012c7c <osMessagePut>
      break;
 800e4e2:	e056      	b.n	800e592 <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d053      	beq.n	800e596 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	4798      	blx	r3
      }
      break;
 800e4fa:	e04c      	b.n	800e596 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7ff fd5b 	bl	800dfc0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e510:	2b00      	cmp	r3, #0
 800e512:	d009      	beq.n	800e528 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e538:	2105      	movs	r1, #5
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b01      	cmp	r3, #1
 800e548:	d107      	bne.n	800e55a <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fe08 	bl	800e168 <USBH_Start>
 800e558:	e002      	b.n	800e560 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f007 f988 	bl	8015870 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e574:	2200      	movs	r2, #0
 800e576:	4619      	mov	r1, r3
 800e578:	f004 fb80 	bl	8012c7c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e57c:	e00c      	b.n	800e598 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800e57e:	bf00      	nop
 800e580:	e00a      	b.n	800e598 <USBH_Process+0x410>
      break;
 800e582:	bf00      	nop
 800e584:	e008      	b.n	800e598 <USBH_Process+0x410>
      break;
 800e586:	bf00      	nop
 800e588:	e006      	b.n	800e598 <USBH_Process+0x410>
      break;
 800e58a:	bf00      	nop
 800e58c:	e004      	b.n	800e598 <USBH_Process+0x410>
    break;
 800e58e:	bf00      	nop
 800e590:	e002      	b.n	800e598 <USBH_Process+0x410>
      break;
 800e592:	bf00      	nop
 800e594:	e000      	b.n	800e598 <USBH_Process+0x410>
      break;
 800e596:	bf00      	nop
  }
  return USBH_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop

0800e5a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af04      	add	r7, sp, #16
 800e5aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	785b      	ldrb	r3, [r3, #1]
 800e5b4:	2b07      	cmp	r3, #7
 800e5b6:	f200 8132 	bhi.w	800e81e <USBH_HandleEnum+0x27a>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <USBH_HandleEnum+0x1c>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e5e1 	.word	0x0800e5e1
 800e5c4:	0800e653 	.word	0x0800e653
 800e5c8:	0800e66b 	.word	0x0800e66b
 800e5cc:	0800e6e1 	.word	0x0800e6e1
 800e5d0:	0800e6f9 	.word	0x0800e6f9
 800e5d4:	0800e717 	.word	0x0800e717
 800e5d8:	0800e783 	.word	0x0800e783
 800e5dc:	0800e7d3 	.word	0x0800e7d3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800e5e0:	2108      	movs	r1, #8
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa12 	bl	800ea0c <USBH_Get_DevDesc>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f040 8119 	bne.w	800e822 <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	7919      	ldrb	r1, [r3, #4]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e614:	b292      	uxth	r2, r2
 800e616:	9202      	str	r2, [sp, #8]
 800e618:	2200      	movs	r2, #0
 800e61a:	9201      	str	r2, [sp, #4]
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	4603      	mov	r3, r0
 800e620:	2280      	movs	r2, #128	; 0x80
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f001 f818 	bl	800f658 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7959      	ldrb	r1, [r3, #5]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e63c:	b292      	uxth	r2, r2
 800e63e:	9202      	str	r2, [sp, #8]
 800e640:	2200      	movs	r2, #0
 800e642:	9201      	str	r2, [sp, #4]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	4603      	mov	r3, r0
 800e648:	2200      	movs	r2, #0
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f001 f804 	bl	800f658 <USBH_OpenPipe>
      }
      break;
 800e650:	e0e7      	b.n	800e822 <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800e652:	2112      	movs	r1, #18
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f9d9 	bl	800ea0c <USBH_Get_DevDesc>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f040 80e2 	bne.w	800e826 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2202      	movs	r2, #2
 800e666:	705a      	strb	r2, [r3, #1]

      }
      break;
 800e668:	e0dd      	b.n	800e826 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800e66a:	2101      	movs	r1, #1
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 fa79 	bl	800eb64 <USBH_SetAddress>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	f040 80d8 	bne.w	800e82a <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800e67a:	2002      	movs	r0, #2
 800e67c:	f007 fa8a 	bl	8015b94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2203      	movs	r2, #3
 800e68c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7919      	ldrb	r1, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e6a2:	b292      	uxth	r2, r2
 800e6a4:	9202      	str	r2, [sp, #8]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	9201      	str	r2, [sp, #4]
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2280      	movs	r2, #128	; 0x80
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 ffd1 	bl	800f658 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	7959      	ldrb	r1, [r3, #5]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e6ca:	b292      	uxth	r2, r2
 800e6cc:	9202      	str	r2, [sp, #8]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 ffbd 	bl	800f658 <USBH_OpenPipe>
      }
      break;
 800e6de:	e0a4      	b.n	800e82a <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800e6e0:	2109      	movs	r1, #9
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f9ba 	bl	800ea5c <USBH_Get_CfgDesc>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f040 809f 	bne.w	800e82e <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2204      	movs	r2, #4
 800e6f4:	705a      	strb	r2, [r3, #1]
      }
      break;
 800e6f6:	e09a      	b.n	800e82e <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800e6fe:	4619      	mov	r1, r3
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f9ab 	bl	800ea5c <USBH_Get_CfgDesc>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f040 8092 	bne.w	800e832 <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2205      	movs	r2, #5
 800e712:	705a      	strb	r2, [r3, #1]
      }
      break;
 800e714:	e08d      	b.n	800e832 <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d01e      	beq.n	800e75e <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e72c:	23ff      	movs	r3, #255	; 0xff
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f9b8 	bl	800eaa4 <USBH_Get_StringDesc>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d17d      	bne.n	800e836 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2206      	movs	r2, #6
 800e73e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2205      	movs	r2, #5
 800e744:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e754:	2200      	movs	r2, #0
 800e756:	4619      	mov	r1, r3
 800e758:	f004 fa90 	bl	8012c7c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e75c:	e06b      	b.n	800e836 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2206      	movs	r2, #6
 800e762:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2205      	movs	r2, #5
 800e768:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e778:	2200      	movs	r2, #0
 800e77a:	4619      	mov	r1, r3
 800e77c:	f004 fa7e 	bl	8012c7c <osMessagePut>
      break;
 800e780:	e059      	b.n	800e836 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d010      	beq.n	800e7ae <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e798:	23ff      	movs	r3, #255	; 0xff
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f982 	bl	800eaa4 <USBH_Get_StringDesc>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d149      	bne.n	800e83a <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2207      	movs	r2, #7
 800e7aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e7ac:	e045      	b.n	800e83a <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2207      	movs	r2, #7
 800e7b2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2205      	movs	r2, #5
 800e7b8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	f004 fa56 	bl	8012c7c <osMessagePut>
      break;
 800e7d0:	e033      	b.n	800e83a <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00f      	beq.n	800e7fc <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e7e8:	23ff      	movs	r3, #255	; 0xff
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f95a 	bl	800eaa4 <USBH_Get_StringDesc>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d123      	bne.n	800e83e <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e7fa:	e020      	b.n	800e83e <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2205      	movs	r2, #5
 800e804:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e814:	2200      	movs	r2, #0
 800e816:	4619      	mov	r1, r3
 800e818:	f004 fa30 	bl	8012c7c <osMessagePut>
      break;
 800e81c:	e00f      	b.n	800e83e <USBH_HandleEnum+0x29a>

    default:
      break;
 800e81e:	bf00      	nop
 800e820:	e00e      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e822:	bf00      	nop
 800e824:	e00c      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e826:	bf00      	nop
 800e828:	e00a      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e82a:	bf00      	nop
 800e82c:	e008      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e82e:	bf00      	nop
 800e830:	e006      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e832:	bf00      	nop
 800e834:	e004      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e836:	bf00      	nop
 800e838:	e002      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e83a:	bf00      	nop
 800e83c:	e000      	b.n	800e840 <USBH_HandleEnum+0x29c>
      break;
 800e83e:	bf00      	nop
  }
  return Status;
 800e840:	7bfb      	ldrb	r3, [r7, #15]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop

0800e84c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800e85e:	bf00      	nop
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	bc80      	pop	{r7}
 800e866:	4770      	bx	lr

0800e868 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800e876:	1c5a      	adds	r2, r3, #1
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f804 	bl	800e88c <USBH_HandleSof>
}
 800e884:	bf00      	nop
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b0b      	cmp	r3, #11
 800e89c:	d10a      	bne.n	800e8b4 <USBH_HandleSof+0x28>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d005      	beq.n	800e8b4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	4798      	blx	r3
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	f004 f9ca 	bl	8012c7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e8e8:	bf00      	nop
}
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800e900:	bf00      	nop
}
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	bc80      	pop	{r7}
 800e908:	4770      	bx	lr

0800e90a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b082      	sub	sp, #8
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e93e:	2200      	movs	r2, #0
 800e940:	4619      	mov	r1, r3
 800e942:	f004 f99b 	bl	8012c7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f006 ff98 	bl	80158a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	791b      	ldrb	r3, [r3, #4]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 feba 	bl	800f6f6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	795b      	ldrb	r3, [r3, #5]
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 feb4 	bl	800f6f6 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2201      	movs	r2, #1
 800e992:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f004 f969 	bl	8012c7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800e9c2:	f107 030c 	add.w	r3, r7, #12
 800e9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f004 f996 	bl	8012cfc <osMessageGet>
    if (event.status == osEventMessage)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2b10      	cmp	r3, #16
 800e9d4:	d1f2      	bne.n	800e9bc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff fbd6 	bl	800e188 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e9dc:	e7ee      	b.n	800e9bc <USBH_Process_OS+0x8>

0800e9de <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f004 f93d 	bl	8012c7c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	4613      	mov	r3, r2
 800ea26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 f864 	bl	800eafa <USBH_GetDescriptor>
 800ea32:	4603      	mov	r3, r0
 800ea34:	73fb      	strb	r3, [r7, #15]
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10a      	bne.n	800ea52 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ea48:	78fa      	ldrb	r2, [r7, #3]
 800ea4a:	b292      	uxth	r2, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f000 f918 	bl	800ec82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b086      	sub	sp, #24
 800ea60:	af02      	add	r7, sp, #8
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	460b      	mov	r3, r1
 800ea66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	331c      	adds	r3, #28
 800ea6c:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ea6e:	887b      	ldrh	r3, [r7, #2]
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea78:	2100      	movs	r1, #0
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f83d 	bl	800eafa <USBH_GetDescriptor>
 800ea80:	4603      	mov	r3, r0
 800ea82:	72fb      	strb	r3, [r7, #11]
 800ea84:	7afb      	ldrb	r3, [r7, #11]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d107      	bne.n	800ea9a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f203 3336 	addw	r3, r3, #822	; 0x336
 800ea90:	887a      	ldrh	r2, [r7, #2]
 800ea92:	68f9      	ldr	r1, [r7, #12]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 f963 	bl	800ed60 <USBH_ParseCfgDesc>
  }

  return status;
 800ea9a:	7afb      	ldrb	r3, [r7, #11]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	607a      	str	r2, [r7, #4]
 800eaae:	461a      	mov	r2, r3
 800eab0:	460b      	mov	r3, r1
 800eab2:	72fb      	strb	r3, [r7, #11]
 800eab4:	4613      	mov	r3, r2
 800eab6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800eab8:	7afb      	ldrb	r3, [r7, #11]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800eac0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800eac8:	893b      	ldrh	r3, [r7, #8]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	460b      	mov	r3, r1
 800eace:	2100      	movs	r1, #0
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f812 	bl	800eafa <USBH_GetDescriptor>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75fb      	strb	r3, [r7, #23]
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d107      	bne.n	800eaf0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eae6:	893a      	ldrh	r2, [r7, #8]
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 fa34 	bl	800ef58 <USBH_ParseStringDesc>
  }

  return status;
 800eaf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3718      	adds	r7, #24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b084      	sub	sp, #16
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	607b      	str	r3, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	72fb      	strb	r3, [r7, #11]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	789b      	ldrb	r3, [r3, #2]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d11c      	bne.n	800eb4e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800eb14:	7afb      	ldrb	r3, [r7, #11]
 800eb16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2206      	movs	r2, #6
 800eb24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	893a      	ldrh	r2, [r7, #8]
 800eb2a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800eb2c:	893b      	ldrh	r3, [r7, #8]
 800eb2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb36:	d104      	bne.n	800eb42 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f240 4209 	movw	r2, #1033	; 0x409
 800eb3e:	829a      	strh	r2, [r3, #20]
 800eb40:	e002      	b.n	800eb48 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2200      	movs	r2, #0
 800eb46:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	8b3a      	ldrh	r2, [r7, #24]
 800eb4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800eb4e:	8b3b      	ldrh	r3, [r7, #24]
 800eb50:	461a      	mov	r2, r3
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f000 fa4b 	bl	800eff0 <USBH_CtlReq>
 800eb5a:	4603      	mov	r3, r0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	789b      	ldrb	r3, [r3, #2]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d10f      	bne.n	800eb98 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2205      	movs	r2, #5
 800eb82:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800eb84:	78fb      	ldrb	r3, [r7, #3]
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eb98:	2200      	movs	r2, #0
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fa27 	bl	800eff0 <USBH_CtlReq>
 800eba2:	4603      	mov	r3, r0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	789b      	ldrb	r3, [r3, #2]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d10e      	bne.n	800ebde <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2209      	movs	r2, #9
 800ebca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	887a      	ldrh	r2, [r7, #2]
 800ebd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ebde:	2200      	movs	r2, #0
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 fa04 	bl	800eff0 <USBH_CtlReq>
 800ebe8:	4603      	mov	r3, r0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	789b      	ldrb	r3, [r3, #2]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d10f      	bne.n	800ec26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2203      	movs	r2, #3
 800ec10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ec12:	78fb      	ldrb	r3, [r7, #3]
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ec26:	2200      	movs	r2, #0
 800ec28:	2100      	movs	r1, #0
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 f9e0 	bl	800eff0 <USBH_CtlReq>
 800ec30:	4603      	mov	r3, r0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	460b      	mov	r3, r1
 800ec44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	789b      	ldrb	r3, [r3, #2]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d10f      	bne.n	800ec6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2202      	movs	r2, #2
 800ec52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ec60:	78fb      	ldrb	r3, [r7, #3]
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2100      	movs	r1, #0
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f9bc 	bl	800eff0 <USBH_CtlReq>
 800ec78:	4603      	mov	r3, r0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b085      	sub	sp, #20
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	781a      	ldrb	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	785a      	ldrb	r2, [r3, #1]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	3302      	adds	r3, #2
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	3303      	adds	r3, #3
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	021b      	lsls	r3, r3, #8
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	791a      	ldrb	r2, [r3, #4]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	795a      	ldrb	r2, [r3, #5]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	799a      	ldrb	r2, [r3, #6]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	79da      	ldrb	r2, [r3, #7]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ecdc:	88fb      	ldrh	r3, [r7, #6]
 800ecde:	2b08      	cmp	r3, #8
 800ece0:	d939      	bls.n	800ed56 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	3308      	adds	r3, #8
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	3309      	adds	r3, #9
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	021b      	lsls	r3, r3, #8
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	330a      	adds	r3, #10
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	330b      	adds	r3, #11
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	021b      	lsls	r3, r3, #8
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4313      	orrs	r3, r2
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	330c      	adds	r3, #12
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	330d      	adds	r3, #13
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	021b      	lsls	r3, r3, #8
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	7b9a      	ldrb	r2, [r3, #14]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	7bda      	ldrb	r2, [r3, #15]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	7c1a      	ldrb	r2, [r3, #16]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	7c5a      	ldrb	r2, [r3, #17]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	745a      	strb	r2, [r3, #17]
  }
}
 800ed56:	bf00      	nop
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bc80      	pop	{r7}
 800ed5e:	4770      	bx	lr

0800ed60 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b08a      	sub	sp, #40	; 0x28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	781a      	ldrb	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	785a      	ldrb	r2, [r3, #1]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3302      	adds	r3, #2
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	3303      	adds	r3, #3
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	021b      	lsls	r3, r3, #8
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	4313      	orrs	r3, r2
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	791a      	ldrb	r2, [r3, #4]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	795a      	ldrb	r2, [r3, #5]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	799a      	ldrb	r2, [r3, #6]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	79da      	ldrb	r2, [r3, #7]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	7a1a      	ldrb	r2, [r3, #8]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800edd6:	88fb      	ldrh	r3, [r7, #6]
 800edd8:	2b09      	cmp	r3, #9
 800edda:	d95f      	bls.n	800ee9c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800eddc:	2309      	movs	r3, #9
 800edde:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ede4:	e051      	b.n	800ee8a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ede6:	f107 0316 	add.w	r3, r7, #22
 800edea:	4619      	mov	r1, r3
 800edec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edee:	f000 f8e5 	bl	800efbc <USBH_GetNextDesc>
 800edf2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	785b      	ldrb	r3, [r3, #1]
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d146      	bne.n	800ee8a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800edfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee00:	221a      	movs	r2, #26
 800ee02:	fb02 f303 	mul.w	r3, r2, r3
 800ee06:	3308      	adds	r3, #8
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	3302      	adds	r3, #2
 800ee0e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ee10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee12:	69f8      	ldr	r0, [r7, #28]
 800ee14:	f000 f846 	bl	800eea4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ee22:	e022      	b.n	800ee6a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ee24:	f107 0316 	add.w	r3, r7, #22
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee2c:	f000 f8c6 	bl	800efbc <USBH_GetNextDesc>
 800ee30:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	785b      	ldrb	r3, [r3, #1]
 800ee36:	2b05      	cmp	r3, #5
 800ee38:	d117      	bne.n	800ee6a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ee3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee3e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ee42:	3201      	adds	r2, #1
 800ee44:	00d2      	lsls	r2, r2, #3
 800ee46:	211a      	movs	r1, #26
 800ee48:	fb01 f303 	mul.w	r3, r1, r3
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3308      	adds	r3, #8
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	4413      	add	r3, r2
 800ee54:	3304      	adds	r3, #4
 800ee56:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ee58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee5a:	69b8      	ldr	r0, [r7, #24]
 800ee5c:	f000 f850 	bl	800ef00 <USBH_ParseEPDesc>
            ep_ix++;
 800ee60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee64:	3301      	adds	r3, #1
 800ee66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	791b      	ldrb	r3, [r3, #4]
 800ee6e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d204      	bcs.n	800ee80 <USBH_ParseCfgDesc+0x120>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	885a      	ldrh	r2, [r3, #2]
 800ee7a:	8afb      	ldrh	r3, [r7, #22]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d8d1      	bhi.n	800ee24 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ee80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee84:	3301      	adds	r3, #1
 800ee86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ee8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d804      	bhi.n	800ee9c <USBH_ParseCfgDesc+0x13c>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	885a      	ldrh	r2, [r3, #2]
 800ee96:	8afb      	ldrh	r3, [r7, #22]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d8a4      	bhi.n	800ede6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ee9c:	bf00      	nop
 800ee9e:	3728      	adds	r7, #40	; 0x28
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781a      	ldrb	r2, [r3, #0]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	785a      	ldrb	r2, [r3, #1]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	789a      	ldrb	r2, [r3, #2]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	78da      	ldrb	r2, [r3, #3]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	791a      	ldrb	r2, [r3, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	795a      	ldrb	r2, [r3, #5]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	799a      	ldrb	r2, [r3, #6]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	79da      	ldrb	r2, [r3, #7]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	7a1a      	ldrb	r2, [r3, #8]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	721a      	strb	r2, [r3, #8]
}
 800eef6:	bf00      	nop
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bc80      	pop	{r7}
 800eefe:	4770      	bx	lr

0800ef00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781a      	ldrb	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	785a      	ldrb	r2, [r3, #1]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	789a      	ldrb	r2, [r3, #2]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	78da      	ldrb	r2, [r3, #3]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	3305      	adds	r3, #5
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	799a      	ldrb	r2, [r3, #6]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	719a      	strb	r2, [r3, #6]
}
 800ef4e:	bf00      	nop
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bc80      	pop	{r7}
 800ef56:	4770      	bx	lr

0800ef58 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	4613      	mov	r3, r2
 800ef64:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d120      	bne.n	800efb2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	1e9a      	subs	r2, r3, #2
 800ef76:	88fb      	ldrh	r3, [r7, #6]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	bf28      	it	cs
 800ef7c:	4613      	movcs	r3, r2
 800ef7e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	3302      	adds	r3, #2
 800ef84:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ef86:	2300      	movs	r3, #0
 800ef88:	82fb      	strh	r3, [r7, #22]
 800ef8a:	e00b      	b.n	800efa4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ef8c:	8afb      	ldrh	r3, [r7, #22]
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	781a      	ldrb	r2, [r3, #0]
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ef9e:	8afb      	ldrh	r3, [r7, #22]
 800efa0:	3302      	adds	r3, #2
 800efa2:	82fb      	strh	r3, [r7, #22]
 800efa4:	8afa      	ldrh	r2, [r7, #22]
 800efa6:	8abb      	ldrh	r3, [r7, #20]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d3ef      	bcc.n	800ef8c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2200      	movs	r2, #0
 800efb0:	701a      	strb	r2, [r3, #0]
  }
}
 800efb2:	bf00      	nop
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bc80      	pop	{r7}
 800efba:	4770      	bx	lr

0800efbc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	881a      	ldrh	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	b29b      	uxth	r3, r3
 800efd0:	4413      	add	r3, r2
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4413      	add	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800efe4:	68fb      	ldr	r3, [r7, #12]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	bc80      	pop	{r7}
 800efee:	4770      	bx	lr

0800eff0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800effe:	2301      	movs	r3, #1
 800f000:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	789b      	ldrb	r3, [r3, #2]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d002      	beq.n	800f010 <USBH_CtlReq+0x20>
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d01d      	beq.n	800f04a <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800f00e:	e042      	b.n	800f096 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	88fa      	ldrh	r2, [r7, #6]
 800f01a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2201      	movs	r2, #1
 800f020:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2202      	movs	r2, #2
 800f026:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f028:	2301      	movs	r3, #1
 800f02a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2203      	movs	r2, #3
 800f030:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f040:	2200      	movs	r2, #0
 800f042:	4619      	mov	r1, r3
 800f044:	f003 fe1a 	bl	8012c7c <osMessagePut>
      break;
 800f048:	e025      	b.n	800f096 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f828 	bl	800f0a0 <USBH_HandleControl>
 800f050:	4603      	mov	r3, r0
 800f052:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d108      	bne.n	800f06c <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	75fb      	strb	r3, [r7, #23]
      break;
 800f06a:	e013      	b.n	800f094 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d108      	bne.n	800f084 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2201      	movs	r2, #1
 800f076:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f07e:	2303      	movs	r3, #3
 800f080:	75fb      	strb	r3, [r7, #23]
      break;
 800f082:	e007      	b.n	800f094 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800f084:	7dfb      	ldrb	r3, [r7, #23]
 800f086:	2b02      	cmp	r3, #2
 800f088:	d104      	bne.n	800f094 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2201      	movs	r2, #1
 800f08e:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800f090:	2302      	movs	r3, #2
 800f092:	75fb      	strb	r3, [r7, #23]
      break;
 800f094:	bf00      	nop
  }
  return status;
 800f096:	7dfb      	ldrb	r3, [r7, #23]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3718      	adds	r7, #24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af02      	add	r7, sp, #8
 800f0a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	7e1b      	ldrb	r3, [r3, #24]
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	2b0a      	cmp	r3, #10
 800f0b8:	f200 821d 	bhi.w	800f4f6 <USBH_HandleControl+0x456>
 800f0bc:	a201      	add	r2, pc, #4	; (adr r2, 800f0c4 <USBH_HandleControl+0x24>)
 800f0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c2:	bf00      	nop
 800f0c4:	0800f0f1 	.word	0x0800f0f1
 800f0c8:	0800f10b 	.word	0x0800f10b
 800f0cc:	0800f1ad 	.word	0x0800f1ad
 800f0d0:	0800f1d3 	.word	0x0800f1d3
 800f0d4:	0800f25f 	.word	0x0800f25f
 800f0d8:	0800f289 	.word	0x0800f289
 800f0dc:	0800f34b 	.word	0x0800f34b
 800f0e0:	0800f36d 	.word	0x0800f36d
 800f0e4:	0800f3ff 	.word	0x0800f3ff
 800f0e8:	0800f425 	.word	0x0800f425
 800f0ec:	0800f4b7 	.word	0x0800f4b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f103 0110 	add.w	r1, r3, #16
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	795b      	ldrb	r3, [r3, #5]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fa0b 	bl	800f518 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2202      	movs	r2, #2
 800f106:	761a      	strb	r2, [r3, #24]
      break;
 800f108:	e200      	b.n	800f50c <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	795b      	ldrb	r3, [r3, #5]
 800f10e:	4619      	mov	r1, r3
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f006 fcb7 	bl	8015a84 <USBH_LL_GetURBState>
 800f116:	4603      	mov	r3, r0
 800f118:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d12c      	bne.n	800f17a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7c1b      	ldrb	r3, [r3, #16]
 800f124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f128:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8adb      	ldrh	r3, [r3, #22]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f132:	7b7b      	ldrb	r3, [r7, #13]
 800f134:	2b80      	cmp	r3, #128	; 0x80
 800f136:	d103      	bne.n	800f140 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2203      	movs	r2, #3
 800f13c:	761a      	strb	r2, [r3, #24]
 800f13e:	e00d      	b.n	800f15c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2205      	movs	r2, #5
 800f144:	761a      	strb	r2, [r3, #24]
 800f146:	e009      	b.n	800f15c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f148:	7b7b      	ldrb	r3, [r7, #13]
 800f14a:	2b80      	cmp	r3, #128	; 0x80
 800f14c:	d103      	bne.n	800f156 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2209      	movs	r2, #9
 800f152:	761a      	strb	r2, [r3, #24]
 800f154:	e002      	b.n	800f15c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2207      	movs	r2, #7
 800f15a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2203      	movs	r2, #3
 800f160:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f170:	2200      	movs	r2, #0
 800f172:	4619      	mov	r1, r3
 800f174:	f003 fd82 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f178:	e1bf      	b.n	800f4fa <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f17a:	7bbb      	ldrb	r3, [r7, #14]
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d003      	beq.n	800f188 <USBH_HandleControl+0xe8>
 800f180:	7bbb      	ldrb	r3, [r7, #14]
 800f182:	2b02      	cmp	r3, #2
 800f184:	f040 81b9 	bne.w	800f4fa <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	220b      	movs	r2, #11
 800f18c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2203      	movs	r2, #3
 800f192:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	f003 fd69 	bl	8012c7c <osMessagePut>
      break;
 800f1aa:	e1a6      	b.n	800f4fa <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6899      	ldr	r1, [r3, #8]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	899a      	ldrh	r2, [r3, #12]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	791b      	ldrb	r3, [r3, #4]
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f9e6 	bl	800f596 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2204      	movs	r2, #4
 800f1ce:	761a      	strb	r2, [r3, #24]
      break;
 800f1d0:	e19c      	b.n	800f50c <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	791b      	ldrb	r3, [r3, #4]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f006 fc53 	bl	8015a84 <USBH_LL_GetURBState>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f1e2:	7bbb      	ldrb	r3, [r7, #14]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d110      	bne.n	800f20a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2209      	movs	r2, #9
 800f1ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2203      	movs	r2, #3
 800f1f2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f202:	2200      	movs	r2, #0
 800f204:	4619      	mov	r1, r3
 800f206:	f003 fd39 	bl	8012c7c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	2b05      	cmp	r3, #5
 800f20e:	d110      	bne.n	800f232 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f210:	2303      	movs	r3, #3
 800f212:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2203      	movs	r2, #3
 800f218:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f228:	2200      	movs	r2, #0
 800f22a:	4619      	mov	r1, r3
 800f22c:	f003 fd26 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f230:	e165      	b.n	800f4fe <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800f232:	7bbb      	ldrb	r3, [r7, #14]
 800f234:	2b04      	cmp	r3, #4
 800f236:	f040 8162 	bne.w	800f4fe <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	220b      	movs	r2, #11
 800f23e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2203      	movs	r2, #3
 800f244:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f254:	2200      	movs	r2, #0
 800f256:	4619      	mov	r1, r3
 800f258:	f003 fd10 	bl	8012c7c <osMessagePut>
      break;
 800f25c:	e14f      	b.n	800f4fe <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6899      	ldr	r1, [r3, #8]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	899a      	ldrh	r2, [r3, #12]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	795b      	ldrb	r3, [r3, #5]
 800f26a:	2001      	movs	r0, #1
 800f26c:	9000      	str	r0, [sp, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f96c 	bl	800f54c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2206      	movs	r2, #6
 800f284:	761a      	strb	r2, [r3, #24]
      break;
 800f286:	e141      	b.n	800f50c <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	795b      	ldrb	r3, [r3, #5]
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f006 fbf8 	bl	8015a84 <USBH_LL_GetURBState>
 800f294:	4603      	mov	r3, r0
 800f296:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f298:	7bbb      	ldrb	r3, [r7, #14]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d111      	bne.n	800f2c2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2207      	movs	r2, #7
 800f2a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2203      	movs	r2, #3
 800f2a8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	f003 fcde 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2c0:	e11f      	b.n	800f502 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800f2c2:	7bbb      	ldrb	r3, [r7, #14]
 800f2c4:	2b05      	cmp	r3, #5
 800f2c6:	d113      	bne.n	800f2f0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	220c      	movs	r2, #12
 800f2cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2203      	movs	r2, #3
 800f2d6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	f003 fcc7 	bl	8012c7c <osMessagePut>
      break;
 800f2ee:	e108      	b.n	800f502 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	d111      	bne.n	800f31a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2205      	movs	r2, #5
 800f2fa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2203      	movs	r2, #3
 800f300:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f310:	2200      	movs	r2, #0
 800f312:	4619      	mov	r1, r3
 800f314:	f003 fcb2 	bl	8012c7c <osMessagePut>
      break;
 800f318:	e0f3      	b.n	800f502 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800f31a:	7bbb      	ldrb	r3, [r7, #14]
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	f040 80f0 	bne.w	800f502 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	220b      	movs	r2, #11
 800f326:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f328:	2302      	movs	r3, #2
 800f32a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2203      	movs	r2, #3
 800f330:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f340:	2200      	movs	r2, #0
 800f342:	4619      	mov	r1, r3
 800f344:	f003 fc9a 	bl	8012c7c <osMessagePut>
      break;
 800f348:	e0db      	b.n	800f502 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	791b      	ldrb	r3, [r3, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	2100      	movs	r1, #0
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f91f 	bl	800f596 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f35e:	b29a      	uxth	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2208      	movs	r2, #8
 800f368:	761a      	strb	r2, [r3, #24]

      break;
 800f36a:	e0cf      	b.n	800f50c <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	791b      	ldrb	r3, [r3, #4]
 800f370:	4619      	mov	r1, r3
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f006 fb86 	bl	8015a84 <USBH_LL_GetURBState>
 800f378:	4603      	mov	r3, r0
 800f37a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d113      	bne.n	800f3aa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	220d      	movs	r2, #13
 800f386:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f388:	2300      	movs	r3, #0
 800f38a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2203      	movs	r2, #3
 800f390:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	f003 fc6a 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3a8:	e0ad      	b.n	800f506 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	d111      	bne.n	800f3d4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	220b      	movs	r2, #11
 800f3b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2203      	movs	r2, #3
 800f3ba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	f003 fc55 	bl	8012c7c <osMessagePut>
      break;
 800f3d2:	e098      	b.n	800f506 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800f3d4:	7bbb      	ldrb	r3, [r7, #14]
 800f3d6:	2b05      	cmp	r3, #5
 800f3d8:	f040 8095 	bne.w	800f506 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 800f3dc:	2303      	movs	r3, #3
 800f3de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2203      	movs	r2, #3
 800f3e4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	f003 fc40 	bl	8012c7c <osMessagePut>
      break;
 800f3fc:	e083      	b.n	800f506 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	795b      	ldrb	r3, [r3, #5]
 800f402:	2201      	movs	r2, #1
 800f404:	9200      	str	r2, [sp, #0]
 800f406:	2200      	movs	r2, #0
 800f408:	2100      	movs	r1, #0
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 f89e 	bl	800f54c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	220a      	movs	r2, #10
 800f420:	761a      	strb	r2, [r3, #24]
      break;
 800f422:	e073      	b.n	800f50c <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	795b      	ldrb	r3, [r3, #5]
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f006 fb2a 	bl	8015a84 <USBH_LL_GetURBState>
 800f430:	4603      	mov	r3, r0
 800f432:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f434:	7bbb      	ldrb	r3, [r7, #14]
 800f436:	2b01      	cmp	r3, #1
 800f438:	d113      	bne.n	800f462 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	220d      	movs	r2, #13
 800f442:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2203      	movs	r2, #3
 800f448:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f458:	2200      	movs	r2, #0
 800f45a:	4619      	mov	r1, r3
 800f45c:	f003 fc0e 	bl	8012c7c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f460:	e053      	b.n	800f50a <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	2b02      	cmp	r3, #2
 800f466:	d111      	bne.n	800f48c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2209      	movs	r2, #9
 800f46c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2203      	movs	r2, #3
 800f472:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f482:	2200      	movs	r2, #0
 800f484:	4619      	mov	r1, r3
 800f486:	f003 fbf9 	bl	8012c7c <osMessagePut>
      break;
 800f48a:	e03e      	b.n	800f50a <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 800f48c:	7bbb      	ldrb	r3, [r7, #14]
 800f48e:	2b04      	cmp	r3, #4
 800f490:	d13b      	bne.n	800f50a <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	220b      	movs	r2, #11
 800f496:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2203      	movs	r2, #3
 800f49c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	f003 fbe4 	bl	8012c7c <osMessagePut>
      break;
 800f4b4:	e029      	b.n	800f50a <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	7e5b      	ldrb	r3, [r3, #25]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	765a      	strb	r2, [r3, #25]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	7e5b      	ldrb	r3, [r3, #25]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d806      	bhi.n	800f4d8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f4d6:	e019      	b.n	800f50c <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800f4de:	2106      	movs	r1, #6
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f4f4:	e00a      	b.n	800f50c <USBH_HandleControl+0x46c>

    default:
      break;
 800f4f6:	bf00      	nop
 800f4f8:	e008      	b.n	800f50c <USBH_HandleControl+0x46c>
      break;
 800f4fa:	bf00      	nop
 800f4fc:	e006      	b.n	800f50c <USBH_HandleControl+0x46c>
      break;
 800f4fe:	bf00      	nop
 800f500:	e004      	b.n	800f50c <USBH_HandleControl+0x46c>
      break;
 800f502:	bf00      	nop
 800f504:	e002      	b.n	800f50c <USBH_HandleControl+0x46c>
      break;
 800f506:	bf00      	nop
 800f508:	e000      	b.n	800f50c <USBH_HandleControl+0x46c>
      break;
 800f50a:	bf00      	nop
  }

  return status;
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop

0800f518 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af04      	add	r7, sp, #16
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f526:	79f9      	ldrb	r1, [r7, #7]
 800f528:	2300      	movs	r3, #0
 800f52a:	9303      	str	r3, [sp, #12]
 800f52c:	2308      	movs	r3, #8
 800f52e:	9302      	str	r3, [sp, #8]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	9301      	str	r3, [sp, #4]
 800f534:	2300      	movs	r3, #0
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	2300      	movs	r3, #0
 800f53a:	2200      	movs	r2, #0
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f006 fa70 	bl	8015a22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af04      	add	r7, sp, #16
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	4611      	mov	r1, r2
 800f558:	461a      	mov	r2, r3
 800f55a:	460b      	mov	r3, r1
 800f55c:	80fb      	strh	r3, [r7, #6]
 800f55e:	4613      	mov	r3, r2
 800f560:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d001      	beq.n	800f570 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f56c:	2300      	movs	r3, #0
 800f56e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f570:	7979      	ldrb	r1, [r7, #5]
 800f572:	7e3b      	ldrb	r3, [r7, #24]
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	88fb      	ldrh	r3, [r7, #6]
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	2301      	movs	r3, #1
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	2300      	movs	r3, #0
 800f584:	2200      	movs	r2, #0
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f006 fa4b 	bl	8015a22 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f58c:	2300      	movs	r3, #0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3710      	adds	r7, #16
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b088      	sub	sp, #32
 800f59a:	af04      	add	r7, sp, #16
 800f59c:	60f8      	str	r0, [r7, #12]
 800f59e:	60b9      	str	r1, [r7, #8]
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	80fb      	strh	r3, [r7, #6]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5ac:	7979      	ldrb	r1, [r7, #5]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9303      	str	r3, [sp, #12]
 800f5b2:	88fb      	ldrh	r3, [r7, #6]
 800f5b4:	9302      	str	r3, [sp, #8]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f006 fa2d 	bl	8015a22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f5c8:	2300      	movs	r3, #0

}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b088      	sub	sp, #32
 800f5d6:	af04      	add	r7, sp, #16
 800f5d8:	60f8      	str	r0, [r7, #12]
 800f5da:	60b9      	str	r1, [r7, #8]
 800f5dc:	4611      	mov	r1, r2
 800f5de:	461a      	mov	r2, r3
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	80fb      	strh	r3, [r7, #6]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5f6:	7979      	ldrb	r1, [r7, #5]
 800f5f8:	7e3b      	ldrb	r3, [r7, #24]
 800f5fa:	9303      	str	r3, [sp, #12]
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	9302      	str	r3, [sp, #8]
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	2301      	movs	r3, #1
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	2302      	movs	r3, #2
 800f60a:	2200      	movs	r2, #0
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f006 fa08 	bl	8015a22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af04      	add	r7, sp, #16
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	4611      	mov	r1, r2
 800f628:	461a      	mov	r2, r3
 800f62a:	460b      	mov	r3, r1
 800f62c:	80fb      	strh	r3, [r7, #6]
 800f62e:	4613      	mov	r3, r2
 800f630:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f632:	7979      	ldrb	r1, [r7, #5]
 800f634:	2300      	movs	r3, #0
 800f636:	9303      	str	r3, [sp, #12]
 800f638:	88fb      	ldrh	r3, [r7, #6]
 800f63a:	9302      	str	r3, [sp, #8]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	2301      	movs	r3, #1
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	2302      	movs	r3, #2
 800f646:	2201      	movs	r2, #1
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f006 f9ea 	bl	8015a22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af04      	add	r7, sp, #16
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	4608      	mov	r0, r1
 800f662:	4611      	mov	r1, r2
 800f664:	461a      	mov	r2, r3
 800f666:	4603      	mov	r3, r0
 800f668:	70fb      	strb	r3, [r7, #3]
 800f66a:	460b      	mov	r3, r1
 800f66c:	70bb      	strb	r3, [r7, #2]
 800f66e:	4613      	mov	r3, r2
 800f670:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f672:	7878      	ldrb	r0, [r7, #1]
 800f674:	78ba      	ldrb	r2, [r7, #2]
 800f676:	78f9      	ldrb	r1, [r7, #3]
 800f678:	8b3b      	ldrh	r3, [r7, #24]
 800f67a:	9302      	str	r3, [sp, #8]
 800f67c:	7d3b      	ldrb	r3, [r7, #20]
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	7c3b      	ldrb	r3, [r7, #16]
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	4603      	mov	r3, r0
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f006 f97d 	bl	8015986 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b082      	sub	sp, #8
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	460b      	mov	r3, r1
 800f6a0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f6a2:	78fb      	ldrb	r3, [r7, #3]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f006 f99c 	bl	80159e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f6ac:	2300      	movs	r3, #0
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	460b      	mov	r3, r1
 800f6c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f832 	bl	800f72c <USBH_GetFreePipe>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f6cc:	89fb      	ldrh	r3, [r7, #14]
 800f6ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d009      	beq.n	800f6ea <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f6d6:	78fb      	ldrb	r3, [r7, #3]
 800f6d8:	89fa      	ldrh	r2, [r7, #14]
 800f6da:	f002 020f 	and.w	r2, r2, #15
 800f6de:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	32e0      	adds	r2, #224	; 0xe0
 800f6e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800f6ea:	89fb      	ldrh	r3, [r7, #14]
 800f6ec:	b2db      	uxtb	r3, r3
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b083      	sub	sp, #12
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	460b      	mov	r3, r1
 800f700:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f702:	78fb      	ldrb	r3, [r7, #3]
 800f704:	2b0a      	cmp	r3, #10
 800f706:	d80b      	bhi.n	800f720 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f708:	78fa      	ldrb	r2, [r7, #3]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	32e0      	adds	r2, #224	; 0xe0
 800f70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f712:	78fa      	ldrb	r2, [r7, #3]
 800f714:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	32e0      	adds	r2, #224	; 0xe0
 800f71c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	370c      	adds	r7, #12
 800f726:	46bd      	mov	sp, r7
 800f728:	bc80      	pop	{r7}
 800f72a:	4770      	bx	lr

0800f72c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f734:	2300      	movs	r3, #0
 800f736:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f738:	2300      	movs	r3, #0
 800f73a:	73fb      	strb	r3, [r7, #15]
 800f73c:	e00e      	b.n	800f75c <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f73e:	7bfa      	ldrb	r2, [r7, #15]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	32e0      	adds	r2, #224	; 0xe0
 800f744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800f750:	7bfb      	ldrb	r3, [r7, #15]
 800f752:	b29b      	uxth	r3, r3
 800f754:	e007      	b.n	800f766 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800f756:	7bfb      	ldrb	r3, [r7, #15]
 800f758:	3301      	adds	r3, #1
 800f75a:	73fb      	strb	r3, [r7, #15]
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
 800f75e:	2b0a      	cmp	r3, #10
 800f760:	d9ed      	bls.n	800f73e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f762:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f766:	4618      	mov	r0, r3
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bc80      	pop	{r7}
 800f76e:	4770      	bx	lr

0800f770 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	4a08      	ldr	r2, [pc, #32]	; (800f7a0 <disk_status+0x30>)
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	79fa      	ldrb	r2, [r7, #7]
 800f788:	4905      	ldr	r1, [pc, #20]	; (800f7a0 <disk_status+0x30>)
 800f78a:	440a      	add	r2, r1
 800f78c:	7a12      	ldrb	r2, [r2, #8]
 800f78e:	4610      	mov	r0, r2
 800f790:	4798      	blx	r3
 800f792:	4603      	mov	r3, r0
 800f794:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f796:	7bfb      	ldrb	r3, [r7, #15]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3710      	adds	r7, #16
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20005884 	.word	0x20005884

0800f7a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	4a0d      	ldr	r2, [pc, #52]	; (800f7ec <disk_initialize+0x48>)
 800f7b6:	5cd3      	ldrb	r3, [r2, r3]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d111      	bne.n	800f7e0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	4a0b      	ldr	r2, [pc, #44]	; (800f7ec <disk_initialize+0x48>)
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7c4:	79fb      	ldrb	r3, [r7, #7]
 800f7c6:	4a09      	ldr	r2, [pc, #36]	; (800f7ec <disk_initialize+0x48>)
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	4413      	add	r3, r2
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	79fa      	ldrb	r2, [r7, #7]
 800f7d2:	4906      	ldr	r1, [pc, #24]	; (800f7ec <disk_initialize+0x48>)
 800f7d4:	440a      	add	r2, r1
 800f7d6:	7a12      	ldrb	r2, [r2, #8]
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20005884 	.word	0x20005884

0800f7f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f7f0:	b590      	push	{r4, r7, lr}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60b9      	str	r1, [r7, #8]
 800f7f8:	607a      	str	r2, [r7, #4]
 800f7fa:	603b      	str	r3, [r7, #0]
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	4a0a      	ldr	r2, [pc, #40]	; (800f82c <disk_read+0x3c>)
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	689c      	ldr	r4, [r3, #8]
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	4a07      	ldr	r2, [pc, #28]	; (800f82c <disk_read+0x3c>)
 800f810:	4413      	add	r3, r2
 800f812:	7a18      	ldrb	r0, [r3, #8]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	68b9      	ldr	r1, [r7, #8]
 800f81a:	47a0      	blx	r4
 800f81c:	4603      	mov	r3, r0
 800f81e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f820:	7dfb      	ldrb	r3, [r7, #23]
}
 800f822:	4618      	mov	r0, r3
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	bd90      	pop	{r4, r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20005884 	.word	0x20005884

0800f830 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f830:	b590      	push	{r4, r7, lr}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
 800f83a:	603b      	str	r3, [r7, #0]
 800f83c:	4603      	mov	r3, r0
 800f83e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	4a0a      	ldr	r2, [pc, #40]	; (800f86c <disk_write+0x3c>)
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	68dc      	ldr	r4, [r3, #12]
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	4a07      	ldr	r2, [pc, #28]	; (800f86c <disk_write+0x3c>)
 800f850:	4413      	add	r3, r2
 800f852:	7a18      	ldrb	r0, [r3, #8]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	47a0      	blx	r4
 800f85c:	4603      	mov	r3, r0
 800f85e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f860:	7dfb      	ldrb	r3, [r7, #23]
}
 800f862:	4618      	mov	r0, r3
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	bd90      	pop	{r4, r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20005884 	.word	0x20005884

0800f870 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	603a      	str	r2, [r7, #0]
 800f87a:	71fb      	strb	r3, [r7, #7]
 800f87c:	460b      	mov	r3, r1
 800f87e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	4a09      	ldr	r2, [pc, #36]	; (800f8a8 <disk_ioctl+0x38>)
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4413      	add	r3, r2
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	79fa      	ldrb	r2, [r7, #7]
 800f88e:	4906      	ldr	r1, [pc, #24]	; (800f8a8 <disk_ioctl+0x38>)
 800f890:	440a      	add	r2, r1
 800f892:	7a10      	ldrb	r0, [r2, #8]
 800f894:	79b9      	ldrb	r1, [r7, #6]
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	4798      	blx	r3
 800f89a:	4603      	mov	r3, r0
 800f89c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20005884 	.word	0x20005884

0800f8ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8ac:	b480      	push	{r7}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800f8c0:	e007      	b.n	800f8d2 <mem_cpy+0x26>
		*d++ = *s++;
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	1c53      	adds	r3, r2, #1
 800f8c6:	613b      	str	r3, [r7, #16]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	1c59      	adds	r1, r3, #1
 800f8cc:	6179      	str	r1, [r7, #20]
 800f8ce:	7812      	ldrb	r2, [r2, #0]
 800f8d0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	1e5a      	subs	r2, r3, #1
 800f8d6:	607a      	str	r2, [r7, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1f2      	bne.n	800f8c2 <mem_cpy+0x16>
}
 800f8dc:	bf00      	nop
 800f8de:	bf00      	nop
 800f8e0:	371c      	adds	r7, #28
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bc80      	pop	{r7}
 800f8e6:	4770      	bx	lr

0800f8e8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800f8f8:	e005      	b.n	800f906 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	617a      	str	r2, [r7, #20]
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	b2d2      	uxtb	r2, r2
 800f904:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	1e5a      	subs	r2, r3, #1
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1f4      	bne.n	800f8fa <mem_set+0x12>
}
 800f910:	bf00      	nop
 800f912:	bf00      	nop
 800f914:	371c      	adds	r7, #28
 800f916:	46bd      	mov	sp, r7
 800f918:	bc80      	pop	{r7}
 800f91a:	4770      	bx	lr

0800f91c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800f91c:	b480      	push	{r7}
 800f91e:	b089      	sub	sp, #36	; 0x24
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	61fb      	str	r3, [r7, #28]
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800f934:	bf00      	nop
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	1e5a      	subs	r2, r3, #1
 800f93a:	607a      	str	r2, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00d      	beq.n	800f95c <mem_cmp+0x40>
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	61fa      	str	r2, [r7, #28]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	4619      	mov	r1, r3
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	61ba      	str	r2, [r7, #24]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	1acb      	subs	r3, r1, r3
 800f954:	617b      	str	r3, [r7, #20]
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d0ec      	beq.n	800f936 <mem_cmp+0x1a>
	return r;
 800f95c:	697b      	ldr	r3, [r7, #20]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3724      	adds	r7, #36	; 0x24
 800f962:	46bd      	mov	sp, r7
 800f964:	bc80      	pop	{r7}
 800f966:	4770      	bx	lr

0800f968 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f972:	e002      	b.n	800f97a <chk_chr+0x12>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	3301      	adds	r3, #1
 800f978:	607b      	str	r3, [r7, #4]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d005      	beq.n	800f98e <chk_chr+0x26>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d1f2      	bne.n	800f974 <chk_chr+0xc>
	return *str;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	781b      	ldrb	r3, [r3, #0]
}
 800f992:	4618      	mov	r0, r3
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	bc80      	pop	{r7}
 800f99a:	4770      	bx	lr

0800f99c <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f002 ffc4 	bl	8012938 <ff_req_grant>
 800f9b0:	4603      	mov	r3, r0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d011      	beq.n	800f9f0 <unlock_fs+0x36>
 800f9cc:	78fb      	ldrb	r3, [r7, #3]
 800f9ce:	2b0c      	cmp	r3, #12
 800f9d0:	d00e      	beq.n	800f9f0 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	2b0b      	cmp	r3, #11
 800f9d6:	d00b      	beq.n	800f9f0 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	2b09      	cmp	r3, #9
 800f9dc:	d008      	beq.n	800f9f0 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	2b0f      	cmp	r3, #15
 800f9e2:	d005      	beq.n	800f9f0 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f002 ffb9 	bl	8012962 <ff_rel_grant>
	}
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa02:	2300      	movs	r3, #0
 800fa04:	60bb      	str	r3, [r7, #8]
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	60fb      	str	r3, [r7, #12]
 800fa0a:	e038      	b.n	800fa7e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800fa0c:	492f      	ldr	r1, [pc, #188]	; (800facc <chk_lock+0xd4>)
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	4613      	mov	r3, r2
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	4413      	add	r3, r2
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	440b      	add	r3, r1
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d029      	beq.n	800fa74 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800fa20:	492a      	ldr	r1, [pc, #168]	; (800facc <chk_lock+0xd4>)
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	4613      	mov	r3, r2
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	4413      	add	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	440b      	add	r3, r1
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d11e      	bne.n	800fa78 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800fa3a:	4924      	ldr	r1, [pc, #144]	; (800facc <chk_lock+0xd4>)
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	005b      	lsls	r3, r3, #1
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	440b      	add	r3, r1
 800fa48:	3304      	adds	r3, #4
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d110      	bne.n	800fa78 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800fa56:	491d      	ldr	r1, [pc, #116]	; (800facc <chk_lock+0xd4>)
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	4413      	add	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	440b      	add	r3, r1
 800fa64:	3308      	adds	r3, #8
 800fa66:	881a      	ldrh	r2, [r3, #0]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d102      	bne.n	800fa78 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800fa72:	e007      	b.n	800fa84 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800fa74:	2301      	movs	r3, #1
 800fa76:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d9c3      	bls.n	800fa0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d109      	bne.n	800fa9e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d102      	bne.n	800fa96 <chk_lock+0x9e>
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d101      	bne.n	800fa9a <chk_lock+0xa2>
 800fa96:	2300      	movs	r3, #0
 800fa98:	e013      	b.n	800fac2 <chk_lock+0xca>
 800fa9a:	2312      	movs	r3, #18
 800fa9c:	e011      	b.n	800fac2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10b      	bne.n	800fabc <chk_lock+0xc4>
 800faa4:	4909      	ldr	r1, [pc, #36]	; (800facc <chk_lock+0xd4>)
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	4613      	mov	r3, r2
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	4413      	add	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	440b      	add	r3, r1
 800fab2:	330a      	adds	r3, #10
 800fab4:	881b      	ldrh	r3, [r3, #0]
 800fab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faba:	d101      	bne.n	800fac0 <chk_lock+0xc8>
 800fabc:	2310      	movs	r3, #16
 800fabe:	e000      	b.n	800fac2 <chk_lock+0xca>
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bc80      	pop	{r7}
 800faca:	4770      	bx	lr
 800facc:	2000586c 	.word	0x2000586c

0800fad0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fad6:	2300      	movs	r3, #0
 800fad8:	607b      	str	r3, [r7, #4]
 800fada:	e002      	b.n	800fae2 <enq_lock+0x12>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	3301      	adds	r3, #1
 800fae0:	607b      	str	r3, [r7, #4]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d809      	bhi.n	800fafc <enq_lock+0x2c>
 800fae8:	490a      	ldr	r1, [pc, #40]	; (800fb14 <enq_lock+0x44>)
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	4613      	mov	r3, r2
 800faee:	005b      	lsls	r3, r3, #1
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	440b      	add	r3, r1
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1ef      	bne.n	800fadc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	bf14      	ite	ne
 800fb02:	2301      	movne	r3, #1
 800fb04:	2300      	moveq	r3, #0
 800fb06:	b2db      	uxtb	r3, r3
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bc80      	pop	{r7}
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	2000586c 	.word	0x2000586c

0800fb18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
 800fb26:	e02b      	b.n	800fb80 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800fb28:	4955      	ldr	r1, [pc, #340]	; (800fc80 <inc_lock+0x168>)
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	005b      	lsls	r3, r3, #1
 800fb30:	4413      	add	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	440b      	add	r3, r1
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d11b      	bne.n	800fb7a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800fb42:	494f      	ldr	r1, [pc, #316]	; (800fc80 <inc_lock+0x168>)
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	4613      	mov	r3, r2
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4413      	add	r3, r2
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	440b      	add	r3, r1
 800fb50:	3304      	adds	r3, #4
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d10d      	bne.n	800fb7a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800fb5e:	4948      	ldr	r1, [pc, #288]	; (800fc80 <inc_lock+0x168>)
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	4613      	mov	r3, r2
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	4413      	add	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	440b      	add	r3, r1
 800fb6c:	3308      	adds	r3, #8
 800fb6e:	881a      	ldrh	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d006      	beq.n	800fb88 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d9d0      	bls.n	800fb28 <inc_lock+0x10>
 800fb86:	e000      	b.n	800fb8a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800fb88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d145      	bne.n	800fc1c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb90:	2300      	movs	r3, #0
 800fb92:	60fb      	str	r3, [r7, #12]
 800fb94:	e002      	b.n	800fb9c <inc_lock+0x84>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	60fb      	str	r3, [r7, #12]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d809      	bhi.n	800fbb6 <inc_lock+0x9e>
 800fba2:	4937      	ldr	r1, [pc, #220]	; (800fc80 <inc_lock+0x168>)
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	4613      	mov	r3, r2
 800fba8:	005b      	lsls	r3, r3, #1
 800fbaa:	4413      	add	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	440b      	add	r3, r1
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1ef      	bne.n	800fb96 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d101      	bne.n	800fbc0 <inc_lock+0xa8>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	e05a      	b.n	800fc76 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800fbc6:	482e      	ldr	r0, [pc, #184]	; (800fc80 <inc_lock+0x168>)
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	4413      	add	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	4403      	add	r3, r0
 800fbd4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800fbdc:	4828      	ldr	r0, [pc, #160]	; (800fc80 <inc_lock+0x168>)
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4403      	add	r3, r0
 800fbea:	3304      	adds	r3, #4
 800fbec:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800fbf4:	4922      	ldr	r1, [pc, #136]	; (800fc80 <inc_lock+0x168>)
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	4413      	add	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	440b      	add	r3, r1
 800fc02:	3308      	adds	r3, #8
 800fc04:	4602      	mov	r2, r0
 800fc06:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc08:	491d      	ldr	r1, [pc, #116]	; (800fc80 <inc_lock+0x168>)
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	4413      	add	r3, r2
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	440b      	add	r3, r1
 800fc16:	330a      	adds	r3, #10
 800fc18:	2200      	movs	r2, #0
 800fc1a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00c      	beq.n	800fc3c <inc_lock+0x124>
 800fc22:	4917      	ldr	r1, [pc, #92]	; (800fc80 <inc_lock+0x168>)
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4613      	mov	r3, r2
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	4413      	add	r3, r2
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	440b      	add	r3, r1
 800fc30:	330a      	adds	r3, #10
 800fc32:	881b      	ldrh	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <inc_lock+0x124>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e01c      	b.n	800fc76 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10b      	bne.n	800fc5a <inc_lock+0x142>
 800fc42:	490f      	ldr	r1, [pc, #60]	; (800fc80 <inc_lock+0x168>)
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	4613      	mov	r3, r2
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	440b      	add	r3, r1
 800fc50:	330a      	adds	r3, #10
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	b299      	uxth	r1, r3
 800fc58:	e001      	b.n	800fc5e <inc_lock+0x146>
 800fc5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc5e:	4808      	ldr	r0, [pc, #32]	; (800fc80 <inc_lock+0x168>)
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	4613      	mov	r3, r2
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	4413      	add	r3, r2
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4403      	add	r3, r0
 800fc6c:	330a      	adds	r3, #10
 800fc6e:	460a      	mov	r2, r1
 800fc70:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3301      	adds	r3, #1
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3714      	adds	r7, #20
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bc80      	pop	{r7}
 800fc7e:	4770      	bx	lr
 800fc80:	2000586c 	.word	0x2000586c

0800fc84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	607b      	str	r3, [r7, #4]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d82e      	bhi.n	800fcf6 <dec_lock+0x72>
		n = Files[i].ctr;
 800fc98:	491b      	ldr	r1, [pc, #108]	; (800fd08 <dec_lock+0x84>)
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	005b      	lsls	r3, r3, #1
 800fca0:	4413      	add	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	440b      	add	r3, r1
 800fca6:	330a      	adds	r3, #10
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fcac:	89fb      	ldrh	r3, [r7, #14]
 800fcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcb2:	d101      	bne.n	800fcb8 <dec_lock+0x34>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800fcb8:	89fb      	ldrh	r3, [r7, #14]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <dec_lock+0x40>
 800fcbe:	89fb      	ldrh	r3, [r7, #14]
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fcc4:	4910      	ldr	r1, [pc, #64]	; (800fd08 <dec_lock+0x84>)
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	005b      	lsls	r3, r3, #1
 800fccc:	4413      	add	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	440b      	add	r3, r1
 800fcd2:	330a      	adds	r3, #10
 800fcd4:	89fa      	ldrh	r2, [r7, #14]
 800fcd6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fcd8:	89fb      	ldrh	r3, [r7, #14]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d108      	bne.n	800fcf0 <dec_lock+0x6c>
 800fcde:	490a      	ldr	r1, [pc, #40]	; (800fd08 <dec_lock+0x84>)
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	4613      	mov	r3, r2
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	4413      	add	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	440b      	add	r3, r1
 800fcec:	2200      	movs	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	737b      	strb	r3, [r7, #13]
 800fcf4:	e001      	b.n	800fcfa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fcfa:	7b7b      	ldrb	r3, [r7, #13]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3714      	adds	r7, #20
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bc80      	pop	{r7}
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	2000586c 	.word	0x2000586c

0800fd0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fd14:	2300      	movs	r3, #0
 800fd16:	60fb      	str	r3, [r7, #12]
 800fd18:	e016      	b.n	800fd48 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd1a:	4910      	ldr	r1, [pc, #64]	; (800fd5c <clear_lock+0x50>)
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	4613      	mov	r3, r2
 800fd20:	005b      	lsls	r3, r3, #1
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	440b      	add	r3, r1
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d108      	bne.n	800fd42 <clear_lock+0x36>
 800fd30:	490a      	ldr	r1, [pc, #40]	; (800fd5c <clear_lock+0x50>)
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	4613      	mov	r3, r2
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	4413      	add	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	440b      	add	r3, r1
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	3301      	adds	r3, #1
 800fd46:	60fb      	str	r3, [r7, #12]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b01      	cmp	r3, #1
 800fd4c:	d9e5      	bls.n	800fd1a <clear_lock+0xe>
	}
}
 800fd4e:	bf00      	nop
 800fd50:	bf00      	nop
 800fd52:	3714      	adds	r7, #20
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bc80      	pop	{r7}
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	2000586c 	.word	0x2000586c

0800fd60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d038      	beq.n	800fde8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800fd7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	2301      	movs	r3, #1
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	f7ff fd51 	bl	800f830 <disk_write>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <sync_window+0x3a>
			res = FR_DISK_ERR;
 800fd94:	2301      	movs	r3, #1
 800fd96:	73fb      	strb	r3, [r7, #15]
 800fd98:	e026      	b.n	800fde8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fda8:	697a      	ldr	r2, [r7, #20]
 800fdaa:	1ad2      	subs	r2, r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d218      	bcs.n	800fde8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fdbc:	613b      	str	r3, [r7, #16]
 800fdbe:	e010      	b.n	800fde2 <sync_window+0x82>
					wsect += fs->fsize;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	4413      	add	r3, r2
 800fdca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	f7ff fd2a 	bl	800f830 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	613b      	str	r3, [r7, #16]
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d8eb      	bhi.n	800fdc0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d01b      	beq.n	800fe44 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff ffa7 	bl	800fd60 <sync_window>
 800fe12:	4603      	mov	r3, r0
 800fe14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d113      	bne.n	800fe44 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	2301      	movs	r3, #1
 800fe26:	683a      	ldr	r2, [r7, #0]
 800fe28:	f7ff fce2 	bl	800f7f0 <disk_read>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d004      	beq.n	800fe3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fe32:	f04f 33ff 	mov.w	r3, #4294967295
 800fe36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	683a      	ldr	r2, [r7, #0]
 800fe40:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b084      	sub	sp, #16
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff ff82 	bl	800fd60 <sync_window>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f040 809b 	bne.w	800ff9e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	f040 8088 	bne.w	800ff84 <sync_fs+0x136>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	f040 8082 	bne.w	800ff84 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe86:	2100      	movs	r1, #0
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff fd2d 	bl	800f8e8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2255      	movs	r2, #85	; 0x55
 800fe92:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	22aa      	movs	r2, #170	; 0xaa
 800fe9a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2252      	movs	r2, #82	; 0x52
 800fea2:	701a      	strb	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2252      	movs	r2, #82	; 0x52
 800fea8:	705a      	strb	r2, [r3, #1]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2261      	movs	r2, #97	; 0x61
 800feae:	709a      	strb	r2, [r3, #2]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2241      	movs	r2, #65	; 0x41
 800feb4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2272      	movs	r2, #114	; 0x72
 800feba:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2272      	movs	r2, #114	; 0x72
 800fec2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2241      	movs	r2, #65	; 0x41
 800feca:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2261      	movs	r2, #97	; 0x61
 800fed2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800feea:	b29b      	uxth	r3, r3
 800feec:	0a1b      	lsrs	r3, r3, #8
 800feee:	b29b      	uxth	r3, r3
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fefe:	0c1b      	lsrs	r3, r3, #16
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff0e:	0e1b      	lsrs	r3, r3, #24
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	0a1b      	lsrs	r3, r3, #8
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	b2da      	uxtb	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff40:	0c1b      	lsrs	r3, r3, #16
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff50:	0e1b      	lsrs	r3, r3, #24
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ff6e:	6879      	ldr	r1, [r7, #4]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800ff76:	2301      	movs	r3, #1
 800ff78:	f7ff fc5a 	bl	800f830 <disk_write>
			fs->fsi_flag = 0;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7ff fc6e 	bl	800f870 <disk_ioctl>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ff9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b083      	sub	sp, #12
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	3b02      	subs	r3, #2
 800ffb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ffbe:	3b02      	subs	r3, #2
 800ffc0:	683a      	ldr	r2, [r7, #0]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d301      	bcc.n	800ffca <clust2sect+0x22>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e00a      	b.n	800ffe0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	fb03 f202 	mul.w	r2, r3, r2
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ffde:	4413      	add	r3, r2
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bc80      	pop	{r7}
 800ffe8:	4770      	bx	lr

0800ffea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b086      	sub	sp, #24
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
 800fff2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d905      	bls.n	8010006 <get_fat+0x1c>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	429a      	cmp	r2, r3
 8010004:	d302      	bcc.n	801000c <get_fat+0x22>
		val = 1;	/* Internal error */
 8010006:	2301      	movs	r3, #1
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	e0a3      	b.n	8010154 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801000c:	f04f 33ff 	mov.w	r3, #4294967295
 8010010:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010018:	2b03      	cmp	r3, #3
 801001a:	d068      	beq.n	80100ee <get_fat+0x104>
 801001c:	2b03      	cmp	r3, #3
 801001e:	f300 808f 	bgt.w	8010140 <get_fat+0x156>
 8010022:	2b01      	cmp	r3, #1
 8010024:	d002      	beq.n	801002c <get_fat+0x42>
 8010026:	2b02      	cmp	r3, #2
 8010028:	d040      	beq.n	80100ac <get_fat+0xc2>
 801002a:	e089      	b.n	8010140 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	60fb      	str	r3, [r7, #12]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	085b      	lsrs	r3, r3, #1
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	4413      	add	r3, r2
 8010038:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	0a5b      	lsrs	r3, r3, #9
 8010044:	4413      	add	r3, r2
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff fed2 	bl	800fdf2 <move_window>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d178      	bne.n	8010146 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	1c5a      	adds	r2, r3, #1
 8010058:	60fa      	str	r2, [r7, #12]
 801005a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	5cd3      	ldrb	r3, [r2, r3]
 8010062:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	0a5b      	lsrs	r3, r3, #9
 801006e:	4413      	add	r3, r2
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff febd 	bl	800fdf2 <move_window>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d165      	bne.n	801014a <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	5cd3      	ldrb	r3, [r2, r3]
 8010088:	021b      	lsls	r3, r3, #8
 801008a:	461a      	mov	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	4313      	orrs	r3, r2
 8010090:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <get_fat+0xb8>
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	091b      	lsrs	r3, r3, #4
 80100a0:	e002      	b.n	80100a8 <get_fat+0xbe>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100a8:	617b      	str	r3, [r7, #20]
			break;
 80100aa:	e053      	b.n	8010154 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	0a1b      	lsrs	r3, r3, #8
 80100b6:	4413      	add	r3, r2
 80100b8:	4619      	mov	r1, r3
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7ff fe99 	bl	800fdf2 <move_window>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d143      	bne.n	801014e <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	4413      	add	r3, r2
 80100d2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	3301      	adds	r3, #1
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	021b      	lsls	r3, r3, #8
 80100dc:	b21a      	sxth	r2, r3
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	b21b      	sxth	r3, r3
 80100e4:	4313      	orrs	r3, r2
 80100e6:	b21b      	sxth	r3, r3
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	617b      	str	r3, [r7, #20]
			break;
 80100ec:	e032      	b.n	8010154 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	09db      	lsrs	r3, r3, #7
 80100f8:	4413      	add	r3, r2
 80100fa:	4619      	mov	r1, r3
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff fe78 	bl	800fdf2 <move_window>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d124      	bne.n	8010152 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	3303      	adds	r3, #3
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	061a      	lsls	r2, r3, #24
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	3302      	adds	r3, #2
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	041b      	lsls	r3, r3, #16
 8010126:	4313      	orrs	r3, r2
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	3201      	adds	r2, #1
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	0212      	lsls	r2, r2, #8
 8010130:	4313      	orrs	r3, r2
 8010132:	693a      	ldr	r2, [r7, #16]
 8010134:	7812      	ldrb	r2, [r2, #0]
 8010136:	4313      	orrs	r3, r2
 8010138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801013c:	617b      	str	r3, [r7, #20]
			break;
 801013e:	e009      	b.n	8010154 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010140:	2301      	movs	r3, #1
 8010142:	617b      	str	r3, [r7, #20]
 8010144:	e006      	b.n	8010154 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010146:	bf00      	nop
 8010148:	e004      	b.n	8010154 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801014a:	bf00      	nop
 801014c:	e002      	b.n	8010154 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010152:	bf00      	nop
		}
	}

	return val;
 8010154:	697b      	ldr	r3, [r7, #20]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b088      	sub	sp, #32
 8010162:	af00      	add	r7, sp, #0
 8010164:	60f8      	str	r0, [r7, #12]
 8010166:	60b9      	str	r1, [r7, #8]
 8010168:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d905      	bls.n	801017c <put_fat+0x1e>
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010176:	68ba      	ldr	r2, [r7, #8]
 8010178:	429a      	cmp	r2, r3
 801017a:	d302      	bcc.n	8010182 <put_fat+0x24>
		res = FR_INT_ERR;
 801017c:	2302      	movs	r3, #2
 801017e:	77fb      	strb	r3, [r7, #31]
 8010180:	e0f6      	b.n	8010370 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010188:	2b03      	cmp	r3, #3
 801018a:	f000 809e 	beq.w	80102ca <put_fat+0x16c>
 801018e:	2b03      	cmp	r3, #3
 8010190:	f300 80e4 	bgt.w	801035c <put_fat+0x1fe>
 8010194:	2b01      	cmp	r3, #1
 8010196:	d002      	beq.n	801019e <put_fat+0x40>
 8010198:	2b02      	cmp	r3, #2
 801019a:	d06f      	beq.n	801027c <put_fat+0x11e>
 801019c:	e0de      	b.n	801035c <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	617b      	str	r3, [r7, #20]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	085b      	lsrs	r3, r3, #1
 80101a6:	697a      	ldr	r2, [r7, #20]
 80101a8:	4413      	add	r3, r2
 80101aa:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	0a5b      	lsrs	r3, r3, #9
 80101b6:	4413      	add	r3, r2
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7ff fe19 	bl	800fdf2 <move_window>
 80101c0:	4603      	mov	r3, r0
 80101c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101c4:	7ffb      	ldrb	r3, [r7, #31]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f040 80cb 	bne.w	8010362 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	1c5a      	adds	r2, r3, #1
 80101d0:	617a      	str	r2, [r7, #20]
 80101d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	4413      	add	r3, r2
 80101da:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00d      	beq.n	8010202 <put_fat+0xa4>
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	f003 030f 	and.w	r3, r3, #15
 80101f0:	b25a      	sxtb	r2, r3
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	011b      	lsls	r3, r3, #4
 80101f8:	b25b      	sxtb	r3, r3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	b25b      	sxtb	r3, r3
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	e001      	b.n	8010206 <put_fat+0xa8>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	b2db      	uxtb	r3, r3
 8010206:	69ba      	ldr	r2, [r7, #24]
 8010208:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	0a5b      	lsrs	r3, r3, #9
 801021c:	4413      	add	r3, r2
 801021e:	4619      	mov	r1, r3
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7ff fde6 	bl	800fdf2 <move_window>
 8010226:	4603      	mov	r3, r0
 8010228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801022a:	7ffb      	ldrb	r3, [r7, #31]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f040 809a 	bne.w	8010366 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	4413      	add	r3, r2
 801023c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	f003 0301 	and.w	r3, r3, #1
 8010244:	2b00      	cmp	r3, #0
 8010246:	d003      	beq.n	8010250 <put_fat+0xf2>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	091b      	lsrs	r3, r3, #4
 801024c:	b2db      	uxtb	r3, r3
 801024e:	e00e      	b.n	801026e <put_fat+0x110>
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	b25b      	sxtb	r3, r3
 8010256:	f023 030f 	bic.w	r3, r3, #15
 801025a:	b25a      	sxtb	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	0a1b      	lsrs	r3, r3, #8
 8010260:	b25b      	sxtb	r3, r3
 8010262:	f003 030f 	and.w	r3, r3, #15
 8010266:	b25b      	sxtb	r3, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	b25b      	sxtb	r3, r3
 801026c:	b2db      	uxtb	r3, r3
 801026e:	69ba      	ldr	r2, [r7, #24]
 8010270:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2201      	movs	r2, #1
 8010276:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 801027a:	e079      	b.n	8010370 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	0a1b      	lsrs	r3, r3, #8
 8010286:	4413      	add	r3, r2
 8010288:	4619      	mov	r1, r3
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f7ff fdb1 	bl	800fdf2 <move_window>
 8010290:	4603      	mov	r3, r0
 8010292:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010294:	7ffb      	ldrb	r3, [r7, #31]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d167      	bne.n	801036a <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	4413      	add	r3, r2
 80102a6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	701a      	strb	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	0a1b      	lsrs	r3, r3, #8
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	3301      	adds	r3, #1
 80102bc:	b2d2      	uxtb	r2, r2
 80102be:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80102c8:	e052      	b.n	8010370 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	09db      	lsrs	r3, r3, #7
 80102d4:	4413      	add	r3, r2
 80102d6:	4619      	mov	r1, r3
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f7ff fd8a 	bl	800fdf2 <move_window>
 80102de:	4603      	mov	r3, r0
 80102e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102e2:	7ffb      	ldrb	r3, [r7, #31]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d142      	bne.n	801036e <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	4413      	add	r3, r2
 80102f4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	3303      	adds	r3, #3
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	061a      	lsls	r2, r3, #24
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	3302      	adds	r3, #2
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	041b      	lsls	r3, r3, #16
 8010306:	4313      	orrs	r3, r2
 8010308:	69ba      	ldr	r2, [r7, #24]
 801030a:	3201      	adds	r2, #1
 801030c:	7812      	ldrb	r2, [r2, #0]
 801030e:	0212      	lsls	r2, r2, #8
 8010310:	4313      	orrs	r3, r2
 8010312:	69ba      	ldr	r2, [r7, #24]
 8010314:	7812      	ldrb	r2, [r2, #0]
 8010316:	4313      	orrs	r3, r2
 8010318:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	4313      	orrs	r3, r2
 8010320:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	b2da      	uxtb	r2, r3
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	701a      	strb	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	b29b      	uxth	r3, r3
 801032e:	0a1b      	lsrs	r3, r3, #8
 8010330:	b29a      	uxth	r2, r3
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	3301      	adds	r3, #1
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	701a      	strb	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	0c1a      	lsrs	r2, r3, #16
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	3302      	adds	r3, #2
 8010342:	b2d2      	uxtb	r2, r2
 8010344:	701a      	strb	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	0e1a      	lsrs	r2, r3, #24
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	3303      	adds	r3, #3
 801034e:	b2d2      	uxtb	r2, r2
 8010350:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 801035a:	e009      	b.n	8010370 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 801035c:	2302      	movs	r3, #2
 801035e:	77fb      	strb	r3, [r7, #31]
 8010360:	e006      	b.n	8010370 <put_fat+0x212>
			if (res != FR_OK) break;
 8010362:	bf00      	nop
 8010364:	e004      	b.n	8010370 <put_fat+0x212>
			if (res != FR_OK) break;
 8010366:	bf00      	nop
 8010368:	e002      	b.n	8010370 <put_fat+0x212>
			if (res != FR_OK) break;
 801036a:	bf00      	nop
 801036c:	e000      	b.n	8010370 <put_fat+0x212>
			if (res != FR_OK) break;
 801036e:	bf00      	nop
		}
	}

	return res;
 8010370:	7ffb      	ldrb	r3, [r7, #31]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3720      	adds	r7, #32
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b084      	sub	sp, #16
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d905      	bls.n	8010396 <remove_chain+0x1c>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	429a      	cmp	r2, r3
 8010394:	d302      	bcc.n	801039c <remove_chain+0x22>
		res = FR_INT_ERR;
 8010396:	2302      	movs	r3, #2
 8010398:	73fb      	strb	r3, [r7, #15]
 801039a:	e043      	b.n	8010424 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 801039c:	2300      	movs	r3, #0
 801039e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80103a0:	e036      	b.n	8010410 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80103a2:	6839      	ldr	r1, [r7, #0]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff fe20 	bl	800ffea <get_fat>
 80103aa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d035      	beq.n	801041e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d102      	bne.n	80103be <remove_chain+0x44>
 80103b8:	2302      	movs	r3, #2
 80103ba:	73fb      	strb	r3, [r7, #15]
 80103bc:	e032      	b.n	8010424 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c4:	d102      	bne.n	80103cc <remove_chain+0x52>
 80103c6:	2301      	movs	r3, #1
 80103c8:	73fb      	strb	r3, [r7, #15]
 80103ca:	e02b      	b.n	8010424 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80103cc:	2200      	movs	r2, #0
 80103ce:	6839      	ldr	r1, [r7, #0]
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff fec4 	bl	801015e <put_fat>
 80103d6:	4603      	mov	r3, r0
 80103d8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80103da:	7bfb      	ldrb	r3, [r7, #15]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d120      	bne.n	8010422 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80103e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ea:	d00f      	beq.n	801040c <remove_chain+0x92>
				fs->free_clust++;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80103f2:	1c5a      	adds	r2, r3, #1
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010400:	f043 0301 	orr.w	r3, r3, #1
 8010404:	b2da      	uxtb	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	429a      	cmp	r2, r3
 801041a:	d3c2      	bcc.n	80103a2 <remove_chain+0x28>
 801041c:	e002      	b.n	8010424 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 801041e:	bf00      	nop
 8010420:	e000      	b.n	8010424 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8010422:	bf00      	nop
		}
	}

	return res;
 8010424:	7bfb      	ldrb	r3, [r7, #15]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 801042e:	b580      	push	{r7, lr}
 8010430:	b086      	sub	sp, #24
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
 8010436:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d10f      	bne.n	801045e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010444:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d005      	beq.n	8010458 <create_chain+0x2a>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	429a      	cmp	r2, r3
 8010456:	d31c      	bcc.n	8010492 <create_chain+0x64>
 8010458:	2301      	movs	r3, #1
 801045a:	613b      	str	r3, [r7, #16]
 801045c:	e019      	b.n	8010492 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801045e:	6839      	ldr	r1, [r7, #0]
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7ff fdc2 	bl	800ffea <get_fat>
 8010466:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2b01      	cmp	r3, #1
 801046c:	d801      	bhi.n	8010472 <create_chain+0x44>
 801046e:	2301      	movs	r3, #1
 8010470:	e076      	b.n	8010560 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010478:	d101      	bne.n	801047e <create_chain+0x50>
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	e070      	b.n	8010560 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	429a      	cmp	r2, r3
 8010488:	d201      	bcs.n	801048e <create_chain+0x60>
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	e068      	b.n	8010560 <create_chain+0x132>
		scl = clst;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	3301      	adds	r3, #1
 801049a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d307      	bcc.n	80104b8 <create_chain+0x8a>
			ncl = 2;
 80104a8:	2302      	movs	r3, #2
 80104aa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d901      	bls.n	80104b8 <create_chain+0x8a>
 80104b4:	2300      	movs	r3, #0
 80104b6:	e053      	b.n	8010560 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80104b8:	6979      	ldr	r1, [r7, #20]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff fd95 	bl	800ffea <get_fat>
 80104c0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00e      	beq.n	80104e6 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ce:	d002      	beq.n	80104d6 <create_chain+0xa8>
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d101      	bne.n	80104da <create_chain+0xac>
			return cs;
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	e042      	b.n	8010560 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80104da:	697a      	ldr	r2, [r7, #20]
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d1d9      	bne.n	8010496 <create_chain+0x68>
 80104e2:	2300      	movs	r3, #0
 80104e4:	e03c      	b.n	8010560 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80104e6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80104e8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80104ec:	6979      	ldr	r1, [r7, #20]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff fe35 	bl	801015e <put_fat>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d109      	bne.n	8010512 <create_chain+0xe4>
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7ff fe28 	bl	801015e <put_fat>
 801050e:	4603      	mov	r3, r0
 8010510:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8010512:	7bfb      	ldrb	r3, [r7, #15]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d11a      	bne.n	801054e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801052a:	d018      	beq.n	801055e <create_chain+0x130>
			fs->free_clust--;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010532:	1e5a      	subs	r2, r3, #1
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010540:	f043 0301 	orr.w	r3, r3, #1
 8010544:	b2da      	uxtb	r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 801054c:	e007      	b.n	801055e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 801054e:	7bfb      	ldrb	r3, [r7, #15]
 8010550:	2b01      	cmp	r3, #1
 8010552:	d102      	bne.n	801055a <create_chain+0x12c>
 8010554:	f04f 33ff 	mov.w	r3, #4294967295
 8010558:	e000      	b.n	801055c <create_chain+0x12e>
 801055a:	2301      	movs	r3, #1
 801055c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 801055e:	697b      	ldr	r3, [r7, #20]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3718      	adds	r7, #24
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8010568:	b480      	push	{r7}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010578:	3304      	adds	r3, #4
 801057a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	0a5b      	lsrs	r3, r3, #9
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010586:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801058a:	fbb3 f3f2 	udiv	r3, r3, r2
 801058e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	1d1a      	adds	r2, r3, #4
 8010594:	613a      	str	r2, [r7, #16]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <clmt_clust+0x3c>
 80105a0:	2300      	movs	r3, #0
 80105a2:	e010      	b.n	80105c6 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80105a4:	697a      	ldr	r2, [r7, #20]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d307      	bcc.n	80105bc <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80105ac:	697a      	ldr	r2, [r7, #20]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	617b      	str	r3, [r7, #20]
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	3304      	adds	r3, #4
 80105b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105ba:	e7e9      	b.n	8010590 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80105bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	4413      	add	r3, r2
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bc80      	pop	{r7}
 80105ce:	4770      	bx	lr

080105d0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	b29a      	uxth	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80105ea:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d007      	beq.n	8010602 <dir_sdi+0x32>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105fc:	697a      	ldr	r2, [r7, #20]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d301      	bcc.n	8010606 <dir_sdi+0x36>
		return FR_INT_ERR;
 8010602:	2302      	movs	r3, #2
 8010604:	e074      	b.n	80106f0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <dir_sdi+0x56>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010612:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010616:	2b03      	cmp	r3, #3
 8010618:	d105      	bne.n	8010626 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010620:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010624:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d111      	bne.n	8010650 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010632:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010636:	461a      	mov	r2, r3
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	4293      	cmp	r3, r2
 801063c:	d301      	bcc.n	8010642 <dir_sdi+0x72>
			return FR_INT_ERR;
 801063e:	2302      	movs	r3, #2
 8010640:	e056      	b.n	80106f0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010648:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801064c:	613b      	str	r3, [r7, #16]
 801064e:	e032      	b.n	80106b6 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010656:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801065a:	011b      	lsls	r3, r3, #4
 801065c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 801065e:	e01e      	b.n	801069e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010666:	6979      	ldr	r1, [r7, #20]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fcbe 	bl	800ffea <get_fat>
 801066e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010676:	d101      	bne.n	801067c <dir_sdi+0xac>
 8010678:	2301      	movs	r3, #1
 801067a:	e039      	b.n	80106f0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d907      	bls.n	8010692 <dir_sdi+0xc2>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010688:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	429a      	cmp	r2, r3
 8010690:	d301      	bcc.n	8010696 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8010692:	2302      	movs	r3, #2
 8010694:	e02c      	b.n	80106f0 <dir_sdi+0x120>
			idx -= ic;
 8010696:	683a      	ldr	r2, [r7, #0]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 801069e:	683a      	ldr	r2, [r7, #0]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d2dc      	bcs.n	8010660 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106ac:	6979      	ldr	r1, [r7, #20]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff fc7a 	bl	800ffa8 <clust2sect>
 80106b4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <dir_sdi+0xf8>
 80106c4:	2302      	movs	r3, #2
 80106c6:	e013      	b.n	80106f0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	091a      	lsrs	r2, r3, #4
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	441a      	add	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106dc:	461a      	mov	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	f003 030f 	and.w	r3, r3, #15
 80106e4:	015b      	lsls	r3, r3, #5
 80106e6:	441a      	add	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3718      	adds	r7, #24
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80106f8:	b590      	push	{r4, r7, lr}
 80106fa:	b087      	sub	sp, #28
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8010708:	3301      	adds	r3, #1
 801070a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	b29b      	uxth	r3, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	d004      	beq.n	801071e <dir_next+0x26>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <dir_next+0x2a>
		return FR_NO_FILE;
 801071e:	2304      	movs	r3, #4
 8010720:	e0dd      	b.n	80108de <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f003 030f 	and.w	r3, r3, #15
 8010728:	2b00      	cmp	r3, #0
 801072a:	f040 80c6 	bne.w	80108ba <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10b      	bne.n	801075e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801074c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010750:	461a      	mov	r2, r3
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	4293      	cmp	r3, r2
 8010756:	f0c0 80b0 	bcc.w	80108ba <dir_next+0x1c2>
				return FR_NO_FILE;
 801075a:	2304      	movs	r3, #4
 801075c:	e0bf      	b.n	80108de <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	091b      	lsrs	r3, r3, #4
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010768:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801076c:	3a01      	subs	r2, #1
 801076e:	4013      	ands	r3, r2
 8010770:	2b00      	cmp	r3, #0
 8010772:	f040 80a2 	bne.w	80108ba <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7ff fc30 	bl	800ffea <get_fat>
 801078a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	2b01      	cmp	r3, #1
 8010790:	d801      	bhi.n	8010796 <dir_next+0x9e>
 8010792:	2302      	movs	r3, #2
 8010794:	e0a3      	b.n	80108de <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079c:	d101      	bne.n	80107a2 <dir_next+0xaa>
 801079e:	2301      	movs	r3, #1
 80107a0:	e09d      	b.n	80108de <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d374      	bcc.n	801089c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d101      	bne.n	80107bc <dir_next+0xc4>
 80107b8:	2304      	movs	r3, #4
 80107ba:	e090      	b.n	80108de <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80107c8:	4619      	mov	r1, r3
 80107ca:	4610      	mov	r0, r2
 80107cc:	f7ff fe2f 	bl	801042e <create_chain>
 80107d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <dir_next+0xe4>
 80107d8:	2307      	movs	r3, #7
 80107da:	e080      	b.n	80108de <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d101      	bne.n	80107e6 <dir_next+0xee>
 80107e2:	2302      	movs	r3, #2
 80107e4:	e07b      	b.n	80108de <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ec:	d101      	bne.n	80107f2 <dir_next+0xfa>
 80107ee:	2301      	movs	r3, #1
 80107f0:	e075      	b.n	80108de <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ff fab1 	bl	800fd60 <sync_window>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <dir_next+0x110>
 8010804:	2301      	movs	r3, #1
 8010806:	e06a      	b.n	80108de <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801080e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010812:	2100      	movs	r1, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff f867 	bl	800f8e8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8010826:	6979      	ldr	r1, [r7, #20]
 8010828:	4610      	mov	r0, r2
 801082a:	f7ff fbbd 	bl	800ffa8 <clust2sect>
 801082e:	4603      	mov	r3, r0
 8010830:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010834:	2300      	movs	r3, #0
 8010836:	613b      	str	r3, [r7, #16]
 8010838:	e01b      	b.n	8010872 <dir_next+0x17a>
						dp->fs->wflag = 1;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010840:	2201      	movs	r2, #1
 8010842:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff fa87 	bl	800fd60 <sync_window>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <dir_next+0x164>
 8010858:	2301      	movs	r3, #1
 801085a:	e040      	b.n	80108de <dir_next+0x1e6>
						dp->fs->winsect++;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010862:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8010866:	3201      	adds	r2, #1
 8010868:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	3301      	adds	r3, #1
 8010870:	613b      	str	r3, [r7, #16]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010878:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801087c:	461a      	mov	r2, r3
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	4293      	cmp	r3, r2
 8010882:	d3da      	bcc.n	801083a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801088a:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	1a8a      	subs	r2, r1, r2
 8010898:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108aa:	6979      	ldr	r1, [r7, #20]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff fb7b 	bl	800ffa8 <clust2sect>
 80108b2:	4602      	mov	r2, r0
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108ca:	461a      	mov	r2, r3
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f003 030f 	and.w	r3, r3, #15
 80108d2:	015b      	lsls	r3, r3, #5
 80108d4:	441a      	add	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	371c      	adds	r7, #28
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd90      	pop	{r4, r7, pc}

080108e6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b084      	sub	sp, #16
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80108f0:	2100      	movs	r1, #0
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7ff fe6c 	bl	80105d0 <dir_sdi>
 80108f8:	4603      	mov	r3, r0
 80108fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80108fc:	7bfb      	ldrb	r3, [r7, #15]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d131      	bne.n	8010966 <dir_alloc+0x80>
		n = 0;
 8010902:	2300      	movs	r3, #0
 8010904:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010912:	4619      	mov	r1, r3
 8010914:	4610      	mov	r0, r2
 8010916:	f7ff fa6c 	bl	800fdf2 <move_window>
 801091a:	4603      	mov	r3, r0
 801091c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801091e:	7bfb      	ldrb	r3, [r7, #15]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d11f      	bne.n	8010964 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2be5      	cmp	r3, #229	; 0xe5
 801092e:	d005      	beq.n	801093c <dir_alloc+0x56>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d107      	bne.n	801094c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	3301      	adds	r3, #1
 8010940:	60bb      	str	r3, [r7, #8]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	429a      	cmp	r2, r3
 8010948:	d102      	bne.n	8010950 <dir_alloc+0x6a>
 801094a:	e00c      	b.n	8010966 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801094c:	2300      	movs	r3, #0
 801094e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8010950:	2101      	movs	r1, #1
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff fed0 	bl	80106f8 <dir_next>
 8010958:	4603      	mov	r3, r0
 801095a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 801095c:	7bfb      	ldrb	r3, [r7, #15]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d0d1      	beq.n	8010906 <dir_alloc+0x20>
 8010962:	e000      	b.n	8010966 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8010964:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010966:	7bfb      	ldrb	r3, [r7, #15]
 8010968:	2b04      	cmp	r3, #4
 801096a:	d101      	bne.n	8010970 <dir_alloc+0x8a>
 801096c:	2307      	movs	r3, #7
 801096e:	73fb      	strb	r3, [r7, #15]
	return res;
 8010970:	7bfb      	ldrb	r3, [r7, #15]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 801097a:	b480      	push	{r7}
 801097c:	b085      	sub	sp, #20
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	331b      	adds	r3, #27
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	021b      	lsls	r3, r3, #8
 801098c:	b21a      	sxth	r2, r3
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	331a      	adds	r3, #26
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	b21b      	sxth	r3, r3
 8010996:	4313      	orrs	r3, r2
 8010998:	b21b      	sxth	r3, r3
 801099a:	b29b      	uxth	r3, r3
 801099c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80109a4:	2b03      	cmp	r3, #3
 80109a6:	d10f      	bne.n	80109c8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	3315      	adds	r3, #21
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	021b      	lsls	r3, r3, #8
 80109b0:	b21a      	sxth	r2, r3
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	3314      	adds	r3, #20
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	b21b      	sxth	r3, r3
 80109ba:	4313      	orrs	r3, r2
 80109bc:	b21b      	sxth	r3, r3
 80109be:	b29b      	uxth	r3, r3
 80109c0:	041b      	lsls	r3, r3, #16
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	60fb      	str	r3, [r7, #12]

	return cl;
 80109c8:	68fb      	ldr	r3, [r7, #12]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bc80      	pop	{r7}
 80109d2:	4770      	bx	lr

080109d4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	331a      	adds	r3, #26
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	b2d2      	uxtb	r2, r2
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	0a1b      	lsrs	r3, r3, #8
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	331b      	adds	r3, #27
 80109f4:	b2d2      	uxtb	r2, r2
 80109f6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	0c1a      	lsrs	r2, r3, #16
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3314      	adds	r3, #20
 8010a00:	b2d2      	uxtb	r2, r2
 8010a02:	701a      	strb	r2, [r3, #0]
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	0c1b      	lsrs	r3, r3, #16
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	0a1b      	lsrs	r3, r3, #8
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	3315      	adds	r3, #21
 8010a12:	b2d2      	uxtb	r2, r2
 8010a14:	701a      	strb	r2, [r3, #0]
}
 8010a16:	bf00      	nop
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bc80      	pop	{r7}
 8010a1e:	4770      	bx	lr

08010a20 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010a28:	2100      	movs	r1, #0
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fdd0 	bl	80105d0 <dir_sdi>
 8010a30:	4603      	mov	r3, r0
 8010a32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010a34:	7dfb      	ldrb	r3, [r7, #23]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <dir_find+0x1e>
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	e03b      	b.n	8010ab6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	f7ff f9d0 	bl	800fdf2 <move_window>
 8010a52:	4603      	mov	r3, r0
 8010a54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a56:	7dfb      	ldrb	r3, [r7, #23]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d128      	bne.n	8010aae <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010a62:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a6a:	7bfb      	ldrb	r3, [r7, #15]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <dir_find+0x56>
 8010a70:	2304      	movs	r3, #4
 8010a72:	75fb      	strb	r3, [r7, #23]
 8010a74:	e01e      	b.n	8010ab4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	330b      	adds	r3, #11
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	f003 0308 	and.w	r3, r3, #8
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d10a      	bne.n	8010a9a <dir_find+0x7a>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010a8a:	220b      	movs	r2, #11
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	6938      	ldr	r0, [r7, #16]
 8010a90:	f7fe ff44 	bl	800f91c <mem_cmp>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00b      	beq.n	8010ab2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f7ff fe2b 	bl	80106f8 <dir_next>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d0c8      	beq.n	8010a3e <dir_find+0x1e>
 8010aac:	e002      	b.n	8010ab4 <dir_find+0x94>
		if (res != FR_OK) break;
 8010aae:	bf00      	nop
 8010ab0:	e000      	b.n	8010ab4 <dir_find+0x94>
			break;
 8010ab2:	bf00      	nop

	return res;
 8010ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3718      	adds	r7, #24
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b086      	sub	sp, #24
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
 8010ac6:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8010ac8:	2304      	movs	r3, #4
 8010aca:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8010acc:	e03f      	b.n	8010b4e <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010ada:	4619      	mov	r1, r3
 8010adc:	4610      	mov	r0, r2
 8010ade:	f7ff f988 	bl	800fdf2 <move_window>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d136      	bne.n	8010b5a <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010af2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010afa:	7bfb      	ldrb	r3, [r7, #15]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d102      	bne.n	8010b06 <dir_read+0x48>
 8010b00:	2304      	movs	r3, #4
 8010b02:	75fb      	strb	r3, [r7, #23]
 8010b04:	e02e      	b.n	8010b64 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	330b      	adds	r3, #11
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b10:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	2be5      	cmp	r3, #229	; 0xe5
 8010b16:	d011      	beq.n	8010b3c <dir_read+0x7e>
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8010b1c:	d00e      	beq.n	8010b3c <dir_read+0x7e>
 8010b1e:	7bbb      	ldrb	r3, [r7, #14]
 8010b20:	2b0f      	cmp	r3, #15
 8010b22:	d00b      	beq.n	8010b3c <dir_read+0x7e>
 8010b24:	7bbb      	ldrb	r3, [r7, #14]
 8010b26:	f023 0320 	bic.w	r3, r3, #32
 8010b2a:	2b08      	cmp	r3, #8
 8010b2c:	bf0c      	ite	eq
 8010b2e:	2301      	moveq	r3, #1
 8010b30:	2300      	movne	r3, #0
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	461a      	mov	r2, r3
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d010      	beq.n	8010b5e <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7ff fdda 	bl	80106f8 <dir_next>
 8010b44:	4603      	mov	r3, r0
 8010b46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d109      	bne.n	8010b62 <dir_read+0xa4>
	while (dp->sect) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1ba      	bne.n	8010ace <dir_read+0x10>
 8010b58:	e004      	b.n	8010b64 <dir_read+0xa6>
		if (res != FR_OK) break;
 8010b5a:	bf00      	nop
 8010b5c:	e002      	b.n	8010b64 <dir_read+0xa6>
			break;
 8010b5e:	bf00      	nop
 8010b60:	e000      	b.n	8010b64 <dir_read+0xa6>
		if (res != FR_OK) break;
 8010b62:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <dir_read+0xb4>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010b84:	2101      	movs	r1, #1
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7ff fead 	bl	80108e6 <dir_alloc>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d126      	bne.n	8010be4 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	f7ff f924 	bl	800fdf2 <move_window>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d117      	bne.n	8010be4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010bba:	2220      	movs	r2, #32
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe fe92 	bl	800f8e8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010bd0:	220b      	movs	r2, #11
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	f7fe fe6a 	bl	800f8ac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010bde:	2201      	movs	r2, #1
 8010be0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8010be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b087      	sub	sp, #28
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
 8010bf6:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	3309      	adds	r3, #9
 8010bfc:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d05a      	beq.n	8010cbe <get_fileinfo+0xd0>
		dir = dp->dir;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c0e:	60bb      	str	r3, [r7, #8]
		i = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8010c14:	e01c      	b.n	8010c50 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	617a      	str	r2, [r7, #20]
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	4413      	add	r3, r2
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	2b20      	cmp	r3, #32
 8010c28:	d100      	bne.n	8010c2c <get_fileinfo+0x3e>
 8010c2a:	e011      	b.n	8010c50 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	2b05      	cmp	r3, #5
 8010c30:	d101      	bne.n	8010c36 <get_fileinfo+0x48>
 8010c32:	23e5      	movs	r3, #229	; 0xe5
 8010c34:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2b09      	cmp	r3, #9
 8010c3a:	d104      	bne.n	8010c46 <get_fileinfo+0x58>
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	1c5a      	adds	r2, r3, #1
 8010c40:	613a      	str	r2, [r7, #16]
 8010c42:	222e      	movs	r2, #46	; 0x2e
 8010c44:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	1c5a      	adds	r2, r3, #1
 8010c4a:	613a      	str	r2, [r7, #16]
 8010c4c:	7bfa      	ldrb	r2, [r7, #15]
 8010c4e:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	2b0a      	cmp	r3, #10
 8010c54:	d9df      	bls.n	8010c16 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	7ada      	ldrb	r2, [r3, #11]
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	331f      	adds	r3, #31
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	061a      	lsls	r2, r3, #24
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	331e      	adds	r3, #30
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	041b      	lsls	r3, r3, #16
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	321d      	adds	r2, #29
 8010c74:	7812      	ldrb	r2, [r2, #0]
 8010c76:	0212      	lsls	r2, r2, #8
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	321c      	adds	r2, #28
 8010c7e:	7812      	ldrb	r2, [r2, #0]
 8010c80:	431a      	orrs	r2, r3
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	3319      	adds	r3, #25
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	021b      	lsls	r3, r3, #8
 8010c8e:	b21a      	sxth	r2, r3
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	3318      	adds	r3, #24
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	b21b      	sxth	r3, r3
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	b21b      	sxth	r3, r3
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	3317      	adds	r3, #23
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	021b      	lsls	r3, r3, #8
 8010caa:	b21a      	sxth	r2, r3
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	3316      	adds	r3, #22
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	b21b      	sxth	r3, r3
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	b21b      	sxth	r3, r3
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8010cc4:	bf00      	nop
 8010cc6:	371c      	adds	r7, #28
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bc80      	pop	{r7}
 8010ccc:	4770      	bx	lr
	...

08010cd0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	60fb      	str	r3, [r7, #12]
 8010ce0:	e002      	b.n	8010ce8 <create_name+0x18>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	60fb      	str	r3, [r7, #12]
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	2b2f      	cmp	r3, #47	; 0x2f
 8010cee:	d0f8      	beq.n	8010ce2 <create_name+0x12>
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8010cf6:	d0f4      	beq.n	8010ce2 <create_name+0x12>
	sfn = dp->fn;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010cfe:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010d00:	220b      	movs	r2, #11
 8010d02:	2120      	movs	r1, #32
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	f7fe fdef 	bl	800f8e8 <mem_set>
	si = i = b = 0; ni = 8;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	77fb      	strb	r3, [r7, #31]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	613b      	str	r3, [r7, #16]
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	617b      	str	r3, [r7, #20]
 8010d16:	2308      	movs	r3, #8
 8010d18:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	617a      	str	r2, [r7, #20]
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	4413      	add	r3, r2
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8010d28:	7fbb      	ldrb	r3, [r7, #30]
 8010d2a:	2b20      	cmp	r3, #32
 8010d2c:	d953      	bls.n	8010dd6 <create_name+0x106>
 8010d2e:	7fbb      	ldrb	r3, [r7, #30]
 8010d30:	2b2f      	cmp	r3, #47	; 0x2f
 8010d32:	d050      	beq.n	8010dd6 <create_name+0x106>
 8010d34:	7fbb      	ldrb	r3, [r7, #30]
 8010d36:	2b5c      	cmp	r3, #92	; 0x5c
 8010d38:	d04d      	beq.n	8010dd6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8010d3a:	7fbb      	ldrb	r3, [r7, #30]
 8010d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8010d3e:	d003      	beq.n	8010d48 <create_name+0x78>
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d30f      	bcc.n	8010d68 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8010d48:	69bb      	ldr	r3, [r7, #24]
 8010d4a:	2b08      	cmp	r3, #8
 8010d4c:	d102      	bne.n	8010d54 <create_name+0x84>
 8010d4e:	7fbb      	ldrb	r3, [r7, #30]
 8010d50:	2b2e      	cmp	r3, #46	; 0x2e
 8010d52:	d001      	beq.n	8010d58 <create_name+0x88>
 8010d54:	2306      	movs	r3, #6
 8010d56:	e073      	b.n	8010e40 <create_name+0x170>
			i = 8; ni = 11;
 8010d58:	2308      	movs	r3, #8
 8010d5a:	613b      	str	r3, [r7, #16]
 8010d5c:	230b      	movs	r3, #11
 8010d5e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8010d60:	7ffb      	ldrb	r3, [r7, #31]
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	77fb      	strb	r3, [r7, #31]
 8010d66:	e035      	b.n	8010dd4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010d68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	da08      	bge.n	8010d82 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8010d70:	7ffb      	ldrb	r3, [r7, #31]
 8010d72:	f043 0303 	orr.w	r3, r3, #3
 8010d76:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010d78:	7fbb      	ldrb	r3, [r7, #30]
 8010d7a:	3b80      	subs	r3, #128	; 0x80
 8010d7c:	4a32      	ldr	r2, [pc, #200]	; (8010e48 <create_name+0x178>)
 8010d7e:	5cd3      	ldrb	r3, [r2, r3]
 8010d80:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8010d82:	7fbb      	ldrb	r3, [r7, #30]
 8010d84:	4619      	mov	r1, r3
 8010d86:	4831      	ldr	r0, [pc, #196]	; (8010e4c <create_name+0x17c>)
 8010d88:	f7fe fdee 	bl	800f968 <chk_chr>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <create_name+0xc6>
				return FR_INVALID_NAME;
 8010d92:	2306      	movs	r3, #6
 8010d94:	e054      	b.n	8010e40 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8010d96:	7fbb      	ldrb	r3, [r7, #30]
 8010d98:	2b40      	cmp	r3, #64	; 0x40
 8010d9a:	d907      	bls.n	8010dac <create_name+0xdc>
 8010d9c:	7fbb      	ldrb	r3, [r7, #30]
 8010d9e:	2b5a      	cmp	r3, #90	; 0x5a
 8010da0:	d804      	bhi.n	8010dac <create_name+0xdc>
				b |= 2;
 8010da2:	7ffb      	ldrb	r3, [r7, #31]
 8010da4:	f043 0302 	orr.w	r3, r3, #2
 8010da8:	77fb      	strb	r3, [r7, #31]
 8010daa:	e00c      	b.n	8010dc6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8010dac:	7fbb      	ldrb	r3, [r7, #30]
 8010dae:	2b60      	cmp	r3, #96	; 0x60
 8010db0:	d909      	bls.n	8010dc6 <create_name+0xf6>
 8010db2:	7fbb      	ldrb	r3, [r7, #30]
 8010db4:	2b7a      	cmp	r3, #122	; 0x7a
 8010db6:	d806      	bhi.n	8010dc6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8010db8:	7ffb      	ldrb	r3, [r7, #31]
 8010dba:	f043 0301 	orr.w	r3, r3, #1
 8010dbe:	77fb      	strb	r3, [r7, #31]
 8010dc0:	7fbb      	ldrb	r3, [r7, #30]
 8010dc2:	3b20      	subs	r3, #32
 8010dc4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	1c5a      	adds	r2, r3, #1
 8010dca:	613a      	str	r2, [r7, #16]
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	4413      	add	r3, r2
 8010dd0:	7fba      	ldrb	r2, [r7, #30]
 8010dd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010dd4:	e7a1      	b.n	8010d1a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	441a      	add	r2, r3
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8010de0:	7fbb      	ldrb	r3, [r7, #30]
 8010de2:	2b20      	cmp	r3, #32
 8010de4:	d801      	bhi.n	8010dea <create_name+0x11a>
 8010de6:	2304      	movs	r3, #4
 8010de8:	e000      	b.n	8010dec <create_name+0x11c>
 8010dea:	2300      	movs	r3, #0
 8010dec:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d101      	bne.n	8010df8 <create_name+0x128>
 8010df4:	2306      	movs	r3, #6
 8010df6:	e023      	b.n	8010e40 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2be5      	cmp	r3, #229	; 0xe5
 8010dfe:	d102      	bne.n	8010e06 <create_name+0x136>
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	2205      	movs	r2, #5
 8010e04:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	2b08      	cmp	r3, #8
 8010e0a:	d102      	bne.n	8010e12 <create_name+0x142>
 8010e0c:	7ffb      	ldrb	r3, [r7, #31]
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8010e12:	7ffb      	ldrb	r3, [r7, #31]
 8010e14:	f003 0303 	and.w	r3, r3, #3
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d103      	bne.n	8010e24 <create_name+0x154>
 8010e1c:	7fbb      	ldrb	r3, [r7, #30]
 8010e1e:	f043 0310 	orr.w	r3, r3, #16
 8010e22:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8010e24:	7ffb      	ldrb	r3, [r7, #31]
 8010e26:	f003 030c 	and.w	r3, r3, #12
 8010e2a:	2b04      	cmp	r3, #4
 8010e2c:	d103      	bne.n	8010e36 <create_name+0x166>
 8010e2e:	7fbb      	ldrb	r3, [r7, #30]
 8010e30:	f043 0308 	orr.w	r3, r3, #8
 8010e34:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	330b      	adds	r3, #11
 8010e3a:	7fba      	ldrb	r2, [r7, #30]
 8010e3c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010e3e:	2300      	movs	r3, #0
#endif
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3720      	adds	r7, #32
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801a6dc 	.word	0x0801a6dc
 8010e4c:	0801a66c 	.word	0x0801a66c

08010e50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	2b2f      	cmp	r3, #47	; 0x2f
 8010e60:	d003      	beq.n	8010e6a <follow_path+0x1a>
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	2b5c      	cmp	r3, #92	; 0x5c
 8010e68:	d102      	bne.n	8010e70 <follow_path+0x20>
		path++;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b1f      	cmp	r3, #31
 8010e7e:	d80a      	bhi.n	8010e96 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8010e80:	2100      	movs	r1, #0
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff fba4 	bl	80105d0 <dir_sdi>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010e94:	e045      	b.n	8010f22 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e96:	463b      	mov	r3, r7
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7ff ff18 	bl	8010cd0 <create_name>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010ea4:	7bfb      	ldrb	r3, [r7, #15]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d136      	bne.n	8010f18 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f7ff fdb8 	bl	8010a20 <dir_find>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010eba:	7adb      	ldrb	r3, [r3, #11]
 8010ebc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00a      	beq.n	8010eda <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	2b04      	cmp	r3, #4
 8010ec8:	d128      	bne.n	8010f1c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010eca:	7bbb      	ldrb	r3, [r7, #14]
 8010ecc:	f003 0304 	and.w	r3, r3, #4
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d123      	bne.n	8010f1c <follow_path+0xcc>
 8010ed4:	2305      	movs	r3, #5
 8010ed6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8010ed8:	e020      	b.n	8010f1c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010eda:	7bbb      	ldrb	r3, [r7, #14]
 8010edc:	f003 0304 	and.w	r3, r3, #4
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d11d      	bne.n	8010f20 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010eea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	330b      	adds	r3, #11
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f003 0310 	and.w	r3, r3, #16
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d102      	bne.n	8010f00 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8010efa:	2305      	movs	r3, #5
 8010efc:	73fb      	strb	r3, [r7, #15]
 8010efe:	e010      	b.n	8010f22 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f06:	68b9      	ldr	r1, [r7, #8]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff fd36 	bl	801097a <ld_clust>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010f16:	e7be      	b.n	8010e96 <follow_path+0x46>
			if (res != FR_OK) break;
 8010f18:	bf00      	nop
 8010f1a:	e002      	b.n	8010f22 <follow_path+0xd2>
				break;
 8010f1c:	bf00      	nop
 8010f1e:	e000      	b.n	8010f22 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010f20:	bf00      	nop
		}
	}

	return res;
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b087      	sub	sp, #28
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010f34:	f04f 33ff 	mov.w	r3, #4294967295
 8010f38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d031      	beq.n	8010fa6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	617b      	str	r3, [r7, #20]
 8010f48:	e002      	b.n	8010f50 <get_ldnumber+0x24>
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	617b      	str	r3, [r7, #20]
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b20      	cmp	r3, #32
 8010f56:	d903      	bls.n	8010f60 <get_ldnumber+0x34>
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	2b3a      	cmp	r3, #58	; 0x3a
 8010f5e:	d1f4      	bne.n	8010f4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	2b3a      	cmp	r3, #58	; 0x3a
 8010f66:	d11c      	bne.n	8010fa2 <get_ldnumber+0x76>
			tp = *path;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	60fa      	str	r2, [r7, #12]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	3b30      	subs	r3, #48	; 0x30
 8010f78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	2b09      	cmp	r3, #9
 8010f7e:	d80e      	bhi.n	8010f9e <get_ldnumber+0x72>
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d10a      	bne.n	8010f9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d107      	bne.n	8010f9e <get_ldnumber+0x72>
					vol = (int)i;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	3301      	adds	r3, #1
 8010f96:	617b      	str	r3, [r7, #20]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	697a      	ldr	r2, [r7, #20]
 8010f9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	e002      	b.n	8010fa8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010fa6:	693b      	ldr	r3, [r7, #16]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	371c      	adds	r7, #28
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bc80      	pop	{r7}
 8010fb0:	4770      	bx	lr
	...

08010fb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010fcc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7fe ff0d 	bl	800fdf2 <move_window>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d001      	beq.n	8010fe2 <check_fs+0x2e>
		return 3;
 8010fde:	2303      	movs	r3, #3
 8010fe0:	e04a      	b.n	8011078 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010fe8:	3301      	adds	r3, #1
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	021b      	lsls	r3, r3, #8
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	b21b      	sxth	r3, r3
 8010ffc:	4a20      	ldr	r2, [pc, #128]	; (8011080 <check_fs+0xcc>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d001      	beq.n	8011006 <check_fs+0x52>
		return 2;
 8011002:	2302      	movs	r3, #2
 8011004:	e038      	b.n	8011078 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	3336      	adds	r3, #54	; 0x36
 801100a:	3303      	adds	r3, #3
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	061a      	lsls	r2, r3, #24
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	3336      	adds	r3, #54	; 0x36
 8011014:	3302      	adds	r3, #2
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	041b      	lsls	r3, r3, #16
 801101a:	4313      	orrs	r3, r2
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	3236      	adds	r2, #54	; 0x36
 8011020:	3201      	adds	r2, #1
 8011022:	7812      	ldrb	r2, [r2, #0]
 8011024:	0212      	lsls	r2, r2, #8
 8011026:	4313      	orrs	r3, r2
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801102e:	4313      	orrs	r3, r2
 8011030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011034:	4a13      	ldr	r2, [pc, #76]	; (8011084 <check_fs+0xd0>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d101      	bne.n	801103e <check_fs+0x8a>
		return 0;
 801103a:	2300      	movs	r3, #0
 801103c:	e01c      	b.n	8011078 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	3352      	adds	r3, #82	; 0x52
 8011042:	3303      	adds	r3, #3
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	061a      	lsls	r2, r3, #24
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3352      	adds	r3, #82	; 0x52
 801104c:	3302      	adds	r3, #2
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	041b      	lsls	r3, r3, #16
 8011052:	4313      	orrs	r3, r2
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	3252      	adds	r2, #82	; 0x52
 8011058:	3201      	adds	r2, #1
 801105a:	7812      	ldrb	r2, [r2, #0]
 801105c:	0212      	lsls	r2, r2, #8
 801105e:	4313      	orrs	r3, r2
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8011066:	4313      	orrs	r3, r2
 8011068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801106c:	4a05      	ldr	r2, [pc, #20]	; (8011084 <check_fs+0xd0>)
 801106e:	4293      	cmp	r3, r2
 8011070:	d101      	bne.n	8011076 <check_fs+0xc2>
		return 0;
 8011072:	2300      	movs	r3, #0
 8011074:	e000      	b.n	8011078 <check_fs+0xc4>

	return 1;
 8011076:	2301      	movs	r3, #1
}
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	ffffaa55 	.word	0xffffaa55
 8011084:	00544146 	.word	0x00544146

08011088 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b096      	sub	sp, #88	; 0x58
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	4613      	mov	r3, r2
 8011094:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801109c:	68b8      	ldr	r0, [r7, #8]
 801109e:	f7ff ff45 	bl	8010f2c <get_ldnumber>
 80110a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80110a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	da01      	bge.n	80110ae <find_volume+0x26>
 80110aa:	230b      	movs	r3, #11
 80110ac:	e2b2      	b.n	8011614 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80110ae:	4aa2      	ldr	r2, [pc, #648]	; (8011338 <find_volume+0x2b0>)
 80110b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80110b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d101      	bne.n	80110c2 <find_volume+0x3a>
 80110be:	230c      	movs	r3, #12
 80110c0:	e2a8      	b.n	8011614 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 80110c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110c4:	f7fe fc6a 	bl	800f99c <lock_fs>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <find_volume+0x4a>
 80110ce:	230f      	movs	r3, #15
 80110d0:	e2a0      	b.n	8011614 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110d6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80110d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d01b      	beq.n	801111a <find_volume+0x92>
		stat = disk_status(fs->drv);
 80110e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe fb41 	bl	800f770 <disk_status>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80110f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d10c      	bne.n	801111a <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d007      	beq.n	8011116 <find_volume+0x8e>
 8011106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801110a:	f003 0304 	and.w	r3, r3, #4
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8011112:	230a      	movs	r3, #10
 8011114:	e27e      	b.n	8011614 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 8011116:	2300      	movs	r3, #0
 8011118:	e27c      	b.n	8011614 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111c:	2200      	movs	r2, #0
 801111e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011124:	b2da      	uxtb	r2, r3
 8011126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011128:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801112c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fb36 	bl	800f7a4 <disk_initialize>
 8011138:	4603      	mov	r3, r0
 801113a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801113e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011142:	f003 0301 	and.w	r3, r3, #1
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801114a:	2303      	movs	r3, #3
 801114c:	e262      	b.n	8011614 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d007      	beq.n	8011164 <find_volume+0xdc>
 8011154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011158:	f003 0304 	and.w	r3, r3, #4
 801115c:	2b00      	cmp	r3, #0
 801115e:	d001      	beq.n	8011164 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8011160:	230a      	movs	r3, #10
 8011162:	e257      	b.n	8011614 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8011164:	2300      	movs	r3, #0
 8011166:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011168:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801116a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801116c:	f7ff ff22 	bl	8010fb4 <check_fs>
 8011170:	4603      	mov	r3, r0
 8011172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8011176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801117a:	2b01      	cmp	r3, #1
 801117c:	d155      	bne.n	801122a <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801117e:	2300      	movs	r3, #0
 8011180:	643b      	str	r3, [r7, #64]	; 0x40
 8011182:	e029      	b.n	80111d8 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8011184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801118e:	4413      	add	r3, r2
 8011190:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	3304      	adds	r3, #4
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d012      	beq.n	80111c2 <find_volume+0x13a>
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	330b      	adds	r3, #11
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	061a      	lsls	r2, r3, #24
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	330a      	adds	r3, #10
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	4313      	orrs	r3, r2
 80111ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111b0:	3209      	adds	r2, #9
 80111b2:	7812      	ldrb	r2, [r2, #0]
 80111b4:	0212      	lsls	r2, r2, #8
 80111b6:	4313      	orrs	r3, r2
 80111b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ba:	3208      	adds	r2, #8
 80111bc:	7812      	ldrb	r2, [r2, #0]
 80111be:	431a      	orrs	r2, r3
 80111c0:	e000      	b.n	80111c4 <find_volume+0x13c>
 80111c2:	2200      	movs	r2, #0
 80111c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80111cc:	440b      	add	r3, r1
 80111ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80111d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111d4:	3301      	adds	r3, #1
 80111d6:	643b      	str	r3, [r7, #64]	; 0x40
 80111d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111da:	2b03      	cmp	r3, #3
 80111dc:	d9d2      	bls.n	8011184 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80111de:	2300      	movs	r3, #0
 80111e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80111e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <find_volume+0x166>
 80111e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ea:	3b01      	subs	r3, #1
 80111ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80111ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80111f6:	4413      	add	r3, r2
 80111f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80111fc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80111fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011200:	2b00      	cmp	r3, #0
 8011202:	d005      	beq.n	8011210 <find_volume+0x188>
 8011204:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011208:	f7ff fed4 	bl	8010fb4 <check_fs>
 801120c:	4603      	mov	r3, r0
 801120e:	e000      	b.n	8011212 <find_volume+0x18a>
 8011210:	2302      	movs	r3, #2
 8011212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8011216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801121a:	2b00      	cmp	r3, #0
 801121c:	d005      	beq.n	801122a <find_volume+0x1a2>
 801121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011220:	3301      	adds	r3, #1
 8011222:	643b      	str	r3, [r7, #64]	; 0x40
 8011224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011226:	2b03      	cmp	r3, #3
 8011228:	d9e1      	bls.n	80111ee <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801122a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801122e:	2b03      	cmp	r3, #3
 8011230:	d101      	bne.n	8011236 <find_volume+0x1ae>
 8011232:	2301      	movs	r3, #1
 8011234:	e1ee      	b.n	8011614 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8011236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <find_volume+0x1ba>
 801123e:	230d      	movs	r3, #13
 8011240:	e1e8      	b.n	8011614 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	7b1b      	ldrb	r3, [r3, #12]
 8011246:	021b      	lsls	r3, r3, #8
 8011248:	b21a      	sxth	r2, r3
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	7adb      	ldrb	r3, [r3, #11]
 801124e:	b21b      	sxth	r3, r3
 8011250:	4313      	orrs	r3, r2
 8011252:	b21b      	sxth	r3, r3
 8011254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011258:	d001      	beq.n	801125e <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 801125a:	230d      	movs	r3, #13
 801125c:	e1da      	b.n	8011614 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	7ddb      	ldrb	r3, [r3, #23]
 8011262:	021b      	lsls	r3, r3, #8
 8011264:	b21a      	sxth	r2, r3
 8011266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011268:	7d9b      	ldrb	r3, [r3, #22]
 801126a:	b21b      	sxth	r3, r3
 801126c:	4313      	orrs	r3, r2
 801126e:	b21b      	sxth	r3, r3
 8011270:	b29b      	uxth	r3, r3
 8011272:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011276:	2b00      	cmp	r3, #0
 8011278:	d112      	bne.n	80112a0 <find_volume+0x218>
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011280:	061a      	lsls	r2, r3, #24
 8011282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011284:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011288:	041b      	lsls	r3, r3, #16
 801128a:	4313      	orrs	r3, r2
 801128c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801128e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011292:	0212      	lsls	r2, r2, #8
 8011294:	4313      	orrs	r3, r2
 8011296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011298:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801129c:	4313      	orrs	r3, r2
 801129e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80112a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	7c1a      	ldrb	r2, [r3, #16]
 80112ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ae:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80112b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d006      	beq.n	80112ca <find_volume+0x242>
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d001      	beq.n	80112ca <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 80112c6:	230d      	movs	r3, #13
 80112c8:	e1a4      	b.n	8011614 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80112d0:	461a      	mov	r2, r3
 80112d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112d4:	fb02 f303 	mul.w	r3, r2, r3
 80112d8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80112da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112dc:	7b5a      	ldrb	r2, [r3, #13]
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80112e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00a      	beq.n	8011304 <find_volume+0x27c>
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80112f4:	461a      	mov	r2, r3
 80112f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80112fc:	3b01      	subs	r3, #1
 80112fe:	4013      	ands	r3, r2
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 8011304:	230d      	movs	r3, #13
 8011306:	e185      	b.n	8011614 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8011308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130a:	7c9b      	ldrb	r3, [r3, #18]
 801130c:	021b      	lsls	r3, r3, #8
 801130e:	b21a      	sxth	r2, r3
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	7c5b      	ldrb	r3, [r3, #17]
 8011314:	b21b      	sxth	r3, r3
 8011316:	4313      	orrs	r3, r2
 8011318:	b21b      	sxth	r3, r3
 801131a:	b29a      	uxth	r2, r3
 801131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011328:	f003 030f 	and.w	r3, r3, #15
 801132c:	b29b      	uxth	r3, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d004      	beq.n	801133c <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 8011332:	230d      	movs	r3, #13
 8011334:	e16e      	b.n	8011614 <find_volume+0x58c>
 8011336:	bf00      	nop
 8011338:	20005864 	.word	0x20005864

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	7d1b      	ldrb	r3, [r3, #20]
 8011340:	021b      	lsls	r3, r3, #8
 8011342:	b21a      	sxth	r2, r3
 8011344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011346:	7cdb      	ldrb	r3, [r3, #19]
 8011348:	b21b      	sxth	r3, r3
 801134a:	4313      	orrs	r3, r2
 801134c:	b21b      	sxth	r3, r3
 801134e:	b29b      	uxth	r3, r3
 8011350:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8011352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011354:	2b00      	cmp	r3, #0
 8011356:	d112      	bne.n	801137e <find_volume+0x2f6>
 8011358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801135e:	061a      	lsls	r2, r3, #24
 8011360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011362:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011366:	041b      	lsls	r3, r3, #16
 8011368:	4313      	orrs	r3, r2
 801136a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801136c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011370:	0212      	lsls	r2, r2, #8
 8011372:	4313      	orrs	r3, r2
 8011374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011376:	f892 2020 	ldrb.w	r2, [r2, #32]
 801137a:	4313      	orrs	r3, r2
 801137c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011380:	7bdb      	ldrb	r3, [r3, #15]
 8011382:	021b      	lsls	r3, r3, #8
 8011384:	b21a      	sxth	r2, r3
 8011386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011388:	7b9b      	ldrb	r3, [r3, #14]
 801138a:	b21b      	sxth	r3, r3
 801138c:	4313      	orrs	r3, r2
 801138e:	b21b      	sxth	r3, r3
 8011390:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8011392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011394:	2b00      	cmp	r3, #0
 8011396:	d101      	bne.n	801139c <find_volume+0x314>
 8011398:	230d      	movs	r3, #13
 801139a:	e13b      	b.n	8011614 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 801139c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801139e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a0:	4413      	add	r3, r2
 80113a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113a4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80113a8:	0912      	lsrs	r2, r2, #4
 80113aa:	b292      	uxth	r2, r2
 80113ac:	4413      	add	r3, r2
 80113ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80113b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d201      	bcs.n	80113bc <find_volume+0x334>
 80113b8:	230d      	movs	r3, #13
 80113ba:	e12b      	b.n	8011614 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80113bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113c4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80113c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80113cc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <find_volume+0x350>
 80113d4:	230d      	movs	r3, #13
 80113d6:	e11d      	b.n	8011614 <find_volume+0x58c>
	fmt = FS_FAT12;
 80113d8:	2301      	movs	r3, #1
 80113da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d902      	bls.n	80113ee <find_volume+0x366>
 80113e8:	2302      	movs	r3, #2
 80113ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80113ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d902      	bls.n	80113fe <find_volume+0x376>
 80113f8:	2303      	movs	r3, #3
 80113fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	1c9a      	adds	r2, r3, #2
 8011402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011404:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801140c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8011410:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011414:	441a      	add	r2, r3
 8011416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011418:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 801141c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011420:	441a      	add	r2, r3
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8011428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801142c:	2b03      	cmp	r3, #3
 801142e:	d121      	bne.n	8011474 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8011430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011432:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011436:	2b00      	cmp	r3, #0
 8011438:	d001      	beq.n	801143e <find_volume+0x3b6>
 801143a:	230d      	movs	r3, #13
 801143c:	e0ea      	b.n	8011614 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 801143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011440:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011444:	061a      	lsls	r2, r3, #24
 8011446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011448:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801144c:	041b      	lsls	r3, r3, #16
 801144e:	4313      	orrs	r3, r2
 8011450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011452:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8011456:	0212      	lsls	r2, r2, #8
 8011458:	4313      	orrs	r3, r2
 801145a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801145c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8011460:	431a      	orrs	r2, r3
 8011462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011464:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	647b      	str	r3, [r7, #68]	; 0x44
 8011472:	e025      	b.n	80114c0 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011476:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801147a:	2b00      	cmp	r3, #0
 801147c:	d101      	bne.n	8011482 <find_volume+0x3fa>
 801147e:	230d      	movs	r3, #13
 8011480:	e0c8      	b.n	8011614 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801148a:	441a      	add	r2, r3
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011496:	2b02      	cmp	r3, #2
 8011498:	d104      	bne.n	80114a4 <find_volume+0x41c>
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	e00c      	b.n	80114be <find_volume+0x436>
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80114aa:	4613      	mov	r3, r2
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	4413      	add	r3, r2
 80114b0:	085a      	lsrs	r2, r3, #1
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80114b8:	f003 0301 	and.w	r3, r3, #1
 80114bc:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80114be:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80114c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80114cc:	0a5b      	lsrs	r3, r3, #9
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d201      	bcs.n	80114d6 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 80114d2:	230d      	movs	r3, #13
 80114d4:	e09e      	b.n	8011614 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	f04f 32ff 	mov.w	r2, #4294967295
 80114dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80114e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80114e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80114ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ee:	2280      	movs	r2, #128	; 0x80
 80114f0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80114f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114f8:	2b03      	cmp	r3, #3
 80114fa:	d177      	bne.n	80115ec <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80114fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011502:	021b      	lsls	r3, r3, #8
 8011504:	b21a      	sxth	r2, r3
 8011506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011508:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801150c:	b21b      	sxth	r3, r3
 801150e:	4313      	orrs	r3, r2
 8011510:	b21b      	sxth	r3, r3
 8011512:	2b01      	cmp	r3, #1
 8011514:	d16a      	bne.n	80115ec <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8011516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011518:	3301      	adds	r3, #1
 801151a:	4619      	mov	r1, r3
 801151c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801151e:	f7fe fc68 	bl	800fdf2 <move_window>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d161      	bne.n	80115ec <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8011536:	021b      	lsls	r3, r3, #8
 8011538:	b21a      	sxth	r2, r3
 801153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011540:	b21b      	sxth	r3, r3
 8011542:	4313      	orrs	r3, r2
 8011544:	b21b      	sxth	r3, r3
 8011546:	4a35      	ldr	r2, [pc, #212]	; (801161c <find_volume+0x594>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d14f      	bne.n	80115ec <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	78db      	ldrb	r3, [r3, #3]
 8011550:	061a      	lsls	r2, r3, #24
 8011552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011554:	789b      	ldrb	r3, [r3, #2]
 8011556:	041b      	lsls	r3, r3, #16
 8011558:	4313      	orrs	r3, r2
 801155a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801155c:	7852      	ldrb	r2, [r2, #1]
 801155e:	0212      	lsls	r2, r2, #8
 8011560:	4313      	orrs	r3, r2
 8011562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011564:	7812      	ldrb	r2, [r2, #0]
 8011566:	4313      	orrs	r3, r2
 8011568:	4a2d      	ldr	r2, [pc, #180]	; (8011620 <find_volume+0x598>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d13e      	bne.n	80115ec <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 801156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011570:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8011574:	061a      	lsls	r2, r3, #24
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 801157c:	041b      	lsls	r3, r3, #16
 801157e:	4313      	orrs	r3, r2
 8011580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011582:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8011586:	0212      	lsls	r2, r2, #8
 8011588:	4313      	orrs	r3, r2
 801158a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801158c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8011590:	4313      	orrs	r3, r2
 8011592:	4a24      	ldr	r2, [pc, #144]	; (8011624 <find_volume+0x59c>)
 8011594:	4293      	cmp	r3, r2
 8011596:	d129      	bne.n	80115ec <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 801159e:	061a      	lsls	r2, r3, #24
 80115a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80115a6:	041b      	lsls	r3, r3, #16
 80115a8:	4313      	orrs	r3, r2
 80115aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80115b0:	0212      	lsls	r2, r2, #8
 80115b2:	4313      	orrs	r3, r2
 80115b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115b6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80115ba:	431a      	orrs	r2, r3
 80115bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80115c8:	061a      	lsls	r2, r3, #24
 80115ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115cc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80115d0:	041b      	lsls	r3, r3, #16
 80115d2:	4313      	orrs	r3, r2
 80115d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115d6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80115da:	0212      	lsls	r2, r2, #8
 80115dc:	4313      	orrs	r3, r2
 80115de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115e0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80115e4:	431a      	orrs	r2, r3
 80115e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80115f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80115f6:	4b0c      	ldr	r3, [pc, #48]	; (8011628 <find_volume+0x5a0>)
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	3301      	adds	r3, #1
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	4b0a      	ldr	r3, [pc, #40]	; (8011628 <find_volume+0x5a0>)
 8011600:	801a      	strh	r2, [r3, #0]
 8011602:	4b09      	ldr	r3, [pc, #36]	; (8011628 <find_volume+0x5a0>)
 8011604:	881a      	ldrh	r2, [r3, #0]
 8011606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011608:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 801160c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801160e:	f7fe fb7d 	bl	800fd0c <clear_lock>
#endif

	return FR_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3758      	adds	r7, #88	; 0x58
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	ffffaa55 	.word	0xffffaa55
 8011620:	41615252 	.word	0x41615252
 8011624:	61417272 	.word	0x61417272
 8011628:	20005868 	.word	0x20005868

0801162c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d022      	beq.n	8011684 <validate+0x58>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011644:	2b00      	cmp	r3, #0
 8011646:	d01d      	beq.n	8011684 <validate+0x58>
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801164e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011652:	2b00      	cmp	r3, #0
 8011654:	d016      	beq.n	8011684 <validate+0x58>
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801165c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8011666:	429a      	cmp	r2, r3
 8011668:	d10c      	bne.n	8011684 <validate+0x58>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011670:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe f87b 	bl	800f770 <disk_status>
 801167a:	4603      	mov	r3, r0
 801167c:	f003 0301 	and.w	r3, r3, #1
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8011684:	2309      	movs	r3, #9
 8011686:	e00b      	b.n	80116a0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801168e:	4618      	mov	r0, r3
 8011690:	f7fe f984 	bl	800f99c <lock_fs>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d101      	bne.n	801169e <validate+0x72>
 801169a:	230f      	movs	r3, #15
 801169c:	e000      	b.n	80116a0 <validate+0x74>

	return FR_OK;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b088      	sub	sp, #32
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	4613      	mov	r3, r2
 80116b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80116ba:	f107 0310 	add.w	r3, r7, #16
 80116be:	4618      	mov	r0, r3
 80116c0:	f7ff fc34 	bl	8010f2c <get_ldnumber>
 80116c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	da01      	bge.n	80116d0 <f_mount+0x28>
 80116cc:	230b      	movs	r3, #11
 80116ce:	e04c      	b.n	801176a <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80116d0:	4a28      	ldr	r2, [pc, #160]	; (8011774 <f_mount+0xcc>)
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d011      	beq.n	8011704 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 80116e0:	69b8      	ldr	r0, [r7, #24]
 80116e2:	f7fe fb13 	bl	800fd0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80116ec:	4618      	mov	r0, r3
 80116ee:	f001 f917 	bl	8012920 <ff_del_syncobj>
 80116f2:	4603      	mov	r3, r0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <f_mount+0x54>
 80116f8:	2302      	movs	r3, #2
 80116fa:	e036      	b.n	801176a <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d011      	beq.n	801172e <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	b2da      	uxtb	r2, r3
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 801171c:	4619      	mov	r1, r3
 801171e:	4610      	mov	r0, r2
 8011720:	f001 f8de 	bl	80128e0 <ff_cre_syncobj>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d101      	bne.n	801172e <f_mount+0x86>
 801172a:	2302      	movs	r3, #2
 801172c:	e01d      	b.n	801176a <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	4910      	ldr	r1, [pc, #64]	; (8011774 <f_mount+0xcc>)
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d002      	beq.n	8011744 <f_mount+0x9c>
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d001      	beq.n	8011748 <f_mount+0xa0>
 8011744:	2300      	movs	r3, #0
 8011746:	e010      	b.n	801176a <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8011748:	f107 0108 	add.w	r1, r7, #8
 801174c:	f107 030c 	add.w	r3, r7, #12
 8011750:	2200      	movs	r2, #0
 8011752:	4618      	mov	r0, r3
 8011754:	f7ff fc98 	bl	8011088 <find_volume>
 8011758:	4603      	mov	r3, r0
 801175a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	7dfa      	ldrb	r2, [r7, #23]
 8011760:	4611      	mov	r1, r2
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe f929 	bl	800f9ba <unlock_fs>
 8011768:	7dfb      	ldrb	r3, [r7, #23]
}
 801176a:	4618      	mov	r0, r3
 801176c:	3720      	adds	r7, #32
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	20005864 	.word	0x20005864

08011778 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 801177e:	af00      	add	r7, sp, #0
 8011780:	f107 030c 	add.w	r3, r7, #12
 8011784:	6018      	str	r0, [r3, #0]
 8011786:	f107 0308 	add.w	r3, r7, #8
 801178a:	6019      	str	r1, [r3, #0]
 801178c:	1dfb      	adds	r3, r7, #7
 801178e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8011790:	f107 030c 	add.w	r3, r7, #12
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <f_open+0x26>
 801179a:	2309      	movs	r3, #9
 801179c:	e1fc      	b.n	8011b98 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 801179e:	f107 030c 	add.w	r3, r7, #12
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80117aa:	1dfb      	adds	r3, r7, #7
 80117ac:	1dfa      	adds	r2, r7, #7
 80117ae:	7812      	ldrb	r2, [r2, #0]
 80117b0:	f002 021f 	and.w	r2, r2, #31
 80117b4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80117b6:	1dfb      	adds	r3, r7, #7
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	f107 0108 	add.w	r1, r7, #8
 80117c4:	f107 0320 	add.w	r3, r7, #32
 80117c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7ff fc5b 	bl	8011088 <find_volume>
 80117d2:	4603      	mov	r3, r0
 80117d4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80117d8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f040 81cf 	bne.w	8011b80 <f_open+0x408>
		INIT_BUF(dj);
 80117e2:	f107 0320 	add.w	r3, r7, #32
 80117e6:	f107 0214 	add.w	r2, r7, #20
 80117ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80117ee:	f107 0308 	add.w	r3, r7, #8
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	f107 0320 	add.w	r3, r7, #32
 80117f8:	4611      	mov	r1, r2
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7ff fb28 	bl	8010e50 <follow_path>
 8011800:	4603      	mov	r3, r0
 8011802:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8011806:	f107 0320 	add.w	r3, r7, #32
 801180a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801180e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011812:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011816:	2b00      	cmp	r3, #0
 8011818:	d11a      	bne.n	8011850 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 801181a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801181e:	2b00      	cmp	r3, #0
 8011820:	d103      	bne.n	801182a <f_open+0xb2>
				res = FR_INVALID_NAME;
 8011822:	2306      	movs	r3, #6
 8011824:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011828:	e012      	b.n	8011850 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801182a:	1dfb      	adds	r3, r7, #7
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f023 0301 	bic.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	bf14      	ite	ne
 8011836:	2301      	movne	r3, #1
 8011838:	2300      	moveq	r3, #0
 801183a:	b2db      	uxtb	r3, r3
 801183c:	461a      	mov	r2, r3
 801183e:	f107 0320 	add.w	r3, r7, #32
 8011842:	4611      	mov	r1, r2
 8011844:	4618      	mov	r0, r3
 8011846:	f7fe f8d7 	bl	800f9f8 <chk_lock>
 801184a:	4603      	mov	r3, r0
 801184c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011850:	1dfb      	adds	r3, r7, #7
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	f003 031c 	and.w	r3, r3, #28
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 80cc 	beq.w	80119f6 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 801185e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011862:	2b00      	cmp	r3, #0
 8011864:	d01f      	beq.n	80118a6 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8011866:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801186a:	2b04      	cmp	r3, #4
 801186c:	d10e      	bne.n	801188c <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801186e:	f7fe f92f 	bl	800fad0 <enq_lock>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d006      	beq.n	8011886 <f_open+0x10e>
 8011878:	f107 0320 	add.w	r3, r7, #32
 801187c:	4618      	mov	r0, r3
 801187e:	f7ff f97d 	bl	8010b7c <dir_register>
 8011882:	4603      	mov	r3, r0
 8011884:	e000      	b.n	8011888 <f_open+0x110>
 8011886:	2312      	movs	r3, #18
 8011888:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801188c:	1dfb      	adds	r3, r7, #7
 801188e:	1dfa      	adds	r2, r7, #7
 8011890:	7812      	ldrb	r2, [r2, #0]
 8011892:	f042 0208 	orr.w	r2, r2, #8
 8011896:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011898:	f107 0320 	add.w	r3, r7, #32
 801189c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80118a0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80118a4:	e014      	b.n	80118d0 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80118a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80118aa:	330b      	adds	r3, #11
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	f003 0311 	and.w	r3, r3, #17
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d003      	beq.n	80118be <f_open+0x146>
					res = FR_DENIED;
 80118b6:	2307      	movs	r3, #7
 80118b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80118bc:	e008      	b.n	80118d0 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80118be:	1dfb      	adds	r3, r7, #7
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	f003 0304 	and.w	r3, r3, #4
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <f_open+0x158>
						res = FR_EXIST;
 80118ca:	2308      	movs	r3, #8
 80118cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80118d0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f040 80af 	bne.w	8011a38 <f_open+0x2c0>
 80118da:	1dfb      	adds	r3, r7, #7
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	f003 0308 	and.w	r3, r3, #8
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 80a8 	beq.w	8011a38 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 80118e8:	f7fa feaa 	bl	800c640 <get_fattime>
 80118ec:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80118f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80118f4:	330e      	adds	r3, #14
 80118f6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011902:	b29b      	uxth	r3, r3
 8011904:	0a1b      	lsrs	r3, r3, #8
 8011906:	b29a      	uxth	r2, r3
 8011908:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801190c:	330f      	adds	r3, #15
 801190e:	b2d2      	uxtb	r2, r2
 8011910:	701a      	strb	r2, [r3, #0]
 8011912:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011916:	0c1a      	lsrs	r2, r3, #16
 8011918:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801191c:	3310      	adds	r3, #16
 801191e:	b2d2      	uxtb	r2, r2
 8011920:	701a      	strb	r2, [r3, #0]
 8011922:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011926:	0e1a      	lsrs	r2, r3, #24
 8011928:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801192c:	3311      	adds	r3, #17
 801192e:	b2d2      	uxtb	r2, r2
 8011930:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8011932:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011936:	330b      	adds	r3, #11
 8011938:	2200      	movs	r2, #0
 801193a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801193c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011940:	331c      	adds	r3, #28
 8011942:	2200      	movs	r2, #0
 8011944:	701a      	strb	r2, [r3, #0]
 8011946:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801194a:	331d      	adds	r3, #29
 801194c:	2200      	movs	r2, #0
 801194e:	701a      	strb	r2, [r3, #0]
 8011950:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011954:	331e      	adds	r3, #30
 8011956:	2200      	movs	r2, #0
 8011958:	701a      	strb	r2, [r3, #0]
 801195a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801195e:	331f      	adds	r3, #31
 8011960:	2200      	movs	r2, #0
 8011962:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8011964:	f107 0320 	add.w	r3, r7, #32
 8011968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801196c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff f802 	bl	801097a <ld_clust>
 8011976:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 801197a:	2100      	movs	r1, #0
 801197c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8011980:	f7ff f828 	bl	80109d4 <st_clust>
				dj.fs->wflag = 1;
 8011984:	f107 0320 	add.w	r3, r7, #32
 8011988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801198c:	2201      	movs	r2, #1
 801198e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8011992:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8011996:	2b00      	cmp	r3, #0
 8011998:	d04e      	beq.n	8011a38 <f_open+0x2c0>
					dw = dj.fs->winsect;
 801199a:	f107 0320 	add.w	r3, r7, #32
 801199e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119a2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80119a6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80119aa:	f107 0320 	add.w	r3, r7, #32
 80119ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119b2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fe fcdf 	bl	801037a <remove_chain>
 80119bc:	4603      	mov	r3, r0
 80119be:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80119c2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d136      	bne.n	8011a38 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80119ca:	f107 0320 	add.w	r3, r7, #32
 80119ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119d2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80119d6:	3a01      	subs	r2, #1
 80119d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 80119dc:	f107 0320 	add.w	r3, r7, #32
 80119e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119e4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fe fa02 	bl	800fdf2 <move_window>
 80119ee:	4603      	mov	r3, r0
 80119f0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80119f4:	e020      	b.n	8011a38 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80119f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d11c      	bne.n	8011a38 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80119fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011a02:	330b      	adds	r3, #11
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	f003 0310 	and.w	r3, r3, #16
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d003      	beq.n	8011a16 <f_open+0x29e>
					res = FR_NO_FILE;
 8011a0e:	2304      	movs	r3, #4
 8011a10:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011a14:	e010      	b.n	8011a38 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8011a16:	1dfb      	adds	r3, r7, #7
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00a      	beq.n	8011a38 <f_open+0x2c0>
 8011a22:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011a26:	330b      	adds	r3, #11
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	f003 0301 	and.w	r3, r3, #1
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d002      	beq.n	8011a38 <f_open+0x2c0>
						res = FR_DENIED;
 8011a32:	2307      	movs	r3, #7
 8011a34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8011a38:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d13d      	bne.n	8011abc <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a40:	1dfb      	adds	r3, r7, #7
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	f003 0308 	and.w	r3, r3, #8
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d005      	beq.n	8011a58 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8011a4c:	1dfb      	adds	r3, r7, #7
 8011a4e:	1dfa      	adds	r2, r7, #7
 8011a50:	7812      	ldrb	r2, [r2, #0]
 8011a52:	f042 0220 	orr.w	r2, r2, #32
 8011a56:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011a58:	f107 0320 	add.w	r3, r7, #32
 8011a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a60:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8011a64:	f107 030c 	add.w	r3, r7, #12
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8011a6e:	f107 030c 	add.w	r3, r7, #12
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011a78:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a7c:	1dfb      	adds	r3, r7, #7
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	f023 0301 	bic.w	r3, r3, #1
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	bf14      	ite	ne
 8011a88:	2301      	movne	r3, #1
 8011a8a:	2300      	moveq	r3, #0
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	461a      	mov	r2, r3
 8011a90:	f107 0320 	add.w	r3, r7, #32
 8011a94:	4611      	mov	r1, r2
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fe f83e 	bl	800fb18 <inc_lock>
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	f107 030c 	add.w	r3, r7, #12
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8011aa8:	f107 030c 	add.w	r3, r7, #12
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d102      	bne.n	8011abc <f_open+0x344>
 8011ab6:	2302      	movs	r3, #2
 8011ab8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011abc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d15d      	bne.n	8011b80 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8011ac4:	f107 030c 	add.w	r3, r7, #12
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	1dfa      	adds	r2, r7, #7
 8011acc:	7812      	ldrb	r2, [r2, #0]
 8011ace:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8011ad2:	f107 030c 	add.w	r3, r7, #12
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8011ade:	f107 0320 	add.w	r3, r7, #32
 8011ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ae6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fe ff45 	bl	801097a <ld_clust>
 8011af0:	4602      	mov	r2, r0
 8011af2:	f107 030c 	add.w	r3, r7, #12
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8011afc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011b00:	331f      	adds	r3, #31
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	061a      	lsls	r2, r3, #24
 8011b06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011b0a:	331e      	adds	r3, #30
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	041b      	lsls	r3, r3, #16
 8011b10:	4313      	orrs	r3, r2
 8011b12:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011b16:	321d      	adds	r2, #29
 8011b18:	7812      	ldrb	r2, [r2, #0]
 8011b1a:	0212      	lsls	r2, r2, #8
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011b22:	321c      	adds	r2, #28
 8011b24:	7812      	ldrb	r2, [r2, #0]
 8011b26:	431a      	orrs	r2, r3
 8011b28:	f107 030c 	add.w	r3, r7, #12
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8011b32:	f107 030c 	add.w	r3, r7, #12
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8011b3e:	f107 030c 	add.w	r3, r7, #12
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8011b4a:	f107 030c 	add.w	r3, r7, #12
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8011b56:	f107 0320 	add.w	r3, r7, #32
 8011b5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011b5e:	f107 030c 	add.w	r3, r7, #12
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8011b68:	f107 030c 	add.w	r3, r7, #12
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b72:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011b76:	f107 030c 	add.w	r3, r7, #12
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8011b80:	f107 0320 	add.w	r3, r7, #32
 8011b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b88:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fd ff13 	bl	800f9ba <unlock_fs>
 8011b94:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b08a      	sub	sp, #40	; 0x28
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	60f8      	str	r0, [r7, #12]
 8011baa:	60b9      	str	r1, [r7, #8]
 8011bac:	607a      	str	r2, [r7, #4]
 8011bae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7ff fd36 	bl	801162c <validate>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d009      	beq.n	8011bde <f_write+0x3c>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011bd0:	7dfa      	ldrb	r2, [r7, #23]
 8011bd2:	4611      	mov	r1, r2
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7fd fef0 	bl	800f9ba <unlock_fs>
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	e1d4      	b.n	8011f88 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00d      	beq.n	8011c04 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fd fedf 	bl	800f9ba <unlock_fs>
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011c02:	e1c1      	b.n	8011f88 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011c0a:	f003 0302 	and.w	r3, r3, #2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d108      	bne.n	8011c24 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c18:	2107      	movs	r1, #7
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fd fecd 	bl	800f9ba <unlock_fs>
 8011c20:	2307      	movs	r3, #7
 8011c22:	e1b1      	b.n	8011f88 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	441a      	add	r2, r3
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c34:	429a      	cmp	r2, r3
 8011c36:	f080 8182 	bcs.w	8011f3e <f_write+0x39c>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8011c3e:	e17e      	b.n	8011f3e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f040 813e 	bne.w	8011ecc <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c56:	0a5b      	lsrs	r3, r3, #9
 8011c58:	b2da      	uxtb	r2, r3
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c60:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011c64:	3b01      	subs	r3, #1
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	4013      	ands	r3, r2
 8011c6a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8011c6c:	7dbb      	ldrb	r3, [r7, #22]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d15f      	bne.n	8011d32 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d10f      	bne.n	8011c9c <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d121      	bne.n	8011cce <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c90:	2100      	movs	r1, #0
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fe fbcb 	bl	801042e <create_chain>
 8011c98:	6278      	str	r0, [r7, #36]	; 0x24
 8011c9a:	e018      	b.n	8011cce <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d008      	beq.n	8011cb8 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011cac:	4619      	mov	r1, r3
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f7fe fc5a 	bl	8010568 <clmt_clust>
 8011cb4:	6278      	str	r0, [r7, #36]	; 0x24
 8011cb6:	e00a      	b.n	8011cce <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	f7fe fbb1 	bl	801042e <create_chain>
 8011ccc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 8139 	beq.w	8011f48 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d10c      	bne.n	8011cf6 <f_write+0x154>
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2202      	movs	r2, #2
 8011ce0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011cea:	2102      	movs	r1, #2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fd fe64 	bl	800f9ba <unlock_fs>
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	e148      	b.n	8011f88 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfc:	d10c      	bne.n	8011d18 <f_write+0x176>
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2201      	movs	r2, #1
 8011d02:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fd fe53 	bl	800f9ba <unlock_fs>
 8011d14:	2301      	movs	r3, #1
 8011d16:	e137      	b.n	8011f88 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d103      	bne.n	8011d32 <f_write+0x190>
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d024      	beq.n	8011d8a <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d46:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011d4a:	68f9      	ldr	r1, [r7, #12]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011d52:	2301      	movs	r3, #1
 8011d54:	f7fd fd6c 	bl	800f830 <disk_write>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00c      	beq.n	8011d78 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2201      	movs	r2, #1
 8011d62:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d6c:	2101      	movs	r1, #1
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fd fe23 	bl	800f9ba <unlock_fs>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e107      	b.n	8011f88 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d82:	b2da      	uxtb	r2, r3
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d96:	4619      	mov	r1, r3
 8011d98:	4610      	mov	r0, r2
 8011d9a:	f7fe f905 	bl	800ffa8 <clust2sect>
 8011d9e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10c      	bne.n	8011dc0 <f_write+0x21e>
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2202      	movs	r2, #2
 8011daa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011db4:	2102      	movs	r1, #2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fd fdff 	bl	800f9ba <unlock_fs>
 8011dbc:	2302      	movs	r3, #2
 8011dbe:	e0e3      	b.n	8011f88 <f_write+0x3e6>
			sect += csect;
 8011dc0:	7dbb      	ldrb	r3, [r7, #22]
 8011dc2:	693a      	ldr	r2, [r7, #16]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	0a5b      	lsrs	r3, r3, #9
 8011dcc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d04f      	beq.n	8011e74 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011dd4:	7dba      	ldrb	r2, [r7, #22]
 8011dd6:	69fb      	ldr	r3, [r7, #28]
 8011dd8:	4413      	add	r3, r2
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8011de0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011de4:	4293      	cmp	r3, r2
 8011de6:	d908      	bls.n	8011dfa <f_write+0x258>
					cc = fp->fs->csize - csect;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011dee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011df2:	461a      	mov	r2, r3
 8011df4:	7dbb      	ldrb	r3, [r7, #22]
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e00:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	693a      	ldr	r2, [r7, #16]
 8011e08:	69b9      	ldr	r1, [r7, #24]
 8011e0a:	f7fd fd11 	bl	800f830 <disk_write>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00c      	beq.n	8011e2e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e22:	2101      	movs	r1, #1
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fd fdc8 	bl	800f9ba <unlock_fs>
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e0ac      	b.n	8011f88 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	69fa      	ldr	r2, [r7, #28]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d916      	bls.n	8011e6c <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	025b      	lsls	r3, r3, #9
 8011e4c:	69ba      	ldr	r2, [r7, #24]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e54:	4619      	mov	r1, r3
 8011e56:	f7fd fd29 	bl	800f8ac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e64:	b2da      	uxtb	r2, r3
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	025b      	lsls	r3, r3, #9
 8011e70:	623b      	str	r3, [r7, #32]
				continue;
 8011e72:	e04e      	b.n	8011f12 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d021      	beq.n	8011ec4 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d219      	bcs.n	8011ec4 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e96:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011e9a:	68f9      	ldr	r1, [r7, #12]
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	693a      	ldr	r2, [r7, #16]
 8011ea0:	f7fd fca6 	bl	800f7f0 <disk_read>
 8011ea4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00c      	beq.n	8011ec4 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2201      	movs	r2, #1
 8011eae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011eb8:	2101      	movs	r1, #1
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fd fd7d 	bl	800f9ba <unlock_fs>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e061      	b.n	8011f88 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	693a      	ldr	r2, [r7, #16]
 8011ec8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ed6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011eda:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011edc:	6a3a      	ldr	r2, [r7, #32]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d901      	bls.n	8011ee8 <f_write+0x346>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ef2:	68fa      	ldr	r2, [r7, #12]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	6a3a      	ldr	r2, [r7, #32]
 8011ef8:	69b9      	ldr	r1, [r7, #24]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fd fcd6 	bl	800f8ac <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011f12:	69ba      	ldr	r2, [r7, #24]
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	4413      	add	r3, r2
 8011f18:	61bb      	str	r3, [r7, #24]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011f20:	6a3b      	ldr	r3, [r7, #32]
 8011f22:	441a      	add	r2, r3
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	441a      	add	r2, r3
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	601a      	str	r2, [r3, #0]
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	6a3b      	ldr	r3, [r7, #32]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f47f ae7d 	bne.w	8011c40 <f_write+0x9e>
 8011f46:	e000      	b.n	8011f4a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f48:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d905      	bls.n	8011f66 <f_write+0x3c4>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011f6c:	f043 0320 	orr.w	r3, r3, #32
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f7e:	2100      	movs	r1, #0
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fd fd1a 	bl	800f9ba <unlock_fs>
 8011f86:	2300      	movs	r3, #0
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3728      	adds	r7, #40	; 0x28
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b086      	sub	sp, #24
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7ff fb47 	bl	801162c <validate>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fa2:	7dfb      	ldrb	r3, [r7, #23]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f040 80af 	bne.w	8012108 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011fb0:	f003 0320 	and.w	r3, r3, #32
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 80a7 	beq.w	8012108 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d020      	beq.n	801200a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011fce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011fd2:	6879      	ldr	r1, [r7, #4]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011fda:	2301      	movs	r3, #1
 8011fdc:	f7fd fc28 	bl	800f830 <disk_write>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d008      	beq.n	8011ff8 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011fec:	2101      	movs	r1, #1
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fd fce3 	bl	800f9ba <unlock_fs>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	e090      	b.n	801211a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012002:	b2da      	uxtb	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012016:	4619      	mov	r1, r3
 8012018:	4610      	mov	r0, r2
 801201a:	f7fd feea 	bl	800fdf2 <move_window>
 801201e:	4603      	mov	r3, r0
 8012020:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8012022:	7dfb      	ldrb	r3, [r7, #23]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d16f      	bne.n	8012108 <f_sync+0x178>
				dir = fp->dir_ptr;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801202e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	330b      	adds	r3, #11
 8012034:	781a      	ldrb	r2, [r3, #0]
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	330b      	adds	r3, #11
 801203a:	f042 0220 	orr.w	r2, r2, #32
 801203e:	b2d2      	uxtb	r2, r2
 8012040:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	331c      	adds	r3, #28
 801204c:	b2d2      	uxtb	r2, r2
 801204e:	701a      	strb	r2, [r3, #0]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012056:	b29b      	uxth	r3, r3
 8012058:	0a1b      	lsrs	r3, r3, #8
 801205a:	b29a      	uxth	r2, r3
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	331d      	adds	r3, #29
 8012060:	b2d2      	uxtb	r2, r2
 8012062:	701a      	strb	r2, [r3, #0]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801206a:	0c1a      	lsrs	r2, r3, #16
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	331e      	adds	r3, #30
 8012070:	b2d2      	uxtb	r2, r2
 8012072:	701a      	strb	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801207a:	0e1a      	lsrs	r2, r3, #24
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	331f      	adds	r3, #31
 8012080:	b2d2      	uxtb	r2, r2
 8012082:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801208a:	4619      	mov	r1, r3
 801208c:	6938      	ldr	r0, [r7, #16]
 801208e:	f7fe fca1 	bl	80109d4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012092:	f7fa fad5 	bl	800c640 <get_fattime>
 8012096:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	3316      	adds	r3, #22
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	b2d2      	uxtb	r2, r2
 80120a0:	701a      	strb	r2, [r3, #0]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	0a1b      	lsrs	r3, r3, #8
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	3317      	adds	r3, #23
 80120ae:	b2d2      	uxtb	r2, r2
 80120b0:	701a      	strb	r2, [r3, #0]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	0c1a      	lsrs	r2, r3, #16
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	3318      	adds	r3, #24
 80120ba:	b2d2      	uxtb	r2, r2
 80120bc:	701a      	strb	r2, [r3, #0]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	0e1a      	lsrs	r2, r3, #24
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	3319      	adds	r3, #25
 80120c6:	b2d2      	uxtb	r2, r2
 80120c8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	3312      	adds	r3, #18
 80120ce:	2200      	movs	r2, #0
 80120d0:	701a      	strb	r2, [r3, #0]
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	3313      	adds	r3, #19
 80120d6:	2200      	movs	r2, #0
 80120d8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80120e0:	f023 0320 	bic.w	r3, r3, #32
 80120e4:	b2da      	uxtb	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120f2:	2201      	movs	r2, #1
 80120f4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fd fea5 	bl	800fe4e <sync_fs>
 8012104:	4603      	mov	r3, r0
 8012106:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801210e:	7dfa      	ldrb	r2, [r7, #23]
 8012110:	4611      	mov	r1, r2
 8012112:	4618      	mov	r0, r3
 8012114:	f7fd fc51 	bl	800f9ba <unlock_fs>
 8012118:	7dfb      	ldrb	r3, [r7, #23]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3718      	adds	r7, #24
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b084      	sub	sp, #16
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff ff30 	bl	8011f90 <f_sync>
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012134:	7bfb      	ldrb	r3, [r7, #15]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d11e      	bne.n	8012178 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff fa76 	bl	801162c <validate>
 8012140:	4603      	mov	r3, r0
 8012142:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012144:	7bfb      	ldrb	r3, [r7, #15]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d116      	bne.n	8012178 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012150:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012158:	4618      	mov	r0, r3
 801215a:	f7fd fd93 	bl	800fc84 <dec_lock>
 801215e:	4603      	mov	r3, r0
 8012160:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012162:	7bfb      	ldrb	r3, [r7, #15]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d103      	bne.n	8012170 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012170:	2100      	movs	r1, #0
 8012172:	68b8      	ldr	r0, [r7, #8]
 8012174:	f7fd fc21 	bl	800f9ba <unlock_fs>
#endif
		}
	}
	return res;
 8012178:	7bfb      	ldrb	r3, [r7, #15]
}
 801217a:	4618      	mov	r0, r3
 801217c:	3710      	adds	r7, #16
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b088      	sub	sp, #32
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
 801218a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <f_opendir+0x14>
 8012192:	2309      	movs	r3, #9
 8012194:	e079      	b.n	801228a <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8012196:	4639      	mov	r1, r7
 8012198:	f107 0318 	add.w	r3, r7, #24
 801219c:	2200      	movs	r2, #0
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fe ff72 	bl	8011088 <find_volume>
 80121a4:	4603      	mov	r3, r0
 80121a6:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80121a8:	7ffb      	ldrb	r3, [r7, #31]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d15f      	bne.n	801226e <f_opendir+0xec>
		dp->fs = fs;
 80121ae:	69ba      	ldr	r2, [r7, #24]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f107 020c 	add.w	r2, r7, #12
 80121bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	4619      	mov	r1, r3
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7fe fe43 	bl	8010e50 <follow_path>
 80121ca:	4603      	mov	r3, r0
 80121cc:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80121ce:	7ffb      	ldrb	r3, [r7, #31]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d147      	bne.n	8012264 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d017      	beq.n	801220e <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121e4:	330b      	adds	r3, #11
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	f003 0310 	and.w	r3, r3, #16
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00c      	beq.n	801220a <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 80121f0:	69ba      	ldr	r2, [r7, #24]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121f8:	4619      	mov	r1, r3
 80121fa:	4610      	mov	r0, r2
 80121fc:	f7fe fbbd 	bl	801097a <ld_clust>
 8012200:	4602      	mov	r2, r0
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8012208:	e001      	b.n	801220e <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 801220a:	2305      	movs	r3, #5
 801220c:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 801220e:	7ffb      	ldrb	r3, [r7, #31]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d127      	bne.n	8012264 <f_opendir+0xe2>
				dp->id = fs->id;
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012220:	2100      	movs	r1, #0
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7fe f9d4 	bl	80105d0 <dir_sdi>
 8012228:	4603      	mov	r3, r0
 801222a:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 801222c:	7ffb      	ldrb	r3, [r7, #31]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d118      	bne.n	8012264 <f_opendir+0xe2>
					if (dp->sclust) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00f      	beq.n	801225c <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801223c:	2100      	movs	r1, #0
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f7fd fc6a 	bl	800fb18 <inc_lock>
 8012244:	4602      	mov	r2, r0
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012252:	2b00      	cmp	r3, #0
 8012254:	d106      	bne.n	8012264 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8012256:	2312      	movs	r3, #18
 8012258:	77fb      	strb	r3, [r7, #31]
 801225a:	e003      	b.n	8012264 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012264:	7ffb      	ldrb	r3, [r7, #31]
 8012266:	2b04      	cmp	r3, #4
 8012268:	d101      	bne.n	801226e <f_opendir+0xec>
 801226a:	2305      	movs	r3, #5
 801226c:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 801226e:	7ffb      	ldrb	r3, [r7, #31]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d003      	beq.n	801227c <f_opendir+0xfa>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2200      	movs	r2, #0
 8012278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	7ffa      	ldrb	r2, [r7, #31]
 8012280:	4611      	mov	r1, r2
 8012282:	4618      	mov	r0, r3
 8012284:	f7fd fb99 	bl	800f9ba <unlock_fs>
 8012288:	7ffb      	ldrb	r3, [r7, #31]
}
 801228a:	4618      	mov	r0, r3
 801228c:	3720      	adds	r7, #32
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b084      	sub	sp, #16
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff f9c6 	bl	801162c <validate>
 80122a0:	4603      	mov	r3, r0
 80122a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122a4:	7bfb      	ldrb	r3, [r7, #15]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d11b      	bne.n	80122e2 <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122b0:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d007      	beq.n	80122cc <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd fcde 	bl	800fc84 <dec_lock>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d103      	bne.n	80122da <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80122da:	2100      	movs	r1, #0
 80122dc:	68b8      	ldr	r0, [r7, #8]
 80122de:	f7fd fb6c 	bl	800f9ba <unlock_fs>
#endif
	}
	return res;
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b086      	sub	sp, #24
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff f998 	bl	801162c <validate>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012300:	7dfb      	ldrb	r3, [r7, #23]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d133      	bne.n	801236e <f_readdir+0x82>
		if (!fno) {
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d106      	bne.n	801231a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801230c:	2100      	movs	r1, #0
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7fe f95e 	bl	80105d0 <dir_sdi>
 8012314:	4603      	mov	r3, r0
 8012316:	75fb      	strb	r3, [r7, #23]
 8012318:	e029      	b.n	801236e <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f107 0208 	add.w	r2, r7, #8
 8012320:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8012324:	2100      	movs	r1, #0
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fe fbc9 	bl	8010abe <dir_read>
 801232c:	4603      	mov	r3, r0
 801232e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	2b04      	cmp	r3, #4
 8012334:	d105      	bne.n	8012342 <f_readdir+0x56>
				dp->sect = 0;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d112      	bne.n	801236e <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7fe fc4f 	bl	8010bee <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012350:	2100      	movs	r1, #0
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7fe f9d0 	bl	80106f8 <dir_next>
 8012358:	4603      	mov	r3, r0
 801235a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	2b04      	cmp	r3, #4
 8012360:	d105      	bne.n	801236e <f_readdir+0x82>
					dp->sect = 0;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2200      	movs	r2, #0
 8012366:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 801236a:	2300      	movs	r3, #0
 801236c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012374:	7dfa      	ldrb	r2, [r7, #23]
 8012376:	4611      	mov	r1, r2
 8012378:	4618      	mov	r0, r3
 801237a:	f7fd fb1e 	bl	800f9ba <unlock_fs>
 801237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 801238e:	af00      	add	r7, sp, #0
 8012390:	1d3b      	adds	r3, r7, #4
 8012392:	6018      	str	r0, [r3, #0]
 8012394:	463b      	mov	r3, r7
 8012396:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8012398:	1d39      	adds	r1, r7, #4
 801239a:	f107 0314 	add.w	r3, r7, #20
 801239e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80123a2:	2200      	movs	r2, #0
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fe fe6f 	bl	8011088 <find_volume>
 80123aa:	4603      	mov	r3, r0
 80123ac:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 80123b0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d129      	bne.n	801240c <f_stat+0x84>
		INIT_BUF(dj);
 80123b8:	f107 0314 	add.w	r3, r7, #20
 80123bc:	f107 0208 	add.w	r2, r7, #8
 80123c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80123c4:	1d3b      	adds	r3, r7, #4
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	f107 0314 	add.w	r3, r7, #20
 80123cc:	4611      	mov	r1, r2
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe fd3e 	bl	8010e50 <follow_path>
 80123d4:	4603      	mov	r3, r0
 80123d6:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 80123da:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d114      	bne.n	801240c <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 80123e2:	f107 0314 	add.w	r3, r7, #20
 80123e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00b      	beq.n	8012406 <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 80123ee:	463b      	mov	r3, r7
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00a      	beq.n	801240c <f_stat+0x84>
 80123f6:	463b      	mov	r3, r7
 80123f8:	f107 0214 	add.w	r2, r7, #20
 80123fc:	6819      	ldr	r1, [r3, #0]
 80123fe:	4610      	mov	r0, r2
 8012400:	f7fe fbf5 	bl	8010bee <get_fileinfo>
 8012404:	e002      	b.n	801240c <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8012406:	2306      	movs	r3, #6
 8012408:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 801240c:	f107 0314 	add.w	r3, r7, #20
 8012410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012414:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f7fd facd 	bl	800f9ba <unlock_fs>
 8012420:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8012424:	4618      	mov	r0, r3
 8012426:	f507 770e 	add.w	r7, r7, #568	; 0x238
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b08e      	sub	sp, #56	; 0x38
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	60b9      	str	r1, [r7, #8]
 8012438:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 801243a:	f107 030c 	add.w	r3, r7, #12
 801243e:	2200      	movs	r2, #0
 8012440:	4619      	mov	r1, r3
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7fe fe20 	bl	8011088 <find_volume>
 8012448:	4603      	mov	r3, r0
 801244a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8012454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012458:	2b00      	cmp	r3, #0
 801245a:	f040 80af 	bne.w	80125bc <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801246a:	3b02      	subs	r3, #2
 801246c:	429a      	cmp	r2, r3
 801246e:	d805      	bhi.n	801247c <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	e09f      	b.n	80125bc <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012482:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8012484:	2300      	movs	r3, #0
 8012486:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8012488:	7efb      	ldrb	r3, [r7, #27]
 801248a:	2b01      	cmp	r3, #1
 801248c:	d125      	bne.n	80124da <f_getfree+0xac>
				clst = 2;
 801248e:	2302      	movs	r3, #2
 8012490:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8012492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012494:	69f8      	ldr	r0, [r7, #28]
 8012496:	f7fd fda8 	bl	800ffea <get_fat>
 801249a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a2:	d103      	bne.n	80124ac <f_getfree+0x7e>
 80124a4:	2301      	movs	r3, #1
 80124a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80124aa:	e077      	b.n	801259c <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d103      	bne.n	80124ba <f_getfree+0x8c>
 80124b2:	2302      	movs	r3, #2
 80124b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80124b8:	e070      	b.n	801259c <f_getfree+0x16e>
					if (stat == 0) n++;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d102      	bne.n	80124c6 <f_getfree+0x98>
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	3301      	adds	r3, #1
 80124c4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	3301      	adds	r3, #1
 80124ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80124d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d3dc      	bcc.n	8012492 <f_getfree+0x64>
 80124d8:	e060      	b.n	801259c <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80124e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80124e8:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
 80124ee:	2300      	movs	r3, #0
 80124f0:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80124f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d112      	bne.n	801251e <f_getfree+0xf0>
						res = move_window(fs, sect++);
 80124f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80124fe:	4619      	mov	r1, r3
 8012500:	69f8      	ldr	r0, [r7, #28]
 8012502:	f7fd fc76 	bl	800fdf2 <move_window>
 8012506:	4603      	mov	r3, r0
 8012508:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 801250c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012510:	2b00      	cmp	r3, #0
 8012512:	d142      	bne.n	801259a <f_getfree+0x16c>
						p = fs->win.d8;
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8012518:	f44f 7300 	mov.w	r3, #512	; 0x200
 801251c:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 801251e:	7efb      	ldrb	r3, [r7, #27]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d115      	bne.n	8012550 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	3301      	adds	r3, #1
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	021b      	lsls	r3, r3, #8
 801252c:	b21a      	sxth	r2, r3
 801252e:	6a3b      	ldr	r3, [r7, #32]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	b21b      	sxth	r3, r3
 8012534:	4313      	orrs	r3, r2
 8012536:	b21b      	sxth	r3, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	d102      	bne.n	8012542 <f_getfree+0x114>
 801253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253e:	3301      	adds	r3, #1
 8012540:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	3302      	adds	r3, #2
 8012546:	623b      	str	r3, [r7, #32]
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	3b02      	subs	r3, #2
 801254c:	627b      	str	r3, [r7, #36]	; 0x24
 801254e:	e01d      	b.n	801258c <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8012550:	6a3b      	ldr	r3, [r7, #32]
 8012552:	3303      	adds	r3, #3
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	061a      	lsls	r2, r3, #24
 8012558:	6a3b      	ldr	r3, [r7, #32]
 801255a:	3302      	adds	r3, #2
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	041b      	lsls	r3, r3, #16
 8012560:	4313      	orrs	r3, r2
 8012562:	6a3a      	ldr	r2, [r7, #32]
 8012564:	3201      	adds	r2, #1
 8012566:	7812      	ldrb	r2, [r2, #0]
 8012568:	0212      	lsls	r2, r2, #8
 801256a:	4313      	orrs	r3, r2
 801256c:	6a3a      	ldr	r2, [r7, #32]
 801256e:	7812      	ldrb	r2, [r2, #0]
 8012570:	4313      	orrs	r3, r2
 8012572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d102      	bne.n	8012580 <f_getfree+0x152>
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	3301      	adds	r3, #1
 801257e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8012580:	6a3b      	ldr	r3, [r7, #32]
 8012582:	3304      	adds	r3, #4
 8012584:	623b      	str	r3, [r7, #32]
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	3b04      	subs	r3, #4
 801258a:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 801258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258e:	3b01      	subs	r3, #1
 8012590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012594:	2b00      	cmp	r3, #0
 8012596:	d1ac      	bne.n	80124f2 <f_getfree+0xc4>
 8012598:	e000      	b.n	801259c <f_getfree+0x16e>
						if (res != FR_OK) break;
 801259a:	bf00      	nop
			}
			fs->free_clust = n;
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80125aa:	f043 0301 	orr.w	r3, r3, #1
 80125ae:	b2da      	uxtb	r2, r3
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125ba:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80125bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125c0:	4619      	mov	r1, r3
 80125c2:	69f8      	ldr	r0, [r7, #28]
 80125c4:	f7fd f9f9 	bl	800f9ba <unlock_fs>
 80125c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3738      	adds	r7, #56	; 0x38
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b087      	sub	sp, #28
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	4613      	mov	r3, r2
 80125e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80125e2:	2301      	movs	r3, #1
 80125e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80125ea:	4b1e      	ldr	r3, [pc, #120]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 80125ec:	7a5b      	ldrb	r3, [r3, #9]
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d831      	bhi.n	8012658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80125f4:	4b1b      	ldr	r3, [pc, #108]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 80125f6:	7a5b      	ldrb	r3, [r3, #9]
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	461a      	mov	r2, r3
 80125fc:	4b19      	ldr	r3, [pc, #100]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 80125fe:	2100      	movs	r1, #0
 8012600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012602:	4b18      	ldr	r3, [pc, #96]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 8012604:	7a5b      	ldrb	r3, [r3, #9]
 8012606:	b2db      	uxtb	r3, r3
 8012608:	4a16      	ldr	r2, [pc, #88]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	4413      	add	r3, r2
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012612:	4b14      	ldr	r3, [pc, #80]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 8012614:	7a5b      	ldrb	r3, [r3, #9]
 8012616:	b2db      	uxtb	r3, r3
 8012618:	461a      	mov	r2, r3
 801261a:	4b12      	ldr	r3, [pc, #72]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 801261c:	4413      	add	r3, r2
 801261e:	79fa      	ldrb	r2, [r7, #7]
 8012620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012622:	4b10      	ldr	r3, [pc, #64]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 8012624:	7a5b      	ldrb	r3, [r3, #9]
 8012626:	b2db      	uxtb	r3, r3
 8012628:	1c5a      	adds	r2, r3, #1
 801262a:	b2d1      	uxtb	r1, r2
 801262c:	4a0d      	ldr	r2, [pc, #52]	; (8012664 <FATFS_LinkDriverEx+0x90>)
 801262e:	7251      	strb	r1, [r2, #9]
 8012630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012632:	7dbb      	ldrb	r3, [r7, #22]
 8012634:	3330      	adds	r3, #48	; 0x30
 8012636:	b2da      	uxtb	r2, r3
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	3301      	adds	r3, #1
 8012640:	223a      	movs	r2, #58	; 0x3a
 8012642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	3302      	adds	r3, #2
 8012648:	222f      	movs	r2, #47	; 0x2f
 801264a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	3303      	adds	r3, #3
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012654:	2300      	movs	r3, #0
 8012656:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012658:	7dfb      	ldrb	r3, [r7, #23]
}
 801265a:	4618      	mov	r0, r3
 801265c:	371c      	adds	r7, #28
 801265e:	46bd      	mov	sp, r7
 8012660:	bc80      	pop	{r7}
 8012662:	4770      	bx	lr
 8012664:	20005884 	.word	0x20005884

08012668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012672:	2200      	movs	r2, #0
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff ffac 	bl	80125d4 <FATFS_LinkDriverEx>
 801267c:	4603      	mov	r3, r0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	4603      	mov	r3, r0
 801268e:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	370c      	adds	r7, #12
 8012696:	46bd      	mov	sp, r7
 8012698:	bc80      	pop	{r7}
 801269a:	4770      	bx	lr

0801269c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	4603      	mov	r3, r0
 80126a4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80126a6:	2301      	movs	r3, #1
 80126a8:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80126aa:	79fb      	ldrb	r3, [r7, #7]
 80126ac:	4619      	mov	r1, r3
 80126ae:	4808      	ldr	r0, [pc, #32]	; (80126d0 <USBH_status+0x34>)
 80126b0:	f7fa fd30 	bl	800d114 <USBH_MSC_UnitIsReady>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d002      	beq.n	80126c0 <USBH_status+0x24>
  {
    res = RES_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	73fb      	strb	r3, [r7, #15]
 80126be:	e001      	b.n	80126c4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80126c0:	2301      	movs	r3, #1
 80126c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 80126c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	2000df18 	.word	0x2000df18

080126d4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b094      	sub	sp, #80	; 0x50
 80126d8:	af02      	add	r7, sp, #8
 80126da:	60b9      	str	r1, [r7, #8]
 80126dc:	607a      	str	r2, [r7, #4]
 80126de:	603b      	str	r3, [r7, #0]
 80126e0:	4603      	mov	r3, r0
 80126e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d002      	beq.n	8012700 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 80126fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80126fe:	e02c      	b.n	801275a <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8012700:	7bf9      	ldrb	r1, [r7, #15]
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	4816      	ldr	r0, [pc, #88]	; (8012764 <USBH_read+0x90>)
 801270c:	f7fa fd4b 	bl	800d1a6 <USBH_MSC_Read>
 8012710:	4603      	mov	r3, r0
 8012712:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8012716:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801271a:	2b00      	cmp	r3, #0
 801271c:	d103      	bne.n	8012726 <USBH_read+0x52>
  {
    res = RES_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012724:	e017      	b.n	8012756 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8012726:	f107 0210 	add.w	r2, r7, #16
 801272a:	7bfb      	ldrb	r3, [r7, #15]
 801272c:	4619      	mov	r1, r3
 801272e:	480d      	ldr	r0, [pc, #52]	; (8012764 <USBH_read+0x90>)
 8012730:	f7fa fd15 	bl	800d15e <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8012734:	7f7b      	ldrb	r3, [r7, #29]
 8012736:	2b3a      	cmp	r3, #58	; 0x3a
 8012738:	d005      	beq.n	8012746 <USBH_read+0x72>
 801273a:	2b3a      	cmp	r3, #58	; 0x3a
 801273c:	dc07      	bgt.n	801274e <USBH_read+0x7a>
 801273e:	2b04      	cmp	r3, #4
 8012740:	d001      	beq.n	8012746 <USBH_read+0x72>
 8012742:	2b28      	cmp	r3, #40	; 0x28
 8012744:	d103      	bne.n	801274e <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 8012746:	2303      	movs	r3, #3
 8012748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 801274c:	e003      	b.n	8012756 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 801274e:	2301      	movs	r3, #1
 8012750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012754:	bf00      	nop
    }
  }
  
  return res;
 8012756:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801275a:	4618      	mov	r0, r3
 801275c:	3748      	adds	r7, #72	; 0x48
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	2000df18 	.word	0x2000df18

08012768 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b094      	sub	sp, #80	; 0x50
 801276c:	af02      	add	r7, sp, #8
 801276e:	60b9      	str	r1, [r7, #8]
 8012770:	607a      	str	r2, [r7, #4]
 8012772:	603b      	str	r3, [r7, #0]
 8012774:	4603      	mov	r3, r0
 8012776:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 8012778:	2301      	movs	r3, #1
 801277a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 801277e:	2300      	movs	r3, #0
 8012780:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	f003 0303 	and.w	r3, r3, #3
 801278a:	2b00      	cmp	r3, #0
 801278c:	d002      	beq.n	8012794 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 801278e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012792:	e034      	b.n	80127fe <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8012794:	7bf9      	ldrb	r1, [r7, #15]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	481a      	ldr	r0, [pc, #104]	; (8012808 <USBH_write+0xa0>)
 80127a0:	f7fa fd6a 	bl	800d278 <USBH_MSC_Write>
 80127a4:	4603      	mov	r3, r0
 80127a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 80127aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d103      	bne.n	80127ba <USBH_write+0x52>
  {
    res = RES_OK;
 80127b2:	2300      	movs	r3, #0
 80127b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80127b8:	e01f      	b.n	80127fa <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80127ba:	f107 0210 	add.w	r2, r7, #16
 80127be:	7bfb      	ldrb	r3, [r7, #15]
 80127c0:	4619      	mov	r1, r3
 80127c2:	4811      	ldr	r0, [pc, #68]	; (8012808 <USBH_write+0xa0>)
 80127c4:	f7fa fccb 	bl	800d15e <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 80127c8:	7f7b      	ldrb	r3, [r7, #29]
 80127ca:	2b3a      	cmp	r3, #58	; 0x3a
 80127cc:	d00d      	beq.n	80127ea <USBH_write+0x82>
 80127ce:	2b3a      	cmp	r3, #58	; 0x3a
 80127d0:	dc0f      	bgt.n	80127f2 <USBH_write+0x8a>
 80127d2:	2b28      	cmp	r3, #40	; 0x28
 80127d4:	d009      	beq.n	80127ea <USBH_write+0x82>
 80127d6:	2b28      	cmp	r3, #40	; 0x28
 80127d8:	dc0b      	bgt.n	80127f2 <USBH_write+0x8a>
 80127da:	2b04      	cmp	r3, #4
 80127dc:	d005      	beq.n	80127ea <USBH_write+0x82>
 80127de:	2b27      	cmp	r3, #39	; 0x27
 80127e0:	d107      	bne.n	80127f2 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80127e2:	2302      	movs	r3, #2
 80127e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80127e8:	e007      	b.n	80127fa <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 80127ea:	2303      	movs	r3, #3
 80127ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80127f0:	e003      	b.n	80127fa <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 80127f2:	2301      	movs	r3, #1
 80127f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80127f8:	bf00      	nop
    }
  }
  
  return res;   
 80127fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3748      	adds	r7, #72	; 0x48
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	2000df18 	.word	0x2000df18

0801280c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b090      	sub	sp, #64	; 0x40
 8012810:	af00      	add	r7, sp, #0
 8012812:	4603      	mov	r3, r0
 8012814:	603a      	str	r2, [r7, #0]
 8012816:	71fb      	strb	r3, [r7, #7]
 8012818:	460b      	mov	r3, r1
 801281a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801281c:	2301      	movs	r3, #1
 801281e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 8012822:	79bb      	ldrb	r3, [r7, #6]
 8012824:	2b03      	cmp	r3, #3
 8012826:	d850      	bhi.n	80128ca <USBH_ioctl+0xbe>
 8012828:	a201      	add	r2, pc, #4	; (adr r2, 8012830 <USBH_ioctl+0x24>)
 801282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801282e:	bf00      	nop
 8012830:	08012841 	.word	0x08012841
 8012834:	08012849 	.word	0x08012849
 8012838:	08012873 	.word	0x08012873
 801283c:	0801289f 	.word	0x0801289f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 8012840:	2300      	movs	r3, #0
 8012842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012846:	e043      	b.n	80128d0 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8012848:	f107 0208 	add.w	r2, r7, #8
 801284c:	79fb      	ldrb	r3, [r7, #7]
 801284e:	4619      	mov	r1, r3
 8012850:	4822      	ldr	r0, [pc, #136]	; (80128dc <USBH_ioctl+0xd0>)
 8012852:	f7fa fc84 	bl	800d15e <USBH_MSC_GetLUNInfo>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d106      	bne.n	801286a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8012862:	2300      	movs	r3, #0
 8012864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012868:	e032      	b.n	80128d0 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012870:	e02e      	b.n	80128d0 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8012872:	f107 0208 	add.w	r2, r7, #8
 8012876:	79fb      	ldrb	r3, [r7, #7]
 8012878:	4619      	mov	r1, r3
 801287a:	4818      	ldr	r0, [pc, #96]	; (80128dc <USBH_ioctl+0xd0>)
 801287c:	f7fa fc6f 	bl	800d15e <USBH_MSC_GetLUNInfo>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d107      	bne.n	8012896 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8012886:	8a3b      	ldrh	r3, [r7, #16]
 8012888:	461a      	mov	r2, r3
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801288e:	2300      	movs	r3, #0
 8012890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012894:	e01c      	b.n	80128d0 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8012896:	2301      	movs	r3, #1
 8012898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 801289c:	e018      	b.n	80128d0 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 801289e:	f107 0208 	add.w	r2, r7, #8
 80128a2:	79fb      	ldrb	r3, [r7, #7]
 80128a4:	4619      	mov	r1, r3
 80128a6:	480d      	ldr	r0, [pc, #52]	; (80128dc <USBH_ioctl+0xd0>)
 80128a8:	f7fa fc59 	bl	800d15e <USBH_MSC_GetLUNInfo>
 80128ac:	4603      	mov	r3, r0
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d107      	bne.n	80128c2 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80128b2:	8a3b      	ldrh	r3, [r7, #16]
 80128b4:	461a      	mov	r2, r3
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80128ba:	2300      	movs	r3, #0
 80128bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80128c0:	e006      	b.n	80128d0 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80128c2:	2301      	movs	r3, #1
 80128c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80128c8:	e002      	b.n	80128d0 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 80128ca:	2304      	movs	r3, #4
 80128cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 80128d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3740      	adds	r7, #64	; 0x40
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	2000df18 	.word	0x2000df18

080128e0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b086      	sub	sp, #24
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	6039      	str	r1, [r7, #0]
 80128ea:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 80128ec:	2300      	movs	r3, #0
 80128ee:	60fb      	str	r3, [r7, #12]
 80128f0:	2300      	movs	r3, #0
 80128f2:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80128f4:	f107 030c 	add.w	r3, r7, #12
 80128f8:	2101      	movs	r1, #1
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 f8cb 	bl	8012a96 <osSemaphoreCreate>
 8012900:	4602      	mov	r2, r0
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	bf14      	ite	ne
 801290e:	2301      	movne	r3, #1
 8012910:	2300      	moveq	r3, #0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	617b      	str	r3, [r7, #20]
  
  return ret;
 8012916:	697b      	ldr	r3, [r7, #20]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3718      	adds	r7, #24
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f96b 	bl	8012c04 <osSemaphoreDelete>
  return 1;
 801292e:	2301      	movs	r3, #1
}
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012940:	2300      	movs	r3, #0
 8012942:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 f8d7 	bl	8012afc <osSemaphoreWait>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d101      	bne.n	8012958 <ff_req_grant+0x20>
  {
    ret = 1;
 8012954:	2301      	movs	r3, #1
 8012956:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8012958:	68fb      	ldr	r3, [r7, #12]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b082      	sub	sp, #8
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f000 f914 	bl	8012b98 <osSemaphoreRelease>
}
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801298a:	2b84      	cmp	r3, #132	; 0x84
 801298c:	d005      	beq.n	801299a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801298e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	4413      	add	r3, r2
 8012996:	3303      	adds	r3, #3
 8012998:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801299a:	68fb      	ldr	r3, [r7, #12]
}
 801299c:	4618      	mov	r0, r3
 801299e:	3714      	adds	r7, #20
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bc80      	pop	{r7}
 80129a4:	4770      	bx	lr

080129a6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129ac:	f3ef 8305 	mrs	r3, IPSR
 80129b0:	607b      	str	r3, [r7, #4]
  return(result);
 80129b2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	bf14      	ite	ne
 80129b8:	2301      	movne	r3, #1
 80129ba:	2300      	moveq	r3, #0
 80129bc:	b2db      	uxtb	r3, r3
}
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bc80      	pop	{r7}
 80129c6:	4770      	bx	lr

080129c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80129cc:	f001 fbd0 	bl	8014170 <vTaskStartScheduler>
  
  return osOK;
 80129d0:	2300      	movs	r3, #0
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80129d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129d8:	b089      	sub	sp, #36	; 0x24
 80129da:	af04      	add	r7, sp, #16
 80129dc:	6078      	str	r0, [r7, #4]
 80129de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	695b      	ldr	r3, [r3, #20]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d020      	beq.n	8012a2a <osThreadCreate+0x54>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	699b      	ldr	r3, [r3, #24]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d01c      	beq.n	8012a2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	685c      	ldr	r4, [r3, #4]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681d      	ldr	r5, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	691e      	ldr	r6, [r3, #16]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff ffb8 	bl	8012978 <makeFreeRtosPriority>
 8012a08:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	695b      	ldr	r3, [r3, #20]
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a12:	9202      	str	r2, [sp, #8]
 8012a14:	9301      	str	r3, [sp, #4]
 8012a16:	9100      	str	r1, [sp, #0]
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	4632      	mov	r2, r6
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4620      	mov	r0, r4
 8012a20:	f001 f9d0 	bl	8013dc4 <xTaskCreateStatic>
 8012a24:	4603      	mov	r3, r0
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	e01c      	b.n	8012a64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	685c      	ldr	r4, [r3, #4]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a36:	b29e      	uxth	r6, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff ff9a 	bl	8012978 <makeFreeRtosPriority>
 8012a44:	4602      	mov	r2, r0
 8012a46:	f107 030c 	add.w	r3, r7, #12
 8012a4a:	9301      	str	r3, [sp, #4]
 8012a4c:	9200      	str	r2, [sp, #0]
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	4632      	mov	r2, r6
 8012a52:	4629      	mov	r1, r5
 8012a54:	4620      	mov	r0, r4
 8012a56:	f001 fa11 	bl	8013e7c <xTaskCreate>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d001      	beq.n	8012a64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012a60:	2300      	movs	r3, #0
 8012a62:	e000      	b.n	8012a66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012a64:	68fb      	ldr	r3, [r7, #12]
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3714      	adds	r7, #20
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b084      	sub	sp, #16
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <osDelay+0x16>
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	e000      	b.n	8012a86 <osDelay+0x18>
 8012a84:	2301      	movs	r3, #1
 8012a86:	4618      	mov	r0, r3
 8012a88:	f001 fb3e 	bl	8014108 <vTaskDelay>
  
  return osOK;
 8012a8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b086      	sub	sp, #24
 8012a9a:	af02      	add	r7, sp, #8
 8012a9c:	6078      	str	r0, [r7, #4]
 8012a9e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d00f      	beq.n	8012ac8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d10a      	bne.n	8012ac4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	2203      	movs	r2, #3
 8012ab4:	9200      	str	r2, [sp, #0]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	2100      	movs	r1, #0
 8012aba:	2001      	movs	r0, #1
 8012abc:	f000 faaa 	bl	8013014 <xQueueGenericCreateStatic>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	e016      	b.n	8012af2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e014      	b.n	8012af2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d110      	bne.n	8012af0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012ace:	2203      	movs	r2, #3
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	2001      	movs	r0, #1
 8012ad4:	f000 fb15 	bl	8013102 <xQueueGenericCreate>
 8012ad8:	60f8      	str	r0, [r7, #12]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d005      	beq.n	8012aec <osSemaphoreCreate+0x56>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	68f8      	ldr	r0, [r7, #12]
 8012ae8:	f000 fb68 	bl	80131bc <xQueueGenericSend>
      return sema;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	e000      	b.n	8012af2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012af0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
	...

08012afc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012b06:	2300      	movs	r3, #0
 8012b08:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d101      	bne.n	8012b14 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012b10:	2380      	movs	r3, #128	; 0x80
 8012b12:	e03a      	b.n	8012b8a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012b14:	2300      	movs	r3, #0
 8012b16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1e:	d103      	bne.n	8012b28 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012b20:	f04f 33ff 	mov.w	r3, #4294967295
 8012b24:	60fb      	str	r3, [r7, #12]
 8012b26:	e009      	b.n	8012b3c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d006      	beq.n	8012b3c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d101      	bne.n	8012b3c <osSemaphoreWait+0x40>
      ticks = 1;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012b3c:	f7ff ff33 	bl	80129a6 <inHandlerMode>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d017      	beq.n	8012b76 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012b46:	f107 0308 	add.w	r3, r7, #8
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f000 ff44 	bl	80139dc <xQueueReceiveFromISR>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d001      	beq.n	8012b5e <osSemaphoreWait+0x62>
      return osErrorOS;
 8012b5a:	23ff      	movs	r3, #255	; 0xff
 8012b5c:	e015      	b.n	8012b8a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d011      	beq.n	8012b88 <osSemaphoreWait+0x8c>
 8012b64:	4b0b      	ldr	r3, [pc, #44]	; (8012b94 <osSemaphoreWait+0x98>)
 8012b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b6a:	601a      	str	r2, [r3, #0]
 8012b6c:	f3bf 8f4f 	dsb	sy
 8012b70:	f3bf 8f6f 	isb	sy
 8012b74:	e008      	b.n	8012b88 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012b76:	68f9      	ldr	r1, [r7, #12]
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 fe23 	bl	80137c4 <xQueueSemaphoreTake>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d001      	beq.n	8012b88 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012b84:	23ff      	movs	r3, #255	; 0xff
 8012b86:	e000      	b.n	8012b8a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012b88:	2300      	movs	r3, #0
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	e000ed04 	.word	0xe000ed04

08012b98 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012ba8:	f7ff fefd 	bl	80129a6 <inHandlerMode>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d016      	beq.n	8012be0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012bb2:	f107 0308 	add.w	r3, r7, #8
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f000 fc95 	bl	80134e8 <xQueueGiveFromISR>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d001      	beq.n	8012bc8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012bc4:	23ff      	movs	r3, #255	; 0xff
 8012bc6:	e017      	b.n	8012bf8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d013      	beq.n	8012bf6 <osSemaphoreRelease+0x5e>
 8012bce:	4b0c      	ldr	r3, [pc, #48]	; (8012c00 <osSemaphoreRelease+0x68>)
 8012bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bd4:	601a      	str	r2, [r3, #0]
 8012bd6:	f3bf 8f4f 	dsb	sy
 8012bda:	f3bf 8f6f 	isb	sy
 8012bde:	e00a      	b.n	8012bf6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012be0:	2300      	movs	r3, #0
 8012be2:	2200      	movs	r2, #0
 8012be4:	2100      	movs	r1, #0
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f000 fae8 	bl	80131bc <xQueueGenericSend>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	d001      	beq.n	8012bf6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012bf2:	23ff      	movs	r3, #255	; 0xff
 8012bf4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3710      	adds	r7, #16
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	e000ed04 	.word	0xe000ed04

08012c04 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012c0c:	f7ff fecb 	bl	80129a6 <inHandlerMode>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d001      	beq.n	8012c1a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012c16:	2382      	movs	r3, #130	; 0x82
 8012c18:	e003      	b.n	8012c22 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 ff5e 	bl	8013adc <vQueueDelete>

  return osOK; 
 8012c20:	2300      	movs	r3, #0
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3708      	adds	r7, #8
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012c2a:	b590      	push	{r4, r7, lr}
 8012c2c:	b085      	sub	sp, #20
 8012c2e:	af02      	add	r7, sp, #8
 8012c30:	6078      	str	r0, [r7, #4]
 8012c32:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d011      	beq.n	8012c60 <osMessageCreate+0x36>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00d      	beq.n	8012c60 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6818      	ldr	r0, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6859      	ldr	r1, [r3, #4]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	689a      	ldr	r2, [r3, #8]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	2400      	movs	r4, #0
 8012c56:	9400      	str	r4, [sp, #0]
 8012c58:	f000 f9dc 	bl	8013014 <xQueueGenericCreateStatic>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	e008      	b.n	8012c72 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6818      	ldr	r0, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	f000 fa49 	bl	8013102 <xQueueGenericCreate>
 8012c70:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	370c      	adds	r7, #12
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd90      	pop	{r4, r7, pc}
	...

08012c7c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d101      	bne.n	8012c9a <osMessagePut+0x1e>
    ticks = 1;
 8012c96:	2301      	movs	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012c9a:	f7ff fe84 	bl	80129a6 <inHandlerMode>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d018      	beq.n	8012cd6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012ca4:	f107 0210 	add.w	r2, r7, #16
 8012ca8:	f107 0108 	add.w	r1, r7, #8
 8012cac:	2300      	movs	r3, #0
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f000 fb82 	bl	80133b8 <xQueueGenericSendFromISR>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d001      	beq.n	8012cbe <osMessagePut+0x42>
      return osErrorOS;
 8012cba:	23ff      	movs	r3, #255	; 0xff
 8012cbc:	e018      	b.n	8012cf0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d014      	beq.n	8012cee <osMessagePut+0x72>
 8012cc4:	4b0c      	ldr	r3, [pc, #48]	; (8012cf8 <osMessagePut+0x7c>)
 8012cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cca:	601a      	str	r2, [r3, #0]
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	e00b      	b.n	8012cee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012cd6:	f107 0108 	add.w	r1, r7, #8
 8012cda:	2300      	movs	r3, #0
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f000 fa6c 	bl	80131bc <xQueueGenericSend>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d001      	beq.n	8012cee <osMessagePut+0x72>
      return osErrorOS;
 8012cea:	23ff      	movs	r3, #255	; 0xff
 8012cec:	e000      	b.n	8012cf0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012cee:	2300      	movs	r3, #0
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3718      	adds	r7, #24
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	e000ed04 	.word	0xe000ed04

08012cfc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012cfc:	b590      	push	{r4, r7, lr}
 8012cfe:	b08b      	sub	sp, #44	; 0x2c
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10a      	bne.n	8012d2c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012d16:	2380      	movs	r3, #128	; 0x80
 8012d18:	617b      	str	r3, [r7, #20]
    return event;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	461c      	mov	r4, r3
 8012d1e:	f107 0314 	add.w	r3, r7, #20
 8012d22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d2a:	e054      	b.n	8012dd6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d3a:	d103      	bne.n	8012d44 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d40:	627b      	str	r3, [r7, #36]	; 0x24
 8012d42:	e009      	b.n	8012d58 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d006      	beq.n	8012d58 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d101      	bne.n	8012d58 <osMessageGet+0x5c>
      ticks = 1;
 8012d54:	2301      	movs	r3, #1
 8012d56:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012d58:	f7ff fe25 	bl	80129a6 <inHandlerMode>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d01c      	beq.n	8012d9c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012d62:	f107 0220 	add.w	r2, r7, #32
 8012d66:	f107 0314 	add.w	r3, r7, #20
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	68b8      	ldr	r0, [r7, #8]
 8012d70:	f000 fe34 	bl	80139dc <xQueueReceiveFromISR>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d102      	bne.n	8012d80 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012d7a:	2310      	movs	r3, #16
 8012d7c:	617b      	str	r3, [r7, #20]
 8012d7e:	e001      	b.n	8012d84 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012d80:	2300      	movs	r3, #0
 8012d82:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d84:	6a3b      	ldr	r3, [r7, #32]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d01d      	beq.n	8012dc6 <osMessageGet+0xca>
 8012d8a:	4b15      	ldr	r3, [pc, #84]	; (8012de0 <osMessageGet+0xe4>)
 8012d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	e014      	b.n	8012dc6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012d9c:	f107 0314 	add.w	r3, r7, #20
 8012da0:	3304      	adds	r3, #4
 8012da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da4:	4619      	mov	r1, r3
 8012da6:	68b8      	ldr	r0, [r7, #8]
 8012da8:	f000 fc2c 	bl	8013604 <xQueueReceive>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d102      	bne.n	8012db8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012db2:	2310      	movs	r3, #16
 8012db4:	617b      	str	r3, [r7, #20]
 8012db6:	e006      	b.n	8012dc6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d101      	bne.n	8012dc2 <osMessageGet+0xc6>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e000      	b.n	8012dc4 <osMessageGet+0xc8>
 8012dc2:	2340      	movs	r3, #64	; 0x40
 8012dc4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	461c      	mov	r4, r3
 8012dca:	f107 0314 	add.w	r3, r7, #20
 8012dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	372c      	adds	r7, #44	; 0x2c
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd90      	pop	{r4, r7, pc}
 8012dde:	bf00      	nop
 8012de0:	e000ed04 	.word	0xe000ed04

08012de4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f103 0208 	add.w	r2, r3, #8
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f04f 32ff 	mov.w	r2, #4294967295
 8012dfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f103 0208 	add.w	r2, r3, #8
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f103 0208 	add.w	r2, r3, #8
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2200      	movs	r2, #0
 8012e16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bc80      	pop	{r7}
 8012e20:	4770      	bx	lr

08012e22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012e30:	bf00      	nop
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bc80      	pop	{r7}
 8012e38:	4770      	bx	lr

08012e3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e3a:	b480      	push	{r7}
 8012e3c:	b085      	sub	sp, #20
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	689a      	ldr	r2, [r3, #8]
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	1c5a      	adds	r2, r3, #1
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	601a      	str	r2, [r3, #0]
}
 8012e76:	bf00      	nop
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bc80      	pop	{r7}
 8012e7e:	4770      	bx	lr

08012e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e80:	b480      	push	{r7}
 8012e82:	b085      	sub	sp, #20
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e96:	d103      	bne.n	8012ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	691b      	ldr	r3, [r3, #16]
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	e00c      	b.n	8012eba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3308      	adds	r3, #8
 8012ea4:	60fb      	str	r3, [r7, #12]
 8012ea6:	e002      	b.n	8012eae <vListInsert+0x2e>
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	60fb      	str	r3, [r7, #12]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	68ba      	ldr	r2, [r7, #8]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d2f6      	bcs.n	8012ea8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	685a      	ldr	r2, [r3, #4]
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	683a      	ldr	r2, [r7, #0]
 8012ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	1c5a      	adds	r2, r3, #1
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	601a      	str	r2, [r3, #0]
}
 8012ee6:	bf00      	nop
 8012ee8:	3714      	adds	r7, #20
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bc80      	pop	{r7}
 8012eee:	4770      	bx	lr

08012ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	b085      	sub	sp, #20
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	6892      	ldr	r2, [r2, #8]
 8012f06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	6852      	ldr	r2, [r2, #4]
 8012f10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d103      	bne.n	8012f24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	689a      	ldr	r2, [r3, #8]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	1e5a      	subs	r2, r3, #1
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3714      	adds	r7, #20
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bc80      	pop	{r7}
 8012f40:	4770      	bx	lr
	...

08012f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10a      	bne.n	8012f6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5c:	f383 8811 	msr	BASEPRI, r3
 8012f60:	f3bf 8f6f 	isb	sy
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012f6a:	bf00      	nop
 8012f6c:	e7fe      	b.n	8012f6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012f6e:	f002 f84d 	bl	801500c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f7a:	68f9      	ldr	r1, [r7, #12]
 8012f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012f7e:	fb01 f303 	mul.w	r3, r1, r3
 8012f82:	441a      	add	r2, r3
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	68f9      	ldr	r1, [r7, #12]
 8012fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fa4:	fb01 f303 	mul.w	r3, r1, r3
 8012fa8:	441a      	add	r2, r3
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	22ff      	movs	r2, #255	; 0xff
 8012fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	22ff      	movs	r2, #255	; 0xff
 8012fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d114      	bne.n	8012fee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	691b      	ldr	r3, [r3, #16]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d01a      	beq.n	8013002 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	3310      	adds	r3, #16
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f001 fb25 	bl	8014620 <xTaskRemoveFromEventList>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d012      	beq.n	8013002 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012fdc:	4b0c      	ldr	r3, [pc, #48]	; (8013010 <xQueueGenericReset+0xcc>)
 8012fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fe2:	601a      	str	r2, [r3, #0]
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	f3bf 8f6f 	isb	sy
 8012fec:	e009      	b.n	8013002 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3310      	adds	r3, #16
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fef6 	bl	8012de4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	3324      	adds	r3, #36	; 0x24
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fef1 	bl	8012de4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013002:	f002 f833 	bl	801506c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013006:	2301      	movs	r3, #1
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	e000ed04 	.word	0xe000ed04

08013014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013014:	b580      	push	{r7, lr}
 8013016:	b08e      	sub	sp, #56	; 0x38
 8013018:	af02      	add	r7, sp, #8
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10a      	bne.n	801303e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302c:	f383 8811 	msr	BASEPRI, r3
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	f3bf 8f4f 	dsb	sy
 8013038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801303a:	bf00      	nop
 801303c:	e7fe      	b.n	801303c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d10a      	bne.n	801305a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013056:	bf00      	nop
 8013058:	e7fe      	b.n	8013058 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <xQueueGenericCreateStatic+0x52>
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <xQueueGenericCreateStatic+0x56>
 8013066:	2301      	movs	r3, #1
 8013068:	e000      	b.n	801306c <xQueueGenericCreateStatic+0x58>
 801306a:	2300      	movs	r3, #0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10a      	bne.n	8013086 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	623b      	str	r3, [r7, #32]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d102      	bne.n	8013092 <xQueueGenericCreateStatic+0x7e>
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <xQueueGenericCreateStatic+0x82>
 8013092:	2301      	movs	r3, #1
 8013094:	e000      	b.n	8013098 <xQueueGenericCreateStatic+0x84>
 8013096:	2300      	movs	r3, #0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d10a      	bne.n	80130b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a0:	f383 8811 	msr	BASEPRI, r3
 80130a4:	f3bf 8f6f 	isb	sy
 80130a8:	f3bf 8f4f 	dsb	sy
 80130ac:	61fb      	str	r3, [r7, #28]
}
 80130ae:	bf00      	nop
 80130b0:	e7fe      	b.n	80130b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80130b2:	2348      	movs	r3, #72	; 0x48
 80130b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	2b48      	cmp	r3, #72	; 0x48
 80130ba:	d00a      	beq.n	80130d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80130bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c0:	f383 8811 	msr	BASEPRI, r3
 80130c4:	f3bf 8f6f 	isb	sy
 80130c8:	f3bf 8f4f 	dsb	sy
 80130cc:	61bb      	str	r3, [r7, #24]
}
 80130ce:	bf00      	nop
 80130d0:	e7fe      	b.n	80130d0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80130d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00d      	beq.n	80130f8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	2201      	movs	r2, #1
 80130e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80130e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80130e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	4613      	mov	r3, r2
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	68b9      	ldr	r1, [r7, #8]
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f000 f843 	bl	801317e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3730      	adds	r7, #48	; 0x30
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013102:	b580      	push	{r7, lr}
 8013104:	b08a      	sub	sp, #40	; 0x28
 8013106:	af02      	add	r7, sp, #8
 8013108:	60f8      	str	r0, [r7, #12]
 801310a:	60b9      	str	r1, [r7, #8]
 801310c:	4613      	mov	r3, r2
 801310e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d10a      	bne.n	801312c <xQueueGenericCreate+0x2a>
	__asm volatile
 8013116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311a:	f383 8811 	msr	BASEPRI, r3
 801311e:	f3bf 8f6f 	isb	sy
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	613b      	str	r3, [r7, #16]
}
 8013128:	bf00      	nop
 801312a:	e7fe      	b.n	801312a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d102      	bne.n	8013138 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013132:	2300      	movs	r3, #0
 8013134:	61fb      	str	r3, [r7, #28]
 8013136:	e004      	b.n	8013142 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	fb02 f303 	mul.w	r3, r2, r3
 8013140:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	3348      	adds	r3, #72	; 0x48
 8013146:	4618      	mov	r0, r3
 8013148:	f002 f860 	bl	801520c <pvPortMalloc>
 801314c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00f      	beq.n	8013174 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	3348      	adds	r3, #72	; 0x48
 8013158:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	2200      	movs	r2, #0
 801315e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013162:	79fa      	ldrb	r2, [r7, #7]
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	4613      	mov	r3, r2
 801316a:	697a      	ldr	r2, [r7, #20]
 801316c:	68b9      	ldr	r1, [r7, #8]
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f000 f805 	bl	801317e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8013174:	69bb      	ldr	r3, [r7, #24]
	}
 8013176:	4618      	mov	r0, r3
 8013178:	3720      	adds	r7, #32
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801317e:	b580      	push	{r7, lr}
 8013180:	b084      	sub	sp, #16
 8013182:	af00      	add	r7, sp, #0
 8013184:	60f8      	str	r0, [r7, #12]
 8013186:	60b9      	str	r1, [r7, #8]
 8013188:	607a      	str	r2, [r7, #4]
 801318a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d103      	bne.n	801319a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	69ba      	ldr	r2, [r7, #24]
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	e002      	b.n	80131a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	687a      	ldr	r2, [r7, #4]
 801319e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	68ba      	ldr	r2, [r7, #8]
 80131aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80131ac:	2101      	movs	r1, #1
 80131ae:	69b8      	ldr	r0, [r7, #24]
 80131b0:	f7ff fec8 	bl	8012f44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80131b4:	bf00      	nop
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b08e      	sub	sp, #56	; 0x38
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
 80131c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80131ca:	2300      	movs	r3, #0
 80131cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80131d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d10a      	bne.n	80131ee <xQueueGenericSend+0x32>
	__asm volatile
 80131d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131dc:	f383 8811 	msr	BASEPRI, r3
 80131e0:	f3bf 8f6f 	isb	sy
 80131e4:	f3bf 8f4f 	dsb	sy
 80131e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131ea:	bf00      	nop
 80131ec:	e7fe      	b.n	80131ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d103      	bne.n	80131fc <xQueueGenericSend+0x40>
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d101      	bne.n	8013200 <xQueueGenericSend+0x44>
 80131fc:	2301      	movs	r3, #1
 80131fe:	e000      	b.n	8013202 <xQueueGenericSend+0x46>
 8013200:	2300      	movs	r3, #0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d10a      	bne.n	801321c <xQueueGenericSend+0x60>
	__asm volatile
 8013206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320a:	f383 8811 	msr	BASEPRI, r3
 801320e:	f3bf 8f6f 	isb	sy
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013218:	bf00      	nop
 801321a:	e7fe      	b.n	801321a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	2b02      	cmp	r3, #2
 8013220:	d103      	bne.n	801322a <xQueueGenericSend+0x6e>
 8013222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013226:	2b01      	cmp	r3, #1
 8013228:	d101      	bne.n	801322e <xQueueGenericSend+0x72>
 801322a:	2301      	movs	r3, #1
 801322c:	e000      	b.n	8013230 <xQueueGenericSend+0x74>
 801322e:	2300      	movs	r3, #0
 8013230:	2b00      	cmp	r3, #0
 8013232:	d10a      	bne.n	801324a <xQueueGenericSend+0x8e>
	__asm volatile
 8013234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013238:	f383 8811 	msr	BASEPRI, r3
 801323c:	f3bf 8f6f 	isb	sy
 8013240:	f3bf 8f4f 	dsb	sy
 8013244:	623b      	str	r3, [r7, #32]
}
 8013246:	bf00      	nop
 8013248:	e7fe      	b.n	8013248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801324a:	f001 fbad 	bl	80149a8 <xTaskGetSchedulerState>
 801324e:	4603      	mov	r3, r0
 8013250:	2b00      	cmp	r3, #0
 8013252:	d102      	bne.n	801325a <xQueueGenericSend+0x9e>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <xQueueGenericSend+0xa2>
 801325a:	2301      	movs	r3, #1
 801325c:	e000      	b.n	8013260 <xQueueGenericSend+0xa4>
 801325e:	2300      	movs	r3, #0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10a      	bne.n	801327a <xQueueGenericSend+0xbe>
	__asm volatile
 8013264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013268:	f383 8811 	msr	BASEPRI, r3
 801326c:	f3bf 8f6f 	isb	sy
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	61fb      	str	r3, [r7, #28]
}
 8013276:	bf00      	nop
 8013278:	e7fe      	b.n	8013278 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801327a:	f001 fec7 	bl	801500c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013286:	429a      	cmp	r2, r3
 8013288:	d302      	bcc.n	8013290 <xQueueGenericSend+0xd4>
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d129      	bne.n	80132e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013290:	683a      	ldr	r2, [r7, #0]
 8013292:	68b9      	ldr	r1, [r7, #8]
 8013294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013296:	f000 fc5b 	bl	8013b50 <prvCopyDataToQueue>
 801329a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d010      	beq.n	80132c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a6:	3324      	adds	r3, #36	; 0x24
 80132a8:	4618      	mov	r0, r3
 80132aa:	f001 f9b9 	bl	8014620 <xTaskRemoveFromEventList>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d013      	beq.n	80132dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80132b4:	4b3f      	ldr	r3, [pc, #252]	; (80133b4 <xQueueGenericSend+0x1f8>)
 80132b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ba:	601a      	str	r2, [r3, #0]
 80132bc:	f3bf 8f4f 	dsb	sy
 80132c0:	f3bf 8f6f 	isb	sy
 80132c4:	e00a      	b.n	80132dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80132c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d007      	beq.n	80132dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80132cc:	4b39      	ldr	r3, [pc, #228]	; (80133b4 <xQueueGenericSend+0x1f8>)
 80132ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80132dc:	f001 fec6 	bl	801506c <vPortExitCritical>
				return pdPASS;
 80132e0:	2301      	movs	r3, #1
 80132e2:	e063      	b.n	80133ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d103      	bne.n	80132f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80132ea:	f001 febf 	bl	801506c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	e05c      	b.n	80133ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d106      	bne.n	8013306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132f8:	f107 0314 	add.w	r3, r7, #20
 80132fc:	4618      	mov	r0, r3
 80132fe:	f001 f9f1 	bl	80146e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013302:	2301      	movs	r3, #1
 8013304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013306:	f001 feb1 	bl	801506c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801330a:	f000 ff9b 	bl	8014244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801330e:	f001 fe7d 	bl	801500c <vPortEnterCritical>
 8013312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013318:	b25b      	sxtb	r3, r3
 801331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801331e:	d103      	bne.n	8013328 <xQueueGenericSend+0x16c>
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	2200      	movs	r2, #0
 8013324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801332e:	b25b      	sxtb	r3, r3
 8013330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013334:	d103      	bne.n	801333e <xQueueGenericSend+0x182>
 8013336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013338:	2200      	movs	r2, #0
 801333a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801333e:	f001 fe95 	bl	801506c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013342:	1d3a      	adds	r2, r7, #4
 8013344:	f107 0314 	add.w	r3, r7, #20
 8013348:	4611      	mov	r1, r2
 801334a:	4618      	mov	r0, r3
 801334c:	f001 f9e0 	bl	8014710 <xTaskCheckForTimeOut>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d124      	bne.n	80133a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013358:	f000 fcf2 	bl	8013d40 <prvIsQueueFull>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d018      	beq.n	8013394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013364:	3310      	adds	r3, #16
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	4611      	mov	r1, r2
 801336a:	4618      	mov	r0, r3
 801336c:	f001 f934 	bl	80145d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013372:	f000 fc7d 	bl	8013c70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013376:	f000 ff73 	bl	8014260 <xTaskResumeAll>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	f47f af7c 	bne.w	801327a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013382:	4b0c      	ldr	r3, [pc, #48]	; (80133b4 <xQueueGenericSend+0x1f8>)
 8013384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013388:	601a      	str	r2, [r3, #0]
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	e772      	b.n	801327a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013396:	f000 fc6b 	bl	8013c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801339a:	f000 ff61 	bl	8014260 <xTaskResumeAll>
 801339e:	e76c      	b.n	801327a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80133a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133a2:	f000 fc65 	bl	8013c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80133a6:	f000 ff5b 	bl	8014260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80133aa:	2300      	movs	r3, #0
		}
	}
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3738      	adds	r7, #56	; 0x38
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	e000ed04 	.word	0xe000ed04

080133b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b08e      	sub	sp, #56	; 0x38
 80133bc:	af00      	add	r7, sp, #0
 80133be:	60f8      	str	r0, [r7, #12]
 80133c0:	60b9      	str	r1, [r7, #8]
 80133c2:	607a      	str	r2, [r7, #4]
 80133c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10a      	bne.n	80133e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80133d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d4:	f383 8811 	msr	BASEPRI, r3
 80133d8:	f3bf 8f6f 	isb	sy
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80133e2:	bf00      	nop
 80133e4:	e7fe      	b.n	80133e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d103      	bne.n	80133f4 <xQueueGenericSendFromISR+0x3c>
 80133ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <xQueueGenericSendFromISR+0x40>
 80133f4:	2301      	movs	r3, #1
 80133f6:	e000      	b.n	80133fa <xQueueGenericSendFromISR+0x42>
 80133f8:	2300      	movs	r3, #0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10a      	bne.n	8013414 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	623b      	str	r3, [r7, #32]
}
 8013410:	bf00      	nop
 8013412:	e7fe      	b.n	8013412 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b02      	cmp	r3, #2
 8013418:	d103      	bne.n	8013422 <xQueueGenericSendFromISR+0x6a>
 801341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801341e:	2b01      	cmp	r3, #1
 8013420:	d101      	bne.n	8013426 <xQueueGenericSendFromISR+0x6e>
 8013422:	2301      	movs	r3, #1
 8013424:	e000      	b.n	8013428 <xQueueGenericSendFromISR+0x70>
 8013426:	2300      	movs	r3, #0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10a      	bne.n	8013442 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013430:	f383 8811 	msr	BASEPRI, r3
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	61fb      	str	r3, [r7, #28]
}
 801343e:	bf00      	nop
 8013440:	e7fe      	b.n	8013440 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013442:	f001 fea5 	bl	8015190 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013446:	f3ef 8211 	mrs	r2, BASEPRI
 801344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	61ba      	str	r2, [r7, #24]
 801345c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801345e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013460:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346a:	429a      	cmp	r2, r3
 801346c:	d302      	bcc.n	8013474 <xQueueGenericSendFromISR+0xbc>
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b02      	cmp	r3, #2
 8013472:	d12c      	bne.n	80134ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801347a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	68b9      	ldr	r1, [r7, #8]
 8013482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013484:	f000 fb64 	bl	8013b50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013488:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013490:	d112      	bne.n	80134b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013496:	2b00      	cmp	r3, #0
 8013498:	d016      	beq.n	80134c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349c:	3324      	adds	r3, #36	; 0x24
 801349e:	4618      	mov	r0, r3
 80134a0:	f001 f8be 	bl	8014620 <xTaskRemoveFromEventList>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d00e      	beq.n	80134c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00b      	beq.n	80134c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2201      	movs	r2, #1
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	e007      	b.n	80134c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80134b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80134bc:	3301      	adds	r3, #1
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	b25a      	sxtb	r2, r3
 80134c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80134c8:	2301      	movs	r3, #1
 80134ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80134cc:	e001      	b.n	80134d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	637b      	str	r3, [r7, #52]	; 0x34
 80134d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80134dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80134de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3738      	adds	r7, #56	; 0x38
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b08e      	sub	sp, #56	; 0x38
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d10a      	bne.n	8013512 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	623b      	str	r3, [r7, #32]
}
 801350e:	bf00      	nop
 8013510:	e7fe      	b.n	8013510 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013516:	2b00      	cmp	r3, #0
 8013518:	d00a      	beq.n	8013530 <xQueueGiveFromISR+0x48>
	__asm volatile
 801351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351e:	f383 8811 	msr	BASEPRI, r3
 8013522:	f3bf 8f6f 	isb	sy
 8013526:	f3bf 8f4f 	dsb	sy
 801352a:	61fb      	str	r3, [r7, #28]
}
 801352c:	bf00      	nop
 801352e:	e7fe      	b.n	801352e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d103      	bne.n	8013540 <xQueueGiveFromISR+0x58>
 8013538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <xQueueGiveFromISR+0x5c>
 8013540:	2301      	movs	r3, #1
 8013542:	e000      	b.n	8013546 <xQueueGiveFromISR+0x5e>
 8013544:	2300      	movs	r3, #0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10a      	bne.n	8013560 <xQueueGiveFromISR+0x78>
	__asm volatile
 801354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354e:	f383 8811 	msr	BASEPRI, r3
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	f3bf 8f4f 	dsb	sy
 801355a:	61bb      	str	r3, [r7, #24]
}
 801355c:	bf00      	nop
 801355e:	e7fe      	b.n	801355e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013560:	f001 fe16 	bl	8015190 <vPortValidateInterruptPriority>
	__asm volatile
 8013564:	f3ef 8211 	mrs	r2, BASEPRI
 8013568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356c:	f383 8811 	msr	BASEPRI, r3
 8013570:	f3bf 8f6f 	isb	sy
 8013574:	f3bf 8f4f 	dsb	sy
 8013578:	617a      	str	r2, [r7, #20]
 801357a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801357c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801357e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013584:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801358a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801358c:	429a      	cmp	r2, r3
 801358e:	d22b      	bcs.n	80135e8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359c:	1c5a      	adds	r2, r3, #1
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80135a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80135a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135aa:	d112      	bne.n	80135d2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d016      	beq.n	80135e2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b6:	3324      	adds	r3, #36	; 0x24
 80135b8:	4618      	mov	r0, r3
 80135ba:	f001 f831 	bl	8014620 <xTaskRemoveFromEventList>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00e      	beq.n	80135e2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00b      	beq.n	80135e2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	2201      	movs	r2, #1
 80135ce:	601a      	str	r2, [r3, #0]
 80135d0:	e007      	b.n	80135e2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80135d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d6:	3301      	adds	r3, #1
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	b25a      	sxtb	r2, r3
 80135dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80135e2:	2301      	movs	r3, #1
 80135e4:	637b      	str	r3, [r7, #52]	; 0x34
 80135e6:	e001      	b.n	80135ec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80135e8:	2300      	movs	r3, #0
 80135ea:	637b      	str	r3, [r7, #52]	; 0x34
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f383 8811 	msr	BASEPRI, r3
}
 80135f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3738      	adds	r7, #56	; 0x38
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
	...

08013604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b08c      	sub	sp, #48	; 0x30
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013610:	2300      	movs	r3, #0
 8013612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361a:	2b00      	cmp	r3, #0
 801361c:	d10a      	bne.n	8013634 <xQueueReceive+0x30>
	__asm volatile
 801361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013622:	f383 8811 	msr	BASEPRI, r3
 8013626:	f3bf 8f6f 	isb	sy
 801362a:	f3bf 8f4f 	dsb	sy
 801362e:	623b      	str	r3, [r7, #32]
}
 8013630:	bf00      	nop
 8013632:	e7fe      	b.n	8013632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d103      	bne.n	8013642 <xQueueReceive+0x3e>
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801363e:	2b00      	cmp	r3, #0
 8013640:	d101      	bne.n	8013646 <xQueueReceive+0x42>
 8013642:	2301      	movs	r3, #1
 8013644:	e000      	b.n	8013648 <xQueueReceive+0x44>
 8013646:	2300      	movs	r3, #0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d10a      	bne.n	8013662 <xQueueReceive+0x5e>
	__asm volatile
 801364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013650:	f383 8811 	msr	BASEPRI, r3
 8013654:	f3bf 8f6f 	isb	sy
 8013658:	f3bf 8f4f 	dsb	sy
 801365c:	61fb      	str	r3, [r7, #28]
}
 801365e:	bf00      	nop
 8013660:	e7fe      	b.n	8013660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013662:	f001 f9a1 	bl	80149a8 <xTaskGetSchedulerState>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d102      	bne.n	8013672 <xQueueReceive+0x6e>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <xQueueReceive+0x72>
 8013672:	2301      	movs	r3, #1
 8013674:	e000      	b.n	8013678 <xQueueReceive+0x74>
 8013676:	2300      	movs	r3, #0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d10a      	bne.n	8013692 <xQueueReceive+0x8e>
	__asm volatile
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	61bb      	str	r3, [r7, #24]
}
 801368e:	bf00      	nop
 8013690:	e7fe      	b.n	8013690 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013692:	f001 fcbb 	bl	801500c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d01f      	beq.n	80136e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136a2:	68b9      	ldr	r1, [r7, #8]
 80136a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136a6:	f000 fabd 	bl	8013c24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ac:	1e5a      	subs	r2, r3, #1
 80136ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b4:	691b      	ldr	r3, [r3, #16]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00f      	beq.n	80136da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	3310      	adds	r3, #16
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 ffae 	bl	8014620 <xTaskRemoveFromEventList>
 80136c4:	4603      	mov	r3, r0
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d007      	beq.n	80136da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80136ca:	4b3d      	ldr	r3, [pc, #244]	; (80137c0 <xQueueReceive+0x1bc>)
 80136cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	f3bf 8f4f 	dsb	sy
 80136d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80136da:	f001 fcc7 	bl	801506c <vPortExitCritical>
				return pdPASS;
 80136de:	2301      	movs	r3, #1
 80136e0:	e069      	b.n	80137b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d103      	bne.n	80136f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136e8:	f001 fcc0 	bl	801506c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80136ec:	2300      	movs	r3, #0
 80136ee:	e062      	b.n	80137b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136f6:	f107 0310 	add.w	r3, r7, #16
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fff2 	bl	80146e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013700:	2301      	movs	r3, #1
 8013702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013704:	f001 fcb2 	bl	801506c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013708:	f000 fd9c 	bl	8014244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801370c:	f001 fc7e 	bl	801500c <vPortEnterCritical>
 8013710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013716:	b25b      	sxtb	r3, r3
 8013718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371c:	d103      	bne.n	8013726 <xQueueReceive+0x122>
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	2200      	movs	r2, #0
 8013722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801372c:	b25b      	sxtb	r3, r3
 801372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013732:	d103      	bne.n	801373c <xQueueReceive+0x138>
 8013734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013736:	2200      	movs	r2, #0
 8013738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801373c:	f001 fc96 	bl	801506c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013740:	1d3a      	adds	r2, r7, #4
 8013742:	f107 0310 	add.w	r3, r7, #16
 8013746:	4611      	mov	r1, r2
 8013748:	4618      	mov	r0, r3
 801374a:	f000 ffe1 	bl	8014710 <xTaskCheckForTimeOut>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d123      	bne.n	801379c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013756:	f000 fadd 	bl	8013d14 <prvIsQueueEmpty>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d017      	beq.n	8013790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	3324      	adds	r3, #36	; 0x24
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	4611      	mov	r1, r2
 8013768:	4618      	mov	r0, r3
 801376a:	f000 ff35 	bl	80145d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801376e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013770:	f000 fa7e 	bl	8013c70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013774:	f000 fd74 	bl	8014260 <xTaskResumeAll>
 8013778:	4603      	mov	r3, r0
 801377a:	2b00      	cmp	r3, #0
 801377c:	d189      	bne.n	8013692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801377e:	4b10      	ldr	r3, [pc, #64]	; (80137c0 <xQueueReceive+0x1bc>)
 8013780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	f3bf 8f6f 	isb	sy
 801378e:	e780      	b.n	8013692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013792:	f000 fa6d 	bl	8013c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013796:	f000 fd63 	bl	8014260 <xTaskResumeAll>
 801379a:	e77a      	b.n	8013692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801379c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801379e:	f000 fa67 	bl	8013c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80137a2:	f000 fd5d 	bl	8014260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80137a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137a8:	f000 fab4 	bl	8013d14 <prvIsQueueEmpty>
 80137ac:	4603      	mov	r3, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f43f af6f 	beq.w	8013692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80137b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3730      	adds	r7, #48	; 0x30
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	e000ed04 	.word	0xe000ed04

080137c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b08e      	sub	sp, #56	; 0x38
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80137ce:	2300      	movs	r3, #0
 80137d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80137d6:	2300      	movs	r3, #0
 80137d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d10a      	bne.n	80137f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80137e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	623b      	str	r3, [r7, #32]
}
 80137f2:	bf00      	nop
 80137f4:	e7fe      	b.n	80137f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80137f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00a      	beq.n	8013814 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	61fb      	str	r3, [r7, #28]
}
 8013810:	bf00      	nop
 8013812:	e7fe      	b.n	8013812 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013814:	f001 f8c8 	bl	80149a8 <xTaskGetSchedulerState>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d102      	bne.n	8013824 <xQueueSemaphoreTake+0x60>
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <xQueueSemaphoreTake+0x64>
 8013824:	2301      	movs	r3, #1
 8013826:	e000      	b.n	801382a <xQueueSemaphoreTake+0x66>
 8013828:	2300      	movs	r3, #0
 801382a:	2b00      	cmp	r3, #0
 801382c:	d10a      	bne.n	8013844 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013832:	f383 8811 	msr	BASEPRI, r3
 8013836:	f3bf 8f6f 	isb	sy
 801383a:	f3bf 8f4f 	dsb	sy
 801383e:	61bb      	str	r3, [r7, #24]
}
 8013840:	bf00      	nop
 8013842:	e7fe      	b.n	8013842 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013844:	f001 fbe2 	bl	801500c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801384c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013850:	2b00      	cmp	r3, #0
 8013852:	d024      	beq.n	801389e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013856:	1e5a      	subs	r2, r3, #1
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d104      	bne.n	801386e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013864:	f001 fa6a 	bl	8014d3c <pvTaskIncrementMutexHeldCount>
 8013868:	4602      	mov	r2, r0
 801386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	691b      	ldr	r3, [r3, #16]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00f      	beq.n	8013896 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013878:	3310      	adds	r3, #16
 801387a:	4618      	mov	r0, r3
 801387c:	f000 fed0 	bl	8014620 <xTaskRemoveFromEventList>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	d007      	beq.n	8013896 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013886:	4b54      	ldr	r3, [pc, #336]	; (80139d8 <xQueueSemaphoreTake+0x214>)
 8013888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013896:	f001 fbe9 	bl	801506c <vPortExitCritical>
				return pdPASS;
 801389a:	2301      	movs	r3, #1
 801389c:	e097      	b.n	80139ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d111      	bne.n	80138c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80138a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00a      	beq.n	80138c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80138aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ae:	f383 8811 	msr	BASEPRI, r3
 80138b2:	f3bf 8f6f 	isb	sy
 80138b6:	f3bf 8f4f 	dsb	sy
 80138ba:	617b      	str	r3, [r7, #20]
}
 80138bc:	bf00      	nop
 80138be:	e7fe      	b.n	80138be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80138c0:	f001 fbd4 	bl	801506c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80138c4:	2300      	movs	r3, #0
 80138c6:	e082      	b.n	80139ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d106      	bne.n	80138dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138ce:	f107 030c 	add.w	r3, r7, #12
 80138d2:	4618      	mov	r0, r3
 80138d4:	f000 ff06 	bl	80146e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138d8:	2301      	movs	r3, #1
 80138da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138dc:	f001 fbc6 	bl	801506c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138e0:	f000 fcb0 	bl	8014244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138e4:	f001 fb92 	bl	801500c <vPortEnterCritical>
 80138e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138ee:	b25b      	sxtb	r3, r3
 80138f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f4:	d103      	bne.n	80138fe <xQueueSemaphoreTake+0x13a>
 80138f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f8:	2200      	movs	r2, #0
 80138fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80138fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013904:	b25b      	sxtb	r3, r3
 8013906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390a:	d103      	bne.n	8013914 <xQueueSemaphoreTake+0x150>
 801390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390e:	2200      	movs	r2, #0
 8013910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013914:	f001 fbaa 	bl	801506c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013918:	463a      	mov	r2, r7
 801391a:	f107 030c 	add.w	r3, r7, #12
 801391e:	4611      	mov	r1, r2
 8013920:	4618      	mov	r0, r3
 8013922:	f000 fef5 	bl	8014710 <xTaskCheckForTimeOut>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d132      	bne.n	8013992 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801392c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801392e:	f000 f9f1 	bl	8013d14 <prvIsQueueEmpty>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d026      	beq.n	8013986 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d109      	bne.n	8013954 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013940:	f001 fb64 	bl	801500c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	f001 f84b 	bl	80149e4 <xTaskPriorityInherit>
 801394e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013950:	f001 fb8c 	bl	801506c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013956:	3324      	adds	r3, #36	; 0x24
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	4611      	mov	r1, r2
 801395c:	4618      	mov	r0, r3
 801395e:	f000 fe3b 	bl	80145d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013964:	f000 f984 	bl	8013c70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013968:	f000 fc7a 	bl	8014260 <xTaskResumeAll>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	f47f af68 	bne.w	8013844 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013974:	4b18      	ldr	r3, [pc, #96]	; (80139d8 <xQueueSemaphoreTake+0x214>)
 8013976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801397a:	601a      	str	r2, [r3, #0]
 801397c:	f3bf 8f4f 	dsb	sy
 8013980:	f3bf 8f6f 	isb	sy
 8013984:	e75e      	b.n	8013844 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013988:	f000 f972 	bl	8013c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801398c:	f000 fc68 	bl	8014260 <xTaskResumeAll>
 8013990:	e758      	b.n	8013844 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013994:	f000 f96c 	bl	8013c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013998:	f000 fc62 	bl	8014260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801399c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801399e:	f000 f9b9 	bl	8013d14 <prvIsQueueEmpty>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f43f af4d 	beq.w	8013844 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80139aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d00d      	beq.n	80139cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80139b0:	f001 fb2c 	bl	801500c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80139b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139b6:	f000 f8b4 	bl	8013b22 <prvGetDisinheritPriorityAfterTimeout>
 80139ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80139bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139c2:	4618      	mov	r0, r3
 80139c4:	f001 f91a 	bl	8014bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80139c8:	f001 fb50 	bl	801506c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80139cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3738      	adds	r7, #56	; 0x38
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	e000ed04 	.word	0xe000ed04

080139dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08e      	sub	sp, #56	; 0x38
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10a      	bne.n	8013a08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80139f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f6:	f383 8811 	msr	BASEPRI, r3
 80139fa:	f3bf 8f6f 	isb	sy
 80139fe:	f3bf 8f4f 	dsb	sy
 8013a02:	623b      	str	r3, [r7, #32]
}
 8013a04:	bf00      	nop
 8013a06:	e7fe      	b.n	8013a06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d103      	bne.n	8013a16 <xQueueReceiveFromISR+0x3a>
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d101      	bne.n	8013a1a <xQueueReceiveFromISR+0x3e>
 8013a16:	2301      	movs	r3, #1
 8013a18:	e000      	b.n	8013a1c <xQueueReceiveFromISR+0x40>
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d10a      	bne.n	8013a36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a24:	f383 8811 	msr	BASEPRI, r3
 8013a28:	f3bf 8f6f 	isb	sy
 8013a2c:	f3bf 8f4f 	dsb	sy
 8013a30:	61fb      	str	r3, [r7, #28]
}
 8013a32:	bf00      	nop
 8013a34:	e7fe      	b.n	8013a34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a36:	f001 fbab 	bl	8015190 <vPortValidateInterruptPriority>
	__asm volatile
 8013a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	61ba      	str	r2, [r7, #24]
 8013a50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d02f      	beq.n	8013ac2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a6c:	68b9      	ldr	r1, [r7, #8]
 8013a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a70:	f000 f8d8 	bl	8013c24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a76:	1e5a      	subs	r2, r3, #1
 8013a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a84:	d112      	bne.n	8013aac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a88:	691b      	ldr	r3, [r3, #16]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d016      	beq.n	8013abc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a90:	3310      	adds	r3, #16
 8013a92:	4618      	mov	r0, r3
 8013a94:	f000 fdc4 	bl	8014620 <xTaskRemoveFromEventList>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00e      	beq.n	8013abc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00b      	beq.n	8013abc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	601a      	str	r2, [r3, #0]
 8013aaa:	e007      	b.n	8013abc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	b25a      	sxtb	r2, r3
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013abc:	2301      	movs	r3, #1
 8013abe:	637b      	str	r3, [r7, #52]	; 0x34
 8013ac0:	e001      	b.n	8013ac6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8013ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	f383 8811 	msr	BASEPRI, r3
}
 8013ad0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3738      	adds	r7, #56	; 0x38
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}

08013adc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d10a      	bne.n	8013b04 <vQueueDelete+0x28>
	__asm volatile
 8013aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af2:	f383 8811 	msr	BASEPRI, r3
 8013af6:	f3bf 8f6f 	isb	sy
 8013afa:	f3bf 8f4f 	dsb	sy
 8013afe:	60bb      	str	r3, [r7, #8]
}
 8013b00:	bf00      	nop
 8013b02:	e7fe      	b.n	8013b02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f000 f933 	bl	8013d70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d102      	bne.n	8013b1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f001 fc3d 	bl	8015394 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013b1a:	bf00      	nop
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013b22:	b480      	push	{r7}
 8013b24:	b085      	sub	sp, #20
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d006      	beq.n	8013b40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f1c3 0307 	rsb	r3, r3, #7
 8013b3c:	60fb      	str	r3, [r7, #12]
 8013b3e:	e001      	b.n	8013b44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013b40:	2300      	movs	r3, #0
 8013b42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013b44:	68fb      	ldr	r3, [r7, #12]
	}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3714      	adds	r7, #20
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bc80      	pop	{r7}
 8013b4e:	4770      	bx	lr

08013b50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d10d      	bne.n	8013b8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d14d      	bne.n	8013c12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 ffb8 	bl	8014af0 <xTaskPriorityDisinherit>
 8013b80:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2200      	movs	r2, #0
 8013b86:	605a      	str	r2, [r3, #4]
 8013b88:	e043      	b.n	8013c12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d119      	bne.n	8013bc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6898      	ldr	r0, [r3, #8]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b98:	461a      	mov	r2, r3
 8013b9a:	68b9      	ldr	r1, [r7, #8]
 8013b9c:	f002 f982 	bl	8015ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	689a      	ldr	r2, [r3, #8]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba8:	441a      	add	r2, r3
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	689a      	ldr	r2, [r3, #8]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d32b      	bcc.n	8013c12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	609a      	str	r2, [r3, #8]
 8013bc2:	e026      	b.n	8013c12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	68d8      	ldr	r0, [r3, #12]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bcc:	461a      	mov	r2, r3
 8013bce:	68b9      	ldr	r1, [r7, #8]
 8013bd0:	f002 f968 	bl	8015ea4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	68da      	ldr	r2, [r3, #12]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bdc:	425b      	negs	r3, r3
 8013bde:	441a      	add	r2, r3
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	68da      	ldr	r2, [r3, #12]
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d207      	bcs.n	8013c00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	685a      	ldr	r2, [r3, #4]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bf8:	425b      	negs	r3, r3
 8013bfa:	441a      	add	r2, r3
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b02      	cmp	r3, #2
 8013c04:	d105      	bne.n	8013c12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	3b01      	subs	r3, #1
 8013c10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	1c5a      	adds	r2, r3, #1
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013c1a:	697b      	ldr	r3, [r7, #20]
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3718      	adds	r7, #24
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d018      	beq.n	8013c68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	68da      	ldr	r2, [r3, #12]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c3e:	441a      	add	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	68da      	ldr	r2, [r3, #12]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d303      	bcc.n	8013c58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	68d9      	ldr	r1, [r3, #12]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c60:	461a      	mov	r2, r3
 8013c62:	6838      	ldr	r0, [r7, #0]
 8013c64:	f002 f91e 	bl	8015ea4 <memcpy>
	}
}
 8013c68:	bf00      	nop
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c78:	f001 f9c8 	bl	801500c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c84:	e011      	b.n	8013caa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d012      	beq.n	8013cb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	3324      	adds	r3, #36	; 0x24
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 fcc4 	bl	8014620 <xTaskRemoveFromEventList>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c9e:	f000 fd99 	bl	80147d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013ca2:	7bfb      	ldrb	r3, [r7, #15]
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	dce9      	bgt.n	8013c86 <prvUnlockQueue+0x16>
 8013cb2:	e000      	b.n	8013cb6 <prvUnlockQueue+0x46>
					break;
 8013cb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	22ff      	movs	r2, #255	; 0xff
 8013cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013cbe:	f001 f9d5 	bl	801506c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013cc2:	f001 f9a3 	bl	801500c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ccc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013cce:	e011      	b.n	8013cf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	691b      	ldr	r3, [r3, #16]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d012      	beq.n	8013cfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	3310      	adds	r3, #16
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f000 fc9f 	bl	8014620 <xTaskRemoveFromEventList>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d001      	beq.n	8013cec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013ce8:	f000 fd74 	bl	80147d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013cec:	7bbb      	ldrb	r3, [r7, #14]
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	dce9      	bgt.n	8013cd0 <prvUnlockQueue+0x60>
 8013cfc:	e000      	b.n	8013d00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013cfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	22ff      	movs	r2, #255	; 0xff
 8013d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013d08:	f001 f9b0 	bl	801506c <vPortExitCritical>
}
 8013d0c:	bf00      	nop
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d1c:	f001 f976 	bl	801500c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	60fb      	str	r3, [r7, #12]
 8013d2c:	e001      	b.n	8013d32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d32:	f001 f99b 	bl	801506c <vPortExitCritical>

	return xReturn;
 8013d36:	68fb      	ldr	r3, [r7, #12]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d48:	f001 f960 	bl	801500c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d102      	bne.n	8013d5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	60fb      	str	r3, [r7, #12]
 8013d5c:	e001      	b.n	8013d62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d62:	f001 f983 	bl	801506c <vPortExitCritical>

	return xReturn;
 8013d66:	68fb      	ldr	r3, [r7, #12]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d70:	b480      	push	{r7}
 8013d72:	b085      	sub	sp, #20
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d78:	2300      	movs	r3, #0
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	e016      	b.n	8013dac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d7e:	4a10      	ldr	r2, [pc, #64]	; (8013dc0 <vQueueUnregisterQueue+0x50>)
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	00db      	lsls	r3, r3, #3
 8013d84:	4413      	add	r3, r2
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d10b      	bne.n	8013da6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d8e:	4a0c      	ldr	r2, [pc, #48]	; (8013dc0 <vQueueUnregisterQueue+0x50>)
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2100      	movs	r1, #0
 8013d94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013d98:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <vQueueUnregisterQueue+0x50>)
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	4413      	add	r3, r2
 8013da0:	2200      	movs	r2, #0
 8013da2:	605a      	str	r2, [r3, #4]
				break;
 8013da4:	e006      	b.n	8013db4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	3301      	adds	r3, #1
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2b07      	cmp	r3, #7
 8013db0:	d9e5      	bls.n	8013d7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013db2:	bf00      	nop
 8013db4:	bf00      	nop
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bc80      	pop	{r7}
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	2000ded8 	.word	0x2000ded8

08013dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08e      	sub	sp, #56	; 0x38
 8013dc8:	af04      	add	r7, sp, #16
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
 8013dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10a      	bne.n	8013dee <xTaskCreateStatic+0x2a>
	__asm volatile
 8013dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ddc:	f383 8811 	msr	BASEPRI, r3
 8013de0:	f3bf 8f6f 	isb	sy
 8013de4:	f3bf 8f4f 	dsb	sy
 8013de8:	623b      	str	r3, [r7, #32]
}
 8013dea:	bf00      	nop
 8013dec:	e7fe      	b.n	8013dec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10a      	bne.n	8013e0a <xTaskCreateStatic+0x46>
	__asm volatile
 8013df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df8:	f383 8811 	msr	BASEPRI, r3
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	f3bf 8f4f 	dsb	sy
 8013e04:	61fb      	str	r3, [r7, #28]
}
 8013e06:	bf00      	nop
 8013e08:	e7fe      	b.n	8013e08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013e0a:	23b4      	movs	r3, #180	; 0xb4
 8013e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	2bb4      	cmp	r3, #180	; 0xb4
 8013e12:	d00a      	beq.n	8013e2a <xTaskCreateStatic+0x66>
	__asm volatile
 8013e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e18:	f383 8811 	msr	BASEPRI, r3
 8013e1c:	f3bf 8f6f 	isb	sy
 8013e20:	f3bf 8f4f 	dsb	sy
 8013e24:	61bb      	str	r3, [r7, #24]
}
 8013e26:	bf00      	nop
 8013e28:	e7fe      	b.n	8013e28 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d01e      	beq.n	8013e6e <xTaskCreateStatic+0xaa>
 8013e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d01b      	beq.n	8013e6e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	2202      	movs	r2, #2
 8013e44:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013e48:	2300      	movs	r3, #0
 8013e4a:	9303      	str	r3, [sp, #12]
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	9302      	str	r3, [sp, #8]
 8013e50:	f107 0314 	add.w	r3, r7, #20
 8013e54:	9301      	str	r3, [sp, #4]
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	68b9      	ldr	r1, [r7, #8]
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	f000 f851 	bl	8013f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e68:	f000 f8e4 	bl	8014034 <prvAddNewTaskToReadyList>
 8013e6c:	e001      	b.n	8013e72 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e72:	697b      	ldr	r3, [r7, #20]
	}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3728      	adds	r7, #40	; 0x28
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b08c      	sub	sp, #48	; 0x30
 8013e80:	af04      	add	r7, sp, #16
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	603b      	str	r3, [r7, #0]
 8013e88:	4613      	mov	r3, r2
 8013e8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e8c:	88fb      	ldrh	r3, [r7, #6]
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	4618      	mov	r0, r3
 8013e92:	f001 f9bb 	bl	801520c <pvPortMalloc>
 8013e96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d00e      	beq.n	8013ebc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8013e9e:	20b4      	movs	r0, #180	; 0xb4
 8013ea0:	f001 f9b4 	bl	801520c <pvPortMalloc>
 8013ea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ea6:	69fb      	ldr	r3, [r7, #28]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d003      	beq.n	8013eb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	697a      	ldr	r2, [r7, #20]
 8013eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8013eb2:	e005      	b.n	8013ec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013eb4:	6978      	ldr	r0, [r7, #20]
 8013eb6:	f001 fa6d 	bl	8015394 <vPortFree>
 8013eba:	e001      	b.n	8013ec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d017      	beq.n	8013ef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ec6:	69fb      	ldr	r3, [r7, #28]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013ece:	88fa      	ldrh	r2, [r7, #6]
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	9303      	str	r3, [sp, #12]
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	9302      	str	r3, [sp, #8]
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	9301      	str	r3, [sp, #4]
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	9300      	str	r3, [sp, #0]
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	68b9      	ldr	r1, [r7, #8]
 8013ee4:	68f8      	ldr	r0, [r7, #12]
 8013ee6:	f000 f80f 	bl	8013f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013eea:	69f8      	ldr	r0, [r7, #28]
 8013eec:	f000 f8a2 	bl	8014034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	61bb      	str	r3, [r7, #24]
 8013ef4:	e002      	b.n	8013efc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8013efa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013efc:	69bb      	ldr	r3, [r7, #24]
	}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3720      	adds	r7, #32
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
	...

08013f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013f20:	3b01      	subs	r3, #1
 8013f22:	009b      	lsls	r3, r3, #2
 8013f24:	4413      	add	r3, r2
 8013f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	f023 0307 	bic.w	r3, r3, #7
 8013f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	f003 0307 	and.w	r3, r3, #7
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d00a      	beq.n	8013f50 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3e:	f383 8811 	msr	BASEPRI, r3
 8013f42:	f3bf 8f6f 	isb	sy
 8013f46:	f3bf 8f4f 	dsb	sy
 8013f4a:	617b      	str	r3, [r7, #20]
}
 8013f4c:	bf00      	nop
 8013f4e:	e7fe      	b.n	8013f4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f50:	2300      	movs	r3, #0
 8013f52:	61fb      	str	r3, [r7, #28]
 8013f54:	e012      	b.n	8013f7c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f56:	68ba      	ldr	r2, [r7, #8]
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	7819      	ldrb	r1, [r3, #0]
 8013f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	4413      	add	r3, r2
 8013f64:	3334      	adds	r3, #52	; 0x34
 8013f66:	460a      	mov	r2, r1
 8013f68:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013f6a:	68ba      	ldr	r2, [r7, #8]
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	4413      	add	r3, r2
 8013f70:	781b      	ldrb	r3, [r3, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d006      	beq.n	8013f84 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f76:	69fb      	ldr	r3, [r7, #28]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	61fb      	str	r3, [r7, #28]
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	2b0f      	cmp	r3, #15
 8013f80:	d9e9      	bls.n	8013f56 <prvInitialiseNewTask+0x4e>
 8013f82:	e000      	b.n	8013f86 <prvInitialiseNewTask+0x7e>
		{
			break;
 8013f84:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	2200      	movs	r2, #0
 8013f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	2b06      	cmp	r3, #6
 8013f92:	d901      	bls.n	8013f98 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f94:	2306      	movs	r3, #6
 8013f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fac:	3304      	adds	r3, #4
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fe ff37 	bl	8012e22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb6:	3318      	adds	r3, #24
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fe ff32 	bl	8012e22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc6:	f1c3 0207 	rsb	r2, r3, #7
 8013fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fde:	2200      	movs	r2, #0
 8013fe0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	334c      	adds	r3, #76	; 0x4c
 8013fe8:	2260      	movs	r2, #96	; 0x60
 8013fea:	2100      	movs	r1, #0
 8013fec:	4618      	mov	r0, r3
 8013fee:	f001 ff67 	bl	8015ec0 <memset>
 8013ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff4:	4a0c      	ldr	r2, [pc, #48]	; (8014028 <prvInitialiseNewTask+0x120>)
 8013ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	4a0c      	ldr	r2, [pc, #48]	; (801402c <prvInitialiseNewTask+0x124>)
 8013ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8013ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014000:	4a0b      	ldr	r2, [pc, #44]	; (8014030 <prvInitialiseNewTask+0x128>)
 8014002:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014004:	683a      	ldr	r2, [r7, #0]
 8014006:	68f9      	ldr	r1, [r7, #12]
 8014008:	69b8      	ldr	r0, [r7, #24]
 801400a:	f000 ff11 	bl	8014e30 <pxPortInitialiseStack>
 801400e:	4602      	mov	r2, r0
 8014010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014012:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8014014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014016:	2b00      	cmp	r3, #0
 8014018:	d002      	beq.n	8014020 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801401e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014020:	bf00      	nop
 8014022:	3720      	adds	r7, #32
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	0801a790 	.word	0x0801a790
 801402c:	0801a7b0 	.word	0x0801a7b0
 8014030:	0801a770 	.word	0x0801a770

08014034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801403c:	f000 ffe6 	bl	801500c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014040:	4b2a      	ldr	r3, [pc, #168]	; (80140ec <prvAddNewTaskToReadyList+0xb8>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	3301      	adds	r3, #1
 8014046:	4a29      	ldr	r2, [pc, #164]	; (80140ec <prvAddNewTaskToReadyList+0xb8>)
 8014048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801404a:	4b29      	ldr	r3, [pc, #164]	; (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d109      	bne.n	8014066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014052:	4a27      	ldr	r2, [pc, #156]	; (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014058:	4b24      	ldr	r3, [pc, #144]	; (80140ec <prvAddNewTaskToReadyList+0xb8>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d110      	bne.n	8014082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014060:	f000 fbdc 	bl	801481c <prvInitialiseTaskLists>
 8014064:	e00d      	b.n	8014082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014066:	4b23      	ldr	r3, [pc, #140]	; (80140f4 <prvAddNewTaskToReadyList+0xc0>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d109      	bne.n	8014082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801406e:	4b20      	ldr	r3, [pc, #128]	; (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014078:	429a      	cmp	r2, r3
 801407a:	d802      	bhi.n	8014082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801407c:	4a1c      	ldr	r2, [pc, #112]	; (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014082:	4b1d      	ldr	r3, [pc, #116]	; (80140f8 <prvAddNewTaskToReadyList+0xc4>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	3301      	adds	r3, #1
 8014088:	4a1b      	ldr	r2, [pc, #108]	; (80140f8 <prvAddNewTaskToReadyList+0xc4>)
 801408a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014090:	2201      	movs	r2, #1
 8014092:	409a      	lsls	r2, r3
 8014094:	4b19      	ldr	r3, [pc, #100]	; (80140fc <prvAddNewTaskToReadyList+0xc8>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4313      	orrs	r3, r2
 801409a:	4a18      	ldr	r2, [pc, #96]	; (80140fc <prvAddNewTaskToReadyList+0xc8>)
 801409c:	6013      	str	r3, [r2, #0]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a2:	4613      	mov	r3, r2
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	4413      	add	r3, r2
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	4a15      	ldr	r2, [pc, #84]	; (8014100 <prvAddNewTaskToReadyList+0xcc>)
 80140ac:	441a      	add	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	3304      	adds	r3, #4
 80140b2:	4619      	mov	r1, r3
 80140b4:	4610      	mov	r0, r2
 80140b6:	f7fe fec0 	bl	8012e3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80140ba:	f000 ffd7 	bl	801506c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80140be:	4b0d      	ldr	r3, [pc, #52]	; (80140f4 <prvAddNewTaskToReadyList+0xc0>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00e      	beq.n	80140e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80140c6:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d207      	bcs.n	80140e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80140d4:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <prvAddNewTaskToReadyList+0xd0>)
 80140d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140da:	601a      	str	r2, [r3, #0]
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	20005990 	.word	0x20005990
 80140f0:	20005890 	.word	0x20005890
 80140f4:	2000599c 	.word	0x2000599c
 80140f8:	200059ac 	.word	0x200059ac
 80140fc:	20005998 	.word	0x20005998
 8014100:	20005894 	.word	0x20005894
 8014104:	e000ed04 	.word	0xe000ed04

08014108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014110:	2300      	movs	r3, #0
 8014112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d017      	beq.n	801414a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801411a:	4b13      	ldr	r3, [pc, #76]	; (8014168 <vTaskDelay+0x60>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00a      	beq.n	8014138 <vTaskDelay+0x30>
	__asm volatile
 8014122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014126:	f383 8811 	msr	BASEPRI, r3
 801412a:	f3bf 8f6f 	isb	sy
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	60bb      	str	r3, [r7, #8]
}
 8014134:	bf00      	nop
 8014136:	e7fe      	b.n	8014136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014138:	f000 f884 	bl	8014244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801413c:	2100      	movs	r1, #0
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fe10 	bl	8014d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014144:	f000 f88c 	bl	8014260 <xTaskResumeAll>
 8014148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d107      	bne.n	8014160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014150:	4b06      	ldr	r3, [pc, #24]	; (801416c <vTaskDelay+0x64>)
 8014152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014156:	601a      	str	r2, [r3, #0]
 8014158:	f3bf 8f4f 	dsb	sy
 801415c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014160:	bf00      	nop
 8014162:	3710      	adds	r7, #16
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}
 8014168:	200059b8 	.word	0x200059b8
 801416c:	e000ed04 	.word	0xe000ed04

08014170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08a      	sub	sp, #40	; 0x28
 8014174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014176:	2300      	movs	r3, #0
 8014178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801417a:	2300      	movs	r3, #0
 801417c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801417e:	463a      	mov	r2, r7
 8014180:	1d39      	adds	r1, r7, #4
 8014182:	f107 0308 	add.w	r3, r7, #8
 8014186:	4618      	mov	r0, r3
 8014188:	f7ed f976 	bl	8001478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801418c:	6839      	ldr	r1, [r7, #0]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	9202      	str	r2, [sp, #8]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	2300      	movs	r3, #0
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	2300      	movs	r3, #0
 801419c:	460a      	mov	r2, r1
 801419e:	4921      	ldr	r1, [pc, #132]	; (8014224 <vTaskStartScheduler+0xb4>)
 80141a0:	4821      	ldr	r0, [pc, #132]	; (8014228 <vTaskStartScheduler+0xb8>)
 80141a2:	f7ff fe0f 	bl	8013dc4 <xTaskCreateStatic>
 80141a6:	4603      	mov	r3, r0
 80141a8:	4a20      	ldr	r2, [pc, #128]	; (801422c <vTaskStartScheduler+0xbc>)
 80141aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80141ac:	4b1f      	ldr	r3, [pc, #124]	; (801422c <vTaskStartScheduler+0xbc>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d002      	beq.n	80141ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80141b4:	2301      	movs	r3, #1
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e001      	b.n	80141be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80141ba:	2300      	movs	r3, #0
 80141bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d11b      	bne.n	80141fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	613b      	str	r3, [r7, #16]
}
 80141d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80141d8:	4b15      	ldr	r3, [pc, #84]	; (8014230 <vTaskStartScheduler+0xc0>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	334c      	adds	r3, #76	; 0x4c
 80141de:	4a15      	ldr	r2, [pc, #84]	; (8014234 <vTaskStartScheduler+0xc4>)
 80141e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80141e2:	4b15      	ldr	r3, [pc, #84]	; (8014238 <vTaskStartScheduler+0xc8>)
 80141e4:	f04f 32ff 	mov.w	r2, #4294967295
 80141e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80141ea:	4b14      	ldr	r3, [pc, #80]	; (801423c <vTaskStartScheduler+0xcc>)
 80141ec:	2201      	movs	r2, #1
 80141ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80141f0:	4b13      	ldr	r3, [pc, #76]	; (8014240 <vTaskStartScheduler+0xd0>)
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80141f6:	f000 fe97 	bl	8014f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80141fa:	e00e      	b.n	801421a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014202:	d10a      	bne.n	801421a <vTaskStartScheduler+0xaa>
	__asm volatile
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	f383 8811 	msr	BASEPRI, r3
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f3bf 8f4f 	dsb	sy
 8014214:	60fb      	str	r3, [r7, #12]
}
 8014216:	bf00      	nop
 8014218:	e7fe      	b.n	8014218 <vTaskStartScheduler+0xa8>
}
 801421a:	bf00      	nop
 801421c:	3718      	adds	r7, #24
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	0801a6b0 	.word	0x0801a6b0
 8014228:	080147ed 	.word	0x080147ed
 801422c:	200059b4 	.word	0x200059b4
 8014230:	20005890 	.word	0x20005890
 8014234:	20000290 	.word	0x20000290
 8014238:	200059b0 	.word	0x200059b0
 801423c:	2000599c 	.word	0x2000599c
 8014240:	20005994 	.word	0x20005994

08014244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014244:	b480      	push	{r7}
 8014246:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014248:	4b04      	ldr	r3, [pc, #16]	; (801425c <vTaskSuspendAll+0x18>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	3301      	adds	r3, #1
 801424e:	4a03      	ldr	r2, [pc, #12]	; (801425c <vTaskSuspendAll+0x18>)
 8014250:	6013      	str	r3, [r2, #0]
}
 8014252:	bf00      	nop
 8014254:	46bd      	mov	sp, r7
 8014256:	bc80      	pop	{r7}
 8014258:	4770      	bx	lr
 801425a:	bf00      	nop
 801425c:	200059b8 	.word	0x200059b8

08014260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014266:	2300      	movs	r3, #0
 8014268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801426a:	2300      	movs	r3, #0
 801426c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801426e:	4b41      	ldr	r3, [pc, #260]	; (8014374 <xTaskResumeAll+0x114>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d10a      	bne.n	801428c <xTaskResumeAll+0x2c>
	__asm volatile
 8014276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f3bf 8f4f 	dsb	sy
 8014286:	603b      	str	r3, [r7, #0]
}
 8014288:	bf00      	nop
 801428a:	e7fe      	b.n	801428a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801428c:	f000 febe 	bl	801500c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014290:	4b38      	ldr	r3, [pc, #224]	; (8014374 <xTaskResumeAll+0x114>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3b01      	subs	r3, #1
 8014296:	4a37      	ldr	r2, [pc, #220]	; (8014374 <xTaskResumeAll+0x114>)
 8014298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801429a:	4b36      	ldr	r3, [pc, #216]	; (8014374 <xTaskResumeAll+0x114>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d161      	bne.n	8014366 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80142a2:	4b35      	ldr	r3, [pc, #212]	; (8014378 <xTaskResumeAll+0x118>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d05d      	beq.n	8014366 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80142aa:	e02e      	b.n	801430a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80142ac:	4b33      	ldr	r3, [pc, #204]	; (801437c <xTaskResumeAll+0x11c>)
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	3318      	adds	r3, #24
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fe fe19 	bl	8012ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	3304      	adds	r3, #4
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fe fe14 	bl	8012ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142cc:	2201      	movs	r2, #1
 80142ce:	409a      	lsls	r2, r3
 80142d0:	4b2b      	ldr	r3, [pc, #172]	; (8014380 <xTaskResumeAll+0x120>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4313      	orrs	r3, r2
 80142d6:	4a2a      	ldr	r2, [pc, #168]	; (8014380 <xTaskResumeAll+0x120>)
 80142d8:	6013      	str	r3, [r2, #0]
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142de:	4613      	mov	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4413      	add	r3, r2
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	4a27      	ldr	r2, [pc, #156]	; (8014384 <xTaskResumeAll+0x124>)
 80142e8:	441a      	add	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	3304      	adds	r3, #4
 80142ee:	4619      	mov	r1, r3
 80142f0:	4610      	mov	r0, r2
 80142f2:	f7fe fda2 	bl	8012e3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142fa:	4b23      	ldr	r3, [pc, #140]	; (8014388 <xTaskResumeAll+0x128>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014300:	429a      	cmp	r2, r3
 8014302:	d302      	bcc.n	801430a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014304:	4b21      	ldr	r3, [pc, #132]	; (801438c <xTaskResumeAll+0x12c>)
 8014306:	2201      	movs	r2, #1
 8014308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801430a:	4b1c      	ldr	r3, [pc, #112]	; (801437c <xTaskResumeAll+0x11c>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d1cc      	bne.n	80142ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d001      	beq.n	801431c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014318:	f000 fb22 	bl	8014960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801431c:	4b1c      	ldr	r3, [pc, #112]	; (8014390 <xTaskResumeAll+0x130>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d010      	beq.n	801434a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014328:	f000 f836 	bl	8014398 <xTaskIncrementTick>
 801432c:	4603      	mov	r3, r0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d002      	beq.n	8014338 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014332:	4b16      	ldr	r3, [pc, #88]	; (801438c <xTaskResumeAll+0x12c>)
 8014334:	2201      	movs	r2, #1
 8014336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	3b01      	subs	r3, #1
 801433c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d1f1      	bne.n	8014328 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8014344:	4b12      	ldr	r3, [pc, #72]	; (8014390 <xTaskResumeAll+0x130>)
 8014346:	2200      	movs	r2, #0
 8014348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801434a:	4b10      	ldr	r3, [pc, #64]	; (801438c <xTaskResumeAll+0x12c>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d009      	beq.n	8014366 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014352:	2301      	movs	r3, #1
 8014354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014356:	4b0f      	ldr	r3, [pc, #60]	; (8014394 <xTaskResumeAll+0x134>)
 8014358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801435c:	601a      	str	r2, [r3, #0]
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014366:	f000 fe81 	bl	801506c <vPortExitCritical>

	return xAlreadyYielded;
 801436a:	68bb      	ldr	r3, [r7, #8]
}
 801436c:	4618      	mov	r0, r3
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	200059b8 	.word	0x200059b8
 8014378:	20005990 	.word	0x20005990
 801437c:	20005950 	.word	0x20005950
 8014380:	20005998 	.word	0x20005998
 8014384:	20005894 	.word	0x20005894
 8014388:	20005890 	.word	0x20005890
 801438c:	200059a4 	.word	0x200059a4
 8014390:	200059a0 	.word	0x200059a0
 8014394:	e000ed04 	.word	0xe000ed04

08014398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801439e:	2300      	movs	r3, #0
 80143a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143a2:	4b51      	ldr	r3, [pc, #324]	; (80144e8 <xTaskIncrementTick+0x150>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	f040 808d 	bne.w	80144c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80143ac:	4b4f      	ldr	r3, [pc, #316]	; (80144ec <xTaskIncrementTick+0x154>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	3301      	adds	r3, #1
 80143b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80143b4:	4a4d      	ldr	r2, [pc, #308]	; (80144ec <xTaskIncrementTick+0x154>)
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d120      	bne.n	8014402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80143c0:	4b4b      	ldr	r3, [pc, #300]	; (80144f0 <xTaskIncrementTick+0x158>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00a      	beq.n	80143e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80143ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ce:	f383 8811 	msr	BASEPRI, r3
 80143d2:	f3bf 8f6f 	isb	sy
 80143d6:	f3bf 8f4f 	dsb	sy
 80143da:	603b      	str	r3, [r7, #0]
}
 80143dc:	bf00      	nop
 80143de:	e7fe      	b.n	80143de <xTaskIncrementTick+0x46>
 80143e0:	4b43      	ldr	r3, [pc, #268]	; (80144f0 <xTaskIncrementTick+0x158>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	60fb      	str	r3, [r7, #12]
 80143e6:	4b43      	ldr	r3, [pc, #268]	; (80144f4 <xTaskIncrementTick+0x15c>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	4a41      	ldr	r2, [pc, #260]	; (80144f0 <xTaskIncrementTick+0x158>)
 80143ec:	6013      	str	r3, [r2, #0]
 80143ee:	4a41      	ldr	r2, [pc, #260]	; (80144f4 <xTaskIncrementTick+0x15c>)
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	6013      	str	r3, [r2, #0]
 80143f4:	4b40      	ldr	r3, [pc, #256]	; (80144f8 <xTaskIncrementTick+0x160>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	3301      	adds	r3, #1
 80143fa:	4a3f      	ldr	r2, [pc, #252]	; (80144f8 <xTaskIncrementTick+0x160>)
 80143fc:	6013      	str	r3, [r2, #0]
 80143fe:	f000 faaf 	bl	8014960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014402:	4b3e      	ldr	r3, [pc, #248]	; (80144fc <xTaskIncrementTick+0x164>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	693a      	ldr	r2, [r7, #16]
 8014408:	429a      	cmp	r2, r3
 801440a:	d34d      	bcc.n	80144a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801440c:	4b38      	ldr	r3, [pc, #224]	; (80144f0 <xTaskIncrementTick+0x158>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <xTaskIncrementTick+0x82>
 8014416:	2301      	movs	r3, #1
 8014418:	e000      	b.n	801441c <xTaskIncrementTick+0x84>
 801441a:	2300      	movs	r3, #0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d004      	beq.n	801442a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014420:	4b36      	ldr	r3, [pc, #216]	; (80144fc <xTaskIncrementTick+0x164>)
 8014422:	f04f 32ff 	mov.w	r2, #4294967295
 8014426:	601a      	str	r2, [r3, #0]
					break;
 8014428:	e03e      	b.n	80144a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801442a:	4b31      	ldr	r3, [pc, #196]	; (80144f0 <xTaskIncrementTick+0x158>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801443a:	693a      	ldr	r2, [r7, #16]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	429a      	cmp	r2, r3
 8014440:	d203      	bcs.n	801444a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014442:	4a2e      	ldr	r2, [pc, #184]	; (80144fc <xTaskIncrementTick+0x164>)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6013      	str	r3, [r2, #0]
						break;
 8014448:	e02e      	b.n	80144a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	3304      	adds	r3, #4
 801444e:	4618      	mov	r0, r3
 8014450:	f7fe fd4e 	bl	8012ef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014458:	2b00      	cmp	r3, #0
 801445a:	d004      	beq.n	8014466 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	3318      	adds	r3, #24
 8014460:	4618      	mov	r0, r3
 8014462:	f7fe fd45 	bl	8012ef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
				prvAddTaskToReadyList( pxTCB );
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446a:	2201      	movs	r2, #1
 801446c:	409a      	lsls	r2, r3
 801446e:	4b24      	ldr	r3, [pc, #144]	; (8014500 <xTaskIncrementTick+0x168>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4313      	orrs	r3, r2
 8014474:	4a22      	ldr	r2, [pc, #136]	; (8014500 <xTaskIncrementTick+0x168>)
 8014476:	6013      	str	r3, [r2, #0]
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801447c:	4613      	mov	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	4413      	add	r3, r2
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	4a1f      	ldr	r2, [pc, #124]	; (8014504 <xTaskIncrementTick+0x16c>)
 8014486:	441a      	add	r2, r3
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	3304      	adds	r3, #4
 801448c:	4619      	mov	r1, r3
 801448e:	4610      	mov	r0, r2
 8014490:	f7fe fcd3 	bl	8012e3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014498:	4b1b      	ldr	r3, [pc, #108]	; (8014508 <xTaskIncrementTick+0x170>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	429a      	cmp	r2, r3
 80144a0:	d3b4      	bcc.n	801440c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80144a2:	2301      	movs	r3, #1
 80144a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80144a6:	e7b1      	b.n	801440c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80144a8:	4b17      	ldr	r3, [pc, #92]	; (8014508 <xTaskIncrementTick+0x170>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ae:	4915      	ldr	r1, [pc, #84]	; (8014504 <xTaskIncrementTick+0x16c>)
 80144b0:	4613      	mov	r3, r2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	4413      	add	r3, r2
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	440b      	add	r3, r1
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d907      	bls.n	80144d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80144c0:	2301      	movs	r3, #1
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e004      	b.n	80144d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80144c6:	4b11      	ldr	r3, [pc, #68]	; (801450c <xTaskIncrementTick+0x174>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	3301      	adds	r3, #1
 80144cc:	4a0f      	ldr	r2, [pc, #60]	; (801450c <xTaskIncrementTick+0x174>)
 80144ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80144d0:	4b0f      	ldr	r3, [pc, #60]	; (8014510 <xTaskIncrementTick+0x178>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80144d8:	2301      	movs	r3, #1
 80144da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80144dc:	697b      	ldr	r3, [r7, #20]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3718      	adds	r7, #24
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	200059b8 	.word	0x200059b8
 80144ec:	20005994 	.word	0x20005994
 80144f0:	20005948 	.word	0x20005948
 80144f4:	2000594c 	.word	0x2000594c
 80144f8:	200059a8 	.word	0x200059a8
 80144fc:	200059b0 	.word	0x200059b0
 8014500:	20005998 	.word	0x20005998
 8014504:	20005894 	.word	0x20005894
 8014508:	20005890 	.word	0x20005890
 801450c:	200059a0 	.word	0x200059a0
 8014510:	200059a4 	.word	0x200059a4

08014514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014514:	b480      	push	{r7}
 8014516:	b087      	sub	sp, #28
 8014518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801451a:	4b29      	ldr	r3, [pc, #164]	; (80145c0 <vTaskSwitchContext+0xac>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d003      	beq.n	801452a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014522:	4b28      	ldr	r3, [pc, #160]	; (80145c4 <vTaskSwitchContext+0xb0>)
 8014524:	2201      	movs	r2, #1
 8014526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014528:	e044      	b.n	80145b4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801452a:	4b26      	ldr	r3, [pc, #152]	; (80145c4 <vTaskSwitchContext+0xb0>)
 801452c:	2200      	movs	r2, #0
 801452e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014530:	4b25      	ldr	r3, [pc, #148]	; (80145c8 <vTaskSwitchContext+0xb4>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	fab3 f383 	clz	r3, r3
 801453c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801453e:	7afb      	ldrb	r3, [r7, #11]
 8014540:	f1c3 031f 	rsb	r3, r3, #31
 8014544:	617b      	str	r3, [r7, #20]
 8014546:	4921      	ldr	r1, [pc, #132]	; (80145cc <vTaskSwitchContext+0xb8>)
 8014548:	697a      	ldr	r2, [r7, #20]
 801454a:	4613      	mov	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4413      	add	r3, r2
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	440b      	add	r3, r1
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d10a      	bne.n	8014570 <vTaskSwitchContext+0x5c>
	__asm volatile
 801455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455e:	f383 8811 	msr	BASEPRI, r3
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	f3bf 8f4f 	dsb	sy
 801456a:	607b      	str	r3, [r7, #4]
}
 801456c:	bf00      	nop
 801456e:	e7fe      	b.n	801456e <vTaskSwitchContext+0x5a>
 8014570:	697a      	ldr	r2, [r7, #20]
 8014572:	4613      	mov	r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	4413      	add	r3, r2
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4a14      	ldr	r2, [pc, #80]	; (80145cc <vTaskSwitchContext+0xb8>)
 801457c:	4413      	add	r3, r2
 801457e:	613b      	str	r3, [r7, #16]
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	685a      	ldr	r2, [r3, #4]
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	605a      	str	r2, [r3, #4]
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	685a      	ldr	r2, [r3, #4]
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	3308      	adds	r3, #8
 8014592:	429a      	cmp	r2, r3
 8014594:	d104      	bne.n	80145a0 <vTaskSwitchContext+0x8c>
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	685a      	ldr	r2, [r3, #4]
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	605a      	str	r2, [r3, #4]
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	4a0a      	ldr	r2, [pc, #40]	; (80145d0 <vTaskSwitchContext+0xbc>)
 80145a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80145aa:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <vTaskSwitchContext+0xbc>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	334c      	adds	r3, #76	; 0x4c
 80145b0:	4a08      	ldr	r2, [pc, #32]	; (80145d4 <vTaskSwitchContext+0xc0>)
 80145b2:	6013      	str	r3, [r2, #0]
}
 80145b4:	bf00      	nop
 80145b6:	371c      	adds	r7, #28
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bc80      	pop	{r7}
 80145bc:	4770      	bx	lr
 80145be:	bf00      	nop
 80145c0:	200059b8 	.word	0x200059b8
 80145c4:	200059a4 	.word	0x200059a4
 80145c8:	20005998 	.word	0x20005998
 80145cc:	20005894 	.word	0x20005894
 80145d0:	20005890 	.word	0x20005890
 80145d4:	20000290 	.word	0x20000290

080145d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10a      	bne.n	80145fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80145e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ec:	f383 8811 	msr	BASEPRI, r3
 80145f0:	f3bf 8f6f 	isb	sy
 80145f4:	f3bf 8f4f 	dsb	sy
 80145f8:	60fb      	str	r3, [r7, #12]
}
 80145fa:	bf00      	nop
 80145fc:	e7fe      	b.n	80145fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80145fe:	4b07      	ldr	r3, [pc, #28]	; (801461c <vTaskPlaceOnEventList+0x44>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	3318      	adds	r3, #24
 8014604:	4619      	mov	r1, r3
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f7fe fc3a 	bl	8012e80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801460c:	2101      	movs	r1, #1
 801460e:	6838      	ldr	r0, [r7, #0]
 8014610:	f000 fba8 	bl	8014d64 <prvAddCurrentTaskToDelayedList>
}
 8014614:	bf00      	nop
 8014616:	3710      	adds	r7, #16
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	20005890 	.word	0x20005890

08014620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10a      	bne.n	801464c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	60fb      	str	r3, [r7, #12]
}
 8014648:	bf00      	nop
 801464a:	e7fe      	b.n	801464a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	3318      	adds	r3, #24
 8014650:	4618      	mov	r0, r3
 8014652:	f7fe fc4d 	bl	8012ef0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014656:	4b1d      	ldr	r3, [pc, #116]	; (80146cc <xTaskRemoveFromEventList+0xac>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d11c      	bne.n	8014698 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	3304      	adds	r3, #4
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe fc44 	bl	8012ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466c:	2201      	movs	r2, #1
 801466e:	409a      	lsls	r2, r3
 8014670:	4b17      	ldr	r3, [pc, #92]	; (80146d0 <xTaskRemoveFromEventList+0xb0>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	4313      	orrs	r3, r2
 8014676:	4a16      	ldr	r2, [pc, #88]	; (80146d0 <xTaskRemoveFromEventList+0xb0>)
 8014678:	6013      	str	r3, [r2, #0]
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801467e:	4613      	mov	r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	4413      	add	r3, r2
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	4a13      	ldr	r2, [pc, #76]	; (80146d4 <xTaskRemoveFromEventList+0xb4>)
 8014688:	441a      	add	r2, r3
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	3304      	adds	r3, #4
 801468e:	4619      	mov	r1, r3
 8014690:	4610      	mov	r0, r2
 8014692:	f7fe fbd2 	bl	8012e3a <vListInsertEnd>
 8014696:	e005      	b.n	80146a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	3318      	adds	r3, #24
 801469c:	4619      	mov	r1, r3
 801469e:	480e      	ldr	r0, [pc, #56]	; (80146d8 <xTaskRemoveFromEventList+0xb8>)
 80146a0:	f7fe fbcb 	bl	8012e3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a8:	4b0c      	ldr	r3, [pc, #48]	; (80146dc <xTaskRemoveFromEventList+0xbc>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d905      	bls.n	80146be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80146b2:	2301      	movs	r3, #1
 80146b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80146b6:	4b0a      	ldr	r3, [pc, #40]	; (80146e0 <xTaskRemoveFromEventList+0xc0>)
 80146b8:	2201      	movs	r2, #1
 80146ba:	601a      	str	r2, [r3, #0]
 80146bc:	e001      	b.n	80146c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80146be:	2300      	movs	r3, #0
 80146c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80146c2:	697b      	ldr	r3, [r7, #20]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	200059b8 	.word	0x200059b8
 80146d0:	20005998 	.word	0x20005998
 80146d4:	20005894 	.word	0x20005894
 80146d8:	20005950 	.word	0x20005950
 80146dc:	20005890 	.word	0x20005890
 80146e0:	200059a4 	.word	0x200059a4

080146e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80146ec:	4b06      	ldr	r3, [pc, #24]	; (8014708 <vTaskInternalSetTimeOutState+0x24>)
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80146f4:	4b05      	ldr	r3, [pc, #20]	; (801470c <vTaskInternalSetTimeOutState+0x28>)
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	605a      	str	r2, [r3, #4]
}
 80146fc:	bf00      	nop
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	bc80      	pop	{r7}
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	200059a8 	.word	0x200059a8
 801470c:	20005994 	.word	0x20005994

08014710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b088      	sub	sp, #32
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d10a      	bne.n	8014736 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014724:	f383 8811 	msr	BASEPRI, r3
 8014728:	f3bf 8f6f 	isb	sy
 801472c:	f3bf 8f4f 	dsb	sy
 8014730:	613b      	str	r3, [r7, #16]
}
 8014732:	bf00      	nop
 8014734:	e7fe      	b.n	8014734 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d10a      	bne.n	8014752 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	60fb      	str	r3, [r7, #12]
}
 801474e:	bf00      	nop
 8014750:	e7fe      	b.n	8014750 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014752:	f000 fc5b 	bl	801500c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014756:	4b1d      	ldr	r3, [pc, #116]	; (80147cc <xTaskCheckForTimeOut+0xbc>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	69ba      	ldr	r2, [r7, #24]
 8014762:	1ad3      	subs	r3, r2, r3
 8014764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801476e:	d102      	bne.n	8014776 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014770:	2300      	movs	r3, #0
 8014772:	61fb      	str	r3, [r7, #28]
 8014774:	e023      	b.n	80147be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	4b15      	ldr	r3, [pc, #84]	; (80147d0 <xTaskCheckForTimeOut+0xc0>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	429a      	cmp	r2, r3
 8014780:	d007      	beq.n	8014792 <xTaskCheckForTimeOut+0x82>
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	69ba      	ldr	r2, [r7, #24]
 8014788:	429a      	cmp	r2, r3
 801478a:	d302      	bcc.n	8014792 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801478c:	2301      	movs	r3, #1
 801478e:	61fb      	str	r3, [r7, #28]
 8014790:	e015      	b.n	80147be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	697a      	ldr	r2, [r7, #20]
 8014798:	429a      	cmp	r2, r3
 801479a:	d20b      	bcs.n	80147b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	1ad2      	subs	r2, r2, r3
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f7ff ff9b 	bl	80146e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80147ae:	2300      	movs	r3, #0
 80147b0:	61fb      	str	r3, [r7, #28]
 80147b2:	e004      	b.n	80147be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	2200      	movs	r2, #0
 80147b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80147ba:	2301      	movs	r3, #1
 80147bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80147be:	f000 fc55 	bl	801506c <vPortExitCritical>

	return xReturn;
 80147c2:	69fb      	ldr	r3, [r7, #28]
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3720      	adds	r7, #32
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	20005994 	.word	0x20005994
 80147d0:	200059a8 	.word	0x200059a8

080147d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80147d4:	b480      	push	{r7}
 80147d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80147d8:	4b03      	ldr	r3, [pc, #12]	; (80147e8 <vTaskMissedYield+0x14>)
 80147da:	2201      	movs	r2, #1
 80147dc:	601a      	str	r2, [r3, #0]
}
 80147de:	bf00      	nop
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bc80      	pop	{r7}
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	200059a4 	.word	0x200059a4

080147ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80147f4:	f000 f852 	bl	801489c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80147f8:	4b06      	ldr	r3, [pc, #24]	; (8014814 <prvIdleTask+0x28>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d9f9      	bls.n	80147f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014800:	4b05      	ldr	r3, [pc, #20]	; (8014818 <prvIdleTask+0x2c>)
 8014802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014806:	601a      	str	r2, [r3, #0]
 8014808:	f3bf 8f4f 	dsb	sy
 801480c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014810:	e7f0      	b.n	80147f4 <prvIdleTask+0x8>
 8014812:	bf00      	nop
 8014814:	20005894 	.word	0x20005894
 8014818:	e000ed04 	.word	0xe000ed04

0801481c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014822:	2300      	movs	r3, #0
 8014824:	607b      	str	r3, [r7, #4]
 8014826:	e00c      	b.n	8014842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	4613      	mov	r3, r2
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	4413      	add	r3, r2
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	4a12      	ldr	r2, [pc, #72]	; (801487c <prvInitialiseTaskLists+0x60>)
 8014834:	4413      	add	r3, r2
 8014836:	4618      	mov	r0, r3
 8014838:	f7fe fad4 	bl	8012de4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	3301      	adds	r3, #1
 8014840:	607b      	str	r3, [r7, #4]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2b06      	cmp	r3, #6
 8014846:	d9ef      	bls.n	8014828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014848:	480d      	ldr	r0, [pc, #52]	; (8014880 <prvInitialiseTaskLists+0x64>)
 801484a:	f7fe facb 	bl	8012de4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801484e:	480d      	ldr	r0, [pc, #52]	; (8014884 <prvInitialiseTaskLists+0x68>)
 8014850:	f7fe fac8 	bl	8012de4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014854:	480c      	ldr	r0, [pc, #48]	; (8014888 <prvInitialiseTaskLists+0x6c>)
 8014856:	f7fe fac5 	bl	8012de4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801485a:	480c      	ldr	r0, [pc, #48]	; (801488c <prvInitialiseTaskLists+0x70>)
 801485c:	f7fe fac2 	bl	8012de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014860:	480b      	ldr	r0, [pc, #44]	; (8014890 <prvInitialiseTaskLists+0x74>)
 8014862:	f7fe fabf 	bl	8012de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014866:	4b0b      	ldr	r3, [pc, #44]	; (8014894 <prvInitialiseTaskLists+0x78>)
 8014868:	4a05      	ldr	r2, [pc, #20]	; (8014880 <prvInitialiseTaskLists+0x64>)
 801486a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801486c:	4b0a      	ldr	r3, [pc, #40]	; (8014898 <prvInitialiseTaskLists+0x7c>)
 801486e:	4a05      	ldr	r2, [pc, #20]	; (8014884 <prvInitialiseTaskLists+0x68>)
 8014870:	601a      	str	r2, [r3, #0]
}
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	20005894 	.word	0x20005894
 8014880:	20005920 	.word	0x20005920
 8014884:	20005934 	.word	0x20005934
 8014888:	20005950 	.word	0x20005950
 801488c:	20005964 	.word	0x20005964
 8014890:	2000597c 	.word	0x2000597c
 8014894:	20005948 	.word	0x20005948
 8014898:	2000594c 	.word	0x2000594c

0801489c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80148a2:	e019      	b.n	80148d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80148a4:	f000 fbb2 	bl	801500c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80148a8:	4b10      	ldr	r3, [pc, #64]	; (80148ec <prvCheckTasksWaitingTermination+0x50>)
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3304      	adds	r3, #4
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fe fb1b 	bl	8012ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80148ba:	4b0d      	ldr	r3, [pc, #52]	; (80148f0 <prvCheckTasksWaitingTermination+0x54>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	3b01      	subs	r3, #1
 80148c0:	4a0b      	ldr	r2, [pc, #44]	; (80148f0 <prvCheckTasksWaitingTermination+0x54>)
 80148c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80148c4:	4b0b      	ldr	r3, [pc, #44]	; (80148f4 <prvCheckTasksWaitingTermination+0x58>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	4a0a      	ldr	r2, [pc, #40]	; (80148f4 <prvCheckTasksWaitingTermination+0x58>)
 80148cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80148ce:	f000 fbcd 	bl	801506c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f000 f810 	bl	80148f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80148d8:	4b06      	ldr	r3, [pc, #24]	; (80148f4 <prvCheckTasksWaitingTermination+0x58>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d1e1      	bne.n	80148a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80148e0:	bf00      	nop
 80148e2:	bf00      	nop
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	20005964 	.word	0x20005964
 80148f0:	20005990 	.word	0x20005990
 80148f4:	20005978 	.word	0x20005978

080148f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	334c      	adds	r3, #76	; 0x4c
 8014904:	4618      	mov	r0, r3
 8014906:	f002 fa09 	bl	8016d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014910:	2b00      	cmp	r3, #0
 8014912:	d108      	bne.n	8014926 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014918:	4618      	mov	r0, r3
 801491a:	f000 fd3b 	bl	8015394 <vPortFree>
				vPortFree( pxTCB );
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f000 fd38 	bl	8015394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014924:	e018      	b.n	8014958 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801492c:	2b01      	cmp	r3, #1
 801492e:	d103      	bne.n	8014938 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fd2f 	bl	8015394 <vPortFree>
	}
 8014936:	e00f      	b.n	8014958 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801493e:	2b02      	cmp	r3, #2
 8014940:	d00a      	beq.n	8014958 <prvDeleteTCB+0x60>
	__asm volatile
 8014942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	60fb      	str	r3, [r7, #12]
}
 8014954:	bf00      	nop
 8014956:	e7fe      	b.n	8014956 <prvDeleteTCB+0x5e>
	}
 8014958:	bf00      	nop
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014966:	4b0e      	ldr	r3, [pc, #56]	; (80149a0 <prvResetNextTaskUnblockTime+0x40>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d101      	bne.n	8014974 <prvResetNextTaskUnblockTime+0x14>
 8014970:	2301      	movs	r3, #1
 8014972:	e000      	b.n	8014976 <prvResetNextTaskUnblockTime+0x16>
 8014974:	2300      	movs	r3, #0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d004      	beq.n	8014984 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801497a:	4b0a      	ldr	r3, [pc, #40]	; (80149a4 <prvResetNextTaskUnblockTime+0x44>)
 801497c:	f04f 32ff 	mov.w	r2, #4294967295
 8014980:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014982:	e008      	b.n	8014996 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014984:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <prvResetNextTaskUnblockTime+0x40>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	4a04      	ldr	r2, [pc, #16]	; (80149a4 <prvResetNextTaskUnblockTime+0x44>)
 8014994:	6013      	str	r3, [r2, #0]
}
 8014996:	bf00      	nop
 8014998:	370c      	adds	r7, #12
 801499a:	46bd      	mov	sp, r7
 801499c:	bc80      	pop	{r7}
 801499e:	4770      	bx	lr
 80149a0:	20005948 	.word	0x20005948
 80149a4:	200059b0 	.word	0x200059b0

080149a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80149ae:	4b0b      	ldr	r3, [pc, #44]	; (80149dc <xTaskGetSchedulerState+0x34>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d102      	bne.n	80149bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80149b6:	2301      	movs	r3, #1
 80149b8:	607b      	str	r3, [r7, #4]
 80149ba:	e008      	b.n	80149ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149bc:	4b08      	ldr	r3, [pc, #32]	; (80149e0 <xTaskGetSchedulerState+0x38>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d102      	bne.n	80149ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80149c4:	2302      	movs	r3, #2
 80149c6:	607b      	str	r3, [r7, #4]
 80149c8:	e001      	b.n	80149ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80149ca:	2300      	movs	r3, #0
 80149cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80149ce:	687b      	ldr	r3, [r7, #4]
	}
 80149d0:	4618      	mov	r0, r3
 80149d2:	370c      	adds	r7, #12
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bc80      	pop	{r7}
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	2000599c 	.word	0x2000599c
 80149e0:	200059b8 	.word	0x200059b8

080149e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80149f0:	2300      	movs	r3, #0
 80149f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d06e      	beq.n	8014ad8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149fe:	4b39      	ldr	r3, [pc, #228]	; (8014ae4 <xTaskPriorityInherit+0x100>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d25e      	bcs.n	8014ac6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	699b      	ldr	r3, [r3, #24]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	db06      	blt.n	8014a1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a10:	4b34      	ldr	r3, [pc, #208]	; (8014ae4 <xTaskPriorityInherit+0x100>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a16:	f1c3 0207 	rsb	r2, r3, #7
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	6959      	ldr	r1, [r3, #20]
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a26:	4613      	mov	r3, r2
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	4413      	add	r3, r2
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	4a2e      	ldr	r2, [pc, #184]	; (8014ae8 <xTaskPriorityInherit+0x104>)
 8014a30:	4413      	add	r3, r2
 8014a32:	4299      	cmp	r1, r3
 8014a34:	d101      	bne.n	8014a3a <xTaskPriorityInherit+0x56>
 8014a36:	2301      	movs	r3, #1
 8014a38:	e000      	b.n	8014a3c <xTaskPriorityInherit+0x58>
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d03a      	beq.n	8014ab6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	3304      	adds	r3, #4
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fe fa53 	bl	8012ef0 <uxListRemove>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d115      	bne.n	8014a7c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a54:	4924      	ldr	r1, [pc, #144]	; (8014ae8 <xTaskPriorityInherit+0x104>)
 8014a56:	4613      	mov	r3, r2
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	4413      	add	r3, r2
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	440b      	add	r3, r1
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d10a      	bne.n	8014a7c <xTaskPriorityInherit+0x98>
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8014a70:	43da      	mvns	r2, r3
 8014a72:	4b1e      	ldr	r3, [pc, #120]	; (8014aec <xTaskPriorityInherit+0x108>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4013      	ands	r3, r2
 8014a78:	4a1c      	ldr	r2, [pc, #112]	; (8014aec <xTaskPriorityInherit+0x108>)
 8014a7a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a7c:	4b19      	ldr	r3, [pc, #100]	; (8014ae4 <xTaskPriorityInherit+0x100>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8a:	2201      	movs	r2, #1
 8014a8c:	409a      	lsls	r2, r3
 8014a8e:	4b17      	ldr	r3, [pc, #92]	; (8014aec <xTaskPriorityInherit+0x108>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	4313      	orrs	r3, r2
 8014a94:	4a15      	ldr	r2, [pc, #84]	; (8014aec <xTaskPriorityInherit+0x108>)
 8014a96:	6013      	str	r3, [r2, #0]
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4413      	add	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	4a10      	ldr	r2, [pc, #64]	; (8014ae8 <xTaskPriorityInherit+0x104>)
 8014aa6:	441a      	add	r2, r3
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	3304      	adds	r3, #4
 8014aac:	4619      	mov	r1, r3
 8014aae:	4610      	mov	r0, r2
 8014ab0:	f7fe f9c3 	bl	8012e3a <vListInsertEnd>
 8014ab4:	e004      	b.n	8014ac0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ab6:	4b0b      	ldr	r3, [pc, #44]	; (8014ae4 <xTaskPriorityInherit+0x100>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	e008      	b.n	8014ad8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014aca:	4b06      	ldr	r3, [pc, #24]	; (8014ae4 <xTaskPriorityInherit+0x100>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d201      	bcs.n	8014ad8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
	}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3710      	adds	r7, #16
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	20005890 	.word	0x20005890
 8014ae8:	20005894 	.word	0x20005894
 8014aec:	20005998 	.word	0x20005998

08014af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b086      	sub	sp, #24
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014afc:	2300      	movs	r3, #0
 8014afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d06e      	beq.n	8014be4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014b06:	4b3a      	ldr	r3, [pc, #232]	; (8014bf0 <xTaskPriorityDisinherit+0x100>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	693a      	ldr	r2, [r7, #16]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d00a      	beq.n	8014b26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b14:	f383 8811 	msr	BASEPRI, r3
 8014b18:	f3bf 8f6f 	isb	sy
 8014b1c:	f3bf 8f4f 	dsb	sy
 8014b20:	60fb      	str	r3, [r7, #12]
}
 8014b22:	bf00      	nop
 8014b24:	e7fe      	b.n	8014b24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d10a      	bne.n	8014b44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b32:	f383 8811 	msr	BASEPRI, r3
 8014b36:	f3bf 8f6f 	isb	sy
 8014b3a:	f3bf 8f4f 	dsb	sy
 8014b3e:	60bb      	str	r3, [r7, #8]
}
 8014b40:	bf00      	nop
 8014b42:	e7fe      	b.n	8014b42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b48:	1e5a      	subs	r2, r3, #1
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d044      	beq.n	8014be4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d140      	bne.n	8014be4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	3304      	adds	r3, #4
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe f9c2 	bl	8012ef0 <uxListRemove>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d115      	bne.n	8014b9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b76:	491f      	ldr	r1, [pc, #124]	; (8014bf4 <xTaskPriorityDisinherit+0x104>)
 8014b78:	4613      	mov	r3, r2
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	4413      	add	r3, r2
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	440b      	add	r3, r1
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10a      	bne.n	8014b9e <xTaskPriorityDisinherit+0xae>
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b92:	43da      	mvns	r2, r3
 8014b94:	4b18      	ldr	r3, [pc, #96]	; (8014bf8 <xTaskPriorityDisinherit+0x108>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4013      	ands	r3, r2
 8014b9a:	4a17      	ldr	r2, [pc, #92]	; (8014bf8 <xTaskPriorityDisinherit+0x108>)
 8014b9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014baa:	f1c3 0207 	rsb	r2, r3, #7
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	409a      	lsls	r2, r3
 8014bba:	4b0f      	ldr	r3, [pc, #60]	; (8014bf8 <xTaskPriorityDisinherit+0x108>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	4313      	orrs	r3, r2
 8014bc0:	4a0d      	ldr	r2, [pc, #52]	; (8014bf8 <xTaskPriorityDisinherit+0x108>)
 8014bc2:	6013      	str	r3, [r2, #0]
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc8:	4613      	mov	r3, r2
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	4413      	add	r3, r2
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4a08      	ldr	r2, [pc, #32]	; (8014bf4 <xTaskPriorityDisinherit+0x104>)
 8014bd2:	441a      	add	r2, r3
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	4619      	mov	r1, r3
 8014bda:	4610      	mov	r0, r2
 8014bdc:	f7fe f92d 	bl	8012e3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014be0:	2301      	movs	r3, #1
 8014be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014be4:	697b      	ldr	r3, [r7, #20]
	}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3718      	adds	r7, #24
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	20005890 	.word	0x20005890
 8014bf4:	20005894 	.word	0x20005894
 8014bf8:	20005998 	.word	0x20005998

08014bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b088      	sub	sp, #32
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	f000 8088 	beq.w	8014d26 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014c16:	69bb      	ldr	r3, [r7, #24]
 8014c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d10a      	bne.n	8014c34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c22:	f383 8811 	msr	BASEPRI, r3
 8014c26:	f3bf 8f6f 	isb	sy
 8014c2a:	f3bf 8f4f 	dsb	sy
 8014c2e:	60fb      	str	r3, [r7, #12]
}
 8014c30:	bf00      	nop
 8014c32:	e7fe      	b.n	8014c32 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c38:	683a      	ldr	r2, [r7, #0]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d902      	bls.n	8014c44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	61fb      	str	r3, [r7, #28]
 8014c42:	e002      	b.n	8014c4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014c44:	69bb      	ldr	r3, [r7, #24]
 8014c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c4e:	69fa      	ldr	r2, [r7, #28]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d068      	beq.n	8014d26 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014c54:	69bb      	ldr	r3, [r7, #24]
 8014c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c58:	697a      	ldr	r2, [r7, #20]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d163      	bne.n	8014d26 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014c5e:	4b34      	ldr	r3, [pc, #208]	; (8014d30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	69ba      	ldr	r2, [r7, #24]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d10a      	bne.n	8014c7e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8014c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6c:	f383 8811 	msr	BASEPRI, r3
 8014c70:	f3bf 8f6f 	isb	sy
 8014c74:	f3bf 8f4f 	dsb	sy
 8014c78:	60bb      	str	r3, [r7, #8]
}
 8014c7a:	bf00      	nop
 8014c7c:	e7fe      	b.n	8014c7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c82:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014c84:	69bb      	ldr	r3, [r7, #24]
 8014c86:	69fa      	ldr	r2, [r7, #28]
 8014c88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	699b      	ldr	r3, [r3, #24]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	db04      	blt.n	8014c9c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c92:	69fb      	ldr	r3, [r7, #28]
 8014c94:	f1c3 0207 	rsb	r2, r3, #7
 8014c98:	69bb      	ldr	r3, [r7, #24]
 8014c9a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	6959      	ldr	r1, [r3, #20]
 8014ca0:	693a      	ldr	r2, [r7, #16]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	4413      	add	r3, r2
 8014ca8:	009b      	lsls	r3, r3, #2
 8014caa:	4a22      	ldr	r2, [pc, #136]	; (8014d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014cac:	4413      	add	r3, r2
 8014cae:	4299      	cmp	r1, r3
 8014cb0:	d101      	bne.n	8014cb6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e000      	b.n	8014cb8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d034      	beq.n	8014d26 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014cbc:	69bb      	ldr	r3, [r7, #24]
 8014cbe:	3304      	adds	r3, #4
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fe f915 	bl	8012ef0 <uxListRemove>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d115      	bne.n	8014cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd0:	4918      	ldr	r1, [pc, #96]	; (8014d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	4413      	add	r3, r2
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	440b      	add	r3, r1
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d10a      	bne.n	8014cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8014cec:	43da      	mvns	r2, r3
 8014cee:	4b12      	ldr	r3, [pc, #72]	; (8014d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	4013      	ands	r3, r2
 8014cf4:	4a10      	ldr	r2, [pc, #64]	; (8014d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014cf6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014cf8:	69bb      	ldr	r3, [r7, #24]
 8014cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	409a      	lsls	r2, r3
 8014d00:	4b0d      	ldr	r3, [pc, #52]	; (8014d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	4313      	orrs	r3, r2
 8014d06:	4a0c      	ldr	r2, [pc, #48]	; (8014d38 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014d08:	6013      	str	r3, [r2, #0]
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d0e:	4613      	mov	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	4413      	add	r3, r2
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	4a07      	ldr	r2, [pc, #28]	; (8014d34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014d18:	441a      	add	r2, r3
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	3304      	adds	r3, #4
 8014d1e:	4619      	mov	r1, r3
 8014d20:	4610      	mov	r0, r2
 8014d22:	f7fe f88a 	bl	8012e3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d26:	bf00      	nop
 8014d28:	3720      	adds	r7, #32
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	20005890 	.word	0x20005890
 8014d34:	20005894 	.word	0x20005894
 8014d38:	20005998 	.word	0x20005998

08014d3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014d3c:	b480      	push	{r7}
 8014d3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014d40:	4b07      	ldr	r3, [pc, #28]	; (8014d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d004      	beq.n	8014d52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014d48:	4b05      	ldr	r3, [pc, #20]	; (8014d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014d4e:	3201      	adds	r2, #1
 8014d50:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014d52:	4b03      	ldr	r3, [pc, #12]	; (8014d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8014d54:	681b      	ldr	r3, [r3, #0]
	}
 8014d56:	4618      	mov	r0, r3
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bc80      	pop	{r7}
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	20005890 	.word	0x20005890

08014d64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014d6e:	4b29      	ldr	r3, [pc, #164]	; (8014e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d74:	4b28      	ldr	r3, [pc, #160]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	3304      	adds	r3, #4
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7fe f8b8 	bl	8012ef0 <uxListRemove>
 8014d80:	4603      	mov	r3, r0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10b      	bne.n	8014d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014d86:	4b24      	ldr	r3, [pc, #144]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d8c:	2201      	movs	r2, #1
 8014d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8014d92:	43da      	mvns	r2, r3
 8014d94:	4b21      	ldr	r3, [pc, #132]	; (8014e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4013      	ands	r3, r2
 8014d9a:	4a20      	ldr	r2, [pc, #128]	; (8014e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014da4:	d10a      	bne.n	8014dbc <prvAddCurrentTaskToDelayedList+0x58>
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d007      	beq.n	8014dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dac:	4b1a      	ldr	r3, [pc, #104]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	3304      	adds	r3, #4
 8014db2:	4619      	mov	r1, r3
 8014db4:	481a      	ldr	r0, [pc, #104]	; (8014e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014db6:	f7fe f840 	bl	8012e3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014dba:	e026      	b.n	8014e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014dc4:	4b14      	ldr	r3, [pc, #80]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	68ba      	ldr	r2, [r7, #8]
 8014dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014dcc:	68ba      	ldr	r2, [r7, #8]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d209      	bcs.n	8014de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dd4:	4b13      	ldr	r3, [pc, #76]	; (8014e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	4b0f      	ldr	r3, [pc, #60]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	3304      	adds	r3, #4
 8014dde:	4619      	mov	r1, r3
 8014de0:	4610      	mov	r0, r2
 8014de2:	f7fe f84d 	bl	8012e80 <vListInsert>
}
 8014de6:	e010      	b.n	8014e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014de8:	4b0f      	ldr	r3, [pc, #60]	; (8014e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	4b0a      	ldr	r3, [pc, #40]	; (8014e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	3304      	adds	r3, #4
 8014df2:	4619      	mov	r1, r3
 8014df4:	4610      	mov	r0, r2
 8014df6:	f7fe f843 	bl	8012e80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014dfa:	4b0c      	ldr	r3, [pc, #48]	; (8014e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d202      	bcs.n	8014e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014e04:	4a09      	ldr	r2, [pc, #36]	; (8014e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	6013      	str	r3, [r2, #0]
}
 8014e0a:	bf00      	nop
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	20005994 	.word	0x20005994
 8014e18:	20005890 	.word	0x20005890
 8014e1c:	20005998 	.word	0x20005998
 8014e20:	2000597c 	.word	0x2000597c
 8014e24:	2000594c 	.word	0x2000594c
 8014e28:	20005948 	.word	0x20005948
 8014e2c:	200059b0 	.word	0x200059b0

08014e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014e30:	b480      	push	{r7}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	60f8      	str	r0, [r7, #12]
 8014e38:	60b9      	str	r1, [r7, #8]
 8014e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	3b04      	subs	r3, #4
 8014e40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	3b04      	subs	r3, #4
 8014e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	f023 0201 	bic.w	r2, r3, #1
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	3b04      	subs	r3, #4
 8014e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014e60:	4a08      	ldr	r2, [pc, #32]	; (8014e84 <pxPortInitialiseStack+0x54>)
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	3b14      	subs	r3, #20
 8014e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	3b20      	subs	r3, #32
 8014e76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014e78:	68fb      	ldr	r3, [r7, #12]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3714      	adds	r7, #20
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bc80      	pop	{r7}
 8014e82:	4770      	bx	lr
 8014e84:	08014e89 	.word	0x08014e89

08014e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b085      	sub	sp, #20
 8014e8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014e92:	4b12      	ldr	r3, [pc, #72]	; (8014edc <prvTaskExitError+0x54>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e9a:	d00a      	beq.n	8014eb2 <prvTaskExitError+0x2a>
	__asm volatile
 8014e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea0:	f383 8811 	msr	BASEPRI, r3
 8014ea4:	f3bf 8f6f 	isb	sy
 8014ea8:	f3bf 8f4f 	dsb	sy
 8014eac:	60fb      	str	r3, [r7, #12]
}
 8014eae:	bf00      	nop
 8014eb0:	e7fe      	b.n	8014eb0 <prvTaskExitError+0x28>
	__asm volatile
 8014eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb6:	f383 8811 	msr	BASEPRI, r3
 8014eba:	f3bf 8f6f 	isb	sy
 8014ebe:	f3bf 8f4f 	dsb	sy
 8014ec2:	60bb      	str	r3, [r7, #8]
}
 8014ec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014ec6:	bf00      	nop
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d0fc      	beq.n	8014ec8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ece:	bf00      	nop
 8014ed0:	bf00      	nop
 8014ed2:	3714      	adds	r7, #20
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bc80      	pop	{r7}
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop
 8014edc:	2000028c 	.word	0x2000028c

08014ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014ee0:	4b07      	ldr	r3, [pc, #28]	; (8014f00 <pxCurrentTCBConst2>)
 8014ee2:	6819      	ldr	r1, [r3, #0]
 8014ee4:	6808      	ldr	r0, [r1, #0]
 8014ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014eea:	f380 8809 	msr	PSP, r0
 8014eee:	f3bf 8f6f 	isb	sy
 8014ef2:	f04f 0000 	mov.w	r0, #0
 8014ef6:	f380 8811 	msr	BASEPRI, r0
 8014efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8014efe:	4770      	bx	lr

08014f00 <pxCurrentTCBConst2>:
 8014f00:	20005890 	.word	0x20005890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014f04:	bf00      	nop
 8014f06:	bf00      	nop

08014f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014f08:	4806      	ldr	r0, [pc, #24]	; (8014f24 <prvPortStartFirstTask+0x1c>)
 8014f0a:	6800      	ldr	r0, [r0, #0]
 8014f0c:	6800      	ldr	r0, [r0, #0]
 8014f0e:	f380 8808 	msr	MSP, r0
 8014f12:	b662      	cpsie	i
 8014f14:	b661      	cpsie	f
 8014f16:	f3bf 8f4f 	dsb	sy
 8014f1a:	f3bf 8f6f 	isb	sy
 8014f1e:	df00      	svc	0
 8014f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014f22:	bf00      	nop
 8014f24:	e000ed08 	.word	0xe000ed08

08014f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014f2e:	4b32      	ldr	r3, [pc, #200]	; (8014ff8 <xPortStartScheduler+0xd0>)
 8014f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	22ff      	movs	r2, #255	; 0xff
 8014f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014f48:	78fb      	ldrb	r3, [r7, #3]
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014f50:	b2da      	uxtb	r2, r3
 8014f52:	4b2a      	ldr	r3, [pc, #168]	; (8014ffc <xPortStartScheduler+0xd4>)
 8014f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014f56:	4b2a      	ldr	r3, [pc, #168]	; (8015000 <xPortStartScheduler+0xd8>)
 8014f58:	2207      	movs	r2, #7
 8014f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f5c:	e009      	b.n	8014f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014f5e:	4b28      	ldr	r3, [pc, #160]	; (8015000 <xPortStartScheduler+0xd8>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	3b01      	subs	r3, #1
 8014f64:	4a26      	ldr	r2, [pc, #152]	; (8015000 <xPortStartScheduler+0xd8>)
 8014f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f68:	78fb      	ldrb	r3, [r7, #3]
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	005b      	lsls	r3, r3, #1
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f72:	78fb      	ldrb	r3, [r7, #3]
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f7a:	2b80      	cmp	r3, #128	; 0x80
 8014f7c:	d0ef      	beq.n	8014f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014f7e:	4b20      	ldr	r3, [pc, #128]	; (8015000 <xPortStartScheduler+0xd8>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f1c3 0307 	rsb	r3, r3, #7
 8014f86:	2b04      	cmp	r3, #4
 8014f88:	d00a      	beq.n	8014fa0 <xPortStartScheduler+0x78>
	__asm volatile
 8014f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8e:	f383 8811 	msr	BASEPRI, r3
 8014f92:	f3bf 8f6f 	isb	sy
 8014f96:	f3bf 8f4f 	dsb	sy
 8014f9a:	60bb      	str	r3, [r7, #8]
}
 8014f9c:	bf00      	nop
 8014f9e:	e7fe      	b.n	8014f9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014fa0:	4b17      	ldr	r3, [pc, #92]	; (8015000 <xPortStartScheduler+0xd8>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	021b      	lsls	r3, r3, #8
 8014fa6:	4a16      	ldr	r2, [pc, #88]	; (8015000 <xPortStartScheduler+0xd8>)
 8014fa8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014faa:	4b15      	ldr	r3, [pc, #84]	; (8015000 <xPortStartScheduler+0xd8>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014fb2:	4a13      	ldr	r2, [pc, #76]	; (8015000 <xPortStartScheduler+0xd8>)
 8014fb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	b2da      	uxtb	r2, r3
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014fbe:	4b11      	ldr	r3, [pc, #68]	; (8015004 <xPortStartScheduler+0xdc>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	4a10      	ldr	r2, [pc, #64]	; (8015004 <xPortStartScheduler+0xdc>)
 8014fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014fca:	4b0e      	ldr	r3, [pc, #56]	; (8015004 <xPortStartScheduler+0xdc>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	4a0d      	ldr	r2, [pc, #52]	; (8015004 <xPortStartScheduler+0xdc>)
 8014fd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014fd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014fd6:	f000 f8b9 	bl	801514c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014fda:	4b0b      	ldr	r3, [pc, #44]	; (8015008 <xPortStartScheduler+0xe0>)
 8014fdc:	2200      	movs	r2, #0
 8014fde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014fe0:	f7ff ff92 	bl	8014f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014fe4:	f7ff fa96 	bl	8014514 <vTaskSwitchContext>
	prvTaskExitError();
 8014fe8:	f7ff ff4e 	bl	8014e88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	e000e400 	.word	0xe000e400
 8014ffc:	200059bc 	.word	0x200059bc
 8015000:	200059c0 	.word	0x200059c0
 8015004:	e000ed20 	.word	0xe000ed20
 8015008:	2000028c 	.word	0x2000028c

0801500c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
	__asm volatile
 8015012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015016:	f383 8811 	msr	BASEPRI, r3
 801501a:	f3bf 8f6f 	isb	sy
 801501e:	f3bf 8f4f 	dsb	sy
 8015022:	607b      	str	r3, [r7, #4]
}
 8015024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015026:	4b0f      	ldr	r3, [pc, #60]	; (8015064 <vPortEnterCritical+0x58>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	3301      	adds	r3, #1
 801502c:	4a0d      	ldr	r2, [pc, #52]	; (8015064 <vPortEnterCritical+0x58>)
 801502e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015030:	4b0c      	ldr	r3, [pc, #48]	; (8015064 <vPortEnterCritical+0x58>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b01      	cmp	r3, #1
 8015036:	d10f      	bne.n	8015058 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015038:	4b0b      	ldr	r3, [pc, #44]	; (8015068 <vPortEnterCritical+0x5c>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	b2db      	uxtb	r3, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	d00a      	beq.n	8015058 <vPortEnterCritical+0x4c>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	603b      	str	r3, [r7, #0]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <vPortEnterCritical+0x4a>
	}
}
 8015058:	bf00      	nop
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	bc80      	pop	{r7}
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop
 8015064:	2000028c 	.word	0x2000028c
 8015068:	e000ed04 	.word	0xe000ed04

0801506c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801506c:	b480      	push	{r7}
 801506e:	b083      	sub	sp, #12
 8015070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015072:	4b11      	ldr	r3, [pc, #68]	; (80150b8 <vPortExitCritical+0x4c>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d10a      	bne.n	8015090 <vPortExitCritical+0x24>
	__asm volatile
 801507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801507e:	f383 8811 	msr	BASEPRI, r3
 8015082:	f3bf 8f6f 	isb	sy
 8015086:	f3bf 8f4f 	dsb	sy
 801508a:	607b      	str	r3, [r7, #4]
}
 801508c:	bf00      	nop
 801508e:	e7fe      	b.n	801508e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015090:	4b09      	ldr	r3, [pc, #36]	; (80150b8 <vPortExitCritical+0x4c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	3b01      	subs	r3, #1
 8015096:	4a08      	ldr	r2, [pc, #32]	; (80150b8 <vPortExitCritical+0x4c>)
 8015098:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801509a:	4b07      	ldr	r3, [pc, #28]	; (80150b8 <vPortExitCritical+0x4c>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d105      	bne.n	80150ae <vPortExitCritical+0x42>
 80150a2:	2300      	movs	r3, #0
 80150a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	f383 8811 	msr	BASEPRI, r3
}
 80150ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80150ae:	bf00      	nop
 80150b0:	370c      	adds	r7, #12
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bc80      	pop	{r7}
 80150b6:	4770      	bx	lr
 80150b8:	2000028c 	.word	0x2000028c
 80150bc:	00000000 	.word	0x00000000

080150c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80150c0:	f3ef 8009 	mrs	r0, PSP
 80150c4:	f3bf 8f6f 	isb	sy
 80150c8:	4b0d      	ldr	r3, [pc, #52]	; (8015100 <pxCurrentTCBConst>)
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80150d0:	6010      	str	r0, [r2, #0]
 80150d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80150d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80150da:	f380 8811 	msr	BASEPRI, r0
 80150de:	f7ff fa19 	bl	8014514 <vTaskSwitchContext>
 80150e2:	f04f 0000 	mov.w	r0, #0
 80150e6:	f380 8811 	msr	BASEPRI, r0
 80150ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150ee:	6819      	ldr	r1, [r3, #0]
 80150f0:	6808      	ldr	r0, [r1, #0]
 80150f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80150f6:	f380 8809 	msr	PSP, r0
 80150fa:	f3bf 8f6f 	isb	sy
 80150fe:	4770      	bx	lr

08015100 <pxCurrentTCBConst>:
 8015100:	20005890 	.word	0x20005890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015104:	bf00      	nop
 8015106:	bf00      	nop

08015108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	607b      	str	r3, [r7, #4]
}
 8015120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015122:	f7ff f939 	bl	8014398 <xTaskIncrementTick>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d003      	beq.n	8015134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801512c:	4b06      	ldr	r3, [pc, #24]	; (8015148 <SysTick_Handler+0x40>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	2300      	movs	r3, #0
 8015136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	f383 8811 	msr	BASEPRI, r3
}
 801513e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	e000ed04 	.word	0xe000ed04

0801514c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801514c:	b480      	push	{r7}
 801514e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015150:	4b0a      	ldr	r3, [pc, #40]	; (801517c <vPortSetupTimerInterrupt+0x30>)
 8015152:	2200      	movs	r2, #0
 8015154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015156:	4b0a      	ldr	r3, [pc, #40]	; (8015180 <vPortSetupTimerInterrupt+0x34>)
 8015158:	2200      	movs	r2, #0
 801515a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801515c:	4b09      	ldr	r3, [pc, #36]	; (8015184 <vPortSetupTimerInterrupt+0x38>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4a09      	ldr	r2, [pc, #36]	; (8015188 <vPortSetupTimerInterrupt+0x3c>)
 8015162:	fba2 2303 	umull	r2, r3, r2, r3
 8015166:	099b      	lsrs	r3, r3, #6
 8015168:	4a08      	ldr	r2, [pc, #32]	; (801518c <vPortSetupTimerInterrupt+0x40>)
 801516a:	3b01      	subs	r3, #1
 801516c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801516e:	4b03      	ldr	r3, [pc, #12]	; (801517c <vPortSetupTimerInterrupt+0x30>)
 8015170:	2207      	movs	r2, #7
 8015172:	601a      	str	r2, [r3, #0]
}
 8015174:	bf00      	nop
 8015176:	46bd      	mov	sp, r7
 8015178:	bc80      	pop	{r7}
 801517a:	4770      	bx	lr
 801517c:	e000e010 	.word	0xe000e010
 8015180:	e000e018 	.word	0xe000e018
 8015184:	20000260 	.word	0x20000260
 8015188:	10624dd3 	.word	0x10624dd3
 801518c:	e000e014 	.word	0xe000e014

08015190 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015190:	b480      	push	{r7}
 8015192:	b085      	sub	sp, #20
 8015194:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015196:	f3ef 8305 	mrs	r3, IPSR
 801519a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b0f      	cmp	r3, #15
 80151a0:	d914      	bls.n	80151cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80151a2:	4a16      	ldr	r2, [pc, #88]	; (80151fc <vPortValidateInterruptPriority+0x6c>)
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	4413      	add	r3, r2
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80151ac:	4b14      	ldr	r3, [pc, #80]	; (8015200 <vPortValidateInterruptPriority+0x70>)
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	7afa      	ldrb	r2, [r7, #11]
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d20a      	bcs.n	80151cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80151b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ba:	f383 8811 	msr	BASEPRI, r3
 80151be:	f3bf 8f6f 	isb	sy
 80151c2:	f3bf 8f4f 	dsb	sy
 80151c6:	607b      	str	r3, [r7, #4]
}
 80151c8:	bf00      	nop
 80151ca:	e7fe      	b.n	80151ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80151cc:	4b0d      	ldr	r3, [pc, #52]	; (8015204 <vPortValidateInterruptPriority+0x74>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80151d4:	4b0c      	ldr	r3, [pc, #48]	; (8015208 <vPortValidateInterruptPriority+0x78>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d90a      	bls.n	80151f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80151dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e0:	f383 8811 	msr	BASEPRI, r3
 80151e4:	f3bf 8f6f 	isb	sy
 80151e8:	f3bf 8f4f 	dsb	sy
 80151ec:	603b      	str	r3, [r7, #0]
}
 80151ee:	bf00      	nop
 80151f0:	e7fe      	b.n	80151f0 <vPortValidateInterruptPriority+0x60>
	}
 80151f2:	bf00      	nop
 80151f4:	3714      	adds	r7, #20
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bc80      	pop	{r7}
 80151fa:	4770      	bx	lr
 80151fc:	e000e3f0 	.word	0xe000e3f0
 8015200:	200059bc 	.word	0x200059bc
 8015204:	e000ed0c 	.word	0xe000ed0c
 8015208:	200059c0 	.word	0x200059c0

0801520c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b08a      	sub	sp, #40	; 0x28
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015214:	2300      	movs	r3, #0
 8015216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015218:	f7ff f814 	bl	8014244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801521c:	4b58      	ldr	r3, [pc, #352]	; (8015380 <pvPortMalloc+0x174>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d101      	bne.n	8015228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015224:	f000 f910 	bl	8015448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015228:	4b56      	ldr	r3, [pc, #344]	; (8015384 <pvPortMalloc+0x178>)
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	4013      	ands	r3, r2
 8015230:	2b00      	cmp	r3, #0
 8015232:	f040 808e 	bne.w	8015352 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d01d      	beq.n	8015278 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801523c:	2208      	movs	r2, #8
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4413      	add	r3, r2
 8015242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f003 0307 	and.w	r3, r3, #7
 801524a:	2b00      	cmp	r3, #0
 801524c:	d014      	beq.n	8015278 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f023 0307 	bic.w	r3, r3, #7
 8015254:	3308      	adds	r3, #8
 8015256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f003 0307 	and.w	r3, r3, #7
 801525e:	2b00      	cmp	r3, #0
 8015260:	d00a      	beq.n	8015278 <pvPortMalloc+0x6c>
	__asm volatile
 8015262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015266:	f383 8811 	msr	BASEPRI, r3
 801526a:	f3bf 8f6f 	isb	sy
 801526e:	f3bf 8f4f 	dsb	sy
 8015272:	617b      	str	r3, [r7, #20]
}
 8015274:	bf00      	nop
 8015276:	e7fe      	b.n	8015276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d069      	beq.n	8015352 <pvPortMalloc+0x146>
 801527e:	4b42      	ldr	r3, [pc, #264]	; (8015388 <pvPortMalloc+0x17c>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	429a      	cmp	r2, r3
 8015286:	d864      	bhi.n	8015352 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015288:	4b40      	ldr	r3, [pc, #256]	; (801538c <pvPortMalloc+0x180>)
 801528a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801528c:	4b3f      	ldr	r3, [pc, #252]	; (801538c <pvPortMalloc+0x180>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015292:	e004      	b.n	801529e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d903      	bls.n	80152b0 <pvPortMalloc+0xa4>
 80152a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1f1      	bne.n	8015294 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80152b0:	4b33      	ldr	r3, [pc, #204]	; (8015380 <pvPortMalloc+0x174>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d04b      	beq.n	8015352 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2208      	movs	r2, #8
 80152c0:	4413      	add	r3, r2
 80152c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	6a3b      	ldr	r3, [r7, #32]
 80152ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80152cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ce:	685a      	ldr	r2, [r3, #4]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	1ad2      	subs	r2, r2, r3
 80152d4:	2308      	movs	r3, #8
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	429a      	cmp	r2, r3
 80152da:	d91f      	bls.n	801531c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80152dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4413      	add	r3, r2
 80152e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	f003 0307 	and.w	r3, r3, #7
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d00a      	beq.n	8015304 <pvPortMalloc+0xf8>
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	613b      	str	r3, [r7, #16]
}
 8015300:	bf00      	nop
 8015302:	e7fe      	b.n	8015302 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015306:	685a      	ldr	r2, [r3, #4]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	1ad2      	subs	r2, r2, r3
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015316:	69b8      	ldr	r0, [r7, #24]
 8015318:	f000 f8f8 	bl	801550c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801531c:	4b1a      	ldr	r3, [pc, #104]	; (8015388 <pvPortMalloc+0x17c>)
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	1ad3      	subs	r3, r2, r3
 8015326:	4a18      	ldr	r2, [pc, #96]	; (8015388 <pvPortMalloc+0x17c>)
 8015328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801532a:	4b17      	ldr	r3, [pc, #92]	; (8015388 <pvPortMalloc+0x17c>)
 801532c:	681a      	ldr	r2, [r3, #0]
 801532e:	4b18      	ldr	r3, [pc, #96]	; (8015390 <pvPortMalloc+0x184>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	429a      	cmp	r2, r3
 8015334:	d203      	bcs.n	801533e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015336:	4b14      	ldr	r3, [pc, #80]	; (8015388 <pvPortMalloc+0x17c>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4a15      	ldr	r2, [pc, #84]	; (8015390 <pvPortMalloc+0x184>)
 801533c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015340:	685a      	ldr	r2, [r3, #4]
 8015342:	4b10      	ldr	r3, [pc, #64]	; (8015384 <pvPortMalloc+0x178>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	431a      	orrs	r2, r3
 8015348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534e:	2200      	movs	r2, #0
 8015350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015352:	f7fe ff85 	bl	8014260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	f003 0307 	and.w	r3, r3, #7
 801535c:	2b00      	cmp	r3, #0
 801535e:	d00a      	beq.n	8015376 <pvPortMalloc+0x16a>
	__asm volatile
 8015360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015364:	f383 8811 	msr	BASEPRI, r3
 8015368:	f3bf 8f6f 	isb	sy
 801536c:	f3bf 8f4f 	dsb	sy
 8015370:	60fb      	str	r3, [r7, #12]
}
 8015372:	bf00      	nop
 8015374:	e7fe      	b.n	8015374 <pvPortMalloc+0x168>
	return pvReturn;
 8015376:	69fb      	ldr	r3, [r7, #28]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3728      	adds	r7, #40	; 0x28
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}
 8015380:	200095cc 	.word	0x200095cc
 8015384:	200095d8 	.word	0x200095d8
 8015388:	200095d0 	.word	0x200095d0
 801538c:	200095c4 	.word	0x200095c4
 8015390:	200095d4 	.word	0x200095d4

08015394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d048      	beq.n	8015438 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80153a6:	2308      	movs	r3, #8
 80153a8:	425b      	negs	r3, r3
 80153aa:	697a      	ldr	r2, [r7, #20]
 80153ac:	4413      	add	r3, r2
 80153ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	685a      	ldr	r2, [r3, #4]
 80153b8:	4b21      	ldr	r3, [pc, #132]	; (8015440 <vPortFree+0xac>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4013      	ands	r3, r2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d10a      	bne.n	80153d8 <vPortFree+0x44>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	60fb      	str	r3, [r7, #12]
}
 80153d4:	bf00      	nop
 80153d6:	e7fe      	b.n	80153d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00a      	beq.n	80153f6 <vPortFree+0x62>
	__asm volatile
 80153e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e4:	f383 8811 	msr	BASEPRI, r3
 80153e8:	f3bf 8f6f 	isb	sy
 80153ec:	f3bf 8f4f 	dsb	sy
 80153f0:	60bb      	str	r3, [r7, #8]
}
 80153f2:	bf00      	nop
 80153f4:	e7fe      	b.n	80153f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	685a      	ldr	r2, [r3, #4]
 80153fa:	4b11      	ldr	r3, [pc, #68]	; (8015440 <vPortFree+0xac>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	4013      	ands	r3, r2
 8015400:	2b00      	cmp	r3, #0
 8015402:	d019      	beq.n	8015438 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d115      	bne.n	8015438 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	685a      	ldr	r2, [r3, #4]
 8015410:	4b0b      	ldr	r3, [pc, #44]	; (8015440 <vPortFree+0xac>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	43db      	mvns	r3, r3
 8015416:	401a      	ands	r2, r3
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801541c:	f7fe ff12 	bl	8014244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	685a      	ldr	r2, [r3, #4]
 8015424:	4b07      	ldr	r3, [pc, #28]	; (8015444 <vPortFree+0xb0>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	4413      	add	r3, r2
 801542a:	4a06      	ldr	r2, [pc, #24]	; (8015444 <vPortFree+0xb0>)
 801542c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801542e:	6938      	ldr	r0, [r7, #16]
 8015430:	f000 f86c 	bl	801550c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015434:	f7fe ff14 	bl	8014260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015438:	bf00      	nop
 801543a:	3718      	adds	r7, #24
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}
 8015440:	200095d8 	.word	0x200095d8
 8015444:	200095d0 	.word	0x200095d0

08015448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015448:	b480      	push	{r7}
 801544a:	b085      	sub	sp, #20
 801544c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801544e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015454:	4b27      	ldr	r3, [pc, #156]	; (80154f4 <prvHeapInit+0xac>)
 8015456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	f003 0307 	and.w	r3, r3, #7
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00c      	beq.n	801547c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	3307      	adds	r3, #7
 8015466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	f023 0307 	bic.w	r3, r3, #7
 801546e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015470:	68ba      	ldr	r2, [r7, #8]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	1ad3      	subs	r3, r2, r3
 8015476:	4a1f      	ldr	r2, [pc, #124]	; (80154f4 <prvHeapInit+0xac>)
 8015478:	4413      	add	r3, r2
 801547a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015480:	4a1d      	ldr	r2, [pc, #116]	; (80154f8 <prvHeapInit+0xb0>)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015486:	4b1c      	ldr	r3, [pc, #112]	; (80154f8 <prvHeapInit+0xb0>)
 8015488:	2200      	movs	r2, #0
 801548a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	4413      	add	r3, r2
 8015492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015494:	2208      	movs	r2, #8
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	1a9b      	subs	r3, r3, r2
 801549a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f023 0307 	bic.w	r3, r3, #7
 80154a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	4a15      	ldr	r2, [pc, #84]	; (80154fc <prvHeapInit+0xb4>)
 80154a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80154aa:	4b14      	ldr	r3, [pc, #80]	; (80154fc <prvHeapInit+0xb4>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2200      	movs	r2, #0
 80154b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80154b2:	4b12      	ldr	r3, [pc, #72]	; (80154fc <prvHeapInit+0xb4>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	2200      	movs	r2, #0
 80154b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	68fa      	ldr	r2, [r7, #12]
 80154c2:	1ad2      	subs	r2, r2, r3
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80154c8:	4b0c      	ldr	r3, [pc, #48]	; (80154fc <prvHeapInit+0xb4>)
 80154ca:	681a      	ldr	r2, [r3, #0]
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	4a0a      	ldr	r2, [pc, #40]	; (8015500 <prvHeapInit+0xb8>)
 80154d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	4a09      	ldr	r2, [pc, #36]	; (8015504 <prvHeapInit+0xbc>)
 80154de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80154e0:	4b09      	ldr	r3, [pc, #36]	; (8015508 <prvHeapInit+0xc0>)
 80154e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80154e6:	601a      	str	r2, [r3, #0]
}
 80154e8:	bf00      	nop
 80154ea:	3714      	adds	r7, #20
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bc80      	pop	{r7}
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	200059c4 	.word	0x200059c4
 80154f8:	200095c4 	.word	0x200095c4
 80154fc:	200095cc 	.word	0x200095cc
 8015500:	200095d4 	.word	0x200095d4
 8015504:	200095d0 	.word	0x200095d0
 8015508:	200095d8 	.word	0x200095d8

0801550c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801550c:	b480      	push	{r7}
 801550e:	b085      	sub	sp, #20
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015514:	4b27      	ldr	r3, [pc, #156]	; (80155b4 <prvInsertBlockIntoFreeList+0xa8>)
 8015516:	60fb      	str	r3, [r7, #12]
 8015518:	e002      	b.n	8015520 <prvInsertBlockIntoFreeList+0x14>
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	60fb      	str	r3, [r7, #12]
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	429a      	cmp	r2, r3
 8015528:	d8f7      	bhi.n	801551a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	4413      	add	r3, r2
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	429a      	cmp	r2, r3
 801553a:	d108      	bne.n	801554e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	685a      	ldr	r2, [r3, #4]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	685b      	ldr	r3, [r3, #4]
 8015544:	441a      	add	r2, r3
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	68ba      	ldr	r2, [r7, #8]
 8015558:	441a      	add	r2, r3
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	429a      	cmp	r2, r3
 8015560:	d118      	bne.n	8015594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	4b14      	ldr	r3, [pc, #80]	; (80155b8 <prvInsertBlockIntoFreeList+0xac>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	429a      	cmp	r2, r3
 801556c:	d00d      	beq.n	801558a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	685a      	ldr	r2, [r3, #4]
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	441a      	add	r2, r3
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	601a      	str	r2, [r3, #0]
 8015588:	e008      	b.n	801559c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801558a:	4b0b      	ldr	r3, [pc, #44]	; (80155b8 <prvInsertBlockIntoFreeList+0xac>)
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	601a      	str	r2, [r3, #0]
 8015592:	e003      	b.n	801559c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801559c:	68fa      	ldr	r2, [r7, #12]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d002      	beq.n	80155aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155aa:	bf00      	nop
 80155ac:	3714      	adds	r7, #20
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bc80      	pop	{r7}
 80155b2:	4770      	bx	lr
 80155b4:	200095c4 	.word	0x200095c4
 80155b8:	200095cc 	.word	0x200095cc

080155bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80155c0:	2201      	movs	r2, #1
 80155c2:	490e      	ldr	r1, [pc, #56]	; (80155fc <MX_USB_HOST_Init+0x40>)
 80155c4:	480e      	ldr	r0, [pc, #56]	; (8015600 <MX_USB_HOST_Init+0x44>)
 80155c6:	f7f8 fc99 	bl	800defc <USBH_Init>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d001      	beq.n	80155d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80155d0:	f7ee ff62 	bl	8004498 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80155d4:	490b      	ldr	r1, [pc, #44]	; (8015604 <MX_USB_HOST_Init+0x48>)
 80155d6:	480a      	ldr	r0, [pc, #40]	; (8015600 <MX_USB_HOST_Init+0x44>)
 80155d8:	f7f8 fd3c 	bl	800e054 <USBH_RegisterClass>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d001      	beq.n	80155e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80155e2:	f7ee ff59 	bl	8004498 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80155e6:	4806      	ldr	r0, [pc, #24]	; (8015600 <MX_USB_HOST_Init+0x44>)
 80155e8:	f7f8 fdbe 	bl	800e168 <USBH_Start>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d001      	beq.n	80155f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80155f2:	f7ee ff51 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80155f6:	bf00      	nop
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	08015609 	.word	0x08015609
 8015600:	2000df18 	.word	0x2000df18
 8015604:	2000026c 	.word	0x2000026c

08015608 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	460b      	mov	r3, r1
 8015612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015614:	78fb      	ldrb	r3, [r7, #3]
 8015616:	3b01      	subs	r3, #1
 8015618:	2b04      	cmp	r3, #4
 801561a:	d828      	bhi.n	801566e <USBH_UserProcess+0x66>
 801561c:	a201      	add	r2, pc, #4	; (adr r2, 8015624 <USBH_UserProcess+0x1c>)
 801561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015622:	bf00      	nop
 8015624:	0801566f 	.word	0x0801566f
 8015628:	0801564b 	.word	0x0801564b
 801562c:	0801566f 	.word	0x0801566f
 8015630:	08015667 	.word	0x08015667
 8015634:	08015639 	.word	0x08015639
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015638:	4b0f      	ldr	r3, [pc, #60]	; (8015678 <USBH_UserProcess+0x70>)
 801563a:	2203      	movs	r2, #3
 801563c:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 801563e:	4b0f      	ldr	r3, [pc, #60]	; (801567c <USBH_UserProcess+0x74>)
 8015640:	2200      	movs	r2, #0
 8015642:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 8015644:	f7eb fca2 	bl	8000f8c <Unmount_USB>
  break;
 8015648:	e012      	b.n	8015670 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801564a:	4b0b      	ldr	r3, [pc, #44]	; (8015678 <USBH_UserProcess+0x70>)
 801564c:	2202      	movs	r2, #2
 801564e:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 8015650:	f7eb fc88 	bl	8000f64 <Mount_USB>
	Check_USB_Details();
 8015654:	f7eb fd9e 	bl	8001194 <Check_USB_Details>
	Scan_USB("/");
 8015658:	4809      	ldr	r0, [pc, #36]	; (8015680 <USBH_UserProcess+0x78>)
 801565a:	f7eb fca9 	bl	8000fb0 <Scan_USB>

  usb_good = 1;
 801565e:	4b07      	ldr	r3, [pc, #28]	; (801567c <USBH_UserProcess+0x74>)
 8015660:	2201      	movs	r2, #1
 8015662:	601a      	str	r2, [r3, #0]

  break;
 8015664:	e004      	b.n	8015670 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015666:	4b04      	ldr	r3, [pc, #16]	; (8015678 <USBH_UserProcess+0x70>)
 8015668:	2201      	movs	r2, #1
 801566a:	701a      	strb	r2, [r3, #0]
  break;
 801566c:	e000      	b.n	8015670 <USBH_UserProcess+0x68>

  default:
  break;
 801566e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015670:	bf00      	nop
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	200095dc 	.word	0x200095dc
 801567c:	200095e0 	.word	0x200095e0
 8015680:	0801a6b8 	.word	0x0801a6b8

08015684 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b08a      	sub	sp, #40	; 0x28
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801568c:	f107 0314 	add.w	r3, r7, #20
 8015690:	2200      	movs	r2, #0
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	605a      	str	r2, [r3, #4]
 8015696:	609a      	str	r2, [r3, #8]
 8015698:	60da      	str	r2, [r3, #12]
 801569a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80156a4:	d147      	bne.n	8015736 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80156a6:	2300      	movs	r3, #0
 80156a8:	613b      	str	r3, [r7, #16]
 80156aa:	4b25      	ldr	r3, [pc, #148]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 80156ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ae:	4a24      	ldr	r2, [pc, #144]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 80156b0:	f043 0301 	orr.w	r3, r3, #1
 80156b4:	6313      	str	r3, [r2, #48]	; 0x30
 80156b6:	4b22      	ldr	r3, [pc, #136]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 80156b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ba:	f003 0301 	and.w	r3, r3, #1
 80156be:	613b      	str	r3, [r7, #16]
 80156c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80156c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80156c8:	2300      	movs	r3, #0
 80156ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156cc:	2300      	movs	r3, #0
 80156ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156d0:	f107 0314 	add.w	r3, r7, #20
 80156d4:	4619      	mov	r1, r3
 80156d6:	481b      	ldr	r0, [pc, #108]	; (8015744 <HAL_HCD_MspInit+0xc0>)
 80156d8:	f7f1 fe5e 	bl	8007398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80156dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80156e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156e2:	2302      	movs	r3, #2
 80156e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156e6:	2300      	movs	r3, #0
 80156e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156ea:	2303      	movs	r3, #3
 80156ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80156ee:	230a      	movs	r3, #10
 80156f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156f2:	f107 0314 	add.w	r3, r7, #20
 80156f6:	4619      	mov	r1, r3
 80156f8:	4812      	ldr	r0, [pc, #72]	; (8015744 <HAL_HCD_MspInit+0xc0>)
 80156fa:	f7f1 fe4d 	bl	8007398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80156fe:	4b10      	ldr	r3, [pc, #64]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 8015700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015702:	4a0f      	ldr	r2, [pc, #60]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 8015704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015708:	6353      	str	r3, [r2, #52]	; 0x34
 801570a:	2300      	movs	r3, #0
 801570c:	60fb      	str	r3, [r7, #12]
 801570e:	4b0c      	ldr	r3, [pc, #48]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 8015710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015712:	4a0b      	ldr	r2, [pc, #44]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 8015714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015718:	6453      	str	r3, [r2, #68]	; 0x44
 801571a:	4b09      	ldr	r3, [pc, #36]	; (8015740 <HAL_HCD_MspInit+0xbc>)
 801571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801571e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015722:	60fb      	str	r3, [r7, #12]
 8015724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015726:	2200      	movs	r2, #0
 8015728:	2105      	movs	r1, #5
 801572a:	2043      	movs	r0, #67	; 0x43
 801572c:	f7f1 fa9d 	bl	8006c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015730:	2043      	movs	r0, #67	; 0x43
 8015732:	f7f1 fab6 	bl	8006ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015736:	bf00      	nop
 8015738:	3728      	adds	r7, #40	; 0x28
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	40023800 	.word	0x40023800
 8015744:	40020000 	.word	0x40020000

08015748 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015756:	4618      	mov	r0, r3
 8015758:	f7f9 f886 	bl	800e868 <USBH_LL_IncTimer>
}
 801575c:	bf00      	nop
 801575e:	3708      	adds	r7, #8
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015772:	4618      	mov	r0, r3
 8015774:	f7f9 f8c9 	bl	800e90a <USBH_LL_Connect>
}
 8015778:	bf00      	nop
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801578e:	4618      	mov	r0, r3
 8015790:	f7f9 f8de 	bl	800e950 <USBH_LL_Disconnect>
}
 8015794:	bf00      	nop
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	460b      	mov	r3, r1
 80157a6:	70fb      	strb	r3, [r7, #3]
 80157a8:	4613      	mov	r3, r2
 80157aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7f9 f913 	bl	800e9de <USBH_LL_NotifyURBChange>
#endif
}
 80157b8:	bf00      	nop
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7f9 f874 	bl	800e8bc <USBH_LL_PortEnabled>
}
 80157d4:	bf00      	nop
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}

080157dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7f9 f880 	bl	800e8f0 <USBH_LL_PortDisabled>
}
 80157f0:	bf00      	nop
 80157f2:	3708      	adds	r7, #8
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8015806:	2b01      	cmp	r3, #1
 8015808:	d12a      	bne.n	8015860 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801580a:	4a18      	ldr	r2, [pc, #96]	; (801586c <USBH_LL_Init+0x74>)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	4a15      	ldr	r2, [pc, #84]	; (801586c <USBH_LL_Init+0x74>)
 8015816:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801581a:	4b14      	ldr	r3, [pc, #80]	; (801586c <USBH_LL_Init+0x74>)
 801581c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015820:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015822:	4b12      	ldr	r3, [pc, #72]	; (801586c <USBH_LL_Init+0x74>)
 8015824:	2208      	movs	r2, #8
 8015826:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015828:	4b10      	ldr	r3, [pc, #64]	; (801586c <USBH_LL_Init+0x74>)
 801582a:	2201      	movs	r2, #1
 801582c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801582e:	4b0f      	ldr	r3, [pc, #60]	; (801586c <USBH_LL_Init+0x74>)
 8015830:	2200      	movs	r2, #0
 8015832:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015834:	4b0d      	ldr	r3, [pc, #52]	; (801586c <USBH_LL_Init+0x74>)
 8015836:	2202      	movs	r2, #2
 8015838:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801583a:	4b0c      	ldr	r3, [pc, #48]	; (801586c <USBH_LL_Init+0x74>)
 801583c:	2200      	movs	r2, #0
 801583e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015840:	480a      	ldr	r0, [pc, #40]	; (801586c <USBH_LL_Init+0x74>)
 8015842:	f7f1 ff8f 	bl	8007764 <HAL_HCD_Init>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d001      	beq.n	8015850 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801584c:	f7ee fe24 	bl	8004498 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015850:	4806      	ldr	r0, [pc, #24]	; (801586c <USBH_LL_Init+0x74>)
 8015852:	f7f2 fb69 	bl	8007f28 <HAL_HCD_GetCurrentFrame>
 8015856:	4603      	mov	r3, r0
 8015858:	4619      	mov	r1, r3
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f7f8 fff6 	bl	800e84c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015860:	2300      	movs	r3, #0
}
 8015862:	4618      	mov	r0, r3
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	2000e2f4 	.word	0x2000e2f4

08015870 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015878:	2300      	movs	r3, #0
 801587a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801587c:	2300      	movs	r3, #0
 801587e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015886:	4618      	mov	r0, r3
 8015888:	f7f2 fada 	bl	8007e40 <HAL_HCD_Start>
 801588c:	4603      	mov	r3, r0
 801588e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015890:	7bfb      	ldrb	r3, [r7, #15]
 8015892:	4618      	mov	r0, r3
 8015894:	f000 f98a 	bl	8015bac <USBH_Get_USB_Status>
 8015898:	4603      	mov	r3, r0
 801589a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801589c:	7bbb      	ldrb	r3, [r7, #14]
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}

080158a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b084      	sub	sp, #16
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158ae:	2300      	movs	r3, #0
 80158b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80158b2:	2300      	movs	r3, #0
 80158b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f2 fae2 	bl	8007e86 <HAL_HCD_Stop>
 80158c2:	4603      	mov	r3, r0
 80158c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80158c6:	7bfb      	ldrb	r3, [r7, #15]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 f96f 	bl	8015bac <USBH_Get_USB_Status>
 80158ce:	4603      	mov	r3, r0
 80158d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80158e4:	2301      	movs	r3, #1
 80158e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f2 fb28 	bl	8007f44 <HAL_HCD_GetCurrentSpeed>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b02      	cmp	r3, #2
 80158f8:	d00c      	beq.n	8015914 <USBH_LL_GetSpeed+0x38>
 80158fa:	2b02      	cmp	r3, #2
 80158fc:	d80d      	bhi.n	801591a <USBH_LL_GetSpeed+0x3e>
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d002      	beq.n	8015908 <USBH_LL_GetSpeed+0x2c>
 8015902:	2b01      	cmp	r3, #1
 8015904:	d003      	beq.n	801590e <USBH_LL_GetSpeed+0x32>
 8015906:	e008      	b.n	801591a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015908:	2300      	movs	r3, #0
 801590a:	73fb      	strb	r3, [r7, #15]
    break;
 801590c:	e008      	b.n	8015920 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801590e:	2301      	movs	r3, #1
 8015910:	73fb      	strb	r3, [r7, #15]
    break;
 8015912:	e005      	b.n	8015920 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015914:	2302      	movs	r3, #2
 8015916:	73fb      	strb	r3, [r7, #15]
    break;
 8015918:	e002      	b.n	8015920 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801591a:	2301      	movs	r3, #1
 801591c:	73fb      	strb	r3, [r7, #15]
    break;
 801591e:	bf00      	nop
  }
  return  speed;
 8015920:	7bfb      	ldrb	r3, [r7, #15]
}
 8015922:	4618      	mov	r0, r3
 8015924:	3710      	adds	r7, #16
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b084      	sub	sp, #16
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015936:	2300      	movs	r3, #0
 8015938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015940:	4618      	mov	r0, r3
 8015942:	f7f2 fabd 	bl	8007ec0 <HAL_HCD_ResetPort>
 8015946:	4603      	mov	r3, r0
 8015948:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801594a:	7bfb      	ldrb	r3, [r7, #15]
 801594c:	4618      	mov	r0, r3
 801594e:	f000 f92d 	bl	8015bac <USBH_Get_USB_Status>
 8015952:	4603      	mov	r3, r0
 8015954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015956:	7bbb      	ldrb	r3, [r7, #14]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	460b      	mov	r3, r1
 801596a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015972:	78fa      	ldrb	r2, [r7, #3]
 8015974:	4611      	mov	r1, r2
 8015976:	4618      	mov	r0, r3
 8015978:	f7f2 fac3 	bl	8007f02 <HAL_HCD_HC_GetXferCount>
 801597c:	4603      	mov	r3, r0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3708      	adds	r7, #8
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015986:	b590      	push	{r4, r7, lr}
 8015988:	b089      	sub	sp, #36	; 0x24
 801598a:	af04      	add	r7, sp, #16
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	4608      	mov	r0, r1
 8015990:	4611      	mov	r1, r2
 8015992:	461a      	mov	r2, r3
 8015994:	4603      	mov	r3, r0
 8015996:	70fb      	strb	r3, [r7, #3]
 8015998:	460b      	mov	r3, r1
 801599a:	70bb      	strb	r3, [r7, #2]
 801599c:	4613      	mov	r3, r2
 801599e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159a0:	2300      	movs	r3, #0
 80159a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80159a4:	2300      	movs	r3, #0
 80159a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80159ae:	787c      	ldrb	r4, [r7, #1]
 80159b0:	78ba      	ldrb	r2, [r7, #2]
 80159b2:	78f9      	ldrb	r1, [r7, #3]
 80159b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80159b6:	9302      	str	r3, [sp, #8]
 80159b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80159bc:	9301      	str	r3, [sp, #4]
 80159be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	4623      	mov	r3, r4
 80159c6:	f7f1 ff2f 	bl	8007828 <HAL_HCD_HC_Init>
 80159ca:	4603      	mov	r3, r0
 80159cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80159ce:	7bfb      	ldrb	r3, [r7, #15]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f000 f8eb 	bl	8015bac <USBH_Get_USB_Status>
 80159d6:	4603      	mov	r3, r0
 80159d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159da:	7bbb      	ldrb	r3, [r7, #14]
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3714      	adds	r7, #20
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd90      	pop	{r4, r7, pc}

080159e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	460b      	mov	r3, r1
 80159ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159f0:	2300      	movs	r3, #0
 80159f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80159f4:	2300      	movs	r3, #0
 80159f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80159fe:	78fa      	ldrb	r2, [r7, #3]
 8015a00:	4611      	mov	r1, r2
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f1 ff9f 	bl	8007946 <HAL_HCD_HC_Halt>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015a0c:	7bfb      	ldrb	r3, [r7, #15]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f000 f8cc 	bl	8015bac <USBH_Get_USB_Status>
 8015a14:	4603      	mov	r3, r0
 8015a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}

08015a22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015a22:	b590      	push	{r4, r7, lr}
 8015a24:	b089      	sub	sp, #36	; 0x24
 8015a26:	af04      	add	r7, sp, #16
 8015a28:	6078      	str	r0, [r7, #4]
 8015a2a:	4608      	mov	r0, r1
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	461a      	mov	r2, r3
 8015a30:	4603      	mov	r3, r0
 8015a32:	70fb      	strb	r3, [r7, #3]
 8015a34:	460b      	mov	r3, r1
 8015a36:	70bb      	strb	r3, [r7, #2]
 8015a38:	4613      	mov	r3, r2
 8015a3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015a40:	2300      	movs	r3, #0
 8015a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8015a4a:	787c      	ldrb	r4, [r7, #1]
 8015a4c:	78ba      	ldrb	r2, [r7, #2]
 8015a4e:	78f9      	ldrb	r1, [r7, #3]
 8015a50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015a54:	9303      	str	r3, [sp, #12]
 8015a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015a58:	9302      	str	r3, [sp, #8]
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5c:	9301      	str	r3, [sp, #4]
 8015a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	4623      	mov	r3, r4
 8015a66:	f7f1 ff91 	bl	800798c <HAL_HCD_HC_SubmitRequest>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015a6e:	7bfb      	ldrb	r3, [r7, #15]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f000 f89b 	bl	8015bac <USBH_Get_USB_Status>
 8015a76:	4603      	mov	r3, r0
 8015a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3714      	adds	r7, #20
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd90      	pop	{r4, r7, pc}

08015a84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015a96:	78fa      	ldrb	r2, [r7, #3]
 8015a98:	4611      	mov	r1, r2
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f2 fa1e 	bl	8007edc <HAL_HCD_HC_GetURBState>
 8015aa0:	4603      	mov	r3, r0
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}

08015aaa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015aaa:	b580      	push	{r7, lr}
 8015aac:	b082      	sub	sp, #8
 8015aae:	af00      	add	r7, sp, #0
 8015ab0:	6078      	str	r0, [r7, #4]
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d103      	bne.n	8015ac8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015ac0:	78fb      	ldrb	r3, [r7, #3]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f000 f89e 	bl	8015c04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015ac8:	20c8      	movs	r0, #200	; 0xc8
 8015aca:	f7f0 fac5 	bl	8006058 <HAL_Delay>
  return USBH_OK;
 8015ace:	2300      	movs	r3, #0
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3708      	adds	r7, #8
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015ad8:	b480      	push	{r7}
 8015ada:	b085      	sub	sp, #20
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	70fb      	strb	r3, [r7, #3]
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015aee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015af0:	78fb      	ldrb	r3, [r7, #3]
 8015af2:	68fa      	ldr	r2, [r7, #12]
 8015af4:	212c      	movs	r1, #44	; 0x2c
 8015af6:	fb01 f303 	mul.w	r3, r1, r3
 8015afa:	4413      	add	r3, r2
 8015afc:	333b      	adds	r3, #59	; 0x3b
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d009      	beq.n	8015b18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015b04:	78fb      	ldrb	r3, [r7, #3]
 8015b06:	68fa      	ldr	r2, [r7, #12]
 8015b08:	212c      	movs	r1, #44	; 0x2c
 8015b0a:	fb01 f303 	mul.w	r3, r1, r3
 8015b0e:	4413      	add	r3, r2
 8015b10:	3354      	adds	r3, #84	; 0x54
 8015b12:	78ba      	ldrb	r2, [r7, #2]
 8015b14:	701a      	strb	r2, [r3, #0]
 8015b16:	e008      	b.n	8015b2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015b18:	78fb      	ldrb	r3, [r7, #3]
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	212c      	movs	r1, #44	; 0x2c
 8015b1e:	fb01 f303 	mul.w	r3, r1, r3
 8015b22:	4413      	add	r3, r2
 8015b24:	3355      	adds	r3, #85	; 0x55
 8015b26:	78ba      	ldrb	r2, [r7, #2]
 8015b28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015b2a:	2300      	movs	r3, #0
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bc80      	pop	{r7}
 8015b34:	4770      	bx	lr

08015b36 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015b36:	b480      	push	{r7}
 8015b38:	b085      	sub	sp, #20
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	460b      	mov	r3, r1
 8015b40:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015b4c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8015b4e:	78fb      	ldrb	r3, [r7, #3]
 8015b50:	68ba      	ldr	r2, [r7, #8]
 8015b52:	212c      	movs	r1, #44	; 0x2c
 8015b54:	fb01 f303 	mul.w	r3, r1, r3
 8015b58:	4413      	add	r3, r2
 8015b5a:	333b      	adds	r3, #59	; 0x3b
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d009      	beq.n	8015b76 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8015b62:	78fb      	ldrb	r3, [r7, #3]
 8015b64:	68ba      	ldr	r2, [r7, #8]
 8015b66:	212c      	movs	r1, #44	; 0x2c
 8015b68:	fb01 f303 	mul.w	r3, r1, r3
 8015b6c:	4413      	add	r3, r2
 8015b6e:	3354      	adds	r3, #84	; 0x54
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	73fb      	strb	r3, [r7, #15]
 8015b74:	e008      	b.n	8015b88 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8015b76:	78fb      	ldrb	r3, [r7, #3]
 8015b78:	68ba      	ldr	r2, [r7, #8]
 8015b7a:	212c      	movs	r1, #44	; 0x2c
 8015b7c:	fb01 f303 	mul.w	r3, r1, r3
 8015b80:	4413      	add	r3, r2
 8015b82:	3355      	adds	r3, #85	; 0x55
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8015b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3714      	adds	r7, #20
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bc80      	pop	{r7}
 8015b92:	4770      	bx	lr

08015b94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f7f0 fa5b 	bl	8006058 <HAL_Delay>
}
 8015ba2:	bf00      	nop
 8015ba4:	3708      	adds	r7, #8
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
	...

08015bac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015bac:	b480      	push	{r7}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015bba:	79fb      	ldrb	r3, [r7, #7]
 8015bbc:	2b03      	cmp	r3, #3
 8015bbe:	d817      	bhi.n	8015bf0 <USBH_Get_USB_Status+0x44>
 8015bc0:	a201      	add	r2, pc, #4	; (adr r2, 8015bc8 <USBH_Get_USB_Status+0x1c>)
 8015bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bc6:	bf00      	nop
 8015bc8:	08015bd9 	.word	0x08015bd9
 8015bcc:	08015bdf 	.word	0x08015bdf
 8015bd0:	08015be5 	.word	0x08015be5
 8015bd4:	08015beb 	.word	0x08015beb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	73fb      	strb	r3, [r7, #15]
    break;
 8015bdc:	e00b      	b.n	8015bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015bde:	2302      	movs	r3, #2
 8015be0:	73fb      	strb	r3, [r7, #15]
    break;
 8015be2:	e008      	b.n	8015bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015be4:	2301      	movs	r3, #1
 8015be6:	73fb      	strb	r3, [r7, #15]
    break;
 8015be8:	e005      	b.n	8015bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015bea:	2302      	movs	r3, #2
 8015bec:	73fb      	strb	r3, [r7, #15]
    break;
 8015bee:	e002      	b.n	8015bf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015bf0:	2302      	movs	r3, #2
 8015bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8015bf4:	bf00      	nop
  }
  return usb_status;
 8015bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3714      	adds	r7, #20
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bc80      	pop	{r7}
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop

08015c04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8015c0e:	79fb      	ldrb	r3, [r7, #7]
 8015c10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015c12:	79fb      	ldrb	r3, [r7, #7]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d102      	bne.n	8015c1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	73fb      	strb	r3, [r7, #15]
 8015c1c:	e001      	b.n	8015c22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 8015c22:	7bfb      	ldrb	r3, [r7, #15]
 8015c24:	461a      	mov	r2, r3
 8015c26:	2104      	movs	r1, #4
 8015c28:	4803      	ldr	r0, [pc, #12]	; (8015c38 <MX_DriverVbusFS+0x34>)
 8015c2a:	f7f1 fd6a 	bl	8007702 <HAL_GPIO_WritePin>
}
 8015c2e:	bf00      	nop
 8015c30:	3710      	adds	r7, #16
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}
 8015c36:	bf00      	nop
 8015c38:	40020800 	.word	0x40020800

08015c3c <__errno>:
 8015c3c:	4b01      	ldr	r3, [pc, #4]	; (8015c44 <__errno+0x8>)
 8015c3e:	6818      	ldr	r0, [r3, #0]
 8015c40:	4770      	bx	lr
 8015c42:	bf00      	nop
 8015c44:	20000290 	.word	0x20000290

08015c48 <std>:
 8015c48:	2300      	movs	r3, #0
 8015c4a:	b510      	push	{r4, lr}
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8015c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c56:	6083      	str	r3, [r0, #8]
 8015c58:	8181      	strh	r1, [r0, #12]
 8015c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8015c5c:	81c2      	strh	r2, [r0, #14]
 8015c5e:	6183      	str	r3, [r0, #24]
 8015c60:	4619      	mov	r1, r3
 8015c62:	2208      	movs	r2, #8
 8015c64:	305c      	adds	r0, #92	; 0x5c
 8015c66:	f000 f92b 	bl	8015ec0 <memset>
 8015c6a:	4b05      	ldr	r3, [pc, #20]	; (8015c80 <std+0x38>)
 8015c6c:	6224      	str	r4, [r4, #32]
 8015c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8015c70:	4b04      	ldr	r3, [pc, #16]	; (8015c84 <std+0x3c>)
 8015c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c74:	4b04      	ldr	r3, [pc, #16]	; (8015c88 <std+0x40>)
 8015c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c78:	4b04      	ldr	r3, [pc, #16]	; (8015c8c <std+0x44>)
 8015c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8015c7c:	bd10      	pop	{r4, pc}
 8015c7e:	bf00      	nop
 8015c80:	08016e3d 	.word	0x08016e3d
 8015c84:	08016e5f 	.word	0x08016e5f
 8015c88:	08016e97 	.word	0x08016e97
 8015c8c:	08016ebb 	.word	0x08016ebb

08015c90 <_cleanup_r>:
 8015c90:	4901      	ldr	r1, [pc, #4]	; (8015c98 <_cleanup_r+0x8>)
 8015c92:	f000 b8af 	b.w	8015df4 <_fwalk_reent>
 8015c96:	bf00      	nop
 8015c98:	08018a59 	.word	0x08018a59

08015c9c <__sfmoreglue>:
 8015c9c:	b570      	push	{r4, r5, r6, lr}
 8015c9e:	2568      	movs	r5, #104	; 0x68
 8015ca0:	1e4a      	subs	r2, r1, #1
 8015ca2:	4355      	muls	r5, r2
 8015ca4:	460e      	mov	r6, r1
 8015ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015caa:	f000 f95d 	bl	8015f68 <_malloc_r>
 8015cae:	4604      	mov	r4, r0
 8015cb0:	b140      	cbz	r0, 8015cc4 <__sfmoreglue+0x28>
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8015cb8:	300c      	adds	r0, #12
 8015cba:	60a0      	str	r0, [r4, #8]
 8015cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015cc0:	f000 f8fe 	bl	8015ec0 <memset>
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	bd70      	pop	{r4, r5, r6, pc}

08015cc8 <__sfp_lock_acquire>:
 8015cc8:	4801      	ldr	r0, [pc, #4]	; (8015cd0 <__sfp_lock_acquire+0x8>)
 8015cca:	f000 b8d8 	b.w	8015e7e <__retarget_lock_acquire_recursive>
 8015cce:	bf00      	nop
 8015cd0:	2000e600 	.word	0x2000e600

08015cd4 <__sfp_lock_release>:
 8015cd4:	4801      	ldr	r0, [pc, #4]	; (8015cdc <__sfp_lock_release+0x8>)
 8015cd6:	f000 b8d3 	b.w	8015e80 <__retarget_lock_release_recursive>
 8015cda:	bf00      	nop
 8015cdc:	2000e600 	.word	0x2000e600

08015ce0 <__sinit_lock_acquire>:
 8015ce0:	4801      	ldr	r0, [pc, #4]	; (8015ce8 <__sinit_lock_acquire+0x8>)
 8015ce2:	f000 b8cc 	b.w	8015e7e <__retarget_lock_acquire_recursive>
 8015ce6:	bf00      	nop
 8015ce8:	2000e5fb 	.word	0x2000e5fb

08015cec <__sinit_lock_release>:
 8015cec:	4801      	ldr	r0, [pc, #4]	; (8015cf4 <__sinit_lock_release+0x8>)
 8015cee:	f000 b8c7 	b.w	8015e80 <__retarget_lock_release_recursive>
 8015cf2:	bf00      	nop
 8015cf4:	2000e5fb 	.word	0x2000e5fb

08015cf8 <__sinit>:
 8015cf8:	b510      	push	{r4, lr}
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	f7ff fff0 	bl	8015ce0 <__sinit_lock_acquire>
 8015d00:	69a3      	ldr	r3, [r4, #24]
 8015d02:	b11b      	cbz	r3, 8015d0c <__sinit+0x14>
 8015d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d08:	f7ff bff0 	b.w	8015cec <__sinit_lock_release>
 8015d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015d10:	6523      	str	r3, [r4, #80]	; 0x50
 8015d12:	4b13      	ldr	r3, [pc, #76]	; (8015d60 <__sinit+0x68>)
 8015d14:	4a13      	ldr	r2, [pc, #76]	; (8015d64 <__sinit+0x6c>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8015d1a:	42a3      	cmp	r3, r4
 8015d1c:	bf08      	it	eq
 8015d1e:	2301      	moveq	r3, #1
 8015d20:	4620      	mov	r0, r4
 8015d22:	bf08      	it	eq
 8015d24:	61a3      	streq	r3, [r4, #24]
 8015d26:	f000 f81f 	bl	8015d68 <__sfp>
 8015d2a:	6060      	str	r0, [r4, #4]
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	f000 f81b 	bl	8015d68 <__sfp>
 8015d32:	60a0      	str	r0, [r4, #8]
 8015d34:	4620      	mov	r0, r4
 8015d36:	f000 f817 	bl	8015d68 <__sfp>
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	2104      	movs	r1, #4
 8015d3e:	60e0      	str	r0, [r4, #12]
 8015d40:	6860      	ldr	r0, [r4, #4]
 8015d42:	f7ff ff81 	bl	8015c48 <std>
 8015d46:	2201      	movs	r2, #1
 8015d48:	2109      	movs	r1, #9
 8015d4a:	68a0      	ldr	r0, [r4, #8]
 8015d4c:	f7ff ff7c 	bl	8015c48 <std>
 8015d50:	2202      	movs	r2, #2
 8015d52:	2112      	movs	r1, #18
 8015d54:	68e0      	ldr	r0, [r4, #12]
 8015d56:	f7ff ff77 	bl	8015c48 <std>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	61a3      	str	r3, [r4, #24]
 8015d5e:	e7d1      	b.n	8015d04 <__sinit+0xc>
 8015d60:	0801a7d0 	.word	0x0801a7d0
 8015d64:	08015c91 	.word	0x08015c91

08015d68 <__sfp>:
 8015d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d6a:	4607      	mov	r7, r0
 8015d6c:	f7ff ffac 	bl	8015cc8 <__sfp_lock_acquire>
 8015d70:	4b1e      	ldr	r3, [pc, #120]	; (8015dec <__sfp+0x84>)
 8015d72:	681e      	ldr	r6, [r3, #0]
 8015d74:	69b3      	ldr	r3, [r6, #24]
 8015d76:	b913      	cbnz	r3, 8015d7e <__sfp+0x16>
 8015d78:	4630      	mov	r0, r6
 8015d7a:	f7ff ffbd 	bl	8015cf8 <__sinit>
 8015d7e:	3648      	adds	r6, #72	; 0x48
 8015d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015d84:	3b01      	subs	r3, #1
 8015d86:	d503      	bpl.n	8015d90 <__sfp+0x28>
 8015d88:	6833      	ldr	r3, [r6, #0]
 8015d8a:	b30b      	cbz	r3, 8015dd0 <__sfp+0x68>
 8015d8c:	6836      	ldr	r6, [r6, #0]
 8015d8e:	e7f7      	b.n	8015d80 <__sfp+0x18>
 8015d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d94:	b9d5      	cbnz	r5, 8015dcc <__sfp+0x64>
 8015d96:	4b16      	ldr	r3, [pc, #88]	; (8015df0 <__sfp+0x88>)
 8015d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d9c:	60e3      	str	r3, [r4, #12]
 8015d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8015da0:	f000 f86c 	bl	8015e7c <__retarget_lock_init_recursive>
 8015da4:	f7ff ff96 	bl	8015cd4 <__sfp_lock_release>
 8015da8:	2208      	movs	r2, #8
 8015daa:	4629      	mov	r1, r5
 8015dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015db4:	6025      	str	r5, [r4, #0]
 8015db6:	61a5      	str	r5, [r4, #24]
 8015db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015dbc:	f000 f880 	bl	8015ec0 <memset>
 8015dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015dc8:	4620      	mov	r0, r4
 8015dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dcc:	3468      	adds	r4, #104	; 0x68
 8015dce:	e7d9      	b.n	8015d84 <__sfp+0x1c>
 8015dd0:	2104      	movs	r1, #4
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	f7ff ff62 	bl	8015c9c <__sfmoreglue>
 8015dd8:	4604      	mov	r4, r0
 8015dda:	6030      	str	r0, [r6, #0]
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	d1d5      	bne.n	8015d8c <__sfp+0x24>
 8015de0:	f7ff ff78 	bl	8015cd4 <__sfp_lock_release>
 8015de4:	230c      	movs	r3, #12
 8015de6:	603b      	str	r3, [r7, #0]
 8015de8:	e7ee      	b.n	8015dc8 <__sfp+0x60>
 8015dea:	bf00      	nop
 8015dec:	0801a7d0 	.word	0x0801a7d0
 8015df0:	ffff0001 	.word	0xffff0001

08015df4 <_fwalk_reent>:
 8015df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015df8:	4606      	mov	r6, r0
 8015dfa:	4688      	mov	r8, r1
 8015dfc:	2700      	movs	r7, #0
 8015dfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e06:	f1b9 0901 	subs.w	r9, r9, #1
 8015e0a:	d505      	bpl.n	8015e18 <_fwalk_reent+0x24>
 8015e0c:	6824      	ldr	r4, [r4, #0]
 8015e0e:	2c00      	cmp	r4, #0
 8015e10:	d1f7      	bne.n	8015e02 <_fwalk_reent+0xe>
 8015e12:	4638      	mov	r0, r7
 8015e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e18:	89ab      	ldrh	r3, [r5, #12]
 8015e1a:	2b01      	cmp	r3, #1
 8015e1c:	d907      	bls.n	8015e2e <_fwalk_reent+0x3a>
 8015e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e22:	3301      	adds	r3, #1
 8015e24:	d003      	beq.n	8015e2e <_fwalk_reent+0x3a>
 8015e26:	4629      	mov	r1, r5
 8015e28:	4630      	mov	r0, r6
 8015e2a:	47c0      	blx	r8
 8015e2c:	4307      	orrs	r7, r0
 8015e2e:	3568      	adds	r5, #104	; 0x68
 8015e30:	e7e9      	b.n	8015e06 <_fwalk_reent+0x12>
	...

08015e34 <__libc_init_array>:
 8015e34:	b570      	push	{r4, r5, r6, lr}
 8015e36:	2600      	movs	r6, #0
 8015e38:	4d0c      	ldr	r5, [pc, #48]	; (8015e6c <__libc_init_array+0x38>)
 8015e3a:	4c0d      	ldr	r4, [pc, #52]	; (8015e70 <__libc_init_array+0x3c>)
 8015e3c:	1b64      	subs	r4, r4, r5
 8015e3e:	10a4      	asrs	r4, r4, #2
 8015e40:	42a6      	cmp	r6, r4
 8015e42:	d109      	bne.n	8015e58 <__libc_init_array+0x24>
 8015e44:	f004 fba8 	bl	801a598 <_init>
 8015e48:	2600      	movs	r6, #0
 8015e4a:	4d0a      	ldr	r5, [pc, #40]	; (8015e74 <__libc_init_array+0x40>)
 8015e4c:	4c0a      	ldr	r4, [pc, #40]	; (8015e78 <__libc_init_array+0x44>)
 8015e4e:	1b64      	subs	r4, r4, r5
 8015e50:	10a4      	asrs	r4, r4, #2
 8015e52:	42a6      	cmp	r6, r4
 8015e54:	d105      	bne.n	8015e62 <__libc_init_array+0x2e>
 8015e56:	bd70      	pop	{r4, r5, r6, pc}
 8015e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e5c:	4798      	blx	r3
 8015e5e:	3601      	adds	r6, #1
 8015e60:	e7ee      	b.n	8015e40 <__libc_init_array+0xc>
 8015e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e66:	4798      	blx	r3
 8015e68:	3601      	adds	r6, #1
 8015e6a:	e7f2      	b.n	8015e52 <__libc_init_array+0x1e>
 8015e6c:	0801ac2c 	.word	0x0801ac2c
 8015e70:	0801ac2c 	.word	0x0801ac2c
 8015e74:	0801ac2c 	.word	0x0801ac2c
 8015e78:	0801ac30 	.word	0x0801ac30

08015e7c <__retarget_lock_init_recursive>:
 8015e7c:	4770      	bx	lr

08015e7e <__retarget_lock_acquire_recursive>:
 8015e7e:	4770      	bx	lr

08015e80 <__retarget_lock_release_recursive>:
 8015e80:	4770      	bx	lr
	...

08015e84 <malloc>:
 8015e84:	4b02      	ldr	r3, [pc, #8]	; (8015e90 <malloc+0xc>)
 8015e86:	4601      	mov	r1, r0
 8015e88:	6818      	ldr	r0, [r3, #0]
 8015e8a:	f000 b86d 	b.w	8015f68 <_malloc_r>
 8015e8e:	bf00      	nop
 8015e90:	20000290 	.word	0x20000290

08015e94 <free>:
 8015e94:	4b02      	ldr	r3, [pc, #8]	; (8015ea0 <free+0xc>)
 8015e96:	4601      	mov	r1, r0
 8015e98:	6818      	ldr	r0, [r3, #0]
 8015e9a:	f000 b819 	b.w	8015ed0 <_free_r>
 8015e9e:	bf00      	nop
 8015ea0:	20000290 	.word	0x20000290

08015ea4 <memcpy>:
 8015ea4:	440a      	add	r2, r1
 8015ea6:	4291      	cmp	r1, r2
 8015ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015eac:	d100      	bne.n	8015eb0 <memcpy+0xc>
 8015eae:	4770      	bx	lr
 8015eb0:	b510      	push	{r4, lr}
 8015eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015eb6:	4291      	cmp	r1, r2
 8015eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ebc:	d1f9      	bne.n	8015eb2 <memcpy+0xe>
 8015ebe:	bd10      	pop	{r4, pc}

08015ec0 <memset>:
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	4402      	add	r2, r0
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d100      	bne.n	8015eca <memset+0xa>
 8015ec8:	4770      	bx	lr
 8015eca:	f803 1b01 	strb.w	r1, [r3], #1
 8015ece:	e7f9      	b.n	8015ec4 <memset+0x4>

08015ed0 <_free_r>:
 8015ed0:	b538      	push	{r3, r4, r5, lr}
 8015ed2:	4605      	mov	r5, r0
 8015ed4:	2900      	cmp	r1, #0
 8015ed6:	d043      	beq.n	8015f60 <_free_r+0x90>
 8015ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015edc:	1f0c      	subs	r4, r1, #4
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	bfb8      	it	lt
 8015ee2:	18e4      	addlt	r4, r4, r3
 8015ee4:	f003 f990 	bl	8019208 <__malloc_lock>
 8015ee8:	4a1e      	ldr	r2, [pc, #120]	; (8015f64 <_free_r+0x94>)
 8015eea:	6813      	ldr	r3, [r2, #0]
 8015eec:	4610      	mov	r0, r2
 8015eee:	b933      	cbnz	r3, 8015efe <_free_r+0x2e>
 8015ef0:	6063      	str	r3, [r4, #4]
 8015ef2:	6014      	str	r4, [r2, #0]
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015efa:	f003 b98b 	b.w	8019214 <__malloc_unlock>
 8015efe:	42a3      	cmp	r3, r4
 8015f00:	d90a      	bls.n	8015f18 <_free_r+0x48>
 8015f02:	6821      	ldr	r1, [r4, #0]
 8015f04:	1862      	adds	r2, r4, r1
 8015f06:	4293      	cmp	r3, r2
 8015f08:	bf01      	itttt	eq
 8015f0a:	681a      	ldreq	r2, [r3, #0]
 8015f0c:	685b      	ldreq	r3, [r3, #4]
 8015f0e:	1852      	addeq	r2, r2, r1
 8015f10:	6022      	streq	r2, [r4, #0]
 8015f12:	6063      	str	r3, [r4, #4]
 8015f14:	6004      	str	r4, [r0, #0]
 8015f16:	e7ed      	b.n	8015ef4 <_free_r+0x24>
 8015f18:	461a      	mov	r2, r3
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	b10b      	cbz	r3, 8015f22 <_free_r+0x52>
 8015f1e:	42a3      	cmp	r3, r4
 8015f20:	d9fa      	bls.n	8015f18 <_free_r+0x48>
 8015f22:	6811      	ldr	r1, [r2, #0]
 8015f24:	1850      	adds	r0, r2, r1
 8015f26:	42a0      	cmp	r0, r4
 8015f28:	d10b      	bne.n	8015f42 <_free_r+0x72>
 8015f2a:	6820      	ldr	r0, [r4, #0]
 8015f2c:	4401      	add	r1, r0
 8015f2e:	1850      	adds	r0, r2, r1
 8015f30:	4283      	cmp	r3, r0
 8015f32:	6011      	str	r1, [r2, #0]
 8015f34:	d1de      	bne.n	8015ef4 <_free_r+0x24>
 8015f36:	6818      	ldr	r0, [r3, #0]
 8015f38:	685b      	ldr	r3, [r3, #4]
 8015f3a:	4401      	add	r1, r0
 8015f3c:	6011      	str	r1, [r2, #0]
 8015f3e:	6053      	str	r3, [r2, #4]
 8015f40:	e7d8      	b.n	8015ef4 <_free_r+0x24>
 8015f42:	d902      	bls.n	8015f4a <_free_r+0x7a>
 8015f44:	230c      	movs	r3, #12
 8015f46:	602b      	str	r3, [r5, #0]
 8015f48:	e7d4      	b.n	8015ef4 <_free_r+0x24>
 8015f4a:	6820      	ldr	r0, [r4, #0]
 8015f4c:	1821      	adds	r1, r4, r0
 8015f4e:	428b      	cmp	r3, r1
 8015f50:	bf01      	itttt	eq
 8015f52:	6819      	ldreq	r1, [r3, #0]
 8015f54:	685b      	ldreq	r3, [r3, #4]
 8015f56:	1809      	addeq	r1, r1, r0
 8015f58:	6021      	streq	r1, [r4, #0]
 8015f5a:	6063      	str	r3, [r4, #4]
 8015f5c:	6054      	str	r4, [r2, #4]
 8015f5e:	e7c9      	b.n	8015ef4 <_free_r+0x24>
 8015f60:	bd38      	pop	{r3, r4, r5, pc}
 8015f62:	bf00      	nop
 8015f64:	200095e4 	.word	0x200095e4

08015f68 <_malloc_r>:
 8015f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f6a:	1ccd      	adds	r5, r1, #3
 8015f6c:	f025 0503 	bic.w	r5, r5, #3
 8015f70:	3508      	adds	r5, #8
 8015f72:	2d0c      	cmp	r5, #12
 8015f74:	bf38      	it	cc
 8015f76:	250c      	movcc	r5, #12
 8015f78:	2d00      	cmp	r5, #0
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	db01      	blt.n	8015f82 <_malloc_r+0x1a>
 8015f7e:	42a9      	cmp	r1, r5
 8015f80:	d903      	bls.n	8015f8a <_malloc_r+0x22>
 8015f82:	230c      	movs	r3, #12
 8015f84:	6033      	str	r3, [r6, #0]
 8015f86:	2000      	movs	r0, #0
 8015f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f8a:	f003 f93d 	bl	8019208 <__malloc_lock>
 8015f8e:	4921      	ldr	r1, [pc, #132]	; (8016014 <_malloc_r+0xac>)
 8015f90:	680a      	ldr	r2, [r1, #0]
 8015f92:	4614      	mov	r4, r2
 8015f94:	b99c      	cbnz	r4, 8015fbe <_malloc_r+0x56>
 8015f96:	4f20      	ldr	r7, [pc, #128]	; (8016018 <_malloc_r+0xb0>)
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	b923      	cbnz	r3, 8015fa6 <_malloc_r+0x3e>
 8015f9c:	4621      	mov	r1, r4
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	f000 ff18 	bl	8016dd4 <_sbrk_r>
 8015fa4:	6038      	str	r0, [r7, #0]
 8015fa6:	4629      	mov	r1, r5
 8015fa8:	4630      	mov	r0, r6
 8015faa:	f000 ff13 	bl	8016dd4 <_sbrk_r>
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	d123      	bne.n	8015ffa <_malloc_r+0x92>
 8015fb2:	230c      	movs	r3, #12
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	6033      	str	r3, [r6, #0]
 8015fb8:	f003 f92c 	bl	8019214 <__malloc_unlock>
 8015fbc:	e7e3      	b.n	8015f86 <_malloc_r+0x1e>
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	1b5b      	subs	r3, r3, r5
 8015fc2:	d417      	bmi.n	8015ff4 <_malloc_r+0x8c>
 8015fc4:	2b0b      	cmp	r3, #11
 8015fc6:	d903      	bls.n	8015fd0 <_malloc_r+0x68>
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	441c      	add	r4, r3
 8015fcc:	6025      	str	r5, [r4, #0]
 8015fce:	e004      	b.n	8015fda <_malloc_r+0x72>
 8015fd0:	6863      	ldr	r3, [r4, #4]
 8015fd2:	42a2      	cmp	r2, r4
 8015fd4:	bf0c      	ite	eq
 8015fd6:	600b      	streq	r3, [r1, #0]
 8015fd8:	6053      	strne	r3, [r2, #4]
 8015fda:	4630      	mov	r0, r6
 8015fdc:	f003 f91a 	bl	8019214 <__malloc_unlock>
 8015fe0:	f104 000b 	add.w	r0, r4, #11
 8015fe4:	1d23      	adds	r3, r4, #4
 8015fe6:	f020 0007 	bic.w	r0, r0, #7
 8015fea:	1ac2      	subs	r2, r0, r3
 8015fec:	d0cc      	beq.n	8015f88 <_malloc_r+0x20>
 8015fee:	1a1b      	subs	r3, r3, r0
 8015ff0:	50a3      	str	r3, [r4, r2]
 8015ff2:	e7c9      	b.n	8015f88 <_malloc_r+0x20>
 8015ff4:	4622      	mov	r2, r4
 8015ff6:	6864      	ldr	r4, [r4, #4]
 8015ff8:	e7cc      	b.n	8015f94 <_malloc_r+0x2c>
 8015ffa:	1cc4      	adds	r4, r0, #3
 8015ffc:	f024 0403 	bic.w	r4, r4, #3
 8016000:	42a0      	cmp	r0, r4
 8016002:	d0e3      	beq.n	8015fcc <_malloc_r+0x64>
 8016004:	1a21      	subs	r1, r4, r0
 8016006:	4630      	mov	r0, r6
 8016008:	f000 fee4 	bl	8016dd4 <_sbrk_r>
 801600c:	3001      	adds	r0, #1
 801600e:	d1dd      	bne.n	8015fcc <_malloc_r+0x64>
 8016010:	e7cf      	b.n	8015fb2 <_malloc_r+0x4a>
 8016012:	bf00      	nop
 8016014:	200095e4 	.word	0x200095e4
 8016018:	200095e8 	.word	0x200095e8

0801601c <__cvt>:
 801601c:	2b00      	cmp	r3, #0
 801601e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016022:	461f      	mov	r7, r3
 8016024:	bfbb      	ittet	lt
 8016026:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801602a:	461f      	movlt	r7, r3
 801602c:	2300      	movge	r3, #0
 801602e:	232d      	movlt	r3, #45	; 0x2d
 8016030:	b088      	sub	sp, #32
 8016032:	4614      	mov	r4, r2
 8016034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016036:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016038:	7013      	strb	r3, [r2, #0]
 801603a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801603c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8016040:	f023 0820 	bic.w	r8, r3, #32
 8016044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016048:	d005      	beq.n	8016056 <__cvt+0x3a>
 801604a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801604e:	d100      	bne.n	8016052 <__cvt+0x36>
 8016050:	3501      	adds	r5, #1
 8016052:	2302      	movs	r3, #2
 8016054:	e000      	b.n	8016058 <__cvt+0x3c>
 8016056:	2303      	movs	r3, #3
 8016058:	aa07      	add	r2, sp, #28
 801605a:	9204      	str	r2, [sp, #16]
 801605c:	aa06      	add	r2, sp, #24
 801605e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8016062:	e9cd 3500 	strd	r3, r5, [sp]
 8016066:	4622      	mov	r2, r4
 8016068:	463b      	mov	r3, r7
 801606a:	f001 fe81 	bl	8017d70 <_dtoa_r>
 801606e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016072:	4606      	mov	r6, r0
 8016074:	d102      	bne.n	801607c <__cvt+0x60>
 8016076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016078:	07db      	lsls	r3, r3, #31
 801607a:	d522      	bpl.n	80160c2 <__cvt+0xa6>
 801607c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016080:	eb06 0905 	add.w	r9, r6, r5
 8016084:	d110      	bne.n	80160a8 <__cvt+0x8c>
 8016086:	7833      	ldrb	r3, [r6, #0]
 8016088:	2b30      	cmp	r3, #48	; 0x30
 801608a:	d10a      	bne.n	80160a2 <__cvt+0x86>
 801608c:	2200      	movs	r2, #0
 801608e:	2300      	movs	r3, #0
 8016090:	4620      	mov	r0, r4
 8016092:	4639      	mov	r1, r7
 8016094:	f7ea fcd2 	bl	8000a3c <__aeabi_dcmpeq>
 8016098:	b918      	cbnz	r0, 80160a2 <__cvt+0x86>
 801609a:	f1c5 0501 	rsb	r5, r5, #1
 801609e:	f8ca 5000 	str.w	r5, [sl]
 80160a2:	f8da 3000 	ldr.w	r3, [sl]
 80160a6:	4499      	add	r9, r3
 80160a8:	2200      	movs	r2, #0
 80160aa:	2300      	movs	r3, #0
 80160ac:	4620      	mov	r0, r4
 80160ae:	4639      	mov	r1, r7
 80160b0:	f7ea fcc4 	bl	8000a3c <__aeabi_dcmpeq>
 80160b4:	b108      	cbz	r0, 80160ba <__cvt+0x9e>
 80160b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80160ba:	2230      	movs	r2, #48	; 0x30
 80160bc:	9b07      	ldr	r3, [sp, #28]
 80160be:	454b      	cmp	r3, r9
 80160c0:	d307      	bcc.n	80160d2 <__cvt+0xb6>
 80160c2:	4630      	mov	r0, r6
 80160c4:	9b07      	ldr	r3, [sp, #28]
 80160c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160c8:	1b9b      	subs	r3, r3, r6
 80160ca:	6013      	str	r3, [r2, #0]
 80160cc:	b008      	add	sp, #32
 80160ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160d2:	1c59      	adds	r1, r3, #1
 80160d4:	9107      	str	r1, [sp, #28]
 80160d6:	701a      	strb	r2, [r3, #0]
 80160d8:	e7f0      	b.n	80160bc <__cvt+0xa0>

080160da <__exponent>:
 80160da:	4603      	mov	r3, r0
 80160dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160de:	2900      	cmp	r1, #0
 80160e0:	f803 2b02 	strb.w	r2, [r3], #2
 80160e4:	bfb6      	itet	lt
 80160e6:	222d      	movlt	r2, #45	; 0x2d
 80160e8:	222b      	movge	r2, #43	; 0x2b
 80160ea:	4249      	neglt	r1, r1
 80160ec:	2909      	cmp	r1, #9
 80160ee:	7042      	strb	r2, [r0, #1]
 80160f0:	dd2b      	ble.n	801614a <__exponent+0x70>
 80160f2:	f10d 0407 	add.w	r4, sp, #7
 80160f6:	46a4      	mov	ip, r4
 80160f8:	270a      	movs	r7, #10
 80160fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80160fe:	460a      	mov	r2, r1
 8016100:	46a6      	mov	lr, r4
 8016102:	fb07 1516 	mls	r5, r7, r6, r1
 8016106:	2a63      	cmp	r2, #99	; 0x63
 8016108:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801610c:	4631      	mov	r1, r6
 801610e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016116:	dcf0      	bgt.n	80160fa <__exponent+0x20>
 8016118:	3130      	adds	r1, #48	; 0x30
 801611a:	f1ae 0502 	sub.w	r5, lr, #2
 801611e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016122:	4629      	mov	r1, r5
 8016124:	1c44      	adds	r4, r0, #1
 8016126:	4561      	cmp	r1, ip
 8016128:	d30a      	bcc.n	8016140 <__exponent+0x66>
 801612a:	f10d 0209 	add.w	r2, sp, #9
 801612e:	eba2 020e 	sub.w	r2, r2, lr
 8016132:	4565      	cmp	r5, ip
 8016134:	bf88      	it	hi
 8016136:	2200      	movhi	r2, #0
 8016138:	4413      	add	r3, r2
 801613a:	1a18      	subs	r0, r3, r0
 801613c:	b003      	add	sp, #12
 801613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016140:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016144:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016148:	e7ed      	b.n	8016126 <__exponent+0x4c>
 801614a:	2330      	movs	r3, #48	; 0x30
 801614c:	3130      	adds	r1, #48	; 0x30
 801614e:	7083      	strb	r3, [r0, #2]
 8016150:	70c1      	strb	r1, [r0, #3]
 8016152:	1d03      	adds	r3, r0, #4
 8016154:	e7f1      	b.n	801613a <__exponent+0x60>
	...

08016158 <_printf_float>:
 8016158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615c:	b091      	sub	sp, #68	; 0x44
 801615e:	460c      	mov	r4, r1
 8016160:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016164:	4616      	mov	r6, r2
 8016166:	461f      	mov	r7, r3
 8016168:	4605      	mov	r5, r0
 801616a:	f003 f817 	bl	801919c <_localeconv_r>
 801616e:	6803      	ldr	r3, [r0, #0]
 8016170:	4618      	mov	r0, r3
 8016172:	9309      	str	r3, [sp, #36]	; 0x24
 8016174:	f7ea f836 	bl	80001e4 <strlen>
 8016178:	2300      	movs	r3, #0
 801617a:	930e      	str	r3, [sp, #56]	; 0x38
 801617c:	f8d8 3000 	ldr.w	r3, [r8]
 8016180:	900a      	str	r0, [sp, #40]	; 0x28
 8016182:	3307      	adds	r3, #7
 8016184:	f023 0307 	bic.w	r3, r3, #7
 8016188:	f103 0208 	add.w	r2, r3, #8
 801618c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016190:	f8d4 b000 	ldr.w	fp, [r4]
 8016194:	f8c8 2000 	str.w	r2, [r8]
 8016198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80161a0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80161a4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80161a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80161aa:	f04f 32ff 	mov.w	r2, #4294967295
 80161ae:	4640      	mov	r0, r8
 80161b0:	4b9c      	ldr	r3, [pc, #624]	; (8016424 <_printf_float+0x2cc>)
 80161b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161b4:	f7ea fc74 	bl	8000aa0 <__aeabi_dcmpun>
 80161b8:	bb70      	cbnz	r0, 8016218 <_printf_float+0xc0>
 80161ba:	f04f 32ff 	mov.w	r2, #4294967295
 80161be:	4640      	mov	r0, r8
 80161c0:	4b98      	ldr	r3, [pc, #608]	; (8016424 <_printf_float+0x2cc>)
 80161c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161c4:	f7ea fc4e 	bl	8000a64 <__aeabi_dcmple>
 80161c8:	bb30      	cbnz	r0, 8016218 <_printf_float+0xc0>
 80161ca:	2200      	movs	r2, #0
 80161cc:	2300      	movs	r3, #0
 80161ce:	4640      	mov	r0, r8
 80161d0:	4651      	mov	r1, sl
 80161d2:	f7ea fc3d 	bl	8000a50 <__aeabi_dcmplt>
 80161d6:	b110      	cbz	r0, 80161de <_printf_float+0x86>
 80161d8:	232d      	movs	r3, #45	; 0x2d
 80161da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161de:	4b92      	ldr	r3, [pc, #584]	; (8016428 <_printf_float+0x2d0>)
 80161e0:	4892      	ldr	r0, [pc, #584]	; (801642c <_printf_float+0x2d4>)
 80161e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80161e6:	bf94      	ite	ls
 80161e8:	4698      	movls	r8, r3
 80161ea:	4680      	movhi	r8, r0
 80161ec:	2303      	movs	r3, #3
 80161ee:	f04f 0a00 	mov.w	sl, #0
 80161f2:	6123      	str	r3, [r4, #16]
 80161f4:	f02b 0304 	bic.w	r3, fp, #4
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	4633      	mov	r3, r6
 80161fc:	4621      	mov	r1, r4
 80161fe:	4628      	mov	r0, r5
 8016200:	9700      	str	r7, [sp, #0]
 8016202:	aa0f      	add	r2, sp, #60	; 0x3c
 8016204:	f000 f9d4 	bl	80165b0 <_printf_common>
 8016208:	3001      	adds	r0, #1
 801620a:	f040 8090 	bne.w	801632e <_printf_float+0x1d6>
 801620e:	f04f 30ff 	mov.w	r0, #4294967295
 8016212:	b011      	add	sp, #68	; 0x44
 8016214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016218:	4642      	mov	r2, r8
 801621a:	4653      	mov	r3, sl
 801621c:	4640      	mov	r0, r8
 801621e:	4651      	mov	r1, sl
 8016220:	f7ea fc3e 	bl	8000aa0 <__aeabi_dcmpun>
 8016224:	b148      	cbz	r0, 801623a <_printf_float+0xe2>
 8016226:	f1ba 0f00 	cmp.w	sl, #0
 801622a:	bfb8      	it	lt
 801622c:	232d      	movlt	r3, #45	; 0x2d
 801622e:	4880      	ldr	r0, [pc, #512]	; (8016430 <_printf_float+0x2d8>)
 8016230:	bfb8      	it	lt
 8016232:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016236:	4b7f      	ldr	r3, [pc, #508]	; (8016434 <_printf_float+0x2dc>)
 8016238:	e7d3      	b.n	80161e2 <_printf_float+0x8a>
 801623a:	6863      	ldr	r3, [r4, #4]
 801623c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016240:	1c5a      	adds	r2, r3, #1
 8016242:	d142      	bne.n	80162ca <_printf_float+0x172>
 8016244:	2306      	movs	r3, #6
 8016246:	6063      	str	r3, [r4, #4]
 8016248:	2200      	movs	r2, #0
 801624a:	9206      	str	r2, [sp, #24]
 801624c:	aa0e      	add	r2, sp, #56	; 0x38
 801624e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8016252:	aa0d      	add	r2, sp, #52	; 0x34
 8016254:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8016258:	9203      	str	r2, [sp, #12]
 801625a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801625e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016262:	6023      	str	r3, [r4, #0]
 8016264:	6863      	ldr	r3, [r4, #4]
 8016266:	4642      	mov	r2, r8
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	4628      	mov	r0, r5
 801626c:	4653      	mov	r3, sl
 801626e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016270:	f7ff fed4 	bl	801601c <__cvt>
 8016274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016276:	4680      	mov	r8, r0
 8016278:	2947      	cmp	r1, #71	; 0x47
 801627a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801627c:	d108      	bne.n	8016290 <_printf_float+0x138>
 801627e:	1cc8      	adds	r0, r1, #3
 8016280:	db02      	blt.n	8016288 <_printf_float+0x130>
 8016282:	6863      	ldr	r3, [r4, #4]
 8016284:	4299      	cmp	r1, r3
 8016286:	dd40      	ble.n	801630a <_printf_float+0x1b2>
 8016288:	f1a9 0902 	sub.w	r9, r9, #2
 801628c:	fa5f f989 	uxtb.w	r9, r9
 8016290:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016294:	d81f      	bhi.n	80162d6 <_printf_float+0x17e>
 8016296:	464a      	mov	r2, r9
 8016298:	3901      	subs	r1, #1
 801629a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801629e:	910d      	str	r1, [sp, #52]	; 0x34
 80162a0:	f7ff ff1b 	bl	80160da <__exponent>
 80162a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162a6:	4682      	mov	sl, r0
 80162a8:	1813      	adds	r3, r2, r0
 80162aa:	2a01      	cmp	r2, #1
 80162ac:	6123      	str	r3, [r4, #16]
 80162ae:	dc02      	bgt.n	80162b6 <_printf_float+0x15e>
 80162b0:	6822      	ldr	r2, [r4, #0]
 80162b2:	07d2      	lsls	r2, r2, #31
 80162b4:	d501      	bpl.n	80162ba <_printf_float+0x162>
 80162b6:	3301      	adds	r3, #1
 80162b8:	6123      	str	r3, [r4, #16]
 80162ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d09b      	beq.n	80161fa <_printf_float+0xa2>
 80162c2:	232d      	movs	r3, #45	; 0x2d
 80162c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162c8:	e797      	b.n	80161fa <_printf_float+0xa2>
 80162ca:	2947      	cmp	r1, #71	; 0x47
 80162cc:	d1bc      	bne.n	8016248 <_printf_float+0xf0>
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d1ba      	bne.n	8016248 <_printf_float+0xf0>
 80162d2:	2301      	movs	r3, #1
 80162d4:	e7b7      	b.n	8016246 <_printf_float+0xee>
 80162d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80162da:	d118      	bne.n	801630e <_printf_float+0x1b6>
 80162dc:	2900      	cmp	r1, #0
 80162de:	6863      	ldr	r3, [r4, #4]
 80162e0:	dd0b      	ble.n	80162fa <_printf_float+0x1a2>
 80162e2:	6121      	str	r1, [r4, #16]
 80162e4:	b913      	cbnz	r3, 80162ec <_printf_float+0x194>
 80162e6:	6822      	ldr	r2, [r4, #0]
 80162e8:	07d0      	lsls	r0, r2, #31
 80162ea:	d502      	bpl.n	80162f2 <_printf_float+0x19a>
 80162ec:	3301      	adds	r3, #1
 80162ee:	440b      	add	r3, r1
 80162f0:	6123      	str	r3, [r4, #16]
 80162f2:	f04f 0a00 	mov.w	sl, #0
 80162f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80162f8:	e7df      	b.n	80162ba <_printf_float+0x162>
 80162fa:	b913      	cbnz	r3, 8016302 <_printf_float+0x1aa>
 80162fc:	6822      	ldr	r2, [r4, #0]
 80162fe:	07d2      	lsls	r2, r2, #31
 8016300:	d501      	bpl.n	8016306 <_printf_float+0x1ae>
 8016302:	3302      	adds	r3, #2
 8016304:	e7f4      	b.n	80162f0 <_printf_float+0x198>
 8016306:	2301      	movs	r3, #1
 8016308:	e7f2      	b.n	80162f0 <_printf_float+0x198>
 801630a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801630e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016310:	4299      	cmp	r1, r3
 8016312:	db05      	blt.n	8016320 <_printf_float+0x1c8>
 8016314:	6823      	ldr	r3, [r4, #0]
 8016316:	6121      	str	r1, [r4, #16]
 8016318:	07d8      	lsls	r0, r3, #31
 801631a:	d5ea      	bpl.n	80162f2 <_printf_float+0x19a>
 801631c:	1c4b      	adds	r3, r1, #1
 801631e:	e7e7      	b.n	80162f0 <_printf_float+0x198>
 8016320:	2900      	cmp	r1, #0
 8016322:	bfcc      	ite	gt
 8016324:	2201      	movgt	r2, #1
 8016326:	f1c1 0202 	rsble	r2, r1, #2
 801632a:	4413      	add	r3, r2
 801632c:	e7e0      	b.n	80162f0 <_printf_float+0x198>
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	055a      	lsls	r2, r3, #21
 8016332:	d407      	bmi.n	8016344 <_printf_float+0x1ec>
 8016334:	6923      	ldr	r3, [r4, #16]
 8016336:	4642      	mov	r2, r8
 8016338:	4631      	mov	r1, r6
 801633a:	4628      	mov	r0, r5
 801633c:	47b8      	blx	r7
 801633e:	3001      	adds	r0, #1
 8016340:	d12b      	bne.n	801639a <_printf_float+0x242>
 8016342:	e764      	b.n	801620e <_printf_float+0xb6>
 8016344:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016348:	f240 80dd 	bls.w	8016506 <_printf_float+0x3ae>
 801634c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016350:	2200      	movs	r2, #0
 8016352:	2300      	movs	r3, #0
 8016354:	f7ea fb72 	bl	8000a3c <__aeabi_dcmpeq>
 8016358:	2800      	cmp	r0, #0
 801635a:	d033      	beq.n	80163c4 <_printf_float+0x26c>
 801635c:	2301      	movs	r3, #1
 801635e:	4631      	mov	r1, r6
 8016360:	4628      	mov	r0, r5
 8016362:	4a35      	ldr	r2, [pc, #212]	; (8016438 <_printf_float+0x2e0>)
 8016364:	47b8      	blx	r7
 8016366:	3001      	adds	r0, #1
 8016368:	f43f af51 	beq.w	801620e <_printf_float+0xb6>
 801636c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016370:	429a      	cmp	r2, r3
 8016372:	db02      	blt.n	801637a <_printf_float+0x222>
 8016374:	6823      	ldr	r3, [r4, #0]
 8016376:	07d8      	lsls	r0, r3, #31
 8016378:	d50f      	bpl.n	801639a <_printf_float+0x242>
 801637a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801637e:	4631      	mov	r1, r6
 8016380:	4628      	mov	r0, r5
 8016382:	47b8      	blx	r7
 8016384:	3001      	adds	r0, #1
 8016386:	f43f af42 	beq.w	801620e <_printf_float+0xb6>
 801638a:	f04f 0800 	mov.w	r8, #0
 801638e:	f104 091a 	add.w	r9, r4, #26
 8016392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016394:	3b01      	subs	r3, #1
 8016396:	4543      	cmp	r3, r8
 8016398:	dc09      	bgt.n	80163ae <_printf_float+0x256>
 801639a:	6823      	ldr	r3, [r4, #0]
 801639c:	079b      	lsls	r3, r3, #30
 801639e:	f100 8102 	bmi.w	80165a6 <_printf_float+0x44e>
 80163a2:	68e0      	ldr	r0, [r4, #12]
 80163a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163a6:	4298      	cmp	r0, r3
 80163a8:	bfb8      	it	lt
 80163aa:	4618      	movlt	r0, r3
 80163ac:	e731      	b.n	8016212 <_printf_float+0xba>
 80163ae:	2301      	movs	r3, #1
 80163b0:	464a      	mov	r2, r9
 80163b2:	4631      	mov	r1, r6
 80163b4:	4628      	mov	r0, r5
 80163b6:	47b8      	blx	r7
 80163b8:	3001      	adds	r0, #1
 80163ba:	f43f af28 	beq.w	801620e <_printf_float+0xb6>
 80163be:	f108 0801 	add.w	r8, r8, #1
 80163c2:	e7e6      	b.n	8016392 <_printf_float+0x23a>
 80163c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	dc38      	bgt.n	801643c <_printf_float+0x2e4>
 80163ca:	2301      	movs	r3, #1
 80163cc:	4631      	mov	r1, r6
 80163ce:	4628      	mov	r0, r5
 80163d0:	4a19      	ldr	r2, [pc, #100]	; (8016438 <_printf_float+0x2e0>)
 80163d2:	47b8      	blx	r7
 80163d4:	3001      	adds	r0, #1
 80163d6:	f43f af1a 	beq.w	801620e <_printf_float+0xb6>
 80163da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80163de:	4313      	orrs	r3, r2
 80163e0:	d102      	bne.n	80163e8 <_printf_float+0x290>
 80163e2:	6823      	ldr	r3, [r4, #0]
 80163e4:	07d9      	lsls	r1, r3, #31
 80163e6:	d5d8      	bpl.n	801639a <_printf_float+0x242>
 80163e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ec:	4631      	mov	r1, r6
 80163ee:	4628      	mov	r0, r5
 80163f0:	47b8      	blx	r7
 80163f2:	3001      	adds	r0, #1
 80163f4:	f43f af0b 	beq.w	801620e <_printf_float+0xb6>
 80163f8:	f04f 0900 	mov.w	r9, #0
 80163fc:	f104 0a1a 	add.w	sl, r4, #26
 8016400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016402:	425b      	negs	r3, r3
 8016404:	454b      	cmp	r3, r9
 8016406:	dc01      	bgt.n	801640c <_printf_float+0x2b4>
 8016408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801640a:	e794      	b.n	8016336 <_printf_float+0x1de>
 801640c:	2301      	movs	r3, #1
 801640e:	4652      	mov	r2, sl
 8016410:	4631      	mov	r1, r6
 8016412:	4628      	mov	r0, r5
 8016414:	47b8      	blx	r7
 8016416:	3001      	adds	r0, #1
 8016418:	f43f aef9 	beq.w	801620e <_printf_float+0xb6>
 801641c:	f109 0901 	add.w	r9, r9, #1
 8016420:	e7ee      	b.n	8016400 <_printf_float+0x2a8>
 8016422:	bf00      	nop
 8016424:	7fefffff 	.word	0x7fefffff
 8016428:	0801a7d4 	.word	0x0801a7d4
 801642c:	0801a7d8 	.word	0x0801a7d8
 8016430:	0801a7e0 	.word	0x0801a7e0
 8016434:	0801a7dc 	.word	0x0801a7dc
 8016438:	0801a7e4 	.word	0x0801a7e4
 801643c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801643e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016440:	429a      	cmp	r2, r3
 8016442:	bfa8      	it	ge
 8016444:	461a      	movge	r2, r3
 8016446:	2a00      	cmp	r2, #0
 8016448:	4691      	mov	r9, r2
 801644a:	dc37      	bgt.n	80164bc <_printf_float+0x364>
 801644c:	f04f 0b00 	mov.w	fp, #0
 8016450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016454:	f104 021a 	add.w	r2, r4, #26
 8016458:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801645c:	ebaa 0309 	sub.w	r3, sl, r9
 8016460:	455b      	cmp	r3, fp
 8016462:	dc33      	bgt.n	80164cc <_printf_float+0x374>
 8016464:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016468:	429a      	cmp	r2, r3
 801646a:	db3b      	blt.n	80164e4 <_printf_float+0x38c>
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	07da      	lsls	r2, r3, #31
 8016470:	d438      	bmi.n	80164e4 <_printf_float+0x38c>
 8016472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016474:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016476:	eba2 030a 	sub.w	r3, r2, sl
 801647a:	eba2 0901 	sub.w	r9, r2, r1
 801647e:	4599      	cmp	r9, r3
 8016480:	bfa8      	it	ge
 8016482:	4699      	movge	r9, r3
 8016484:	f1b9 0f00 	cmp.w	r9, #0
 8016488:	dc34      	bgt.n	80164f4 <_printf_float+0x39c>
 801648a:	f04f 0800 	mov.w	r8, #0
 801648e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016492:	f104 0a1a 	add.w	sl, r4, #26
 8016496:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801649a:	1a9b      	subs	r3, r3, r2
 801649c:	eba3 0309 	sub.w	r3, r3, r9
 80164a0:	4543      	cmp	r3, r8
 80164a2:	f77f af7a 	ble.w	801639a <_printf_float+0x242>
 80164a6:	2301      	movs	r3, #1
 80164a8:	4652      	mov	r2, sl
 80164aa:	4631      	mov	r1, r6
 80164ac:	4628      	mov	r0, r5
 80164ae:	47b8      	blx	r7
 80164b0:	3001      	adds	r0, #1
 80164b2:	f43f aeac 	beq.w	801620e <_printf_float+0xb6>
 80164b6:	f108 0801 	add.w	r8, r8, #1
 80164ba:	e7ec      	b.n	8016496 <_printf_float+0x33e>
 80164bc:	4613      	mov	r3, r2
 80164be:	4631      	mov	r1, r6
 80164c0:	4642      	mov	r2, r8
 80164c2:	4628      	mov	r0, r5
 80164c4:	47b8      	blx	r7
 80164c6:	3001      	adds	r0, #1
 80164c8:	d1c0      	bne.n	801644c <_printf_float+0x2f4>
 80164ca:	e6a0      	b.n	801620e <_printf_float+0xb6>
 80164cc:	2301      	movs	r3, #1
 80164ce:	4631      	mov	r1, r6
 80164d0:	4628      	mov	r0, r5
 80164d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80164d4:	47b8      	blx	r7
 80164d6:	3001      	adds	r0, #1
 80164d8:	f43f ae99 	beq.w	801620e <_printf_float+0xb6>
 80164dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164de:	f10b 0b01 	add.w	fp, fp, #1
 80164e2:	e7b9      	b.n	8016458 <_printf_float+0x300>
 80164e4:	4631      	mov	r1, r6
 80164e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164ea:	4628      	mov	r0, r5
 80164ec:	47b8      	blx	r7
 80164ee:	3001      	adds	r0, #1
 80164f0:	d1bf      	bne.n	8016472 <_printf_float+0x31a>
 80164f2:	e68c      	b.n	801620e <_printf_float+0xb6>
 80164f4:	464b      	mov	r3, r9
 80164f6:	4631      	mov	r1, r6
 80164f8:	4628      	mov	r0, r5
 80164fa:	eb08 020a 	add.w	r2, r8, sl
 80164fe:	47b8      	blx	r7
 8016500:	3001      	adds	r0, #1
 8016502:	d1c2      	bne.n	801648a <_printf_float+0x332>
 8016504:	e683      	b.n	801620e <_printf_float+0xb6>
 8016506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016508:	2a01      	cmp	r2, #1
 801650a:	dc01      	bgt.n	8016510 <_printf_float+0x3b8>
 801650c:	07db      	lsls	r3, r3, #31
 801650e:	d537      	bpl.n	8016580 <_printf_float+0x428>
 8016510:	2301      	movs	r3, #1
 8016512:	4642      	mov	r2, r8
 8016514:	4631      	mov	r1, r6
 8016516:	4628      	mov	r0, r5
 8016518:	47b8      	blx	r7
 801651a:	3001      	adds	r0, #1
 801651c:	f43f ae77 	beq.w	801620e <_printf_float+0xb6>
 8016520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016524:	4631      	mov	r1, r6
 8016526:	4628      	mov	r0, r5
 8016528:	47b8      	blx	r7
 801652a:	3001      	adds	r0, #1
 801652c:	f43f ae6f 	beq.w	801620e <_printf_float+0xb6>
 8016530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016534:	2200      	movs	r2, #0
 8016536:	2300      	movs	r3, #0
 8016538:	f7ea fa80 	bl	8000a3c <__aeabi_dcmpeq>
 801653c:	b9d8      	cbnz	r0, 8016576 <_printf_float+0x41e>
 801653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016540:	f108 0201 	add.w	r2, r8, #1
 8016544:	3b01      	subs	r3, #1
 8016546:	4631      	mov	r1, r6
 8016548:	4628      	mov	r0, r5
 801654a:	47b8      	blx	r7
 801654c:	3001      	adds	r0, #1
 801654e:	d10e      	bne.n	801656e <_printf_float+0x416>
 8016550:	e65d      	b.n	801620e <_printf_float+0xb6>
 8016552:	2301      	movs	r3, #1
 8016554:	464a      	mov	r2, r9
 8016556:	4631      	mov	r1, r6
 8016558:	4628      	mov	r0, r5
 801655a:	47b8      	blx	r7
 801655c:	3001      	adds	r0, #1
 801655e:	f43f ae56 	beq.w	801620e <_printf_float+0xb6>
 8016562:	f108 0801 	add.w	r8, r8, #1
 8016566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016568:	3b01      	subs	r3, #1
 801656a:	4543      	cmp	r3, r8
 801656c:	dcf1      	bgt.n	8016552 <_printf_float+0x3fa>
 801656e:	4653      	mov	r3, sl
 8016570:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016574:	e6e0      	b.n	8016338 <_printf_float+0x1e0>
 8016576:	f04f 0800 	mov.w	r8, #0
 801657a:	f104 091a 	add.w	r9, r4, #26
 801657e:	e7f2      	b.n	8016566 <_printf_float+0x40e>
 8016580:	2301      	movs	r3, #1
 8016582:	4642      	mov	r2, r8
 8016584:	e7df      	b.n	8016546 <_printf_float+0x3ee>
 8016586:	2301      	movs	r3, #1
 8016588:	464a      	mov	r2, r9
 801658a:	4631      	mov	r1, r6
 801658c:	4628      	mov	r0, r5
 801658e:	47b8      	blx	r7
 8016590:	3001      	adds	r0, #1
 8016592:	f43f ae3c 	beq.w	801620e <_printf_float+0xb6>
 8016596:	f108 0801 	add.w	r8, r8, #1
 801659a:	68e3      	ldr	r3, [r4, #12]
 801659c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801659e:	1a5b      	subs	r3, r3, r1
 80165a0:	4543      	cmp	r3, r8
 80165a2:	dcf0      	bgt.n	8016586 <_printf_float+0x42e>
 80165a4:	e6fd      	b.n	80163a2 <_printf_float+0x24a>
 80165a6:	f04f 0800 	mov.w	r8, #0
 80165aa:	f104 0919 	add.w	r9, r4, #25
 80165ae:	e7f4      	b.n	801659a <_printf_float+0x442>

080165b0 <_printf_common>:
 80165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b4:	4616      	mov	r6, r2
 80165b6:	4699      	mov	r9, r3
 80165b8:	688a      	ldr	r2, [r1, #8]
 80165ba:	690b      	ldr	r3, [r1, #16]
 80165bc:	4607      	mov	r7, r0
 80165be:	4293      	cmp	r3, r2
 80165c0:	bfb8      	it	lt
 80165c2:	4613      	movlt	r3, r2
 80165c4:	6033      	str	r3, [r6, #0]
 80165c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165ca:	460c      	mov	r4, r1
 80165cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165d0:	b10a      	cbz	r2, 80165d6 <_printf_common+0x26>
 80165d2:	3301      	adds	r3, #1
 80165d4:	6033      	str	r3, [r6, #0]
 80165d6:	6823      	ldr	r3, [r4, #0]
 80165d8:	0699      	lsls	r1, r3, #26
 80165da:	bf42      	ittt	mi
 80165dc:	6833      	ldrmi	r3, [r6, #0]
 80165de:	3302      	addmi	r3, #2
 80165e0:	6033      	strmi	r3, [r6, #0]
 80165e2:	6825      	ldr	r5, [r4, #0]
 80165e4:	f015 0506 	ands.w	r5, r5, #6
 80165e8:	d106      	bne.n	80165f8 <_printf_common+0x48>
 80165ea:	f104 0a19 	add.w	sl, r4, #25
 80165ee:	68e3      	ldr	r3, [r4, #12]
 80165f0:	6832      	ldr	r2, [r6, #0]
 80165f2:	1a9b      	subs	r3, r3, r2
 80165f4:	42ab      	cmp	r3, r5
 80165f6:	dc28      	bgt.n	801664a <_printf_common+0x9a>
 80165f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80165fc:	1e13      	subs	r3, r2, #0
 80165fe:	6822      	ldr	r2, [r4, #0]
 8016600:	bf18      	it	ne
 8016602:	2301      	movne	r3, #1
 8016604:	0692      	lsls	r2, r2, #26
 8016606:	d42d      	bmi.n	8016664 <_printf_common+0xb4>
 8016608:	4649      	mov	r1, r9
 801660a:	4638      	mov	r0, r7
 801660c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016610:	47c0      	blx	r8
 8016612:	3001      	adds	r0, #1
 8016614:	d020      	beq.n	8016658 <_printf_common+0xa8>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	68e5      	ldr	r5, [r4, #12]
 801661a:	f003 0306 	and.w	r3, r3, #6
 801661e:	2b04      	cmp	r3, #4
 8016620:	bf18      	it	ne
 8016622:	2500      	movne	r5, #0
 8016624:	6832      	ldr	r2, [r6, #0]
 8016626:	f04f 0600 	mov.w	r6, #0
 801662a:	68a3      	ldr	r3, [r4, #8]
 801662c:	bf08      	it	eq
 801662e:	1aad      	subeq	r5, r5, r2
 8016630:	6922      	ldr	r2, [r4, #16]
 8016632:	bf08      	it	eq
 8016634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016638:	4293      	cmp	r3, r2
 801663a:	bfc4      	itt	gt
 801663c:	1a9b      	subgt	r3, r3, r2
 801663e:	18ed      	addgt	r5, r5, r3
 8016640:	341a      	adds	r4, #26
 8016642:	42b5      	cmp	r5, r6
 8016644:	d11a      	bne.n	801667c <_printf_common+0xcc>
 8016646:	2000      	movs	r0, #0
 8016648:	e008      	b.n	801665c <_printf_common+0xac>
 801664a:	2301      	movs	r3, #1
 801664c:	4652      	mov	r2, sl
 801664e:	4649      	mov	r1, r9
 8016650:	4638      	mov	r0, r7
 8016652:	47c0      	blx	r8
 8016654:	3001      	adds	r0, #1
 8016656:	d103      	bne.n	8016660 <_printf_common+0xb0>
 8016658:	f04f 30ff 	mov.w	r0, #4294967295
 801665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016660:	3501      	adds	r5, #1
 8016662:	e7c4      	b.n	80165ee <_printf_common+0x3e>
 8016664:	2030      	movs	r0, #48	; 0x30
 8016666:	18e1      	adds	r1, r4, r3
 8016668:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801666c:	1c5a      	adds	r2, r3, #1
 801666e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016672:	4422      	add	r2, r4
 8016674:	3302      	adds	r3, #2
 8016676:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801667a:	e7c5      	b.n	8016608 <_printf_common+0x58>
 801667c:	2301      	movs	r3, #1
 801667e:	4622      	mov	r2, r4
 8016680:	4649      	mov	r1, r9
 8016682:	4638      	mov	r0, r7
 8016684:	47c0      	blx	r8
 8016686:	3001      	adds	r0, #1
 8016688:	d0e6      	beq.n	8016658 <_printf_common+0xa8>
 801668a:	3601      	adds	r6, #1
 801668c:	e7d9      	b.n	8016642 <_printf_common+0x92>
	...

08016690 <_printf_i>:
 8016690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016694:	460c      	mov	r4, r1
 8016696:	7e27      	ldrb	r7, [r4, #24]
 8016698:	4691      	mov	r9, r2
 801669a:	2f78      	cmp	r7, #120	; 0x78
 801669c:	4680      	mov	r8, r0
 801669e:	469a      	mov	sl, r3
 80166a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166a6:	d807      	bhi.n	80166b8 <_printf_i+0x28>
 80166a8:	2f62      	cmp	r7, #98	; 0x62
 80166aa:	d80a      	bhi.n	80166c2 <_printf_i+0x32>
 80166ac:	2f00      	cmp	r7, #0
 80166ae:	f000 80d9 	beq.w	8016864 <_printf_i+0x1d4>
 80166b2:	2f58      	cmp	r7, #88	; 0x58
 80166b4:	f000 80a4 	beq.w	8016800 <_printf_i+0x170>
 80166b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80166bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166c0:	e03a      	b.n	8016738 <_printf_i+0xa8>
 80166c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166c6:	2b15      	cmp	r3, #21
 80166c8:	d8f6      	bhi.n	80166b8 <_printf_i+0x28>
 80166ca:	a001      	add	r0, pc, #4	; (adr r0, 80166d0 <_printf_i+0x40>)
 80166cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80166d0:	08016729 	.word	0x08016729
 80166d4:	0801673d 	.word	0x0801673d
 80166d8:	080166b9 	.word	0x080166b9
 80166dc:	080166b9 	.word	0x080166b9
 80166e0:	080166b9 	.word	0x080166b9
 80166e4:	080166b9 	.word	0x080166b9
 80166e8:	0801673d 	.word	0x0801673d
 80166ec:	080166b9 	.word	0x080166b9
 80166f0:	080166b9 	.word	0x080166b9
 80166f4:	080166b9 	.word	0x080166b9
 80166f8:	080166b9 	.word	0x080166b9
 80166fc:	0801684b 	.word	0x0801684b
 8016700:	0801676d 	.word	0x0801676d
 8016704:	0801682d 	.word	0x0801682d
 8016708:	080166b9 	.word	0x080166b9
 801670c:	080166b9 	.word	0x080166b9
 8016710:	0801686d 	.word	0x0801686d
 8016714:	080166b9 	.word	0x080166b9
 8016718:	0801676d 	.word	0x0801676d
 801671c:	080166b9 	.word	0x080166b9
 8016720:	080166b9 	.word	0x080166b9
 8016724:	08016835 	.word	0x08016835
 8016728:	680b      	ldr	r3, [r1, #0]
 801672a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801672e:	1d1a      	adds	r2, r3, #4
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	600a      	str	r2, [r1, #0]
 8016734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016738:	2301      	movs	r3, #1
 801673a:	e0a4      	b.n	8016886 <_printf_i+0x1f6>
 801673c:	6825      	ldr	r5, [r4, #0]
 801673e:	6808      	ldr	r0, [r1, #0]
 8016740:	062e      	lsls	r6, r5, #24
 8016742:	f100 0304 	add.w	r3, r0, #4
 8016746:	d50a      	bpl.n	801675e <_printf_i+0xce>
 8016748:	6805      	ldr	r5, [r0, #0]
 801674a:	600b      	str	r3, [r1, #0]
 801674c:	2d00      	cmp	r5, #0
 801674e:	da03      	bge.n	8016758 <_printf_i+0xc8>
 8016750:	232d      	movs	r3, #45	; 0x2d
 8016752:	426d      	negs	r5, r5
 8016754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016758:	230a      	movs	r3, #10
 801675a:	485e      	ldr	r0, [pc, #376]	; (80168d4 <_printf_i+0x244>)
 801675c:	e019      	b.n	8016792 <_printf_i+0x102>
 801675e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016762:	6805      	ldr	r5, [r0, #0]
 8016764:	600b      	str	r3, [r1, #0]
 8016766:	bf18      	it	ne
 8016768:	b22d      	sxthne	r5, r5
 801676a:	e7ef      	b.n	801674c <_printf_i+0xbc>
 801676c:	680b      	ldr	r3, [r1, #0]
 801676e:	6825      	ldr	r5, [r4, #0]
 8016770:	1d18      	adds	r0, r3, #4
 8016772:	6008      	str	r0, [r1, #0]
 8016774:	0628      	lsls	r0, r5, #24
 8016776:	d501      	bpl.n	801677c <_printf_i+0xec>
 8016778:	681d      	ldr	r5, [r3, #0]
 801677a:	e002      	b.n	8016782 <_printf_i+0xf2>
 801677c:	0669      	lsls	r1, r5, #25
 801677e:	d5fb      	bpl.n	8016778 <_printf_i+0xe8>
 8016780:	881d      	ldrh	r5, [r3, #0]
 8016782:	2f6f      	cmp	r7, #111	; 0x6f
 8016784:	bf0c      	ite	eq
 8016786:	2308      	moveq	r3, #8
 8016788:	230a      	movne	r3, #10
 801678a:	4852      	ldr	r0, [pc, #328]	; (80168d4 <_printf_i+0x244>)
 801678c:	2100      	movs	r1, #0
 801678e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016792:	6866      	ldr	r6, [r4, #4]
 8016794:	2e00      	cmp	r6, #0
 8016796:	bfa8      	it	ge
 8016798:	6821      	ldrge	r1, [r4, #0]
 801679a:	60a6      	str	r6, [r4, #8]
 801679c:	bfa4      	itt	ge
 801679e:	f021 0104 	bicge.w	r1, r1, #4
 80167a2:	6021      	strge	r1, [r4, #0]
 80167a4:	b90d      	cbnz	r5, 80167aa <_printf_i+0x11a>
 80167a6:	2e00      	cmp	r6, #0
 80167a8:	d04d      	beq.n	8016846 <_printf_i+0x1b6>
 80167aa:	4616      	mov	r6, r2
 80167ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80167b0:	fb03 5711 	mls	r7, r3, r1, r5
 80167b4:	5dc7      	ldrb	r7, [r0, r7]
 80167b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167ba:	462f      	mov	r7, r5
 80167bc:	42bb      	cmp	r3, r7
 80167be:	460d      	mov	r5, r1
 80167c0:	d9f4      	bls.n	80167ac <_printf_i+0x11c>
 80167c2:	2b08      	cmp	r3, #8
 80167c4:	d10b      	bne.n	80167de <_printf_i+0x14e>
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	07df      	lsls	r7, r3, #31
 80167ca:	d508      	bpl.n	80167de <_printf_i+0x14e>
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	6861      	ldr	r1, [r4, #4]
 80167d0:	4299      	cmp	r1, r3
 80167d2:	bfde      	ittt	le
 80167d4:	2330      	movle	r3, #48	; 0x30
 80167d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80167da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80167de:	1b92      	subs	r2, r2, r6
 80167e0:	6122      	str	r2, [r4, #16]
 80167e2:	464b      	mov	r3, r9
 80167e4:	4621      	mov	r1, r4
 80167e6:	4640      	mov	r0, r8
 80167e8:	f8cd a000 	str.w	sl, [sp]
 80167ec:	aa03      	add	r2, sp, #12
 80167ee:	f7ff fedf 	bl	80165b0 <_printf_common>
 80167f2:	3001      	adds	r0, #1
 80167f4:	d14c      	bne.n	8016890 <_printf_i+0x200>
 80167f6:	f04f 30ff 	mov.w	r0, #4294967295
 80167fa:	b004      	add	sp, #16
 80167fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016800:	4834      	ldr	r0, [pc, #208]	; (80168d4 <_printf_i+0x244>)
 8016802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016806:	680e      	ldr	r6, [r1, #0]
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	f856 5b04 	ldr.w	r5, [r6], #4
 801680e:	061f      	lsls	r7, r3, #24
 8016810:	600e      	str	r6, [r1, #0]
 8016812:	d514      	bpl.n	801683e <_printf_i+0x1ae>
 8016814:	07d9      	lsls	r1, r3, #31
 8016816:	bf44      	itt	mi
 8016818:	f043 0320 	orrmi.w	r3, r3, #32
 801681c:	6023      	strmi	r3, [r4, #0]
 801681e:	b91d      	cbnz	r5, 8016828 <_printf_i+0x198>
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	f023 0320 	bic.w	r3, r3, #32
 8016826:	6023      	str	r3, [r4, #0]
 8016828:	2310      	movs	r3, #16
 801682a:	e7af      	b.n	801678c <_printf_i+0xfc>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	f043 0320 	orr.w	r3, r3, #32
 8016832:	6023      	str	r3, [r4, #0]
 8016834:	2378      	movs	r3, #120	; 0x78
 8016836:	4828      	ldr	r0, [pc, #160]	; (80168d8 <_printf_i+0x248>)
 8016838:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801683c:	e7e3      	b.n	8016806 <_printf_i+0x176>
 801683e:	065e      	lsls	r6, r3, #25
 8016840:	bf48      	it	mi
 8016842:	b2ad      	uxthmi	r5, r5
 8016844:	e7e6      	b.n	8016814 <_printf_i+0x184>
 8016846:	4616      	mov	r6, r2
 8016848:	e7bb      	b.n	80167c2 <_printf_i+0x132>
 801684a:	680b      	ldr	r3, [r1, #0]
 801684c:	6826      	ldr	r6, [r4, #0]
 801684e:	1d1d      	adds	r5, r3, #4
 8016850:	6960      	ldr	r0, [r4, #20]
 8016852:	600d      	str	r5, [r1, #0]
 8016854:	0635      	lsls	r5, r6, #24
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	d501      	bpl.n	801685e <_printf_i+0x1ce>
 801685a:	6018      	str	r0, [r3, #0]
 801685c:	e002      	b.n	8016864 <_printf_i+0x1d4>
 801685e:	0671      	lsls	r1, r6, #25
 8016860:	d5fb      	bpl.n	801685a <_printf_i+0x1ca>
 8016862:	8018      	strh	r0, [r3, #0]
 8016864:	2300      	movs	r3, #0
 8016866:	4616      	mov	r6, r2
 8016868:	6123      	str	r3, [r4, #16]
 801686a:	e7ba      	b.n	80167e2 <_printf_i+0x152>
 801686c:	680b      	ldr	r3, [r1, #0]
 801686e:	1d1a      	adds	r2, r3, #4
 8016870:	600a      	str	r2, [r1, #0]
 8016872:	681e      	ldr	r6, [r3, #0]
 8016874:	2100      	movs	r1, #0
 8016876:	4630      	mov	r0, r6
 8016878:	6862      	ldr	r2, [r4, #4]
 801687a:	f002 fcb7 	bl	80191ec <memchr>
 801687e:	b108      	cbz	r0, 8016884 <_printf_i+0x1f4>
 8016880:	1b80      	subs	r0, r0, r6
 8016882:	6060      	str	r0, [r4, #4]
 8016884:	6863      	ldr	r3, [r4, #4]
 8016886:	6123      	str	r3, [r4, #16]
 8016888:	2300      	movs	r3, #0
 801688a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801688e:	e7a8      	b.n	80167e2 <_printf_i+0x152>
 8016890:	4632      	mov	r2, r6
 8016892:	4649      	mov	r1, r9
 8016894:	4640      	mov	r0, r8
 8016896:	6923      	ldr	r3, [r4, #16]
 8016898:	47d0      	blx	sl
 801689a:	3001      	adds	r0, #1
 801689c:	d0ab      	beq.n	80167f6 <_printf_i+0x166>
 801689e:	6823      	ldr	r3, [r4, #0]
 80168a0:	079b      	lsls	r3, r3, #30
 80168a2:	d413      	bmi.n	80168cc <_printf_i+0x23c>
 80168a4:	68e0      	ldr	r0, [r4, #12]
 80168a6:	9b03      	ldr	r3, [sp, #12]
 80168a8:	4298      	cmp	r0, r3
 80168aa:	bfb8      	it	lt
 80168ac:	4618      	movlt	r0, r3
 80168ae:	e7a4      	b.n	80167fa <_printf_i+0x16a>
 80168b0:	2301      	movs	r3, #1
 80168b2:	4632      	mov	r2, r6
 80168b4:	4649      	mov	r1, r9
 80168b6:	4640      	mov	r0, r8
 80168b8:	47d0      	blx	sl
 80168ba:	3001      	adds	r0, #1
 80168bc:	d09b      	beq.n	80167f6 <_printf_i+0x166>
 80168be:	3501      	adds	r5, #1
 80168c0:	68e3      	ldr	r3, [r4, #12]
 80168c2:	9903      	ldr	r1, [sp, #12]
 80168c4:	1a5b      	subs	r3, r3, r1
 80168c6:	42ab      	cmp	r3, r5
 80168c8:	dcf2      	bgt.n	80168b0 <_printf_i+0x220>
 80168ca:	e7eb      	b.n	80168a4 <_printf_i+0x214>
 80168cc:	2500      	movs	r5, #0
 80168ce:	f104 0619 	add.w	r6, r4, #25
 80168d2:	e7f5      	b.n	80168c0 <_printf_i+0x230>
 80168d4:	0801a7e6 	.word	0x0801a7e6
 80168d8:	0801a7f7 	.word	0x0801a7f7

080168dc <_scanf_float>:
 80168dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e0:	b087      	sub	sp, #28
 80168e2:	9303      	str	r3, [sp, #12]
 80168e4:	688b      	ldr	r3, [r1, #8]
 80168e6:	4617      	mov	r7, r2
 80168e8:	1e5a      	subs	r2, r3, #1
 80168ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80168ee:	bf85      	ittet	hi
 80168f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80168f4:	195b      	addhi	r3, r3, r5
 80168f6:	2300      	movls	r3, #0
 80168f8:	9302      	strhi	r3, [sp, #8]
 80168fa:	bf88      	it	hi
 80168fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016900:	468b      	mov	fp, r1
 8016902:	f04f 0500 	mov.w	r5, #0
 8016906:	bf8c      	ite	hi
 8016908:	608b      	strhi	r3, [r1, #8]
 801690a:	9302      	strls	r3, [sp, #8]
 801690c:	680b      	ldr	r3, [r1, #0]
 801690e:	4680      	mov	r8, r0
 8016910:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016914:	f84b 3b1c 	str.w	r3, [fp], #28
 8016918:	460c      	mov	r4, r1
 801691a:	465e      	mov	r6, fp
 801691c:	46aa      	mov	sl, r5
 801691e:	46a9      	mov	r9, r5
 8016920:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016924:	9501      	str	r5, [sp, #4]
 8016926:	68a2      	ldr	r2, [r4, #8]
 8016928:	b152      	cbz	r2, 8016940 <_scanf_float+0x64>
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b4e      	cmp	r3, #78	; 0x4e
 8016930:	d864      	bhi.n	80169fc <_scanf_float+0x120>
 8016932:	2b40      	cmp	r3, #64	; 0x40
 8016934:	d83c      	bhi.n	80169b0 <_scanf_float+0xd4>
 8016936:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801693a:	b2c8      	uxtb	r0, r1
 801693c:	280e      	cmp	r0, #14
 801693e:	d93a      	bls.n	80169b6 <_scanf_float+0xda>
 8016940:	f1b9 0f00 	cmp.w	r9, #0
 8016944:	d003      	beq.n	801694e <_scanf_float+0x72>
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801694c:	6023      	str	r3, [r4, #0]
 801694e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016952:	f1ba 0f01 	cmp.w	sl, #1
 8016956:	f200 8113 	bhi.w	8016b80 <_scanf_float+0x2a4>
 801695a:	455e      	cmp	r6, fp
 801695c:	f200 8105 	bhi.w	8016b6a <_scanf_float+0x28e>
 8016960:	2501      	movs	r5, #1
 8016962:	4628      	mov	r0, r5
 8016964:	b007      	add	sp, #28
 8016966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801696e:	2a0d      	cmp	r2, #13
 8016970:	d8e6      	bhi.n	8016940 <_scanf_float+0x64>
 8016972:	a101      	add	r1, pc, #4	; (adr r1, 8016978 <_scanf_float+0x9c>)
 8016974:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016978:	08016ab7 	.word	0x08016ab7
 801697c:	08016941 	.word	0x08016941
 8016980:	08016941 	.word	0x08016941
 8016984:	08016941 	.word	0x08016941
 8016988:	08016b17 	.word	0x08016b17
 801698c:	08016aef 	.word	0x08016aef
 8016990:	08016941 	.word	0x08016941
 8016994:	08016941 	.word	0x08016941
 8016998:	08016ac5 	.word	0x08016ac5
 801699c:	08016941 	.word	0x08016941
 80169a0:	08016941 	.word	0x08016941
 80169a4:	08016941 	.word	0x08016941
 80169a8:	08016941 	.word	0x08016941
 80169ac:	08016a7d 	.word	0x08016a7d
 80169b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80169b4:	e7db      	b.n	801696e <_scanf_float+0x92>
 80169b6:	290e      	cmp	r1, #14
 80169b8:	d8c2      	bhi.n	8016940 <_scanf_float+0x64>
 80169ba:	a001      	add	r0, pc, #4	; (adr r0, 80169c0 <_scanf_float+0xe4>)
 80169bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80169c0:	08016a6f 	.word	0x08016a6f
 80169c4:	08016941 	.word	0x08016941
 80169c8:	08016a6f 	.word	0x08016a6f
 80169cc:	08016b03 	.word	0x08016b03
 80169d0:	08016941 	.word	0x08016941
 80169d4:	08016a1d 	.word	0x08016a1d
 80169d8:	08016a59 	.word	0x08016a59
 80169dc:	08016a59 	.word	0x08016a59
 80169e0:	08016a59 	.word	0x08016a59
 80169e4:	08016a59 	.word	0x08016a59
 80169e8:	08016a59 	.word	0x08016a59
 80169ec:	08016a59 	.word	0x08016a59
 80169f0:	08016a59 	.word	0x08016a59
 80169f4:	08016a59 	.word	0x08016a59
 80169f8:	08016a59 	.word	0x08016a59
 80169fc:	2b6e      	cmp	r3, #110	; 0x6e
 80169fe:	d809      	bhi.n	8016a14 <_scanf_float+0x138>
 8016a00:	2b60      	cmp	r3, #96	; 0x60
 8016a02:	d8b2      	bhi.n	801696a <_scanf_float+0x8e>
 8016a04:	2b54      	cmp	r3, #84	; 0x54
 8016a06:	d077      	beq.n	8016af8 <_scanf_float+0x21c>
 8016a08:	2b59      	cmp	r3, #89	; 0x59
 8016a0a:	d199      	bne.n	8016940 <_scanf_float+0x64>
 8016a0c:	2d07      	cmp	r5, #7
 8016a0e:	d197      	bne.n	8016940 <_scanf_float+0x64>
 8016a10:	2508      	movs	r5, #8
 8016a12:	e029      	b.n	8016a68 <_scanf_float+0x18c>
 8016a14:	2b74      	cmp	r3, #116	; 0x74
 8016a16:	d06f      	beq.n	8016af8 <_scanf_float+0x21c>
 8016a18:	2b79      	cmp	r3, #121	; 0x79
 8016a1a:	e7f6      	b.n	8016a0a <_scanf_float+0x12e>
 8016a1c:	6821      	ldr	r1, [r4, #0]
 8016a1e:	05c8      	lsls	r0, r1, #23
 8016a20:	d51a      	bpl.n	8016a58 <_scanf_float+0x17c>
 8016a22:	9b02      	ldr	r3, [sp, #8]
 8016a24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a28:	6021      	str	r1, [r4, #0]
 8016a2a:	f109 0901 	add.w	r9, r9, #1
 8016a2e:	b11b      	cbz	r3, 8016a38 <_scanf_float+0x15c>
 8016a30:	3b01      	subs	r3, #1
 8016a32:	3201      	adds	r2, #1
 8016a34:	9302      	str	r3, [sp, #8]
 8016a36:	60a2      	str	r2, [r4, #8]
 8016a38:	68a3      	ldr	r3, [r4, #8]
 8016a3a:	3b01      	subs	r3, #1
 8016a3c:	60a3      	str	r3, [r4, #8]
 8016a3e:	6923      	ldr	r3, [r4, #16]
 8016a40:	3301      	adds	r3, #1
 8016a42:	6123      	str	r3, [r4, #16]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	3b01      	subs	r3, #1
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	607b      	str	r3, [r7, #4]
 8016a4c:	f340 8084 	ble.w	8016b58 <_scanf_float+0x27c>
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	3301      	adds	r3, #1
 8016a54:	603b      	str	r3, [r7, #0]
 8016a56:	e766      	b.n	8016926 <_scanf_float+0x4a>
 8016a58:	eb1a 0f05 	cmn.w	sl, r5
 8016a5c:	f47f af70 	bne.w	8016940 <_scanf_float+0x64>
 8016a60:	6822      	ldr	r2, [r4, #0]
 8016a62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016a66:	6022      	str	r2, [r4, #0]
 8016a68:	f806 3b01 	strb.w	r3, [r6], #1
 8016a6c:	e7e4      	b.n	8016a38 <_scanf_float+0x15c>
 8016a6e:	6822      	ldr	r2, [r4, #0]
 8016a70:	0610      	lsls	r0, r2, #24
 8016a72:	f57f af65 	bpl.w	8016940 <_scanf_float+0x64>
 8016a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016a7a:	e7f4      	b.n	8016a66 <_scanf_float+0x18a>
 8016a7c:	f1ba 0f00 	cmp.w	sl, #0
 8016a80:	d10e      	bne.n	8016aa0 <_scanf_float+0x1c4>
 8016a82:	f1b9 0f00 	cmp.w	r9, #0
 8016a86:	d10e      	bne.n	8016aa6 <_scanf_float+0x1ca>
 8016a88:	6822      	ldr	r2, [r4, #0]
 8016a8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016a8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016a92:	d108      	bne.n	8016aa6 <_scanf_float+0x1ca>
 8016a94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016a98:	f04f 0a01 	mov.w	sl, #1
 8016a9c:	6022      	str	r2, [r4, #0]
 8016a9e:	e7e3      	b.n	8016a68 <_scanf_float+0x18c>
 8016aa0:	f1ba 0f02 	cmp.w	sl, #2
 8016aa4:	d055      	beq.n	8016b52 <_scanf_float+0x276>
 8016aa6:	2d01      	cmp	r5, #1
 8016aa8:	d002      	beq.n	8016ab0 <_scanf_float+0x1d4>
 8016aaa:	2d04      	cmp	r5, #4
 8016aac:	f47f af48 	bne.w	8016940 <_scanf_float+0x64>
 8016ab0:	3501      	adds	r5, #1
 8016ab2:	b2ed      	uxtb	r5, r5
 8016ab4:	e7d8      	b.n	8016a68 <_scanf_float+0x18c>
 8016ab6:	f1ba 0f01 	cmp.w	sl, #1
 8016aba:	f47f af41 	bne.w	8016940 <_scanf_float+0x64>
 8016abe:	f04f 0a02 	mov.w	sl, #2
 8016ac2:	e7d1      	b.n	8016a68 <_scanf_float+0x18c>
 8016ac4:	b97d      	cbnz	r5, 8016ae6 <_scanf_float+0x20a>
 8016ac6:	f1b9 0f00 	cmp.w	r9, #0
 8016aca:	f47f af3c 	bne.w	8016946 <_scanf_float+0x6a>
 8016ace:	6822      	ldr	r2, [r4, #0]
 8016ad0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016ad4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016ad8:	f47f af39 	bne.w	801694e <_scanf_float+0x72>
 8016adc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016ae0:	2501      	movs	r5, #1
 8016ae2:	6022      	str	r2, [r4, #0]
 8016ae4:	e7c0      	b.n	8016a68 <_scanf_float+0x18c>
 8016ae6:	2d03      	cmp	r5, #3
 8016ae8:	d0e2      	beq.n	8016ab0 <_scanf_float+0x1d4>
 8016aea:	2d05      	cmp	r5, #5
 8016aec:	e7de      	b.n	8016aac <_scanf_float+0x1d0>
 8016aee:	2d02      	cmp	r5, #2
 8016af0:	f47f af26 	bne.w	8016940 <_scanf_float+0x64>
 8016af4:	2503      	movs	r5, #3
 8016af6:	e7b7      	b.n	8016a68 <_scanf_float+0x18c>
 8016af8:	2d06      	cmp	r5, #6
 8016afa:	f47f af21 	bne.w	8016940 <_scanf_float+0x64>
 8016afe:	2507      	movs	r5, #7
 8016b00:	e7b2      	b.n	8016a68 <_scanf_float+0x18c>
 8016b02:	6822      	ldr	r2, [r4, #0]
 8016b04:	0591      	lsls	r1, r2, #22
 8016b06:	f57f af1b 	bpl.w	8016940 <_scanf_float+0x64>
 8016b0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016b0e:	6022      	str	r2, [r4, #0]
 8016b10:	f8cd 9004 	str.w	r9, [sp, #4]
 8016b14:	e7a8      	b.n	8016a68 <_scanf_float+0x18c>
 8016b16:	6822      	ldr	r2, [r4, #0]
 8016b18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016b1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016b20:	d006      	beq.n	8016b30 <_scanf_float+0x254>
 8016b22:	0550      	lsls	r0, r2, #21
 8016b24:	f57f af0c 	bpl.w	8016940 <_scanf_float+0x64>
 8016b28:	f1b9 0f00 	cmp.w	r9, #0
 8016b2c:	f43f af0f 	beq.w	801694e <_scanf_float+0x72>
 8016b30:	0591      	lsls	r1, r2, #22
 8016b32:	bf58      	it	pl
 8016b34:	9901      	ldrpl	r1, [sp, #4]
 8016b36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b3a:	bf58      	it	pl
 8016b3c:	eba9 0101 	subpl.w	r1, r9, r1
 8016b40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016b44:	f04f 0900 	mov.w	r9, #0
 8016b48:	bf58      	it	pl
 8016b4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016b4e:	6022      	str	r2, [r4, #0]
 8016b50:	e78a      	b.n	8016a68 <_scanf_float+0x18c>
 8016b52:	f04f 0a03 	mov.w	sl, #3
 8016b56:	e787      	b.n	8016a68 <_scanf_float+0x18c>
 8016b58:	4639      	mov	r1, r7
 8016b5a:	4640      	mov	r0, r8
 8016b5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b60:	4798      	blx	r3
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f43f aedf 	beq.w	8016926 <_scanf_float+0x4a>
 8016b68:	e6ea      	b.n	8016940 <_scanf_float+0x64>
 8016b6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b6e:	463a      	mov	r2, r7
 8016b70:	4640      	mov	r0, r8
 8016b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b76:	4798      	blx	r3
 8016b78:	6923      	ldr	r3, [r4, #16]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	6123      	str	r3, [r4, #16]
 8016b7e:	e6ec      	b.n	801695a <_scanf_float+0x7e>
 8016b80:	1e6b      	subs	r3, r5, #1
 8016b82:	2b06      	cmp	r3, #6
 8016b84:	d825      	bhi.n	8016bd2 <_scanf_float+0x2f6>
 8016b86:	2d02      	cmp	r5, #2
 8016b88:	d836      	bhi.n	8016bf8 <_scanf_float+0x31c>
 8016b8a:	455e      	cmp	r6, fp
 8016b8c:	f67f aee8 	bls.w	8016960 <_scanf_float+0x84>
 8016b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b94:	463a      	mov	r2, r7
 8016b96:	4640      	mov	r0, r8
 8016b98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b9c:	4798      	blx	r3
 8016b9e:	6923      	ldr	r3, [r4, #16]
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	6123      	str	r3, [r4, #16]
 8016ba4:	e7f1      	b.n	8016b8a <_scanf_float+0x2ae>
 8016ba6:	9802      	ldr	r0, [sp, #8]
 8016ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016bb0:	463a      	mov	r2, r7
 8016bb2:	9002      	str	r0, [sp, #8]
 8016bb4:	4640      	mov	r0, r8
 8016bb6:	4798      	blx	r3
 8016bb8:	6923      	ldr	r3, [r4, #16]
 8016bba:	3b01      	subs	r3, #1
 8016bbc:	6123      	str	r3, [r4, #16]
 8016bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016bc2:	fa5f fa8a 	uxtb.w	sl, sl
 8016bc6:	f1ba 0f02 	cmp.w	sl, #2
 8016bca:	d1ec      	bne.n	8016ba6 <_scanf_float+0x2ca>
 8016bcc:	3d03      	subs	r5, #3
 8016bce:	b2ed      	uxtb	r5, r5
 8016bd0:	1b76      	subs	r6, r6, r5
 8016bd2:	6823      	ldr	r3, [r4, #0]
 8016bd4:	05da      	lsls	r2, r3, #23
 8016bd6:	d52f      	bpl.n	8016c38 <_scanf_float+0x35c>
 8016bd8:	055b      	lsls	r3, r3, #21
 8016bda:	d510      	bpl.n	8016bfe <_scanf_float+0x322>
 8016bdc:	455e      	cmp	r6, fp
 8016bde:	f67f aebf 	bls.w	8016960 <_scanf_float+0x84>
 8016be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016be6:	463a      	mov	r2, r7
 8016be8:	4640      	mov	r0, r8
 8016bea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016bee:	4798      	blx	r3
 8016bf0:	6923      	ldr	r3, [r4, #16]
 8016bf2:	3b01      	subs	r3, #1
 8016bf4:	6123      	str	r3, [r4, #16]
 8016bf6:	e7f1      	b.n	8016bdc <_scanf_float+0x300>
 8016bf8:	46aa      	mov	sl, r5
 8016bfa:	9602      	str	r6, [sp, #8]
 8016bfc:	e7df      	b.n	8016bbe <_scanf_float+0x2e2>
 8016bfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016c02:	6923      	ldr	r3, [r4, #16]
 8016c04:	2965      	cmp	r1, #101	; 0x65
 8016c06:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016c0e:	6123      	str	r3, [r4, #16]
 8016c10:	d00c      	beq.n	8016c2c <_scanf_float+0x350>
 8016c12:	2945      	cmp	r1, #69	; 0x45
 8016c14:	d00a      	beq.n	8016c2c <_scanf_float+0x350>
 8016c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c1a:	463a      	mov	r2, r7
 8016c1c:	4640      	mov	r0, r8
 8016c1e:	4798      	blx	r3
 8016c20:	6923      	ldr	r3, [r4, #16]
 8016c22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016c26:	3b01      	subs	r3, #1
 8016c28:	1eb5      	subs	r5, r6, #2
 8016c2a:	6123      	str	r3, [r4, #16]
 8016c2c:	463a      	mov	r2, r7
 8016c2e:	4640      	mov	r0, r8
 8016c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c34:	4798      	blx	r3
 8016c36:	462e      	mov	r6, r5
 8016c38:	6825      	ldr	r5, [r4, #0]
 8016c3a:	f015 0510 	ands.w	r5, r5, #16
 8016c3e:	d159      	bne.n	8016cf4 <_scanf_float+0x418>
 8016c40:	7035      	strb	r5, [r6, #0]
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c4c:	d11c      	bne.n	8016c88 <_scanf_float+0x3ac>
 8016c4e:	9b01      	ldr	r3, [sp, #4]
 8016c50:	454b      	cmp	r3, r9
 8016c52:	eba3 0209 	sub.w	r2, r3, r9
 8016c56:	d124      	bne.n	8016ca2 <_scanf_float+0x3c6>
 8016c58:	2200      	movs	r2, #0
 8016c5a:	4659      	mov	r1, fp
 8016c5c:	4640      	mov	r0, r8
 8016c5e:	f000 ff47 	bl	8017af0 <_strtod_r>
 8016c62:	f8d4 c000 	ldr.w	ip, [r4]
 8016c66:	9b03      	ldr	r3, [sp, #12]
 8016c68:	f01c 0f02 	tst.w	ip, #2
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	460f      	mov	r7, r1
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	d021      	beq.n	8016cb8 <_scanf_float+0x3dc>
 8016c74:	9903      	ldr	r1, [sp, #12]
 8016c76:	1d1a      	adds	r2, r3, #4
 8016c78:	600a      	str	r2, [r1, #0]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	e9c3 6700 	strd	r6, r7, [r3]
 8016c80:	68e3      	ldr	r3, [r4, #12]
 8016c82:	3301      	adds	r3, #1
 8016c84:	60e3      	str	r3, [r4, #12]
 8016c86:	e66c      	b.n	8016962 <_scanf_float+0x86>
 8016c88:	9b04      	ldr	r3, [sp, #16]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d0e4      	beq.n	8016c58 <_scanf_float+0x37c>
 8016c8e:	9905      	ldr	r1, [sp, #20]
 8016c90:	230a      	movs	r3, #10
 8016c92:	462a      	mov	r2, r5
 8016c94:	4640      	mov	r0, r8
 8016c96:	3101      	adds	r1, #1
 8016c98:	f000 ffb6 	bl	8017c08 <_strtol_r>
 8016c9c:	9b04      	ldr	r3, [sp, #16]
 8016c9e:	9e05      	ldr	r6, [sp, #20]
 8016ca0:	1ac2      	subs	r2, r0, r3
 8016ca2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ca6:	429e      	cmp	r6, r3
 8016ca8:	bf28      	it	cs
 8016caa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016cae:	4630      	mov	r0, r6
 8016cb0:	4911      	ldr	r1, [pc, #68]	; (8016cf8 <_scanf_float+0x41c>)
 8016cb2:	f000 f8a3 	bl	8016dfc <siprintf>
 8016cb6:	e7cf      	b.n	8016c58 <_scanf_float+0x37c>
 8016cb8:	f01c 0f04 	tst.w	ip, #4
 8016cbc:	f103 0e04 	add.w	lr, r3, #4
 8016cc0:	d003      	beq.n	8016cca <_scanf_float+0x3ee>
 8016cc2:	9903      	ldr	r1, [sp, #12]
 8016cc4:	f8c1 e000 	str.w	lr, [r1]
 8016cc8:	e7d7      	b.n	8016c7a <_scanf_float+0x39e>
 8016cca:	9a03      	ldr	r2, [sp, #12]
 8016ccc:	f8c2 e000 	str.w	lr, [r2]
 8016cd0:	f8d3 8000 	ldr.w	r8, [r3]
 8016cd4:	4602      	mov	r2, r0
 8016cd6:	460b      	mov	r3, r1
 8016cd8:	f7e9 fee2 	bl	8000aa0 <__aeabi_dcmpun>
 8016cdc:	b128      	cbz	r0, 8016cea <_scanf_float+0x40e>
 8016cde:	4807      	ldr	r0, [pc, #28]	; (8016cfc <_scanf_float+0x420>)
 8016ce0:	f000 f888 	bl	8016df4 <nanf>
 8016ce4:	f8c8 0000 	str.w	r0, [r8]
 8016ce8:	e7ca      	b.n	8016c80 <_scanf_float+0x3a4>
 8016cea:	4630      	mov	r0, r6
 8016cec:	4639      	mov	r1, r7
 8016cee:	f7e9 ff35 	bl	8000b5c <__aeabi_d2f>
 8016cf2:	e7f7      	b.n	8016ce4 <_scanf_float+0x408>
 8016cf4:	2500      	movs	r5, #0
 8016cf6:	e634      	b.n	8016962 <_scanf_float+0x86>
 8016cf8:	0801a808 	.word	0x0801a808
 8016cfc:	0801ac20 	.word	0x0801ac20

08016d00 <cleanup_glue>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	460c      	mov	r4, r1
 8016d04:	6809      	ldr	r1, [r1, #0]
 8016d06:	4605      	mov	r5, r0
 8016d08:	b109      	cbz	r1, 8016d0e <cleanup_glue+0xe>
 8016d0a:	f7ff fff9 	bl	8016d00 <cleanup_glue>
 8016d0e:	4621      	mov	r1, r4
 8016d10:	4628      	mov	r0, r5
 8016d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d16:	f7ff b8db 	b.w	8015ed0 <_free_r>
	...

08016d1c <_reclaim_reent>:
 8016d1c:	4b2c      	ldr	r3, [pc, #176]	; (8016dd0 <_reclaim_reent+0xb4>)
 8016d1e:	b570      	push	{r4, r5, r6, lr}
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	4604      	mov	r4, r0
 8016d24:	4283      	cmp	r3, r0
 8016d26:	d051      	beq.n	8016dcc <_reclaim_reent+0xb0>
 8016d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016d2a:	b143      	cbz	r3, 8016d3e <_reclaim_reent+0x22>
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d14a      	bne.n	8016dc8 <_reclaim_reent+0xac>
 8016d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d34:	6819      	ldr	r1, [r3, #0]
 8016d36:	b111      	cbz	r1, 8016d3e <_reclaim_reent+0x22>
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f7ff f8c9 	bl	8015ed0 <_free_r>
 8016d3e:	6961      	ldr	r1, [r4, #20]
 8016d40:	b111      	cbz	r1, 8016d48 <_reclaim_reent+0x2c>
 8016d42:	4620      	mov	r0, r4
 8016d44:	f7ff f8c4 	bl	8015ed0 <_free_r>
 8016d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d4a:	b111      	cbz	r1, 8016d52 <_reclaim_reent+0x36>
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f7ff f8bf 	bl	8015ed0 <_free_r>
 8016d52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d54:	b111      	cbz	r1, 8016d5c <_reclaim_reent+0x40>
 8016d56:	4620      	mov	r0, r4
 8016d58:	f7ff f8ba 	bl	8015ed0 <_free_r>
 8016d5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016d5e:	b111      	cbz	r1, 8016d66 <_reclaim_reent+0x4a>
 8016d60:	4620      	mov	r0, r4
 8016d62:	f7ff f8b5 	bl	8015ed0 <_free_r>
 8016d66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016d68:	b111      	cbz	r1, 8016d70 <_reclaim_reent+0x54>
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	f7ff f8b0 	bl	8015ed0 <_free_r>
 8016d70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016d72:	b111      	cbz	r1, 8016d7a <_reclaim_reent+0x5e>
 8016d74:	4620      	mov	r0, r4
 8016d76:	f7ff f8ab 	bl	8015ed0 <_free_r>
 8016d7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016d7c:	b111      	cbz	r1, 8016d84 <_reclaim_reent+0x68>
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f7ff f8a6 	bl	8015ed0 <_free_r>
 8016d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d86:	b111      	cbz	r1, 8016d8e <_reclaim_reent+0x72>
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f7ff f8a1 	bl	8015ed0 <_free_r>
 8016d8e:	69a3      	ldr	r3, [r4, #24]
 8016d90:	b1e3      	cbz	r3, 8016dcc <_reclaim_reent+0xb0>
 8016d92:	4620      	mov	r0, r4
 8016d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d96:	4798      	blx	r3
 8016d98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016d9a:	b1b9      	cbz	r1, 8016dcc <_reclaim_reent+0xb0>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da2:	f7ff bfad 	b.w	8016d00 <cleanup_glue>
 8016da6:	5949      	ldr	r1, [r1, r5]
 8016da8:	b941      	cbnz	r1, 8016dbc <_reclaim_reent+0xa0>
 8016daa:	3504      	adds	r5, #4
 8016dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dae:	2d80      	cmp	r5, #128	; 0x80
 8016db0:	68d9      	ldr	r1, [r3, #12]
 8016db2:	d1f8      	bne.n	8016da6 <_reclaim_reent+0x8a>
 8016db4:	4620      	mov	r0, r4
 8016db6:	f7ff f88b 	bl	8015ed0 <_free_r>
 8016dba:	e7ba      	b.n	8016d32 <_reclaim_reent+0x16>
 8016dbc:	680e      	ldr	r6, [r1, #0]
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f7ff f886 	bl	8015ed0 <_free_r>
 8016dc4:	4631      	mov	r1, r6
 8016dc6:	e7ef      	b.n	8016da8 <_reclaim_reent+0x8c>
 8016dc8:	2500      	movs	r5, #0
 8016dca:	e7ef      	b.n	8016dac <_reclaim_reent+0x90>
 8016dcc:	bd70      	pop	{r4, r5, r6, pc}
 8016dce:	bf00      	nop
 8016dd0:	20000290 	.word	0x20000290

08016dd4 <_sbrk_r>:
 8016dd4:	b538      	push	{r3, r4, r5, lr}
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	4d05      	ldr	r5, [pc, #20]	; (8016df0 <_sbrk_r+0x1c>)
 8016dda:	4604      	mov	r4, r0
 8016ddc:	4608      	mov	r0, r1
 8016dde:	602b      	str	r3, [r5, #0]
 8016de0:	f7ee ff4e 	bl	8005c80 <_sbrk>
 8016de4:	1c43      	adds	r3, r0, #1
 8016de6:	d102      	bne.n	8016dee <_sbrk_r+0x1a>
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	b103      	cbz	r3, 8016dee <_sbrk_r+0x1a>
 8016dec:	6023      	str	r3, [r4, #0]
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	2000e604 	.word	0x2000e604

08016df4 <nanf>:
 8016df4:	4800      	ldr	r0, [pc, #0]	; (8016df8 <nanf+0x4>)
 8016df6:	4770      	bx	lr
 8016df8:	7fc00000 	.word	0x7fc00000

08016dfc <siprintf>:
 8016dfc:	b40e      	push	{r1, r2, r3}
 8016dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e02:	b500      	push	{lr}
 8016e04:	b09c      	sub	sp, #112	; 0x70
 8016e06:	ab1d      	add	r3, sp, #116	; 0x74
 8016e08:	9002      	str	r0, [sp, #8]
 8016e0a:	9006      	str	r0, [sp, #24]
 8016e0c:	9107      	str	r1, [sp, #28]
 8016e0e:	9104      	str	r1, [sp, #16]
 8016e10:	4808      	ldr	r0, [pc, #32]	; (8016e34 <siprintf+0x38>)
 8016e12:	4909      	ldr	r1, [pc, #36]	; (8016e38 <siprintf+0x3c>)
 8016e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e18:	9105      	str	r1, [sp, #20]
 8016e1a:	6800      	ldr	r0, [r0, #0]
 8016e1c:	a902      	add	r1, sp, #8
 8016e1e:	9301      	str	r3, [sp, #4]
 8016e20:	f002 ff20 	bl	8019c64 <_svfiprintf_r>
 8016e24:	2200      	movs	r2, #0
 8016e26:	9b02      	ldr	r3, [sp, #8]
 8016e28:	701a      	strb	r2, [r3, #0]
 8016e2a:	b01c      	add	sp, #112	; 0x70
 8016e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e30:	b003      	add	sp, #12
 8016e32:	4770      	bx	lr
 8016e34:	20000290 	.word	0x20000290
 8016e38:	ffff0208 	.word	0xffff0208

08016e3c <__sread>:
 8016e3c:	b510      	push	{r4, lr}
 8016e3e:	460c      	mov	r4, r1
 8016e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e44:	f003 f80e 	bl	8019e64 <_read_r>
 8016e48:	2800      	cmp	r0, #0
 8016e4a:	bfab      	itete	ge
 8016e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8016e50:	181b      	addge	r3, r3, r0
 8016e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e56:	bfac      	ite	ge
 8016e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e5a:	81a3      	strhlt	r3, [r4, #12]
 8016e5c:	bd10      	pop	{r4, pc}

08016e5e <__swrite>:
 8016e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e62:	461f      	mov	r7, r3
 8016e64:	898b      	ldrh	r3, [r1, #12]
 8016e66:	4605      	mov	r5, r0
 8016e68:	05db      	lsls	r3, r3, #23
 8016e6a:	460c      	mov	r4, r1
 8016e6c:	4616      	mov	r6, r2
 8016e6e:	d505      	bpl.n	8016e7c <__swrite+0x1e>
 8016e70:	2302      	movs	r3, #2
 8016e72:	2200      	movs	r2, #0
 8016e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e78:	f002 f994 	bl	80191a4 <_lseek_r>
 8016e7c:	89a3      	ldrh	r3, [r4, #12]
 8016e7e:	4632      	mov	r2, r6
 8016e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e84:	81a3      	strh	r3, [r4, #12]
 8016e86:	4628      	mov	r0, r5
 8016e88:	463b      	mov	r3, r7
 8016e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e92:	f000 bebb 	b.w	8017c0c <_write_r>

08016e96 <__sseek>:
 8016e96:	b510      	push	{r4, lr}
 8016e98:	460c      	mov	r4, r1
 8016e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e9e:	f002 f981 	bl	80191a4 <_lseek_r>
 8016ea2:	1c43      	adds	r3, r0, #1
 8016ea4:	89a3      	ldrh	r3, [r4, #12]
 8016ea6:	bf15      	itete	ne
 8016ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016eb2:	81a3      	strheq	r3, [r4, #12]
 8016eb4:	bf18      	it	ne
 8016eb6:	81a3      	strhne	r3, [r4, #12]
 8016eb8:	bd10      	pop	{r4, pc}

08016eba <__sclose>:
 8016eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ebe:	f000 beb7 	b.w	8017c30 <_close_r>

08016ec2 <sulp>:
 8016ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec6:	460f      	mov	r7, r1
 8016ec8:	4690      	mov	r8, r2
 8016eca:	f002 fd19 	bl	8019900 <__ulp>
 8016ece:	4604      	mov	r4, r0
 8016ed0:	460d      	mov	r5, r1
 8016ed2:	f1b8 0f00 	cmp.w	r8, #0
 8016ed6:	d011      	beq.n	8016efc <sulp+0x3a>
 8016ed8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8016edc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	dd0b      	ble.n	8016efc <sulp+0x3a>
 8016ee4:	2400      	movs	r4, #0
 8016ee6:	051b      	lsls	r3, r3, #20
 8016ee8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016eec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016ef0:	4622      	mov	r2, r4
 8016ef2:	462b      	mov	r3, r5
 8016ef4:	f7e9 fb3a 	bl	800056c <__aeabi_dmul>
 8016ef8:	4604      	mov	r4, r0
 8016efa:	460d      	mov	r5, r1
 8016efc:	4620      	mov	r0, r4
 8016efe:	4629      	mov	r1, r5
 8016f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f04:	0000      	movs	r0, r0
	...

08016f08 <_strtod_l>:
 8016f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f0c:	469b      	mov	fp, r3
 8016f0e:	2300      	movs	r3, #0
 8016f10:	b0a1      	sub	sp, #132	; 0x84
 8016f12:	931c      	str	r3, [sp, #112]	; 0x70
 8016f14:	4ba1      	ldr	r3, [pc, #644]	; (801719c <_strtod_l+0x294>)
 8016f16:	4682      	mov	sl, r0
 8016f18:	681f      	ldr	r7, [r3, #0]
 8016f1a:	460e      	mov	r6, r1
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f20:	f7e9 f960 	bl	80001e4 <strlen>
 8016f24:	f04f 0800 	mov.w	r8, #0
 8016f28:	4604      	mov	r4, r0
 8016f2a:	f04f 0900 	mov.w	r9, #0
 8016f2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8016f30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f32:	781a      	ldrb	r2, [r3, #0]
 8016f34:	2a2b      	cmp	r2, #43	; 0x2b
 8016f36:	d04c      	beq.n	8016fd2 <_strtod_l+0xca>
 8016f38:	d83a      	bhi.n	8016fb0 <_strtod_l+0xa8>
 8016f3a:	2a0d      	cmp	r2, #13
 8016f3c:	d833      	bhi.n	8016fa6 <_strtod_l+0x9e>
 8016f3e:	2a08      	cmp	r2, #8
 8016f40:	d833      	bhi.n	8016faa <_strtod_l+0xa2>
 8016f42:	2a00      	cmp	r2, #0
 8016f44:	d03d      	beq.n	8016fc2 <_strtod_l+0xba>
 8016f46:	2300      	movs	r3, #0
 8016f48:	930c      	str	r3, [sp, #48]	; 0x30
 8016f4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016f4c:	782b      	ldrb	r3, [r5, #0]
 8016f4e:	2b30      	cmp	r3, #48	; 0x30
 8016f50:	f040 80af 	bne.w	80170b2 <_strtod_l+0x1aa>
 8016f54:	786b      	ldrb	r3, [r5, #1]
 8016f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f5a:	2b58      	cmp	r3, #88	; 0x58
 8016f5c:	d16c      	bne.n	8017038 <_strtod_l+0x130>
 8016f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f60:	4650      	mov	r0, sl
 8016f62:	9301      	str	r3, [sp, #4]
 8016f64:	ab1c      	add	r3, sp, #112	; 0x70
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	4a8d      	ldr	r2, [pc, #564]	; (80171a0 <_strtod_l+0x298>)
 8016f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8016f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8016f70:	a91b      	add	r1, sp, #108	; 0x6c
 8016f72:	f001 fe15 	bl	8018ba0 <__gethex>
 8016f76:	f010 0607 	ands.w	r6, r0, #7
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	d005      	beq.n	8016f8a <_strtod_l+0x82>
 8016f7e:	2e06      	cmp	r6, #6
 8016f80:	d129      	bne.n	8016fd6 <_strtod_l+0xce>
 8016f82:	2300      	movs	r3, #0
 8016f84:	3501      	adds	r5, #1
 8016f86:	951b      	str	r5, [sp, #108]	; 0x6c
 8016f88:	930c      	str	r3, [sp, #48]	; 0x30
 8016f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f040 8596 	bne.w	8017abe <_strtod_l+0xbb6>
 8016f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f94:	b1d3      	cbz	r3, 8016fcc <_strtod_l+0xc4>
 8016f96:	4642      	mov	r2, r8
 8016f98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016f9c:	4610      	mov	r0, r2
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	b021      	add	sp, #132	; 0x84
 8016fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa6:	2a20      	cmp	r2, #32
 8016fa8:	d1cd      	bne.n	8016f46 <_strtod_l+0x3e>
 8016faa:	3301      	adds	r3, #1
 8016fac:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fae:	e7bf      	b.n	8016f30 <_strtod_l+0x28>
 8016fb0:	2a2d      	cmp	r2, #45	; 0x2d
 8016fb2:	d1c8      	bne.n	8016f46 <_strtod_l+0x3e>
 8016fb4:	2201      	movs	r2, #1
 8016fb6:	920c      	str	r2, [sp, #48]	; 0x30
 8016fb8:	1c5a      	adds	r2, r3, #1
 8016fba:	921b      	str	r2, [sp, #108]	; 0x6c
 8016fbc:	785b      	ldrb	r3, [r3, #1]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d1c3      	bne.n	8016f4a <_strtod_l+0x42>
 8016fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	f040 8577 	bne.w	8017aba <_strtod_l+0xbb2>
 8016fcc:	4642      	mov	r2, r8
 8016fce:	464b      	mov	r3, r9
 8016fd0:	e7e4      	b.n	8016f9c <_strtod_l+0x94>
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	e7ef      	b.n	8016fb6 <_strtod_l+0xae>
 8016fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016fd8:	b13a      	cbz	r2, 8016fea <_strtod_l+0xe2>
 8016fda:	2135      	movs	r1, #53	; 0x35
 8016fdc:	a81e      	add	r0, sp, #120	; 0x78
 8016fde:	f002 fd93 	bl	8019b08 <__copybits>
 8016fe2:	4650      	mov	r0, sl
 8016fe4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fe6:	f002 f95b 	bl	80192a0 <_Bfree>
 8016fea:	3e01      	subs	r6, #1
 8016fec:	2e05      	cmp	r6, #5
 8016fee:	d807      	bhi.n	8017000 <_strtod_l+0xf8>
 8016ff0:	e8df f006 	tbb	[pc, r6]
 8016ff4:	1d180b0e 	.word	0x1d180b0e
 8016ff8:	030e      	.short	0x030e
 8016ffa:	f04f 0900 	mov.w	r9, #0
 8016ffe:	46c8      	mov	r8, r9
 8017000:	0721      	lsls	r1, r4, #28
 8017002:	d5c2      	bpl.n	8016f8a <_strtod_l+0x82>
 8017004:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017008:	e7bf      	b.n	8016f8a <_strtod_l+0x82>
 801700a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 801700e:	e7f7      	b.n	8017000 <_strtod_l+0xf8>
 8017010:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017012:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8017016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801701a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801701e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017022:	e7ed      	b.n	8017000 <_strtod_l+0xf8>
 8017024:	f04f 0800 	mov.w	r8, #0
 8017028:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80171a4 <_strtod_l+0x29c>
 801702c:	e7e8      	b.n	8017000 <_strtod_l+0xf8>
 801702e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017032:	f04f 38ff 	mov.w	r8, #4294967295
 8017036:	e7e3      	b.n	8017000 <_strtod_l+0xf8>
 8017038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801703a:	1c5a      	adds	r2, r3, #1
 801703c:	921b      	str	r2, [sp, #108]	; 0x6c
 801703e:	785b      	ldrb	r3, [r3, #1]
 8017040:	2b30      	cmp	r3, #48	; 0x30
 8017042:	d0f9      	beq.n	8017038 <_strtod_l+0x130>
 8017044:	2b00      	cmp	r3, #0
 8017046:	d0a0      	beq.n	8016f8a <_strtod_l+0x82>
 8017048:	2301      	movs	r3, #1
 801704a:	9307      	str	r3, [sp, #28]
 801704c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801704e:	220a      	movs	r2, #10
 8017050:	9308      	str	r3, [sp, #32]
 8017052:	2300      	movs	r3, #0
 8017054:	469b      	mov	fp, r3
 8017056:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801705a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801705c:	7805      	ldrb	r5, [r0, #0]
 801705e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8017062:	b2d9      	uxtb	r1, r3
 8017064:	2909      	cmp	r1, #9
 8017066:	d926      	bls.n	80170b6 <_strtod_l+0x1ae>
 8017068:	4622      	mov	r2, r4
 801706a:	4639      	mov	r1, r7
 801706c:	f002 ff12 	bl	8019e94 <strncmp>
 8017070:	2800      	cmp	r0, #0
 8017072:	d032      	beq.n	80170da <_strtod_l+0x1d2>
 8017074:	2000      	movs	r0, #0
 8017076:	462b      	mov	r3, r5
 8017078:	465c      	mov	r4, fp
 801707a:	4602      	mov	r2, r0
 801707c:	9004      	str	r0, [sp, #16]
 801707e:	2b65      	cmp	r3, #101	; 0x65
 8017080:	d001      	beq.n	8017086 <_strtod_l+0x17e>
 8017082:	2b45      	cmp	r3, #69	; 0x45
 8017084:	d113      	bne.n	80170ae <_strtod_l+0x1a6>
 8017086:	b91c      	cbnz	r4, 8017090 <_strtod_l+0x188>
 8017088:	9b07      	ldr	r3, [sp, #28]
 801708a:	4303      	orrs	r3, r0
 801708c:	d099      	beq.n	8016fc2 <_strtod_l+0xba>
 801708e:	2400      	movs	r4, #0
 8017090:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017092:	1c73      	adds	r3, r6, #1
 8017094:	931b      	str	r3, [sp, #108]	; 0x6c
 8017096:	7873      	ldrb	r3, [r6, #1]
 8017098:	2b2b      	cmp	r3, #43	; 0x2b
 801709a:	d078      	beq.n	801718e <_strtod_l+0x286>
 801709c:	2b2d      	cmp	r3, #45	; 0x2d
 801709e:	d07b      	beq.n	8017198 <_strtod_l+0x290>
 80170a0:	2700      	movs	r7, #0
 80170a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80170a6:	2909      	cmp	r1, #9
 80170a8:	f240 8082 	bls.w	80171b0 <_strtod_l+0x2a8>
 80170ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80170ae:	2500      	movs	r5, #0
 80170b0:	e09e      	b.n	80171f0 <_strtod_l+0x2e8>
 80170b2:	2300      	movs	r3, #0
 80170b4:	e7c9      	b.n	801704a <_strtod_l+0x142>
 80170b6:	f1bb 0f08 	cmp.w	fp, #8
 80170ba:	bfd5      	itete	le
 80170bc:	9906      	ldrle	r1, [sp, #24]
 80170be:	9905      	ldrgt	r1, [sp, #20]
 80170c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80170c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80170c8:	f100 0001 	add.w	r0, r0, #1
 80170cc:	bfd4      	ite	le
 80170ce:	9306      	strle	r3, [sp, #24]
 80170d0:	9305      	strgt	r3, [sp, #20]
 80170d2:	f10b 0b01 	add.w	fp, fp, #1
 80170d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80170d8:	e7bf      	b.n	801705a <_strtod_l+0x152>
 80170da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170dc:	191a      	adds	r2, r3, r4
 80170de:	921b      	str	r2, [sp, #108]	; 0x6c
 80170e0:	5d1b      	ldrb	r3, [r3, r4]
 80170e2:	f1bb 0f00 	cmp.w	fp, #0
 80170e6:	d036      	beq.n	8017156 <_strtod_l+0x24e>
 80170e8:	465c      	mov	r4, fp
 80170ea:	9004      	str	r0, [sp, #16]
 80170ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80170f0:	2a09      	cmp	r2, #9
 80170f2:	d912      	bls.n	801711a <_strtod_l+0x212>
 80170f4:	2201      	movs	r2, #1
 80170f6:	e7c2      	b.n	801707e <_strtod_l+0x176>
 80170f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170fa:	3001      	adds	r0, #1
 80170fc:	1c5a      	adds	r2, r3, #1
 80170fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8017100:	785b      	ldrb	r3, [r3, #1]
 8017102:	2b30      	cmp	r3, #48	; 0x30
 8017104:	d0f8      	beq.n	80170f8 <_strtod_l+0x1f0>
 8017106:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801710a:	2a08      	cmp	r2, #8
 801710c:	f200 84dc 	bhi.w	8017ac8 <_strtod_l+0xbc0>
 8017110:	9004      	str	r0, [sp, #16]
 8017112:	2000      	movs	r0, #0
 8017114:	4604      	mov	r4, r0
 8017116:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017118:	9208      	str	r2, [sp, #32]
 801711a:	3b30      	subs	r3, #48	; 0x30
 801711c:	f100 0201 	add.w	r2, r0, #1
 8017120:	d013      	beq.n	801714a <_strtod_l+0x242>
 8017122:	9904      	ldr	r1, [sp, #16]
 8017124:	1905      	adds	r5, r0, r4
 8017126:	4411      	add	r1, r2
 8017128:	9104      	str	r1, [sp, #16]
 801712a:	4622      	mov	r2, r4
 801712c:	210a      	movs	r1, #10
 801712e:	42aa      	cmp	r2, r5
 8017130:	d113      	bne.n	801715a <_strtod_l+0x252>
 8017132:	1822      	adds	r2, r4, r0
 8017134:	2a08      	cmp	r2, #8
 8017136:	f104 0401 	add.w	r4, r4, #1
 801713a:	4404      	add	r4, r0
 801713c:	dc1b      	bgt.n	8017176 <_strtod_l+0x26e>
 801713e:	220a      	movs	r2, #10
 8017140:	9906      	ldr	r1, [sp, #24]
 8017142:	fb02 3301 	mla	r3, r2, r1, r3
 8017146:	9306      	str	r3, [sp, #24]
 8017148:	2200      	movs	r2, #0
 801714a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801714c:	4610      	mov	r0, r2
 801714e:	1c59      	adds	r1, r3, #1
 8017150:	911b      	str	r1, [sp, #108]	; 0x6c
 8017152:	785b      	ldrb	r3, [r3, #1]
 8017154:	e7ca      	b.n	80170ec <_strtod_l+0x1e4>
 8017156:	4658      	mov	r0, fp
 8017158:	e7d3      	b.n	8017102 <_strtod_l+0x1fa>
 801715a:	2a08      	cmp	r2, #8
 801715c:	dc04      	bgt.n	8017168 <_strtod_l+0x260>
 801715e:	9f06      	ldr	r7, [sp, #24]
 8017160:	434f      	muls	r7, r1
 8017162:	9706      	str	r7, [sp, #24]
 8017164:	3201      	adds	r2, #1
 8017166:	e7e2      	b.n	801712e <_strtod_l+0x226>
 8017168:	1c57      	adds	r7, r2, #1
 801716a:	2f10      	cmp	r7, #16
 801716c:	bfde      	ittt	le
 801716e:	9f05      	ldrle	r7, [sp, #20]
 8017170:	434f      	mulle	r7, r1
 8017172:	9705      	strle	r7, [sp, #20]
 8017174:	e7f6      	b.n	8017164 <_strtod_l+0x25c>
 8017176:	2c10      	cmp	r4, #16
 8017178:	bfdf      	itttt	le
 801717a:	220a      	movle	r2, #10
 801717c:	9905      	ldrle	r1, [sp, #20]
 801717e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017182:	9305      	strle	r3, [sp, #20]
 8017184:	e7e0      	b.n	8017148 <_strtod_l+0x240>
 8017186:	2300      	movs	r3, #0
 8017188:	2201      	movs	r2, #1
 801718a:	9304      	str	r3, [sp, #16]
 801718c:	e77c      	b.n	8017088 <_strtod_l+0x180>
 801718e:	2700      	movs	r7, #0
 8017190:	1cb3      	adds	r3, r6, #2
 8017192:	931b      	str	r3, [sp, #108]	; 0x6c
 8017194:	78b3      	ldrb	r3, [r6, #2]
 8017196:	e784      	b.n	80170a2 <_strtod_l+0x19a>
 8017198:	2701      	movs	r7, #1
 801719a:	e7f9      	b.n	8017190 <_strtod_l+0x288>
 801719c:	0801aa60 	.word	0x0801aa60
 80171a0:	0801a810 	.word	0x0801a810
 80171a4:	7ff00000 	.word	0x7ff00000
 80171a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171aa:	1c59      	adds	r1, r3, #1
 80171ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80171ae:	785b      	ldrb	r3, [r3, #1]
 80171b0:	2b30      	cmp	r3, #48	; 0x30
 80171b2:	d0f9      	beq.n	80171a8 <_strtod_l+0x2a0>
 80171b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80171b8:	2908      	cmp	r1, #8
 80171ba:	f63f af78 	bhi.w	80170ae <_strtod_l+0x1a6>
 80171be:	f04f 0e0a 	mov.w	lr, #10
 80171c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80171c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171c8:	9309      	str	r3, [sp, #36]	; 0x24
 80171ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171cc:	1c59      	adds	r1, r3, #1
 80171ce:	911b      	str	r1, [sp, #108]	; 0x6c
 80171d0:	785b      	ldrb	r3, [r3, #1]
 80171d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80171d6:	2d09      	cmp	r5, #9
 80171d8:	d935      	bls.n	8017246 <_strtod_l+0x33e>
 80171da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80171dc:	1b49      	subs	r1, r1, r5
 80171de:	2908      	cmp	r1, #8
 80171e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80171e4:	dc02      	bgt.n	80171ec <_strtod_l+0x2e4>
 80171e6:	4565      	cmp	r5, ip
 80171e8:	bfa8      	it	ge
 80171ea:	4665      	movge	r5, ip
 80171ec:	b107      	cbz	r7, 80171f0 <_strtod_l+0x2e8>
 80171ee:	426d      	negs	r5, r5
 80171f0:	2c00      	cmp	r4, #0
 80171f2:	d14c      	bne.n	801728e <_strtod_l+0x386>
 80171f4:	9907      	ldr	r1, [sp, #28]
 80171f6:	4301      	orrs	r1, r0
 80171f8:	f47f aec7 	bne.w	8016f8a <_strtod_l+0x82>
 80171fc:	2a00      	cmp	r2, #0
 80171fe:	f47f aee0 	bne.w	8016fc2 <_strtod_l+0xba>
 8017202:	2b69      	cmp	r3, #105	; 0x69
 8017204:	d026      	beq.n	8017254 <_strtod_l+0x34c>
 8017206:	dc23      	bgt.n	8017250 <_strtod_l+0x348>
 8017208:	2b49      	cmp	r3, #73	; 0x49
 801720a:	d023      	beq.n	8017254 <_strtod_l+0x34c>
 801720c:	2b4e      	cmp	r3, #78	; 0x4e
 801720e:	f47f aed8 	bne.w	8016fc2 <_strtod_l+0xba>
 8017212:	499c      	ldr	r1, [pc, #624]	; (8017484 <_strtod_l+0x57c>)
 8017214:	a81b      	add	r0, sp, #108	; 0x6c
 8017216:	f001 ff11 	bl	801903c <__match>
 801721a:	2800      	cmp	r0, #0
 801721c:	f43f aed1 	beq.w	8016fc2 <_strtod_l+0xba>
 8017220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2b28      	cmp	r3, #40	; 0x28
 8017226:	d12c      	bne.n	8017282 <_strtod_l+0x37a>
 8017228:	4997      	ldr	r1, [pc, #604]	; (8017488 <_strtod_l+0x580>)
 801722a:	aa1e      	add	r2, sp, #120	; 0x78
 801722c:	a81b      	add	r0, sp, #108	; 0x6c
 801722e:	f001 ff19 	bl	8019064 <__hexnan>
 8017232:	2805      	cmp	r0, #5
 8017234:	d125      	bne.n	8017282 <_strtod_l+0x37a>
 8017236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017238:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801723c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017240:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017244:	e6a1      	b.n	8016f8a <_strtod_l+0x82>
 8017246:	fb0e 3c0c 	mla	ip, lr, ip, r3
 801724a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801724e:	e7bc      	b.n	80171ca <_strtod_l+0x2c2>
 8017250:	2b6e      	cmp	r3, #110	; 0x6e
 8017252:	e7dc      	b.n	801720e <_strtod_l+0x306>
 8017254:	498d      	ldr	r1, [pc, #564]	; (801748c <_strtod_l+0x584>)
 8017256:	a81b      	add	r0, sp, #108	; 0x6c
 8017258:	f001 fef0 	bl	801903c <__match>
 801725c:	2800      	cmp	r0, #0
 801725e:	f43f aeb0 	beq.w	8016fc2 <_strtod_l+0xba>
 8017262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017264:	498a      	ldr	r1, [pc, #552]	; (8017490 <_strtod_l+0x588>)
 8017266:	3b01      	subs	r3, #1
 8017268:	a81b      	add	r0, sp, #108	; 0x6c
 801726a:	931b      	str	r3, [sp, #108]	; 0x6c
 801726c:	f001 fee6 	bl	801903c <__match>
 8017270:	b910      	cbnz	r0, 8017278 <_strtod_l+0x370>
 8017272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017274:	3301      	adds	r3, #1
 8017276:	931b      	str	r3, [sp, #108]	; 0x6c
 8017278:	f04f 0800 	mov.w	r8, #0
 801727c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80174a0 <_strtod_l+0x598>
 8017280:	e683      	b.n	8016f8a <_strtod_l+0x82>
 8017282:	4884      	ldr	r0, [pc, #528]	; (8017494 <_strtod_l+0x58c>)
 8017284:	f002 fe00 	bl	8019e88 <nan>
 8017288:	4680      	mov	r8, r0
 801728a:	4689      	mov	r9, r1
 801728c:	e67d      	b.n	8016f8a <_strtod_l+0x82>
 801728e:	9b04      	ldr	r3, [sp, #16]
 8017290:	f1bb 0f00 	cmp.w	fp, #0
 8017294:	bf08      	it	eq
 8017296:	46a3      	moveq	fp, r4
 8017298:	1aeb      	subs	r3, r5, r3
 801729a:	2c10      	cmp	r4, #16
 801729c:	9806      	ldr	r0, [sp, #24]
 801729e:	4626      	mov	r6, r4
 80172a0:	9307      	str	r3, [sp, #28]
 80172a2:	bfa8      	it	ge
 80172a4:	2610      	movge	r6, #16
 80172a6:	f7e9 f8e7 	bl	8000478 <__aeabi_ui2d>
 80172aa:	2c09      	cmp	r4, #9
 80172ac:	4680      	mov	r8, r0
 80172ae:	4689      	mov	r9, r1
 80172b0:	dd13      	ble.n	80172da <_strtod_l+0x3d2>
 80172b2:	4b79      	ldr	r3, [pc, #484]	; (8017498 <_strtod_l+0x590>)
 80172b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80172b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80172bc:	f7e9 f956 	bl	800056c <__aeabi_dmul>
 80172c0:	4680      	mov	r8, r0
 80172c2:	9805      	ldr	r0, [sp, #20]
 80172c4:	4689      	mov	r9, r1
 80172c6:	f7e9 f8d7 	bl	8000478 <__aeabi_ui2d>
 80172ca:	4602      	mov	r2, r0
 80172cc:	460b      	mov	r3, r1
 80172ce:	4640      	mov	r0, r8
 80172d0:	4649      	mov	r1, r9
 80172d2:	f7e8 ff95 	bl	8000200 <__adddf3>
 80172d6:	4680      	mov	r8, r0
 80172d8:	4689      	mov	r9, r1
 80172da:	2c0f      	cmp	r4, #15
 80172dc:	dc36      	bgt.n	801734c <_strtod_l+0x444>
 80172de:	9b07      	ldr	r3, [sp, #28]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	f43f ae52 	beq.w	8016f8a <_strtod_l+0x82>
 80172e6:	dd22      	ble.n	801732e <_strtod_l+0x426>
 80172e8:	2b16      	cmp	r3, #22
 80172ea:	dc09      	bgt.n	8017300 <_strtod_l+0x3f8>
 80172ec:	4c6a      	ldr	r4, [pc, #424]	; (8017498 <_strtod_l+0x590>)
 80172ee:	4642      	mov	r2, r8
 80172f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80172f4:	464b      	mov	r3, r9
 80172f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80172fa:	f7e9 f937 	bl	800056c <__aeabi_dmul>
 80172fe:	e7c3      	b.n	8017288 <_strtod_l+0x380>
 8017300:	9a07      	ldr	r2, [sp, #28]
 8017302:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017306:	4293      	cmp	r3, r2
 8017308:	db20      	blt.n	801734c <_strtod_l+0x444>
 801730a:	4d63      	ldr	r5, [pc, #396]	; (8017498 <_strtod_l+0x590>)
 801730c:	f1c4 040f 	rsb	r4, r4, #15
 8017310:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017314:	4642      	mov	r2, r8
 8017316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801731a:	464b      	mov	r3, r9
 801731c:	f7e9 f926 	bl	800056c <__aeabi_dmul>
 8017320:	9b07      	ldr	r3, [sp, #28]
 8017322:	1b1c      	subs	r4, r3, r4
 8017324:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017328:	e9d5 2300 	ldrd	r2, r3, [r5]
 801732c:	e7e5      	b.n	80172fa <_strtod_l+0x3f2>
 801732e:	9b07      	ldr	r3, [sp, #28]
 8017330:	3316      	adds	r3, #22
 8017332:	db0b      	blt.n	801734c <_strtod_l+0x444>
 8017334:	9b04      	ldr	r3, [sp, #16]
 8017336:	4a58      	ldr	r2, [pc, #352]	; (8017498 <_strtod_l+0x590>)
 8017338:	1b5d      	subs	r5, r3, r5
 801733a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801733e:	4640      	mov	r0, r8
 8017340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017344:	4649      	mov	r1, r9
 8017346:	f7e9 fa3b 	bl	80007c0 <__aeabi_ddiv>
 801734a:	e79d      	b.n	8017288 <_strtod_l+0x380>
 801734c:	9b07      	ldr	r3, [sp, #28]
 801734e:	1ba6      	subs	r6, r4, r6
 8017350:	441e      	add	r6, r3
 8017352:	2e00      	cmp	r6, #0
 8017354:	dd71      	ble.n	801743a <_strtod_l+0x532>
 8017356:	f016 030f 	ands.w	r3, r6, #15
 801735a:	d00a      	beq.n	8017372 <_strtod_l+0x46a>
 801735c:	494e      	ldr	r1, [pc, #312]	; (8017498 <_strtod_l+0x590>)
 801735e:	4642      	mov	r2, r8
 8017360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017368:	464b      	mov	r3, r9
 801736a:	f7e9 f8ff 	bl	800056c <__aeabi_dmul>
 801736e:	4680      	mov	r8, r0
 8017370:	4689      	mov	r9, r1
 8017372:	f036 060f 	bics.w	r6, r6, #15
 8017376:	d050      	beq.n	801741a <_strtod_l+0x512>
 8017378:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801737c:	dd27      	ble.n	80173ce <_strtod_l+0x4c6>
 801737e:	f04f 0b00 	mov.w	fp, #0
 8017382:	f8cd b010 	str.w	fp, [sp, #16]
 8017386:	f8cd b020 	str.w	fp, [sp, #32]
 801738a:	f8cd b018 	str.w	fp, [sp, #24]
 801738e:	2322      	movs	r3, #34	; 0x22
 8017390:	f04f 0800 	mov.w	r8, #0
 8017394:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80174a0 <_strtod_l+0x598>
 8017398:	f8ca 3000 	str.w	r3, [sl]
 801739c:	9b08      	ldr	r3, [sp, #32]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f43f adf3 	beq.w	8016f8a <_strtod_l+0x82>
 80173a4:	4650      	mov	r0, sl
 80173a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80173a8:	f001 ff7a 	bl	80192a0 <_Bfree>
 80173ac:	4650      	mov	r0, sl
 80173ae:	9906      	ldr	r1, [sp, #24]
 80173b0:	f001 ff76 	bl	80192a0 <_Bfree>
 80173b4:	4650      	mov	r0, sl
 80173b6:	9904      	ldr	r1, [sp, #16]
 80173b8:	f001 ff72 	bl	80192a0 <_Bfree>
 80173bc:	4650      	mov	r0, sl
 80173be:	9908      	ldr	r1, [sp, #32]
 80173c0:	f001 ff6e 	bl	80192a0 <_Bfree>
 80173c4:	4659      	mov	r1, fp
 80173c6:	4650      	mov	r0, sl
 80173c8:	f001 ff6a 	bl	80192a0 <_Bfree>
 80173cc:	e5dd      	b.n	8016f8a <_strtod_l+0x82>
 80173ce:	2300      	movs	r3, #0
 80173d0:	4640      	mov	r0, r8
 80173d2:	4649      	mov	r1, r9
 80173d4:	461f      	mov	r7, r3
 80173d6:	1136      	asrs	r6, r6, #4
 80173d8:	2e01      	cmp	r6, #1
 80173da:	dc21      	bgt.n	8017420 <_strtod_l+0x518>
 80173dc:	b10b      	cbz	r3, 80173e2 <_strtod_l+0x4da>
 80173de:	4680      	mov	r8, r0
 80173e0:	4689      	mov	r9, r1
 80173e2:	4b2e      	ldr	r3, [pc, #184]	; (801749c <_strtod_l+0x594>)
 80173e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80173e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80173ec:	4642      	mov	r2, r8
 80173ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80173f2:	464b      	mov	r3, r9
 80173f4:	f7e9 f8ba 	bl	800056c <__aeabi_dmul>
 80173f8:	4b29      	ldr	r3, [pc, #164]	; (80174a0 <_strtod_l+0x598>)
 80173fa:	460a      	mov	r2, r1
 80173fc:	400b      	ands	r3, r1
 80173fe:	4929      	ldr	r1, [pc, #164]	; (80174a4 <_strtod_l+0x59c>)
 8017400:	4680      	mov	r8, r0
 8017402:	428b      	cmp	r3, r1
 8017404:	d8bb      	bhi.n	801737e <_strtod_l+0x476>
 8017406:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801740a:	428b      	cmp	r3, r1
 801740c:	bf86      	itte	hi
 801740e:	f04f 38ff 	movhi.w	r8, #4294967295
 8017412:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80174a8 <_strtod_l+0x5a0>
 8017416:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801741a:	2300      	movs	r3, #0
 801741c:	9305      	str	r3, [sp, #20]
 801741e:	e07e      	b.n	801751e <_strtod_l+0x616>
 8017420:	07f2      	lsls	r2, r6, #31
 8017422:	d507      	bpl.n	8017434 <_strtod_l+0x52c>
 8017424:	4b1d      	ldr	r3, [pc, #116]	; (801749c <_strtod_l+0x594>)
 8017426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742e:	f7e9 f89d 	bl	800056c <__aeabi_dmul>
 8017432:	2301      	movs	r3, #1
 8017434:	3701      	adds	r7, #1
 8017436:	1076      	asrs	r6, r6, #1
 8017438:	e7ce      	b.n	80173d8 <_strtod_l+0x4d0>
 801743a:	d0ee      	beq.n	801741a <_strtod_l+0x512>
 801743c:	4276      	negs	r6, r6
 801743e:	f016 020f 	ands.w	r2, r6, #15
 8017442:	d00a      	beq.n	801745a <_strtod_l+0x552>
 8017444:	4b14      	ldr	r3, [pc, #80]	; (8017498 <_strtod_l+0x590>)
 8017446:	4640      	mov	r0, r8
 8017448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801744c:	4649      	mov	r1, r9
 801744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017452:	f7e9 f9b5 	bl	80007c0 <__aeabi_ddiv>
 8017456:	4680      	mov	r8, r0
 8017458:	4689      	mov	r9, r1
 801745a:	1136      	asrs	r6, r6, #4
 801745c:	d0dd      	beq.n	801741a <_strtod_l+0x512>
 801745e:	2e1f      	cmp	r6, #31
 8017460:	dd24      	ble.n	80174ac <_strtod_l+0x5a4>
 8017462:	f04f 0b00 	mov.w	fp, #0
 8017466:	f8cd b010 	str.w	fp, [sp, #16]
 801746a:	f8cd b020 	str.w	fp, [sp, #32]
 801746e:	f8cd b018 	str.w	fp, [sp, #24]
 8017472:	2322      	movs	r3, #34	; 0x22
 8017474:	f04f 0800 	mov.w	r8, #0
 8017478:	f04f 0900 	mov.w	r9, #0
 801747c:	f8ca 3000 	str.w	r3, [sl]
 8017480:	e78c      	b.n	801739c <_strtod_l+0x494>
 8017482:	bf00      	nop
 8017484:	0801a7e1 	.word	0x0801a7e1
 8017488:	0801a824 	.word	0x0801a824
 801748c:	0801a7d9 	.word	0x0801a7d9
 8017490:	0801a964 	.word	0x0801a964
 8017494:	0801ac20 	.word	0x0801ac20
 8017498:	0801ab00 	.word	0x0801ab00
 801749c:	0801aad8 	.word	0x0801aad8
 80174a0:	7ff00000 	.word	0x7ff00000
 80174a4:	7ca00000 	.word	0x7ca00000
 80174a8:	7fefffff 	.word	0x7fefffff
 80174ac:	f016 0310 	ands.w	r3, r6, #16
 80174b0:	bf18      	it	ne
 80174b2:	236a      	movne	r3, #106	; 0x6a
 80174b4:	4640      	mov	r0, r8
 80174b6:	9305      	str	r3, [sp, #20]
 80174b8:	4649      	mov	r1, r9
 80174ba:	2300      	movs	r3, #0
 80174bc:	4fb2      	ldr	r7, [pc, #712]	; (8017788 <_strtod_l+0x880>)
 80174be:	07f2      	lsls	r2, r6, #31
 80174c0:	d504      	bpl.n	80174cc <_strtod_l+0x5c4>
 80174c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174c6:	f7e9 f851 	bl	800056c <__aeabi_dmul>
 80174ca:	2301      	movs	r3, #1
 80174cc:	1076      	asrs	r6, r6, #1
 80174ce:	f107 0708 	add.w	r7, r7, #8
 80174d2:	d1f4      	bne.n	80174be <_strtod_l+0x5b6>
 80174d4:	b10b      	cbz	r3, 80174da <_strtod_l+0x5d2>
 80174d6:	4680      	mov	r8, r0
 80174d8:	4689      	mov	r9, r1
 80174da:	9b05      	ldr	r3, [sp, #20]
 80174dc:	b1bb      	cbz	r3, 801750e <_strtod_l+0x606>
 80174de:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80174e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	4649      	mov	r1, r9
 80174ea:	dd10      	ble.n	801750e <_strtod_l+0x606>
 80174ec:	2b1f      	cmp	r3, #31
 80174ee:	f340 812b 	ble.w	8017748 <_strtod_l+0x840>
 80174f2:	2b34      	cmp	r3, #52	; 0x34
 80174f4:	bfd8      	it	le
 80174f6:	f04f 32ff 	movle.w	r2, #4294967295
 80174fa:	f04f 0800 	mov.w	r8, #0
 80174fe:	bfcf      	iteee	gt
 8017500:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017504:	3b20      	suble	r3, #32
 8017506:	fa02 f303 	lslle.w	r3, r2, r3
 801750a:	ea03 0901 	andle.w	r9, r3, r1
 801750e:	2200      	movs	r2, #0
 8017510:	2300      	movs	r3, #0
 8017512:	4640      	mov	r0, r8
 8017514:	4649      	mov	r1, r9
 8017516:	f7e9 fa91 	bl	8000a3c <__aeabi_dcmpeq>
 801751a:	2800      	cmp	r0, #0
 801751c:	d1a1      	bne.n	8017462 <_strtod_l+0x55a>
 801751e:	9b06      	ldr	r3, [sp, #24]
 8017520:	465a      	mov	r2, fp
 8017522:	9300      	str	r3, [sp, #0]
 8017524:	4650      	mov	r0, sl
 8017526:	4623      	mov	r3, r4
 8017528:	9908      	ldr	r1, [sp, #32]
 801752a:	f001 ff25 	bl	8019378 <__s2b>
 801752e:	9008      	str	r0, [sp, #32]
 8017530:	2800      	cmp	r0, #0
 8017532:	f43f af24 	beq.w	801737e <_strtod_l+0x476>
 8017536:	9b04      	ldr	r3, [sp, #16]
 8017538:	f04f 0b00 	mov.w	fp, #0
 801753c:	1b5d      	subs	r5, r3, r5
 801753e:	9b07      	ldr	r3, [sp, #28]
 8017540:	f8cd b010 	str.w	fp, [sp, #16]
 8017544:	2b00      	cmp	r3, #0
 8017546:	bfb4      	ite	lt
 8017548:	462b      	movlt	r3, r5
 801754a:	2300      	movge	r3, #0
 801754c:	930e      	str	r3, [sp, #56]	; 0x38
 801754e:	9b07      	ldr	r3, [sp, #28]
 8017550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017554:	9316      	str	r3, [sp, #88]	; 0x58
 8017556:	9b08      	ldr	r3, [sp, #32]
 8017558:	4650      	mov	r0, sl
 801755a:	6859      	ldr	r1, [r3, #4]
 801755c:	f001 fe60 	bl	8019220 <_Balloc>
 8017560:	9006      	str	r0, [sp, #24]
 8017562:	2800      	cmp	r0, #0
 8017564:	f43f af13 	beq.w	801738e <_strtod_l+0x486>
 8017568:	9b08      	ldr	r3, [sp, #32]
 801756a:	300c      	adds	r0, #12
 801756c:	691a      	ldr	r2, [r3, #16]
 801756e:	f103 010c 	add.w	r1, r3, #12
 8017572:	3202      	adds	r2, #2
 8017574:	0092      	lsls	r2, r2, #2
 8017576:	f7fe fc95 	bl	8015ea4 <memcpy>
 801757a:	ab1e      	add	r3, sp, #120	; 0x78
 801757c:	9301      	str	r3, [sp, #4]
 801757e:	ab1d      	add	r3, sp, #116	; 0x74
 8017580:	9300      	str	r3, [sp, #0]
 8017582:	4642      	mov	r2, r8
 8017584:	464b      	mov	r3, r9
 8017586:	4650      	mov	r0, sl
 8017588:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801758c:	f002 fa32 	bl	80199f4 <__d2b>
 8017590:	901c      	str	r0, [sp, #112]	; 0x70
 8017592:	2800      	cmp	r0, #0
 8017594:	f43f aefb 	beq.w	801738e <_strtod_l+0x486>
 8017598:	2101      	movs	r1, #1
 801759a:	4650      	mov	r0, sl
 801759c:	f001 ff84 	bl	80194a8 <__i2b>
 80175a0:	4603      	mov	r3, r0
 80175a2:	9004      	str	r0, [sp, #16]
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f43f aef2 	beq.w	801738e <_strtod_l+0x486>
 80175aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80175ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80175ae:	2d00      	cmp	r5, #0
 80175b0:	bfab      	itete	ge
 80175b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80175b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80175b6:	18ee      	addge	r6, r5, r3
 80175b8:	1b5c      	sublt	r4, r3, r5
 80175ba:	9b05      	ldr	r3, [sp, #20]
 80175bc:	bfa8      	it	ge
 80175be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80175c0:	eba5 0503 	sub.w	r5, r5, r3
 80175c4:	4415      	add	r5, r2
 80175c6:	4b71      	ldr	r3, [pc, #452]	; (801778c <_strtod_l+0x884>)
 80175c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80175cc:	bfb8      	it	lt
 80175ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80175d0:	429d      	cmp	r5, r3
 80175d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80175d6:	f280 80c9 	bge.w	801776c <_strtod_l+0x864>
 80175da:	1b5b      	subs	r3, r3, r5
 80175dc:	2b1f      	cmp	r3, #31
 80175de:	f04f 0701 	mov.w	r7, #1
 80175e2:	eba2 0203 	sub.w	r2, r2, r3
 80175e6:	f300 80b6 	bgt.w	8017756 <_strtod_l+0x84e>
 80175ea:	2500      	movs	r5, #0
 80175ec:	fa07 f303 	lsl.w	r3, r7, r3
 80175f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80175f2:	18b7      	adds	r7, r6, r2
 80175f4:	9b05      	ldr	r3, [sp, #20]
 80175f6:	42be      	cmp	r6, r7
 80175f8:	4414      	add	r4, r2
 80175fa:	441c      	add	r4, r3
 80175fc:	4633      	mov	r3, r6
 80175fe:	bfa8      	it	ge
 8017600:	463b      	movge	r3, r7
 8017602:	42a3      	cmp	r3, r4
 8017604:	bfa8      	it	ge
 8017606:	4623      	movge	r3, r4
 8017608:	2b00      	cmp	r3, #0
 801760a:	bfc2      	ittt	gt
 801760c:	1aff      	subgt	r7, r7, r3
 801760e:	1ae4      	subgt	r4, r4, r3
 8017610:	1af6      	subgt	r6, r6, r3
 8017612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017614:	2b00      	cmp	r3, #0
 8017616:	dd17      	ble.n	8017648 <_strtod_l+0x740>
 8017618:	461a      	mov	r2, r3
 801761a:	4650      	mov	r0, sl
 801761c:	9904      	ldr	r1, [sp, #16]
 801761e:	f001 fffd 	bl	801961c <__pow5mult>
 8017622:	9004      	str	r0, [sp, #16]
 8017624:	2800      	cmp	r0, #0
 8017626:	f43f aeb2 	beq.w	801738e <_strtod_l+0x486>
 801762a:	4601      	mov	r1, r0
 801762c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801762e:	4650      	mov	r0, sl
 8017630:	f001 ff50 	bl	80194d4 <__multiply>
 8017634:	9009      	str	r0, [sp, #36]	; 0x24
 8017636:	2800      	cmp	r0, #0
 8017638:	f43f aea9 	beq.w	801738e <_strtod_l+0x486>
 801763c:	4650      	mov	r0, sl
 801763e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017640:	f001 fe2e 	bl	80192a0 <_Bfree>
 8017644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017646:	931c      	str	r3, [sp, #112]	; 0x70
 8017648:	2f00      	cmp	r7, #0
 801764a:	f300 8093 	bgt.w	8017774 <_strtod_l+0x86c>
 801764e:	9b07      	ldr	r3, [sp, #28]
 8017650:	2b00      	cmp	r3, #0
 8017652:	dd08      	ble.n	8017666 <_strtod_l+0x75e>
 8017654:	4650      	mov	r0, sl
 8017656:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017658:	9906      	ldr	r1, [sp, #24]
 801765a:	f001 ffdf 	bl	801961c <__pow5mult>
 801765e:	9006      	str	r0, [sp, #24]
 8017660:	2800      	cmp	r0, #0
 8017662:	f43f ae94 	beq.w	801738e <_strtod_l+0x486>
 8017666:	2c00      	cmp	r4, #0
 8017668:	dd08      	ble.n	801767c <_strtod_l+0x774>
 801766a:	4622      	mov	r2, r4
 801766c:	4650      	mov	r0, sl
 801766e:	9906      	ldr	r1, [sp, #24]
 8017670:	f002 f82e 	bl	80196d0 <__lshift>
 8017674:	9006      	str	r0, [sp, #24]
 8017676:	2800      	cmp	r0, #0
 8017678:	f43f ae89 	beq.w	801738e <_strtod_l+0x486>
 801767c:	2e00      	cmp	r6, #0
 801767e:	dd08      	ble.n	8017692 <_strtod_l+0x78a>
 8017680:	4632      	mov	r2, r6
 8017682:	4650      	mov	r0, sl
 8017684:	9904      	ldr	r1, [sp, #16]
 8017686:	f002 f823 	bl	80196d0 <__lshift>
 801768a:	9004      	str	r0, [sp, #16]
 801768c:	2800      	cmp	r0, #0
 801768e:	f43f ae7e 	beq.w	801738e <_strtod_l+0x486>
 8017692:	4650      	mov	r0, sl
 8017694:	9a06      	ldr	r2, [sp, #24]
 8017696:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017698:	f002 f8a2 	bl	80197e0 <__mdiff>
 801769c:	4683      	mov	fp, r0
 801769e:	2800      	cmp	r0, #0
 80176a0:	f43f ae75 	beq.w	801738e <_strtod_l+0x486>
 80176a4:	2400      	movs	r4, #0
 80176a6:	68c3      	ldr	r3, [r0, #12]
 80176a8:	9904      	ldr	r1, [sp, #16]
 80176aa:	60c4      	str	r4, [r0, #12]
 80176ac:	930d      	str	r3, [sp, #52]	; 0x34
 80176ae:	f002 f87b 	bl	80197a8 <__mcmp>
 80176b2:	42a0      	cmp	r0, r4
 80176b4:	da70      	bge.n	8017798 <_strtod_l+0x890>
 80176b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176b8:	ea53 0308 	orrs.w	r3, r3, r8
 80176bc:	f040 8096 	bne.w	80177ec <_strtod_l+0x8e4>
 80176c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f040 8091 	bne.w	80177ec <_strtod_l+0x8e4>
 80176ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80176ce:	0d1b      	lsrs	r3, r3, #20
 80176d0:	051b      	lsls	r3, r3, #20
 80176d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80176d6:	f240 8089 	bls.w	80177ec <_strtod_l+0x8e4>
 80176da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80176de:	b923      	cbnz	r3, 80176ea <_strtod_l+0x7e2>
 80176e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	f340 8081 	ble.w	80177ec <_strtod_l+0x8e4>
 80176ea:	4659      	mov	r1, fp
 80176ec:	2201      	movs	r2, #1
 80176ee:	4650      	mov	r0, sl
 80176f0:	f001 ffee 	bl	80196d0 <__lshift>
 80176f4:	9904      	ldr	r1, [sp, #16]
 80176f6:	4683      	mov	fp, r0
 80176f8:	f002 f856 	bl	80197a8 <__mcmp>
 80176fc:	2800      	cmp	r0, #0
 80176fe:	dd75      	ble.n	80177ec <_strtod_l+0x8e4>
 8017700:	9905      	ldr	r1, [sp, #20]
 8017702:	464b      	mov	r3, r9
 8017704:	4a22      	ldr	r2, [pc, #136]	; (8017790 <_strtod_l+0x888>)
 8017706:	2900      	cmp	r1, #0
 8017708:	f000 8091 	beq.w	801782e <_strtod_l+0x926>
 801770c:	ea02 0109 	and.w	r1, r2, r9
 8017710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017714:	f300 808b 	bgt.w	801782e <_strtod_l+0x926>
 8017718:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801771c:	f77f aea9 	ble.w	8017472 <_strtod_l+0x56a>
 8017720:	2300      	movs	r3, #0
 8017722:	4a1c      	ldr	r2, [pc, #112]	; (8017794 <_strtod_l+0x88c>)
 8017724:	4640      	mov	r0, r8
 8017726:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801772a:	4649      	mov	r1, r9
 801772c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017730:	f7e8 ff1c 	bl	800056c <__aeabi_dmul>
 8017734:	460b      	mov	r3, r1
 8017736:	4303      	orrs	r3, r0
 8017738:	bf08      	it	eq
 801773a:	2322      	moveq	r3, #34	; 0x22
 801773c:	4680      	mov	r8, r0
 801773e:	4689      	mov	r9, r1
 8017740:	bf08      	it	eq
 8017742:	f8ca 3000 	streq.w	r3, [sl]
 8017746:	e62d      	b.n	80173a4 <_strtod_l+0x49c>
 8017748:	f04f 32ff 	mov.w	r2, #4294967295
 801774c:	fa02 f303 	lsl.w	r3, r2, r3
 8017750:	ea03 0808 	and.w	r8, r3, r8
 8017754:	e6db      	b.n	801750e <_strtod_l+0x606>
 8017756:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801775a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801775e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8017762:	35e2      	adds	r5, #226	; 0xe2
 8017764:	fa07 f505 	lsl.w	r5, r7, r5
 8017768:	970f      	str	r7, [sp, #60]	; 0x3c
 801776a:	e742      	b.n	80175f2 <_strtod_l+0x6ea>
 801776c:	2301      	movs	r3, #1
 801776e:	2500      	movs	r5, #0
 8017770:	930f      	str	r3, [sp, #60]	; 0x3c
 8017772:	e73e      	b.n	80175f2 <_strtod_l+0x6ea>
 8017774:	463a      	mov	r2, r7
 8017776:	4650      	mov	r0, sl
 8017778:	991c      	ldr	r1, [sp, #112]	; 0x70
 801777a:	f001 ffa9 	bl	80196d0 <__lshift>
 801777e:	901c      	str	r0, [sp, #112]	; 0x70
 8017780:	2800      	cmp	r0, #0
 8017782:	f47f af64 	bne.w	801764e <_strtod_l+0x746>
 8017786:	e602      	b.n	801738e <_strtod_l+0x486>
 8017788:	0801a838 	.word	0x0801a838
 801778c:	fffffc02 	.word	0xfffffc02
 8017790:	7ff00000 	.word	0x7ff00000
 8017794:	39500000 	.word	0x39500000
 8017798:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801779c:	d166      	bne.n	801786c <_strtod_l+0x964>
 801779e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177a4:	b35a      	cbz	r2, 80177fe <_strtod_l+0x8f6>
 80177a6:	4a9c      	ldr	r2, [pc, #624]	; (8017a18 <_strtod_l+0xb10>)
 80177a8:	4293      	cmp	r3, r2
 80177aa:	d12c      	bne.n	8017806 <_strtod_l+0x8fe>
 80177ac:	9b05      	ldr	r3, [sp, #20]
 80177ae:	4640      	mov	r0, r8
 80177b0:	b303      	cbz	r3, 80177f4 <_strtod_l+0x8ec>
 80177b2:	464b      	mov	r3, r9
 80177b4:	4a99      	ldr	r2, [pc, #612]	; (8017a1c <_strtod_l+0xb14>)
 80177b6:	f04f 31ff 	mov.w	r1, #4294967295
 80177ba:	401a      	ands	r2, r3
 80177bc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80177c0:	d81b      	bhi.n	80177fa <_strtod_l+0x8f2>
 80177c2:	0d12      	lsrs	r2, r2, #20
 80177c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80177c8:	fa01 f303 	lsl.w	r3, r1, r3
 80177cc:	4298      	cmp	r0, r3
 80177ce:	d11a      	bne.n	8017806 <_strtod_l+0x8fe>
 80177d0:	4b93      	ldr	r3, [pc, #588]	; (8017a20 <_strtod_l+0xb18>)
 80177d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d102      	bne.n	80177de <_strtod_l+0x8d6>
 80177d8:	3001      	adds	r0, #1
 80177da:	f43f add8 	beq.w	801738e <_strtod_l+0x486>
 80177de:	f04f 0800 	mov.w	r8, #0
 80177e2:	4b8e      	ldr	r3, [pc, #568]	; (8017a1c <_strtod_l+0xb14>)
 80177e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177e6:	401a      	ands	r2, r3
 80177e8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80177ec:	9b05      	ldr	r3, [sp, #20]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d196      	bne.n	8017720 <_strtod_l+0x818>
 80177f2:	e5d7      	b.n	80173a4 <_strtod_l+0x49c>
 80177f4:	f04f 33ff 	mov.w	r3, #4294967295
 80177f8:	e7e8      	b.n	80177cc <_strtod_l+0x8c4>
 80177fa:	460b      	mov	r3, r1
 80177fc:	e7e6      	b.n	80177cc <_strtod_l+0x8c4>
 80177fe:	ea53 0308 	orrs.w	r3, r3, r8
 8017802:	f43f af7d 	beq.w	8017700 <_strtod_l+0x7f8>
 8017806:	b1e5      	cbz	r5, 8017842 <_strtod_l+0x93a>
 8017808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801780a:	421d      	tst	r5, r3
 801780c:	d0ee      	beq.n	80177ec <_strtod_l+0x8e4>
 801780e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017810:	4640      	mov	r0, r8
 8017812:	4649      	mov	r1, r9
 8017814:	9a05      	ldr	r2, [sp, #20]
 8017816:	b1c3      	cbz	r3, 801784a <_strtod_l+0x942>
 8017818:	f7ff fb53 	bl	8016ec2 <sulp>
 801781c:	4602      	mov	r2, r0
 801781e:	460b      	mov	r3, r1
 8017820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017824:	f7e8 fcec 	bl	8000200 <__adddf3>
 8017828:	4680      	mov	r8, r0
 801782a:	4689      	mov	r9, r1
 801782c:	e7de      	b.n	80177ec <_strtod_l+0x8e4>
 801782e:	4013      	ands	r3, r2
 8017830:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017834:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017838:	f04f 38ff 	mov.w	r8, #4294967295
 801783c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017840:	e7d4      	b.n	80177ec <_strtod_l+0x8e4>
 8017842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017844:	ea13 0f08 	tst.w	r3, r8
 8017848:	e7e0      	b.n	801780c <_strtod_l+0x904>
 801784a:	f7ff fb3a 	bl	8016ec2 <sulp>
 801784e:	4602      	mov	r2, r0
 8017850:	460b      	mov	r3, r1
 8017852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017856:	f7e8 fcd1 	bl	80001fc <__aeabi_dsub>
 801785a:	2200      	movs	r2, #0
 801785c:	2300      	movs	r3, #0
 801785e:	4680      	mov	r8, r0
 8017860:	4689      	mov	r9, r1
 8017862:	f7e9 f8eb 	bl	8000a3c <__aeabi_dcmpeq>
 8017866:	2800      	cmp	r0, #0
 8017868:	d0c0      	beq.n	80177ec <_strtod_l+0x8e4>
 801786a:	e602      	b.n	8017472 <_strtod_l+0x56a>
 801786c:	4658      	mov	r0, fp
 801786e:	9904      	ldr	r1, [sp, #16]
 8017870:	f002 f91c 	bl	8019aac <__ratio>
 8017874:	2200      	movs	r2, #0
 8017876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801787a:	4606      	mov	r6, r0
 801787c:	460f      	mov	r7, r1
 801787e:	f7e9 f8f1 	bl	8000a64 <__aeabi_dcmple>
 8017882:	2800      	cmp	r0, #0
 8017884:	d075      	beq.n	8017972 <_strtod_l+0xa6a>
 8017886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017888:	2b00      	cmp	r3, #0
 801788a:	d047      	beq.n	801791c <_strtod_l+0xa14>
 801788c:	2600      	movs	r6, #0
 801788e:	4f65      	ldr	r7, [pc, #404]	; (8017a24 <_strtod_l+0xb1c>)
 8017890:	4d64      	ldr	r5, [pc, #400]	; (8017a24 <_strtod_l+0xb1c>)
 8017892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017898:	0d1b      	lsrs	r3, r3, #20
 801789a:	051b      	lsls	r3, r3, #20
 801789c:	930f      	str	r3, [sp, #60]	; 0x3c
 801789e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178a0:	4b61      	ldr	r3, [pc, #388]	; (8017a28 <_strtod_l+0xb20>)
 80178a2:	429a      	cmp	r2, r3
 80178a4:	f040 80c8 	bne.w	8017a38 <_strtod_l+0xb30>
 80178a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80178ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80178b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b2:	4640      	mov	r0, r8
 80178b4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80178b8:	4649      	mov	r1, r9
 80178ba:	f002 f821 	bl	8019900 <__ulp>
 80178be:	4602      	mov	r2, r0
 80178c0:	460b      	mov	r3, r1
 80178c2:	4630      	mov	r0, r6
 80178c4:	4639      	mov	r1, r7
 80178c6:	f7e8 fe51 	bl	800056c <__aeabi_dmul>
 80178ca:	4642      	mov	r2, r8
 80178cc:	464b      	mov	r3, r9
 80178ce:	f7e8 fc97 	bl	8000200 <__adddf3>
 80178d2:	460b      	mov	r3, r1
 80178d4:	4951      	ldr	r1, [pc, #324]	; (8017a1c <_strtod_l+0xb14>)
 80178d6:	4a55      	ldr	r2, [pc, #340]	; (8017a2c <_strtod_l+0xb24>)
 80178d8:	4019      	ands	r1, r3
 80178da:	4291      	cmp	r1, r2
 80178dc:	4680      	mov	r8, r0
 80178de:	d95e      	bls.n	801799e <_strtod_l+0xa96>
 80178e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d103      	bne.n	80178f2 <_strtod_l+0x9ea>
 80178ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178ec:	3301      	adds	r3, #1
 80178ee:	f43f ad4e 	beq.w	801738e <_strtod_l+0x486>
 80178f2:	f04f 38ff 	mov.w	r8, #4294967295
 80178f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8017a20 <_strtod_l+0xb18>
 80178fa:	4650      	mov	r0, sl
 80178fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80178fe:	f001 fccf 	bl	80192a0 <_Bfree>
 8017902:	4650      	mov	r0, sl
 8017904:	9906      	ldr	r1, [sp, #24]
 8017906:	f001 fccb 	bl	80192a0 <_Bfree>
 801790a:	4650      	mov	r0, sl
 801790c:	9904      	ldr	r1, [sp, #16]
 801790e:	f001 fcc7 	bl	80192a0 <_Bfree>
 8017912:	4659      	mov	r1, fp
 8017914:	4650      	mov	r0, sl
 8017916:	f001 fcc3 	bl	80192a0 <_Bfree>
 801791a:	e61c      	b.n	8017556 <_strtod_l+0x64e>
 801791c:	f1b8 0f00 	cmp.w	r8, #0
 8017920:	d119      	bne.n	8017956 <_strtod_l+0xa4e>
 8017922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017928:	b9e3      	cbnz	r3, 8017964 <_strtod_l+0xa5c>
 801792a:	2200      	movs	r2, #0
 801792c:	4630      	mov	r0, r6
 801792e:	4639      	mov	r1, r7
 8017930:	4b3c      	ldr	r3, [pc, #240]	; (8017a24 <_strtod_l+0xb1c>)
 8017932:	f7e9 f88d 	bl	8000a50 <__aeabi_dcmplt>
 8017936:	b9c8      	cbnz	r0, 801796c <_strtod_l+0xa64>
 8017938:	2200      	movs	r2, #0
 801793a:	4630      	mov	r0, r6
 801793c:	4639      	mov	r1, r7
 801793e:	4b3c      	ldr	r3, [pc, #240]	; (8017a30 <_strtod_l+0xb28>)
 8017940:	f7e8 fe14 	bl	800056c <__aeabi_dmul>
 8017944:	4604      	mov	r4, r0
 8017946:	460d      	mov	r5, r1
 8017948:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801794c:	9418      	str	r4, [sp, #96]	; 0x60
 801794e:	9319      	str	r3, [sp, #100]	; 0x64
 8017950:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8017954:	e79d      	b.n	8017892 <_strtod_l+0x98a>
 8017956:	f1b8 0f01 	cmp.w	r8, #1
 801795a:	d103      	bne.n	8017964 <_strtod_l+0xa5c>
 801795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801795e:	2b00      	cmp	r3, #0
 8017960:	f43f ad87 	beq.w	8017472 <_strtod_l+0x56a>
 8017964:	2600      	movs	r6, #0
 8017966:	2400      	movs	r4, #0
 8017968:	4f32      	ldr	r7, [pc, #200]	; (8017a34 <_strtod_l+0xb2c>)
 801796a:	e791      	b.n	8017890 <_strtod_l+0x988>
 801796c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801796e:	4d30      	ldr	r5, [pc, #192]	; (8017a30 <_strtod_l+0xb28>)
 8017970:	e7ea      	b.n	8017948 <_strtod_l+0xa40>
 8017972:	4b2f      	ldr	r3, [pc, #188]	; (8017a30 <_strtod_l+0xb28>)
 8017974:	2200      	movs	r2, #0
 8017976:	4630      	mov	r0, r6
 8017978:	4639      	mov	r1, r7
 801797a:	f7e8 fdf7 	bl	800056c <__aeabi_dmul>
 801797e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017980:	4604      	mov	r4, r0
 8017982:	460d      	mov	r5, r1
 8017984:	b933      	cbnz	r3, 8017994 <_strtod_l+0xa8c>
 8017986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801798a:	9010      	str	r0, [sp, #64]	; 0x40
 801798c:	9311      	str	r3, [sp, #68]	; 0x44
 801798e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8017992:	e77e      	b.n	8017892 <_strtod_l+0x98a>
 8017994:	4602      	mov	r2, r0
 8017996:	460b      	mov	r3, r1
 8017998:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801799c:	e7f7      	b.n	801798e <_strtod_l+0xa86>
 801799e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80179a2:	9b05      	ldr	r3, [sp, #20]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d1a8      	bne.n	80178fa <_strtod_l+0x9f2>
 80179a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80179ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179ae:	0d1b      	lsrs	r3, r3, #20
 80179b0:	051b      	lsls	r3, r3, #20
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d1a1      	bne.n	80178fa <_strtod_l+0x9f2>
 80179b6:	4620      	mov	r0, r4
 80179b8:	4629      	mov	r1, r5
 80179ba:	f7e9 f937 	bl	8000c2c <__aeabi_d2lz>
 80179be:	f7e8 fda7 	bl	8000510 <__aeabi_l2d>
 80179c2:	4602      	mov	r2, r0
 80179c4:	460b      	mov	r3, r1
 80179c6:	4620      	mov	r0, r4
 80179c8:	4629      	mov	r1, r5
 80179ca:	f7e8 fc17 	bl	80001fc <__aeabi_dsub>
 80179ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179d4:	ea43 0308 	orr.w	r3, r3, r8
 80179d8:	4313      	orrs	r3, r2
 80179da:	4604      	mov	r4, r0
 80179dc:	460d      	mov	r5, r1
 80179de:	d066      	beq.n	8017aae <_strtod_l+0xba6>
 80179e0:	a309      	add	r3, pc, #36	; (adr r3, 8017a08 <_strtod_l+0xb00>)
 80179e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e6:	f7e9 f833 	bl	8000a50 <__aeabi_dcmplt>
 80179ea:	2800      	cmp	r0, #0
 80179ec:	f47f acda 	bne.w	80173a4 <_strtod_l+0x49c>
 80179f0:	a307      	add	r3, pc, #28	; (adr r3, 8017a10 <_strtod_l+0xb08>)
 80179f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f6:	4620      	mov	r0, r4
 80179f8:	4629      	mov	r1, r5
 80179fa:	f7e9 f847 	bl	8000a8c <__aeabi_dcmpgt>
 80179fe:	2800      	cmp	r0, #0
 8017a00:	f43f af7b 	beq.w	80178fa <_strtod_l+0x9f2>
 8017a04:	e4ce      	b.n	80173a4 <_strtod_l+0x49c>
 8017a06:	bf00      	nop
 8017a08:	94a03595 	.word	0x94a03595
 8017a0c:	3fdfffff 	.word	0x3fdfffff
 8017a10:	35afe535 	.word	0x35afe535
 8017a14:	3fe00000 	.word	0x3fe00000
 8017a18:	000fffff 	.word	0x000fffff
 8017a1c:	7ff00000 	.word	0x7ff00000
 8017a20:	7fefffff 	.word	0x7fefffff
 8017a24:	3ff00000 	.word	0x3ff00000
 8017a28:	7fe00000 	.word	0x7fe00000
 8017a2c:	7c9fffff 	.word	0x7c9fffff
 8017a30:	3fe00000 	.word	0x3fe00000
 8017a34:	bff00000 	.word	0xbff00000
 8017a38:	9b05      	ldr	r3, [sp, #20]
 8017a3a:	b313      	cbz	r3, 8017a82 <_strtod_l+0xb7a>
 8017a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017a42:	d81e      	bhi.n	8017a82 <_strtod_l+0xb7a>
 8017a44:	a326      	add	r3, pc, #152	; (adr r3, 8017ae0 <_strtod_l+0xbd8>)
 8017a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	f7e9 f809 	bl	8000a64 <__aeabi_dcmple>
 8017a52:	b190      	cbz	r0, 8017a7a <_strtod_l+0xb72>
 8017a54:	4629      	mov	r1, r5
 8017a56:	4620      	mov	r0, r4
 8017a58:	f7e9 f860 	bl	8000b1c <__aeabi_d2uiz>
 8017a5c:	2801      	cmp	r0, #1
 8017a5e:	bf38      	it	cc
 8017a60:	2001      	movcc	r0, #1
 8017a62:	f7e8 fd09 	bl	8000478 <__aeabi_ui2d>
 8017a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a68:	4604      	mov	r4, r0
 8017a6a:	460d      	mov	r5, r1
 8017a6c:	b9d3      	cbnz	r3, 8017aa4 <_strtod_l+0xb9c>
 8017a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a72:	9012      	str	r0, [sp, #72]	; 0x48
 8017a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8017a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8017a80:	1a9f      	subs	r7, r3, r2
 8017a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017a86:	f001 ff3b 	bl	8019900 <__ulp>
 8017a8a:	4602      	mov	r2, r0
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	4630      	mov	r0, r6
 8017a90:	4639      	mov	r1, r7
 8017a92:	f7e8 fd6b 	bl	800056c <__aeabi_dmul>
 8017a96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017a9a:	f7e8 fbb1 	bl	8000200 <__adddf3>
 8017a9e:	4680      	mov	r8, r0
 8017aa0:	4689      	mov	r9, r1
 8017aa2:	e77e      	b.n	80179a2 <_strtod_l+0xa9a>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	460b      	mov	r3, r1
 8017aa8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8017aac:	e7e3      	b.n	8017a76 <_strtod_l+0xb6e>
 8017aae:	a30e      	add	r3, pc, #56	; (adr r3, 8017ae8 <_strtod_l+0xbe0>)
 8017ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab4:	f7e8 ffcc 	bl	8000a50 <__aeabi_dcmplt>
 8017ab8:	e7a1      	b.n	80179fe <_strtod_l+0xaf6>
 8017aba:	2300      	movs	r3, #0
 8017abc:	930c      	str	r3, [sp, #48]	; 0x30
 8017abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017ac2:	6013      	str	r3, [r2, #0]
 8017ac4:	f7ff ba65 	b.w	8016f92 <_strtod_l+0x8a>
 8017ac8:	2b65      	cmp	r3, #101	; 0x65
 8017aca:	f43f ab5c 	beq.w	8017186 <_strtod_l+0x27e>
 8017ace:	2b45      	cmp	r3, #69	; 0x45
 8017ad0:	f43f ab59 	beq.w	8017186 <_strtod_l+0x27e>
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	f7ff bb8d 	b.w	80171f4 <_strtod_l+0x2ec>
 8017ada:	bf00      	nop
 8017adc:	f3af 8000 	nop.w
 8017ae0:	ffc00000 	.word	0xffc00000
 8017ae4:	41dfffff 	.word	0x41dfffff
 8017ae8:	94a03595 	.word	0x94a03595
 8017aec:	3fcfffff 	.word	0x3fcfffff

08017af0 <_strtod_r>:
 8017af0:	4b01      	ldr	r3, [pc, #4]	; (8017af8 <_strtod_r+0x8>)
 8017af2:	f7ff ba09 	b.w	8016f08 <_strtod_l>
 8017af6:	bf00      	nop
 8017af8:	200002f8 	.word	0x200002f8

08017afc <_strtol_l.isra.0>:
 8017afc:	2b01      	cmp	r3, #1
 8017afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b02:	4686      	mov	lr, r0
 8017b04:	d001      	beq.n	8017b0a <_strtol_l.isra.0+0xe>
 8017b06:	2b24      	cmp	r3, #36	; 0x24
 8017b08:	d906      	bls.n	8017b18 <_strtol_l.isra.0+0x1c>
 8017b0a:	f7fe f897 	bl	8015c3c <__errno>
 8017b0e:	2316      	movs	r3, #22
 8017b10:	6003      	str	r3, [r0, #0]
 8017b12:	2000      	movs	r0, #0
 8017b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b18:	468c      	mov	ip, r1
 8017b1a:	4e3a      	ldr	r6, [pc, #232]	; (8017c04 <_strtol_l.isra.0+0x108>)
 8017b1c:	4660      	mov	r0, ip
 8017b1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b22:	5da5      	ldrb	r5, [r4, r6]
 8017b24:	f015 0508 	ands.w	r5, r5, #8
 8017b28:	d1f8      	bne.n	8017b1c <_strtol_l.isra.0+0x20>
 8017b2a:	2c2d      	cmp	r4, #45	; 0x2d
 8017b2c:	d133      	bne.n	8017b96 <_strtol_l.isra.0+0x9a>
 8017b2e:	f04f 0801 	mov.w	r8, #1
 8017b32:	f89c 4000 	ldrb.w	r4, [ip]
 8017b36:	f100 0c02 	add.w	ip, r0, #2
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d05d      	beq.n	8017bfa <_strtol_l.isra.0+0xfe>
 8017b3e:	2b10      	cmp	r3, #16
 8017b40:	d10c      	bne.n	8017b5c <_strtol_l.isra.0+0x60>
 8017b42:	2c30      	cmp	r4, #48	; 0x30
 8017b44:	d10a      	bne.n	8017b5c <_strtol_l.isra.0+0x60>
 8017b46:	f89c 0000 	ldrb.w	r0, [ip]
 8017b4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017b4e:	2858      	cmp	r0, #88	; 0x58
 8017b50:	d14e      	bne.n	8017bf0 <_strtol_l.isra.0+0xf4>
 8017b52:	2310      	movs	r3, #16
 8017b54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017b58:	f10c 0c02 	add.w	ip, ip, #2
 8017b5c:	2500      	movs	r5, #0
 8017b5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8017b62:	3f01      	subs	r7, #1
 8017b64:	fbb7 f9f3 	udiv	r9, r7, r3
 8017b68:	4628      	mov	r0, r5
 8017b6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8017b6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017b72:	2e09      	cmp	r6, #9
 8017b74:	d818      	bhi.n	8017ba8 <_strtol_l.isra.0+0xac>
 8017b76:	4634      	mov	r4, r6
 8017b78:	42a3      	cmp	r3, r4
 8017b7a:	dd24      	ble.n	8017bc6 <_strtol_l.isra.0+0xca>
 8017b7c:	2d00      	cmp	r5, #0
 8017b7e:	db1f      	blt.n	8017bc0 <_strtol_l.isra.0+0xc4>
 8017b80:	4581      	cmp	r9, r0
 8017b82:	d31d      	bcc.n	8017bc0 <_strtol_l.isra.0+0xc4>
 8017b84:	d101      	bne.n	8017b8a <_strtol_l.isra.0+0x8e>
 8017b86:	45a2      	cmp	sl, r4
 8017b88:	db1a      	blt.n	8017bc0 <_strtol_l.isra.0+0xc4>
 8017b8a:	2501      	movs	r5, #1
 8017b8c:	fb00 4003 	mla	r0, r0, r3, r4
 8017b90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b94:	e7eb      	b.n	8017b6e <_strtol_l.isra.0+0x72>
 8017b96:	2c2b      	cmp	r4, #43	; 0x2b
 8017b98:	bf08      	it	eq
 8017b9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017b9e:	46a8      	mov	r8, r5
 8017ba0:	bf08      	it	eq
 8017ba2:	f100 0c02 	addeq.w	ip, r0, #2
 8017ba6:	e7c8      	b.n	8017b3a <_strtol_l.isra.0+0x3e>
 8017ba8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017bac:	2e19      	cmp	r6, #25
 8017bae:	d801      	bhi.n	8017bb4 <_strtol_l.isra.0+0xb8>
 8017bb0:	3c37      	subs	r4, #55	; 0x37
 8017bb2:	e7e1      	b.n	8017b78 <_strtol_l.isra.0+0x7c>
 8017bb4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017bb8:	2e19      	cmp	r6, #25
 8017bba:	d804      	bhi.n	8017bc6 <_strtol_l.isra.0+0xca>
 8017bbc:	3c57      	subs	r4, #87	; 0x57
 8017bbe:	e7db      	b.n	8017b78 <_strtol_l.isra.0+0x7c>
 8017bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8017bc4:	e7e4      	b.n	8017b90 <_strtol_l.isra.0+0x94>
 8017bc6:	2d00      	cmp	r5, #0
 8017bc8:	da08      	bge.n	8017bdc <_strtol_l.isra.0+0xe0>
 8017bca:	2322      	movs	r3, #34	; 0x22
 8017bcc:	4638      	mov	r0, r7
 8017bce:	f8ce 3000 	str.w	r3, [lr]
 8017bd2:	2a00      	cmp	r2, #0
 8017bd4:	d09e      	beq.n	8017b14 <_strtol_l.isra.0+0x18>
 8017bd6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8017bda:	e007      	b.n	8017bec <_strtol_l.isra.0+0xf0>
 8017bdc:	f1b8 0f00 	cmp.w	r8, #0
 8017be0:	d000      	beq.n	8017be4 <_strtol_l.isra.0+0xe8>
 8017be2:	4240      	negs	r0, r0
 8017be4:	2a00      	cmp	r2, #0
 8017be6:	d095      	beq.n	8017b14 <_strtol_l.isra.0+0x18>
 8017be8:	2d00      	cmp	r5, #0
 8017bea:	d1f4      	bne.n	8017bd6 <_strtol_l.isra.0+0xda>
 8017bec:	6011      	str	r1, [r2, #0]
 8017bee:	e791      	b.n	8017b14 <_strtol_l.isra.0+0x18>
 8017bf0:	2430      	movs	r4, #48	; 0x30
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d1b2      	bne.n	8017b5c <_strtol_l.isra.0+0x60>
 8017bf6:	2308      	movs	r3, #8
 8017bf8:	e7b0      	b.n	8017b5c <_strtol_l.isra.0+0x60>
 8017bfa:	2c30      	cmp	r4, #48	; 0x30
 8017bfc:	d0a3      	beq.n	8017b46 <_strtol_l.isra.0+0x4a>
 8017bfe:	230a      	movs	r3, #10
 8017c00:	e7ac      	b.n	8017b5c <_strtol_l.isra.0+0x60>
 8017c02:	bf00      	nop
 8017c04:	0801a861 	.word	0x0801a861

08017c08 <_strtol_r>:
 8017c08:	f7ff bf78 	b.w	8017afc <_strtol_l.isra.0>

08017c0c <_write_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4604      	mov	r4, r0
 8017c10:	4608      	mov	r0, r1
 8017c12:	4611      	mov	r1, r2
 8017c14:	2200      	movs	r2, #0
 8017c16:	4d05      	ldr	r5, [pc, #20]	; (8017c2c <_write_r+0x20>)
 8017c18:	602a      	str	r2, [r5, #0]
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	f7ed ffe4 	bl	8005be8 <_write>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d102      	bne.n	8017c2a <_write_r+0x1e>
 8017c24:	682b      	ldr	r3, [r5, #0]
 8017c26:	b103      	cbz	r3, 8017c2a <_write_r+0x1e>
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	bd38      	pop	{r3, r4, r5, pc}
 8017c2c:	2000e604 	.word	0x2000e604

08017c30 <_close_r>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	2300      	movs	r3, #0
 8017c34:	4d05      	ldr	r5, [pc, #20]	; (8017c4c <_close_r+0x1c>)
 8017c36:	4604      	mov	r4, r0
 8017c38:	4608      	mov	r0, r1
 8017c3a:	602b      	str	r3, [r5, #0]
 8017c3c:	f7ed fff0 	bl	8005c20 <_close>
 8017c40:	1c43      	adds	r3, r0, #1
 8017c42:	d102      	bne.n	8017c4a <_close_r+0x1a>
 8017c44:	682b      	ldr	r3, [r5, #0]
 8017c46:	b103      	cbz	r3, 8017c4a <_close_r+0x1a>
 8017c48:	6023      	str	r3, [r4, #0]
 8017c4a:	bd38      	pop	{r3, r4, r5, pc}
 8017c4c:	2000e604 	.word	0x2000e604

08017c50 <quorem>:
 8017c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c54:	6903      	ldr	r3, [r0, #16]
 8017c56:	690c      	ldr	r4, [r1, #16]
 8017c58:	4607      	mov	r7, r0
 8017c5a:	42a3      	cmp	r3, r4
 8017c5c:	f2c0 8083 	blt.w	8017d66 <quorem+0x116>
 8017c60:	3c01      	subs	r4, #1
 8017c62:	f100 0514 	add.w	r5, r0, #20
 8017c66:	f101 0814 	add.w	r8, r1, #20
 8017c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c6e:	9301      	str	r3, [sp, #4]
 8017c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017c88:	d332      	bcc.n	8017cf0 <quorem+0xa0>
 8017c8a:	f04f 0e00 	mov.w	lr, #0
 8017c8e:	4640      	mov	r0, r8
 8017c90:	46ac      	mov	ip, r5
 8017c92:	46f2      	mov	sl, lr
 8017c94:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c98:	b293      	uxth	r3, r2
 8017c9a:	fb06 e303 	mla	r3, r6, r3, lr
 8017c9e:	0c12      	lsrs	r2, r2, #16
 8017ca0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017ca4:	fb06 e202 	mla	r2, r6, r2, lr
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	ebaa 0303 	sub.w	r3, sl, r3
 8017cae:	f8dc a000 	ldr.w	sl, [ip]
 8017cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017cb6:	fa1f fa8a 	uxth.w	sl, sl
 8017cba:	4453      	add	r3, sl
 8017cbc:	fa1f fa82 	uxth.w	sl, r2
 8017cc0:	f8dc 2000 	ldr.w	r2, [ip]
 8017cc4:	4581      	cmp	r9, r0
 8017cc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017cca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017cd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017cd8:	f84c 3b04 	str.w	r3, [ip], #4
 8017cdc:	d2da      	bcs.n	8017c94 <quorem+0x44>
 8017cde:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ce2:	b92b      	cbnz	r3, 8017cf0 <quorem+0xa0>
 8017ce4:	9b01      	ldr	r3, [sp, #4]
 8017ce6:	3b04      	subs	r3, #4
 8017ce8:	429d      	cmp	r5, r3
 8017cea:	461a      	mov	r2, r3
 8017cec:	d32f      	bcc.n	8017d4e <quorem+0xfe>
 8017cee:	613c      	str	r4, [r7, #16]
 8017cf0:	4638      	mov	r0, r7
 8017cf2:	f001 fd59 	bl	80197a8 <__mcmp>
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	db25      	blt.n	8017d46 <quorem+0xf6>
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	f04f 0c00 	mov.w	ip, #0
 8017d00:	3601      	adds	r6, #1
 8017d02:	f858 1b04 	ldr.w	r1, [r8], #4
 8017d06:	f8d0 e000 	ldr.w	lr, [r0]
 8017d0a:	b28b      	uxth	r3, r1
 8017d0c:	ebac 0303 	sub.w	r3, ip, r3
 8017d10:	fa1f f28e 	uxth.w	r2, lr
 8017d14:	4413      	add	r3, r2
 8017d16:	0c0a      	lsrs	r2, r1, #16
 8017d18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d26:	45c1      	cmp	r9, r8
 8017d28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017d2c:	f840 3b04 	str.w	r3, [r0], #4
 8017d30:	d2e7      	bcs.n	8017d02 <quorem+0xb2>
 8017d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d3a:	b922      	cbnz	r2, 8017d46 <quorem+0xf6>
 8017d3c:	3b04      	subs	r3, #4
 8017d3e:	429d      	cmp	r5, r3
 8017d40:	461a      	mov	r2, r3
 8017d42:	d30a      	bcc.n	8017d5a <quorem+0x10a>
 8017d44:	613c      	str	r4, [r7, #16]
 8017d46:	4630      	mov	r0, r6
 8017d48:	b003      	add	sp, #12
 8017d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4e:	6812      	ldr	r2, [r2, #0]
 8017d50:	3b04      	subs	r3, #4
 8017d52:	2a00      	cmp	r2, #0
 8017d54:	d1cb      	bne.n	8017cee <quorem+0x9e>
 8017d56:	3c01      	subs	r4, #1
 8017d58:	e7c6      	b.n	8017ce8 <quorem+0x98>
 8017d5a:	6812      	ldr	r2, [r2, #0]
 8017d5c:	3b04      	subs	r3, #4
 8017d5e:	2a00      	cmp	r2, #0
 8017d60:	d1f0      	bne.n	8017d44 <quorem+0xf4>
 8017d62:	3c01      	subs	r4, #1
 8017d64:	e7eb      	b.n	8017d3e <quorem+0xee>
 8017d66:	2000      	movs	r0, #0
 8017d68:	e7ee      	b.n	8017d48 <quorem+0xf8>
 8017d6a:	0000      	movs	r0, r0
 8017d6c:	0000      	movs	r0, r0
	...

08017d70 <_dtoa_r>:
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d74:	4616      	mov	r6, r2
 8017d76:	461f      	mov	r7, r3
 8017d78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017d7a:	b099      	sub	sp, #100	; 0x64
 8017d7c:	4605      	mov	r5, r0
 8017d7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017d82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8017d86:	b974      	cbnz	r4, 8017da6 <_dtoa_r+0x36>
 8017d88:	2010      	movs	r0, #16
 8017d8a:	f7fe f87b 	bl	8015e84 <malloc>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	6268      	str	r0, [r5, #36]	; 0x24
 8017d92:	b920      	cbnz	r0, 8017d9e <_dtoa_r+0x2e>
 8017d94:	21ea      	movs	r1, #234	; 0xea
 8017d96:	4bae      	ldr	r3, [pc, #696]	; (8018050 <_dtoa_r+0x2e0>)
 8017d98:	48ae      	ldr	r0, [pc, #696]	; (8018054 <_dtoa_r+0x2e4>)
 8017d9a:	f002 f89b 	bl	8019ed4 <__assert_func>
 8017d9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017da2:	6004      	str	r4, [r0, #0]
 8017da4:	60c4      	str	r4, [r0, #12]
 8017da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017da8:	6819      	ldr	r1, [r3, #0]
 8017daa:	b151      	cbz	r1, 8017dc2 <_dtoa_r+0x52>
 8017dac:	685a      	ldr	r2, [r3, #4]
 8017dae:	2301      	movs	r3, #1
 8017db0:	4093      	lsls	r3, r2
 8017db2:	604a      	str	r2, [r1, #4]
 8017db4:	608b      	str	r3, [r1, #8]
 8017db6:	4628      	mov	r0, r5
 8017db8:	f001 fa72 	bl	80192a0 <_Bfree>
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017dc0:	601a      	str	r2, [r3, #0]
 8017dc2:	1e3b      	subs	r3, r7, #0
 8017dc4:	bfaf      	iteee	ge
 8017dc6:	2300      	movge	r3, #0
 8017dc8:	2201      	movlt	r2, #1
 8017dca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017dce:	9305      	strlt	r3, [sp, #20]
 8017dd0:	bfa8      	it	ge
 8017dd2:	f8c8 3000 	strge.w	r3, [r8]
 8017dd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017dda:	4b9f      	ldr	r3, [pc, #636]	; (8018058 <_dtoa_r+0x2e8>)
 8017ddc:	bfb8      	it	lt
 8017dde:	f8c8 2000 	strlt.w	r2, [r8]
 8017de2:	ea33 0309 	bics.w	r3, r3, r9
 8017de6:	d119      	bne.n	8017e1c <_dtoa_r+0xac>
 8017de8:	f242 730f 	movw	r3, #9999	; 0x270f
 8017dec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017dee:	6013      	str	r3, [r2, #0]
 8017df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017df4:	4333      	orrs	r3, r6
 8017df6:	f000 8580 	beq.w	80188fa <_dtoa_r+0xb8a>
 8017dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017dfc:	b953      	cbnz	r3, 8017e14 <_dtoa_r+0xa4>
 8017dfe:	4b97      	ldr	r3, [pc, #604]	; (801805c <_dtoa_r+0x2ec>)
 8017e00:	e022      	b.n	8017e48 <_dtoa_r+0xd8>
 8017e02:	4b97      	ldr	r3, [pc, #604]	; (8018060 <_dtoa_r+0x2f0>)
 8017e04:	9308      	str	r3, [sp, #32]
 8017e06:	3308      	adds	r3, #8
 8017e08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017e0a:	6013      	str	r3, [r2, #0]
 8017e0c:	9808      	ldr	r0, [sp, #32]
 8017e0e:	b019      	add	sp, #100	; 0x64
 8017e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e14:	4b91      	ldr	r3, [pc, #580]	; (801805c <_dtoa_r+0x2ec>)
 8017e16:	9308      	str	r3, [sp, #32]
 8017e18:	3303      	adds	r3, #3
 8017e1a:	e7f5      	b.n	8017e08 <_dtoa_r+0x98>
 8017e1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017e20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8017e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e28:	2200      	movs	r2, #0
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f7e8 fe06 	bl	8000a3c <__aeabi_dcmpeq>
 8017e30:	4680      	mov	r8, r0
 8017e32:	b158      	cbz	r0, 8017e4c <_dtoa_r+0xdc>
 8017e34:	2301      	movs	r3, #1
 8017e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017e38:	6013      	str	r3, [r2, #0]
 8017e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f000 8559 	beq.w	80188f4 <_dtoa_r+0xb84>
 8017e42:	4888      	ldr	r0, [pc, #544]	; (8018064 <_dtoa_r+0x2f4>)
 8017e44:	6018      	str	r0, [r3, #0]
 8017e46:	1e43      	subs	r3, r0, #1
 8017e48:	9308      	str	r3, [sp, #32]
 8017e4a:	e7df      	b.n	8017e0c <_dtoa_r+0x9c>
 8017e4c:	ab16      	add	r3, sp, #88	; 0x58
 8017e4e:	9301      	str	r3, [sp, #4]
 8017e50:	ab17      	add	r3, sp, #92	; 0x5c
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	4628      	mov	r0, r5
 8017e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e5a:	f001 fdcb 	bl	80199f4 <__d2b>
 8017e5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017e62:	4682      	mov	sl, r0
 8017e64:	2c00      	cmp	r4, #0
 8017e66:	d07e      	beq.n	8017f66 <_dtoa_r+0x1f6>
 8017e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8017e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8017e7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8017e7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8017e82:	2200      	movs	r2, #0
 8017e84:	4b78      	ldr	r3, [pc, #480]	; (8018068 <_dtoa_r+0x2f8>)
 8017e86:	f7e8 f9b9 	bl	80001fc <__aeabi_dsub>
 8017e8a:	a36b      	add	r3, pc, #428	; (adr r3, 8018038 <_dtoa_r+0x2c8>)
 8017e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e90:	f7e8 fb6c 	bl	800056c <__aeabi_dmul>
 8017e94:	a36a      	add	r3, pc, #424	; (adr r3, 8018040 <_dtoa_r+0x2d0>)
 8017e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e9a:	f7e8 f9b1 	bl	8000200 <__adddf3>
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	460f      	mov	r7, r1
 8017ea4:	f7e8 faf8 	bl	8000498 <__aeabi_i2d>
 8017ea8:	a367      	add	r3, pc, #412	; (adr r3, 8018048 <_dtoa_r+0x2d8>)
 8017eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eae:	f7e8 fb5d 	bl	800056c <__aeabi_dmul>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	4639      	mov	r1, r7
 8017eba:	f7e8 f9a1 	bl	8000200 <__adddf3>
 8017ebe:	4606      	mov	r6, r0
 8017ec0:	460f      	mov	r7, r1
 8017ec2:	f7e8 fe03 	bl	8000acc <__aeabi_d2iz>
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	4681      	mov	r9, r0
 8017eca:	2300      	movs	r3, #0
 8017ecc:	4630      	mov	r0, r6
 8017ece:	4639      	mov	r1, r7
 8017ed0:	f7e8 fdbe 	bl	8000a50 <__aeabi_dcmplt>
 8017ed4:	b148      	cbz	r0, 8017eea <_dtoa_r+0x17a>
 8017ed6:	4648      	mov	r0, r9
 8017ed8:	f7e8 fade 	bl	8000498 <__aeabi_i2d>
 8017edc:	4632      	mov	r2, r6
 8017ede:	463b      	mov	r3, r7
 8017ee0:	f7e8 fdac 	bl	8000a3c <__aeabi_dcmpeq>
 8017ee4:	b908      	cbnz	r0, 8017eea <_dtoa_r+0x17a>
 8017ee6:	f109 39ff 	add.w	r9, r9, #4294967295
 8017eea:	f1b9 0f16 	cmp.w	r9, #22
 8017eee:	d857      	bhi.n	8017fa0 <_dtoa_r+0x230>
 8017ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ef4:	4b5d      	ldr	r3, [pc, #372]	; (801806c <_dtoa_r+0x2fc>)
 8017ef6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017efe:	f7e8 fda7 	bl	8000a50 <__aeabi_dcmplt>
 8017f02:	2800      	cmp	r0, #0
 8017f04:	d04e      	beq.n	8017fa4 <_dtoa_r+0x234>
 8017f06:	2300      	movs	r3, #0
 8017f08:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017f10:	1b1c      	subs	r4, r3, r4
 8017f12:	1e63      	subs	r3, r4, #1
 8017f14:	9309      	str	r3, [sp, #36]	; 0x24
 8017f16:	bf49      	itett	mi
 8017f18:	f1c4 0301 	rsbmi	r3, r4, #1
 8017f1c:	2300      	movpl	r3, #0
 8017f1e:	9306      	strmi	r3, [sp, #24]
 8017f20:	2300      	movmi	r3, #0
 8017f22:	bf54      	ite	pl
 8017f24:	9306      	strpl	r3, [sp, #24]
 8017f26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8017f28:	f1b9 0f00 	cmp.w	r9, #0
 8017f2c:	db3c      	blt.n	8017fa8 <_dtoa_r+0x238>
 8017f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f30:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017f34:	444b      	add	r3, r9
 8017f36:	9309      	str	r3, [sp, #36]	; 0x24
 8017f38:	2300      	movs	r3, #0
 8017f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f3e:	2b09      	cmp	r3, #9
 8017f40:	d86c      	bhi.n	801801c <_dtoa_r+0x2ac>
 8017f42:	2b05      	cmp	r3, #5
 8017f44:	bfc4      	itt	gt
 8017f46:	3b04      	subgt	r3, #4
 8017f48:	9322      	strgt	r3, [sp, #136]	; 0x88
 8017f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017f4c:	bfc8      	it	gt
 8017f4e:	2400      	movgt	r4, #0
 8017f50:	f1a3 0302 	sub.w	r3, r3, #2
 8017f54:	bfd8      	it	le
 8017f56:	2401      	movle	r4, #1
 8017f58:	2b03      	cmp	r3, #3
 8017f5a:	f200 808b 	bhi.w	8018074 <_dtoa_r+0x304>
 8017f5e:	e8df f003 	tbb	[pc, r3]
 8017f62:	4f2d      	.short	0x4f2d
 8017f64:	5b4d      	.short	0x5b4d
 8017f66:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8017f6a:	441c      	add	r4, r3
 8017f6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8017f70:	2b20      	cmp	r3, #32
 8017f72:	bfc3      	ittte	gt
 8017f74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017f78:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8017f7c:	fa09 f303 	lslgt.w	r3, r9, r3
 8017f80:	f1c3 0320 	rsble	r3, r3, #32
 8017f84:	bfc6      	itte	gt
 8017f86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017f8a:	4318      	orrgt	r0, r3
 8017f8c:	fa06 f003 	lslle.w	r0, r6, r3
 8017f90:	f7e8 fa72 	bl	8000478 <__aeabi_ui2d>
 8017f94:	2301      	movs	r3, #1
 8017f96:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8017f9a:	3c01      	subs	r4, #1
 8017f9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017f9e:	e770      	b.n	8017e82 <_dtoa_r+0x112>
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e7b3      	b.n	8017f0c <_dtoa_r+0x19c>
 8017fa4:	900f      	str	r0, [sp, #60]	; 0x3c
 8017fa6:	e7b2      	b.n	8017f0e <_dtoa_r+0x19e>
 8017fa8:	9b06      	ldr	r3, [sp, #24]
 8017faa:	eba3 0309 	sub.w	r3, r3, r9
 8017fae:	9306      	str	r3, [sp, #24]
 8017fb0:	f1c9 0300 	rsb	r3, r9, #0
 8017fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	930e      	str	r3, [sp, #56]	; 0x38
 8017fba:	e7bf      	b.n	8017f3c <_dtoa_r+0x1cc>
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	dc59      	bgt.n	801807a <_dtoa_r+0x30a>
 8017fc6:	f04f 0b01 	mov.w	fp, #1
 8017fca:	465b      	mov	r3, fp
 8017fcc:	f8cd b008 	str.w	fp, [sp, #8]
 8017fd0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017fd8:	6042      	str	r2, [r0, #4]
 8017fda:	2204      	movs	r2, #4
 8017fdc:	f102 0614 	add.w	r6, r2, #20
 8017fe0:	429e      	cmp	r6, r3
 8017fe2:	6841      	ldr	r1, [r0, #4]
 8017fe4:	d94f      	bls.n	8018086 <_dtoa_r+0x316>
 8017fe6:	4628      	mov	r0, r5
 8017fe8:	f001 f91a 	bl	8019220 <_Balloc>
 8017fec:	9008      	str	r0, [sp, #32]
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	d14d      	bne.n	801808e <_dtoa_r+0x31e>
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017ff8:	4b1d      	ldr	r3, [pc, #116]	; (8018070 <_dtoa_r+0x300>)
 8017ffa:	e6cd      	b.n	8017d98 <_dtoa_r+0x28>
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	e7de      	b.n	8017fbe <_dtoa_r+0x24e>
 8018000:	2300      	movs	r3, #0
 8018002:	930b      	str	r3, [sp, #44]	; 0x2c
 8018004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018006:	eb09 0b03 	add.w	fp, r9, r3
 801800a:	f10b 0301 	add.w	r3, fp, #1
 801800e:	2b01      	cmp	r3, #1
 8018010:	9302      	str	r3, [sp, #8]
 8018012:	bfb8      	it	lt
 8018014:	2301      	movlt	r3, #1
 8018016:	e7dd      	b.n	8017fd4 <_dtoa_r+0x264>
 8018018:	2301      	movs	r3, #1
 801801a:	e7f2      	b.n	8018002 <_dtoa_r+0x292>
 801801c:	2401      	movs	r4, #1
 801801e:	2300      	movs	r3, #0
 8018020:	940b      	str	r4, [sp, #44]	; 0x2c
 8018022:	9322      	str	r3, [sp, #136]	; 0x88
 8018024:	f04f 3bff 	mov.w	fp, #4294967295
 8018028:	2200      	movs	r2, #0
 801802a:	2312      	movs	r3, #18
 801802c:	f8cd b008 	str.w	fp, [sp, #8]
 8018030:	9223      	str	r2, [sp, #140]	; 0x8c
 8018032:	e7cf      	b.n	8017fd4 <_dtoa_r+0x264>
 8018034:	f3af 8000 	nop.w
 8018038:	636f4361 	.word	0x636f4361
 801803c:	3fd287a7 	.word	0x3fd287a7
 8018040:	8b60c8b3 	.word	0x8b60c8b3
 8018044:	3fc68a28 	.word	0x3fc68a28
 8018048:	509f79fb 	.word	0x509f79fb
 801804c:	3fd34413 	.word	0x3fd34413
 8018050:	0801a96e 	.word	0x0801a96e
 8018054:	0801a985 	.word	0x0801a985
 8018058:	7ff00000 	.word	0x7ff00000
 801805c:	0801a96a 	.word	0x0801a96a
 8018060:	0801a961 	.word	0x0801a961
 8018064:	0801a7e5 	.word	0x0801a7e5
 8018068:	3ff80000 	.word	0x3ff80000
 801806c:	0801ab00 	.word	0x0801ab00
 8018070:	0801a9e4 	.word	0x0801a9e4
 8018074:	2301      	movs	r3, #1
 8018076:	930b      	str	r3, [sp, #44]	; 0x2c
 8018078:	e7d4      	b.n	8018024 <_dtoa_r+0x2b4>
 801807a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801807e:	465b      	mov	r3, fp
 8018080:	f8cd b008 	str.w	fp, [sp, #8]
 8018084:	e7a6      	b.n	8017fd4 <_dtoa_r+0x264>
 8018086:	3101      	adds	r1, #1
 8018088:	6041      	str	r1, [r0, #4]
 801808a:	0052      	lsls	r2, r2, #1
 801808c:	e7a6      	b.n	8017fdc <_dtoa_r+0x26c>
 801808e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018090:	9a08      	ldr	r2, [sp, #32]
 8018092:	601a      	str	r2, [r3, #0]
 8018094:	9b02      	ldr	r3, [sp, #8]
 8018096:	2b0e      	cmp	r3, #14
 8018098:	f200 80a8 	bhi.w	80181ec <_dtoa_r+0x47c>
 801809c:	2c00      	cmp	r4, #0
 801809e:	f000 80a5 	beq.w	80181ec <_dtoa_r+0x47c>
 80180a2:	f1b9 0f00 	cmp.w	r9, #0
 80180a6:	dd34      	ble.n	8018112 <_dtoa_r+0x3a2>
 80180a8:	4a9a      	ldr	r2, [pc, #616]	; (8018314 <_dtoa_r+0x5a4>)
 80180aa:	f009 030f 	and.w	r3, r9, #15
 80180ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80180b2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80180b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80180ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80180be:	ea4f 1429 	mov.w	r4, r9, asr #4
 80180c2:	d016      	beq.n	80180f2 <_dtoa_r+0x382>
 80180c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80180c8:	4b93      	ldr	r3, [pc, #588]	; (8018318 <_dtoa_r+0x5a8>)
 80180ca:	2703      	movs	r7, #3
 80180cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80180d0:	f7e8 fb76 	bl	80007c0 <__aeabi_ddiv>
 80180d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80180d8:	f004 040f 	and.w	r4, r4, #15
 80180dc:	4e8e      	ldr	r6, [pc, #568]	; (8018318 <_dtoa_r+0x5a8>)
 80180de:	b954      	cbnz	r4, 80180f6 <_dtoa_r+0x386>
 80180e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80180e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180e8:	f7e8 fb6a 	bl	80007c0 <__aeabi_ddiv>
 80180ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80180f0:	e029      	b.n	8018146 <_dtoa_r+0x3d6>
 80180f2:	2702      	movs	r7, #2
 80180f4:	e7f2      	b.n	80180dc <_dtoa_r+0x36c>
 80180f6:	07e1      	lsls	r1, r4, #31
 80180f8:	d508      	bpl.n	801810c <_dtoa_r+0x39c>
 80180fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80180fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018102:	f7e8 fa33 	bl	800056c <__aeabi_dmul>
 8018106:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801810a:	3701      	adds	r7, #1
 801810c:	1064      	asrs	r4, r4, #1
 801810e:	3608      	adds	r6, #8
 8018110:	e7e5      	b.n	80180de <_dtoa_r+0x36e>
 8018112:	f000 80a5 	beq.w	8018260 <_dtoa_r+0x4f0>
 8018116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801811a:	f1c9 0400 	rsb	r4, r9, #0
 801811e:	4b7d      	ldr	r3, [pc, #500]	; (8018314 <_dtoa_r+0x5a4>)
 8018120:	f004 020f 	and.w	r2, r4, #15
 8018124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801812c:	f7e8 fa1e 	bl	800056c <__aeabi_dmul>
 8018130:	2702      	movs	r7, #2
 8018132:	2300      	movs	r3, #0
 8018134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018138:	4e77      	ldr	r6, [pc, #476]	; (8018318 <_dtoa_r+0x5a8>)
 801813a:	1124      	asrs	r4, r4, #4
 801813c:	2c00      	cmp	r4, #0
 801813e:	f040 8084 	bne.w	801824a <_dtoa_r+0x4da>
 8018142:	2b00      	cmp	r3, #0
 8018144:	d1d2      	bne.n	80180ec <_dtoa_r+0x37c>
 8018146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018148:	2b00      	cmp	r3, #0
 801814a:	f000 808b 	beq.w	8018264 <_dtoa_r+0x4f4>
 801814e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018152:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8018156:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801815a:	2200      	movs	r2, #0
 801815c:	4b6f      	ldr	r3, [pc, #444]	; (801831c <_dtoa_r+0x5ac>)
 801815e:	f7e8 fc77 	bl	8000a50 <__aeabi_dcmplt>
 8018162:	2800      	cmp	r0, #0
 8018164:	d07e      	beq.n	8018264 <_dtoa_r+0x4f4>
 8018166:	9b02      	ldr	r3, [sp, #8]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d07b      	beq.n	8018264 <_dtoa_r+0x4f4>
 801816c:	f1bb 0f00 	cmp.w	fp, #0
 8018170:	dd38      	ble.n	80181e4 <_dtoa_r+0x474>
 8018172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018176:	2200      	movs	r2, #0
 8018178:	4b69      	ldr	r3, [pc, #420]	; (8018320 <_dtoa_r+0x5b0>)
 801817a:	f7e8 f9f7 	bl	800056c <__aeabi_dmul>
 801817e:	465c      	mov	r4, fp
 8018180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018184:	f109 38ff 	add.w	r8, r9, #4294967295
 8018188:	3701      	adds	r7, #1
 801818a:	4638      	mov	r0, r7
 801818c:	f7e8 f984 	bl	8000498 <__aeabi_i2d>
 8018190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018194:	f7e8 f9ea 	bl	800056c <__aeabi_dmul>
 8018198:	2200      	movs	r2, #0
 801819a:	4b62      	ldr	r3, [pc, #392]	; (8018324 <_dtoa_r+0x5b4>)
 801819c:	f7e8 f830 	bl	8000200 <__adddf3>
 80181a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80181a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80181a8:	9611      	str	r6, [sp, #68]	; 0x44
 80181aa:	2c00      	cmp	r4, #0
 80181ac:	d15d      	bne.n	801826a <_dtoa_r+0x4fa>
 80181ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80181b2:	2200      	movs	r2, #0
 80181b4:	4b5c      	ldr	r3, [pc, #368]	; (8018328 <_dtoa_r+0x5b8>)
 80181b6:	f7e8 f821 	bl	80001fc <__aeabi_dsub>
 80181ba:	4602      	mov	r2, r0
 80181bc:	460b      	mov	r3, r1
 80181be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80181c2:	4633      	mov	r3, r6
 80181c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181c6:	f7e8 fc61 	bl	8000a8c <__aeabi_dcmpgt>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	f040 829e 	bne.w	801870c <_dtoa_r+0x99c>
 80181d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80181d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80181da:	f7e8 fc39 	bl	8000a50 <__aeabi_dcmplt>
 80181de:	2800      	cmp	r0, #0
 80181e0:	f040 8292 	bne.w	8018708 <_dtoa_r+0x998>
 80181e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80181e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80181ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	f2c0 8153 	blt.w	801849a <_dtoa_r+0x72a>
 80181f4:	f1b9 0f0e 	cmp.w	r9, #14
 80181f8:	f300 814f 	bgt.w	801849a <_dtoa_r+0x72a>
 80181fc:	4b45      	ldr	r3, [pc, #276]	; (8018314 <_dtoa_r+0x5a4>)
 80181fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018202:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018206:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801820a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801820c:	2b00      	cmp	r3, #0
 801820e:	f280 80db 	bge.w	80183c8 <_dtoa_r+0x658>
 8018212:	9b02      	ldr	r3, [sp, #8]
 8018214:	2b00      	cmp	r3, #0
 8018216:	f300 80d7 	bgt.w	80183c8 <_dtoa_r+0x658>
 801821a:	f040 8274 	bne.w	8018706 <_dtoa_r+0x996>
 801821e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018222:	2200      	movs	r2, #0
 8018224:	4b40      	ldr	r3, [pc, #256]	; (8018328 <_dtoa_r+0x5b8>)
 8018226:	f7e8 f9a1 	bl	800056c <__aeabi_dmul>
 801822a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801822e:	f7e8 fc23 	bl	8000a78 <__aeabi_dcmpge>
 8018232:	9c02      	ldr	r4, [sp, #8]
 8018234:	4626      	mov	r6, r4
 8018236:	2800      	cmp	r0, #0
 8018238:	f040 824a 	bne.w	80186d0 <_dtoa_r+0x960>
 801823c:	2331      	movs	r3, #49	; 0x31
 801823e:	9f08      	ldr	r7, [sp, #32]
 8018240:	f109 0901 	add.w	r9, r9, #1
 8018244:	f807 3b01 	strb.w	r3, [r7], #1
 8018248:	e246      	b.n	80186d8 <_dtoa_r+0x968>
 801824a:	07e2      	lsls	r2, r4, #31
 801824c:	d505      	bpl.n	801825a <_dtoa_r+0x4ea>
 801824e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018252:	f7e8 f98b 	bl	800056c <__aeabi_dmul>
 8018256:	2301      	movs	r3, #1
 8018258:	3701      	adds	r7, #1
 801825a:	1064      	asrs	r4, r4, #1
 801825c:	3608      	adds	r6, #8
 801825e:	e76d      	b.n	801813c <_dtoa_r+0x3cc>
 8018260:	2702      	movs	r7, #2
 8018262:	e770      	b.n	8018146 <_dtoa_r+0x3d6>
 8018264:	46c8      	mov	r8, r9
 8018266:	9c02      	ldr	r4, [sp, #8]
 8018268:	e78f      	b.n	801818a <_dtoa_r+0x41a>
 801826a:	9908      	ldr	r1, [sp, #32]
 801826c:	4b29      	ldr	r3, [pc, #164]	; (8018314 <_dtoa_r+0x5a4>)
 801826e:	4421      	add	r1, r4
 8018270:	9112      	str	r1, [sp, #72]	; 0x48
 8018272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018278:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801827c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018280:	2900      	cmp	r1, #0
 8018282:	d055      	beq.n	8018330 <_dtoa_r+0x5c0>
 8018284:	2000      	movs	r0, #0
 8018286:	4929      	ldr	r1, [pc, #164]	; (801832c <_dtoa_r+0x5bc>)
 8018288:	f7e8 fa9a 	bl	80007c0 <__aeabi_ddiv>
 801828c:	463b      	mov	r3, r7
 801828e:	4632      	mov	r2, r6
 8018290:	f7e7 ffb4 	bl	80001fc <__aeabi_dsub>
 8018294:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018298:	9f08      	ldr	r7, [sp, #32]
 801829a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801829e:	f7e8 fc15 	bl	8000acc <__aeabi_d2iz>
 80182a2:	4604      	mov	r4, r0
 80182a4:	f7e8 f8f8 	bl	8000498 <__aeabi_i2d>
 80182a8:	4602      	mov	r2, r0
 80182aa:	460b      	mov	r3, r1
 80182ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80182b0:	f7e7 ffa4 	bl	80001fc <__aeabi_dsub>
 80182b4:	4602      	mov	r2, r0
 80182b6:	460b      	mov	r3, r1
 80182b8:	3430      	adds	r4, #48	; 0x30
 80182ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80182be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80182c2:	f807 4b01 	strb.w	r4, [r7], #1
 80182c6:	f7e8 fbc3 	bl	8000a50 <__aeabi_dcmplt>
 80182ca:	2800      	cmp	r0, #0
 80182cc:	d174      	bne.n	80183b8 <_dtoa_r+0x648>
 80182ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80182d2:	2000      	movs	r0, #0
 80182d4:	4911      	ldr	r1, [pc, #68]	; (801831c <_dtoa_r+0x5ac>)
 80182d6:	f7e7 ff91 	bl	80001fc <__aeabi_dsub>
 80182da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80182de:	f7e8 fbb7 	bl	8000a50 <__aeabi_dcmplt>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	f040 80b6 	bne.w	8018454 <_dtoa_r+0x6e4>
 80182e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182ea:	429f      	cmp	r7, r3
 80182ec:	f43f af7a 	beq.w	80181e4 <_dtoa_r+0x474>
 80182f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80182f4:	2200      	movs	r2, #0
 80182f6:	4b0a      	ldr	r3, [pc, #40]	; (8018320 <_dtoa_r+0x5b0>)
 80182f8:	f7e8 f938 	bl	800056c <__aeabi_dmul>
 80182fc:	2200      	movs	r2, #0
 80182fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018306:	4b06      	ldr	r3, [pc, #24]	; (8018320 <_dtoa_r+0x5b0>)
 8018308:	f7e8 f930 	bl	800056c <__aeabi_dmul>
 801830c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018310:	e7c3      	b.n	801829a <_dtoa_r+0x52a>
 8018312:	bf00      	nop
 8018314:	0801ab00 	.word	0x0801ab00
 8018318:	0801aad8 	.word	0x0801aad8
 801831c:	3ff00000 	.word	0x3ff00000
 8018320:	40240000 	.word	0x40240000
 8018324:	401c0000 	.word	0x401c0000
 8018328:	40140000 	.word	0x40140000
 801832c:	3fe00000 	.word	0x3fe00000
 8018330:	4630      	mov	r0, r6
 8018332:	4639      	mov	r1, r7
 8018334:	f7e8 f91a 	bl	800056c <__aeabi_dmul>
 8018338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801833a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801833e:	9c08      	ldr	r4, [sp, #32]
 8018340:	9314      	str	r3, [sp, #80]	; 0x50
 8018342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018346:	f7e8 fbc1 	bl	8000acc <__aeabi_d2iz>
 801834a:	9015      	str	r0, [sp, #84]	; 0x54
 801834c:	f7e8 f8a4 	bl	8000498 <__aeabi_i2d>
 8018350:	4602      	mov	r2, r0
 8018352:	460b      	mov	r3, r1
 8018354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018358:	f7e7 ff50 	bl	80001fc <__aeabi_dsub>
 801835c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801835e:	4606      	mov	r6, r0
 8018360:	3330      	adds	r3, #48	; 0x30
 8018362:	f804 3b01 	strb.w	r3, [r4], #1
 8018366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018368:	460f      	mov	r7, r1
 801836a:	429c      	cmp	r4, r3
 801836c:	f04f 0200 	mov.w	r2, #0
 8018370:	d124      	bne.n	80183bc <_dtoa_r+0x64c>
 8018372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018376:	4bb3      	ldr	r3, [pc, #716]	; (8018644 <_dtoa_r+0x8d4>)
 8018378:	f7e7 ff42 	bl	8000200 <__adddf3>
 801837c:	4602      	mov	r2, r0
 801837e:	460b      	mov	r3, r1
 8018380:	4630      	mov	r0, r6
 8018382:	4639      	mov	r1, r7
 8018384:	f7e8 fb82 	bl	8000a8c <__aeabi_dcmpgt>
 8018388:	2800      	cmp	r0, #0
 801838a:	d162      	bne.n	8018452 <_dtoa_r+0x6e2>
 801838c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018390:	2000      	movs	r0, #0
 8018392:	49ac      	ldr	r1, [pc, #688]	; (8018644 <_dtoa_r+0x8d4>)
 8018394:	f7e7 ff32 	bl	80001fc <__aeabi_dsub>
 8018398:	4602      	mov	r2, r0
 801839a:	460b      	mov	r3, r1
 801839c:	4630      	mov	r0, r6
 801839e:	4639      	mov	r1, r7
 80183a0:	f7e8 fb56 	bl	8000a50 <__aeabi_dcmplt>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	f43f af1d 	beq.w	80181e4 <_dtoa_r+0x474>
 80183aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80183ac:	1e7b      	subs	r3, r7, #1
 80183ae:	9314      	str	r3, [sp, #80]	; 0x50
 80183b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80183b4:	2b30      	cmp	r3, #48	; 0x30
 80183b6:	d0f8      	beq.n	80183aa <_dtoa_r+0x63a>
 80183b8:	46c1      	mov	r9, r8
 80183ba:	e03a      	b.n	8018432 <_dtoa_r+0x6c2>
 80183bc:	4ba2      	ldr	r3, [pc, #648]	; (8018648 <_dtoa_r+0x8d8>)
 80183be:	f7e8 f8d5 	bl	800056c <__aeabi_dmul>
 80183c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80183c6:	e7bc      	b.n	8018342 <_dtoa_r+0x5d2>
 80183c8:	9f08      	ldr	r7, [sp, #32]
 80183ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80183ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80183d2:	f7e8 f9f5 	bl	80007c0 <__aeabi_ddiv>
 80183d6:	f7e8 fb79 	bl	8000acc <__aeabi_d2iz>
 80183da:	4604      	mov	r4, r0
 80183dc:	f7e8 f85c 	bl	8000498 <__aeabi_i2d>
 80183e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80183e4:	f7e8 f8c2 	bl	800056c <__aeabi_dmul>
 80183e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80183ec:	460b      	mov	r3, r1
 80183ee:	4602      	mov	r2, r0
 80183f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80183f4:	f7e7 ff02 	bl	80001fc <__aeabi_dsub>
 80183f8:	f807 6b01 	strb.w	r6, [r7], #1
 80183fc:	9e08      	ldr	r6, [sp, #32]
 80183fe:	9b02      	ldr	r3, [sp, #8]
 8018400:	1bbe      	subs	r6, r7, r6
 8018402:	42b3      	cmp	r3, r6
 8018404:	d13a      	bne.n	801847c <_dtoa_r+0x70c>
 8018406:	4602      	mov	r2, r0
 8018408:	460b      	mov	r3, r1
 801840a:	f7e7 fef9 	bl	8000200 <__adddf3>
 801840e:	4602      	mov	r2, r0
 8018410:	460b      	mov	r3, r1
 8018412:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801841a:	f7e8 fb37 	bl	8000a8c <__aeabi_dcmpgt>
 801841e:	bb58      	cbnz	r0, 8018478 <_dtoa_r+0x708>
 8018420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018428:	f7e8 fb08 	bl	8000a3c <__aeabi_dcmpeq>
 801842c:	b108      	cbz	r0, 8018432 <_dtoa_r+0x6c2>
 801842e:	07e1      	lsls	r1, r4, #31
 8018430:	d422      	bmi.n	8018478 <_dtoa_r+0x708>
 8018432:	4628      	mov	r0, r5
 8018434:	4651      	mov	r1, sl
 8018436:	f000 ff33 	bl	80192a0 <_Bfree>
 801843a:	2300      	movs	r3, #0
 801843c:	703b      	strb	r3, [r7, #0]
 801843e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018440:	f109 0001 	add.w	r0, r9, #1
 8018444:	6018      	str	r0, [r3, #0]
 8018446:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018448:	2b00      	cmp	r3, #0
 801844a:	f43f acdf 	beq.w	8017e0c <_dtoa_r+0x9c>
 801844e:	601f      	str	r7, [r3, #0]
 8018450:	e4dc      	b.n	8017e0c <_dtoa_r+0x9c>
 8018452:	4627      	mov	r7, r4
 8018454:	463b      	mov	r3, r7
 8018456:	461f      	mov	r7, r3
 8018458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801845c:	2a39      	cmp	r2, #57	; 0x39
 801845e:	d107      	bne.n	8018470 <_dtoa_r+0x700>
 8018460:	9a08      	ldr	r2, [sp, #32]
 8018462:	429a      	cmp	r2, r3
 8018464:	d1f7      	bne.n	8018456 <_dtoa_r+0x6e6>
 8018466:	2230      	movs	r2, #48	; 0x30
 8018468:	9908      	ldr	r1, [sp, #32]
 801846a:	f108 0801 	add.w	r8, r8, #1
 801846e:	700a      	strb	r2, [r1, #0]
 8018470:	781a      	ldrb	r2, [r3, #0]
 8018472:	3201      	adds	r2, #1
 8018474:	701a      	strb	r2, [r3, #0]
 8018476:	e79f      	b.n	80183b8 <_dtoa_r+0x648>
 8018478:	46c8      	mov	r8, r9
 801847a:	e7eb      	b.n	8018454 <_dtoa_r+0x6e4>
 801847c:	2200      	movs	r2, #0
 801847e:	4b72      	ldr	r3, [pc, #456]	; (8018648 <_dtoa_r+0x8d8>)
 8018480:	f7e8 f874 	bl	800056c <__aeabi_dmul>
 8018484:	4602      	mov	r2, r0
 8018486:	460b      	mov	r3, r1
 8018488:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801848c:	2200      	movs	r2, #0
 801848e:	2300      	movs	r3, #0
 8018490:	f7e8 fad4 	bl	8000a3c <__aeabi_dcmpeq>
 8018494:	2800      	cmp	r0, #0
 8018496:	d098      	beq.n	80183ca <_dtoa_r+0x65a>
 8018498:	e7cb      	b.n	8018432 <_dtoa_r+0x6c2>
 801849a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801849c:	2a00      	cmp	r2, #0
 801849e:	f000 80cd 	beq.w	801863c <_dtoa_r+0x8cc>
 80184a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80184a4:	2a01      	cmp	r2, #1
 80184a6:	f300 80af 	bgt.w	8018608 <_dtoa_r+0x898>
 80184aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80184ac:	2a00      	cmp	r2, #0
 80184ae:	f000 80a7 	beq.w	8018600 <_dtoa_r+0x890>
 80184b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80184b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80184b8:	9f06      	ldr	r7, [sp, #24]
 80184ba:	9a06      	ldr	r2, [sp, #24]
 80184bc:	2101      	movs	r1, #1
 80184be:	441a      	add	r2, r3
 80184c0:	9206      	str	r2, [sp, #24]
 80184c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184c4:	4628      	mov	r0, r5
 80184c6:	441a      	add	r2, r3
 80184c8:	9209      	str	r2, [sp, #36]	; 0x24
 80184ca:	f000 ffed 	bl	80194a8 <__i2b>
 80184ce:	4606      	mov	r6, r0
 80184d0:	2f00      	cmp	r7, #0
 80184d2:	dd0c      	ble.n	80184ee <_dtoa_r+0x77e>
 80184d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	dd09      	ble.n	80184ee <_dtoa_r+0x77e>
 80184da:	42bb      	cmp	r3, r7
 80184dc:	bfa8      	it	ge
 80184de:	463b      	movge	r3, r7
 80184e0:	9a06      	ldr	r2, [sp, #24]
 80184e2:	1aff      	subs	r7, r7, r3
 80184e4:	1ad2      	subs	r2, r2, r3
 80184e6:	9206      	str	r2, [sp, #24]
 80184e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	9309      	str	r3, [sp, #36]	; 0x24
 80184ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184f0:	b1f3      	cbz	r3, 8018530 <_dtoa_r+0x7c0>
 80184f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	f000 80a9 	beq.w	801864c <_dtoa_r+0x8dc>
 80184fa:	2c00      	cmp	r4, #0
 80184fc:	dd10      	ble.n	8018520 <_dtoa_r+0x7b0>
 80184fe:	4631      	mov	r1, r6
 8018500:	4622      	mov	r2, r4
 8018502:	4628      	mov	r0, r5
 8018504:	f001 f88a 	bl	801961c <__pow5mult>
 8018508:	4652      	mov	r2, sl
 801850a:	4601      	mov	r1, r0
 801850c:	4606      	mov	r6, r0
 801850e:	4628      	mov	r0, r5
 8018510:	f000 ffe0 	bl	80194d4 <__multiply>
 8018514:	4680      	mov	r8, r0
 8018516:	4651      	mov	r1, sl
 8018518:	4628      	mov	r0, r5
 801851a:	f000 fec1 	bl	80192a0 <_Bfree>
 801851e:	46c2      	mov	sl, r8
 8018520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018522:	1b1a      	subs	r2, r3, r4
 8018524:	d004      	beq.n	8018530 <_dtoa_r+0x7c0>
 8018526:	4651      	mov	r1, sl
 8018528:	4628      	mov	r0, r5
 801852a:	f001 f877 	bl	801961c <__pow5mult>
 801852e:	4682      	mov	sl, r0
 8018530:	2101      	movs	r1, #1
 8018532:	4628      	mov	r0, r5
 8018534:	f000 ffb8 	bl	80194a8 <__i2b>
 8018538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801853a:	4604      	mov	r4, r0
 801853c:	2b00      	cmp	r3, #0
 801853e:	f340 8087 	ble.w	8018650 <_dtoa_r+0x8e0>
 8018542:	461a      	mov	r2, r3
 8018544:	4601      	mov	r1, r0
 8018546:	4628      	mov	r0, r5
 8018548:	f001 f868 	bl	801961c <__pow5mult>
 801854c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801854e:	4604      	mov	r4, r0
 8018550:	2b01      	cmp	r3, #1
 8018552:	f340 8080 	ble.w	8018656 <_dtoa_r+0x8e6>
 8018556:	f04f 0800 	mov.w	r8, #0
 801855a:	6923      	ldr	r3, [r4, #16]
 801855c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018560:	6918      	ldr	r0, [r3, #16]
 8018562:	f000 ff53 	bl	801940c <__hi0bits>
 8018566:	f1c0 0020 	rsb	r0, r0, #32
 801856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801856c:	4418      	add	r0, r3
 801856e:	f010 001f 	ands.w	r0, r0, #31
 8018572:	f000 8092 	beq.w	801869a <_dtoa_r+0x92a>
 8018576:	f1c0 0320 	rsb	r3, r0, #32
 801857a:	2b04      	cmp	r3, #4
 801857c:	f340 808a 	ble.w	8018694 <_dtoa_r+0x924>
 8018580:	f1c0 001c 	rsb	r0, r0, #28
 8018584:	9b06      	ldr	r3, [sp, #24]
 8018586:	4407      	add	r7, r0
 8018588:	4403      	add	r3, r0
 801858a:	9306      	str	r3, [sp, #24]
 801858c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801858e:	4403      	add	r3, r0
 8018590:	9309      	str	r3, [sp, #36]	; 0x24
 8018592:	9b06      	ldr	r3, [sp, #24]
 8018594:	2b00      	cmp	r3, #0
 8018596:	dd05      	ble.n	80185a4 <_dtoa_r+0x834>
 8018598:	4651      	mov	r1, sl
 801859a:	461a      	mov	r2, r3
 801859c:	4628      	mov	r0, r5
 801859e:	f001 f897 	bl	80196d0 <__lshift>
 80185a2:	4682      	mov	sl, r0
 80185a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	dd05      	ble.n	80185b6 <_dtoa_r+0x846>
 80185aa:	4621      	mov	r1, r4
 80185ac:	461a      	mov	r2, r3
 80185ae:	4628      	mov	r0, r5
 80185b0:	f001 f88e 	bl	80196d0 <__lshift>
 80185b4:	4604      	mov	r4, r0
 80185b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d070      	beq.n	801869e <_dtoa_r+0x92e>
 80185bc:	4621      	mov	r1, r4
 80185be:	4650      	mov	r0, sl
 80185c0:	f001 f8f2 	bl	80197a8 <__mcmp>
 80185c4:	2800      	cmp	r0, #0
 80185c6:	da6a      	bge.n	801869e <_dtoa_r+0x92e>
 80185c8:	2300      	movs	r3, #0
 80185ca:	4651      	mov	r1, sl
 80185cc:	220a      	movs	r2, #10
 80185ce:	4628      	mov	r0, r5
 80185d0:	f000 fe88 	bl	80192e4 <__multadd>
 80185d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185d6:	4682      	mov	sl, r0
 80185d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f000 8193 	beq.w	8018908 <_dtoa_r+0xb98>
 80185e2:	4631      	mov	r1, r6
 80185e4:	2300      	movs	r3, #0
 80185e6:	220a      	movs	r2, #10
 80185e8:	4628      	mov	r0, r5
 80185ea:	f000 fe7b 	bl	80192e4 <__multadd>
 80185ee:	f1bb 0f00 	cmp.w	fp, #0
 80185f2:	4606      	mov	r6, r0
 80185f4:	f300 8093 	bgt.w	801871e <_dtoa_r+0x9ae>
 80185f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80185fa:	2b02      	cmp	r3, #2
 80185fc:	dc57      	bgt.n	80186ae <_dtoa_r+0x93e>
 80185fe:	e08e      	b.n	801871e <_dtoa_r+0x9ae>
 8018600:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018602:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018606:	e756      	b.n	80184b6 <_dtoa_r+0x746>
 8018608:	9b02      	ldr	r3, [sp, #8]
 801860a:	1e5c      	subs	r4, r3, #1
 801860c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801860e:	42a3      	cmp	r3, r4
 8018610:	bfb7      	itett	lt
 8018612:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018614:	1b1c      	subge	r4, r3, r4
 8018616:	1ae2      	sublt	r2, r4, r3
 8018618:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801861a:	bfbe      	ittt	lt
 801861c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801861e:	189b      	addlt	r3, r3, r2
 8018620:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018622:	9b02      	ldr	r3, [sp, #8]
 8018624:	bfb8      	it	lt
 8018626:	2400      	movlt	r4, #0
 8018628:	2b00      	cmp	r3, #0
 801862a:	bfbb      	ittet	lt
 801862c:	9b06      	ldrlt	r3, [sp, #24]
 801862e:	9a02      	ldrlt	r2, [sp, #8]
 8018630:	9f06      	ldrge	r7, [sp, #24]
 8018632:	1a9f      	sublt	r7, r3, r2
 8018634:	bfac      	ite	ge
 8018636:	9b02      	ldrge	r3, [sp, #8]
 8018638:	2300      	movlt	r3, #0
 801863a:	e73e      	b.n	80184ba <_dtoa_r+0x74a>
 801863c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801863e:	9f06      	ldr	r7, [sp, #24]
 8018640:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018642:	e745      	b.n	80184d0 <_dtoa_r+0x760>
 8018644:	3fe00000 	.word	0x3fe00000
 8018648:	40240000 	.word	0x40240000
 801864c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801864e:	e76a      	b.n	8018526 <_dtoa_r+0x7b6>
 8018650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018652:	2b01      	cmp	r3, #1
 8018654:	dc19      	bgt.n	801868a <_dtoa_r+0x91a>
 8018656:	9b04      	ldr	r3, [sp, #16]
 8018658:	b9bb      	cbnz	r3, 801868a <_dtoa_r+0x91a>
 801865a:	9b05      	ldr	r3, [sp, #20]
 801865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018660:	b99b      	cbnz	r3, 801868a <_dtoa_r+0x91a>
 8018662:	9b05      	ldr	r3, [sp, #20]
 8018664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018668:	0d1b      	lsrs	r3, r3, #20
 801866a:	051b      	lsls	r3, r3, #20
 801866c:	b183      	cbz	r3, 8018690 <_dtoa_r+0x920>
 801866e:	f04f 0801 	mov.w	r8, #1
 8018672:	9b06      	ldr	r3, [sp, #24]
 8018674:	3301      	adds	r3, #1
 8018676:	9306      	str	r3, [sp, #24]
 8018678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801867a:	3301      	adds	r3, #1
 801867c:	9309      	str	r3, [sp, #36]	; 0x24
 801867e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018680:	2b00      	cmp	r3, #0
 8018682:	f47f af6a 	bne.w	801855a <_dtoa_r+0x7ea>
 8018686:	2001      	movs	r0, #1
 8018688:	e76f      	b.n	801856a <_dtoa_r+0x7fa>
 801868a:	f04f 0800 	mov.w	r8, #0
 801868e:	e7f6      	b.n	801867e <_dtoa_r+0x90e>
 8018690:	4698      	mov	r8, r3
 8018692:	e7f4      	b.n	801867e <_dtoa_r+0x90e>
 8018694:	f43f af7d 	beq.w	8018592 <_dtoa_r+0x822>
 8018698:	4618      	mov	r0, r3
 801869a:	301c      	adds	r0, #28
 801869c:	e772      	b.n	8018584 <_dtoa_r+0x814>
 801869e:	9b02      	ldr	r3, [sp, #8]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	dc36      	bgt.n	8018712 <_dtoa_r+0x9a2>
 80186a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80186a6:	2b02      	cmp	r3, #2
 80186a8:	dd33      	ble.n	8018712 <_dtoa_r+0x9a2>
 80186aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80186ae:	f1bb 0f00 	cmp.w	fp, #0
 80186b2:	d10d      	bne.n	80186d0 <_dtoa_r+0x960>
 80186b4:	4621      	mov	r1, r4
 80186b6:	465b      	mov	r3, fp
 80186b8:	2205      	movs	r2, #5
 80186ba:	4628      	mov	r0, r5
 80186bc:	f000 fe12 	bl	80192e4 <__multadd>
 80186c0:	4601      	mov	r1, r0
 80186c2:	4604      	mov	r4, r0
 80186c4:	4650      	mov	r0, sl
 80186c6:	f001 f86f 	bl	80197a8 <__mcmp>
 80186ca:	2800      	cmp	r0, #0
 80186cc:	f73f adb6 	bgt.w	801823c <_dtoa_r+0x4cc>
 80186d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80186d2:	9f08      	ldr	r7, [sp, #32]
 80186d4:	ea6f 0903 	mvn.w	r9, r3
 80186d8:	f04f 0800 	mov.w	r8, #0
 80186dc:	4621      	mov	r1, r4
 80186de:	4628      	mov	r0, r5
 80186e0:	f000 fdde 	bl	80192a0 <_Bfree>
 80186e4:	2e00      	cmp	r6, #0
 80186e6:	f43f aea4 	beq.w	8018432 <_dtoa_r+0x6c2>
 80186ea:	f1b8 0f00 	cmp.w	r8, #0
 80186ee:	d005      	beq.n	80186fc <_dtoa_r+0x98c>
 80186f0:	45b0      	cmp	r8, r6
 80186f2:	d003      	beq.n	80186fc <_dtoa_r+0x98c>
 80186f4:	4641      	mov	r1, r8
 80186f6:	4628      	mov	r0, r5
 80186f8:	f000 fdd2 	bl	80192a0 <_Bfree>
 80186fc:	4631      	mov	r1, r6
 80186fe:	4628      	mov	r0, r5
 8018700:	f000 fdce 	bl	80192a0 <_Bfree>
 8018704:	e695      	b.n	8018432 <_dtoa_r+0x6c2>
 8018706:	2400      	movs	r4, #0
 8018708:	4626      	mov	r6, r4
 801870a:	e7e1      	b.n	80186d0 <_dtoa_r+0x960>
 801870c:	46c1      	mov	r9, r8
 801870e:	4626      	mov	r6, r4
 8018710:	e594      	b.n	801823c <_dtoa_r+0x4cc>
 8018712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018714:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018718:	2b00      	cmp	r3, #0
 801871a:	f000 80fc 	beq.w	8018916 <_dtoa_r+0xba6>
 801871e:	2f00      	cmp	r7, #0
 8018720:	dd05      	ble.n	801872e <_dtoa_r+0x9be>
 8018722:	4631      	mov	r1, r6
 8018724:	463a      	mov	r2, r7
 8018726:	4628      	mov	r0, r5
 8018728:	f000 ffd2 	bl	80196d0 <__lshift>
 801872c:	4606      	mov	r6, r0
 801872e:	f1b8 0f00 	cmp.w	r8, #0
 8018732:	d05c      	beq.n	80187ee <_dtoa_r+0xa7e>
 8018734:	4628      	mov	r0, r5
 8018736:	6871      	ldr	r1, [r6, #4]
 8018738:	f000 fd72 	bl	8019220 <_Balloc>
 801873c:	4607      	mov	r7, r0
 801873e:	b928      	cbnz	r0, 801874c <_dtoa_r+0x9dc>
 8018740:	4602      	mov	r2, r0
 8018742:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018746:	4b7e      	ldr	r3, [pc, #504]	; (8018940 <_dtoa_r+0xbd0>)
 8018748:	f7ff bb26 	b.w	8017d98 <_dtoa_r+0x28>
 801874c:	6932      	ldr	r2, [r6, #16]
 801874e:	f106 010c 	add.w	r1, r6, #12
 8018752:	3202      	adds	r2, #2
 8018754:	0092      	lsls	r2, r2, #2
 8018756:	300c      	adds	r0, #12
 8018758:	f7fd fba4 	bl	8015ea4 <memcpy>
 801875c:	2201      	movs	r2, #1
 801875e:	4639      	mov	r1, r7
 8018760:	4628      	mov	r0, r5
 8018762:	f000 ffb5 	bl	80196d0 <__lshift>
 8018766:	46b0      	mov	r8, r6
 8018768:	4606      	mov	r6, r0
 801876a:	9b08      	ldr	r3, [sp, #32]
 801876c:	3301      	adds	r3, #1
 801876e:	9302      	str	r3, [sp, #8]
 8018770:	9b08      	ldr	r3, [sp, #32]
 8018772:	445b      	add	r3, fp
 8018774:	930a      	str	r3, [sp, #40]	; 0x28
 8018776:	9b04      	ldr	r3, [sp, #16]
 8018778:	f003 0301 	and.w	r3, r3, #1
 801877c:	9309      	str	r3, [sp, #36]	; 0x24
 801877e:	9b02      	ldr	r3, [sp, #8]
 8018780:	4621      	mov	r1, r4
 8018782:	4650      	mov	r0, sl
 8018784:	f103 3bff 	add.w	fp, r3, #4294967295
 8018788:	f7ff fa62 	bl	8017c50 <quorem>
 801878c:	4603      	mov	r3, r0
 801878e:	4641      	mov	r1, r8
 8018790:	3330      	adds	r3, #48	; 0x30
 8018792:	9004      	str	r0, [sp, #16]
 8018794:	4650      	mov	r0, sl
 8018796:	930b      	str	r3, [sp, #44]	; 0x2c
 8018798:	f001 f806 	bl	80197a8 <__mcmp>
 801879c:	4632      	mov	r2, r6
 801879e:	9006      	str	r0, [sp, #24]
 80187a0:	4621      	mov	r1, r4
 80187a2:	4628      	mov	r0, r5
 80187a4:	f001 f81c 	bl	80197e0 <__mdiff>
 80187a8:	68c2      	ldr	r2, [r0, #12]
 80187aa:	4607      	mov	r7, r0
 80187ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187ae:	bb02      	cbnz	r2, 80187f2 <_dtoa_r+0xa82>
 80187b0:	4601      	mov	r1, r0
 80187b2:	4650      	mov	r0, sl
 80187b4:	f000 fff8 	bl	80197a8 <__mcmp>
 80187b8:	4602      	mov	r2, r0
 80187ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187bc:	4639      	mov	r1, r7
 80187be:	4628      	mov	r0, r5
 80187c0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80187c4:	f000 fd6c 	bl	80192a0 <_Bfree>
 80187c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80187ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80187cc:	9f02      	ldr	r7, [sp, #8]
 80187ce:	ea43 0102 	orr.w	r1, r3, r2
 80187d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187d4:	430b      	orrs	r3, r1
 80187d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187d8:	d10d      	bne.n	80187f6 <_dtoa_r+0xa86>
 80187da:	2b39      	cmp	r3, #57	; 0x39
 80187dc:	d027      	beq.n	801882e <_dtoa_r+0xabe>
 80187de:	9a06      	ldr	r2, [sp, #24]
 80187e0:	2a00      	cmp	r2, #0
 80187e2:	dd01      	ble.n	80187e8 <_dtoa_r+0xa78>
 80187e4:	9b04      	ldr	r3, [sp, #16]
 80187e6:	3331      	adds	r3, #49	; 0x31
 80187e8:	f88b 3000 	strb.w	r3, [fp]
 80187ec:	e776      	b.n	80186dc <_dtoa_r+0x96c>
 80187ee:	4630      	mov	r0, r6
 80187f0:	e7b9      	b.n	8018766 <_dtoa_r+0x9f6>
 80187f2:	2201      	movs	r2, #1
 80187f4:	e7e2      	b.n	80187bc <_dtoa_r+0xa4c>
 80187f6:	9906      	ldr	r1, [sp, #24]
 80187f8:	2900      	cmp	r1, #0
 80187fa:	db04      	blt.n	8018806 <_dtoa_r+0xa96>
 80187fc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80187fe:	4301      	orrs	r1, r0
 8018800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018802:	4301      	orrs	r1, r0
 8018804:	d120      	bne.n	8018848 <_dtoa_r+0xad8>
 8018806:	2a00      	cmp	r2, #0
 8018808:	ddee      	ble.n	80187e8 <_dtoa_r+0xa78>
 801880a:	4651      	mov	r1, sl
 801880c:	2201      	movs	r2, #1
 801880e:	4628      	mov	r0, r5
 8018810:	9302      	str	r3, [sp, #8]
 8018812:	f000 ff5d 	bl	80196d0 <__lshift>
 8018816:	4621      	mov	r1, r4
 8018818:	4682      	mov	sl, r0
 801881a:	f000 ffc5 	bl	80197a8 <__mcmp>
 801881e:	2800      	cmp	r0, #0
 8018820:	9b02      	ldr	r3, [sp, #8]
 8018822:	dc02      	bgt.n	801882a <_dtoa_r+0xaba>
 8018824:	d1e0      	bne.n	80187e8 <_dtoa_r+0xa78>
 8018826:	07da      	lsls	r2, r3, #31
 8018828:	d5de      	bpl.n	80187e8 <_dtoa_r+0xa78>
 801882a:	2b39      	cmp	r3, #57	; 0x39
 801882c:	d1da      	bne.n	80187e4 <_dtoa_r+0xa74>
 801882e:	2339      	movs	r3, #57	; 0x39
 8018830:	f88b 3000 	strb.w	r3, [fp]
 8018834:	463b      	mov	r3, r7
 8018836:	461f      	mov	r7, r3
 8018838:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801883c:	3b01      	subs	r3, #1
 801883e:	2a39      	cmp	r2, #57	; 0x39
 8018840:	d050      	beq.n	80188e4 <_dtoa_r+0xb74>
 8018842:	3201      	adds	r2, #1
 8018844:	701a      	strb	r2, [r3, #0]
 8018846:	e749      	b.n	80186dc <_dtoa_r+0x96c>
 8018848:	2a00      	cmp	r2, #0
 801884a:	dd03      	ble.n	8018854 <_dtoa_r+0xae4>
 801884c:	2b39      	cmp	r3, #57	; 0x39
 801884e:	d0ee      	beq.n	801882e <_dtoa_r+0xabe>
 8018850:	3301      	adds	r3, #1
 8018852:	e7c9      	b.n	80187e8 <_dtoa_r+0xa78>
 8018854:	9a02      	ldr	r2, [sp, #8]
 8018856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018858:	f802 3c01 	strb.w	r3, [r2, #-1]
 801885c:	428a      	cmp	r2, r1
 801885e:	d02a      	beq.n	80188b6 <_dtoa_r+0xb46>
 8018860:	4651      	mov	r1, sl
 8018862:	2300      	movs	r3, #0
 8018864:	220a      	movs	r2, #10
 8018866:	4628      	mov	r0, r5
 8018868:	f000 fd3c 	bl	80192e4 <__multadd>
 801886c:	45b0      	cmp	r8, r6
 801886e:	4682      	mov	sl, r0
 8018870:	f04f 0300 	mov.w	r3, #0
 8018874:	f04f 020a 	mov.w	r2, #10
 8018878:	4641      	mov	r1, r8
 801887a:	4628      	mov	r0, r5
 801887c:	d107      	bne.n	801888e <_dtoa_r+0xb1e>
 801887e:	f000 fd31 	bl	80192e4 <__multadd>
 8018882:	4680      	mov	r8, r0
 8018884:	4606      	mov	r6, r0
 8018886:	9b02      	ldr	r3, [sp, #8]
 8018888:	3301      	adds	r3, #1
 801888a:	9302      	str	r3, [sp, #8]
 801888c:	e777      	b.n	801877e <_dtoa_r+0xa0e>
 801888e:	f000 fd29 	bl	80192e4 <__multadd>
 8018892:	4631      	mov	r1, r6
 8018894:	4680      	mov	r8, r0
 8018896:	2300      	movs	r3, #0
 8018898:	220a      	movs	r2, #10
 801889a:	4628      	mov	r0, r5
 801889c:	f000 fd22 	bl	80192e4 <__multadd>
 80188a0:	4606      	mov	r6, r0
 80188a2:	e7f0      	b.n	8018886 <_dtoa_r+0xb16>
 80188a4:	f1bb 0f00 	cmp.w	fp, #0
 80188a8:	bfcc      	ite	gt
 80188aa:	465f      	movgt	r7, fp
 80188ac:	2701      	movle	r7, #1
 80188ae:	f04f 0800 	mov.w	r8, #0
 80188b2:	9a08      	ldr	r2, [sp, #32]
 80188b4:	4417      	add	r7, r2
 80188b6:	4651      	mov	r1, sl
 80188b8:	2201      	movs	r2, #1
 80188ba:	4628      	mov	r0, r5
 80188bc:	9302      	str	r3, [sp, #8]
 80188be:	f000 ff07 	bl	80196d0 <__lshift>
 80188c2:	4621      	mov	r1, r4
 80188c4:	4682      	mov	sl, r0
 80188c6:	f000 ff6f 	bl	80197a8 <__mcmp>
 80188ca:	2800      	cmp	r0, #0
 80188cc:	dcb2      	bgt.n	8018834 <_dtoa_r+0xac4>
 80188ce:	d102      	bne.n	80188d6 <_dtoa_r+0xb66>
 80188d0:	9b02      	ldr	r3, [sp, #8]
 80188d2:	07db      	lsls	r3, r3, #31
 80188d4:	d4ae      	bmi.n	8018834 <_dtoa_r+0xac4>
 80188d6:	463b      	mov	r3, r7
 80188d8:	461f      	mov	r7, r3
 80188da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80188de:	2a30      	cmp	r2, #48	; 0x30
 80188e0:	d0fa      	beq.n	80188d8 <_dtoa_r+0xb68>
 80188e2:	e6fb      	b.n	80186dc <_dtoa_r+0x96c>
 80188e4:	9a08      	ldr	r2, [sp, #32]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d1a5      	bne.n	8018836 <_dtoa_r+0xac6>
 80188ea:	2331      	movs	r3, #49	; 0x31
 80188ec:	f109 0901 	add.w	r9, r9, #1
 80188f0:	7013      	strb	r3, [r2, #0]
 80188f2:	e6f3      	b.n	80186dc <_dtoa_r+0x96c>
 80188f4:	4b13      	ldr	r3, [pc, #76]	; (8018944 <_dtoa_r+0xbd4>)
 80188f6:	f7ff baa7 	b.w	8017e48 <_dtoa_r+0xd8>
 80188fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	f47f aa80 	bne.w	8017e02 <_dtoa_r+0x92>
 8018902:	4b11      	ldr	r3, [pc, #68]	; (8018948 <_dtoa_r+0xbd8>)
 8018904:	f7ff baa0 	b.w	8017e48 <_dtoa_r+0xd8>
 8018908:	f1bb 0f00 	cmp.w	fp, #0
 801890c:	dc03      	bgt.n	8018916 <_dtoa_r+0xba6>
 801890e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018910:	2b02      	cmp	r3, #2
 8018912:	f73f aecc 	bgt.w	80186ae <_dtoa_r+0x93e>
 8018916:	9f08      	ldr	r7, [sp, #32]
 8018918:	4621      	mov	r1, r4
 801891a:	4650      	mov	r0, sl
 801891c:	f7ff f998 	bl	8017c50 <quorem>
 8018920:	9a08      	ldr	r2, [sp, #32]
 8018922:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018926:	f807 3b01 	strb.w	r3, [r7], #1
 801892a:	1aba      	subs	r2, r7, r2
 801892c:	4593      	cmp	fp, r2
 801892e:	ddb9      	ble.n	80188a4 <_dtoa_r+0xb34>
 8018930:	4651      	mov	r1, sl
 8018932:	2300      	movs	r3, #0
 8018934:	220a      	movs	r2, #10
 8018936:	4628      	mov	r0, r5
 8018938:	f000 fcd4 	bl	80192e4 <__multadd>
 801893c:	4682      	mov	sl, r0
 801893e:	e7eb      	b.n	8018918 <_dtoa_r+0xba8>
 8018940:	0801a9e4 	.word	0x0801a9e4
 8018944:	0801a7e4 	.word	0x0801a7e4
 8018948:	0801a961 	.word	0x0801a961

0801894c <__sflush_r>:
 801894c:	898a      	ldrh	r2, [r1, #12]
 801894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018952:	4605      	mov	r5, r0
 8018954:	0710      	lsls	r0, r2, #28
 8018956:	460c      	mov	r4, r1
 8018958:	d458      	bmi.n	8018a0c <__sflush_r+0xc0>
 801895a:	684b      	ldr	r3, [r1, #4]
 801895c:	2b00      	cmp	r3, #0
 801895e:	dc05      	bgt.n	801896c <__sflush_r+0x20>
 8018960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018962:	2b00      	cmp	r3, #0
 8018964:	dc02      	bgt.n	801896c <__sflush_r+0x20>
 8018966:	2000      	movs	r0, #0
 8018968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801896e:	2e00      	cmp	r6, #0
 8018970:	d0f9      	beq.n	8018966 <__sflush_r+0x1a>
 8018972:	2300      	movs	r3, #0
 8018974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018978:	682f      	ldr	r7, [r5, #0]
 801897a:	602b      	str	r3, [r5, #0]
 801897c:	d032      	beq.n	80189e4 <__sflush_r+0x98>
 801897e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018980:	89a3      	ldrh	r3, [r4, #12]
 8018982:	075a      	lsls	r2, r3, #29
 8018984:	d505      	bpl.n	8018992 <__sflush_r+0x46>
 8018986:	6863      	ldr	r3, [r4, #4]
 8018988:	1ac0      	subs	r0, r0, r3
 801898a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801898c:	b10b      	cbz	r3, 8018992 <__sflush_r+0x46>
 801898e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018990:	1ac0      	subs	r0, r0, r3
 8018992:	2300      	movs	r3, #0
 8018994:	4602      	mov	r2, r0
 8018996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018998:	4628      	mov	r0, r5
 801899a:	6a21      	ldr	r1, [r4, #32]
 801899c:	47b0      	blx	r6
 801899e:	1c43      	adds	r3, r0, #1
 80189a0:	89a3      	ldrh	r3, [r4, #12]
 80189a2:	d106      	bne.n	80189b2 <__sflush_r+0x66>
 80189a4:	6829      	ldr	r1, [r5, #0]
 80189a6:	291d      	cmp	r1, #29
 80189a8:	d82c      	bhi.n	8018a04 <__sflush_r+0xb8>
 80189aa:	4a2a      	ldr	r2, [pc, #168]	; (8018a54 <__sflush_r+0x108>)
 80189ac:	40ca      	lsrs	r2, r1
 80189ae:	07d6      	lsls	r6, r2, #31
 80189b0:	d528      	bpl.n	8018a04 <__sflush_r+0xb8>
 80189b2:	2200      	movs	r2, #0
 80189b4:	6062      	str	r2, [r4, #4]
 80189b6:	6922      	ldr	r2, [r4, #16]
 80189b8:	04d9      	lsls	r1, r3, #19
 80189ba:	6022      	str	r2, [r4, #0]
 80189bc:	d504      	bpl.n	80189c8 <__sflush_r+0x7c>
 80189be:	1c42      	adds	r2, r0, #1
 80189c0:	d101      	bne.n	80189c6 <__sflush_r+0x7a>
 80189c2:	682b      	ldr	r3, [r5, #0]
 80189c4:	b903      	cbnz	r3, 80189c8 <__sflush_r+0x7c>
 80189c6:	6560      	str	r0, [r4, #84]	; 0x54
 80189c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189ca:	602f      	str	r7, [r5, #0]
 80189cc:	2900      	cmp	r1, #0
 80189ce:	d0ca      	beq.n	8018966 <__sflush_r+0x1a>
 80189d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189d4:	4299      	cmp	r1, r3
 80189d6:	d002      	beq.n	80189de <__sflush_r+0x92>
 80189d8:	4628      	mov	r0, r5
 80189da:	f7fd fa79 	bl	8015ed0 <_free_r>
 80189de:	2000      	movs	r0, #0
 80189e0:	6360      	str	r0, [r4, #52]	; 0x34
 80189e2:	e7c1      	b.n	8018968 <__sflush_r+0x1c>
 80189e4:	6a21      	ldr	r1, [r4, #32]
 80189e6:	2301      	movs	r3, #1
 80189e8:	4628      	mov	r0, r5
 80189ea:	47b0      	blx	r6
 80189ec:	1c41      	adds	r1, r0, #1
 80189ee:	d1c7      	bne.n	8018980 <__sflush_r+0x34>
 80189f0:	682b      	ldr	r3, [r5, #0]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d0c4      	beq.n	8018980 <__sflush_r+0x34>
 80189f6:	2b1d      	cmp	r3, #29
 80189f8:	d001      	beq.n	80189fe <__sflush_r+0xb2>
 80189fa:	2b16      	cmp	r3, #22
 80189fc:	d101      	bne.n	8018a02 <__sflush_r+0xb6>
 80189fe:	602f      	str	r7, [r5, #0]
 8018a00:	e7b1      	b.n	8018966 <__sflush_r+0x1a>
 8018a02:	89a3      	ldrh	r3, [r4, #12]
 8018a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a08:	81a3      	strh	r3, [r4, #12]
 8018a0a:	e7ad      	b.n	8018968 <__sflush_r+0x1c>
 8018a0c:	690f      	ldr	r7, [r1, #16]
 8018a0e:	2f00      	cmp	r7, #0
 8018a10:	d0a9      	beq.n	8018966 <__sflush_r+0x1a>
 8018a12:	0793      	lsls	r3, r2, #30
 8018a14:	bf18      	it	ne
 8018a16:	2300      	movne	r3, #0
 8018a18:	680e      	ldr	r6, [r1, #0]
 8018a1a:	bf08      	it	eq
 8018a1c:	694b      	ldreq	r3, [r1, #20]
 8018a1e:	eba6 0807 	sub.w	r8, r6, r7
 8018a22:	600f      	str	r7, [r1, #0]
 8018a24:	608b      	str	r3, [r1, #8]
 8018a26:	f1b8 0f00 	cmp.w	r8, #0
 8018a2a:	dd9c      	ble.n	8018966 <__sflush_r+0x1a>
 8018a2c:	4643      	mov	r3, r8
 8018a2e:	463a      	mov	r2, r7
 8018a30:	4628      	mov	r0, r5
 8018a32:	6a21      	ldr	r1, [r4, #32]
 8018a34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018a36:	47b0      	blx	r6
 8018a38:	2800      	cmp	r0, #0
 8018a3a:	dc06      	bgt.n	8018a4a <__sflush_r+0xfe>
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a46:	81a3      	strh	r3, [r4, #12]
 8018a48:	e78e      	b.n	8018968 <__sflush_r+0x1c>
 8018a4a:	4407      	add	r7, r0
 8018a4c:	eba8 0800 	sub.w	r8, r8, r0
 8018a50:	e7e9      	b.n	8018a26 <__sflush_r+0xda>
 8018a52:	bf00      	nop
 8018a54:	20400001 	.word	0x20400001

08018a58 <_fflush_r>:
 8018a58:	b538      	push	{r3, r4, r5, lr}
 8018a5a:	690b      	ldr	r3, [r1, #16]
 8018a5c:	4605      	mov	r5, r0
 8018a5e:	460c      	mov	r4, r1
 8018a60:	b913      	cbnz	r3, 8018a68 <_fflush_r+0x10>
 8018a62:	2500      	movs	r5, #0
 8018a64:	4628      	mov	r0, r5
 8018a66:	bd38      	pop	{r3, r4, r5, pc}
 8018a68:	b118      	cbz	r0, 8018a72 <_fflush_r+0x1a>
 8018a6a:	6983      	ldr	r3, [r0, #24]
 8018a6c:	b90b      	cbnz	r3, 8018a72 <_fflush_r+0x1a>
 8018a6e:	f7fd f943 	bl	8015cf8 <__sinit>
 8018a72:	4b14      	ldr	r3, [pc, #80]	; (8018ac4 <_fflush_r+0x6c>)
 8018a74:	429c      	cmp	r4, r3
 8018a76:	d11b      	bne.n	8018ab0 <_fflush_r+0x58>
 8018a78:	686c      	ldr	r4, [r5, #4]
 8018a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d0ef      	beq.n	8018a62 <_fflush_r+0xa>
 8018a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018a84:	07d0      	lsls	r0, r2, #31
 8018a86:	d404      	bmi.n	8018a92 <_fflush_r+0x3a>
 8018a88:	0599      	lsls	r1, r3, #22
 8018a8a:	d402      	bmi.n	8018a92 <_fflush_r+0x3a>
 8018a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a8e:	f7fd f9f6 	bl	8015e7e <__retarget_lock_acquire_recursive>
 8018a92:	4628      	mov	r0, r5
 8018a94:	4621      	mov	r1, r4
 8018a96:	f7ff ff59 	bl	801894c <__sflush_r>
 8018a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018a9c:	4605      	mov	r5, r0
 8018a9e:	07da      	lsls	r2, r3, #31
 8018aa0:	d4e0      	bmi.n	8018a64 <_fflush_r+0xc>
 8018aa2:	89a3      	ldrh	r3, [r4, #12]
 8018aa4:	059b      	lsls	r3, r3, #22
 8018aa6:	d4dd      	bmi.n	8018a64 <_fflush_r+0xc>
 8018aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018aaa:	f7fd f9e9 	bl	8015e80 <__retarget_lock_release_recursive>
 8018aae:	e7d9      	b.n	8018a64 <_fflush_r+0xc>
 8018ab0:	4b05      	ldr	r3, [pc, #20]	; (8018ac8 <_fflush_r+0x70>)
 8018ab2:	429c      	cmp	r4, r3
 8018ab4:	d101      	bne.n	8018aba <_fflush_r+0x62>
 8018ab6:	68ac      	ldr	r4, [r5, #8]
 8018ab8:	e7df      	b.n	8018a7a <_fflush_r+0x22>
 8018aba:	4b04      	ldr	r3, [pc, #16]	; (8018acc <_fflush_r+0x74>)
 8018abc:	429c      	cmp	r4, r3
 8018abe:	bf08      	it	eq
 8018ac0:	68ec      	ldreq	r4, [r5, #12]
 8018ac2:	e7da      	b.n	8018a7a <_fflush_r+0x22>
 8018ac4:	0801a790 	.word	0x0801a790
 8018ac8:	0801a7b0 	.word	0x0801a7b0
 8018acc:	0801a770 	.word	0x0801a770

08018ad0 <rshift>:
 8018ad0:	6903      	ldr	r3, [r0, #16]
 8018ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ad6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018ada:	f100 0414 	add.w	r4, r0, #20
 8018ade:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018ae2:	dd46      	ble.n	8018b72 <rshift+0xa2>
 8018ae4:	f011 011f 	ands.w	r1, r1, #31
 8018ae8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018aec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018af0:	d10c      	bne.n	8018b0c <rshift+0x3c>
 8018af2:	4629      	mov	r1, r5
 8018af4:	f100 0710 	add.w	r7, r0, #16
 8018af8:	42b1      	cmp	r1, r6
 8018afa:	d335      	bcc.n	8018b68 <rshift+0x98>
 8018afc:	1a9b      	subs	r3, r3, r2
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	1eea      	subs	r2, r5, #3
 8018b02:	4296      	cmp	r6, r2
 8018b04:	bf38      	it	cc
 8018b06:	2300      	movcc	r3, #0
 8018b08:	4423      	add	r3, r4
 8018b0a:	e015      	b.n	8018b38 <rshift+0x68>
 8018b0c:	46a1      	mov	r9, r4
 8018b0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018b12:	f1c1 0820 	rsb	r8, r1, #32
 8018b16:	40cf      	lsrs	r7, r1
 8018b18:	f105 0e04 	add.w	lr, r5, #4
 8018b1c:	4576      	cmp	r6, lr
 8018b1e:	46f4      	mov	ip, lr
 8018b20:	d816      	bhi.n	8018b50 <rshift+0x80>
 8018b22:	1a9b      	subs	r3, r3, r2
 8018b24:	009a      	lsls	r2, r3, #2
 8018b26:	3a04      	subs	r2, #4
 8018b28:	3501      	adds	r5, #1
 8018b2a:	42ae      	cmp	r6, r5
 8018b2c:	bf38      	it	cc
 8018b2e:	2200      	movcc	r2, #0
 8018b30:	18a3      	adds	r3, r4, r2
 8018b32:	50a7      	str	r7, [r4, r2]
 8018b34:	b107      	cbz	r7, 8018b38 <rshift+0x68>
 8018b36:	3304      	adds	r3, #4
 8018b38:	42a3      	cmp	r3, r4
 8018b3a:	eba3 0204 	sub.w	r2, r3, r4
 8018b3e:	bf08      	it	eq
 8018b40:	2300      	moveq	r3, #0
 8018b42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018b46:	6102      	str	r2, [r0, #16]
 8018b48:	bf08      	it	eq
 8018b4a:	6143      	streq	r3, [r0, #20]
 8018b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b50:	f8dc c000 	ldr.w	ip, [ip]
 8018b54:	fa0c fc08 	lsl.w	ip, ip, r8
 8018b58:	ea4c 0707 	orr.w	r7, ip, r7
 8018b5c:	f849 7b04 	str.w	r7, [r9], #4
 8018b60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018b64:	40cf      	lsrs	r7, r1
 8018b66:	e7d9      	b.n	8018b1c <rshift+0x4c>
 8018b68:	f851 cb04 	ldr.w	ip, [r1], #4
 8018b6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8018b70:	e7c2      	b.n	8018af8 <rshift+0x28>
 8018b72:	4623      	mov	r3, r4
 8018b74:	e7e0      	b.n	8018b38 <rshift+0x68>

08018b76 <__hexdig_fun>:
 8018b76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018b7a:	2b09      	cmp	r3, #9
 8018b7c:	d802      	bhi.n	8018b84 <__hexdig_fun+0xe>
 8018b7e:	3820      	subs	r0, #32
 8018b80:	b2c0      	uxtb	r0, r0
 8018b82:	4770      	bx	lr
 8018b84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018b88:	2b05      	cmp	r3, #5
 8018b8a:	d801      	bhi.n	8018b90 <__hexdig_fun+0x1a>
 8018b8c:	3847      	subs	r0, #71	; 0x47
 8018b8e:	e7f7      	b.n	8018b80 <__hexdig_fun+0xa>
 8018b90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018b94:	2b05      	cmp	r3, #5
 8018b96:	d801      	bhi.n	8018b9c <__hexdig_fun+0x26>
 8018b98:	3827      	subs	r0, #39	; 0x27
 8018b9a:	e7f1      	b.n	8018b80 <__hexdig_fun+0xa>
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	4770      	bx	lr

08018ba0 <__gethex>:
 8018ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ba4:	b08b      	sub	sp, #44	; 0x2c
 8018ba6:	9306      	str	r3, [sp, #24]
 8018ba8:	4bb9      	ldr	r3, [pc, #740]	; (8018e90 <__gethex+0x2f0>)
 8018baa:	9002      	str	r0, [sp, #8]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	468b      	mov	fp, r1
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	4690      	mov	r8, r2
 8018bb4:	9303      	str	r3, [sp, #12]
 8018bb6:	f7e7 fb15 	bl	80001e4 <strlen>
 8018bba:	4682      	mov	sl, r0
 8018bbc:	9b03      	ldr	r3, [sp, #12]
 8018bbe:	f8db 2000 	ldr.w	r2, [fp]
 8018bc2:	4403      	add	r3, r0
 8018bc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018bc8:	9307      	str	r3, [sp, #28]
 8018bca:	1c93      	adds	r3, r2, #2
 8018bcc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018bd0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018bd4:	32fe      	adds	r2, #254	; 0xfe
 8018bd6:	18d1      	adds	r1, r2, r3
 8018bd8:	461f      	mov	r7, r3
 8018bda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018bde:	9101      	str	r1, [sp, #4]
 8018be0:	2830      	cmp	r0, #48	; 0x30
 8018be2:	d0f8      	beq.n	8018bd6 <__gethex+0x36>
 8018be4:	f7ff ffc7 	bl	8018b76 <__hexdig_fun>
 8018be8:	4604      	mov	r4, r0
 8018bea:	2800      	cmp	r0, #0
 8018bec:	d13a      	bne.n	8018c64 <__gethex+0xc4>
 8018bee:	4652      	mov	r2, sl
 8018bf0:	4638      	mov	r0, r7
 8018bf2:	9903      	ldr	r1, [sp, #12]
 8018bf4:	f001 f94e 	bl	8019e94 <strncmp>
 8018bf8:	4605      	mov	r5, r0
 8018bfa:	2800      	cmp	r0, #0
 8018bfc:	d166      	bne.n	8018ccc <__gethex+0x12c>
 8018bfe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018c02:	eb07 060a 	add.w	r6, r7, sl
 8018c06:	f7ff ffb6 	bl	8018b76 <__hexdig_fun>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d060      	beq.n	8018cd0 <__gethex+0x130>
 8018c0e:	4633      	mov	r3, r6
 8018c10:	7818      	ldrb	r0, [r3, #0]
 8018c12:	461f      	mov	r7, r3
 8018c14:	2830      	cmp	r0, #48	; 0x30
 8018c16:	f103 0301 	add.w	r3, r3, #1
 8018c1a:	d0f9      	beq.n	8018c10 <__gethex+0x70>
 8018c1c:	f7ff ffab 	bl	8018b76 <__hexdig_fun>
 8018c20:	2301      	movs	r3, #1
 8018c22:	fab0 f480 	clz	r4, r0
 8018c26:	4635      	mov	r5, r6
 8018c28:	0964      	lsrs	r4, r4, #5
 8018c2a:	9301      	str	r3, [sp, #4]
 8018c2c:	463a      	mov	r2, r7
 8018c2e:	4616      	mov	r6, r2
 8018c30:	7830      	ldrb	r0, [r6, #0]
 8018c32:	3201      	adds	r2, #1
 8018c34:	f7ff ff9f 	bl	8018b76 <__hexdig_fun>
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	d1f8      	bne.n	8018c2e <__gethex+0x8e>
 8018c3c:	4652      	mov	r2, sl
 8018c3e:	4630      	mov	r0, r6
 8018c40:	9903      	ldr	r1, [sp, #12]
 8018c42:	f001 f927 	bl	8019e94 <strncmp>
 8018c46:	b980      	cbnz	r0, 8018c6a <__gethex+0xca>
 8018c48:	b94d      	cbnz	r5, 8018c5e <__gethex+0xbe>
 8018c4a:	eb06 050a 	add.w	r5, r6, sl
 8018c4e:	462a      	mov	r2, r5
 8018c50:	4616      	mov	r6, r2
 8018c52:	7830      	ldrb	r0, [r6, #0]
 8018c54:	3201      	adds	r2, #1
 8018c56:	f7ff ff8e 	bl	8018b76 <__hexdig_fun>
 8018c5a:	2800      	cmp	r0, #0
 8018c5c:	d1f8      	bne.n	8018c50 <__gethex+0xb0>
 8018c5e:	1bad      	subs	r5, r5, r6
 8018c60:	00ad      	lsls	r5, r5, #2
 8018c62:	e004      	b.n	8018c6e <__gethex+0xce>
 8018c64:	2400      	movs	r4, #0
 8018c66:	4625      	mov	r5, r4
 8018c68:	e7e0      	b.n	8018c2c <__gethex+0x8c>
 8018c6a:	2d00      	cmp	r5, #0
 8018c6c:	d1f7      	bne.n	8018c5e <__gethex+0xbe>
 8018c6e:	7833      	ldrb	r3, [r6, #0]
 8018c70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018c74:	2b50      	cmp	r3, #80	; 0x50
 8018c76:	d139      	bne.n	8018cec <__gethex+0x14c>
 8018c78:	7873      	ldrb	r3, [r6, #1]
 8018c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8018c7c:	d02a      	beq.n	8018cd4 <__gethex+0x134>
 8018c7e:	2b2d      	cmp	r3, #45	; 0x2d
 8018c80:	d02c      	beq.n	8018cdc <__gethex+0x13c>
 8018c82:	f04f 0900 	mov.w	r9, #0
 8018c86:	1c71      	adds	r1, r6, #1
 8018c88:	7808      	ldrb	r0, [r1, #0]
 8018c8a:	f7ff ff74 	bl	8018b76 <__hexdig_fun>
 8018c8e:	1e43      	subs	r3, r0, #1
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	2b18      	cmp	r3, #24
 8018c94:	d82a      	bhi.n	8018cec <__gethex+0x14c>
 8018c96:	f1a0 0210 	sub.w	r2, r0, #16
 8018c9a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018c9e:	f7ff ff6a 	bl	8018b76 <__hexdig_fun>
 8018ca2:	1e43      	subs	r3, r0, #1
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	2b18      	cmp	r3, #24
 8018ca8:	d91b      	bls.n	8018ce2 <__gethex+0x142>
 8018caa:	f1b9 0f00 	cmp.w	r9, #0
 8018cae:	d000      	beq.n	8018cb2 <__gethex+0x112>
 8018cb0:	4252      	negs	r2, r2
 8018cb2:	4415      	add	r5, r2
 8018cb4:	f8cb 1000 	str.w	r1, [fp]
 8018cb8:	b1d4      	cbz	r4, 8018cf0 <__gethex+0x150>
 8018cba:	9b01      	ldr	r3, [sp, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	bf14      	ite	ne
 8018cc0:	2700      	movne	r7, #0
 8018cc2:	2706      	moveq	r7, #6
 8018cc4:	4638      	mov	r0, r7
 8018cc6:	b00b      	add	sp, #44	; 0x2c
 8018cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ccc:	463e      	mov	r6, r7
 8018cce:	4625      	mov	r5, r4
 8018cd0:	2401      	movs	r4, #1
 8018cd2:	e7cc      	b.n	8018c6e <__gethex+0xce>
 8018cd4:	f04f 0900 	mov.w	r9, #0
 8018cd8:	1cb1      	adds	r1, r6, #2
 8018cda:	e7d5      	b.n	8018c88 <__gethex+0xe8>
 8018cdc:	f04f 0901 	mov.w	r9, #1
 8018ce0:	e7fa      	b.n	8018cd8 <__gethex+0x138>
 8018ce2:	230a      	movs	r3, #10
 8018ce4:	fb03 0202 	mla	r2, r3, r2, r0
 8018ce8:	3a10      	subs	r2, #16
 8018cea:	e7d6      	b.n	8018c9a <__gethex+0xfa>
 8018cec:	4631      	mov	r1, r6
 8018cee:	e7e1      	b.n	8018cb4 <__gethex+0x114>
 8018cf0:	4621      	mov	r1, r4
 8018cf2:	1bf3      	subs	r3, r6, r7
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	2b07      	cmp	r3, #7
 8018cf8:	dc0a      	bgt.n	8018d10 <__gethex+0x170>
 8018cfa:	9802      	ldr	r0, [sp, #8]
 8018cfc:	f000 fa90 	bl	8019220 <_Balloc>
 8018d00:	4604      	mov	r4, r0
 8018d02:	b940      	cbnz	r0, 8018d16 <__gethex+0x176>
 8018d04:	4602      	mov	r2, r0
 8018d06:	21de      	movs	r1, #222	; 0xde
 8018d08:	4b62      	ldr	r3, [pc, #392]	; (8018e94 <__gethex+0x2f4>)
 8018d0a:	4863      	ldr	r0, [pc, #396]	; (8018e98 <__gethex+0x2f8>)
 8018d0c:	f001 f8e2 	bl	8019ed4 <__assert_func>
 8018d10:	3101      	adds	r1, #1
 8018d12:	105b      	asrs	r3, r3, #1
 8018d14:	e7ef      	b.n	8018cf6 <__gethex+0x156>
 8018d16:	f04f 0b00 	mov.w	fp, #0
 8018d1a:	f100 0914 	add.w	r9, r0, #20
 8018d1e:	f1ca 0301 	rsb	r3, sl, #1
 8018d22:	f8cd 9010 	str.w	r9, [sp, #16]
 8018d26:	f8cd b004 	str.w	fp, [sp, #4]
 8018d2a:	9308      	str	r3, [sp, #32]
 8018d2c:	42b7      	cmp	r7, r6
 8018d2e:	d33f      	bcc.n	8018db0 <__gethex+0x210>
 8018d30:	9f04      	ldr	r7, [sp, #16]
 8018d32:	9b01      	ldr	r3, [sp, #4]
 8018d34:	f847 3b04 	str.w	r3, [r7], #4
 8018d38:	eba7 0709 	sub.w	r7, r7, r9
 8018d3c:	10bf      	asrs	r7, r7, #2
 8018d3e:	6127      	str	r7, [r4, #16]
 8018d40:	4618      	mov	r0, r3
 8018d42:	f000 fb63 	bl	801940c <__hi0bits>
 8018d46:	017f      	lsls	r7, r7, #5
 8018d48:	f8d8 6000 	ldr.w	r6, [r8]
 8018d4c:	1a3f      	subs	r7, r7, r0
 8018d4e:	42b7      	cmp	r7, r6
 8018d50:	dd62      	ble.n	8018e18 <__gethex+0x278>
 8018d52:	1bbf      	subs	r7, r7, r6
 8018d54:	4639      	mov	r1, r7
 8018d56:	4620      	mov	r0, r4
 8018d58:	f000 fef9 	bl	8019b4e <__any_on>
 8018d5c:	4682      	mov	sl, r0
 8018d5e:	b1a8      	cbz	r0, 8018d8c <__gethex+0x1ec>
 8018d60:	f04f 0a01 	mov.w	sl, #1
 8018d64:	1e7b      	subs	r3, r7, #1
 8018d66:	1159      	asrs	r1, r3, #5
 8018d68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018d6c:	f003 021f 	and.w	r2, r3, #31
 8018d70:	fa0a f202 	lsl.w	r2, sl, r2
 8018d74:	420a      	tst	r2, r1
 8018d76:	d009      	beq.n	8018d8c <__gethex+0x1ec>
 8018d78:	4553      	cmp	r3, sl
 8018d7a:	dd05      	ble.n	8018d88 <__gethex+0x1e8>
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	1eb9      	subs	r1, r7, #2
 8018d80:	f000 fee5 	bl	8019b4e <__any_on>
 8018d84:	2800      	cmp	r0, #0
 8018d86:	d144      	bne.n	8018e12 <__gethex+0x272>
 8018d88:	f04f 0a02 	mov.w	sl, #2
 8018d8c:	4639      	mov	r1, r7
 8018d8e:	4620      	mov	r0, r4
 8018d90:	f7ff fe9e 	bl	8018ad0 <rshift>
 8018d94:	443d      	add	r5, r7
 8018d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d9a:	42ab      	cmp	r3, r5
 8018d9c:	da4a      	bge.n	8018e34 <__gethex+0x294>
 8018d9e:	4621      	mov	r1, r4
 8018da0:	9802      	ldr	r0, [sp, #8]
 8018da2:	f000 fa7d 	bl	80192a0 <_Bfree>
 8018da6:	2300      	movs	r3, #0
 8018da8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018daa:	27a3      	movs	r7, #163	; 0xa3
 8018dac:	6013      	str	r3, [r2, #0]
 8018dae:	e789      	b.n	8018cc4 <__gethex+0x124>
 8018db0:	1e73      	subs	r3, r6, #1
 8018db2:	9a07      	ldr	r2, [sp, #28]
 8018db4:	9305      	str	r3, [sp, #20]
 8018db6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018dba:	4293      	cmp	r3, r2
 8018dbc:	d019      	beq.n	8018df2 <__gethex+0x252>
 8018dbe:	f1bb 0f20 	cmp.w	fp, #32
 8018dc2:	d107      	bne.n	8018dd4 <__gethex+0x234>
 8018dc4:	9b04      	ldr	r3, [sp, #16]
 8018dc6:	9a01      	ldr	r2, [sp, #4]
 8018dc8:	f843 2b04 	str.w	r2, [r3], #4
 8018dcc:	9304      	str	r3, [sp, #16]
 8018dce:	2300      	movs	r3, #0
 8018dd0:	469b      	mov	fp, r3
 8018dd2:	9301      	str	r3, [sp, #4]
 8018dd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018dd8:	f7ff fecd 	bl	8018b76 <__hexdig_fun>
 8018ddc:	9b01      	ldr	r3, [sp, #4]
 8018dde:	f000 000f 	and.w	r0, r0, #15
 8018de2:	fa00 f00b 	lsl.w	r0, r0, fp
 8018de6:	4303      	orrs	r3, r0
 8018de8:	9301      	str	r3, [sp, #4]
 8018dea:	f10b 0b04 	add.w	fp, fp, #4
 8018dee:	9b05      	ldr	r3, [sp, #20]
 8018df0:	e00d      	b.n	8018e0e <__gethex+0x26e>
 8018df2:	9b05      	ldr	r3, [sp, #20]
 8018df4:	9a08      	ldr	r2, [sp, #32]
 8018df6:	4413      	add	r3, r2
 8018df8:	42bb      	cmp	r3, r7
 8018dfa:	d3e0      	bcc.n	8018dbe <__gethex+0x21e>
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	4652      	mov	r2, sl
 8018e00:	9903      	ldr	r1, [sp, #12]
 8018e02:	9309      	str	r3, [sp, #36]	; 0x24
 8018e04:	f001 f846 	bl	8019e94 <strncmp>
 8018e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e0a:	2800      	cmp	r0, #0
 8018e0c:	d1d7      	bne.n	8018dbe <__gethex+0x21e>
 8018e0e:	461e      	mov	r6, r3
 8018e10:	e78c      	b.n	8018d2c <__gethex+0x18c>
 8018e12:	f04f 0a03 	mov.w	sl, #3
 8018e16:	e7b9      	b.n	8018d8c <__gethex+0x1ec>
 8018e18:	da09      	bge.n	8018e2e <__gethex+0x28e>
 8018e1a:	1bf7      	subs	r7, r6, r7
 8018e1c:	4621      	mov	r1, r4
 8018e1e:	463a      	mov	r2, r7
 8018e20:	9802      	ldr	r0, [sp, #8]
 8018e22:	f000 fc55 	bl	80196d0 <__lshift>
 8018e26:	4604      	mov	r4, r0
 8018e28:	1bed      	subs	r5, r5, r7
 8018e2a:	f100 0914 	add.w	r9, r0, #20
 8018e2e:	f04f 0a00 	mov.w	sl, #0
 8018e32:	e7b0      	b.n	8018d96 <__gethex+0x1f6>
 8018e34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e38:	42a8      	cmp	r0, r5
 8018e3a:	dd71      	ble.n	8018f20 <__gethex+0x380>
 8018e3c:	1b45      	subs	r5, r0, r5
 8018e3e:	42ae      	cmp	r6, r5
 8018e40:	dc34      	bgt.n	8018eac <__gethex+0x30c>
 8018e42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e46:	2b02      	cmp	r3, #2
 8018e48:	d028      	beq.n	8018e9c <__gethex+0x2fc>
 8018e4a:	2b03      	cmp	r3, #3
 8018e4c:	d02a      	beq.n	8018ea4 <__gethex+0x304>
 8018e4e:	2b01      	cmp	r3, #1
 8018e50:	d115      	bne.n	8018e7e <__gethex+0x2de>
 8018e52:	42ae      	cmp	r6, r5
 8018e54:	d113      	bne.n	8018e7e <__gethex+0x2de>
 8018e56:	2e01      	cmp	r6, #1
 8018e58:	d10b      	bne.n	8018e72 <__gethex+0x2d2>
 8018e5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e5e:	9a06      	ldr	r2, [sp, #24]
 8018e60:	2762      	movs	r7, #98	; 0x62
 8018e62:	6013      	str	r3, [r2, #0]
 8018e64:	2301      	movs	r3, #1
 8018e66:	6123      	str	r3, [r4, #16]
 8018e68:	f8c9 3000 	str.w	r3, [r9]
 8018e6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e6e:	601c      	str	r4, [r3, #0]
 8018e70:	e728      	b.n	8018cc4 <__gethex+0x124>
 8018e72:	4620      	mov	r0, r4
 8018e74:	1e71      	subs	r1, r6, #1
 8018e76:	f000 fe6a 	bl	8019b4e <__any_on>
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	d1ed      	bne.n	8018e5a <__gethex+0x2ba>
 8018e7e:	4621      	mov	r1, r4
 8018e80:	9802      	ldr	r0, [sp, #8]
 8018e82:	f000 fa0d 	bl	80192a0 <_Bfree>
 8018e86:	2300      	movs	r3, #0
 8018e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e8a:	2750      	movs	r7, #80	; 0x50
 8018e8c:	6013      	str	r3, [r2, #0]
 8018e8e:	e719      	b.n	8018cc4 <__gethex+0x124>
 8018e90:	0801aa60 	.word	0x0801aa60
 8018e94:	0801a9e4 	.word	0x0801a9e4
 8018e98:	0801a9f5 	.word	0x0801a9f5
 8018e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d1ed      	bne.n	8018e7e <__gethex+0x2de>
 8018ea2:	e7da      	b.n	8018e5a <__gethex+0x2ba>
 8018ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d1d7      	bne.n	8018e5a <__gethex+0x2ba>
 8018eaa:	e7e8      	b.n	8018e7e <__gethex+0x2de>
 8018eac:	1e6f      	subs	r7, r5, #1
 8018eae:	f1ba 0f00 	cmp.w	sl, #0
 8018eb2:	d132      	bne.n	8018f1a <__gethex+0x37a>
 8018eb4:	b127      	cbz	r7, 8018ec0 <__gethex+0x320>
 8018eb6:	4639      	mov	r1, r7
 8018eb8:	4620      	mov	r0, r4
 8018eba:	f000 fe48 	bl	8019b4e <__any_on>
 8018ebe:	4682      	mov	sl, r0
 8018ec0:	2101      	movs	r1, #1
 8018ec2:	117b      	asrs	r3, r7, #5
 8018ec4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018ec8:	f007 071f 	and.w	r7, r7, #31
 8018ecc:	fa01 f707 	lsl.w	r7, r1, r7
 8018ed0:	421f      	tst	r7, r3
 8018ed2:	f04f 0702 	mov.w	r7, #2
 8018ed6:	4629      	mov	r1, r5
 8018ed8:	4620      	mov	r0, r4
 8018eda:	bf18      	it	ne
 8018edc:	f04a 0a02 	orrne.w	sl, sl, #2
 8018ee0:	1b76      	subs	r6, r6, r5
 8018ee2:	f7ff fdf5 	bl	8018ad0 <rshift>
 8018ee6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018eea:	f1ba 0f00 	cmp.w	sl, #0
 8018eee:	d048      	beq.n	8018f82 <__gethex+0x3e2>
 8018ef0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018ef4:	2b02      	cmp	r3, #2
 8018ef6:	d015      	beq.n	8018f24 <__gethex+0x384>
 8018ef8:	2b03      	cmp	r3, #3
 8018efa:	d017      	beq.n	8018f2c <__gethex+0x38c>
 8018efc:	2b01      	cmp	r3, #1
 8018efe:	d109      	bne.n	8018f14 <__gethex+0x374>
 8018f00:	f01a 0f02 	tst.w	sl, #2
 8018f04:	d006      	beq.n	8018f14 <__gethex+0x374>
 8018f06:	f8d9 0000 	ldr.w	r0, [r9]
 8018f0a:	ea4a 0a00 	orr.w	sl, sl, r0
 8018f0e:	f01a 0f01 	tst.w	sl, #1
 8018f12:	d10e      	bne.n	8018f32 <__gethex+0x392>
 8018f14:	f047 0710 	orr.w	r7, r7, #16
 8018f18:	e033      	b.n	8018f82 <__gethex+0x3e2>
 8018f1a:	f04f 0a01 	mov.w	sl, #1
 8018f1e:	e7cf      	b.n	8018ec0 <__gethex+0x320>
 8018f20:	2701      	movs	r7, #1
 8018f22:	e7e2      	b.n	8018eea <__gethex+0x34a>
 8018f24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f26:	f1c3 0301 	rsb	r3, r3, #1
 8018f2a:	9315      	str	r3, [sp, #84]	; 0x54
 8018f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d0f0      	beq.n	8018f14 <__gethex+0x374>
 8018f32:	f04f 0c00 	mov.w	ip, #0
 8018f36:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018f3a:	f104 0314 	add.w	r3, r4, #20
 8018f3e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018f42:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018f46:	4618      	mov	r0, r3
 8018f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018f50:	d01c      	beq.n	8018f8c <__gethex+0x3ec>
 8018f52:	3201      	adds	r2, #1
 8018f54:	6002      	str	r2, [r0, #0]
 8018f56:	2f02      	cmp	r7, #2
 8018f58:	f104 0314 	add.w	r3, r4, #20
 8018f5c:	d13d      	bne.n	8018fda <__gethex+0x43a>
 8018f5e:	f8d8 2000 	ldr.w	r2, [r8]
 8018f62:	3a01      	subs	r2, #1
 8018f64:	42b2      	cmp	r2, r6
 8018f66:	d10a      	bne.n	8018f7e <__gethex+0x3de>
 8018f68:	2201      	movs	r2, #1
 8018f6a:	1171      	asrs	r1, r6, #5
 8018f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f70:	f006 061f 	and.w	r6, r6, #31
 8018f74:	fa02 f606 	lsl.w	r6, r2, r6
 8018f78:	421e      	tst	r6, r3
 8018f7a:	bf18      	it	ne
 8018f7c:	4617      	movne	r7, r2
 8018f7e:	f047 0720 	orr.w	r7, r7, #32
 8018f82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f84:	601c      	str	r4, [r3, #0]
 8018f86:	9b06      	ldr	r3, [sp, #24]
 8018f88:	601d      	str	r5, [r3, #0]
 8018f8a:	e69b      	b.n	8018cc4 <__gethex+0x124>
 8018f8c:	4299      	cmp	r1, r3
 8018f8e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018f92:	d8d8      	bhi.n	8018f46 <__gethex+0x3a6>
 8018f94:	68a3      	ldr	r3, [r4, #8]
 8018f96:	459b      	cmp	fp, r3
 8018f98:	db17      	blt.n	8018fca <__gethex+0x42a>
 8018f9a:	6861      	ldr	r1, [r4, #4]
 8018f9c:	9802      	ldr	r0, [sp, #8]
 8018f9e:	3101      	adds	r1, #1
 8018fa0:	f000 f93e 	bl	8019220 <_Balloc>
 8018fa4:	4681      	mov	r9, r0
 8018fa6:	b918      	cbnz	r0, 8018fb0 <__gethex+0x410>
 8018fa8:	4602      	mov	r2, r0
 8018faa:	2184      	movs	r1, #132	; 0x84
 8018fac:	4b19      	ldr	r3, [pc, #100]	; (8019014 <__gethex+0x474>)
 8018fae:	e6ac      	b.n	8018d0a <__gethex+0x16a>
 8018fb0:	6922      	ldr	r2, [r4, #16]
 8018fb2:	f104 010c 	add.w	r1, r4, #12
 8018fb6:	3202      	adds	r2, #2
 8018fb8:	0092      	lsls	r2, r2, #2
 8018fba:	300c      	adds	r0, #12
 8018fbc:	f7fc ff72 	bl	8015ea4 <memcpy>
 8018fc0:	4621      	mov	r1, r4
 8018fc2:	9802      	ldr	r0, [sp, #8]
 8018fc4:	f000 f96c 	bl	80192a0 <_Bfree>
 8018fc8:	464c      	mov	r4, r9
 8018fca:	6923      	ldr	r3, [r4, #16]
 8018fcc:	1c5a      	adds	r2, r3, #1
 8018fce:	6122      	str	r2, [r4, #16]
 8018fd0:	2201      	movs	r2, #1
 8018fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018fd6:	615a      	str	r2, [r3, #20]
 8018fd8:	e7bd      	b.n	8018f56 <__gethex+0x3b6>
 8018fda:	6922      	ldr	r2, [r4, #16]
 8018fdc:	455a      	cmp	r2, fp
 8018fde:	dd0b      	ble.n	8018ff8 <__gethex+0x458>
 8018fe0:	2101      	movs	r1, #1
 8018fe2:	4620      	mov	r0, r4
 8018fe4:	f7ff fd74 	bl	8018ad0 <rshift>
 8018fe8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018fec:	3501      	adds	r5, #1
 8018fee:	42ab      	cmp	r3, r5
 8018ff0:	f6ff aed5 	blt.w	8018d9e <__gethex+0x1fe>
 8018ff4:	2701      	movs	r7, #1
 8018ff6:	e7c2      	b.n	8018f7e <__gethex+0x3de>
 8018ff8:	f016 061f 	ands.w	r6, r6, #31
 8018ffc:	d0fa      	beq.n	8018ff4 <__gethex+0x454>
 8018ffe:	449a      	add	sl, r3
 8019000:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019004:	f000 fa02 	bl	801940c <__hi0bits>
 8019008:	f1c6 0620 	rsb	r6, r6, #32
 801900c:	42b0      	cmp	r0, r6
 801900e:	dbe7      	blt.n	8018fe0 <__gethex+0x440>
 8019010:	e7f0      	b.n	8018ff4 <__gethex+0x454>
 8019012:	bf00      	nop
 8019014:	0801a9e4 	.word	0x0801a9e4

08019018 <L_shift>:
 8019018:	f1c2 0208 	rsb	r2, r2, #8
 801901c:	0092      	lsls	r2, r2, #2
 801901e:	b570      	push	{r4, r5, r6, lr}
 8019020:	f1c2 0620 	rsb	r6, r2, #32
 8019024:	6843      	ldr	r3, [r0, #4]
 8019026:	6804      	ldr	r4, [r0, #0]
 8019028:	fa03 f506 	lsl.w	r5, r3, r6
 801902c:	432c      	orrs	r4, r5
 801902e:	40d3      	lsrs	r3, r2
 8019030:	6004      	str	r4, [r0, #0]
 8019032:	f840 3f04 	str.w	r3, [r0, #4]!
 8019036:	4288      	cmp	r0, r1
 8019038:	d3f4      	bcc.n	8019024 <L_shift+0xc>
 801903a:	bd70      	pop	{r4, r5, r6, pc}

0801903c <__match>:
 801903c:	b530      	push	{r4, r5, lr}
 801903e:	6803      	ldr	r3, [r0, #0]
 8019040:	3301      	adds	r3, #1
 8019042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019046:	b914      	cbnz	r4, 801904e <__match+0x12>
 8019048:	6003      	str	r3, [r0, #0]
 801904a:	2001      	movs	r0, #1
 801904c:	bd30      	pop	{r4, r5, pc}
 801904e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019052:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019056:	2d19      	cmp	r5, #25
 8019058:	bf98      	it	ls
 801905a:	3220      	addls	r2, #32
 801905c:	42a2      	cmp	r2, r4
 801905e:	d0f0      	beq.n	8019042 <__match+0x6>
 8019060:	2000      	movs	r0, #0
 8019062:	e7f3      	b.n	801904c <__match+0x10>

08019064 <__hexnan>:
 8019064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019068:	2500      	movs	r5, #0
 801906a:	680b      	ldr	r3, [r1, #0]
 801906c:	4682      	mov	sl, r0
 801906e:	115e      	asrs	r6, r3, #5
 8019070:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019074:	f013 031f 	ands.w	r3, r3, #31
 8019078:	bf18      	it	ne
 801907a:	3604      	addne	r6, #4
 801907c:	1f37      	subs	r7, r6, #4
 801907e:	4690      	mov	r8, r2
 8019080:	46b9      	mov	r9, r7
 8019082:	463c      	mov	r4, r7
 8019084:	46ab      	mov	fp, r5
 8019086:	b087      	sub	sp, #28
 8019088:	6801      	ldr	r1, [r0, #0]
 801908a:	9301      	str	r3, [sp, #4]
 801908c:	f846 5c04 	str.w	r5, [r6, #-4]
 8019090:	9502      	str	r5, [sp, #8]
 8019092:	784a      	ldrb	r2, [r1, #1]
 8019094:	1c4b      	adds	r3, r1, #1
 8019096:	9303      	str	r3, [sp, #12]
 8019098:	b342      	cbz	r2, 80190ec <__hexnan+0x88>
 801909a:	4610      	mov	r0, r2
 801909c:	9105      	str	r1, [sp, #20]
 801909e:	9204      	str	r2, [sp, #16]
 80190a0:	f7ff fd69 	bl	8018b76 <__hexdig_fun>
 80190a4:	2800      	cmp	r0, #0
 80190a6:	d14f      	bne.n	8019148 <__hexnan+0xe4>
 80190a8:	9a04      	ldr	r2, [sp, #16]
 80190aa:	9905      	ldr	r1, [sp, #20]
 80190ac:	2a20      	cmp	r2, #32
 80190ae:	d818      	bhi.n	80190e2 <__hexnan+0x7e>
 80190b0:	9b02      	ldr	r3, [sp, #8]
 80190b2:	459b      	cmp	fp, r3
 80190b4:	dd13      	ble.n	80190de <__hexnan+0x7a>
 80190b6:	454c      	cmp	r4, r9
 80190b8:	d206      	bcs.n	80190c8 <__hexnan+0x64>
 80190ba:	2d07      	cmp	r5, #7
 80190bc:	dc04      	bgt.n	80190c8 <__hexnan+0x64>
 80190be:	462a      	mov	r2, r5
 80190c0:	4649      	mov	r1, r9
 80190c2:	4620      	mov	r0, r4
 80190c4:	f7ff ffa8 	bl	8019018 <L_shift>
 80190c8:	4544      	cmp	r4, r8
 80190ca:	d950      	bls.n	801916e <__hexnan+0x10a>
 80190cc:	2300      	movs	r3, #0
 80190ce:	f1a4 0904 	sub.w	r9, r4, #4
 80190d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80190d6:	461d      	mov	r5, r3
 80190d8:	464c      	mov	r4, r9
 80190da:	f8cd b008 	str.w	fp, [sp, #8]
 80190de:	9903      	ldr	r1, [sp, #12]
 80190e0:	e7d7      	b.n	8019092 <__hexnan+0x2e>
 80190e2:	2a29      	cmp	r2, #41	; 0x29
 80190e4:	d156      	bne.n	8019194 <__hexnan+0x130>
 80190e6:	3102      	adds	r1, #2
 80190e8:	f8ca 1000 	str.w	r1, [sl]
 80190ec:	f1bb 0f00 	cmp.w	fp, #0
 80190f0:	d050      	beq.n	8019194 <__hexnan+0x130>
 80190f2:	454c      	cmp	r4, r9
 80190f4:	d206      	bcs.n	8019104 <__hexnan+0xa0>
 80190f6:	2d07      	cmp	r5, #7
 80190f8:	dc04      	bgt.n	8019104 <__hexnan+0xa0>
 80190fa:	462a      	mov	r2, r5
 80190fc:	4649      	mov	r1, r9
 80190fe:	4620      	mov	r0, r4
 8019100:	f7ff ff8a 	bl	8019018 <L_shift>
 8019104:	4544      	cmp	r4, r8
 8019106:	d934      	bls.n	8019172 <__hexnan+0x10e>
 8019108:	4623      	mov	r3, r4
 801910a:	f1a8 0204 	sub.w	r2, r8, #4
 801910e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019112:	429f      	cmp	r7, r3
 8019114:	f842 1f04 	str.w	r1, [r2, #4]!
 8019118:	d2f9      	bcs.n	801910e <__hexnan+0xaa>
 801911a:	1b3b      	subs	r3, r7, r4
 801911c:	f023 0303 	bic.w	r3, r3, #3
 8019120:	3304      	adds	r3, #4
 8019122:	3401      	adds	r4, #1
 8019124:	3e03      	subs	r6, #3
 8019126:	42b4      	cmp	r4, r6
 8019128:	bf88      	it	hi
 801912a:	2304      	movhi	r3, #4
 801912c:	2200      	movs	r2, #0
 801912e:	4443      	add	r3, r8
 8019130:	f843 2b04 	str.w	r2, [r3], #4
 8019134:	429f      	cmp	r7, r3
 8019136:	d2fb      	bcs.n	8019130 <__hexnan+0xcc>
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	b91b      	cbnz	r3, 8019144 <__hexnan+0xe0>
 801913c:	4547      	cmp	r7, r8
 801913e:	d127      	bne.n	8019190 <__hexnan+0x12c>
 8019140:	2301      	movs	r3, #1
 8019142:	603b      	str	r3, [r7, #0]
 8019144:	2005      	movs	r0, #5
 8019146:	e026      	b.n	8019196 <__hexnan+0x132>
 8019148:	3501      	adds	r5, #1
 801914a:	2d08      	cmp	r5, #8
 801914c:	f10b 0b01 	add.w	fp, fp, #1
 8019150:	dd06      	ble.n	8019160 <__hexnan+0xfc>
 8019152:	4544      	cmp	r4, r8
 8019154:	d9c3      	bls.n	80190de <__hexnan+0x7a>
 8019156:	2300      	movs	r3, #0
 8019158:	2501      	movs	r5, #1
 801915a:	f844 3c04 	str.w	r3, [r4, #-4]
 801915e:	3c04      	subs	r4, #4
 8019160:	6822      	ldr	r2, [r4, #0]
 8019162:	f000 000f 	and.w	r0, r0, #15
 8019166:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801916a:	6022      	str	r2, [r4, #0]
 801916c:	e7b7      	b.n	80190de <__hexnan+0x7a>
 801916e:	2508      	movs	r5, #8
 8019170:	e7b5      	b.n	80190de <__hexnan+0x7a>
 8019172:	9b01      	ldr	r3, [sp, #4]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d0df      	beq.n	8019138 <__hexnan+0xd4>
 8019178:	f04f 32ff 	mov.w	r2, #4294967295
 801917c:	f1c3 0320 	rsb	r3, r3, #32
 8019180:	fa22 f303 	lsr.w	r3, r2, r3
 8019184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019188:	401a      	ands	r2, r3
 801918a:	f846 2c04 	str.w	r2, [r6, #-4]
 801918e:	e7d3      	b.n	8019138 <__hexnan+0xd4>
 8019190:	3f04      	subs	r7, #4
 8019192:	e7d1      	b.n	8019138 <__hexnan+0xd4>
 8019194:	2004      	movs	r0, #4
 8019196:	b007      	add	sp, #28
 8019198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801919c <_localeconv_r>:
 801919c:	4800      	ldr	r0, [pc, #0]	; (80191a0 <_localeconv_r+0x4>)
 801919e:	4770      	bx	lr
 80191a0:	200003e8 	.word	0x200003e8

080191a4 <_lseek_r>:
 80191a4:	b538      	push	{r3, r4, r5, lr}
 80191a6:	4604      	mov	r4, r0
 80191a8:	4608      	mov	r0, r1
 80191aa:	4611      	mov	r1, r2
 80191ac:	2200      	movs	r2, #0
 80191ae:	4d05      	ldr	r5, [pc, #20]	; (80191c4 <_lseek_r+0x20>)
 80191b0:	602a      	str	r2, [r5, #0]
 80191b2:	461a      	mov	r2, r3
 80191b4:	f7ec fd58 	bl	8005c68 <_lseek>
 80191b8:	1c43      	adds	r3, r0, #1
 80191ba:	d102      	bne.n	80191c2 <_lseek_r+0x1e>
 80191bc:	682b      	ldr	r3, [r5, #0]
 80191be:	b103      	cbz	r3, 80191c2 <_lseek_r+0x1e>
 80191c0:	6023      	str	r3, [r4, #0]
 80191c2:	bd38      	pop	{r3, r4, r5, pc}
 80191c4:	2000e604 	.word	0x2000e604

080191c8 <__ascii_mbtowc>:
 80191c8:	b082      	sub	sp, #8
 80191ca:	b901      	cbnz	r1, 80191ce <__ascii_mbtowc+0x6>
 80191cc:	a901      	add	r1, sp, #4
 80191ce:	b142      	cbz	r2, 80191e2 <__ascii_mbtowc+0x1a>
 80191d0:	b14b      	cbz	r3, 80191e6 <__ascii_mbtowc+0x1e>
 80191d2:	7813      	ldrb	r3, [r2, #0]
 80191d4:	600b      	str	r3, [r1, #0]
 80191d6:	7812      	ldrb	r2, [r2, #0]
 80191d8:	1e10      	subs	r0, r2, #0
 80191da:	bf18      	it	ne
 80191dc:	2001      	movne	r0, #1
 80191de:	b002      	add	sp, #8
 80191e0:	4770      	bx	lr
 80191e2:	4610      	mov	r0, r2
 80191e4:	e7fb      	b.n	80191de <__ascii_mbtowc+0x16>
 80191e6:	f06f 0001 	mvn.w	r0, #1
 80191ea:	e7f8      	b.n	80191de <__ascii_mbtowc+0x16>

080191ec <memchr>:
 80191ec:	4603      	mov	r3, r0
 80191ee:	b510      	push	{r4, lr}
 80191f0:	b2c9      	uxtb	r1, r1
 80191f2:	4402      	add	r2, r0
 80191f4:	4293      	cmp	r3, r2
 80191f6:	4618      	mov	r0, r3
 80191f8:	d101      	bne.n	80191fe <memchr+0x12>
 80191fa:	2000      	movs	r0, #0
 80191fc:	e003      	b.n	8019206 <memchr+0x1a>
 80191fe:	7804      	ldrb	r4, [r0, #0]
 8019200:	3301      	adds	r3, #1
 8019202:	428c      	cmp	r4, r1
 8019204:	d1f6      	bne.n	80191f4 <memchr+0x8>
 8019206:	bd10      	pop	{r4, pc}

08019208 <__malloc_lock>:
 8019208:	4801      	ldr	r0, [pc, #4]	; (8019210 <__malloc_lock+0x8>)
 801920a:	f7fc be38 	b.w	8015e7e <__retarget_lock_acquire_recursive>
 801920e:	bf00      	nop
 8019210:	2000e5fc 	.word	0x2000e5fc

08019214 <__malloc_unlock>:
 8019214:	4801      	ldr	r0, [pc, #4]	; (801921c <__malloc_unlock+0x8>)
 8019216:	f7fc be33 	b.w	8015e80 <__retarget_lock_release_recursive>
 801921a:	bf00      	nop
 801921c:	2000e5fc 	.word	0x2000e5fc

08019220 <_Balloc>:
 8019220:	b570      	push	{r4, r5, r6, lr}
 8019222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019224:	4604      	mov	r4, r0
 8019226:	460d      	mov	r5, r1
 8019228:	b976      	cbnz	r6, 8019248 <_Balloc+0x28>
 801922a:	2010      	movs	r0, #16
 801922c:	f7fc fe2a 	bl	8015e84 <malloc>
 8019230:	4602      	mov	r2, r0
 8019232:	6260      	str	r0, [r4, #36]	; 0x24
 8019234:	b920      	cbnz	r0, 8019240 <_Balloc+0x20>
 8019236:	2166      	movs	r1, #102	; 0x66
 8019238:	4b17      	ldr	r3, [pc, #92]	; (8019298 <_Balloc+0x78>)
 801923a:	4818      	ldr	r0, [pc, #96]	; (801929c <_Balloc+0x7c>)
 801923c:	f000 fe4a 	bl	8019ed4 <__assert_func>
 8019240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019244:	6006      	str	r6, [r0, #0]
 8019246:	60c6      	str	r6, [r0, #12]
 8019248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801924a:	68f3      	ldr	r3, [r6, #12]
 801924c:	b183      	cbz	r3, 8019270 <_Balloc+0x50>
 801924e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019250:	68db      	ldr	r3, [r3, #12]
 8019252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019256:	b9b8      	cbnz	r0, 8019288 <_Balloc+0x68>
 8019258:	2101      	movs	r1, #1
 801925a:	fa01 f605 	lsl.w	r6, r1, r5
 801925e:	1d72      	adds	r2, r6, #5
 8019260:	4620      	mov	r0, r4
 8019262:	0092      	lsls	r2, r2, #2
 8019264:	f000 fc94 	bl	8019b90 <_calloc_r>
 8019268:	b160      	cbz	r0, 8019284 <_Balloc+0x64>
 801926a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801926e:	e00e      	b.n	801928e <_Balloc+0x6e>
 8019270:	2221      	movs	r2, #33	; 0x21
 8019272:	2104      	movs	r1, #4
 8019274:	4620      	mov	r0, r4
 8019276:	f000 fc8b 	bl	8019b90 <_calloc_r>
 801927a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801927c:	60f0      	str	r0, [r6, #12]
 801927e:	68db      	ldr	r3, [r3, #12]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d1e4      	bne.n	801924e <_Balloc+0x2e>
 8019284:	2000      	movs	r0, #0
 8019286:	bd70      	pop	{r4, r5, r6, pc}
 8019288:	6802      	ldr	r2, [r0, #0]
 801928a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801928e:	2300      	movs	r3, #0
 8019290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019294:	e7f7      	b.n	8019286 <_Balloc+0x66>
 8019296:	bf00      	nop
 8019298:	0801a96e 	.word	0x0801a96e
 801929c:	0801aa74 	.word	0x0801aa74

080192a0 <_Bfree>:
 80192a0:	b570      	push	{r4, r5, r6, lr}
 80192a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80192a4:	4605      	mov	r5, r0
 80192a6:	460c      	mov	r4, r1
 80192a8:	b976      	cbnz	r6, 80192c8 <_Bfree+0x28>
 80192aa:	2010      	movs	r0, #16
 80192ac:	f7fc fdea 	bl	8015e84 <malloc>
 80192b0:	4602      	mov	r2, r0
 80192b2:	6268      	str	r0, [r5, #36]	; 0x24
 80192b4:	b920      	cbnz	r0, 80192c0 <_Bfree+0x20>
 80192b6:	218a      	movs	r1, #138	; 0x8a
 80192b8:	4b08      	ldr	r3, [pc, #32]	; (80192dc <_Bfree+0x3c>)
 80192ba:	4809      	ldr	r0, [pc, #36]	; (80192e0 <_Bfree+0x40>)
 80192bc:	f000 fe0a 	bl	8019ed4 <__assert_func>
 80192c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192c4:	6006      	str	r6, [r0, #0]
 80192c6:	60c6      	str	r6, [r0, #12]
 80192c8:	b13c      	cbz	r4, 80192da <_Bfree+0x3a>
 80192ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80192cc:	6862      	ldr	r2, [r4, #4]
 80192ce:	68db      	ldr	r3, [r3, #12]
 80192d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80192d4:	6021      	str	r1, [r4, #0]
 80192d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80192da:	bd70      	pop	{r4, r5, r6, pc}
 80192dc:	0801a96e 	.word	0x0801a96e
 80192e0:	0801aa74 	.word	0x0801aa74

080192e4 <__multadd>:
 80192e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192e8:	4698      	mov	r8, r3
 80192ea:	460c      	mov	r4, r1
 80192ec:	2300      	movs	r3, #0
 80192ee:	690e      	ldr	r6, [r1, #16]
 80192f0:	4607      	mov	r7, r0
 80192f2:	f101 0014 	add.w	r0, r1, #20
 80192f6:	6805      	ldr	r5, [r0, #0]
 80192f8:	3301      	adds	r3, #1
 80192fa:	b2a9      	uxth	r1, r5
 80192fc:	fb02 8101 	mla	r1, r2, r1, r8
 8019300:	0c2d      	lsrs	r5, r5, #16
 8019302:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019306:	fb02 c505 	mla	r5, r2, r5, ip
 801930a:	b289      	uxth	r1, r1
 801930c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019310:	429e      	cmp	r6, r3
 8019312:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019316:	f840 1b04 	str.w	r1, [r0], #4
 801931a:	dcec      	bgt.n	80192f6 <__multadd+0x12>
 801931c:	f1b8 0f00 	cmp.w	r8, #0
 8019320:	d022      	beq.n	8019368 <__multadd+0x84>
 8019322:	68a3      	ldr	r3, [r4, #8]
 8019324:	42b3      	cmp	r3, r6
 8019326:	dc19      	bgt.n	801935c <__multadd+0x78>
 8019328:	6861      	ldr	r1, [r4, #4]
 801932a:	4638      	mov	r0, r7
 801932c:	3101      	adds	r1, #1
 801932e:	f7ff ff77 	bl	8019220 <_Balloc>
 8019332:	4605      	mov	r5, r0
 8019334:	b928      	cbnz	r0, 8019342 <__multadd+0x5e>
 8019336:	4602      	mov	r2, r0
 8019338:	21b5      	movs	r1, #181	; 0xb5
 801933a:	4b0d      	ldr	r3, [pc, #52]	; (8019370 <__multadd+0x8c>)
 801933c:	480d      	ldr	r0, [pc, #52]	; (8019374 <__multadd+0x90>)
 801933e:	f000 fdc9 	bl	8019ed4 <__assert_func>
 8019342:	6922      	ldr	r2, [r4, #16]
 8019344:	f104 010c 	add.w	r1, r4, #12
 8019348:	3202      	adds	r2, #2
 801934a:	0092      	lsls	r2, r2, #2
 801934c:	300c      	adds	r0, #12
 801934e:	f7fc fda9 	bl	8015ea4 <memcpy>
 8019352:	4621      	mov	r1, r4
 8019354:	4638      	mov	r0, r7
 8019356:	f7ff ffa3 	bl	80192a0 <_Bfree>
 801935a:	462c      	mov	r4, r5
 801935c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019360:	3601      	adds	r6, #1
 8019362:	f8c3 8014 	str.w	r8, [r3, #20]
 8019366:	6126      	str	r6, [r4, #16]
 8019368:	4620      	mov	r0, r4
 801936a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801936e:	bf00      	nop
 8019370:	0801a9e4 	.word	0x0801a9e4
 8019374:	0801aa74 	.word	0x0801aa74

08019378 <__s2b>:
 8019378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801937c:	4615      	mov	r5, r2
 801937e:	2209      	movs	r2, #9
 8019380:	461f      	mov	r7, r3
 8019382:	3308      	adds	r3, #8
 8019384:	460c      	mov	r4, r1
 8019386:	fb93 f3f2 	sdiv	r3, r3, r2
 801938a:	4606      	mov	r6, r0
 801938c:	2201      	movs	r2, #1
 801938e:	2100      	movs	r1, #0
 8019390:	429a      	cmp	r2, r3
 8019392:	db09      	blt.n	80193a8 <__s2b+0x30>
 8019394:	4630      	mov	r0, r6
 8019396:	f7ff ff43 	bl	8019220 <_Balloc>
 801939a:	b940      	cbnz	r0, 80193ae <__s2b+0x36>
 801939c:	4602      	mov	r2, r0
 801939e:	21ce      	movs	r1, #206	; 0xce
 80193a0:	4b18      	ldr	r3, [pc, #96]	; (8019404 <__s2b+0x8c>)
 80193a2:	4819      	ldr	r0, [pc, #100]	; (8019408 <__s2b+0x90>)
 80193a4:	f000 fd96 	bl	8019ed4 <__assert_func>
 80193a8:	0052      	lsls	r2, r2, #1
 80193aa:	3101      	adds	r1, #1
 80193ac:	e7f0      	b.n	8019390 <__s2b+0x18>
 80193ae:	9b08      	ldr	r3, [sp, #32]
 80193b0:	2d09      	cmp	r5, #9
 80193b2:	6143      	str	r3, [r0, #20]
 80193b4:	f04f 0301 	mov.w	r3, #1
 80193b8:	6103      	str	r3, [r0, #16]
 80193ba:	dd16      	ble.n	80193ea <__s2b+0x72>
 80193bc:	f104 0909 	add.w	r9, r4, #9
 80193c0:	46c8      	mov	r8, r9
 80193c2:	442c      	add	r4, r5
 80193c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80193c8:	4601      	mov	r1, r0
 80193ca:	220a      	movs	r2, #10
 80193cc:	4630      	mov	r0, r6
 80193ce:	3b30      	subs	r3, #48	; 0x30
 80193d0:	f7ff ff88 	bl	80192e4 <__multadd>
 80193d4:	45a0      	cmp	r8, r4
 80193d6:	d1f5      	bne.n	80193c4 <__s2b+0x4c>
 80193d8:	f1a5 0408 	sub.w	r4, r5, #8
 80193dc:	444c      	add	r4, r9
 80193de:	1b2d      	subs	r5, r5, r4
 80193e0:	1963      	adds	r3, r4, r5
 80193e2:	42bb      	cmp	r3, r7
 80193e4:	db04      	blt.n	80193f0 <__s2b+0x78>
 80193e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193ea:	2509      	movs	r5, #9
 80193ec:	340a      	adds	r4, #10
 80193ee:	e7f6      	b.n	80193de <__s2b+0x66>
 80193f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80193f4:	4601      	mov	r1, r0
 80193f6:	220a      	movs	r2, #10
 80193f8:	4630      	mov	r0, r6
 80193fa:	3b30      	subs	r3, #48	; 0x30
 80193fc:	f7ff ff72 	bl	80192e4 <__multadd>
 8019400:	e7ee      	b.n	80193e0 <__s2b+0x68>
 8019402:	bf00      	nop
 8019404:	0801a9e4 	.word	0x0801a9e4
 8019408:	0801aa74 	.word	0x0801aa74

0801940c <__hi0bits>:
 801940c:	0c02      	lsrs	r2, r0, #16
 801940e:	0412      	lsls	r2, r2, #16
 8019410:	4603      	mov	r3, r0
 8019412:	b9ca      	cbnz	r2, 8019448 <__hi0bits+0x3c>
 8019414:	0403      	lsls	r3, r0, #16
 8019416:	2010      	movs	r0, #16
 8019418:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801941c:	bf04      	itt	eq
 801941e:	021b      	lsleq	r3, r3, #8
 8019420:	3008      	addeq	r0, #8
 8019422:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019426:	bf04      	itt	eq
 8019428:	011b      	lsleq	r3, r3, #4
 801942a:	3004      	addeq	r0, #4
 801942c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019430:	bf04      	itt	eq
 8019432:	009b      	lsleq	r3, r3, #2
 8019434:	3002      	addeq	r0, #2
 8019436:	2b00      	cmp	r3, #0
 8019438:	db05      	blt.n	8019446 <__hi0bits+0x3a>
 801943a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801943e:	f100 0001 	add.w	r0, r0, #1
 8019442:	bf08      	it	eq
 8019444:	2020      	moveq	r0, #32
 8019446:	4770      	bx	lr
 8019448:	2000      	movs	r0, #0
 801944a:	e7e5      	b.n	8019418 <__hi0bits+0xc>

0801944c <__lo0bits>:
 801944c:	6803      	ldr	r3, [r0, #0]
 801944e:	4602      	mov	r2, r0
 8019450:	f013 0007 	ands.w	r0, r3, #7
 8019454:	d00b      	beq.n	801946e <__lo0bits+0x22>
 8019456:	07d9      	lsls	r1, r3, #31
 8019458:	d422      	bmi.n	80194a0 <__lo0bits+0x54>
 801945a:	0798      	lsls	r0, r3, #30
 801945c:	bf49      	itett	mi
 801945e:	085b      	lsrmi	r3, r3, #1
 8019460:	089b      	lsrpl	r3, r3, #2
 8019462:	2001      	movmi	r0, #1
 8019464:	6013      	strmi	r3, [r2, #0]
 8019466:	bf5c      	itt	pl
 8019468:	2002      	movpl	r0, #2
 801946a:	6013      	strpl	r3, [r2, #0]
 801946c:	4770      	bx	lr
 801946e:	b299      	uxth	r1, r3
 8019470:	b909      	cbnz	r1, 8019476 <__lo0bits+0x2a>
 8019472:	2010      	movs	r0, #16
 8019474:	0c1b      	lsrs	r3, r3, #16
 8019476:	f013 0fff 	tst.w	r3, #255	; 0xff
 801947a:	bf04      	itt	eq
 801947c:	0a1b      	lsreq	r3, r3, #8
 801947e:	3008      	addeq	r0, #8
 8019480:	0719      	lsls	r1, r3, #28
 8019482:	bf04      	itt	eq
 8019484:	091b      	lsreq	r3, r3, #4
 8019486:	3004      	addeq	r0, #4
 8019488:	0799      	lsls	r1, r3, #30
 801948a:	bf04      	itt	eq
 801948c:	089b      	lsreq	r3, r3, #2
 801948e:	3002      	addeq	r0, #2
 8019490:	07d9      	lsls	r1, r3, #31
 8019492:	d403      	bmi.n	801949c <__lo0bits+0x50>
 8019494:	085b      	lsrs	r3, r3, #1
 8019496:	f100 0001 	add.w	r0, r0, #1
 801949a:	d003      	beq.n	80194a4 <__lo0bits+0x58>
 801949c:	6013      	str	r3, [r2, #0]
 801949e:	4770      	bx	lr
 80194a0:	2000      	movs	r0, #0
 80194a2:	4770      	bx	lr
 80194a4:	2020      	movs	r0, #32
 80194a6:	4770      	bx	lr

080194a8 <__i2b>:
 80194a8:	b510      	push	{r4, lr}
 80194aa:	460c      	mov	r4, r1
 80194ac:	2101      	movs	r1, #1
 80194ae:	f7ff feb7 	bl	8019220 <_Balloc>
 80194b2:	4602      	mov	r2, r0
 80194b4:	b928      	cbnz	r0, 80194c2 <__i2b+0x1a>
 80194b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80194ba:	4b04      	ldr	r3, [pc, #16]	; (80194cc <__i2b+0x24>)
 80194bc:	4804      	ldr	r0, [pc, #16]	; (80194d0 <__i2b+0x28>)
 80194be:	f000 fd09 	bl	8019ed4 <__assert_func>
 80194c2:	2301      	movs	r3, #1
 80194c4:	6144      	str	r4, [r0, #20]
 80194c6:	6103      	str	r3, [r0, #16]
 80194c8:	bd10      	pop	{r4, pc}
 80194ca:	bf00      	nop
 80194cc:	0801a9e4 	.word	0x0801a9e4
 80194d0:	0801aa74 	.word	0x0801aa74

080194d4 <__multiply>:
 80194d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d8:	4614      	mov	r4, r2
 80194da:	690a      	ldr	r2, [r1, #16]
 80194dc:	6923      	ldr	r3, [r4, #16]
 80194de:	460d      	mov	r5, r1
 80194e0:	429a      	cmp	r2, r3
 80194e2:	bfbe      	ittt	lt
 80194e4:	460b      	movlt	r3, r1
 80194e6:	4625      	movlt	r5, r4
 80194e8:	461c      	movlt	r4, r3
 80194ea:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80194ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80194f2:	68ab      	ldr	r3, [r5, #8]
 80194f4:	6869      	ldr	r1, [r5, #4]
 80194f6:	eb0a 0709 	add.w	r7, sl, r9
 80194fa:	42bb      	cmp	r3, r7
 80194fc:	b085      	sub	sp, #20
 80194fe:	bfb8      	it	lt
 8019500:	3101      	addlt	r1, #1
 8019502:	f7ff fe8d 	bl	8019220 <_Balloc>
 8019506:	b930      	cbnz	r0, 8019516 <__multiply+0x42>
 8019508:	4602      	mov	r2, r0
 801950a:	f240 115d 	movw	r1, #349	; 0x15d
 801950e:	4b41      	ldr	r3, [pc, #260]	; (8019614 <__multiply+0x140>)
 8019510:	4841      	ldr	r0, [pc, #260]	; (8019618 <__multiply+0x144>)
 8019512:	f000 fcdf 	bl	8019ed4 <__assert_func>
 8019516:	f100 0614 	add.w	r6, r0, #20
 801951a:	4633      	mov	r3, r6
 801951c:	2200      	movs	r2, #0
 801951e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019522:	4543      	cmp	r3, r8
 8019524:	d31e      	bcc.n	8019564 <__multiply+0x90>
 8019526:	f105 0c14 	add.w	ip, r5, #20
 801952a:	f104 0314 	add.w	r3, r4, #20
 801952e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019532:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019536:	9202      	str	r2, [sp, #8]
 8019538:	ebac 0205 	sub.w	r2, ip, r5
 801953c:	3a15      	subs	r2, #21
 801953e:	f022 0203 	bic.w	r2, r2, #3
 8019542:	3204      	adds	r2, #4
 8019544:	f105 0115 	add.w	r1, r5, #21
 8019548:	458c      	cmp	ip, r1
 801954a:	bf38      	it	cc
 801954c:	2204      	movcc	r2, #4
 801954e:	9201      	str	r2, [sp, #4]
 8019550:	9a02      	ldr	r2, [sp, #8]
 8019552:	9303      	str	r3, [sp, #12]
 8019554:	429a      	cmp	r2, r3
 8019556:	d808      	bhi.n	801956a <__multiply+0x96>
 8019558:	2f00      	cmp	r7, #0
 801955a:	dc55      	bgt.n	8019608 <__multiply+0x134>
 801955c:	6107      	str	r7, [r0, #16]
 801955e:	b005      	add	sp, #20
 8019560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019564:	f843 2b04 	str.w	r2, [r3], #4
 8019568:	e7db      	b.n	8019522 <__multiply+0x4e>
 801956a:	f8b3 a000 	ldrh.w	sl, [r3]
 801956e:	f1ba 0f00 	cmp.w	sl, #0
 8019572:	d020      	beq.n	80195b6 <__multiply+0xe2>
 8019574:	46b1      	mov	r9, r6
 8019576:	2200      	movs	r2, #0
 8019578:	f105 0e14 	add.w	lr, r5, #20
 801957c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019580:	f8d9 b000 	ldr.w	fp, [r9]
 8019584:	b2a1      	uxth	r1, r4
 8019586:	fa1f fb8b 	uxth.w	fp, fp
 801958a:	fb0a b101 	mla	r1, sl, r1, fp
 801958e:	4411      	add	r1, r2
 8019590:	f8d9 2000 	ldr.w	r2, [r9]
 8019594:	0c24      	lsrs	r4, r4, #16
 8019596:	0c12      	lsrs	r2, r2, #16
 8019598:	fb0a 2404 	mla	r4, sl, r4, r2
 801959c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80195a0:	b289      	uxth	r1, r1
 80195a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80195a6:	45f4      	cmp	ip, lr
 80195a8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80195ac:	f849 1b04 	str.w	r1, [r9], #4
 80195b0:	d8e4      	bhi.n	801957c <__multiply+0xa8>
 80195b2:	9901      	ldr	r1, [sp, #4]
 80195b4:	5072      	str	r2, [r6, r1]
 80195b6:	9a03      	ldr	r2, [sp, #12]
 80195b8:	3304      	adds	r3, #4
 80195ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80195be:	f1b9 0f00 	cmp.w	r9, #0
 80195c2:	d01f      	beq.n	8019604 <__multiply+0x130>
 80195c4:	46b6      	mov	lr, r6
 80195c6:	f04f 0a00 	mov.w	sl, #0
 80195ca:	6834      	ldr	r4, [r6, #0]
 80195cc:	f105 0114 	add.w	r1, r5, #20
 80195d0:	880a      	ldrh	r2, [r1, #0]
 80195d2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80195d6:	b2a4      	uxth	r4, r4
 80195d8:	fb09 b202 	mla	r2, r9, r2, fp
 80195dc:	4492      	add	sl, r2
 80195de:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80195e2:	f84e 4b04 	str.w	r4, [lr], #4
 80195e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80195ea:	f8be 2000 	ldrh.w	r2, [lr]
 80195ee:	0c24      	lsrs	r4, r4, #16
 80195f0:	fb09 2404 	mla	r4, r9, r4, r2
 80195f4:	458c      	cmp	ip, r1
 80195f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80195fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80195fe:	d8e7      	bhi.n	80195d0 <__multiply+0xfc>
 8019600:	9a01      	ldr	r2, [sp, #4]
 8019602:	50b4      	str	r4, [r6, r2]
 8019604:	3604      	adds	r6, #4
 8019606:	e7a3      	b.n	8019550 <__multiply+0x7c>
 8019608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801960c:	2b00      	cmp	r3, #0
 801960e:	d1a5      	bne.n	801955c <__multiply+0x88>
 8019610:	3f01      	subs	r7, #1
 8019612:	e7a1      	b.n	8019558 <__multiply+0x84>
 8019614:	0801a9e4 	.word	0x0801a9e4
 8019618:	0801aa74 	.word	0x0801aa74

0801961c <__pow5mult>:
 801961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019620:	4615      	mov	r5, r2
 8019622:	f012 0203 	ands.w	r2, r2, #3
 8019626:	4606      	mov	r6, r0
 8019628:	460f      	mov	r7, r1
 801962a:	d007      	beq.n	801963c <__pow5mult+0x20>
 801962c:	4c25      	ldr	r4, [pc, #148]	; (80196c4 <__pow5mult+0xa8>)
 801962e:	3a01      	subs	r2, #1
 8019630:	2300      	movs	r3, #0
 8019632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019636:	f7ff fe55 	bl	80192e4 <__multadd>
 801963a:	4607      	mov	r7, r0
 801963c:	10ad      	asrs	r5, r5, #2
 801963e:	d03d      	beq.n	80196bc <__pow5mult+0xa0>
 8019640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019642:	b97c      	cbnz	r4, 8019664 <__pow5mult+0x48>
 8019644:	2010      	movs	r0, #16
 8019646:	f7fc fc1d 	bl	8015e84 <malloc>
 801964a:	4602      	mov	r2, r0
 801964c:	6270      	str	r0, [r6, #36]	; 0x24
 801964e:	b928      	cbnz	r0, 801965c <__pow5mult+0x40>
 8019650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019654:	4b1c      	ldr	r3, [pc, #112]	; (80196c8 <__pow5mult+0xac>)
 8019656:	481d      	ldr	r0, [pc, #116]	; (80196cc <__pow5mult+0xb0>)
 8019658:	f000 fc3c 	bl	8019ed4 <__assert_func>
 801965c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019660:	6004      	str	r4, [r0, #0]
 8019662:	60c4      	str	r4, [r0, #12]
 8019664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801966c:	b94c      	cbnz	r4, 8019682 <__pow5mult+0x66>
 801966e:	f240 2171 	movw	r1, #625	; 0x271
 8019672:	4630      	mov	r0, r6
 8019674:	f7ff ff18 	bl	80194a8 <__i2b>
 8019678:	2300      	movs	r3, #0
 801967a:	4604      	mov	r4, r0
 801967c:	f8c8 0008 	str.w	r0, [r8, #8]
 8019680:	6003      	str	r3, [r0, #0]
 8019682:	f04f 0900 	mov.w	r9, #0
 8019686:	07eb      	lsls	r3, r5, #31
 8019688:	d50a      	bpl.n	80196a0 <__pow5mult+0x84>
 801968a:	4639      	mov	r1, r7
 801968c:	4622      	mov	r2, r4
 801968e:	4630      	mov	r0, r6
 8019690:	f7ff ff20 	bl	80194d4 <__multiply>
 8019694:	4680      	mov	r8, r0
 8019696:	4639      	mov	r1, r7
 8019698:	4630      	mov	r0, r6
 801969a:	f7ff fe01 	bl	80192a0 <_Bfree>
 801969e:	4647      	mov	r7, r8
 80196a0:	106d      	asrs	r5, r5, #1
 80196a2:	d00b      	beq.n	80196bc <__pow5mult+0xa0>
 80196a4:	6820      	ldr	r0, [r4, #0]
 80196a6:	b938      	cbnz	r0, 80196b8 <__pow5mult+0x9c>
 80196a8:	4622      	mov	r2, r4
 80196aa:	4621      	mov	r1, r4
 80196ac:	4630      	mov	r0, r6
 80196ae:	f7ff ff11 	bl	80194d4 <__multiply>
 80196b2:	6020      	str	r0, [r4, #0]
 80196b4:	f8c0 9000 	str.w	r9, [r0]
 80196b8:	4604      	mov	r4, r0
 80196ba:	e7e4      	b.n	8019686 <__pow5mult+0x6a>
 80196bc:	4638      	mov	r0, r7
 80196be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196c2:	bf00      	nop
 80196c4:	0801abc8 	.word	0x0801abc8
 80196c8:	0801a96e 	.word	0x0801a96e
 80196cc:	0801aa74 	.word	0x0801aa74

080196d0 <__lshift>:
 80196d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196d4:	460c      	mov	r4, r1
 80196d6:	4607      	mov	r7, r0
 80196d8:	4691      	mov	r9, r2
 80196da:	6923      	ldr	r3, [r4, #16]
 80196dc:	6849      	ldr	r1, [r1, #4]
 80196de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80196e2:	68a3      	ldr	r3, [r4, #8]
 80196e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80196e8:	f108 0601 	add.w	r6, r8, #1
 80196ec:	42b3      	cmp	r3, r6
 80196ee:	db0b      	blt.n	8019708 <__lshift+0x38>
 80196f0:	4638      	mov	r0, r7
 80196f2:	f7ff fd95 	bl	8019220 <_Balloc>
 80196f6:	4605      	mov	r5, r0
 80196f8:	b948      	cbnz	r0, 801970e <__lshift+0x3e>
 80196fa:	4602      	mov	r2, r0
 80196fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019700:	4b27      	ldr	r3, [pc, #156]	; (80197a0 <__lshift+0xd0>)
 8019702:	4828      	ldr	r0, [pc, #160]	; (80197a4 <__lshift+0xd4>)
 8019704:	f000 fbe6 	bl	8019ed4 <__assert_func>
 8019708:	3101      	adds	r1, #1
 801970a:	005b      	lsls	r3, r3, #1
 801970c:	e7ee      	b.n	80196ec <__lshift+0x1c>
 801970e:	2300      	movs	r3, #0
 8019710:	f100 0114 	add.w	r1, r0, #20
 8019714:	f100 0210 	add.w	r2, r0, #16
 8019718:	4618      	mov	r0, r3
 801971a:	4553      	cmp	r3, sl
 801971c:	db33      	blt.n	8019786 <__lshift+0xb6>
 801971e:	6920      	ldr	r0, [r4, #16]
 8019720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019724:	f104 0314 	add.w	r3, r4, #20
 8019728:	f019 091f 	ands.w	r9, r9, #31
 801972c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019734:	d02b      	beq.n	801978e <__lshift+0xbe>
 8019736:	468a      	mov	sl, r1
 8019738:	2200      	movs	r2, #0
 801973a:	f1c9 0e20 	rsb	lr, r9, #32
 801973e:	6818      	ldr	r0, [r3, #0]
 8019740:	fa00 f009 	lsl.w	r0, r0, r9
 8019744:	4302      	orrs	r2, r0
 8019746:	f84a 2b04 	str.w	r2, [sl], #4
 801974a:	f853 2b04 	ldr.w	r2, [r3], #4
 801974e:	459c      	cmp	ip, r3
 8019750:	fa22 f20e 	lsr.w	r2, r2, lr
 8019754:	d8f3      	bhi.n	801973e <__lshift+0x6e>
 8019756:	ebac 0304 	sub.w	r3, ip, r4
 801975a:	3b15      	subs	r3, #21
 801975c:	f023 0303 	bic.w	r3, r3, #3
 8019760:	3304      	adds	r3, #4
 8019762:	f104 0015 	add.w	r0, r4, #21
 8019766:	4584      	cmp	ip, r0
 8019768:	bf38      	it	cc
 801976a:	2304      	movcc	r3, #4
 801976c:	50ca      	str	r2, [r1, r3]
 801976e:	b10a      	cbz	r2, 8019774 <__lshift+0xa4>
 8019770:	f108 0602 	add.w	r6, r8, #2
 8019774:	3e01      	subs	r6, #1
 8019776:	4638      	mov	r0, r7
 8019778:	4621      	mov	r1, r4
 801977a:	612e      	str	r6, [r5, #16]
 801977c:	f7ff fd90 	bl	80192a0 <_Bfree>
 8019780:	4628      	mov	r0, r5
 8019782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019786:	f842 0f04 	str.w	r0, [r2, #4]!
 801978a:	3301      	adds	r3, #1
 801978c:	e7c5      	b.n	801971a <__lshift+0x4a>
 801978e:	3904      	subs	r1, #4
 8019790:	f853 2b04 	ldr.w	r2, [r3], #4
 8019794:	459c      	cmp	ip, r3
 8019796:	f841 2f04 	str.w	r2, [r1, #4]!
 801979a:	d8f9      	bhi.n	8019790 <__lshift+0xc0>
 801979c:	e7ea      	b.n	8019774 <__lshift+0xa4>
 801979e:	bf00      	nop
 80197a0:	0801a9e4 	.word	0x0801a9e4
 80197a4:	0801aa74 	.word	0x0801aa74

080197a8 <__mcmp>:
 80197a8:	4603      	mov	r3, r0
 80197aa:	690a      	ldr	r2, [r1, #16]
 80197ac:	6900      	ldr	r0, [r0, #16]
 80197ae:	b530      	push	{r4, r5, lr}
 80197b0:	1a80      	subs	r0, r0, r2
 80197b2:	d10d      	bne.n	80197d0 <__mcmp+0x28>
 80197b4:	3314      	adds	r3, #20
 80197b6:	3114      	adds	r1, #20
 80197b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80197bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80197c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80197c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80197c8:	4295      	cmp	r5, r2
 80197ca:	d002      	beq.n	80197d2 <__mcmp+0x2a>
 80197cc:	d304      	bcc.n	80197d8 <__mcmp+0x30>
 80197ce:	2001      	movs	r0, #1
 80197d0:	bd30      	pop	{r4, r5, pc}
 80197d2:	42a3      	cmp	r3, r4
 80197d4:	d3f4      	bcc.n	80197c0 <__mcmp+0x18>
 80197d6:	e7fb      	b.n	80197d0 <__mcmp+0x28>
 80197d8:	f04f 30ff 	mov.w	r0, #4294967295
 80197dc:	e7f8      	b.n	80197d0 <__mcmp+0x28>
	...

080197e0 <__mdiff>:
 80197e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e4:	460c      	mov	r4, r1
 80197e6:	4606      	mov	r6, r0
 80197e8:	4611      	mov	r1, r2
 80197ea:	4620      	mov	r0, r4
 80197ec:	4692      	mov	sl, r2
 80197ee:	f7ff ffdb 	bl	80197a8 <__mcmp>
 80197f2:	1e05      	subs	r5, r0, #0
 80197f4:	d111      	bne.n	801981a <__mdiff+0x3a>
 80197f6:	4629      	mov	r1, r5
 80197f8:	4630      	mov	r0, r6
 80197fa:	f7ff fd11 	bl	8019220 <_Balloc>
 80197fe:	4602      	mov	r2, r0
 8019800:	b928      	cbnz	r0, 801980e <__mdiff+0x2e>
 8019802:	f240 2132 	movw	r1, #562	; 0x232
 8019806:	4b3c      	ldr	r3, [pc, #240]	; (80198f8 <__mdiff+0x118>)
 8019808:	483c      	ldr	r0, [pc, #240]	; (80198fc <__mdiff+0x11c>)
 801980a:	f000 fb63 	bl	8019ed4 <__assert_func>
 801980e:	2301      	movs	r3, #1
 8019810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019814:	4610      	mov	r0, r2
 8019816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981a:	bfa4      	itt	ge
 801981c:	4653      	movge	r3, sl
 801981e:	46a2      	movge	sl, r4
 8019820:	4630      	mov	r0, r6
 8019822:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019826:	bfa6      	itte	ge
 8019828:	461c      	movge	r4, r3
 801982a:	2500      	movge	r5, #0
 801982c:	2501      	movlt	r5, #1
 801982e:	f7ff fcf7 	bl	8019220 <_Balloc>
 8019832:	4602      	mov	r2, r0
 8019834:	b918      	cbnz	r0, 801983e <__mdiff+0x5e>
 8019836:	f44f 7110 	mov.w	r1, #576	; 0x240
 801983a:	4b2f      	ldr	r3, [pc, #188]	; (80198f8 <__mdiff+0x118>)
 801983c:	e7e4      	b.n	8019808 <__mdiff+0x28>
 801983e:	f100 0814 	add.w	r8, r0, #20
 8019842:	f8da 7010 	ldr.w	r7, [sl, #16]
 8019846:	60c5      	str	r5, [r0, #12]
 8019848:	f04f 0c00 	mov.w	ip, #0
 801984c:	f10a 0514 	add.w	r5, sl, #20
 8019850:	f10a 0010 	add.w	r0, sl, #16
 8019854:	46c2      	mov	sl, r8
 8019856:	6926      	ldr	r6, [r4, #16]
 8019858:	f104 0914 	add.w	r9, r4, #20
 801985c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8019860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019864:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8019868:	f859 3b04 	ldr.w	r3, [r9], #4
 801986c:	fa1f f18b 	uxth.w	r1, fp
 8019870:	4461      	add	r1, ip
 8019872:	fa1f fc83 	uxth.w	ip, r3
 8019876:	0c1b      	lsrs	r3, r3, #16
 8019878:	eba1 010c 	sub.w	r1, r1, ip
 801987c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019880:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019884:	b289      	uxth	r1, r1
 8019886:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801988a:	454e      	cmp	r6, r9
 801988c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019890:	f84a 3b04 	str.w	r3, [sl], #4
 8019894:	d8e6      	bhi.n	8019864 <__mdiff+0x84>
 8019896:	1b33      	subs	r3, r6, r4
 8019898:	3b15      	subs	r3, #21
 801989a:	f023 0303 	bic.w	r3, r3, #3
 801989e:	3415      	adds	r4, #21
 80198a0:	3304      	adds	r3, #4
 80198a2:	42a6      	cmp	r6, r4
 80198a4:	bf38      	it	cc
 80198a6:	2304      	movcc	r3, #4
 80198a8:	441d      	add	r5, r3
 80198aa:	4443      	add	r3, r8
 80198ac:	461e      	mov	r6, r3
 80198ae:	462c      	mov	r4, r5
 80198b0:	4574      	cmp	r4, lr
 80198b2:	d30e      	bcc.n	80198d2 <__mdiff+0xf2>
 80198b4:	f10e 0103 	add.w	r1, lr, #3
 80198b8:	1b49      	subs	r1, r1, r5
 80198ba:	f021 0103 	bic.w	r1, r1, #3
 80198be:	3d03      	subs	r5, #3
 80198c0:	45ae      	cmp	lr, r5
 80198c2:	bf38      	it	cc
 80198c4:	2100      	movcc	r1, #0
 80198c6:	4419      	add	r1, r3
 80198c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80198cc:	b18b      	cbz	r3, 80198f2 <__mdiff+0x112>
 80198ce:	6117      	str	r7, [r2, #16]
 80198d0:	e7a0      	b.n	8019814 <__mdiff+0x34>
 80198d2:	f854 8b04 	ldr.w	r8, [r4], #4
 80198d6:	fa1f f188 	uxth.w	r1, r8
 80198da:	4461      	add	r1, ip
 80198dc:	1408      	asrs	r0, r1, #16
 80198de:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80198e2:	b289      	uxth	r1, r1
 80198e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80198e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80198ec:	f846 1b04 	str.w	r1, [r6], #4
 80198f0:	e7de      	b.n	80198b0 <__mdiff+0xd0>
 80198f2:	3f01      	subs	r7, #1
 80198f4:	e7e8      	b.n	80198c8 <__mdiff+0xe8>
 80198f6:	bf00      	nop
 80198f8:	0801a9e4 	.word	0x0801a9e4
 80198fc:	0801aa74 	.word	0x0801aa74

08019900 <__ulp>:
 8019900:	4b11      	ldr	r3, [pc, #68]	; (8019948 <__ulp+0x48>)
 8019902:	400b      	ands	r3, r1
 8019904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019908:	2b00      	cmp	r3, #0
 801990a:	dd02      	ble.n	8019912 <__ulp+0x12>
 801990c:	2000      	movs	r0, #0
 801990e:	4619      	mov	r1, r3
 8019910:	4770      	bx	lr
 8019912:	425b      	negs	r3, r3
 8019914:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019918:	f04f 0000 	mov.w	r0, #0
 801991c:	f04f 0100 	mov.w	r1, #0
 8019920:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019924:	da04      	bge.n	8019930 <__ulp+0x30>
 8019926:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801992a:	fa43 f102 	asr.w	r1, r3, r2
 801992e:	4770      	bx	lr
 8019930:	f1a2 0314 	sub.w	r3, r2, #20
 8019934:	2b1e      	cmp	r3, #30
 8019936:	bfd6      	itet	le
 8019938:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801993c:	2301      	movgt	r3, #1
 801993e:	fa22 f303 	lsrle.w	r3, r2, r3
 8019942:	4618      	mov	r0, r3
 8019944:	4770      	bx	lr
 8019946:	bf00      	nop
 8019948:	7ff00000 	.word	0x7ff00000

0801994c <__b2d>:
 801994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019950:	6907      	ldr	r7, [r0, #16]
 8019952:	f100 0914 	add.w	r9, r0, #20
 8019956:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801995a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801995e:	f1a7 0804 	sub.w	r8, r7, #4
 8019962:	4630      	mov	r0, r6
 8019964:	f7ff fd52 	bl	801940c <__hi0bits>
 8019968:	f1c0 0320 	rsb	r3, r0, #32
 801996c:	280a      	cmp	r0, #10
 801996e:	600b      	str	r3, [r1, #0]
 8019970:	491f      	ldr	r1, [pc, #124]	; (80199f0 <__b2d+0xa4>)
 8019972:	dc17      	bgt.n	80199a4 <__b2d+0x58>
 8019974:	45c1      	cmp	r9, r8
 8019976:	bf28      	it	cs
 8019978:	2200      	movcs	r2, #0
 801997a:	f1c0 0c0b 	rsb	ip, r0, #11
 801997e:	fa26 f30c 	lsr.w	r3, r6, ip
 8019982:	bf38      	it	cc
 8019984:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8019988:	ea43 0501 	orr.w	r5, r3, r1
 801998c:	f100 0315 	add.w	r3, r0, #21
 8019990:	fa06 f303 	lsl.w	r3, r6, r3
 8019994:	fa22 f20c 	lsr.w	r2, r2, ip
 8019998:	ea43 0402 	orr.w	r4, r3, r2
 801999c:	4620      	mov	r0, r4
 801999e:	4629      	mov	r1, r5
 80199a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199a4:	45c1      	cmp	r9, r8
 80199a6:	bf2e      	itee	cs
 80199a8:	2200      	movcs	r2, #0
 80199aa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80199ae:	f1a7 0808 	subcc.w	r8, r7, #8
 80199b2:	f1b0 030b 	subs.w	r3, r0, #11
 80199b6:	d016      	beq.n	80199e6 <__b2d+0x9a>
 80199b8:	f1c3 0720 	rsb	r7, r3, #32
 80199bc:	fa22 f107 	lsr.w	r1, r2, r7
 80199c0:	45c8      	cmp	r8, r9
 80199c2:	fa06 f603 	lsl.w	r6, r6, r3
 80199c6:	ea46 0601 	orr.w	r6, r6, r1
 80199ca:	bf94      	ite	ls
 80199cc:	2100      	movls	r1, #0
 80199ce:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80199d2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80199d6:	fa02 f003 	lsl.w	r0, r2, r3
 80199da:	40f9      	lsrs	r1, r7
 80199dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80199e0:	ea40 0401 	orr.w	r4, r0, r1
 80199e4:	e7da      	b.n	801999c <__b2d+0x50>
 80199e6:	4614      	mov	r4, r2
 80199e8:	ea46 0501 	orr.w	r5, r6, r1
 80199ec:	e7d6      	b.n	801999c <__b2d+0x50>
 80199ee:	bf00      	nop
 80199f0:	3ff00000 	.word	0x3ff00000

080199f4 <__d2b>:
 80199f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80199f8:	2101      	movs	r1, #1
 80199fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80199fe:	4690      	mov	r8, r2
 8019a00:	461d      	mov	r5, r3
 8019a02:	f7ff fc0d 	bl	8019220 <_Balloc>
 8019a06:	4604      	mov	r4, r0
 8019a08:	b930      	cbnz	r0, 8019a18 <__d2b+0x24>
 8019a0a:	4602      	mov	r2, r0
 8019a0c:	f240 310a 	movw	r1, #778	; 0x30a
 8019a10:	4b24      	ldr	r3, [pc, #144]	; (8019aa4 <__d2b+0xb0>)
 8019a12:	4825      	ldr	r0, [pc, #148]	; (8019aa8 <__d2b+0xb4>)
 8019a14:	f000 fa5e 	bl	8019ed4 <__assert_func>
 8019a18:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8019a1c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8019a20:	bb2d      	cbnz	r5, 8019a6e <__d2b+0x7a>
 8019a22:	9301      	str	r3, [sp, #4]
 8019a24:	f1b8 0300 	subs.w	r3, r8, #0
 8019a28:	d026      	beq.n	8019a78 <__d2b+0x84>
 8019a2a:	4668      	mov	r0, sp
 8019a2c:	9300      	str	r3, [sp, #0]
 8019a2e:	f7ff fd0d 	bl	801944c <__lo0bits>
 8019a32:	9900      	ldr	r1, [sp, #0]
 8019a34:	b1f0      	cbz	r0, 8019a74 <__d2b+0x80>
 8019a36:	9a01      	ldr	r2, [sp, #4]
 8019a38:	f1c0 0320 	rsb	r3, r0, #32
 8019a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a40:	430b      	orrs	r3, r1
 8019a42:	40c2      	lsrs	r2, r0
 8019a44:	6163      	str	r3, [r4, #20]
 8019a46:	9201      	str	r2, [sp, #4]
 8019a48:	9b01      	ldr	r3, [sp, #4]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	bf14      	ite	ne
 8019a4e:	2102      	movne	r1, #2
 8019a50:	2101      	moveq	r1, #1
 8019a52:	61a3      	str	r3, [r4, #24]
 8019a54:	6121      	str	r1, [r4, #16]
 8019a56:	b1c5      	cbz	r5, 8019a8a <__d2b+0x96>
 8019a58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a5c:	4405      	add	r5, r0
 8019a5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a62:	603d      	str	r5, [r7, #0]
 8019a64:	6030      	str	r0, [r6, #0]
 8019a66:	4620      	mov	r0, r4
 8019a68:	b002      	add	sp, #8
 8019a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a72:	e7d6      	b.n	8019a22 <__d2b+0x2e>
 8019a74:	6161      	str	r1, [r4, #20]
 8019a76:	e7e7      	b.n	8019a48 <__d2b+0x54>
 8019a78:	a801      	add	r0, sp, #4
 8019a7a:	f7ff fce7 	bl	801944c <__lo0bits>
 8019a7e:	2101      	movs	r1, #1
 8019a80:	9b01      	ldr	r3, [sp, #4]
 8019a82:	6121      	str	r1, [r4, #16]
 8019a84:	6163      	str	r3, [r4, #20]
 8019a86:	3020      	adds	r0, #32
 8019a88:	e7e5      	b.n	8019a56 <__d2b+0x62>
 8019a8a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8019a8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a92:	6038      	str	r0, [r7, #0]
 8019a94:	6918      	ldr	r0, [r3, #16]
 8019a96:	f7ff fcb9 	bl	801940c <__hi0bits>
 8019a9a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8019a9e:	6031      	str	r1, [r6, #0]
 8019aa0:	e7e1      	b.n	8019a66 <__d2b+0x72>
 8019aa2:	bf00      	nop
 8019aa4:	0801a9e4 	.word	0x0801a9e4
 8019aa8:	0801aa74 	.word	0x0801aa74

08019aac <__ratio>:
 8019aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab0:	4688      	mov	r8, r1
 8019ab2:	4669      	mov	r1, sp
 8019ab4:	4681      	mov	r9, r0
 8019ab6:	f7ff ff49 	bl	801994c <__b2d>
 8019aba:	460f      	mov	r7, r1
 8019abc:	4604      	mov	r4, r0
 8019abe:	460d      	mov	r5, r1
 8019ac0:	4640      	mov	r0, r8
 8019ac2:	a901      	add	r1, sp, #4
 8019ac4:	f7ff ff42 	bl	801994c <__b2d>
 8019ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019acc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019ad0:	468b      	mov	fp, r1
 8019ad2:	eba3 0c02 	sub.w	ip, r3, r2
 8019ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019ada:	1a9b      	subs	r3, r3, r2
 8019adc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	bfd5      	itete	le
 8019ae4:	460a      	movle	r2, r1
 8019ae6:	462a      	movgt	r2, r5
 8019ae8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019aec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019af0:	bfd8      	it	le
 8019af2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019af6:	465b      	mov	r3, fp
 8019af8:	4602      	mov	r2, r0
 8019afa:	4639      	mov	r1, r7
 8019afc:	4620      	mov	r0, r4
 8019afe:	f7e6 fe5f 	bl	80007c0 <__aeabi_ddiv>
 8019b02:	b003      	add	sp, #12
 8019b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b08 <__copybits>:
 8019b08:	3901      	subs	r1, #1
 8019b0a:	b570      	push	{r4, r5, r6, lr}
 8019b0c:	1149      	asrs	r1, r1, #5
 8019b0e:	6914      	ldr	r4, [r2, #16]
 8019b10:	3101      	adds	r1, #1
 8019b12:	f102 0314 	add.w	r3, r2, #20
 8019b16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019b1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b1e:	1f05      	subs	r5, r0, #4
 8019b20:	42a3      	cmp	r3, r4
 8019b22:	d30c      	bcc.n	8019b3e <__copybits+0x36>
 8019b24:	1aa3      	subs	r3, r4, r2
 8019b26:	3b11      	subs	r3, #17
 8019b28:	f023 0303 	bic.w	r3, r3, #3
 8019b2c:	3211      	adds	r2, #17
 8019b2e:	42a2      	cmp	r2, r4
 8019b30:	bf88      	it	hi
 8019b32:	2300      	movhi	r3, #0
 8019b34:	4418      	add	r0, r3
 8019b36:	2300      	movs	r3, #0
 8019b38:	4288      	cmp	r0, r1
 8019b3a:	d305      	bcc.n	8019b48 <__copybits+0x40>
 8019b3c:	bd70      	pop	{r4, r5, r6, pc}
 8019b3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019b42:	f845 6f04 	str.w	r6, [r5, #4]!
 8019b46:	e7eb      	b.n	8019b20 <__copybits+0x18>
 8019b48:	f840 3b04 	str.w	r3, [r0], #4
 8019b4c:	e7f4      	b.n	8019b38 <__copybits+0x30>

08019b4e <__any_on>:
 8019b4e:	f100 0214 	add.w	r2, r0, #20
 8019b52:	6900      	ldr	r0, [r0, #16]
 8019b54:	114b      	asrs	r3, r1, #5
 8019b56:	4298      	cmp	r0, r3
 8019b58:	b510      	push	{r4, lr}
 8019b5a:	db11      	blt.n	8019b80 <__any_on+0x32>
 8019b5c:	dd0a      	ble.n	8019b74 <__any_on+0x26>
 8019b5e:	f011 011f 	ands.w	r1, r1, #31
 8019b62:	d007      	beq.n	8019b74 <__any_on+0x26>
 8019b64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019b68:	fa24 f001 	lsr.w	r0, r4, r1
 8019b6c:	fa00 f101 	lsl.w	r1, r0, r1
 8019b70:	428c      	cmp	r4, r1
 8019b72:	d10b      	bne.n	8019b8c <__any_on+0x3e>
 8019b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b78:	4293      	cmp	r3, r2
 8019b7a:	d803      	bhi.n	8019b84 <__any_on+0x36>
 8019b7c:	2000      	movs	r0, #0
 8019b7e:	bd10      	pop	{r4, pc}
 8019b80:	4603      	mov	r3, r0
 8019b82:	e7f7      	b.n	8019b74 <__any_on+0x26>
 8019b84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b88:	2900      	cmp	r1, #0
 8019b8a:	d0f5      	beq.n	8019b78 <__any_on+0x2a>
 8019b8c:	2001      	movs	r0, #1
 8019b8e:	e7f6      	b.n	8019b7e <__any_on+0x30>

08019b90 <_calloc_r>:
 8019b90:	b538      	push	{r3, r4, r5, lr}
 8019b92:	fb02 f501 	mul.w	r5, r2, r1
 8019b96:	4629      	mov	r1, r5
 8019b98:	f7fc f9e6 	bl	8015f68 <_malloc_r>
 8019b9c:	4604      	mov	r4, r0
 8019b9e:	b118      	cbz	r0, 8019ba8 <_calloc_r+0x18>
 8019ba0:	462a      	mov	r2, r5
 8019ba2:	2100      	movs	r1, #0
 8019ba4:	f7fc f98c 	bl	8015ec0 <memset>
 8019ba8:	4620      	mov	r0, r4
 8019baa:	bd38      	pop	{r3, r4, r5, pc}

08019bac <__ssputs_r>:
 8019bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bb0:	688e      	ldr	r6, [r1, #8]
 8019bb2:	4682      	mov	sl, r0
 8019bb4:	429e      	cmp	r6, r3
 8019bb6:	460c      	mov	r4, r1
 8019bb8:	4690      	mov	r8, r2
 8019bba:	461f      	mov	r7, r3
 8019bbc:	d838      	bhi.n	8019c30 <__ssputs_r+0x84>
 8019bbe:	898a      	ldrh	r2, [r1, #12]
 8019bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019bc4:	d032      	beq.n	8019c2c <__ssputs_r+0x80>
 8019bc6:	6825      	ldr	r5, [r4, #0]
 8019bc8:	6909      	ldr	r1, [r1, #16]
 8019bca:	3301      	adds	r3, #1
 8019bcc:	eba5 0901 	sub.w	r9, r5, r1
 8019bd0:	6965      	ldr	r5, [r4, #20]
 8019bd2:	444b      	add	r3, r9
 8019bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019bdc:	106d      	asrs	r5, r5, #1
 8019bde:	429d      	cmp	r5, r3
 8019be0:	bf38      	it	cc
 8019be2:	461d      	movcc	r5, r3
 8019be4:	0553      	lsls	r3, r2, #21
 8019be6:	d531      	bpl.n	8019c4c <__ssputs_r+0xa0>
 8019be8:	4629      	mov	r1, r5
 8019bea:	f7fc f9bd 	bl	8015f68 <_malloc_r>
 8019bee:	4606      	mov	r6, r0
 8019bf0:	b950      	cbnz	r0, 8019c08 <__ssputs_r+0x5c>
 8019bf2:	230c      	movs	r3, #12
 8019bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8019bf8:	f8ca 3000 	str.w	r3, [sl]
 8019bfc:	89a3      	ldrh	r3, [r4, #12]
 8019bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c02:	81a3      	strh	r3, [r4, #12]
 8019c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c08:	464a      	mov	r2, r9
 8019c0a:	6921      	ldr	r1, [r4, #16]
 8019c0c:	f7fc f94a 	bl	8015ea4 <memcpy>
 8019c10:	89a3      	ldrh	r3, [r4, #12]
 8019c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c1a:	81a3      	strh	r3, [r4, #12]
 8019c1c:	6126      	str	r6, [r4, #16]
 8019c1e:	444e      	add	r6, r9
 8019c20:	6026      	str	r6, [r4, #0]
 8019c22:	463e      	mov	r6, r7
 8019c24:	6165      	str	r5, [r4, #20]
 8019c26:	eba5 0509 	sub.w	r5, r5, r9
 8019c2a:	60a5      	str	r5, [r4, #8]
 8019c2c:	42be      	cmp	r6, r7
 8019c2e:	d900      	bls.n	8019c32 <__ssputs_r+0x86>
 8019c30:	463e      	mov	r6, r7
 8019c32:	4632      	mov	r2, r6
 8019c34:	4641      	mov	r1, r8
 8019c36:	6820      	ldr	r0, [r4, #0]
 8019c38:	f000 f97c 	bl	8019f34 <memmove>
 8019c3c:	68a3      	ldr	r3, [r4, #8]
 8019c3e:	6822      	ldr	r2, [r4, #0]
 8019c40:	1b9b      	subs	r3, r3, r6
 8019c42:	4432      	add	r2, r6
 8019c44:	2000      	movs	r0, #0
 8019c46:	60a3      	str	r3, [r4, #8]
 8019c48:	6022      	str	r2, [r4, #0]
 8019c4a:	e7db      	b.n	8019c04 <__ssputs_r+0x58>
 8019c4c:	462a      	mov	r2, r5
 8019c4e:	f000 f98b 	bl	8019f68 <_realloc_r>
 8019c52:	4606      	mov	r6, r0
 8019c54:	2800      	cmp	r0, #0
 8019c56:	d1e1      	bne.n	8019c1c <__ssputs_r+0x70>
 8019c58:	4650      	mov	r0, sl
 8019c5a:	6921      	ldr	r1, [r4, #16]
 8019c5c:	f7fc f938 	bl	8015ed0 <_free_r>
 8019c60:	e7c7      	b.n	8019bf2 <__ssputs_r+0x46>
	...

08019c64 <_svfiprintf_r>:
 8019c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c68:	4698      	mov	r8, r3
 8019c6a:	898b      	ldrh	r3, [r1, #12]
 8019c6c:	4607      	mov	r7, r0
 8019c6e:	061b      	lsls	r3, r3, #24
 8019c70:	460d      	mov	r5, r1
 8019c72:	4614      	mov	r4, r2
 8019c74:	b09d      	sub	sp, #116	; 0x74
 8019c76:	d50e      	bpl.n	8019c96 <_svfiprintf_r+0x32>
 8019c78:	690b      	ldr	r3, [r1, #16]
 8019c7a:	b963      	cbnz	r3, 8019c96 <_svfiprintf_r+0x32>
 8019c7c:	2140      	movs	r1, #64	; 0x40
 8019c7e:	f7fc f973 	bl	8015f68 <_malloc_r>
 8019c82:	6028      	str	r0, [r5, #0]
 8019c84:	6128      	str	r0, [r5, #16]
 8019c86:	b920      	cbnz	r0, 8019c92 <_svfiprintf_r+0x2e>
 8019c88:	230c      	movs	r3, #12
 8019c8a:	603b      	str	r3, [r7, #0]
 8019c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019c90:	e0d1      	b.n	8019e36 <_svfiprintf_r+0x1d2>
 8019c92:	2340      	movs	r3, #64	; 0x40
 8019c94:	616b      	str	r3, [r5, #20]
 8019c96:	2300      	movs	r3, #0
 8019c98:	9309      	str	r3, [sp, #36]	; 0x24
 8019c9a:	2320      	movs	r3, #32
 8019c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ca0:	2330      	movs	r3, #48	; 0x30
 8019ca2:	f04f 0901 	mov.w	r9, #1
 8019ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019caa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019e50 <_svfiprintf_r+0x1ec>
 8019cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019cb2:	4623      	mov	r3, r4
 8019cb4:	469a      	mov	sl, r3
 8019cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cba:	b10a      	cbz	r2, 8019cc0 <_svfiprintf_r+0x5c>
 8019cbc:	2a25      	cmp	r2, #37	; 0x25
 8019cbe:	d1f9      	bne.n	8019cb4 <_svfiprintf_r+0x50>
 8019cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8019cc4:	d00b      	beq.n	8019cde <_svfiprintf_r+0x7a>
 8019cc6:	465b      	mov	r3, fp
 8019cc8:	4622      	mov	r2, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	4638      	mov	r0, r7
 8019cce:	f7ff ff6d 	bl	8019bac <__ssputs_r>
 8019cd2:	3001      	adds	r0, #1
 8019cd4:	f000 80aa 	beq.w	8019e2c <_svfiprintf_r+0x1c8>
 8019cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cda:	445a      	add	r2, fp
 8019cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8019cde:	f89a 3000 	ldrb.w	r3, [sl]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	f000 80a2 	beq.w	8019e2c <_svfiprintf_r+0x1c8>
 8019ce8:	2300      	movs	r3, #0
 8019cea:	f04f 32ff 	mov.w	r2, #4294967295
 8019cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019cf2:	f10a 0a01 	add.w	sl, sl, #1
 8019cf6:	9304      	str	r3, [sp, #16]
 8019cf8:	9307      	str	r3, [sp, #28]
 8019cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8019d00:	4654      	mov	r4, sl
 8019d02:	2205      	movs	r2, #5
 8019d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d08:	4851      	ldr	r0, [pc, #324]	; (8019e50 <_svfiprintf_r+0x1ec>)
 8019d0a:	f7ff fa6f 	bl	80191ec <memchr>
 8019d0e:	9a04      	ldr	r2, [sp, #16]
 8019d10:	b9d8      	cbnz	r0, 8019d4a <_svfiprintf_r+0xe6>
 8019d12:	06d0      	lsls	r0, r2, #27
 8019d14:	bf44      	itt	mi
 8019d16:	2320      	movmi	r3, #32
 8019d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d1c:	0711      	lsls	r1, r2, #28
 8019d1e:	bf44      	itt	mi
 8019d20:	232b      	movmi	r3, #43	; 0x2b
 8019d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d26:	f89a 3000 	ldrb.w	r3, [sl]
 8019d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8019d2c:	d015      	beq.n	8019d5a <_svfiprintf_r+0xf6>
 8019d2e:	4654      	mov	r4, sl
 8019d30:	2000      	movs	r0, #0
 8019d32:	f04f 0c0a 	mov.w	ip, #10
 8019d36:	9a07      	ldr	r2, [sp, #28]
 8019d38:	4621      	mov	r1, r4
 8019d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d3e:	3b30      	subs	r3, #48	; 0x30
 8019d40:	2b09      	cmp	r3, #9
 8019d42:	d94e      	bls.n	8019de2 <_svfiprintf_r+0x17e>
 8019d44:	b1b0      	cbz	r0, 8019d74 <_svfiprintf_r+0x110>
 8019d46:	9207      	str	r2, [sp, #28]
 8019d48:	e014      	b.n	8019d74 <_svfiprintf_r+0x110>
 8019d4a:	eba0 0308 	sub.w	r3, r0, r8
 8019d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8019d52:	4313      	orrs	r3, r2
 8019d54:	46a2      	mov	sl, r4
 8019d56:	9304      	str	r3, [sp, #16]
 8019d58:	e7d2      	b.n	8019d00 <_svfiprintf_r+0x9c>
 8019d5a:	9b03      	ldr	r3, [sp, #12]
 8019d5c:	1d19      	adds	r1, r3, #4
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	9103      	str	r1, [sp, #12]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	bfbb      	ittet	lt
 8019d66:	425b      	neglt	r3, r3
 8019d68:	f042 0202 	orrlt.w	r2, r2, #2
 8019d6c:	9307      	strge	r3, [sp, #28]
 8019d6e:	9307      	strlt	r3, [sp, #28]
 8019d70:	bfb8      	it	lt
 8019d72:	9204      	strlt	r2, [sp, #16]
 8019d74:	7823      	ldrb	r3, [r4, #0]
 8019d76:	2b2e      	cmp	r3, #46	; 0x2e
 8019d78:	d10c      	bne.n	8019d94 <_svfiprintf_r+0x130>
 8019d7a:	7863      	ldrb	r3, [r4, #1]
 8019d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8019d7e:	d135      	bne.n	8019dec <_svfiprintf_r+0x188>
 8019d80:	9b03      	ldr	r3, [sp, #12]
 8019d82:	3402      	adds	r4, #2
 8019d84:	1d1a      	adds	r2, r3, #4
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	9203      	str	r2, [sp, #12]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	bfb8      	it	lt
 8019d8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d92:	9305      	str	r3, [sp, #20]
 8019d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019e60 <_svfiprintf_r+0x1fc>
 8019d98:	2203      	movs	r2, #3
 8019d9a:	4650      	mov	r0, sl
 8019d9c:	7821      	ldrb	r1, [r4, #0]
 8019d9e:	f7ff fa25 	bl	80191ec <memchr>
 8019da2:	b140      	cbz	r0, 8019db6 <_svfiprintf_r+0x152>
 8019da4:	2340      	movs	r3, #64	; 0x40
 8019da6:	eba0 000a 	sub.w	r0, r0, sl
 8019daa:	fa03 f000 	lsl.w	r0, r3, r0
 8019dae:	9b04      	ldr	r3, [sp, #16]
 8019db0:	3401      	adds	r4, #1
 8019db2:	4303      	orrs	r3, r0
 8019db4:	9304      	str	r3, [sp, #16]
 8019db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dba:	2206      	movs	r2, #6
 8019dbc:	4825      	ldr	r0, [pc, #148]	; (8019e54 <_svfiprintf_r+0x1f0>)
 8019dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019dc2:	f7ff fa13 	bl	80191ec <memchr>
 8019dc6:	2800      	cmp	r0, #0
 8019dc8:	d038      	beq.n	8019e3c <_svfiprintf_r+0x1d8>
 8019dca:	4b23      	ldr	r3, [pc, #140]	; (8019e58 <_svfiprintf_r+0x1f4>)
 8019dcc:	bb1b      	cbnz	r3, 8019e16 <_svfiprintf_r+0x1b2>
 8019dce:	9b03      	ldr	r3, [sp, #12]
 8019dd0:	3307      	adds	r3, #7
 8019dd2:	f023 0307 	bic.w	r3, r3, #7
 8019dd6:	3308      	adds	r3, #8
 8019dd8:	9303      	str	r3, [sp, #12]
 8019dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ddc:	4433      	add	r3, r6
 8019dde:	9309      	str	r3, [sp, #36]	; 0x24
 8019de0:	e767      	b.n	8019cb2 <_svfiprintf_r+0x4e>
 8019de2:	460c      	mov	r4, r1
 8019de4:	2001      	movs	r0, #1
 8019de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8019dea:	e7a5      	b.n	8019d38 <_svfiprintf_r+0xd4>
 8019dec:	2300      	movs	r3, #0
 8019dee:	f04f 0c0a 	mov.w	ip, #10
 8019df2:	4619      	mov	r1, r3
 8019df4:	3401      	adds	r4, #1
 8019df6:	9305      	str	r3, [sp, #20]
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019dfe:	3a30      	subs	r2, #48	; 0x30
 8019e00:	2a09      	cmp	r2, #9
 8019e02:	d903      	bls.n	8019e0c <_svfiprintf_r+0x1a8>
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d0c5      	beq.n	8019d94 <_svfiprintf_r+0x130>
 8019e08:	9105      	str	r1, [sp, #20]
 8019e0a:	e7c3      	b.n	8019d94 <_svfiprintf_r+0x130>
 8019e0c:	4604      	mov	r4, r0
 8019e0e:	2301      	movs	r3, #1
 8019e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e14:	e7f0      	b.n	8019df8 <_svfiprintf_r+0x194>
 8019e16:	ab03      	add	r3, sp, #12
 8019e18:	9300      	str	r3, [sp, #0]
 8019e1a:	462a      	mov	r2, r5
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	4b0f      	ldr	r3, [pc, #60]	; (8019e5c <_svfiprintf_r+0x1f8>)
 8019e20:	a904      	add	r1, sp, #16
 8019e22:	f7fc f999 	bl	8016158 <_printf_float>
 8019e26:	1c42      	adds	r2, r0, #1
 8019e28:	4606      	mov	r6, r0
 8019e2a:	d1d6      	bne.n	8019dda <_svfiprintf_r+0x176>
 8019e2c:	89ab      	ldrh	r3, [r5, #12]
 8019e2e:	065b      	lsls	r3, r3, #25
 8019e30:	f53f af2c 	bmi.w	8019c8c <_svfiprintf_r+0x28>
 8019e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e36:	b01d      	add	sp, #116	; 0x74
 8019e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e3c:	ab03      	add	r3, sp, #12
 8019e3e:	9300      	str	r3, [sp, #0]
 8019e40:	462a      	mov	r2, r5
 8019e42:	4638      	mov	r0, r7
 8019e44:	4b05      	ldr	r3, [pc, #20]	; (8019e5c <_svfiprintf_r+0x1f8>)
 8019e46:	a904      	add	r1, sp, #16
 8019e48:	f7fc fc22 	bl	8016690 <_printf_i>
 8019e4c:	e7eb      	b.n	8019e26 <_svfiprintf_r+0x1c2>
 8019e4e:	bf00      	nop
 8019e50:	0801abd4 	.word	0x0801abd4
 8019e54:	0801abde 	.word	0x0801abde
 8019e58:	08016159 	.word	0x08016159
 8019e5c:	08019bad 	.word	0x08019bad
 8019e60:	0801abda 	.word	0x0801abda

08019e64 <_read_r>:
 8019e64:	b538      	push	{r3, r4, r5, lr}
 8019e66:	4604      	mov	r4, r0
 8019e68:	4608      	mov	r0, r1
 8019e6a:	4611      	mov	r1, r2
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	4d05      	ldr	r5, [pc, #20]	; (8019e84 <_read_r+0x20>)
 8019e70:	602a      	str	r2, [r5, #0]
 8019e72:	461a      	mov	r2, r3
 8019e74:	f7eb fe9b 	bl	8005bae <_read>
 8019e78:	1c43      	adds	r3, r0, #1
 8019e7a:	d102      	bne.n	8019e82 <_read_r+0x1e>
 8019e7c:	682b      	ldr	r3, [r5, #0]
 8019e7e:	b103      	cbz	r3, 8019e82 <_read_r+0x1e>
 8019e80:	6023      	str	r3, [r4, #0]
 8019e82:	bd38      	pop	{r3, r4, r5, pc}
 8019e84:	2000e604 	.word	0x2000e604

08019e88 <nan>:
 8019e88:	2000      	movs	r0, #0
 8019e8a:	4901      	ldr	r1, [pc, #4]	; (8019e90 <nan+0x8>)
 8019e8c:	4770      	bx	lr
 8019e8e:	bf00      	nop
 8019e90:	7ff80000 	.word	0x7ff80000

08019e94 <strncmp>:
 8019e94:	b510      	push	{r4, lr}
 8019e96:	b16a      	cbz	r2, 8019eb4 <strncmp+0x20>
 8019e98:	3901      	subs	r1, #1
 8019e9a:	1884      	adds	r4, r0, r2
 8019e9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019ea0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019ea4:	4293      	cmp	r3, r2
 8019ea6:	d103      	bne.n	8019eb0 <strncmp+0x1c>
 8019ea8:	42a0      	cmp	r0, r4
 8019eaa:	d001      	beq.n	8019eb0 <strncmp+0x1c>
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d1f5      	bne.n	8019e9c <strncmp+0x8>
 8019eb0:	1a98      	subs	r0, r3, r2
 8019eb2:	bd10      	pop	{r4, pc}
 8019eb4:	4610      	mov	r0, r2
 8019eb6:	e7fc      	b.n	8019eb2 <strncmp+0x1e>

08019eb8 <__ascii_wctomb>:
 8019eb8:	4603      	mov	r3, r0
 8019eba:	4608      	mov	r0, r1
 8019ebc:	b141      	cbz	r1, 8019ed0 <__ascii_wctomb+0x18>
 8019ebe:	2aff      	cmp	r2, #255	; 0xff
 8019ec0:	d904      	bls.n	8019ecc <__ascii_wctomb+0x14>
 8019ec2:	228a      	movs	r2, #138	; 0x8a
 8019ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ec8:	601a      	str	r2, [r3, #0]
 8019eca:	4770      	bx	lr
 8019ecc:	2001      	movs	r0, #1
 8019ece:	700a      	strb	r2, [r1, #0]
 8019ed0:	4770      	bx	lr
	...

08019ed4 <__assert_func>:
 8019ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019ed6:	4614      	mov	r4, r2
 8019ed8:	461a      	mov	r2, r3
 8019eda:	4b09      	ldr	r3, [pc, #36]	; (8019f00 <__assert_func+0x2c>)
 8019edc:	4605      	mov	r5, r0
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	68d8      	ldr	r0, [r3, #12]
 8019ee2:	b14c      	cbz	r4, 8019ef8 <__assert_func+0x24>
 8019ee4:	4b07      	ldr	r3, [pc, #28]	; (8019f04 <__assert_func+0x30>)
 8019ee6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019eea:	9100      	str	r1, [sp, #0]
 8019eec:	462b      	mov	r3, r5
 8019eee:	4906      	ldr	r1, [pc, #24]	; (8019f08 <__assert_func+0x34>)
 8019ef0:	f000 f80e 	bl	8019f10 <fiprintf>
 8019ef4:	f000 fa76 	bl	801a3e4 <abort>
 8019ef8:	4b04      	ldr	r3, [pc, #16]	; (8019f0c <__assert_func+0x38>)
 8019efa:	461c      	mov	r4, r3
 8019efc:	e7f3      	b.n	8019ee6 <__assert_func+0x12>
 8019efe:	bf00      	nop
 8019f00:	20000290 	.word	0x20000290
 8019f04:	0801abe5 	.word	0x0801abe5
 8019f08:	0801abf2 	.word	0x0801abf2
 8019f0c:	0801ac20 	.word	0x0801ac20

08019f10 <fiprintf>:
 8019f10:	b40e      	push	{r1, r2, r3}
 8019f12:	b503      	push	{r0, r1, lr}
 8019f14:	4601      	mov	r1, r0
 8019f16:	ab03      	add	r3, sp, #12
 8019f18:	4805      	ldr	r0, [pc, #20]	; (8019f30 <fiprintf+0x20>)
 8019f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f1e:	6800      	ldr	r0, [r0, #0]
 8019f20:	9301      	str	r3, [sp, #4]
 8019f22:	f000 f86f 	bl	801a004 <_vfiprintf_r>
 8019f26:	b002      	add	sp, #8
 8019f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f2c:	b003      	add	sp, #12
 8019f2e:	4770      	bx	lr
 8019f30:	20000290 	.word	0x20000290

08019f34 <memmove>:
 8019f34:	4288      	cmp	r0, r1
 8019f36:	b510      	push	{r4, lr}
 8019f38:	eb01 0402 	add.w	r4, r1, r2
 8019f3c:	d902      	bls.n	8019f44 <memmove+0x10>
 8019f3e:	4284      	cmp	r4, r0
 8019f40:	4623      	mov	r3, r4
 8019f42:	d807      	bhi.n	8019f54 <memmove+0x20>
 8019f44:	1e43      	subs	r3, r0, #1
 8019f46:	42a1      	cmp	r1, r4
 8019f48:	d008      	beq.n	8019f5c <memmove+0x28>
 8019f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019f52:	e7f8      	b.n	8019f46 <memmove+0x12>
 8019f54:	4601      	mov	r1, r0
 8019f56:	4402      	add	r2, r0
 8019f58:	428a      	cmp	r2, r1
 8019f5a:	d100      	bne.n	8019f5e <memmove+0x2a>
 8019f5c:	bd10      	pop	{r4, pc}
 8019f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019f66:	e7f7      	b.n	8019f58 <memmove+0x24>

08019f68 <_realloc_r>:
 8019f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6a:	4607      	mov	r7, r0
 8019f6c:	4614      	mov	r4, r2
 8019f6e:	460e      	mov	r6, r1
 8019f70:	b921      	cbnz	r1, 8019f7c <_realloc_r+0x14>
 8019f72:	4611      	mov	r1, r2
 8019f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f78:	f7fb bff6 	b.w	8015f68 <_malloc_r>
 8019f7c:	b922      	cbnz	r2, 8019f88 <_realloc_r+0x20>
 8019f7e:	f7fb ffa7 	bl	8015ed0 <_free_r>
 8019f82:	4625      	mov	r5, r4
 8019f84:	4628      	mov	r0, r5
 8019f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f88:	f000 fa98 	bl	801a4bc <_malloc_usable_size_r>
 8019f8c:	42a0      	cmp	r0, r4
 8019f8e:	d20f      	bcs.n	8019fb0 <_realloc_r+0x48>
 8019f90:	4621      	mov	r1, r4
 8019f92:	4638      	mov	r0, r7
 8019f94:	f7fb ffe8 	bl	8015f68 <_malloc_r>
 8019f98:	4605      	mov	r5, r0
 8019f9a:	2800      	cmp	r0, #0
 8019f9c:	d0f2      	beq.n	8019f84 <_realloc_r+0x1c>
 8019f9e:	4631      	mov	r1, r6
 8019fa0:	4622      	mov	r2, r4
 8019fa2:	f7fb ff7f 	bl	8015ea4 <memcpy>
 8019fa6:	4631      	mov	r1, r6
 8019fa8:	4638      	mov	r0, r7
 8019faa:	f7fb ff91 	bl	8015ed0 <_free_r>
 8019fae:	e7e9      	b.n	8019f84 <_realloc_r+0x1c>
 8019fb0:	4635      	mov	r5, r6
 8019fb2:	e7e7      	b.n	8019f84 <_realloc_r+0x1c>

08019fb4 <__sfputc_r>:
 8019fb4:	6893      	ldr	r3, [r2, #8]
 8019fb6:	b410      	push	{r4}
 8019fb8:	3b01      	subs	r3, #1
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	6093      	str	r3, [r2, #8]
 8019fbe:	da07      	bge.n	8019fd0 <__sfputc_r+0x1c>
 8019fc0:	6994      	ldr	r4, [r2, #24]
 8019fc2:	42a3      	cmp	r3, r4
 8019fc4:	db01      	blt.n	8019fca <__sfputc_r+0x16>
 8019fc6:	290a      	cmp	r1, #10
 8019fc8:	d102      	bne.n	8019fd0 <__sfputc_r+0x1c>
 8019fca:	bc10      	pop	{r4}
 8019fcc:	f000 b94a 	b.w	801a264 <__swbuf_r>
 8019fd0:	6813      	ldr	r3, [r2, #0]
 8019fd2:	1c58      	adds	r0, r3, #1
 8019fd4:	6010      	str	r0, [r2, #0]
 8019fd6:	7019      	strb	r1, [r3, #0]
 8019fd8:	4608      	mov	r0, r1
 8019fda:	bc10      	pop	{r4}
 8019fdc:	4770      	bx	lr

08019fde <__sfputs_r>:
 8019fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe0:	4606      	mov	r6, r0
 8019fe2:	460f      	mov	r7, r1
 8019fe4:	4614      	mov	r4, r2
 8019fe6:	18d5      	adds	r5, r2, r3
 8019fe8:	42ac      	cmp	r4, r5
 8019fea:	d101      	bne.n	8019ff0 <__sfputs_r+0x12>
 8019fec:	2000      	movs	r0, #0
 8019fee:	e007      	b.n	801a000 <__sfputs_r+0x22>
 8019ff0:	463a      	mov	r2, r7
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ff8:	f7ff ffdc 	bl	8019fb4 <__sfputc_r>
 8019ffc:	1c43      	adds	r3, r0, #1
 8019ffe:	d1f3      	bne.n	8019fe8 <__sfputs_r+0xa>
 801a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a004 <_vfiprintf_r>:
 801a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a008:	460d      	mov	r5, r1
 801a00a:	4614      	mov	r4, r2
 801a00c:	4698      	mov	r8, r3
 801a00e:	4606      	mov	r6, r0
 801a010:	b09d      	sub	sp, #116	; 0x74
 801a012:	b118      	cbz	r0, 801a01c <_vfiprintf_r+0x18>
 801a014:	6983      	ldr	r3, [r0, #24]
 801a016:	b90b      	cbnz	r3, 801a01c <_vfiprintf_r+0x18>
 801a018:	f7fb fe6e 	bl	8015cf8 <__sinit>
 801a01c:	4b89      	ldr	r3, [pc, #548]	; (801a244 <_vfiprintf_r+0x240>)
 801a01e:	429d      	cmp	r5, r3
 801a020:	d11b      	bne.n	801a05a <_vfiprintf_r+0x56>
 801a022:	6875      	ldr	r5, [r6, #4]
 801a024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a026:	07d9      	lsls	r1, r3, #31
 801a028:	d405      	bmi.n	801a036 <_vfiprintf_r+0x32>
 801a02a:	89ab      	ldrh	r3, [r5, #12]
 801a02c:	059a      	lsls	r2, r3, #22
 801a02e:	d402      	bmi.n	801a036 <_vfiprintf_r+0x32>
 801a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a032:	f7fb ff24 	bl	8015e7e <__retarget_lock_acquire_recursive>
 801a036:	89ab      	ldrh	r3, [r5, #12]
 801a038:	071b      	lsls	r3, r3, #28
 801a03a:	d501      	bpl.n	801a040 <_vfiprintf_r+0x3c>
 801a03c:	692b      	ldr	r3, [r5, #16]
 801a03e:	b9eb      	cbnz	r3, 801a07c <_vfiprintf_r+0x78>
 801a040:	4629      	mov	r1, r5
 801a042:	4630      	mov	r0, r6
 801a044:	f000 f960 	bl	801a308 <__swsetup_r>
 801a048:	b1c0      	cbz	r0, 801a07c <_vfiprintf_r+0x78>
 801a04a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a04c:	07dc      	lsls	r4, r3, #31
 801a04e:	d50e      	bpl.n	801a06e <_vfiprintf_r+0x6a>
 801a050:	f04f 30ff 	mov.w	r0, #4294967295
 801a054:	b01d      	add	sp, #116	; 0x74
 801a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05a:	4b7b      	ldr	r3, [pc, #492]	; (801a248 <_vfiprintf_r+0x244>)
 801a05c:	429d      	cmp	r5, r3
 801a05e:	d101      	bne.n	801a064 <_vfiprintf_r+0x60>
 801a060:	68b5      	ldr	r5, [r6, #8]
 801a062:	e7df      	b.n	801a024 <_vfiprintf_r+0x20>
 801a064:	4b79      	ldr	r3, [pc, #484]	; (801a24c <_vfiprintf_r+0x248>)
 801a066:	429d      	cmp	r5, r3
 801a068:	bf08      	it	eq
 801a06a:	68f5      	ldreq	r5, [r6, #12]
 801a06c:	e7da      	b.n	801a024 <_vfiprintf_r+0x20>
 801a06e:	89ab      	ldrh	r3, [r5, #12]
 801a070:	0598      	lsls	r0, r3, #22
 801a072:	d4ed      	bmi.n	801a050 <_vfiprintf_r+0x4c>
 801a074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a076:	f7fb ff03 	bl	8015e80 <__retarget_lock_release_recursive>
 801a07a:	e7e9      	b.n	801a050 <_vfiprintf_r+0x4c>
 801a07c:	2300      	movs	r3, #0
 801a07e:	9309      	str	r3, [sp, #36]	; 0x24
 801a080:	2320      	movs	r3, #32
 801a082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a086:	2330      	movs	r3, #48	; 0x30
 801a088:	f04f 0901 	mov.w	r9, #1
 801a08c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a090:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801a250 <_vfiprintf_r+0x24c>
 801a094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a098:	4623      	mov	r3, r4
 801a09a:	469a      	mov	sl, r3
 801a09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0a0:	b10a      	cbz	r2, 801a0a6 <_vfiprintf_r+0xa2>
 801a0a2:	2a25      	cmp	r2, #37	; 0x25
 801a0a4:	d1f9      	bne.n	801a09a <_vfiprintf_r+0x96>
 801a0a6:	ebba 0b04 	subs.w	fp, sl, r4
 801a0aa:	d00b      	beq.n	801a0c4 <_vfiprintf_r+0xc0>
 801a0ac:	465b      	mov	r3, fp
 801a0ae:	4622      	mov	r2, r4
 801a0b0:	4629      	mov	r1, r5
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	f7ff ff93 	bl	8019fde <__sfputs_r>
 801a0b8:	3001      	adds	r0, #1
 801a0ba:	f000 80aa 	beq.w	801a212 <_vfiprintf_r+0x20e>
 801a0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0c0:	445a      	add	r2, fp
 801a0c2:	9209      	str	r2, [sp, #36]	; 0x24
 801a0c4:	f89a 3000 	ldrb.w	r3, [sl]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	f000 80a2 	beq.w	801a212 <_vfiprintf_r+0x20e>
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 801a0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0d8:	f10a 0a01 	add.w	sl, sl, #1
 801a0dc:	9304      	str	r3, [sp, #16]
 801a0de:	9307      	str	r3, [sp, #28]
 801a0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0e4:	931a      	str	r3, [sp, #104]	; 0x68
 801a0e6:	4654      	mov	r4, sl
 801a0e8:	2205      	movs	r2, #5
 801a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ee:	4858      	ldr	r0, [pc, #352]	; (801a250 <_vfiprintf_r+0x24c>)
 801a0f0:	f7ff f87c 	bl	80191ec <memchr>
 801a0f4:	9a04      	ldr	r2, [sp, #16]
 801a0f6:	b9d8      	cbnz	r0, 801a130 <_vfiprintf_r+0x12c>
 801a0f8:	06d1      	lsls	r1, r2, #27
 801a0fa:	bf44      	itt	mi
 801a0fc:	2320      	movmi	r3, #32
 801a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a102:	0713      	lsls	r3, r2, #28
 801a104:	bf44      	itt	mi
 801a106:	232b      	movmi	r3, #43	; 0x2b
 801a108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a10c:	f89a 3000 	ldrb.w	r3, [sl]
 801a110:	2b2a      	cmp	r3, #42	; 0x2a
 801a112:	d015      	beq.n	801a140 <_vfiprintf_r+0x13c>
 801a114:	4654      	mov	r4, sl
 801a116:	2000      	movs	r0, #0
 801a118:	f04f 0c0a 	mov.w	ip, #10
 801a11c:	9a07      	ldr	r2, [sp, #28]
 801a11e:	4621      	mov	r1, r4
 801a120:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a124:	3b30      	subs	r3, #48	; 0x30
 801a126:	2b09      	cmp	r3, #9
 801a128:	d94e      	bls.n	801a1c8 <_vfiprintf_r+0x1c4>
 801a12a:	b1b0      	cbz	r0, 801a15a <_vfiprintf_r+0x156>
 801a12c:	9207      	str	r2, [sp, #28]
 801a12e:	e014      	b.n	801a15a <_vfiprintf_r+0x156>
 801a130:	eba0 0308 	sub.w	r3, r0, r8
 801a134:	fa09 f303 	lsl.w	r3, r9, r3
 801a138:	4313      	orrs	r3, r2
 801a13a:	46a2      	mov	sl, r4
 801a13c:	9304      	str	r3, [sp, #16]
 801a13e:	e7d2      	b.n	801a0e6 <_vfiprintf_r+0xe2>
 801a140:	9b03      	ldr	r3, [sp, #12]
 801a142:	1d19      	adds	r1, r3, #4
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	9103      	str	r1, [sp, #12]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	bfbb      	ittet	lt
 801a14c:	425b      	neglt	r3, r3
 801a14e:	f042 0202 	orrlt.w	r2, r2, #2
 801a152:	9307      	strge	r3, [sp, #28]
 801a154:	9307      	strlt	r3, [sp, #28]
 801a156:	bfb8      	it	lt
 801a158:	9204      	strlt	r2, [sp, #16]
 801a15a:	7823      	ldrb	r3, [r4, #0]
 801a15c:	2b2e      	cmp	r3, #46	; 0x2e
 801a15e:	d10c      	bne.n	801a17a <_vfiprintf_r+0x176>
 801a160:	7863      	ldrb	r3, [r4, #1]
 801a162:	2b2a      	cmp	r3, #42	; 0x2a
 801a164:	d135      	bne.n	801a1d2 <_vfiprintf_r+0x1ce>
 801a166:	9b03      	ldr	r3, [sp, #12]
 801a168:	3402      	adds	r4, #2
 801a16a:	1d1a      	adds	r2, r3, #4
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	9203      	str	r2, [sp, #12]
 801a170:	2b00      	cmp	r3, #0
 801a172:	bfb8      	it	lt
 801a174:	f04f 33ff 	movlt.w	r3, #4294967295
 801a178:	9305      	str	r3, [sp, #20]
 801a17a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a260 <_vfiprintf_r+0x25c>
 801a17e:	2203      	movs	r2, #3
 801a180:	4650      	mov	r0, sl
 801a182:	7821      	ldrb	r1, [r4, #0]
 801a184:	f7ff f832 	bl	80191ec <memchr>
 801a188:	b140      	cbz	r0, 801a19c <_vfiprintf_r+0x198>
 801a18a:	2340      	movs	r3, #64	; 0x40
 801a18c:	eba0 000a 	sub.w	r0, r0, sl
 801a190:	fa03 f000 	lsl.w	r0, r3, r0
 801a194:	9b04      	ldr	r3, [sp, #16]
 801a196:	3401      	adds	r4, #1
 801a198:	4303      	orrs	r3, r0
 801a19a:	9304      	str	r3, [sp, #16]
 801a19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1a0:	2206      	movs	r2, #6
 801a1a2:	482c      	ldr	r0, [pc, #176]	; (801a254 <_vfiprintf_r+0x250>)
 801a1a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1a8:	f7ff f820 	bl	80191ec <memchr>
 801a1ac:	2800      	cmp	r0, #0
 801a1ae:	d03f      	beq.n	801a230 <_vfiprintf_r+0x22c>
 801a1b0:	4b29      	ldr	r3, [pc, #164]	; (801a258 <_vfiprintf_r+0x254>)
 801a1b2:	bb1b      	cbnz	r3, 801a1fc <_vfiprintf_r+0x1f8>
 801a1b4:	9b03      	ldr	r3, [sp, #12]
 801a1b6:	3307      	adds	r3, #7
 801a1b8:	f023 0307 	bic.w	r3, r3, #7
 801a1bc:	3308      	adds	r3, #8
 801a1be:	9303      	str	r3, [sp, #12]
 801a1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1c2:	443b      	add	r3, r7
 801a1c4:	9309      	str	r3, [sp, #36]	; 0x24
 801a1c6:	e767      	b.n	801a098 <_vfiprintf_r+0x94>
 801a1c8:	460c      	mov	r4, r1
 801a1ca:	2001      	movs	r0, #1
 801a1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1d0:	e7a5      	b.n	801a11e <_vfiprintf_r+0x11a>
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	f04f 0c0a 	mov.w	ip, #10
 801a1d8:	4619      	mov	r1, r3
 801a1da:	3401      	adds	r4, #1
 801a1dc:	9305      	str	r3, [sp, #20]
 801a1de:	4620      	mov	r0, r4
 801a1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1e4:	3a30      	subs	r2, #48	; 0x30
 801a1e6:	2a09      	cmp	r2, #9
 801a1e8:	d903      	bls.n	801a1f2 <_vfiprintf_r+0x1ee>
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d0c5      	beq.n	801a17a <_vfiprintf_r+0x176>
 801a1ee:	9105      	str	r1, [sp, #20]
 801a1f0:	e7c3      	b.n	801a17a <_vfiprintf_r+0x176>
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1fa:	e7f0      	b.n	801a1de <_vfiprintf_r+0x1da>
 801a1fc:	ab03      	add	r3, sp, #12
 801a1fe:	9300      	str	r3, [sp, #0]
 801a200:	462a      	mov	r2, r5
 801a202:	4630      	mov	r0, r6
 801a204:	4b15      	ldr	r3, [pc, #84]	; (801a25c <_vfiprintf_r+0x258>)
 801a206:	a904      	add	r1, sp, #16
 801a208:	f7fb ffa6 	bl	8016158 <_printf_float>
 801a20c:	4607      	mov	r7, r0
 801a20e:	1c78      	adds	r0, r7, #1
 801a210:	d1d6      	bne.n	801a1c0 <_vfiprintf_r+0x1bc>
 801a212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a214:	07d9      	lsls	r1, r3, #31
 801a216:	d405      	bmi.n	801a224 <_vfiprintf_r+0x220>
 801a218:	89ab      	ldrh	r3, [r5, #12]
 801a21a:	059a      	lsls	r2, r3, #22
 801a21c:	d402      	bmi.n	801a224 <_vfiprintf_r+0x220>
 801a21e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a220:	f7fb fe2e 	bl	8015e80 <__retarget_lock_release_recursive>
 801a224:	89ab      	ldrh	r3, [r5, #12]
 801a226:	065b      	lsls	r3, r3, #25
 801a228:	f53f af12 	bmi.w	801a050 <_vfiprintf_r+0x4c>
 801a22c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a22e:	e711      	b.n	801a054 <_vfiprintf_r+0x50>
 801a230:	ab03      	add	r3, sp, #12
 801a232:	9300      	str	r3, [sp, #0]
 801a234:	462a      	mov	r2, r5
 801a236:	4630      	mov	r0, r6
 801a238:	4b08      	ldr	r3, [pc, #32]	; (801a25c <_vfiprintf_r+0x258>)
 801a23a:	a904      	add	r1, sp, #16
 801a23c:	f7fc fa28 	bl	8016690 <_printf_i>
 801a240:	e7e4      	b.n	801a20c <_vfiprintf_r+0x208>
 801a242:	bf00      	nop
 801a244:	0801a790 	.word	0x0801a790
 801a248:	0801a7b0 	.word	0x0801a7b0
 801a24c:	0801a770 	.word	0x0801a770
 801a250:	0801abd4 	.word	0x0801abd4
 801a254:	0801abde 	.word	0x0801abde
 801a258:	08016159 	.word	0x08016159
 801a25c:	08019fdf 	.word	0x08019fdf
 801a260:	0801abda 	.word	0x0801abda

0801a264 <__swbuf_r>:
 801a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a266:	460e      	mov	r6, r1
 801a268:	4614      	mov	r4, r2
 801a26a:	4605      	mov	r5, r0
 801a26c:	b118      	cbz	r0, 801a276 <__swbuf_r+0x12>
 801a26e:	6983      	ldr	r3, [r0, #24]
 801a270:	b90b      	cbnz	r3, 801a276 <__swbuf_r+0x12>
 801a272:	f7fb fd41 	bl	8015cf8 <__sinit>
 801a276:	4b21      	ldr	r3, [pc, #132]	; (801a2fc <__swbuf_r+0x98>)
 801a278:	429c      	cmp	r4, r3
 801a27a:	d12b      	bne.n	801a2d4 <__swbuf_r+0x70>
 801a27c:	686c      	ldr	r4, [r5, #4]
 801a27e:	69a3      	ldr	r3, [r4, #24]
 801a280:	60a3      	str	r3, [r4, #8]
 801a282:	89a3      	ldrh	r3, [r4, #12]
 801a284:	071a      	lsls	r2, r3, #28
 801a286:	d52f      	bpl.n	801a2e8 <__swbuf_r+0x84>
 801a288:	6923      	ldr	r3, [r4, #16]
 801a28a:	b36b      	cbz	r3, 801a2e8 <__swbuf_r+0x84>
 801a28c:	6923      	ldr	r3, [r4, #16]
 801a28e:	6820      	ldr	r0, [r4, #0]
 801a290:	b2f6      	uxtb	r6, r6
 801a292:	1ac0      	subs	r0, r0, r3
 801a294:	6963      	ldr	r3, [r4, #20]
 801a296:	4637      	mov	r7, r6
 801a298:	4283      	cmp	r3, r0
 801a29a:	dc04      	bgt.n	801a2a6 <__swbuf_r+0x42>
 801a29c:	4621      	mov	r1, r4
 801a29e:	4628      	mov	r0, r5
 801a2a0:	f7fe fbda 	bl	8018a58 <_fflush_r>
 801a2a4:	bb30      	cbnz	r0, 801a2f4 <__swbuf_r+0x90>
 801a2a6:	68a3      	ldr	r3, [r4, #8]
 801a2a8:	3001      	adds	r0, #1
 801a2aa:	3b01      	subs	r3, #1
 801a2ac:	60a3      	str	r3, [r4, #8]
 801a2ae:	6823      	ldr	r3, [r4, #0]
 801a2b0:	1c5a      	adds	r2, r3, #1
 801a2b2:	6022      	str	r2, [r4, #0]
 801a2b4:	701e      	strb	r6, [r3, #0]
 801a2b6:	6963      	ldr	r3, [r4, #20]
 801a2b8:	4283      	cmp	r3, r0
 801a2ba:	d004      	beq.n	801a2c6 <__swbuf_r+0x62>
 801a2bc:	89a3      	ldrh	r3, [r4, #12]
 801a2be:	07db      	lsls	r3, r3, #31
 801a2c0:	d506      	bpl.n	801a2d0 <__swbuf_r+0x6c>
 801a2c2:	2e0a      	cmp	r6, #10
 801a2c4:	d104      	bne.n	801a2d0 <__swbuf_r+0x6c>
 801a2c6:	4621      	mov	r1, r4
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	f7fe fbc5 	bl	8018a58 <_fflush_r>
 801a2ce:	b988      	cbnz	r0, 801a2f4 <__swbuf_r+0x90>
 801a2d0:	4638      	mov	r0, r7
 801a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2d4:	4b0a      	ldr	r3, [pc, #40]	; (801a300 <__swbuf_r+0x9c>)
 801a2d6:	429c      	cmp	r4, r3
 801a2d8:	d101      	bne.n	801a2de <__swbuf_r+0x7a>
 801a2da:	68ac      	ldr	r4, [r5, #8]
 801a2dc:	e7cf      	b.n	801a27e <__swbuf_r+0x1a>
 801a2de:	4b09      	ldr	r3, [pc, #36]	; (801a304 <__swbuf_r+0xa0>)
 801a2e0:	429c      	cmp	r4, r3
 801a2e2:	bf08      	it	eq
 801a2e4:	68ec      	ldreq	r4, [r5, #12]
 801a2e6:	e7ca      	b.n	801a27e <__swbuf_r+0x1a>
 801a2e8:	4621      	mov	r1, r4
 801a2ea:	4628      	mov	r0, r5
 801a2ec:	f000 f80c 	bl	801a308 <__swsetup_r>
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d0cb      	beq.n	801a28c <__swbuf_r+0x28>
 801a2f4:	f04f 37ff 	mov.w	r7, #4294967295
 801a2f8:	e7ea      	b.n	801a2d0 <__swbuf_r+0x6c>
 801a2fa:	bf00      	nop
 801a2fc:	0801a790 	.word	0x0801a790
 801a300:	0801a7b0 	.word	0x0801a7b0
 801a304:	0801a770 	.word	0x0801a770

0801a308 <__swsetup_r>:
 801a308:	4b32      	ldr	r3, [pc, #200]	; (801a3d4 <__swsetup_r+0xcc>)
 801a30a:	b570      	push	{r4, r5, r6, lr}
 801a30c:	681d      	ldr	r5, [r3, #0]
 801a30e:	4606      	mov	r6, r0
 801a310:	460c      	mov	r4, r1
 801a312:	b125      	cbz	r5, 801a31e <__swsetup_r+0x16>
 801a314:	69ab      	ldr	r3, [r5, #24]
 801a316:	b913      	cbnz	r3, 801a31e <__swsetup_r+0x16>
 801a318:	4628      	mov	r0, r5
 801a31a:	f7fb fced 	bl	8015cf8 <__sinit>
 801a31e:	4b2e      	ldr	r3, [pc, #184]	; (801a3d8 <__swsetup_r+0xd0>)
 801a320:	429c      	cmp	r4, r3
 801a322:	d10f      	bne.n	801a344 <__swsetup_r+0x3c>
 801a324:	686c      	ldr	r4, [r5, #4]
 801a326:	89a3      	ldrh	r3, [r4, #12]
 801a328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a32c:	0719      	lsls	r1, r3, #28
 801a32e:	d42c      	bmi.n	801a38a <__swsetup_r+0x82>
 801a330:	06dd      	lsls	r5, r3, #27
 801a332:	d411      	bmi.n	801a358 <__swsetup_r+0x50>
 801a334:	2309      	movs	r3, #9
 801a336:	6033      	str	r3, [r6, #0]
 801a338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a33c:	f04f 30ff 	mov.w	r0, #4294967295
 801a340:	81a3      	strh	r3, [r4, #12]
 801a342:	e03e      	b.n	801a3c2 <__swsetup_r+0xba>
 801a344:	4b25      	ldr	r3, [pc, #148]	; (801a3dc <__swsetup_r+0xd4>)
 801a346:	429c      	cmp	r4, r3
 801a348:	d101      	bne.n	801a34e <__swsetup_r+0x46>
 801a34a:	68ac      	ldr	r4, [r5, #8]
 801a34c:	e7eb      	b.n	801a326 <__swsetup_r+0x1e>
 801a34e:	4b24      	ldr	r3, [pc, #144]	; (801a3e0 <__swsetup_r+0xd8>)
 801a350:	429c      	cmp	r4, r3
 801a352:	bf08      	it	eq
 801a354:	68ec      	ldreq	r4, [r5, #12]
 801a356:	e7e6      	b.n	801a326 <__swsetup_r+0x1e>
 801a358:	0758      	lsls	r0, r3, #29
 801a35a:	d512      	bpl.n	801a382 <__swsetup_r+0x7a>
 801a35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a35e:	b141      	cbz	r1, 801a372 <__swsetup_r+0x6a>
 801a360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a364:	4299      	cmp	r1, r3
 801a366:	d002      	beq.n	801a36e <__swsetup_r+0x66>
 801a368:	4630      	mov	r0, r6
 801a36a:	f7fb fdb1 	bl	8015ed0 <_free_r>
 801a36e:	2300      	movs	r3, #0
 801a370:	6363      	str	r3, [r4, #52]	; 0x34
 801a372:	89a3      	ldrh	r3, [r4, #12]
 801a374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a378:	81a3      	strh	r3, [r4, #12]
 801a37a:	2300      	movs	r3, #0
 801a37c:	6063      	str	r3, [r4, #4]
 801a37e:	6923      	ldr	r3, [r4, #16]
 801a380:	6023      	str	r3, [r4, #0]
 801a382:	89a3      	ldrh	r3, [r4, #12]
 801a384:	f043 0308 	orr.w	r3, r3, #8
 801a388:	81a3      	strh	r3, [r4, #12]
 801a38a:	6923      	ldr	r3, [r4, #16]
 801a38c:	b94b      	cbnz	r3, 801a3a2 <__swsetup_r+0x9a>
 801a38e:	89a3      	ldrh	r3, [r4, #12]
 801a390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a398:	d003      	beq.n	801a3a2 <__swsetup_r+0x9a>
 801a39a:	4621      	mov	r1, r4
 801a39c:	4630      	mov	r0, r6
 801a39e:	f000 f84d 	bl	801a43c <__smakebuf_r>
 801a3a2:	89a0      	ldrh	r0, [r4, #12]
 801a3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3a8:	f010 0301 	ands.w	r3, r0, #1
 801a3ac:	d00a      	beq.n	801a3c4 <__swsetup_r+0xbc>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	60a3      	str	r3, [r4, #8]
 801a3b2:	6963      	ldr	r3, [r4, #20]
 801a3b4:	425b      	negs	r3, r3
 801a3b6:	61a3      	str	r3, [r4, #24]
 801a3b8:	6923      	ldr	r3, [r4, #16]
 801a3ba:	b943      	cbnz	r3, 801a3ce <__swsetup_r+0xc6>
 801a3bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a3c0:	d1ba      	bne.n	801a338 <__swsetup_r+0x30>
 801a3c2:	bd70      	pop	{r4, r5, r6, pc}
 801a3c4:	0781      	lsls	r1, r0, #30
 801a3c6:	bf58      	it	pl
 801a3c8:	6963      	ldrpl	r3, [r4, #20]
 801a3ca:	60a3      	str	r3, [r4, #8]
 801a3cc:	e7f4      	b.n	801a3b8 <__swsetup_r+0xb0>
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	e7f7      	b.n	801a3c2 <__swsetup_r+0xba>
 801a3d2:	bf00      	nop
 801a3d4:	20000290 	.word	0x20000290
 801a3d8:	0801a790 	.word	0x0801a790
 801a3dc:	0801a7b0 	.word	0x0801a7b0
 801a3e0:	0801a770 	.word	0x0801a770

0801a3e4 <abort>:
 801a3e4:	2006      	movs	r0, #6
 801a3e6:	b508      	push	{r3, lr}
 801a3e8:	f000 f898 	bl	801a51c <raise>
 801a3ec:	2001      	movs	r0, #1
 801a3ee:	f7eb fbd4 	bl	8005b9a <_exit>

0801a3f2 <__swhatbuf_r>:
 801a3f2:	b570      	push	{r4, r5, r6, lr}
 801a3f4:	460e      	mov	r6, r1
 801a3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3fa:	4614      	mov	r4, r2
 801a3fc:	2900      	cmp	r1, #0
 801a3fe:	461d      	mov	r5, r3
 801a400:	b096      	sub	sp, #88	; 0x58
 801a402:	da07      	bge.n	801a414 <__swhatbuf_r+0x22>
 801a404:	2300      	movs	r3, #0
 801a406:	602b      	str	r3, [r5, #0]
 801a408:	89b3      	ldrh	r3, [r6, #12]
 801a40a:	061a      	lsls	r2, r3, #24
 801a40c:	d410      	bmi.n	801a430 <__swhatbuf_r+0x3e>
 801a40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a412:	e00e      	b.n	801a432 <__swhatbuf_r+0x40>
 801a414:	466a      	mov	r2, sp
 801a416:	f000 f89d 	bl	801a554 <_fstat_r>
 801a41a:	2800      	cmp	r0, #0
 801a41c:	dbf2      	blt.n	801a404 <__swhatbuf_r+0x12>
 801a41e:	9a01      	ldr	r2, [sp, #4]
 801a420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a428:	425a      	negs	r2, r3
 801a42a:	415a      	adcs	r2, r3
 801a42c:	602a      	str	r2, [r5, #0]
 801a42e:	e7ee      	b.n	801a40e <__swhatbuf_r+0x1c>
 801a430:	2340      	movs	r3, #64	; 0x40
 801a432:	2000      	movs	r0, #0
 801a434:	6023      	str	r3, [r4, #0]
 801a436:	b016      	add	sp, #88	; 0x58
 801a438:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a43c <__smakebuf_r>:
 801a43c:	898b      	ldrh	r3, [r1, #12]
 801a43e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a440:	079d      	lsls	r5, r3, #30
 801a442:	4606      	mov	r6, r0
 801a444:	460c      	mov	r4, r1
 801a446:	d507      	bpl.n	801a458 <__smakebuf_r+0x1c>
 801a448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a44c:	6023      	str	r3, [r4, #0]
 801a44e:	6123      	str	r3, [r4, #16]
 801a450:	2301      	movs	r3, #1
 801a452:	6163      	str	r3, [r4, #20]
 801a454:	b002      	add	sp, #8
 801a456:	bd70      	pop	{r4, r5, r6, pc}
 801a458:	466a      	mov	r2, sp
 801a45a:	ab01      	add	r3, sp, #4
 801a45c:	f7ff ffc9 	bl	801a3f2 <__swhatbuf_r>
 801a460:	9900      	ldr	r1, [sp, #0]
 801a462:	4605      	mov	r5, r0
 801a464:	4630      	mov	r0, r6
 801a466:	f7fb fd7f 	bl	8015f68 <_malloc_r>
 801a46a:	b948      	cbnz	r0, 801a480 <__smakebuf_r+0x44>
 801a46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a470:	059a      	lsls	r2, r3, #22
 801a472:	d4ef      	bmi.n	801a454 <__smakebuf_r+0x18>
 801a474:	f023 0303 	bic.w	r3, r3, #3
 801a478:	f043 0302 	orr.w	r3, r3, #2
 801a47c:	81a3      	strh	r3, [r4, #12]
 801a47e:	e7e3      	b.n	801a448 <__smakebuf_r+0xc>
 801a480:	4b0d      	ldr	r3, [pc, #52]	; (801a4b8 <__smakebuf_r+0x7c>)
 801a482:	62b3      	str	r3, [r6, #40]	; 0x28
 801a484:	89a3      	ldrh	r3, [r4, #12]
 801a486:	6020      	str	r0, [r4, #0]
 801a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a48c:	81a3      	strh	r3, [r4, #12]
 801a48e:	9b00      	ldr	r3, [sp, #0]
 801a490:	6120      	str	r0, [r4, #16]
 801a492:	6163      	str	r3, [r4, #20]
 801a494:	9b01      	ldr	r3, [sp, #4]
 801a496:	b15b      	cbz	r3, 801a4b0 <__smakebuf_r+0x74>
 801a498:	4630      	mov	r0, r6
 801a49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a49e:	f000 f86b 	bl	801a578 <_isatty_r>
 801a4a2:	b128      	cbz	r0, 801a4b0 <__smakebuf_r+0x74>
 801a4a4:	89a3      	ldrh	r3, [r4, #12]
 801a4a6:	f023 0303 	bic.w	r3, r3, #3
 801a4aa:	f043 0301 	orr.w	r3, r3, #1
 801a4ae:	81a3      	strh	r3, [r4, #12]
 801a4b0:	89a0      	ldrh	r0, [r4, #12]
 801a4b2:	4305      	orrs	r5, r0
 801a4b4:	81a5      	strh	r5, [r4, #12]
 801a4b6:	e7cd      	b.n	801a454 <__smakebuf_r+0x18>
 801a4b8:	08015c91 	.word	0x08015c91

0801a4bc <_malloc_usable_size_r>:
 801a4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4c0:	1f18      	subs	r0, r3, #4
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	bfbc      	itt	lt
 801a4c6:	580b      	ldrlt	r3, [r1, r0]
 801a4c8:	18c0      	addlt	r0, r0, r3
 801a4ca:	4770      	bx	lr

0801a4cc <_raise_r>:
 801a4cc:	291f      	cmp	r1, #31
 801a4ce:	b538      	push	{r3, r4, r5, lr}
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	460d      	mov	r5, r1
 801a4d4:	d904      	bls.n	801a4e0 <_raise_r+0x14>
 801a4d6:	2316      	movs	r3, #22
 801a4d8:	6003      	str	r3, [r0, #0]
 801a4da:	f04f 30ff 	mov.w	r0, #4294967295
 801a4de:	bd38      	pop	{r3, r4, r5, pc}
 801a4e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a4e2:	b112      	cbz	r2, 801a4ea <_raise_r+0x1e>
 801a4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a4e8:	b94b      	cbnz	r3, 801a4fe <_raise_r+0x32>
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	f000 f830 	bl	801a550 <_getpid_r>
 801a4f0:	462a      	mov	r2, r5
 801a4f2:	4601      	mov	r1, r0
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4fa:	f000 b817 	b.w	801a52c <_kill_r>
 801a4fe:	2b01      	cmp	r3, #1
 801a500:	d00a      	beq.n	801a518 <_raise_r+0x4c>
 801a502:	1c59      	adds	r1, r3, #1
 801a504:	d103      	bne.n	801a50e <_raise_r+0x42>
 801a506:	2316      	movs	r3, #22
 801a508:	6003      	str	r3, [r0, #0]
 801a50a:	2001      	movs	r0, #1
 801a50c:	e7e7      	b.n	801a4de <_raise_r+0x12>
 801a50e:	2400      	movs	r4, #0
 801a510:	4628      	mov	r0, r5
 801a512:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a516:	4798      	blx	r3
 801a518:	2000      	movs	r0, #0
 801a51a:	e7e0      	b.n	801a4de <_raise_r+0x12>

0801a51c <raise>:
 801a51c:	4b02      	ldr	r3, [pc, #8]	; (801a528 <raise+0xc>)
 801a51e:	4601      	mov	r1, r0
 801a520:	6818      	ldr	r0, [r3, #0]
 801a522:	f7ff bfd3 	b.w	801a4cc <_raise_r>
 801a526:	bf00      	nop
 801a528:	20000290 	.word	0x20000290

0801a52c <_kill_r>:
 801a52c:	b538      	push	{r3, r4, r5, lr}
 801a52e:	2300      	movs	r3, #0
 801a530:	4d06      	ldr	r5, [pc, #24]	; (801a54c <_kill_r+0x20>)
 801a532:	4604      	mov	r4, r0
 801a534:	4608      	mov	r0, r1
 801a536:	4611      	mov	r1, r2
 801a538:	602b      	str	r3, [r5, #0]
 801a53a:	f7eb fb1e 	bl	8005b7a <_kill>
 801a53e:	1c43      	adds	r3, r0, #1
 801a540:	d102      	bne.n	801a548 <_kill_r+0x1c>
 801a542:	682b      	ldr	r3, [r5, #0]
 801a544:	b103      	cbz	r3, 801a548 <_kill_r+0x1c>
 801a546:	6023      	str	r3, [r4, #0]
 801a548:	bd38      	pop	{r3, r4, r5, pc}
 801a54a:	bf00      	nop
 801a54c:	2000e604 	.word	0x2000e604

0801a550 <_getpid_r>:
 801a550:	f7eb bb0c 	b.w	8005b6c <_getpid>

0801a554 <_fstat_r>:
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	2300      	movs	r3, #0
 801a558:	4d06      	ldr	r5, [pc, #24]	; (801a574 <_fstat_r+0x20>)
 801a55a:	4604      	mov	r4, r0
 801a55c:	4608      	mov	r0, r1
 801a55e:	4611      	mov	r1, r2
 801a560:	602b      	str	r3, [r5, #0]
 801a562:	f7eb fb68 	bl	8005c36 <_fstat>
 801a566:	1c43      	adds	r3, r0, #1
 801a568:	d102      	bne.n	801a570 <_fstat_r+0x1c>
 801a56a:	682b      	ldr	r3, [r5, #0]
 801a56c:	b103      	cbz	r3, 801a570 <_fstat_r+0x1c>
 801a56e:	6023      	str	r3, [r4, #0]
 801a570:	bd38      	pop	{r3, r4, r5, pc}
 801a572:	bf00      	nop
 801a574:	2000e604 	.word	0x2000e604

0801a578 <_isatty_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	2300      	movs	r3, #0
 801a57c:	4d05      	ldr	r5, [pc, #20]	; (801a594 <_isatty_r+0x1c>)
 801a57e:	4604      	mov	r4, r0
 801a580:	4608      	mov	r0, r1
 801a582:	602b      	str	r3, [r5, #0]
 801a584:	f7eb fb66 	bl	8005c54 <_isatty>
 801a588:	1c43      	adds	r3, r0, #1
 801a58a:	d102      	bne.n	801a592 <_isatty_r+0x1a>
 801a58c:	682b      	ldr	r3, [r5, #0]
 801a58e:	b103      	cbz	r3, 801a592 <_isatty_r+0x1a>
 801a590:	6023      	str	r3, [r4, #0]
 801a592:	bd38      	pop	{r3, r4, r5, pc}
 801a594:	2000e604 	.word	0x2000e604

0801a598 <_init>:
 801a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a59a:	bf00      	nop
 801a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a59e:	bc08      	pop	{r3}
 801a5a0:	469e      	mov	lr, r3
 801a5a2:	4770      	bx	lr

0801a5a4 <_fini>:
 801a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5a6:	bf00      	nop
 801a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5aa:	bc08      	pop	{r3}
 801a5ac:	469e      	mov	lr, r3
 801a5ae:	4770      	bx	lr
