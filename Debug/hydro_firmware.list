
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800485c  0800485c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004864  08004864  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800486c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000018  08004884  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004884  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e291  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002213  00000000  00000000  0002e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000304e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  00031070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002036e  00000000  00000000  00031af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da93  00000000  00000000  00051e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c44ad  00000000  00000000  0005f8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123d9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a4  00000000  00000000  00123df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004834 	.word	0x08004834

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004834 	.word	0x08004834

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_frsub>:
 80008f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	e002      	b.n	8000900 <__addsf3>
 80008fa:	bf00      	nop

080008fc <__aeabi_fsub>:
 80008fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000900 <__addsf3>:
 8000900:	0042      	lsls	r2, r0, #1
 8000902:	bf1f      	itttt	ne
 8000904:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000908:	ea92 0f03 	teqne	r2, r3
 800090c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000910:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000914:	d06a      	beq.n	80009ec <__addsf3+0xec>
 8000916:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800091a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800091e:	bfc1      	itttt	gt
 8000920:	18d2      	addgt	r2, r2, r3
 8000922:	4041      	eorgt	r1, r0
 8000924:	4048      	eorgt	r0, r1
 8000926:	4041      	eorgt	r1, r0
 8000928:	bfb8      	it	lt
 800092a:	425b      	neglt	r3, r3
 800092c:	2b19      	cmp	r3, #25
 800092e:	bf88      	it	hi
 8000930:	4770      	bxhi	lr
 8000932:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000936:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800093a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800093e:	bf18      	it	ne
 8000940:	4240      	negne	r0, r0
 8000942:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000946:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800094a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800094e:	bf18      	it	ne
 8000950:	4249      	negne	r1, r1
 8000952:	ea92 0f03 	teq	r2, r3
 8000956:	d03f      	beq.n	80009d8 <__addsf3+0xd8>
 8000958:	f1a2 0201 	sub.w	r2, r2, #1
 800095c:	fa41 fc03 	asr.w	ip, r1, r3
 8000960:	eb10 000c 	adds.w	r0, r0, ip
 8000964:	f1c3 0320 	rsb	r3, r3, #32
 8000968:	fa01 f103 	lsl.w	r1, r1, r3
 800096c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000970:	d502      	bpl.n	8000978 <__addsf3+0x78>
 8000972:	4249      	negs	r1, r1
 8000974:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000978:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800097c:	d313      	bcc.n	80009a6 <__addsf3+0xa6>
 800097e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000982:	d306      	bcc.n	8000992 <__addsf3+0x92>
 8000984:	0840      	lsrs	r0, r0, #1
 8000986:	ea4f 0131 	mov.w	r1, r1, rrx
 800098a:	f102 0201 	add.w	r2, r2, #1
 800098e:	2afe      	cmp	r2, #254	; 0xfe
 8000990:	d251      	bcs.n	8000a36 <__addsf3+0x136>
 8000992:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000996:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800099a:	bf08      	it	eq
 800099c:	f020 0001 	biceq.w	r0, r0, #1
 80009a0:	ea40 0003 	orr.w	r0, r0, r3
 80009a4:	4770      	bx	lr
 80009a6:	0049      	lsls	r1, r1, #1
 80009a8:	eb40 0000 	adc.w	r0, r0, r0
 80009ac:	3a01      	subs	r2, #1
 80009ae:	bf28      	it	cs
 80009b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009b4:	d2ed      	bcs.n	8000992 <__addsf3+0x92>
 80009b6:	fab0 fc80 	clz	ip, r0
 80009ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80009be:	ebb2 020c 	subs.w	r2, r2, ip
 80009c2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009c6:	bfaa      	itet	ge
 80009c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009cc:	4252      	neglt	r2, r2
 80009ce:	4318      	orrge	r0, r3
 80009d0:	bfbc      	itt	lt
 80009d2:	40d0      	lsrlt	r0, r2
 80009d4:	4318      	orrlt	r0, r3
 80009d6:	4770      	bx	lr
 80009d8:	f092 0f00 	teq	r2, #0
 80009dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009e0:	bf06      	itte	eq
 80009e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009e6:	3201      	addeq	r2, #1
 80009e8:	3b01      	subne	r3, #1
 80009ea:	e7b5      	b.n	8000958 <__addsf3+0x58>
 80009ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fa:	d021      	beq.n	8000a40 <__addsf3+0x140>
 80009fc:	ea92 0f03 	teq	r2, r3
 8000a00:	d004      	beq.n	8000a0c <__addsf3+0x10c>
 8000a02:	f092 0f00 	teq	r2, #0
 8000a06:	bf08      	it	eq
 8000a08:	4608      	moveq	r0, r1
 8000a0a:	4770      	bx	lr
 8000a0c:	ea90 0f01 	teq	r0, r1
 8000a10:	bf1c      	itt	ne
 8000a12:	2000      	movne	r0, #0
 8000a14:	4770      	bxne	lr
 8000a16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a1a:	d104      	bne.n	8000a26 <__addsf3+0x126>
 8000a1c:	0040      	lsls	r0, r0, #1
 8000a1e:	bf28      	it	cs
 8000a20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a24:	4770      	bx	lr
 8000a26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a2a:	bf3c      	itt	cc
 8000a2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a30:	4770      	bxcc	lr
 8000a32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3e:	4770      	bx	lr
 8000a40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a44:	bf16      	itet	ne
 8000a46:	4608      	movne	r0, r1
 8000a48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a4c:	4601      	movne	r1, r0
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	bf06      	itte	eq
 8000a52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a56:	ea90 0f01 	teqeq	r0, r1
 8000a5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_ui2f>:
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	e004      	b.n	8000a70 <__aeabi_i2f+0x8>
 8000a66:	bf00      	nop

08000a68 <__aeabi_i2f>:
 8000a68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a6c:	bf48      	it	mi
 8000a6e:	4240      	negmi	r0, r0
 8000a70:	ea5f 0c00 	movs.w	ip, r0
 8000a74:	bf08      	it	eq
 8000a76:	4770      	bxeq	lr
 8000a78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a7c:	4601      	mov	r1, r0
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	e01c      	b.n	8000abe <__aeabi_l2f+0x2a>

08000a84 <__aeabi_ul2f>:
 8000a84:	ea50 0201 	orrs.w	r2, r0, r1
 8000a88:	bf08      	it	eq
 8000a8a:	4770      	bxeq	lr
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	e00a      	b.n	8000aa8 <__aeabi_l2f+0x14>
 8000a92:	bf00      	nop

08000a94 <__aeabi_l2f>:
 8000a94:	ea50 0201 	orrs.w	r2, r0, r1
 8000a98:	bf08      	it	eq
 8000a9a:	4770      	bxeq	lr
 8000a9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aa0:	d502      	bpl.n	8000aa8 <__aeabi_l2f+0x14>
 8000aa2:	4240      	negs	r0, r0
 8000aa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa8:	ea5f 0c01 	movs.w	ip, r1
 8000aac:	bf02      	ittt	eq
 8000aae:	4684      	moveq	ip, r0
 8000ab0:	4601      	moveq	r1, r0
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ab8:	bf08      	it	eq
 8000aba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000abe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ac2:	fabc f28c 	clz	r2, ip
 8000ac6:	3a08      	subs	r2, #8
 8000ac8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000acc:	db10      	blt.n	8000af0 <__aeabi_l2f+0x5c>
 8000ace:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ad8:	f1c2 0220 	rsb	r2, r2, #32
 8000adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ae0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae4:	eb43 0002 	adc.w	r0, r3, r2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f102 0220 	add.w	r2, r2, #32
 8000af4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000af8:	f1c2 0220 	rsb	r2, r2, #32
 8000afc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b00:	fa21 f202 	lsr.w	r2, r1, r2
 8000b04:	eb43 0002 	adc.w	r0, r3, r2
 8000b08:	bf08      	it	eq
 8000b0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_fmul>:
 8000b10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b18:	bf1e      	ittt	ne
 8000b1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b1e:	ea92 0f0c 	teqne	r2, ip
 8000b22:	ea93 0f0c 	teqne	r3, ip
 8000b26:	d06f      	beq.n	8000c08 <__aeabi_fmul+0xf8>
 8000b28:	441a      	add	r2, r3
 8000b2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b2e:	0240      	lsls	r0, r0, #9
 8000b30:	bf18      	it	ne
 8000b32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b36:	d01e      	beq.n	8000b76 <__aeabi_fmul+0x66>
 8000b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b44:	fba0 3101 	umull	r3, r1, r0, r1
 8000b48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b50:	bf3e      	ittt	cc
 8000b52:	0049      	lslcc	r1, r1, #1
 8000b54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b58:	005b      	lslcc	r3, r3, #1
 8000b5a:	ea40 0001 	orr.w	r0, r0, r1
 8000b5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b62:	2afd      	cmp	r2, #253	; 0xfd
 8000b64:	d81d      	bhi.n	8000ba2 <__aeabi_fmul+0x92>
 8000b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	4770      	bx	lr
 8000b76:	f090 0f00 	teq	r0, #0
 8000b7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7e:	bf08      	it	eq
 8000b80:	0249      	lsleq	r1, r1, #9
 8000b82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b8a:	3a7f      	subs	r2, #127	; 0x7f
 8000b8c:	bfc2      	ittt	gt
 8000b8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b96:	4770      	bxgt	lr
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	dc5d      	bgt.n	8000c60 <__aeabi_fmul+0x150>
 8000ba4:	f112 0f19 	cmn.w	r2, #25
 8000ba8:	bfdc      	itt	le
 8000baa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bae:	4770      	bxle	lr
 8000bb0:	f1c2 0200 	rsb	r2, r2, #0
 8000bb4:	0041      	lsls	r1, r0, #1
 8000bb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000bba:	f1c2 0220 	rsb	r2, r2, #32
 8000bbe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bc6:	f140 0000 	adc.w	r0, r0, #0
 8000bca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bce:	bf08      	it	eq
 8000bd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd4:	4770      	bx	lr
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bde:	bf02      	ittt	eq
 8000be0:	0040      	lsleq	r0, r0, #1
 8000be2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000be6:	3a01      	subeq	r2, #1
 8000be8:	d0f9      	beq.n	8000bde <__aeabi_fmul+0xce>
 8000bea:	ea40 000c 	orr.w	r0, r0, ip
 8000bee:	f093 0f00 	teq	r3, #0
 8000bf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0049      	lsleq	r1, r1, #1
 8000bfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bfe:	3b01      	subeq	r3, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xe6>
 8000c02:	ea41 010c 	orr.w	r1, r1, ip
 8000c06:	e78f      	b.n	8000b28 <__aeabi_fmul+0x18>
 8000c08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c0c:	ea92 0f0c 	teq	r2, ip
 8000c10:	bf18      	it	ne
 8000c12:	ea93 0f0c 	teqne	r3, ip
 8000c16:	d00a      	beq.n	8000c2e <__aeabi_fmul+0x11e>
 8000c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c1c:	bf18      	it	ne
 8000c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c22:	d1d8      	bne.n	8000bd6 <__aeabi_fmul+0xc6>
 8000c24:	ea80 0001 	eor.w	r0, r0, r1
 8000c28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	bf17      	itett	ne
 8000c34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	f091 0f00 	teqne	r1, #0
 8000c3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c42:	d014      	beq.n	8000c6e <__aeabi_fmul+0x15e>
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	d101      	bne.n	8000c4e <__aeabi_fmul+0x13e>
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	d10f      	bne.n	8000c6e <__aeabi_fmul+0x15e>
 8000c4e:	ea93 0f0c 	teq	r3, ip
 8000c52:	d103      	bne.n	8000c5c <__aeabi_fmul+0x14c>
 8000c54:	024b      	lsls	r3, r1, #9
 8000c56:	bf18      	it	ne
 8000c58:	4608      	movne	r0, r1
 8000c5a:	d108      	bne.n	8000c6e <__aeabi_fmul+0x15e>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_fdiv>:
 8000c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c80:	bf1e      	ittt	ne
 8000c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c86:	ea92 0f0c 	teqne	r2, ip
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d069      	beq.n	8000d64 <__aeabi_fdiv+0xec>
 8000c90:	eba2 0203 	sub.w	r2, r2, r3
 8000c94:	ea80 0c01 	eor.w	ip, r0, r1
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c9e:	d037      	beq.n	8000d10 <__aeabi_fdiv+0x98>
 8000ca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ca4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ca8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	bf38      	it	cc
 8000cb4:	005b      	lslcc	r3, r3, #1
 8000cb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	bf24      	itt	cs
 8000cc2:	1a5b      	subcs	r3, r3, r1
 8000cc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ccc:	bf24      	itt	cs
 8000cce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cda:	bf24      	itt	cs
 8000cdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ce0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ce4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ce8:	bf24      	itt	cs
 8000cea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cfa:	d1e0      	bne.n	8000cbe <__aeabi_fdiv+0x46>
 8000cfc:	2afd      	cmp	r2, #253	; 0xfd
 8000cfe:	f63f af50 	bhi.w	8000ba2 <__aeabi_fmul+0x92>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d18:	327f      	adds	r2, #127	; 0x7f
 8000d1a:	bfc2      	ittt	gt
 8000d1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d24:	4770      	bxgt	lr
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	3a01      	subs	r2, #1
 8000d30:	e737      	b.n	8000ba2 <__aeabi_fmul+0x92>
 8000d32:	f092 0f00 	teq	r2, #0
 8000d36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d3a:	bf02      	ittt	eq
 8000d3c:	0040      	lsleq	r0, r0, #1
 8000d3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d42:	3a01      	subeq	r2, #1
 8000d44:	d0f9      	beq.n	8000d3a <__aeabi_fdiv+0xc2>
 8000d46:	ea40 000c 	orr.w	r0, r0, ip
 8000d4a:	f093 0f00 	teq	r3, #0
 8000d4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0049      	lsleq	r1, r1, #1
 8000d56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d5a:	3b01      	subeq	r3, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xda>
 8000d5e:	ea41 010c 	orr.w	r1, r1, ip
 8000d62:	e795      	b.n	8000c90 <__aeabi_fdiv+0x18>
 8000d64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d68:	ea92 0f0c 	teq	r2, ip
 8000d6c:	d108      	bne.n	8000d80 <__aeabi_fdiv+0x108>
 8000d6e:	0242      	lsls	r2, r0, #9
 8000d70:	f47f af7d 	bne.w	8000c6e <__aeabi_fmul+0x15e>
 8000d74:	ea93 0f0c 	teq	r3, ip
 8000d78:	f47f af70 	bne.w	8000c5c <__aeabi_fmul+0x14c>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e776      	b.n	8000c6e <__aeabi_fmul+0x15e>
 8000d80:	ea93 0f0c 	teq	r3, ip
 8000d84:	d104      	bne.n	8000d90 <__aeabi_fdiv+0x118>
 8000d86:	024b      	lsls	r3, r1, #9
 8000d88:	f43f af4c 	beq.w	8000c24 <__aeabi_fmul+0x114>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e76e      	b.n	8000c6e <__aeabi_fmul+0x15e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1ca      	bne.n	8000d32 <__aeabi_fdiv+0xba>
 8000d9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000da0:	f47f af5c 	bne.w	8000c5c <__aeabi_fmul+0x14c>
 8000da4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000da8:	f47f af3c 	bne.w	8000c24 <__aeabi_fmul+0x114>
 8000dac:	e75f      	b.n	8000c6e <__aeabi_fmul+0x15e>
 8000dae:	bf00      	nop

08000db0 <__aeabi_f2uiz>:
 8000db0:	0042      	lsls	r2, r0, #1
 8000db2:	d20e      	bcs.n	8000dd2 <__aeabi_f2uiz+0x22>
 8000db4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000db8:	d30b      	bcc.n	8000dd2 <__aeabi_f2uiz+0x22>
 8000dba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc2:	d409      	bmi.n	8000dd8 <__aeabi_f2uiz+0x28>
 8000dc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dcc:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	4770      	bx	lr
 8000dd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_f2uiz+0x32>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d102      	bne.n	8000de8 <__aeabi_f2uiz+0x38>
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295
 8000de6:	4770      	bx	lr
 8000de8:	f04f 0000 	mov.w	r0, #0
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <__aeabi_uldivmod>:
 8000df0:	b953      	cbnz	r3, 8000e08 <__aeabi_uldivmod+0x18>
 8000df2:	b94a      	cbnz	r2, 8000e08 <__aeabi_uldivmod+0x18>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2800      	cmpeq	r0, #0
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000e00:	f04f 30ff 	movne.w	r0, #4294967295
 8000e04:	f000 b96e 	b.w	80010e4 <__aeabi_idiv0>
 8000e08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e10:	f000 f806 	bl	8000e20 <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <__udivmoddi4>:
 8000e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e24:	9e08      	ldr	r6, [sp, #32]
 8000e26:	460d      	mov	r5, r1
 8000e28:	4604      	mov	r4, r0
 8000e2a:	468e      	mov	lr, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8083 	bne.w	8000f38 <__udivmoddi4+0x118>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	4617      	mov	r7, r2
 8000e36:	d947      	bls.n	8000ec8 <__udivmoddi4+0xa8>
 8000e38:	fab2 f382 	clz	r3, r2
 8000e3c:	b14b      	cbz	r3, 8000e52 <__udivmoddi4+0x32>
 8000e3e:	f1c3 0120 	rsb	r1, r3, #32
 8000e42:	fa05 fe03 	lsl.w	lr, r5, r3
 8000e46:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4a:	409f      	lsls	r7, r3
 8000e4c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e50:	409c      	lsls	r4, r3
 8000e52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e56:	fbbe fcf8 	udiv	ip, lr, r8
 8000e5a:	fa1f f987 	uxth.w	r9, r7
 8000e5e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000e62:	fb0c f009 	mul.w	r0, ip, r9
 8000e66:	0c21      	lsrs	r1, r4, #16
 8000e68:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x66>
 8000e70:	18ba      	adds	r2, r7, r2
 8000e72:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000e76:	f080 8118 	bcs.w	80010aa <__udivmoddi4+0x28a>
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	f240 8115 	bls.w	80010aa <__udivmoddi4+0x28a>
 8000e80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e84:	443a      	add	r2, r7
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	fbb2 f0f8 	udiv	r0, r2, r8
 8000e8c:	fb08 2210 	mls	r2, r8, r0, r2
 8000e90:	fb00 f109 	mul.w	r1, r0, r9
 8000e94:	b2a4      	uxth	r4, r4
 8000e96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x92>
 8000e9e:	193c      	adds	r4, r7, r4
 8000ea0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea4:	f080 8103 	bcs.w	80010ae <__udivmoddi4+0x28e>
 8000ea8:	42a1      	cmp	r1, r4
 8000eaa:	f240 8100 	bls.w	80010ae <__udivmoddi4+0x28e>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	443c      	add	r4, r7
 8000eb2:	1a64      	subs	r4, r4, r1
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eba:	b11e      	cbz	r6, 8000ec4 <__udivmoddi4+0xa4>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	40dc      	lsrs	r4, r3
 8000ec0:	e9c6 4200 	strd	r4, r2, [r6]
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	b902      	cbnz	r2, 8000ecc <__udivmoddi4+0xac>
 8000eca:	deff      	udf	#255	; 0xff
 8000ecc:	fab2 f382 	clz	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d14f      	bne.n	8000f74 <__udivmoddi4+0x154>
 8000ed4:	1a8d      	subs	r5, r1, r2
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000edc:	fa1f f882 	uxth.w	r8, r2
 8000ee0:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ee4:	fb0e 551c 	mls	r5, lr, ip, r5
 8000ee8:	fb08 f00c 	mul.w	r0, r8, ip
 8000eec:	0c22      	lsrs	r2, r4, #16
 8000eee:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000ef2:	42a8      	cmp	r0, r5
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0xe6>
 8000ef6:	197d      	adds	r5, r7, r5
 8000ef8:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000efc:	d202      	bcs.n	8000f04 <__udivmoddi4+0xe4>
 8000efe:	42a8      	cmp	r0, r5
 8000f00:	f200 80e9 	bhi.w	80010d6 <__udivmoddi4+0x2b6>
 8000f04:	4694      	mov	ip, r2
 8000f06:	1a2d      	subs	r5, r5, r0
 8000f08:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f0c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f10:	fb08 f800 	mul.w	r8, r8, r0
 8000f14:	b2a4      	uxth	r4, r4
 8000f16:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x10e>
 8000f1e:	193c      	adds	r4, r7, r4
 8000f20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x10c>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	f200 80d9 	bhi.w	80010de <__udivmoddi4+0x2be>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	eba4 0408 	sub.w	r4, r4, r8
 8000f32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f36:	e7c0      	b.n	8000eba <__udivmoddi4+0x9a>
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x12e>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	f000 80b1 	beq.w	80010a4 <__udivmoddi4+0x284>
 8000f42:	2100      	movs	r1, #0
 8000f44:	e9c6 0500 	strd	r0, r5, [r6]
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	fab3 f183 	clz	r1, r3
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d14b      	bne.n	8000fee <__udivmoddi4+0x1ce>
 8000f56:	42ab      	cmp	r3, r5
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0x140>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	f200 80b9 	bhi.w	80010d2 <__udivmoddi4+0x2b2>
 8000f60:	1a84      	subs	r4, r0, r2
 8000f62:	eb65 0303 	sbc.w	r3, r5, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	469e      	mov	lr, r3
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d0aa      	beq.n	8000ec4 <__udivmoddi4+0xa4>
 8000f6e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f72:	e7a7      	b.n	8000ec4 <__udivmoddi4+0xa4>
 8000f74:	409f      	lsls	r7, r3
 8000f76:	f1c3 0220 	rsb	r2, r3, #32
 8000f7a:	40d1      	lsrs	r1, r2
 8000f7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f84:	fa1f f887 	uxth.w	r8, r7
 8000f88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f8c:	fa24 f202 	lsr.w	r2, r4, r2
 8000f90:	409d      	lsls	r5, r3
 8000f92:	fb00 fc08 	mul.w	ip, r0, r8
 8000f96:	432a      	orrs	r2, r5
 8000f98:	0c15      	lsrs	r5, r2, #16
 8000f9a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000f9e:	45ac      	cmp	ip, r5
 8000fa0:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa4:	d909      	bls.n	8000fba <__udivmoddi4+0x19a>
 8000fa6:	197d      	adds	r5, r7, r5
 8000fa8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fac:	f080 808f 	bcs.w	80010ce <__udivmoddi4+0x2ae>
 8000fb0:	45ac      	cmp	ip, r5
 8000fb2:	f240 808c 	bls.w	80010ce <__udivmoddi4+0x2ae>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	eba5 050c 	sub.w	r5, r5, ip
 8000fbe:	fbb5 f1fe 	udiv	r1, r5, lr
 8000fc2:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000fc6:	fb01 f908 	mul.w	r9, r1, r8
 8000fca:	b295      	uxth	r5, r2
 8000fcc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000fd0:	45a9      	cmp	r9, r5
 8000fd2:	d907      	bls.n	8000fe4 <__udivmoddi4+0x1c4>
 8000fd4:	197d      	adds	r5, r7, r5
 8000fd6:	f101 32ff 	add.w	r2, r1, #4294967295
 8000fda:	d274      	bcs.n	80010c6 <__udivmoddi4+0x2a6>
 8000fdc:	45a9      	cmp	r9, r5
 8000fde:	d972      	bls.n	80010c6 <__udivmoddi4+0x2a6>
 8000fe0:	3902      	subs	r1, #2
 8000fe2:	443d      	add	r5, r7
 8000fe4:	eba5 0509 	sub.w	r5, r5, r9
 8000fe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fec:	e778      	b.n	8000ee0 <__udivmoddi4+0xc0>
 8000fee:	f1c1 0720 	rsb	r7, r1, #32
 8000ff2:	408b      	lsls	r3, r1
 8000ff4:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff8:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffc:	fa25 f407 	lsr.w	r4, r5, r7
 8001000:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001004:	fbb4 f9fe 	udiv	r9, r4, lr
 8001008:	fa1f f88c 	uxth.w	r8, ip
 800100c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001010:	fa20 f307 	lsr.w	r3, r0, r7
 8001014:	fb09 fa08 	mul.w	sl, r9, r8
 8001018:	408d      	lsls	r5, r1
 800101a:	431d      	orrs	r5, r3
 800101c:	0c2b      	lsrs	r3, r5, #16
 800101e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001022:	45a2      	cmp	sl, r4
 8001024:	fa02 f201 	lsl.w	r2, r2, r1
 8001028:	fa00 f301 	lsl.w	r3, r0, r1
 800102c:	d909      	bls.n	8001042 <__udivmoddi4+0x222>
 800102e:	eb1c 0404 	adds.w	r4, ip, r4
 8001032:	f109 30ff 	add.w	r0, r9, #4294967295
 8001036:	d248      	bcs.n	80010ca <__udivmoddi4+0x2aa>
 8001038:	45a2      	cmp	sl, r4
 800103a:	d946      	bls.n	80010ca <__udivmoddi4+0x2aa>
 800103c:	f1a9 0902 	sub.w	r9, r9, #2
 8001040:	4464      	add	r4, ip
 8001042:	eba4 040a 	sub.w	r4, r4, sl
 8001046:	fbb4 f0fe 	udiv	r0, r4, lr
 800104a:	fb0e 4410 	mls	r4, lr, r0, r4
 800104e:	fb00 fa08 	mul.w	sl, r0, r8
 8001052:	b2ad      	uxth	r5, r5
 8001054:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001058:	45a2      	cmp	sl, r4
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x24e>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 35ff 	add.w	r5, r0, #4294967295
 8001064:	d22d      	bcs.n	80010c2 <__udivmoddi4+0x2a2>
 8001066:	45a2      	cmp	sl, r4
 8001068:	d92b      	bls.n	80010c2 <__udivmoddi4+0x2a2>
 800106a:	3802      	subs	r0, #2
 800106c:	4464      	add	r4, ip
 800106e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001072:	fba0 8902 	umull	r8, r9, r0, r2
 8001076:	eba4 040a 	sub.w	r4, r4, sl
 800107a:	454c      	cmp	r4, r9
 800107c:	46c6      	mov	lr, r8
 800107e:	464d      	mov	r5, r9
 8001080:	d319      	bcc.n	80010b6 <__udivmoddi4+0x296>
 8001082:	d016      	beq.n	80010b2 <__udivmoddi4+0x292>
 8001084:	b15e      	cbz	r6, 800109e <__udivmoddi4+0x27e>
 8001086:	ebb3 020e 	subs.w	r2, r3, lr
 800108a:	eb64 0405 	sbc.w	r4, r4, r5
 800108e:	fa04 f707 	lsl.w	r7, r4, r7
 8001092:	fa22 f301 	lsr.w	r3, r2, r1
 8001096:	431f      	orrs	r7, r3
 8001098:	40cc      	lsrs	r4, r1
 800109a:	e9c6 7400 	strd	r7, r4, [r6]
 800109e:	2100      	movs	r1, #0
 80010a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a4:	4631      	mov	r1, r6
 80010a6:	4630      	mov	r0, r6
 80010a8:	e70c      	b.n	8000ec4 <__udivmoddi4+0xa4>
 80010aa:	468c      	mov	ip, r1
 80010ac:	e6eb      	b.n	8000e86 <__udivmoddi4+0x66>
 80010ae:	4610      	mov	r0, r2
 80010b0:	e6ff      	b.n	8000eb2 <__udivmoddi4+0x92>
 80010b2:	4543      	cmp	r3, r8
 80010b4:	d2e6      	bcs.n	8001084 <__udivmoddi4+0x264>
 80010b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80010ba:	eb69 050c 	sbc.w	r5, r9, ip
 80010be:	3801      	subs	r0, #1
 80010c0:	e7e0      	b.n	8001084 <__udivmoddi4+0x264>
 80010c2:	4628      	mov	r0, r5
 80010c4:	e7d3      	b.n	800106e <__udivmoddi4+0x24e>
 80010c6:	4611      	mov	r1, r2
 80010c8:	e78c      	b.n	8000fe4 <__udivmoddi4+0x1c4>
 80010ca:	4681      	mov	r9, r0
 80010cc:	e7b9      	b.n	8001042 <__udivmoddi4+0x222>
 80010ce:	4608      	mov	r0, r1
 80010d0:	e773      	b.n	8000fba <__udivmoddi4+0x19a>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e749      	b.n	8000f6a <__udivmoddi4+0x14a>
 80010d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80010da:	443d      	add	r5, r7
 80010dc:	e713      	b.n	8000f06 <__udivmoddi4+0xe6>
 80010de:	3802      	subs	r0, #2
 80010e0:	443c      	add	r4, r7
 80010e2:	e724      	b.n	8000f2e <__udivmoddi4+0x10e>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <fanOn>:

float system_fan_sp = 3.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn(TIM_HandleTypeDef sys,TIM_HandleTypeDef plant,TIM_HandleTypeDef heat_cool)
{
 80010e8:	b084      	sub	sp, #16
 80010ea:	b598      	push	{r3, r4, r7, lr}
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f107 0410 	add.w	r4, r7, #16
 80010f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   HAL_TIM_PWM_Start(&heat_cool, TIM_CHANNEL_1);	// start heater cooler fan control
 80010f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fd45 	bl	8003b8c <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;								// sets the PWM frequency of 25Mhz
 8001102:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <fanOn+0xec>)
 8001104:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;			// sets the fan speed
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <fanOn+0xec>)
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fca6 	bl	8000a60 <__aeabi_ui2f>
 8001114:	4602      	mov	r2, r0
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <fanOn+0xf0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f7ff fdab 	bl	8000c78 <__aeabi_fdiv>
 8001122:	4603      	mov	r3, r0
 8001124:	4c2b      	ldr	r4, [pc, #172]	; (80011d4 <fanOn+0xec>)
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe42 	bl	8000db0 <__aeabi_f2uiz>
 800112c:	4603      	mov	r3, r0
 800112e:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <fanOn+0xec>)
 8001132:	f245 0214 	movw	r2, #20500	; 0x5014
 8001136:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&sys, TIM_CHANNEL_1);			// start system fan control
 8001138:	2100      	movs	r1, #0
 800113a:	f107 0010 	add.w	r0, r7, #16
 800113e:	f002 fd25 	bl	8003b8c <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <fanOn+0xf4>)
 8001144:	f240 529f 	movw	r2, #1439	; 0x59f
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/system_fan_sp;				// sets the fan speed
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <fanOn+0xf4>)
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc86 	bl	8000a60 <__aeabi_ui2f>
 8001154:	4602      	mov	r2, r0
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <fanOn+0xf8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4610      	mov	r0, r2
 800115e:	f7ff fd8b 	bl	8000c78 <__aeabi_fdiv>
 8001162:	4603      	mov	r3, r0
 8001164:	4c1d      	ldr	r4, [pc, #116]	; (80011dc <fanOn+0xf4>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe22 	bl	8000db0 <__aeabi_f2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <fanOn+0xf4>)
 8001172:	f245 0214 	movw	r2, #20500	; 0x5014
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <fanOn+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

   HAL_TIM_PWM_Start(&plant, TIM_CHANNEL_1);		// start plant fan control
 800117e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fd01 	bl	8003b8c <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <fanOn+0xf4>)
 800118c:	f240 529f 	movw	r2, #1439	; 0x59f
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/plant_fan_sp;				// sets the fan speed
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <fanOn+0xf4>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fc62 	bl	8000a60 <__aeabi_ui2f>
 800119c:	4602      	mov	r2, r0
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <fanOn+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f7ff fd67 	bl	8000c78 <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4c0b      	ldr	r4, [pc, #44]	; (80011dc <fanOn+0xf4>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fdfe 	bl	8000db0 <__aeabi_f2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <fanOn+0xf4>)
 80011ba:	f245 0214 	movw	r2, #20500	; 0x5014
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <fanOn+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80011ce:	b004      	add	sp, #16
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40010000 	.word	0x40010000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	40000400 	.word	0x40000400
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b0b7      	sub	sp, #220	; 0xdc
 80011ec:	af32      	add	r7, sp, #200	; 0xc8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f001 f9fd 	bl	80025ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f855 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fb3d 	bl	8001874 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011fa:	f000 f899 	bl	8001330 <MX_ADC1_Init>
  MX_ADC2_Init();
 80011fe:	f000 f8e9 	bl	80013d4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001202:	f000 f939 	bl	8001478 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001206:	f000 f9d7 	bl	80015b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800120a:	f000 fa21 	bl	8001650 <MX_TIM3_Init>
  MX_TIM4_Init();
 800120e:	f000 fa95 	bl	800173c <MX_TIM4_Init>
  MX_TIM10_Init();
 8001212:	f000 fae1 	bl	80017d8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
int runOnce = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 double water_temp = readWaterTemp();
 800121a:	f000 fe37 	bl	8001e8c <readWaterTemp>
 800121e:	e9c7 0100 	strd	r0, r1, [r7]
	  HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f001 fa50 	bl	80026c8 <HAL_Delay>
	  if(runOnce != 0)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f5      	beq.n	800121a <main+0x32>
		  {
		  	  fanOn(htim3,htim10,htim1); 	// turn fan control on (sys_fan,plant_fan,heat_cool_fan)
 800122e:	4e18      	ldr	r6, [pc, #96]	; (8001290 <main+0xa8>)
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <main+0xac>)
 8001232:	ab20      	add	r3, sp, #128	; 0x80
 8001234:	4611      	mov	r1, r2
 8001236:	2248      	movs	r2, #72	; 0x48
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fae5 	bl	8004808 <memcpy>
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <main+0xb0>)
 8001240:	ab0e      	add	r3, sp, #56	; 0x38
 8001242:	4611      	mov	r1, r2
 8001244:	2248      	movs	r2, #72	; 0x48
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fade 	bl	8004808 <memcpy>
 800124c:	466d      	mov	r5, sp
 800124e:	f106 0410 	add.w	r4, r6, #16
 8001252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001262:	e885 0003 	stmia.w	r5, {r0, r1}
 8001266:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800126a:	f7ff ff3d 	bl	80010e8 <fanOn>
			  doseWater(5.0, 5.0, 5.0);		// step the pump motor
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <main+0xb4>)
 8001274:	e9cd 2300 	strd	r2, r3, [sp]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <main+0xb4>)
 800127e:	f04f 0000 	mov.w	r0, #0
 8001282:	4906      	ldr	r1, [pc, #24]	; (800129c <main+0xb4>)
 8001284:	f000 fb9f 	bl	80019c6 <doseWater>
			  runOnce = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  {
 800128c:	e7c5      	b.n	800121a <main+0x32>
 800128e:	bf00      	nop
 8001290:	2000011c 	.word	0x2000011c
 8001294:	200001c0 	.word	0x200001c0
 8001298:	200000d4 	.word	0x200000d4
 800129c:	40140000 	.word	0x40140000

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b092      	sub	sp, #72	; 0x48
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fab8 	bl	8004824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ca:	2310      	movs	r3, #16
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d6:	2308      	movs	r3, #8
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012da:	23d8      	movs	r3, #216	; 0xd8
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80012de:	2306      	movs	r3, #6
 80012e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e2:	2304      	movs	r3, #4
 80012e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 ff44 	bl	8003178 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80012f6:	f000 fb61 	bl	80019bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001306:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f002 f97e 	bl	8003618 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001322:	f000 fb4b 	bl	80019bc <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3748      	adds	r7, #72	; 0x48
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <MX_ADC1_Init+0x9c>)
 8001346:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_ADC1_Init+0x98>)
 800134a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800134e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_ADC1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <MX_ADC1_Init+0xa0>)
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_ADC1_Init+0x98>)
 800137e:	2201      	movs	r2, #1
 8001380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_ADC1_Init+0x98>)
 800138c:	2201      	movs	r2, #1
 800138e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_ADC1_Init+0x98>)
 8001392:	f001 f9bd 	bl	8002710 <HAL_ADC_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800139c:	f000 fb0e 	bl	80019bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013a0:	230f      	movs	r3, #15
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_ADC1_Init+0x98>)
 80013b2:	f001 f9f1 	bl	8002798 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013bc:	f000 fafe 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000164 	.word	0x20000164
 80013cc:	40012000 	.word	0x40012000
 80013d0:	0f000001 	.word	0x0f000001

080013d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_ADC2_Init+0x98>)
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_ADC2_Init+0x9c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC2_Init+0x98>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC2_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC2_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_ADC2_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_ADC2_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_ADC2_Init+0x98>)
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_ADC2_Init+0xa0>)
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC2_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_ADC2_Init+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_ADC2_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC2_Init+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_ADC2_Init+0x98>)
 8001436:	f001 f96b 	bl	8002710 <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001440:	f000 fabc 	bl	80019bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001444:	2304      	movs	r3, #4
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_ADC2_Init+0x98>)
 8001456:	f001 f99f 	bl	8002798 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001460:	f000 faac 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000008c 	.word	0x2000008c
 8001470:	40012100 	.word	0x40012100
 8001474:	0f000001 	.word	0x0f000001

08001478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b096      	sub	sp, #88	; 0x58
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2220      	movs	r2, #32
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 f9b7 	bl	8004824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014b8:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <MX_TIM1_Init+0x13c>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e2:	4833      	ldr	r0, [pc, #204]	; (80015b0 <MX_TIM1_Init+0x138>)
 80014e4:	f002 fa44 	bl	8003970 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ee:	f000 fa65 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fc:	4619      	mov	r1, r3
 80014fe:	482c      	ldr	r0, [pc, #176]	; (80015b0 <MX_TIM1_Init+0x138>)
 8001500:	f002 fcca 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800150a:	f000 fa57 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150e:	4828      	ldr	r0, [pc, #160]	; (80015b0 <MX_TIM1_Init+0x138>)
 8001510:	f002 fae4 	bl	8003adc <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800151a:	f000 fa4f 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001526:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800152a:	4619      	mov	r1, r3
 800152c:	4820      	ldr	r0, [pc, #128]	; (80015b0 <MX_TIM1_Init+0x138>)
 800152e:	f003 f87b 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001538:	f000 fa40 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800154c:	2304      	movs	r3, #4
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM1_Init+0x138>)
 8001562:	f002 fbdb 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800156c:	f000 fa26 	bl	80019bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <MX_TIM1_Init+0x138>)
 8001594:	f003 f8c2 	bl	800471c <HAL_TIMEx_ConfigBreakDeadTime>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800159e:	f000 fa0d 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a2:	4803      	ldr	r0, [pc, #12]	; (80015b0 <MX_TIM1_Init+0x138>)
 80015a4:	f000 fdf8 	bl	8002198 <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3758      	adds	r7, #88	; 0x58
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001c0 	.word	0x200001c0
 80015b4:	40010000 	.word	0x40010000

080015b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM2_Init+0x94>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM2_Init+0x94>)
 80015de:	2223      	movs	r2, #35	; 0x23
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM2_Init+0x94>)
 80015ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_TIM2_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM2_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <MX_TIM2_Init+0x94>)
 80015fe:	f002 f9b7 	bl	8003970 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001608:	f000 f9d8 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <MX_TIM2_Init+0x94>)
 800161a:	f002 fc3d 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001624:	f000 f9ca 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM2_Init+0x94>)
 8001636:	f002 fff7 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 f9bc 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000208 	.word	0x20000208

08001650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <MX_TIM3_Init+0xe4>)
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <MX_TIM3_Init+0xe8>)
 8001684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <MX_TIM3_Init+0xe4>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_TIM3_Init+0xe4>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <MX_TIM3_Init+0xe4>)
 8001694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_TIM3_Init+0xe4>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_TIM3_Init+0xe4>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <MX_TIM3_Init+0xe4>)
 80016a8:	f002 f962 	bl	8003970 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016b2:	f000 f983 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c0:	4619      	mov	r1, r3
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <MX_TIM3_Init+0xe4>)
 80016c4:	f002 fbe8 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ce:	f000 f975 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_TIM3_Init+0xe4>)
 80016d4:	f002 fa02 	bl	8003adc <HAL_TIM_PWM_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016de:	f000 f96d 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	4619      	mov	r1, r3
 80016f0:	4810      	ldr	r0, [pc, #64]	; (8001734 <MX_TIM3_Init+0xe4>)
 80016f2:	f002 ff99 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016fc:	f000 f95e 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001700:	2360      	movs	r3, #96	; 0x60
 8001702:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_TIM3_Init+0xe4>)
 8001718:	f002 fb00 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001722:	f000 f94b 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <MX_TIM3_Init+0xe4>)
 8001728:	f000 fd36 	bl	8002198 <HAL_TIM_MspPostInit>

}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000011c 	.word	0x2000011c
 8001738:	40000400 	.word	0x40000400

0800173c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_TIM4_Init+0x94>)
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <MX_TIM4_Init+0x98>)
 800175c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM4_Init+0x94>)
 8001760:	2223      	movs	r2, #35	; 0x23
 8001762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM4_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_TIM4_Init+0x94>)
 800176c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_TIM4_Init+0x94>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_TIM4_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <MX_TIM4_Init+0x94>)
 8001780:	f002 f8f6 	bl	8003970 <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800178a:	f000 f917 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4619      	mov	r1, r3
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_TIM4_Init+0x94>)
 800179c:	f002 fb7c 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f909 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_TIM4_Init+0x94>)
 80017b8:	f002 ff36 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017c2:	f000 f8fb 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000044 	.word	0x20000044
 80017d4:	40000800 	.word	0x40000800

080017d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_TIM10_Init+0x94>)
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <MX_TIM10_Init+0x98>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_TIM10_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_TIM10_Init+0x94>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_TIM10_Init+0x94>)
 8001804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001808:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_TIM10_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <MX_TIM10_Init+0x94>)
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001816:	4815      	ldr	r0, [pc, #84]	; (800186c <MX_TIM10_Init+0x94>)
 8001818:	f002 f8aa 	bl	8003970 <HAL_TIM_Base_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001822:	f000 f8cb 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001826:	4811      	ldr	r0, [pc, #68]	; (800186c <MX_TIM10_Init+0x94>)
 8001828:	f002 f958 	bl	8003adc <HAL_TIM_PWM_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001832:	f000 f8c3 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001836:	2360      	movs	r3, #96	; 0x60
 8001838:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM10_Init+0x94>)
 800184e:	f002 fa65 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001858:	f000 f8b0 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM10_Init+0x94>)
 800185e:	f000 fc9b 	bl	8002198 <HAL_TIM_MspPostInit>

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200000d4 	.word	0x200000d4
 8001870:	40014400 	.word	0x40014400

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <MX_GPIO_Init+0x13c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <MX_GPIO_Init+0x13c>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <MX_GPIO_Init+0x13c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a39      	ldr	r2, [pc, #228]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a32      	ldr	r2, [pc, #200]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <MX_GPIO_Init+0x13c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_GPIO_Init+0x13c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <MX_GPIO_Init+0x13c>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MX_GPIO_Init+0x13c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001916:	2201      	movs	r2, #1
 8001918:	21fc      	movs	r1, #252	; 0xfc
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <MX_GPIO_Init+0x140>)
 800191c:	f001 fbfb 	bl	8003116 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	4824      	ldr	r0, [pc, #144]	; (80019b8 <MX_GPIO_Init+0x144>)
 8001926:	f001 fbf6 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8001930:	4820      	ldr	r0, [pc, #128]	; (80019b4 <MX_GPIO_Init+0x140>)
 8001932:	f001 fbf0 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8001936:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800193a:	617b      	str	r3, [r7, #20]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4819      	ldr	r0, [pc, #100]	; (80019b4 <MX_GPIO_Init+0x140>)
 8001950:	f001 fa2c 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4813      	ldr	r0, [pc, #76]	; (80019b8 <MX_GPIO_Init+0x144>)
 800196c:	f001 fa1e 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin;
 8001970:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <MX_GPIO_Init+0x140>)
 800198a:	f001 fa0f 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800198e:	2302      	movs	r3, #2
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_GPIO_Init+0x140>)
 80019a2:	f001 fa03 	bl	8002dac <HAL_GPIO_Init>

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40020000 	.word	0x40020000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>

080019c6 <doseWater>:
#include "main.h"



void doseWater(double acid_ml, double base_ml, double nutrient_ml)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b088      	sub	sp, #32
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019d0:	e9c7 2300 	strd	r2, r3, [r7]
	int ph_down_steps = calc_dose_steps(acid_ml);
 80019d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d8:	f000 f82e 	bl	8001a38 <calc_dose_steps>
 80019dc:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 80019de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e2:	f000 f829 	bl	8001a38 <calc_dose_steps>
 80019e6:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 80019e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019ec:	f000 f824 	bl	8001a38 <calc_dose_steps>
 80019f0:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f000 f9e2 	bl	8001dc0 <step>
}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <delay_Stepper>:
#include "peristaltic_driver.h"
#include "main.h"
//extern TIM_HandleTypeDef step_timer;

void delay_Stepper(uint16_t us)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim2,0);  			 // set the counter value a 0
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <delay_Stepper+0x2c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001a16:	bf00      	nop
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <delay_Stepper+0x2c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3f9      	bcc.n	8001a18 <delay_Stepper+0x14>
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000208 	.word	0x20000208
 8001a34:	00000000 	.word	0x00000000

08001a38 <calc_dose_steps>:

int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	e9c7 0100 	strd	r0, r1, [r7]
	double steps = 0;
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1700);
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5a:	f7fe ff19 	bl	8000890 <__aeabi_dcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d027      	beq.n	8001ab4 <calc_dose_steps+0x7c>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4bb3      	ldr	r3, [pc, #716]	; (8001d38 <calc_dose_steps+0x300>)
 8001a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a6e:	f7fe fefb 	bl	8000868 <__aeabi_dcmple>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01d      	beq.n	8001ab4 <calc_dose_steps+0x7c>
 8001a78:	a39f      	add	r3, pc, #636	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a82:	f7fe fcd1 	bl	8000428 <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	a39c      	add	r3, pc, #624	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fb98 	bl	80001c8 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	a399      	add	r3, pc, #612	; (adr r3, 8001d08 <calc_dose_steps+0x2d0>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fb8f 	bl	80001c8 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001ab2:	e118      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1740);
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b9f      	ldr	r3, [pc, #636]	; (8001d38 <calc_dose_steps+0x300>)
 8001aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001abe:	f7fe fee7 	bl	8000890 <__aeabi_dcmpgt>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d028      	beq.n	8001b1a <calc_dose_steps+0xe2>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ad4:	f7fe fec8 	bl	8000868 <__aeabi_dcmple>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01d      	beq.n	8001b1a <calc_dose_steps+0xe2>
 8001ade:	a386      	add	r3, pc, #536	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae8:	f7fe fc9e 	bl	8000428 <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	a382      	add	r3, pc, #520	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fb65 	bl	80001c8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	a382      	add	r3, pc, #520	; (adr r3, 8001d10 <calc_dose_steps+0x2d8>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fb5c 	bl	80001c8 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b18:	e0e5      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1793);
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b26:	f7fe feb3 	bl	8000890 <__aeabi_dcmpgt>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d027      	beq.n	8001b80 <calc_dose_steps+0x148>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <calc_dose_steps+0x304>)
 8001b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3a:	f7fe fe95 	bl	8000868 <__aeabi_dcmple>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01d      	beq.n	8001b80 <calc_dose_steps+0x148>
 8001b44:	a36c      	add	r3, pc, #432	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b4e:	f7fe fc6b 	bl	8000428 <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	a369      	add	r3, pc, #420	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb32 	bl	80001c8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	a36a      	add	r3, pc, #424	; (adr r3, 8001d18 <calc_dose_steps+0x2e0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fb29 	bl	80001c8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b7e:	e0b2      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1793);
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <calc_dose_steps+0x304>)
 8001b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b8a:	f7fe fe81 	bl	8000890 <__aeabi_dcmpgt>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d027      	beq.n	8001be4 <calc_dose_steps+0x1ac>
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <calc_dose_steps+0x308>)
 8001b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b9e:	f7fe fe63 	bl	8000868 <__aeabi_dcmple>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01d      	beq.n	8001be4 <calc_dose_steps+0x1ac>
 8001ba8:	a353      	add	r3, pc, #332	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb2:	f7fe fc39 	bl	8000428 <__adddf3>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	a350      	add	r3, pc, #320	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fb00 	bl	80001c8 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	a351      	add	r3, pc, #324	; (adr r3, 8001d18 <calc_dose_steps+0x2e0>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe faf7 	bl	80001c8 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001be2:	e080      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1893);
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <calc_dose_steps+0x308>)
 8001bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bee:	f7fe fe4f 	bl	8000890 <__aeabi_dcmpgt>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d027      	beq.n	8001c48 <calc_dose_steps+0x210>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <calc_dose_steps+0x30c>)
 8001bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c02:	f7fe fe31 	bl	8000868 <__aeabi_dcmple>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01d      	beq.n	8001c48 <calc_dose_steps+0x210>
 8001c0c:	a33a      	add	r3, pc, #232	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c16:	f7fe fc07 	bl	8000428 <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	a337      	add	r3, pc, #220	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe face 	bl	80001c8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	a33a      	add	r3, pc, #232	; (adr r3, 8001d20 <calc_dose_steps+0x2e8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fac5 	bl	80001c8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c46:	e04e      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1900);
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <calc_dose_steps+0x30c>)
 8001c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c52:	f7fe fe1d 	bl	8000890 <__aeabi_dcmpgt>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d027      	beq.n	8001cac <calc_dose_steps+0x274>
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <calc_dose_steps+0x310>)
 8001c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c66:	f7fe fdff 	bl	8000868 <__aeabi_dcmple>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01d      	beq.n	8001cac <calc_dose_steps+0x274>
 8001c70:	a321      	add	r3, pc, #132	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c7a:	f7fe fbd5 	bl	8000428 <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	a31e      	add	r3, pc, #120	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fa9c 	bl	80001c8 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	a323      	add	r3, pc, #140	; (adr r3, 8001d28 <calc_dose_steps+0x2f0>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fa93 	bl	80001c8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001caa:	e01c      	b.n	8001ce6 <calc_dose_steps+0x2ae>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8001cac:	a312      	add	r3, pc, #72	; (adr r3, 8001cf8 <calc_dose_steps+0x2c0>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb6:	f7fe fbb7 	bl	8000428 <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	a30f      	add	r3, pc, #60	; (adr r3, 8001d00 <calc_dose_steps+0x2c8>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fa7e 	bl	80001c8 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	a316      	add	r3, pc, #88	; (adr r3, 8001d30 <calc_dose_steps+0x2f8>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fa75 	bl	80001c8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int)steps;
 8001ce6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cea:	f7fe fddb 	bl	80008a4 <__aeabi_d2iz>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	edfa43fe 	.word	0xedfa43fe
 8001cfc:	3fc9c0eb 	.word	0x3fc9c0eb
 8001d00:	f2197bf2 	.word	0xf2197bf2
 8001d04:	4012197b 	.word	0x4012197b
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	409a9000 	.word	0x409a9000
 8001d10:	00000000 	.word	0x00000000
 8001d14:	409b3000 	.word	0x409b3000
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	409c0400 	.word	0x409c0400
 8001d20:	00000000 	.word	0x00000000
 8001d24:	409d9400 	.word	0x409d9400
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	409db000 	.word	0x409db000
 8001d30:	00000000 	.word	0x00000000
 8001d34:	409dec00 	.word	0x409dec00
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	40080000 	.word	0x40080000
 8001d40:	40100000 	.word	0x40100000
 8001d44:	40140000 	.word	0x40140000
 8001d48:	403e0000 	.word	0x403e0000

08001d4c <disablePumps>:

void disablePumps()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_SET);	// disable all pumps
 8001d50:	2201      	movs	r2, #1
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	4807      	ldr	r0, [pc, #28]	; (8001d74 <disablePumps+0x28>)
 8001d56:	f001 f9de 	bl	8003116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <disablePumps+0x28>)
 8001d60:	f001 f9d9 	bl	8003116 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <disablePumps+0x28>)
 8001d6a:	f001 f9d4 	bl	8003116 <HAL_GPIO_WritePin>

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)// enable only the pumps that are going to dose
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,128,GPIO_PIN_RESET);		// enable nutrient pump
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dd04      	ble.n	8001d94 <enablePumps+0x1c>
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	480b      	ldr	r0, [pc, #44]	; (8001dbc <enablePumps+0x44>)
 8001d90:	f001 f9c1 	bl	8003116 <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,64,GPIO_PIN_RESET);		// enable ph down pump
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dd04      	ble.n	8001da4 <enablePumps+0x2c>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <enablePumps+0x44>)
 8001da0:	f001 f9b9 	bl	8003116 <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,32,GPIO_PIN_RESET);		// enable ph up pump
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dd04      	ble.n	8001db4 <enablePumps+0x3c>
 8001daa:	2200      	movs	r2, #0
 8001dac:	2120      	movs	r1, #32
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <enablePumps+0x44>)
 8001db0:	f001 f9b1 	bl	8003116 <HAL_GPIO_WritePin>
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
		int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	617b      	str	r3, [r7, #20]
		if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dd01      	ble.n	8001ddc <step+0x1c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	617b      	str	r3, [r7, #20]
		if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dd01      	ble.n	8001de8 <step+0x28>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	617b      	str	r3, [r7, #20]
		enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff ffc3 	bl	8001d78 <enablePumps>
		 HAL_TIM_Base_Start(&htim2);
 8001df2:	4824      	ldr	r0, [pc, #144]	; (8001e84 <step+0xc4>)
 8001df4:	f001 fe0c 	bl	8003a10 <HAL_TIM_Base_Start>
		for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e038      	b.n	8001e70 <step+0xb0>
		{
			if(i<nutrient_steps)	HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	da03      	bge.n	8001e0e <step+0x4e>
 8001e06:	2110      	movs	r1, #16
 8001e08:	481f      	ldr	r0, [pc, #124]	; (8001e88 <step+0xc8>)
 8001e0a:	f001 f99c 	bl	8003146 <HAL_GPIO_TogglePin>
			if(i<ph_up_steps)		HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	da03      	bge.n	8001e1e <step+0x5e>
 8001e16:	2104      	movs	r1, #4
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <step+0xc8>)
 8001e1a:	f001 f994 	bl	8003146 <HAL_GPIO_TogglePin>
			if(i<ph_down_steps)		HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	da03      	bge.n	8001e2e <step+0x6e>
 8001e26:	2108      	movs	r1, #8
 8001e28:	4817      	ldr	r0, [pc, #92]	; (8001e88 <step+0xc8>)
 8001e2a:	f001 f98c 	bl	8003146 <HAL_GPIO_TogglePin>
			delay_Stepper(40);
 8001e2e:	2028      	movs	r0, #40	; 0x28
 8001e30:	f7ff fde8 	bl	8001a04 <delay_Stepper>
			if(i<nutrient_steps)	HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	da03      	bge.n	8001e44 <step+0x84>
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <step+0xc8>)
 8001e40:	f001 f981 	bl	8003146 <HAL_GPIO_TogglePin>
			if(i<ph_up_steps)		HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	da03      	bge.n	8001e54 <step+0x94>
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <step+0xc8>)
 8001e50:	f001 f979 	bl	8003146 <HAL_GPIO_TogglePin>
			if(i<ph_down_steps)		HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	da03      	bge.n	8001e64 <step+0xa4>
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <step+0xc8>)
 8001e60:	f001 f971 	bl	8003146 <HAL_GPIO_TogglePin>
			delay_Stepper(40);
 8001e64:	2028      	movs	r0, #40	; 0x28
 8001e66:	f7ff fdcd 	bl	8001a04 <delay_Stepper>
		for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbc2      	blt.n	8001dfe <step+0x3e>
		}
		disablePumps();
 8001e78:	f7ff ff68 	bl	8001d4c <disablePumps>
}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000208 	.word	0x20000208
 8001e88:	40021000 	.word	0x40021000

08001e8c <readWaterTemp>:
uint16_t SUM, RH, TEMP;
double Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;
double readWaterTemp(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8001e90:	f000 fa3a 	bl	8002308 <DWT_Delay_Init>

	 Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 8001e94:	2101      	movs	r1, #1
 8001e96:	4830      	ldr	r0, [pc, #192]	; (8001f58 <readWaterTemp+0xcc>)
 8001e98:	f000 fb42 	bl	8002520 <Set_Pin_Output>
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	482d      	ldr	r0, [pc, #180]	; (8001f58 <readWaterTemp+0xcc>)
 8001ea2:	f001 f938 	bl	8003116 <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 8001ea6:	2064      	movs	r0, #100	; 0x64
 8001ea8:	f000 fa5e 	bl	8002368 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8001eac:	f000 fa84 	bl	80023b8 <DS18B20_Start>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <readWaterTemp+0xd0>)
 8001eb6:	701a      	strb	r2, [r3, #0]

	  DWT_Delay_us (300);
 8001eb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ebc:	f000 fa54 	bl	8002368 <DWT_Delay_us>
	  DS18B20_Write (0xCC);  // skip ROM
 8001ec0:	20cc      	movs	r0, #204	; 0xcc
 8001ec2:	f000 faa9 	bl	8002418 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001ec6:	2044      	movs	r0, #68	; 0x44
 8001ec8:	f000 faa6 	bl	8002418 <DS18B20_Write>
	  DWT_Delay_us (800000);
 8001ecc:	4824      	ldr	r0, [pc, #144]	; (8001f60 <readWaterTemp+0xd4>)
 8001ece:	f000 fa4b 	bl	8002368 <DWT_Delay_us>

	  Presence = DS18B20_Start();
 8001ed2:	f000 fa71 	bl	80023b8 <DS18B20_Start>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <readWaterTemp+0xd0>)
 8001edc:	701a      	strb	r2, [r3, #0]
	  DWT_Delay_us (300);
 8001ede:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ee2:	f000 fa41 	bl	8002368 <DWT_Delay_us>
	  DS18B20_Write (0xCC);  // skip ROM
 8001ee6:	20cc      	movs	r0, #204	; 0xcc
 8001ee8:	f000 fa96 	bl	8002418 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8001eec:	20be      	movs	r0, #190	; 0xbe
 8001eee:	f000 fa93 	bl	8002418 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8001ef2:	f000 fad7 	bl	80024a4 <DS18B20_Read>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <readWaterTemp+0xd8>)
 8001efc:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 8001efe:	f000 fad1 	bl	80024a4 <DS18B20_Read>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <readWaterTemp+0xdc>)
 8001f08:	701a      	strb	r2, [r3, #0]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <readWaterTemp+0xdc>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <readWaterTemp+0xd8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <readWaterTemp+0xe0>)
 8001f20:	801a      	strh	r2, [r3, #0]
	  Temperature = (float)TEMP/16;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <readWaterTemp+0xe0>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fd9a 	bl	8000a60 <__aeabi_ui2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fea0 	bl	8000c78 <__aeabi_fdiv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fbd2 	bl	80006e4 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	490a      	ldr	r1, [pc, #40]	; (8001f70 <readWaterTemp+0xe4>)
 8001f46:	e9c1 2300 	strd	r2, r3, [r1]
	  return Temperature;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <readWaterTemp+0xe4>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	20000040 	.word	0x20000040
 8001f60:	000c3500 	.word	0x000c3500
 8001f64:	20000256 	.word	0x20000256
 8001f68:	2000025a 	.word	0x2000025a
 8001f6c:	20000254 	.word	0x20000254
 8001f70:	20000038 	.word	0x20000038

08001f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_MspInit+0x48>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_MspInit+0x48>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_MspInit+0x48>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_MspInit+0x48>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_MspInit+0x48>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_MspInit+0x48>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_ADC_MspInit+0xd8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d128      	bne.n	8002034 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a25      	ldr	r2, [pc, #148]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = nutrient_level_Pin;
 800201a:	2320      	movs	r3, #32
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(nutrient_level_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	481c      	ldr	r0, [pc, #112]	; (80020a0 <HAL_ADC_MspInit+0xe0>)
 800202e:	f000 febd 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002032:	e02c      	b.n	800208e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_ADC_MspInit+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d127      	bne.n	800208e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_ADC_MspInit+0xdc>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_ADC_MspInit+0xdc>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = water_ph_Pin;
 8002076:	2310      	movs	r3, #16
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(water_ph_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	4807      	ldr	r0, [pc, #28]	; (80020a8 <HAL_ADC_MspInit+0xe8>)
 800208a:	f000 fe8f 	bl	8002dac <HAL_GPIO_Init>
}
 800208e:	bf00      	nop
 8002090:	3730      	adds	r7, #48	; 0x30
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40012000 	.word	0x40012000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40012100 	.word	0x40012100
 80020a8:	40020000 	.word	0x40020000

080020ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_TIM_Base_MspInit+0xd8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a30      	ldr	r2, [pc, #192]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80020da:	e04e      	b.n	800217a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]
}
 8002102:	e03a      	b.n	800217a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_TIM_Base_MspInit+0xe0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10e      	bne.n	800212c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
}
 800212a:	e026      	b.n	800217a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_TIM_Base_MspInit+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
}
 8002152:	e012      	b.n	800217a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_TIM_Base_MspInit+0xe8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10d      	bne.n	800217a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_TIM_Base_MspInit+0xdc>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010000 	.word	0x40010000
 8002188:	40023800 	.word	0x40023800
 800218c:	40000400 	.word	0x40000400
 8002190:	40000800 	.word	0x40000800
 8002194:	40014400 	.word	0x40014400

08002198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a36      	ldr	r2, [pc, #216]	; (8002290 <HAL_TIM_MspPostInit+0xf8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d11f      	bne.n	80021fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin;
 80021d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(heat_cool_fan_speed_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4829      	ldr	r0, [pc, #164]	; (8002298 <HAL_TIM_MspPostInit+0x100>)
 80021f4:	f000 fdda 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80021f8:	e046      	b.n	8002288 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_TIM_MspPostInit+0x104>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d11e      	bne.n	8002242 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6313      	str	r3, [r2, #48]	; 0x30
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = system_fan_speed_Pin;
 8002220:	2340      	movs	r3, #64	; 0x40
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002230:	2302      	movs	r3, #2
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(system_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4819      	ldr	r0, [pc, #100]	; (80022a0 <HAL_TIM_MspPostInit+0x108>)
 800223c:	f000 fdb6 	bl	8002dac <HAL_GPIO_Init>
}
 8002240:	e022      	b.n	8002288 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_TIM_MspPostInit+0x10c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d11d      	bne.n	8002288 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002278:	2303      	movs	r3, #3
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4809      	ldr	r0, [pc, #36]	; (80022a8 <HAL_TIM_MspPostInit+0x110>)
 8002284:	f000 fd92 	bl	8002dac <HAL_GPIO_Init>
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010000 	.word	0x40010000
 8002294:	40023800 	.word	0x40023800
 8002298:	40021000 	.word	0x40021000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40021400 	.word	0x40021400

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f2:	f000 f9cd 	bl	8002690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}

080022fa <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <DWT_Delay_Init+0x58>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <DWT_Delay_Init+0x58>)
 8002312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002316:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <DWT_Delay_Init+0x58>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <DWT_Delay_Init+0x58>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <DWT_Delay_Init+0x5c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <DWT_Delay_Init+0x5c>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <DWT_Delay_Init+0x5c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <DWT_Delay_Init+0x5c>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <DWT_Delay_Init+0x5c>)
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002342:	bf00      	nop
    __ASM volatile ("NOP");
 8002344:	bf00      	nop
    __ASM volatile ("NOP");
 8002346:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <DWT_Delay_Init+0x5c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8002354:	2301      	movs	r3, #1
    }
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000edf0 	.word	0xe000edf0
 8002364:	e0001000 	.word	0xe0001000

08002368 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <DWT_Delay_us+0x48>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8002376:	f001 faf1 	bl	800395c <HAL_RCC_GetHCLKFreq>
 800237a:	4603      	mov	r3, r0
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <DWT_Delay_us+0x4c>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9b      	lsrs	r3, r3, #18
 8002384:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8002390:	bf00      	nop
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <DWT_Delay_us+0x48>)
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1acb      	subs	r3, r1, r3
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3f6      	bcc.n	8002392 <DWT_Delay_us+0x2a>
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e0001000 	.word	0xe0001000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 80023c2:	2101      	movs	r1, #1
 80023c4:	4813      	ldr	r0, [pc, #76]	; (8002414 <DS18B20_Start+0x5c>)
 80023c6:	f000 f8ab 	bl	8002520 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 80023ca:	2200      	movs	r2, #0
 80023cc:	2101      	movs	r1, #1
 80023ce:	4811      	ldr	r0, [pc, #68]	; (8002414 <DS18B20_Start+0x5c>)
 80023d0:	f000 fea1 	bl	8003116 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 80023d4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80023d8:	f7ff ffc6 	bl	8002368 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 80023dc:	2101      	movs	r1, #1
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <DS18B20_Start+0x5c>)
 80023e0:	f000 f8bc 	bl	800255c <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 80023e4:	2050      	movs	r0, #80	; 0x50
 80023e6:	f7ff ffbf 	bl	8002368 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80023ea:	2101      	movs	r1, #1
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <DS18B20_Start+0x5c>)
 80023ee:	f000 fe7b 	bl	80030e8 <HAL_GPIO_ReadPin>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <DS18B20_Start+0x46>
 80023f8:	2301      	movs	r3, #1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	e001      	b.n	8002402 <DS18B20_Start+0x4a>
	else Response = -1;
 80023fe:	23ff      	movs	r3, #255	; 0xff
 8002400:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8002402:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002406:	f7ff ffaf 	bl	8002368 <DWT_Delay_us>

	return Response;
 800240a:	79fb      	ldrb	r3, [r7, #7]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40020000 	.word	0x40020000

08002418 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8002422:	2101      	movs	r1, #1
 8002424:	481e      	ldr	r0, [pc, #120]	; (80024a0 <DS18B20_Write+0x88>)
 8002426:	f000 f87b 	bl	8002520 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e02e      	b.n	800248e <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	fa42 f303 	asr.w	r3, r2, r3
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8002440:	2101      	movs	r1, #1
 8002442:	4817      	ldr	r0, [pc, #92]	; (80024a0 <DS18B20_Write+0x88>)
 8002444:	f000 f86c 	bl	8002520 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8002448:	2200      	movs	r2, #0
 800244a:	2101      	movs	r1, #1
 800244c:	4814      	ldr	r0, [pc, #80]	; (80024a0 <DS18B20_Write+0x88>)
 800244e:	f000 fe62 	bl	8003116 <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 8002452:	2005      	movs	r0, #5
 8002454:	f7ff ff88 	bl	8002368 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8002458:	2101      	movs	r1, #1
 800245a:	4811      	ldr	r0, [pc, #68]	; (80024a0 <DS18B20_Write+0x88>)
 800245c:	f000 f87e 	bl	800255c <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8002460:	2041      	movs	r0, #65	; 0x41
 8002462:	f7ff ff81 	bl	8002368 <DWT_Delay_us>
 8002466:	e00f      	b.n	8002488 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8002468:	2101      	movs	r1, #1
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <DS18B20_Write+0x88>)
 800246c:	f000 f858 	bl	8002520 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8002470:	2200      	movs	r2, #0
 8002472:	2101      	movs	r1, #1
 8002474:	480a      	ldr	r0, [pc, #40]	; (80024a0 <DS18B20_Write+0x88>)
 8002476:	f000 fe4e 	bl	8003116 <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 800247a:	2041      	movs	r0, #65	; 0x41
 800247c:	f7ff ff74 	bl	8002368 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8002480:	2101      	movs	r1, #1
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <DS18B20_Write+0x88>)
 8002484:	f000 f86a 	bl	800255c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b07      	cmp	r3, #7
 8002492:	ddcd      	ble.n	8002430 <DS18B20_Write+0x18>
		}
	}
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40020000 	.word	0x40020000

080024a4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80024ae:	2101      	movs	r1, #1
 80024b0:	481a      	ldr	r0, [pc, #104]	; (800251c <DS18B20_Read+0x78>)
 80024b2:	f000 f853 	bl	800255c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	e026      	b.n	800250a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 80024bc:	2101      	movs	r1, #1
 80024be:	4817      	ldr	r0, [pc, #92]	; (800251c <DS18B20_Read+0x78>)
 80024c0:	f000 f82e 	bl	8002520 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 80024c4:	2200      	movs	r2, #0
 80024c6:	2101      	movs	r1, #1
 80024c8:	4814      	ldr	r0, [pc, #80]	; (800251c <DS18B20_Read+0x78>)
 80024ca:	f000 fe24 	bl	8003116 <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 80024ce:	2005      	movs	r0, #5
 80024d0:	f7ff ff4a 	bl	8002368 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80024d4:	2101      	movs	r1, #1
 80024d6:	4811      	ldr	r0, [pc, #68]	; (800251c <DS18B20_Read+0x78>)
 80024d8:	f000 f840 	bl	800255c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 80024dc:	2101      	movs	r1, #1
 80024de:	480f      	ldr	r0, [pc, #60]	; (800251c <DS18B20_Read+0x78>)
 80024e0:	f000 fe02 	bl	80030e8 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80024ea:	2201      	movs	r2, #1
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 80024fe:	2032      	movs	r0, #50	; 0x32
 8002500:	f7ff ff32 	bl	8002368 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b07      	cmp	r3, #7
 800250e:	ddd5      	ble.n	80024bc <DS18B20_Read+0x18>
	}
	return value;
 8002510:	79fb      	ldrb	r3, [r7, #7]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40020000 	.word	0x40020000

08002520 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fc2c 	bl	8002dac <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002580:	2301      	movs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fc0e 	bl	8002dac <HAL_GPIO_Init>
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259e:	490e      	ldr	r1, [pc, #56]	; (80025d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b4:	4c0b      	ldr	r4, [pc, #44]	; (80025e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025c2:	f7ff fe9a 	bl	80022fa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c6:	f002 f8fb 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ca:	f7fe fe0d 	bl	80011e8 <main>
  bx  lr
 80025ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025d0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80025dc:	0800486c 	.word	0x0800486c
  ldr r2, =_sbss
 80025e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80025e4:	20000260 	.word	0x20000260

080025e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC_IRQHandler>
	...

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_Init+0x40>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_Init+0x40>)
 8002602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x40>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002614:	2003      	movs	r0, #3
 8002616:	f000 fb95 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261a:	200f      	movs	r0, #15
 800261c:	f000 f808 	bl	8002630 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002620:	f7ff fca8 	bl	8001f74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x54>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x58>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002646:	fbb3 f3f1 	udiv	r3, r3, r1
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb9f 	bl	8002d92 <HAL_SYSTICK_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e00e      	b.n	800267c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d80a      	bhi.n	800267a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f000 fb75 	bl	8002d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <HAL_InitTick+0x5c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000000c 	.word	0x2000000c
 8002688:	20000014 	.word	0x20000014
 800268c:	20000010 	.word	0x20000010

08002690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x1c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_IncTick+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_IncTick+0x20>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000014 	.word	0x20000014
 80026b0:	2000025c 	.word	0x2000025c

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_GetTick+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	2000025c 	.word	0x2000025c

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffe0 	bl	80026b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000014 	.word	0x20000014

08002710 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e033      	b.n	800278e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fc46 	bl	8001fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002756:	f023 0302 	bic.w	r3, r3, #2
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f938 	bl	80029d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
 800277e:	e001      	b.n	8002784 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e103      	b.n	80029bc <HAL_ADC_ConfigChannel+0x224>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d925      	bls.n	8002810 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	2207      	movs	r2, #7
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4403      	add	r3, r0
 8002802:	3b1e      	subs	r3, #30
 8002804:	409a      	lsls	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	e022      	b.n	8002856 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	2207      	movs	r2, #7
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	4603      	mov	r3, r0
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4403      	add	r3, r0
 800284c:	409a      	lsls	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d824      	bhi.n	80028a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b05      	subs	r3, #5
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4618      	mov	r0, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3b05      	subs	r3, #5
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34
 80028a6:	e04c      	b.n	8002942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d824      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b23      	subs	r3, #35	; 0x23
 80028c2:	221f      	movs	r2, #31
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43da      	mvns	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	400a      	ands	r2, r1
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3b23      	subs	r3, #35	; 0x23
 80028ec:	fa00 f203 	lsl.w	r2, r0, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
 80028f8:	e023      	b.n	8002942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b41      	subs	r3, #65	; 0x41
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	400a      	ands	r2, r1
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b41      	subs	r3, #65	; 0x41
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_ADC_ConfigChannel+0x230>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d109      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1c8>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b12      	cmp	r3, #18
 8002952:	d105      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_ADC_ConfigChannel+0x234>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_ADC_ConfigChannel+0x234>)
 800295a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_ADC_ConfigChannel+0x230>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d123      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d003      	beq.n	800297a <HAL_ADC_ConfigChannel+0x1e2>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b11      	cmp	r3, #17
 8002978:	d11b      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_ADC_ConfigChannel+0x234>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <HAL_ADC_ConfigChannel+0x234>)
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002984:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b10      	cmp	r3, #16
 800298c:	d111      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_ADC_ConfigChannel+0x238>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9a      	lsrs	r2, r3, #18
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012000 	.word	0x40012000
 80029cc:	40012300 	.word	0x40012300
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <ADC_Init+0x204>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <ADC_Init+0x204>)
 80029e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <ADC_Init+0x204>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4979      	ldr	r1, [pc, #484]	; (8002bdc <ADC_Init+0x204>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	021a      	lsls	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	4a5e      	ldr	r2, [pc, #376]	; (8002be0 <ADC_Init+0x208>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	e00f      	b.n	8002ad2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0202 	bic.w	r2, r2, #2
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d027      	beq.n	8002b50 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	3b01      	subs	r3, #1
 8002b26:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002b2a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	fab2 f282 	clz	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	fa03 f102 	lsl.w	r1, r3, r2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e007      	b.n	8002b60 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	051a      	lsls	r2, r3, #20
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ba2:	025a      	lsls	r2, r3, #9
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	029a      	lsls	r2, r3, #10
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012300 	.word	0x40012300
 8002be0:	0f000001 	.word	0x0f000001

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
         );
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f7ff ff90 	bl	8002c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff49 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff5e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff90 	bl	8002c9c <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5f 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffb0 	bl	8002d00 <SysTick_Config>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dba:	e16f      	b.n	800309c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8161 	beq.w	8003096 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d005      	beq.n	8002dec <HAL_GPIO_Init+0x40>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d130      	bne.n	8002e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e22:	2201      	movs	r2, #1
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0201 	and.w	r2, r3, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d017      	beq.n	8002e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d123      	bne.n	8002ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	6939      	ldr	r1, [r7, #16]
 8002eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0203 	and.w	r2, r3, #3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80bb 	beq.w	8003096 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	4a63      	ldr	r2, [pc, #396]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3c:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_GPIO_Init+0x310>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_GPIO_Init+0x314>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_GPIO_Init+0x220>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a56      	ldr	r2, [pc, #344]	; (80030c4 <HAL_GPIO_Init+0x318>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02b      	beq.n	8002fc8 <HAL_GPIO_Init+0x21c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a55      	ldr	r2, [pc, #340]	; (80030c8 <HAL_GPIO_Init+0x31c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d025      	beq.n	8002fc4 <HAL_GPIO_Init+0x218>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a54      	ldr	r2, [pc, #336]	; (80030cc <HAL_GPIO_Init+0x320>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d01f      	beq.n	8002fc0 <HAL_GPIO_Init+0x214>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a53      	ldr	r2, [pc, #332]	; (80030d0 <HAL_GPIO_Init+0x324>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d019      	beq.n	8002fbc <HAL_GPIO_Init+0x210>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_GPIO_Init+0x328>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_GPIO_Init+0x20c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a51      	ldr	r2, [pc, #324]	; (80030d8 <HAL_GPIO_Init+0x32c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00d      	beq.n	8002fb4 <HAL_GPIO_Init+0x208>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_GPIO_Init+0x330>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a4f      	ldr	r2, [pc, #316]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_GPIO_Init+0x200>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	e010      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fac:	2309      	movs	r3, #9
 8002fae:	e00e      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	e00c      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fb4:	2306      	movs	r3, #6
 8002fb6:	e00a      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fb8:	2305      	movs	r3, #5
 8002fba:	e008      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e004      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_GPIO_Init+0x222>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	f002 0203 	and.w	r2, r2, #3
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fe0:	4936      	ldr	r1, [pc, #216]	; (80030bc <HAL_GPIO_Init+0x310>)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_GPIO_Init+0x338>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003012:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_GPIO_Init+0x338>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HAL_GPIO_Init+0x338>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_GPIO_Init+0x338>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_GPIO_Init+0x338>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_GPIO_Init+0x338>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_GPIO_Init+0x338>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_GPIO_Init+0x338>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f ae88 	bne.w	8002dbc <HAL_GPIO_Init+0x10>
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40021400 	.word	0x40021400
 80030d8:	40021800 	.word	0x40021800
 80030dc:	40021c00 	.word	0x40021c00
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e001      	b.n	800310a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
 8003122:	4613      	mov	r3, r2
 8003124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003126:	787b      	ldrb	r3, [r7, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003132:	e003      	b.n	800313c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	041a      	lsls	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	041a      	lsls	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43d9      	mvns	r1, r3
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	400b      	ands	r3, r1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e237      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d050      	beq.n	8003238 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003196:	4ba3      	ldr	r3, [pc, #652]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00c      	beq.n	80031bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d112      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b9d      	ldr	r3, [pc, #628]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b99      	ldr	r3, [pc, #612]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d036      	beq.n	8003236 <HAL_RCC_OscConfig+0xbe>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d132      	bne.n	8003236 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e212      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4b93      	ldr	r3, [pc, #588]	; (8003428 <HAL_RCC_OscConfig+0x2b0>)
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d013      	beq.n	800320e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7ff fa65 	bl	80026b4 <HAL_GetTick>
 80031ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ee:	f7ff fa61 	bl	80026b4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e1fc      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x76>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7ff fa51 	bl	80026b4 <HAL_GetTick>
 8003212:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003216:	f7ff fa4d 	bl	80026b4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1e8      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003228:	4b7e      	ldr	r3, [pc, #504]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x9e>
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003236:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d077      	beq.n	8003334 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003244:	4b77      	ldr	r3, [pc, #476]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003258:	2b08      	cmp	r3, #8
 800325a:	d126      	bne.n	80032aa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325c:	4b71      	ldr	r3, [pc, #452]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d120      	bne.n	80032aa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003268:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e1bc      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	21f8      	movs	r1, #248	; 0xf8
 800328e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	fa91 f1a1 	rbit	r1, r1
 8003296:	6179      	str	r1, [r7, #20]
  return result;
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	fab1 f181 	clz	r1, r1
 800329e:	b2c9      	uxtb	r1, r1
 80032a0:	408b      	lsls	r3, r1
 80032a2:	4960      	ldr	r1, [pc, #384]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a8:	e044      	b.n	8003334 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d02a      	beq.n	8003308 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b2:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x2b4>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7ff f9fc 	bl	80026b4 <HAL_GetTick>
 80032bc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c0:	f7ff f9f8 	bl	80026b4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e193      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b54      	ldr	r3, [pc, #336]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b51      	ldr	r3, [pc, #324]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	21f8      	movs	r1, #248	; 0xf8
 80032ec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6939      	ldr	r1, [r7, #16]
 80032f0:	fa91 f1a1 	rbit	r1, r1
 80032f4:	60f9      	str	r1, [r7, #12]
  return result;
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	fab1 f181 	clz	r1, r1
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	408b      	lsls	r3, r1
 8003300:	4948      	ldr	r1, [pc, #288]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003308:	4b48      	ldr	r3, [pc, #288]	; (800342c <HAL_RCC_OscConfig+0x2b4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7ff f9d1 	bl	80026b4 <HAL_GetTick>
 8003312:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003316:	f7ff f9cd 	bl	80026b4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e168      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003328:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d030      	beq.n	80033a2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x2b8>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff f9b1 	bl	80026b4 <HAL_GetTick>
 8003352:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7ff f9ad 	bl	80026b4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e148      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x1de>
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_RCC_OscConfig+0x2b8>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7ff f99a 	bl	80026b4 <HAL_GetTick>
 8003380:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003384:	f7ff f996 	bl	80026b4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e131      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8088 	beq.w	80034c0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d110      	bne.n	80033e4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_OscConfig+0x2bc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <HAL_RCC_OscConfig+0x2bc>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x2bc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d123      	bne.n	8003444 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_OscConfig+0x2bc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x2bc>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003408:	f7ff f954 	bl	80026b4 <HAL_GetTick>
 800340c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	e013      	b.n	8003438 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7ff f950 	bl	80026b4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d90c      	bls.n	8003438 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0eb      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40023802 	.word	0x40023802
 800342c:	42470000 	.word	0x42470000
 8003430:	42470e80 	.word	0x42470e80
 8003434:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x48c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0e5      	beq.n	8003410 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x490>)
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d015      	beq.n	8003482 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7ff f92d 	bl	80026b4 <HAL_GetTick>
 800345a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7ff f929 	bl	80026b4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0c2      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x494>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ee      	beq.n	800345e <HAL_RCC_OscConfig+0x2e6>
 8003480:	e014      	b.n	80034ac <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7ff f917 	bl	80026b4 <HAL_GetTick>
 8003486:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7ff f913 	bl	80026b4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0ac      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_RCC_OscConfig+0x494>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ee      	bne.n	800348a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b55      	ldr	r3, [pc, #340]	; (800360c <HAL_RCC_OscConfig+0x494>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4a54      	ldr	r2, [pc, #336]	; (800360c <HAL_RCC_OscConfig+0x494>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8097 	beq.w	80035f8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_OscConfig+0x494>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d061      	beq.n	800359a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d146      	bne.n	800356c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x498>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff f8e6 	bl	80026b4 <HAL_GetTick>
 80034e8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7ff f8e2 	bl	80026b4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e07d      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b43      	ldr	r3, [pc, #268]	; (800360c <HAL_RCC_OscConfig+0x494>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350a:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_RCC_OscConfig+0x494>)
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x49c>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	69d1      	ldr	r1, [r2, #28]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a12      	ldr	r2, [r2, #32]
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003520:	0192      	lsls	r2, r2, #6
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003528:	0612      	lsls	r2, r2, #24
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0412      	lsls	r2, r2, #16
 8003536:	430a      	orrs	r2, r1
 8003538:	4934      	ldr	r1, [pc, #208]	; (800360c <HAL_RCC_OscConfig+0x494>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_OscConfig+0x498>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff f8b6 	bl	80026b4 <HAL_GetTick>
 8003548:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7ff f8b2 	bl	80026b4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e04d      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_OscConfig+0x494>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x3d4>
 800356a:	e045      	b.n	80035f8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_OscConfig+0x498>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7ff f89f 	bl	80026b4 <HAL_GetTick>
 8003576:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7ff f89b 	bl	80026b4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e036      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_RCC_OscConfig+0x494>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x402>
 8003598:	e02e      	b.n	80035f8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e029      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_OscConfig+0x494>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d115      	bne.n	80035f4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40007000 	.word	0x40007000
 8003608:	40023870 	.word	0x40023870
 800360c:	40023800 	.word	0x40023800
 8003610:	42470060 	.word	0x42470060
 8003614:	f0bc8000 	.word	0xf0bc8000

08003618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d2      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90c      	bls.n	8003654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b66      	ldr	r3, [pc, #408]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0be      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003684:	4b56      	ldr	r3, [pc, #344]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a55      	ldr	r2, [pc, #340]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800368e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4950      	ldr	r1, [pc, #320]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e085      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b44      	ldr	r3, [pc, #272]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e079      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e071      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4939      	ldr	r1, [pc, #228]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe ffd8 	bl	80026b4 <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe ffd4 	bl	80026b4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e059      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d20c      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e03c      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	491b      	ldr	r1, [pc, #108]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4913      	ldr	r1, [pc, #76]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003796:	f000 f82b 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 800379a:	4601      	mov	r1, r0
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	22f0      	movs	r2, #240	; 0xf0
 80037a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	fa92 f2a2 	rbit	r2, r2
 80037ae:	60fa      	str	r2, [r7, #12]
  return result;
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	40d3      	lsrs	r3, r2
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x1cc>)
 80037bc:	5cd3      	ldrb	r3, [r2, r3]
 80037be:	fa21 f303 	lsr.w	r3, r1, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1d0>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1d4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe ff30 	bl	8002630 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	0800484c 	.word	0x0800484c
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	20000010 	.word	0x20000010

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f6:	2100      	movs	r1, #0
 80037f8:	6079      	str	r1, [r7, #4]
 80037fa:	2100      	movs	r1, #0
 80037fc:	60f9      	str	r1, [r7, #12]
 80037fe:	2100      	movs	r1, #0
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003802:	2100      	movs	r1, #0
 8003804:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003806:	4952      	ldr	r1, [pc, #328]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 8003808:	6889      	ldr	r1, [r1, #8]
 800380a:	f001 010c 	and.w	r1, r1, #12
 800380e:	2908      	cmp	r1, #8
 8003810:	d00d      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3e>
 8003812:	2908      	cmp	r1, #8
 8003814:	f200 8094 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x150>
 8003818:	2900      	cmp	r1, #0
 800381a:	d002      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x32>
 800381c:	2904      	cmp	r1, #4
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x38>
 8003820:	e08e      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_GetSysClockFreq+0x164>)
 8003824:	60bb      	str	r3, [r7, #8]
       break;
 8003826:	e08e      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <HAL_RCC_GetSysClockFreq+0x168>)
 800382a:	60bb      	str	r3, [r7, #8]
      break;
 800382c:	e08b      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800382e:	4948      	ldr	r1, [pc, #288]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 8003830:	6849      	ldr	r1, [r1, #4]
 8003832:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003836:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003838:	4945      	ldr	r1, [pc, #276]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 800383a:	6849      	ldr	r1, [r1, #4]
 800383c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003840:	2900      	cmp	r1, #0
 8003842:	d024      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003844:	4942      	ldr	r1, [pc, #264]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 8003846:	6849      	ldr	r1, [r1, #4]
 8003848:	0989      	lsrs	r1, r1, #6
 800384a:	4608      	mov	r0, r1
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003854:	f04f 0500 	mov.w	r5, #0
 8003858:	ea00 0204 	and.w	r2, r0, r4
 800385c:	ea01 0305 	and.w	r3, r1, r5
 8003860:	493d      	ldr	r1, [pc, #244]	; (8003958 <HAL_RCC_GetSysClockFreq+0x168>)
 8003862:	fb01 f003 	mul.w	r0, r1, r3
 8003866:	2100      	movs	r1, #0
 8003868:	fb01 f102 	mul.w	r1, r1, r2
 800386c:	1844      	adds	r4, r0, r1
 800386e:	493a      	ldr	r1, [pc, #232]	; (8003958 <HAL_RCC_GetSysClockFreq+0x168>)
 8003870:	fba2 0101 	umull	r0, r1, r2, r1
 8003874:	1863      	adds	r3, r4, r1
 8003876:	4619      	mov	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	f7fd fab6 	bl	8000df0 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e04a      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	ea02 0400 	and.w	r4, r2, r0
 80038a6:	ea03 0501 	and.w	r5, r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	014b      	lsls	r3, r1, #5
 80038b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038bc:	0142      	lsls	r2, r0, #5
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	1b00      	subs	r0, r0, r4
 80038c4:	eb61 0105 	sbc.w	r1, r1, r5
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	018b      	lsls	r3, r1, #6
 80038d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038d6:	0182      	lsls	r2, r0, #6
 80038d8:	1a12      	subs	r2, r2, r0
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	00d9      	lsls	r1, r3, #3
 80038e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ec:	00d0      	lsls	r0, r2, #3
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	1912      	adds	r2, r2, r4
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	0299      	lsls	r1, r3, #10
 8003902:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003906:	0290      	lsls	r0, r2, #10
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f7fd fa6a 	bl	8000df0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_RCC_GetSysClockFreq+0x160>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	60bb      	str	r3, [r7, #8]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_RCC_GetSysClockFreq+0x164>)
 8003942:	60bb      	str	r3, [r7, #8]
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	68bb      	ldr	r3, [r7, #8]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bdb0      	pop	{r4, r5, r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	017d7840 	.word	0x017d7840

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <HAL_RCC_GetHCLKFreq+0x10>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	2000000c 	.word	0x2000000c

08003970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e041      	b.n	8003a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe fb88 	bl	80020ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fb36 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e046      	b.n	8003ab6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <HAL_TIM_Base_Start+0xb0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d01d      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_Base_Start+0xb4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_TIM_Base_Start+0xb8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_TIM_Base_Start+0xbc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_TIM_Base_Start+0xc0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_Base_Start+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_TIM_Base_Start+0xc8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d111      	bne.n	8003aa4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d010      	beq.n	8003ab4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e007      	b.n	8003ab4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e041      	b.n	8003b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f839 	bl	8003b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f000 fa80 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0x24>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e022      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x6a>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d109      	bne.n	8003bca <HAL_TIM_PWM_Start+0x3e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e015      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x6a>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d109      	bne.n	8003be4 <HAL_TIM_PWM_Start+0x58>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x6a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07c      	b.n	8003cf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x82>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	e013      	b.n	8003c36 <HAL_TIM_PWM_Start+0xaa>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x92>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c1c:	e00b      	b.n	8003c36 <HAL_TIM_PWM_Start+0xaa>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d104      	bne.n	8003c2e <HAL_TIM_PWM_Start+0xa2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	e003      	b.n	8003c36 <HAL_TIM_PWM_Start+0xaa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2202      	movs	r2, #2
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fcce 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	; (8003d00 <HAL_TIM_PWM_Start+0x174>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIM_PWM_Start+0xcc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <HAL_TIM_PWM_Start+0x178>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_PWM_Start+0xd0>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_TIM_PWM_Start+0xd2>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_TIM_PWM_Start+0x174>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d01d      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_TIM_PWM_Start+0x17c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_TIM_PWM_Start+0x180>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_TIM_PWM_Start+0x184>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <HAL_TIM_PWM_Start+0x178>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_TIM_PWM_Start+0x188>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x136>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_TIM_PWM_Start+0x18c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d010      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	e007      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40001800 	.word	0x40001800

08003d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e0ac      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	f200 809f 	bhi.w	8003e84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003e85 	.word	0x08003e85
 8003d54:	08003e85 	.word	0x08003e85
 8003d58:	08003e85 	.word	0x08003e85
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003e85 	.word	0x08003e85
 8003d64:	08003e85 	.word	0x08003e85
 8003d68:	08003e85 	.word	0x08003e85
 8003d6c:	08003e03 	.word	0x08003e03
 8003d70:	08003e85 	.word	0x08003e85
 8003d74:	08003e85 	.word	0x08003e85
 8003d78:	08003e85 	.word	0x08003e85
 8003d7c:	08003e43 	.word	0x08003e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f9e8 	bl	800415c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6999      	ldr	r1, [r3, #24]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	619a      	str	r2, [r3, #24]
      break;
 8003dbe:	e062      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fa38 	bl	800423c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6999      	ldr	r1, [r3, #24]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
      break;
 8003e00:	e041      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fa8b 	bl	8004324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0208 	orr.w	r2, r2, #8
 8003e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0204 	bic.w	r2, r2, #4
 8003e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69d9      	ldr	r1, [r3, #28]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	61da      	str	r2, [r3, #28]
      break;
 8003e40:	e021      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fadf 	bl	800440c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	021a      	lsls	r2, r3, #8
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	61da      	str	r2, [r3, #28]
      break;
 8003e82:	e000      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0b3      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x180>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee8:	d03e      	beq.n	8003f68 <HAL_TIM_ConfigClockSource+0xd0>
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	f200 8087 	bhi.w	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	f000 8085 	beq.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d87f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f00:	2b70      	cmp	r3, #112	; 0x70
 8003f02:	d01a      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xa2>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d87b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f08:	2b60      	cmp	r3, #96	; 0x60
 8003f0a:	d050      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x116>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d877      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f10:	2b50      	cmp	r3, #80	; 0x50
 8003f12:	d03c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xf6>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d873      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d058      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x136>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d86f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f20:	2b30      	cmp	r3, #48	; 0x30
 8003f22:	d064      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d86b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d060      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d867      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d05a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f38:	e062      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6899      	ldr	r1, [r3, #8]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f000 fb2a 	bl	80045a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
      break;
 8003f66:	e04e      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f000 fb13 	bl	80045a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8a:	609a      	str	r2, [r3, #8]
      break;
 8003f8c:	e03b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fa8a 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2150      	movs	r1, #80	; 0x50
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fae1 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003fac:	e02b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 faa8 	bl	8004510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2160      	movs	r1, #96	; 0x60
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fad1 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e01b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fa6a 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2140      	movs	r1, #64	; 0x40
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fac1 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 fab8 	bl	800456e <TIM_ITRx_SetConfig>
        break;
 8003ffe:	e002      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <TIM_Base_SetConfig+0x110>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3b      	ldr	r2, [pc, #236]	; (8004138 <TIM_Base_SetConfig+0x118>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3a      	ldr	r2, [pc, #232]	; (800413c <TIM_Base_SetConfig+0x11c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a39      	ldr	r2, [pc, #228]	; (8004140 <TIM_Base_SetConfig+0x120>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <TIM_Base_SetConfig+0x110>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d027      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d023      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2a      	ldr	r2, [pc, #168]	; (8004138 <TIM_Base_SetConfig+0x118>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a29      	ldr	r2, [pc, #164]	; (800413c <TIM_Base_SetConfig+0x11c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a28      	ldr	r2, [pc, #160]	; (8004140 <TIM_Base_SetConfig+0x120>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d017      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <TIM_Base_SetConfig+0x124>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_Base_SetConfig+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0x12c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a24      	ldr	r2, [pc, #144]	; (8004150 <TIM_Base_SetConfig+0x130>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a23      	ldr	r2, [pc, #140]	; (8004154 <TIM_Base_SetConfig+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a22      	ldr	r2, [pc, #136]	; (8004158 <TIM_Base_SetConfig+0x138>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <TIM_Base_SetConfig+0x110>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0xf8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800
 8004150:	40001800 	.word	0x40001800
 8004154:	40001c00 	.word	0x40001c00
 8004158:	40002000 	.word	0x40002000

0800415c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_OC1_SetConfig+0x64>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10c      	bne.n	80041da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0308 	bic.w	r3, r3, #8
 80041c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC1_SetConfig+0x8e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0210 	bic.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0320 	bic.w	r3, r3, #32
 8004286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a21      	ldr	r2, [pc, #132]	; (800431c <TIM_OC2_SetConfig+0xe0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x68>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <TIM_OC2_SetConfig+0xe0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC2_SetConfig+0x94>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d113      	bne.n	80042f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <TIM_OC3_SetConfig+0xe0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC3_SetConfig+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	; (8004404 <TIM_OC3_SetConfig+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x92>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d113      	bne.n	80043de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40010400 	.word	0x40010400

0800440c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a11      	ldr	r2, [pc, #68]	; (80044ac <TIM_OC4_SetConfig+0xa0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC4_SetConfig+0x68>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <TIM_OC4_SetConfig+0xa4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40010400 	.word	0x40010400

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f023 0210 	bic.w	r2, r3, #16
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	031b      	lsls	r3, r3, #12
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800454c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	f043 0307 	orr.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b087      	sub	sp, #28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	609a      	str	r2, [r3, #8]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr

080045e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2201      	movs	r2, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1a      	ldr	r2, [r3, #32]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e05a      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a20      	ldr	r2, [pc, #128]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d01d      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a14      	ldr	r2, [pc, #80]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800

0800471c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004734:	2302      	movs	r3, #2
 8004736:	e03d      	b.n	80047b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
	...

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	2600      	movs	r6, #0
 80047c4:	4d0c      	ldr	r5, [pc, #48]	; (80047f8 <__libc_init_array+0x38>)
 80047c6:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	f000 f830 	bl	8004834 <_init>
 80047d4:	2600      	movs	r6, #0
 80047d6:	4d0a      	ldr	r5, [pc, #40]	; (8004800 <__libc_init_array+0x40>)
 80047d8:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <__libc_init_array+0x44>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	08004864 	.word	0x08004864
 80047fc:	08004864 	.word	0x08004864
 8004800:	08004864 	.word	0x08004864
 8004804:	08004868 	.word	0x08004868

08004808 <memcpy>:
 8004808:	440a      	add	r2, r1
 800480a:	4291      	cmp	r1, r2
 800480c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004810:	d100      	bne.n	8004814 <memcpy+0xc>
 8004812:	4770      	bx	lr
 8004814:	b510      	push	{r4, lr}
 8004816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481a:	4291      	cmp	r1, r2
 800481c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004820:	d1f9      	bne.n	8004816 <memcpy+0xe>
 8004822:	bd10      	pop	{r4, pc}

08004824 <memset>:
 8004824:	4603      	mov	r3, r0
 8004826:	4402      	add	r2, r0
 8004828:	4293      	cmp	r3, r2
 800482a:	d100      	bne.n	800482e <memset+0xa>
 800482c:	4770      	bx	lr
 800482e:	f803 1b01 	strb.w	r1, [r3], #1
 8004832:	e7f9      	b.n	8004828 <memset+0x4>

08004834 <_init>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr

08004840 <_fini>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr
