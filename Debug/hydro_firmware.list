
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0801b230  0801b230  0002b230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8a4  0801b8a4  00030468  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8a4  0801b8a4  0002b8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8ac  0801b8ac  00030468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8ac  0801b8ac  0002b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8b0  0801b8b0  0002b8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  0801b8b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e248  20000468  0801bd1c  00030468  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2000e6b0  0801bd1c  0003e6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005e4da  00000000  00000000  00030491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009465  00000000  00000000  0008e96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002388  00000000  00000000  00097dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  0009a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc83  00000000  00000000  0009c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036c4b  00000000  00000000  000c9e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddcb3  00000000  00000000  00100a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001de709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a54c  00000000  00000000  001de75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b218 	.word	0x0801b218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0801b218 	.word	0x0801b218

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b9a6 	b.w	8000f60 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f83e 	bl	8000c9c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4605      	mov	r5, r0
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f7ff ff09 	bl	8000a50 <__aeabi_dcmplt>
 8000c3e:	b928      	cbnz	r0, 8000c4c <__aeabi_d2lz+0x20>
 8000c40:	4628      	mov	r0, r5
 8000c42:	4621      	mov	r1, r4
 8000c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c48:	f000 b80a 	b.w	8000c60 <__aeabi_d2ulz>
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c52:	f000 f805 	bl	8000c60 <__aeabi_d2ulz>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	2200      	movs	r2, #0
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__aeabi_d2ulz+0x34>)
 8000c66:	4606      	mov	r6, r0
 8000c68:	460f      	mov	r7, r1
 8000c6a:	f7ff fc7f 	bl	800056c <__aeabi_dmul>
 8000c6e:	f7ff ff55 	bl	8000b1c <__aeabi_d2uiz>
 8000c72:	4604      	mov	r4, r0
 8000c74:	f7ff fc00 	bl	8000478 <__aeabi_ui2d>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <__aeabi_d2ulz+0x38>)
 8000c7c:	f7ff fc76 	bl	800056c <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4630      	mov	r0, r6
 8000c86:	4639      	mov	r1, r7
 8000c88:	f7ff fab8 	bl	80001fc <__aeabi_dsub>
 8000c8c:	f7ff ff46 	bl	8000b1c <__aeabi_d2uiz>
 8000c90:	4621      	mov	r1, r4
 8000c92:	bdd0      	pop	{r4, r6, r7, pc}
 8000c94:	3df00000 	.word	0x3df00000
 8000c98:	41f00000 	.word	0x41f00000

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	468e      	mov	lr, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 8083 	bne.w	8000db4 <__udivmoddi4+0x118>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4617      	mov	r7, r2
 8000cb2:	d947      	bls.n	8000d44 <__udivmoddi4+0xa8>
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	b14b      	cbz	r3, 8000cce <__udivmoddi4+0x32>
 8000cba:	f1c3 0120 	rsb	r1, r3, #32
 8000cbe:	fa05 fe03 	lsl.w	lr, r5, r3
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	409f      	lsls	r7, r3
 8000cc8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd2:	fbbe fcf8 	udiv	ip, lr, r8
 8000cd6:	fa1f f987 	uxth.w	r9, r7
 8000cda:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cde:	fb0c f009 	mul.w	r0, ip, r9
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x66>
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000cf2:	f080 8118 	bcs.w	8000f26 <__udivmoddi4+0x28a>
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	f240 8115 	bls.w	8000f26 <__udivmoddi4+0x28a>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443a      	add	r2, r7
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d08:	fb08 2210 	mls	r2, r8, r0, r2
 8000d0c:	fb00 f109 	mul.w	r1, r0, r9
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d1a:	193c      	adds	r4, r7, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	f080 8103 	bcs.w	8000f2a <__udivmoddi4+0x28e>
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	f240 8100 	bls.w	8000f2a <__udivmoddi4+0x28e>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	1a64      	subs	r4, r4, r1
 8000d30:	2100      	movs	r1, #0
 8000d32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d36:	b11e      	cbz	r6, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	e9c6 4200 	strd	r4, r2, [r6]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	b902      	cbnz	r2, 8000d48 <__udivmoddi4+0xac>
 8000d46:	deff      	udf	#255	; 0xff
 8000d48:	fab2 f382 	clz	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14f      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d50:	1a8d      	subs	r5, r1, r2
 8000d52:	2101      	movs	r1, #1
 8000d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d58:	fa1f f882 	uxth.w	r8, r2
 8000d5c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d60:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d64:	fb08 f00c 	mul.w	r0, r8, ip
 8000d68:	0c22      	lsrs	r2, r4, #16
 8000d6a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0xe6>
 8000d72:	197d      	adds	r5, r7, r5
 8000d74:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0xe4>
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	f200 80e9 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000d80:	4694      	mov	ip, r2
 8000d82:	1a2d      	subs	r5, r5, r0
 8000d84:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d88:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x10e>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x10c>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	f200 80d9 	bhi.w	8000f5a <__udivmoddi4+0x2be>
 8000da8:	4610      	mov	r0, r2
 8000daa:	eba4 0408 	sub.w	r4, r4, r8
 8000dae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db2:	e7c0      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	f000 80b1 	beq.w	8000f20 <__udivmoddi4+0x284>
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e9c6 0500 	strd	r0, r5, [r6]
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f183 	clz	r1, r3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d14b      	bne.n	8000e6a <__udivmoddi4+0x1ce>
 8000dd2:	42ab      	cmp	r3, r5
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b9 	bhi.w	8000f4e <__udivmoddi4+0x2b2>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb65 0303 	sbc.w	r3, r5, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0aa      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000dea:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dee:	e7a7      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000df0:	409f      	lsls	r7, r3
 8000df2:	f1c3 0220 	rsb	r2, r3, #32
 8000df6:	40d1      	lsrs	r1, r2
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fa1f f887 	uxth.w	r8, r7
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	fa24 f202 	lsr.w	r2, r4, r2
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	fb00 fc08 	mul.w	ip, r0, r8
 8000e12:	432a      	orrs	r2, r5
 8000e14:	0c15      	lsrs	r5, r2, #16
 8000e16:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e1a:	45ac      	cmp	ip, r5
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x19a>
 8000e22:	197d      	adds	r5, r7, r5
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	f080 808f 	bcs.w	8000f4a <__udivmoddi4+0x2ae>
 8000e2c:	45ac      	cmp	ip, r5
 8000e2e:	f240 808c 	bls.w	8000f4a <__udivmoddi4+0x2ae>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	eba5 050c 	sub.w	r5, r5, ip
 8000e3a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e3e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e42:	fb01 f908 	mul.w	r9, r1, r8
 8000e46:	b295      	uxth	r5, r2
 8000e48:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e4c:	45a9      	cmp	r9, r5
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	197d      	adds	r5, r7, r5
 8000e52:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e56:	d274      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d972      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	eba5 0509 	sub.w	r5, r5, r9
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e778      	b.n	8000d5c <__udivmoddi4+0xc0>
 8000e6a:	f1c1 0720 	rsb	r7, r1, #32
 8000e6e:	408b      	lsls	r3, r1
 8000e70:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e74:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e78:	fa25 f407 	lsr.w	r4, r5, r7
 8000e7c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e84:	fa1f f88c 	uxth.w	r8, ip
 8000e88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e8c:	fa20 f307 	lsr.w	r3, r0, r7
 8000e90:	fb09 fa08 	mul.w	sl, r9, r8
 8000e94:	408d      	lsls	r5, r1
 8000e96:	431d      	orrs	r5, r3
 8000e98:	0c2b      	lsrs	r3, r5, #16
 8000e9a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea4:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea8:	d909      	bls.n	8000ebe <__udivmoddi4+0x222>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb2:	d248      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb4:	45a2      	cmp	sl, r4
 8000eb6:	d946      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb8:	f1a9 0902 	sub.w	r9, r9, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ec6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eca:	fb00 fa08 	mul.w	sl, r0, r8
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	45a2      	cmp	sl, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x24e>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee0:	d22d      	bcs.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee2:	45a2      	cmp	sl, r4
 8000ee4:	d92b      	bls.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4464      	add	r4, ip
 8000eea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	eba4 040a 	sub.w	r4, r4, sl
 8000ef6:	454c      	cmp	r4, r9
 8000ef8:	46c6      	mov	lr, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	d319      	bcc.n	8000f32 <__udivmoddi4+0x296>
 8000efe:	d016      	beq.n	8000f2e <__udivmoddi4+0x292>
 8000f00:	b15e      	cbz	r6, 8000f1a <__udivmoddi4+0x27e>
 8000f02:	ebb3 020e 	subs.w	r2, r3, lr
 8000f06:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f12:	431f      	orrs	r7, r3
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	4631      	mov	r1, r6
 8000f22:	4630      	mov	r0, r6
 8000f24:	e70c      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f26:	468c      	mov	ip, r1
 8000f28:	e6eb      	b.n	8000d02 <__udivmoddi4+0x66>
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	e6ff      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f2e:	4543      	cmp	r3, r8
 8000f30:	d2e6      	bcs.n	8000f00 <__udivmoddi4+0x264>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 050c 	sbc.w	r5, r9, ip
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e0      	b.n	8000f00 <__udivmoddi4+0x264>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d3      	b.n	8000eea <__udivmoddi4+0x24e>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e78c      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7b9      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e773      	b.n	8000e36 <__udivmoddi4+0x19a>
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e749      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f52:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	e713      	b.n	8000d82 <__udivmoddi4+0xe6>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e724      	b.n	8000daa <__udivmoddi4+0x10e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Mount_USB>:




void Mount_USB (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <Mount_USB+0x1c>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <Mount_USB+0x20>)
 8000f6e:	f011 f9d5 	bl	801231c <f_mount>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <Mount_USB+0x24>)
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000db18 	.word	0x2000db18
 8000f84:	2000dd48 	.word	0x2000dd48
 8000f88:	20009608 	.word	0x20009608

08000f8c <Unmount_USB>:
void Unmount_USB (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <Unmount_USB+0x1c>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f011 f9c1 	bl	801231c <f_mount>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <Unmount_USB+0x20>)
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000db18 	.word	0x2000db18
 8000fac:	20009608 	.word	0x20009608

08000fb0 <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Scan_USB+0xd4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f011 ff12 	bl	8012df6 <f_opendir>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <Scan_USB+0xd8>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <Scan_USB+0xd8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d143      	bne.n	800106a <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4929      	ldr	r1, [pc, #164]	; (800108c <Scan_USB+0xdc>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f011 ffb9 	bl	8012f60 <f_readdir>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <Scan_USB+0xd8>)
 8000ff4:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <Scan_USB+0xd8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <Scan_USB+0xb0>
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <Scan_USB+0xdc>)
 8001000:	7a5b      	ldrb	r3, [r3, #9]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d02c      	beq.n	8001060 <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <Scan_USB+0xdc>)
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e7      	beq.n	8000fe2 <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <Scan_USB+0xe0>)
 8001014:	481f      	ldr	r0, [pc, #124]	; (8001094 <Scan_USB+0xe4>)
 8001016:	f7ff f8db 	bl	80001d0 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01a      	beq.n	8001056 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <Scan_USB+0xe0>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <Scan_USB+0xe8>)
 8001024:	f7ff f8d4 	bl	80001d0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <Scan_USB+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffbc 	bl	8000fb0 <Scan_USB>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Scan_USB+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <Scan_USB+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10a      	bne.n	800105e <Scan_USB+0xae>
                path[i] = 0;
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <Scan_USB+0xd4>)
 800104a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800104e:	2100      	movs	r1, #0
 8001050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001054:	e7c5      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001056:	bf00      	nop
 8001058:	e7c3      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800105a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800105c:	e7c1      	b.n	8000fe2 <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800105e:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f011 ff4e 	bl	8012f06 <f_closedir>
    }
    free(*path);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <Scan_USB+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f015 fd50 	bl	8016b14 <free>
    return fresult;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Scan_USB+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000484 	.word	0x20000484
 8001088:	20009608 	.word	0x20009608
 800108c:	2000960c 	.word	0x2000960c
 8001090:	20009615 	.word	0x20009615
 8001094:	0801b230 	.word	0x0801b230
 8001098:	0801b23c 	.word	0x0801b23c

0800109c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010a6:	491c      	ldr	r1, [pc, #112]	; (8001118 <Write_File+0x7c>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f011 ffa7 	bl	8012ffc <f_stat>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <Write_File+0x80>)
 80010b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <Write_File+0x80>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Write_File+0x28>
	{
	    return fresult;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <Write_File+0x80>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	e025      	b.n	8001110 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80010c4:	2202      	movs	r2, #2
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <Write_File+0x84>)
 80010ca:	f011 f98f 	bl	80123ec <f_open>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <Write_File+0x80>)
 80010d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <Write_File+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Write_File+0x48>
	    {
	        return fresult;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Write_File+0x80>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff f87d 	bl	80001e4 <strlen>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Write_File+0x88>)
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <Write_File+0x84>)
 80010f2:	f011 fb90 	bl	8012816 <f_write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <Write_File+0x80>)
 80010fc:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <Write_File+0x84>)
 8001100:	f011 fe49 	bl	8012d96 <f_close>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Write_File+0x80>)
 800110a:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <Write_File+0x80>)
 800110e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000960c 	.word	0x2000960c
 800111c:	20009608 	.word	0x20009608
 8001120:	2000db1c 	.word	0x2000db1c
 8001124:	20009604 	.word	0x20009604

08001128 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <Create_File+0x60>)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f011 ff62 	bl	8012ffc <f_stat>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <Create_File+0x64>)
 800113e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <Create_File+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <Create_File+0x26>
	{
	    return fresult;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <Create_File+0x64>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	e018      	b.n	8001180 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800114e:	220b      	movs	r2, #11
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <Create_File+0x68>)
 8001154:	f011 f94a 	bl	80123ec <f_open>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <Create_File+0x64>)
 800115e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <Create_File+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Create_File+0x46>
		{

		    return fresult;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <Create_File+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	e008      	b.n	8001180 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <Create_File+0x68>)
 8001170:	f011 fe11 	bl	8012d96 <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <Create_File+0x64>)
 800117a:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <Create_File+0x64>)
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000960c 	.word	0x2000960c
 800118c:	20009608 	.word	0x20009608
 8001190:	2000db1c 	.word	0x2000db1c

08001194 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <Check_USB_Details+0x80>)
 800119a:	491f      	ldr	r1, [pc, #124]	; (8001218 <Check_USB_Details+0x84>)
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <Check_USB_Details+0x88>)
 800119e:	f011 ff80 	bl	80130a2 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Check_USB_Details+0x80>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011aa:	3b02      	subs	r3, #2
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <Check_USB_Details+0x80>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f95d 	bl	8000478 <__aeabi_ui2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Check_USB_Details+0x8c>)
 80011c4:	f7ff f9d2 	bl	800056c <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fca4 	bl	8000b1c <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <Check_USB_Details+0x90>)
 80011d8:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0x80>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <Check_USB_Details+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fb03 f302 	mul.w	r3, r3, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f943 	bl	8000478 <__aeabi_ui2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Check_USB_Details+0x8c>)
 80011f8:	f7ff f9b8 	bl	800056c <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc8a 	bl	8000b1c <__aeabi_d2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <Check_USB_Details+0x94>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200095fc 	.word	0x200095fc
 8001218:	200095f4 	.word	0x200095f4
 800121c:	0801b258 	.word	0x0801b258
 8001220:	3fe00000 	.word	0x3fe00000
 8001224:	20009624 	.word	0x20009624
 8001228:	20009600 	.word	0x20009600

0800122c <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8001230:	2200      	movs	r2, #0
 8001232:	4905      	ldr	r1, [pc, #20]	; (8001248 <getTime+0x1c>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <getTime+0x20>)
 8001236:	f009 f85f 	bl	800a2f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 800123a:	2200      	movs	r2, #0
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <getTime+0x24>)
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <getTime+0x20>)
 8001240:	f009 f94c 	bl	800a4dc <HAL_RTC_GetDate>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20005458 	.word	0x20005458
 800124c:	2000c9f4 	.word	0x2000c9f4
 8001250:	20005464 	.word	0x20005464

08001254 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <setTimeDate+0x84>)
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <setTimeDate+0x84>)
 800127a:	7e3b      	ldrb	r3, [r7, #24]
 800127c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <setTimeDate+0x84>)
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <setTimeDate+0x84>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <setTimeDate+0x84>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001290:	2201      	movs	r2, #1
 8001292:	4911      	ldr	r1, [pc, #68]	; (80012d8 <setTimeDate+0x84>)
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <setTimeDate+0x88>)
 8001296:	f008 ff79 	bl	800a18c <HAL_RTC_SetTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <setTimeDate+0x50>
 80012a0:	f003 f93a 	bl	8004518 <Error_Handler>

	sDate.WeekDay = 0x01;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <setTimeDate+0x8c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <setTimeDate+0x8c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <setTimeDate+0x8c>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <setTimeDate+0x8c>)
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80012bc:	2201      	movs	r2, #1
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <setTimeDate+0x8c>)
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <setTimeDate+0x88>)
 80012c2:	f009 f86b 	bl	800a39c <HAL_RTC_SetDate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <setTimeDate+0x7c>
 80012cc:	f003 f924 	bl	8004518 <Error_Handler>
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20005458 	.word	0x20005458
 80012dc:	2000c9f4 	.word	0x2000c9f4
 80012e0:	20005464 	.word	0x20005464

080012e4 <fanOn>:

double system_fan_sp = 5.5;
double plant_fan_sp = 3.5;
double heat_cool_fan_sp = 2.5; // set default fan speed values
void fanOn()
{
 80012e4:	b598      	push	{r3, r4, r7, lr}
 80012e6:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 80012e8:	2100      	movs	r1, #0
 80012ea:	4847      	ldr	r0, [pc, #284]	; (8001408 <fanOn+0x124>)
 80012ec:	f009 fc82 	bl	800abf4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <fanOn+0x128>)
 80012f2:	f640 323f 	movw	r2, #2879	; 0xb3f
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
   if(heat_cool_fan_sp == 0)  TIM1->CCR1  = 0;
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <fanOn+0x12c>)
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f7ff fb99 	bl	8000a3c <__aeabi_dcmpeq>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <fanOn+0x34>
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <fanOn+0x128>)
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e012      	b.n	800133e <fanOn+0x5a>
   else TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <fanOn+0x128>)
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f8ab 	bl	8000478 <__aeabi_ui2d>
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <fanOn+0x12c>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa4a 	bl	80007c0 <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4c36      	ldr	r4, [pc, #216]	; (800140c <fanOn+0x128>)
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fbf1 	bl	8000b1c <__aeabi_d2uiz>
 800133a:	4603      	mov	r3, r0
 800133c:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <fanOn+0x128>)
 8001340:	f245 0214 	movw	r2, #20500	; 0x5014
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8001346:	2108      	movs	r1, #8
 8001348:	482f      	ldr	r0, [pc, #188]	; (8001408 <fanOn+0x124>)
 800134a:	f009 fc53 	bl	800abf4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <fanOn+0x128>)
 8001350:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
   if(system_fan_sp == 0) TIM1->CCR1  = 0;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <fanOn+0x130>)
 8001358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	f7ff fb6a 	bl	8000a3c <__aeabi_dcmpeq>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <fanOn+0x92>
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <fanOn+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
 8001374:	e012      	b.n	800139c <fanOn+0xb8>
   else TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <fanOn+0x128>)
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f87c 	bl	8000478 <__aeabi_ui2d>
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <fanOn+0x130>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fa1b 	bl	80007c0 <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4c1f      	ldr	r4, [pc, #124]	; (800140c <fanOn+0x128>)
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fbc2 	bl	8000b1c <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <fanOn+0x128>)
 800139e:	f245 0214 	movw	r2, #20500	; 0x5014
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 80013a4:	2100      	movs	r1, #0
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <fanOn+0x134>)
 80013a8:	f009 fc24 	bl	800abf4 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <fanOn+0x138>)
 80013ae:	f640 323f 	movw	r2, #2879	; 0xb3f
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
   if(plant_fan_sp == 0) TIM10->ARR = 0;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <fanOn+0x13c>)
 80013b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f7ff fb3b 	bl	8000a3c <__aeabi_dcmpeq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <fanOn+0xf0>
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <fanOn+0x138>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d2:	e012      	b.n	80013fa <fanOn+0x116>
   else TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <fanOn+0x138>)
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f84d 	bl	8000478 <__aeabi_ui2d>
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <fanOn+0x13c>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f9ec 	bl	80007c0 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <fanOn+0x138>)
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fb93 	bl	8000b1c <__aeabi_d2uiz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <fanOn+0x138>)
 80013fc:	f245 0214 	movw	r2, #20500	; 0x5014
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001402:	bf00      	nop
 8001404:	bd98      	pop	{r3, r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	2000ca28 	.word	0x2000ca28
 800140c:	40010000 	.word	0x40010000
 8001410:	20000010 	.word	0x20000010
 8001414:	20000000 	.word	0x20000000
 8001418:	20009890 	.word	0x20009890
 800141c:	40014400 	.word	0x40014400
 8001420:	20000008 	.word	0x20000008

08001424 <setFanSpeed>:
   TIM10->CCR1 = 0;								// sets the fan speed
   TIM10->CNT = 20500;

}
void setFanSpeed(float sys_fan,float plant_fan,float heat_cool_fan)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	system_fan_sp = sys_fan;
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff f843 	bl	80004bc <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <setFanSpeed+0x48>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
	plant_fan_sp = plant_fan;
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f83b 	bl	80004bc <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4909      	ldr	r1, [pc, #36]	; (8001470 <setFanSpeed+0x4c>)
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
	heat_cool_fan_sp = heat_cool_fan;
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f833 	bl	80004bc <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4906      	ldr	r1, [pc, #24]	; (8001474 <setFanSpeed+0x50>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	fanOn();
 8001460:	f7ff ff40 	bl	80012e4 <fanOn>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000010 	.word	0x20000010

08001478 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <vApplicationGetIdleTaskMemory+0x30>)
 800148e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000704 	.word	0x20000704
 80014a8:	200007b8 	.word	0x200007b8

080014ac <heatOn>:
#include "stm32f2xx_hal.h"
#include "main.h"
#include "sensors.h"
#include "heater_driver.h"
void heatOn()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_RESET);			// set to heat
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <heatOn+0x28>)
 80014b8:	f006 fae1 	bl	8007a7e <HAL_GPIO_WritePin>
	osDelay(200);
 80014bc:	20c8      	movs	r0, #200	; 0xc8
 80014be:	f012 f910 	bl	80136e2 <osDelay>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// enable the heater
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <heatOn+0x28>)
 80014ca:	f006 fad8 	bl	8007a7e <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <heatCoolOff>:
void heatCoolOff()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// disable the heater
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <heatCoolOff+0x20>)
 80014e4:	f006 facb 	bl	8007a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);			// turn off active relays so not to waste power... This also sets the heater/cooler to the cool mode however, since the heater power-supply is disabled no cooling will take place
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <heatCoolOff+0x20>)
 80014f0:	f006 fac5 	bl	8007a7e <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <coolOn>:
void coolOn()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);		// set to cool
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <coolOn+0x28>)
 8001508:	f006 fab9 	bl	8007a7e <HAL_GPIO_WritePin>
	osDelay(200);
 800150c:	20c8      	movs	r0, #200	; 0xc8
 800150e:	f012 f8e8 	bl	80136e2 <osDelay>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// enable the cooler
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <coolOn+0x28>)
 800151a:	f006 fab0 	bl	8007a7e <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <floatToString>:
		setting_nutrient = 'n', heat_on = 'n', cool_on = 'n', setting_water_temp = 'n', run_once = 'n', error = 'n', pH_up = 'n', pH_down = 'n', nutrient_up = 'n', write_header = 'n', temp_up = 'n', temp_down = 0;

long int befdec, aftdec;

void floatToString(double FP_NUM)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	e9c7 0100 	strd	r0, r1, [r7]
	fpnumber = FP_NUM;					// Fractional part is truncated
 8001532:	4990      	ldr	r1, [pc, #576]	; (8001774 <floatToString+0x24c>)
 8001534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	befdec = fpnumber;                  // 12.163456 becomes 12
 800153c:	4b8d      	ldr	r3, [pc, #564]	; (8001774 <floatToString+0x24c>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fac1 	bl	8000acc <__aeabi_d2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <floatToString+0x250>)
 800154e:	6013      	str	r3, [r2, #0]
	aftdec = fpnumber * 100;            // 12.163456 becomes 1216
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <floatToString+0x24c>)
 8001552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b88      	ldr	r3, [pc, #544]	; (800177c <floatToString+0x254>)
 800155c:	f7ff f806 	bl	800056c <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fab0 	bl	8000acc <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	4a84      	ldr	r2, [pc, #528]	; (8001780 <floatToString+0x258>)
 8001570:	6013      	str	r3, [r2, #0]
	aftdec = aftdec - (befdec * 100);   // 1216 - 1200 = 16
 8001572:	4b81      	ldr	r3, [pc, #516]	; (8001778 <floatToString+0x250>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	4b80      	ldr	r3, [pc, #512]	; (8001780 <floatToString+0x258>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a7e      	ldr	r2, [pc, #504]	; (8001780 <floatToString+0x258>)
 8001586:	6013      	str	r3, [r2, #0]
	if (fpnumber < 1)
 8001588:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <floatToString+0x24c>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <floatToString+0x25c>)
 8001594:	f7ff fa5c 	bl	8000a50 <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d031      	beq.n	8001602 <floatToString+0xda>
	{
		convertedString[0] = '0';
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <floatToString+0x260>)
 80015a0:	2230      	movs	r2, #48	; 0x30
 80015a2:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <floatToString+0x260>)
 80015a6:	222e      	movs	r2, #46	; 0x2e
 80015a8:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 80015aa:	4b75      	ldr	r3, [pc, #468]	; (8001780 <floatToString+0x258>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a77      	ldr	r2, [pc, #476]	; (800178c <floatToString+0x264>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1092      	asrs	r2, r2, #2
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3330      	adds	r3, #48	; 0x30
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b71      	ldr	r3, [pc, #452]	; (8001788 <floatToString+0x260>)
 80015c2:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 80015c4:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <floatToString+0x258>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <floatToString+0x264>)
 80015ca:	fb83 1302 	smull	r1, r3, r3, r2
 80015ce:	1099      	asrs	r1, r3, #2
 80015d0:	17d3      	asrs	r3, r2, #31
 80015d2:	1ac9      	subs	r1, r1, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad1      	subs	r1, r2, r3
 80015de:	b2cb      	uxtb	r3, r1
 80015e0:	3330      	adds	r3, #48	; 0x30
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <floatToString+0x260>)
 80015e6:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <floatToString+0x260>)
 80015ea:	2220      	movs	r2, #32
 80015ec:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 80015ee:	4b66      	ldr	r3, [pc, #408]	; (8001788 <floatToString+0x260>)
 80015f0:	2220      	movs	r2, #32
 80015f2:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <floatToString+0x260>)
 80015f6:	2220      	movs	r2, #32
 80015f8:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <floatToString+0x260>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	71da      	strb	r2, [r3, #7]
		convertedString[4] = (befdec/1)%10 + 48;
		convertedString[5] = '.';
		convertedString[6] = (aftdec/10) + 48;
		convertedString[7] = '\0';
	}
}
 8001600:	e25b      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 1) && (fpnumber < 10))
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <floatToString+0x24c>)
 8001604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <floatToString+0x25c>)
 800160e:	f7ff fa33 	bl	8000a78 <__aeabi_dcmpge>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d04b      	beq.n	80016b0 <floatToString+0x188>
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <floatToString+0x24c>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <floatToString+0x268>)
 8001624:	f7ff fa14 	bl	8000a50 <__aeabi_dcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d040      	beq.n	80016b0 <floatToString+0x188>
		convertedString[0] = (befdec/1)%10 + 48;
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <floatToString+0x250>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <floatToString+0x264>)
 8001634:	fb83 1302 	smull	r1, r3, r3, r2
 8001638:	1099      	asrs	r1, r3, #2
 800163a:	17d3      	asrs	r3, r2, #31
 800163c:	1ac9      	subs	r1, r1, r3
 800163e:	460b      	mov	r3, r1
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	1ad1      	subs	r1, r2, r3
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <floatToString+0x260>)
 8001650:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <floatToString+0x260>)
 8001654:	222e      	movs	r2, #46	; 0x2e
 8001656:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <floatToString+0x258>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <floatToString+0x264>)
 800165e:	fb82 1203 	smull	r1, r2, r2, r3
 8001662:	1092      	asrs	r2, r2, #2
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3330      	adds	r3, #48	; 0x30
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b46      	ldr	r3, [pc, #280]	; (8001788 <floatToString+0x260>)
 8001670:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <floatToString+0x258>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <floatToString+0x264>)
 8001678:	fb83 1302 	smull	r1, r3, r3, r2
 800167c:	1099      	asrs	r1, r3, #2
 800167e:	17d3      	asrs	r3, r2, #31
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	460b      	mov	r3, r1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1ad1      	subs	r1, r2, r3
 800168c:	b2cb      	uxtb	r3, r1
 800168e:	3330      	adds	r3, #48	; 0x30
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <floatToString+0x260>)
 8001694:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <floatToString+0x260>)
 8001698:	2220      	movs	r2, #32
 800169a:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <floatToString+0x260>)
 800169e:	2220      	movs	r2, #32
 80016a0:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <floatToString+0x260>)
 80016a4:	2220      	movs	r2, #32
 80016a6:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <floatToString+0x260>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	71da      	strb	r2, [r3, #7]
 80016ae:	e204      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10) && (fpnumber < 100))
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <floatToString+0x24c>)
 80016b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <floatToString+0x268>)
 80016bc:	f7ff f9dc 	bl	8000a78 <__aeabi_dcmpge>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d066      	beq.n	8001794 <floatToString+0x26c>
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <floatToString+0x24c>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b2a      	ldr	r3, [pc, #168]	; (800177c <floatToString+0x254>)
 80016d2:	f7ff f9bd 	bl	8000a50 <__aeabi_dcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <floatToString+0x26c>
		convertedString[0] = (befdec/10) + 48;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <floatToString+0x250>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2a      	ldr	r2, [pc, #168]	; (800178c <floatToString+0x264>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1092      	asrs	r2, r2, #2
 80016e8:	17db      	asrs	r3, r3, #31
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3330      	adds	r3, #48	; 0x30
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <floatToString+0x260>)
 80016f4:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1)%10 + 48;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <floatToString+0x250>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <floatToString+0x264>)
 80016fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001700:	1099      	asrs	r1, r3, #2
 8001702:	17d3      	asrs	r3, r2, #31
 8001704:	1ac9      	subs	r1, r1, r3
 8001706:	460b      	mov	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	1ad1      	subs	r1, r2, r3
 8001710:	b2cb      	uxtb	r3, r1
 8001712:	3330      	adds	r3, #48	; 0x30
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <floatToString+0x260>)
 8001718:	705a      	strb	r2, [r3, #1]
		convertedString[2] = '.';
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <floatToString+0x260>)
 800171c:	222e      	movs	r2, #46	; 0x2e
 800171e:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/10) + 48;
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <floatToString+0x258>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <floatToString+0x264>)
 8001726:	fb82 1203 	smull	r1, r2, r2, r3
 800172a:	1092      	asrs	r2, r2, #2
 800172c:	17db      	asrs	r3, r3, #31
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <floatToString+0x260>)
 8001738:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/1)%10 + 48;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <floatToString+0x258>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <floatToString+0x264>)
 8001740:	fb83 1302 	smull	r1, r3, r3, r2
 8001744:	1099      	asrs	r1, r3, #2
 8001746:	17d3      	asrs	r3, r2, #31
 8001748:	1ac9      	subs	r1, r1, r3
 800174a:	460b      	mov	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	b2cb      	uxtb	r3, r1
 8001756:	3330      	adds	r3, #48	; 0x30
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <floatToString+0x260>)
 800175c:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <floatToString+0x260>)
 8001760:	2220      	movs	r2, #32
 8001762:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <floatToString+0x260>)
 8001766:	2220      	movs	r2, #32
 8001768:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <floatToString+0x260>)
 800176c:	2200      	movs	r2, #0
 800176e:	71da      	strb	r2, [r3, #7]
 8001770:	e1a3      	b.n	8001aba <floatToString+0x592>
 8001772:	bf00      	nop
 8001774:	20009630 	.word	0x20009630
 8001778:	20009628 	.word	0x20009628
 800177c:	40590000 	.word	0x40590000
 8001780:	2000962c 	.word	0x2000962c
 8001784:	3ff00000 	.word	0x3ff00000
 8001788:	200040a8 	.word	0x200040a8
 800178c:	66666667 	.word	0x66666667
 8001790:	40240000 	.word	0x40240000
	else if ((fpnumber >= 100) && (fpnumber < 1000))
 8001794:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <floatToString+0x478>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <floatToString+0x47c>)
 80017a0:	f7ff f96a 	bl	8000a78 <__aeabi_dcmpge>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d05b      	beq.n	8001862 <floatToString+0x33a>
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <floatToString+0x478>)
 80017ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <floatToString+0x480>)
 80017b6:	f7ff f94b 	bl	8000a50 <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d050      	beq.n	8001862 <floatToString+0x33a>
		convertedString[0] = (befdec/100) + 48;
 80017c0:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <floatToString+0x484>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <floatToString+0x488>)
 80017c6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ca:	1152      	asrs	r2, r2, #5
 80017cc:	17db      	asrs	r3, r3, #31
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3330      	adds	r3, #48	; 0x30
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <floatToString+0x48c>)
 80017d8:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/10)%10 + 48;
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <floatToString+0x484>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a76      	ldr	r2, [pc, #472]	; (80019b8 <floatToString+0x490>)
 80017e0:	fb82 1203 	smull	r1, r2, r2, r3
 80017e4:	1092      	asrs	r2, r2, #2
 80017e6:	17db      	asrs	r3, r3, #31
 80017e8:	1ad2      	subs	r2, r2, r3
 80017ea:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <floatToString+0x490>)
 80017ec:	fb83 1302 	smull	r1, r3, r3, r2
 80017f0:	1099      	asrs	r1, r3, #2
 80017f2:	17d3      	asrs	r3, r2, #31
 80017f4:	1ac9      	subs	r1, r1, r3
 80017f6:	460b      	mov	r3, r1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1ad1      	subs	r1, r2, r3
 8001800:	b2cb      	uxtb	r3, r1
 8001802:	3330      	adds	r3, #48	; 0x30
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <floatToString+0x48c>)
 8001808:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/1)%10 + 48;
 800180a:	4b68      	ldr	r3, [pc, #416]	; (80019ac <floatToString+0x484>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <floatToString+0x490>)
 8001810:	fb83 1302 	smull	r1, r3, r3, r2
 8001814:	1099      	asrs	r1, r3, #2
 8001816:	17d3      	asrs	r3, r2, #31
 8001818:	1ac9      	subs	r1, r1, r3
 800181a:	460b      	mov	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	1ad1      	subs	r1, r2, r3
 8001824:	b2cb      	uxtb	r3, r1
 8001826:	3330      	adds	r3, #48	; 0x30
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <floatToString+0x48c>)
 800182c:	709a      	strb	r2, [r3, #2]
		convertedString[3] = '.';
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <floatToString+0x48c>)
 8001830:	222e      	movs	r2, #46	; 0x2e
 8001832:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/10) + 48;
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <floatToString+0x494>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	; (80019b8 <floatToString+0x490>)
 800183a:	fb82 1203 	smull	r1, r2, r2, r3
 800183e:	1092      	asrs	r2, r2, #2
 8001840:	17db      	asrs	r3, r3, #31
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <floatToString+0x48c>)
 800184c:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <floatToString+0x48c>)
 8001850:	2220      	movs	r2, #32
 8001852:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <floatToString+0x48c>)
 8001856:	2220      	movs	r2, #32
 8001858:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <floatToString+0x48c>)
 800185c:	2200      	movs	r2, #0
 800185e:	71da      	strb	r2, [r3, #7]
 8001860:	e12b      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 1000) && (fpnumber < 10000))
 8001862:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <floatToString+0x478>)
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <floatToString+0x480>)
 800186e:	f7ff f903 	bl	8000a78 <__aeabi_dcmpge>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d070      	beq.n	800195a <floatToString+0x432>
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <floatToString+0x478>)
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	a344      	add	r3, pc, #272	; (adr r3, 8001990 <floatToString+0x468>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f8e4 	bl	8000a50 <__aeabi_dcmplt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d065      	beq.n	800195a <floatToString+0x432>
		convertedString[0] = (befdec/1000) + 48;
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <floatToString+0x484>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <floatToString+0x498>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1192      	asrs	r2, r2, #6
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3330      	adds	r3, #48	; 0x30
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <floatToString+0x48c>)
 80018a6:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/100)%10 + 48;
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <floatToString+0x484>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <floatToString+0x488>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1152      	asrs	r2, r2, #5
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad2      	subs	r2, r2, r3
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <floatToString+0x490>)
 80018ba:	fb83 1302 	smull	r1, r3, r3, r2
 80018be:	1099      	asrs	r1, r3, #2
 80018c0:	17d3      	asrs	r3, r2, #31
 80018c2:	1ac9      	subs	r1, r1, r3
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	1ad1      	subs	r1, r2, r3
 80018ce:	b2cb      	uxtb	r3, r1
 80018d0:	3330      	adds	r3, #48	; 0x30
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <floatToString+0x48c>)
 80018d6:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/10)%10 + 48;
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <floatToString+0x484>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <floatToString+0x490>)
 80018de:	fb82 1203 	smull	r1, r2, r2, r3
 80018e2:	1092      	asrs	r2, r2, #2
 80018e4:	17db      	asrs	r3, r3, #31
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <floatToString+0x490>)
 80018ea:	fb83 1302 	smull	r1, r3, r3, r2
 80018ee:	1099      	asrs	r1, r3, #2
 80018f0:	17d3      	asrs	r3, r2, #31
 80018f2:	1ac9      	subs	r1, r1, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	1ad1      	subs	r1, r2, r3
 80018fe:	b2cb      	uxtb	r3, r1
 8001900:	3330      	adds	r3, #48	; 0x30
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <floatToString+0x48c>)
 8001906:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/1)%10 + 48;
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <floatToString+0x484>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <floatToString+0x490>)
 800190e:	fb83 1302 	smull	r1, r3, r3, r2
 8001912:	1099      	asrs	r1, r3, #2
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	1ad1      	subs	r1, r2, r3
 8001922:	b2cb      	uxtb	r3, r1
 8001924:	3330      	adds	r3, #48	; 0x30
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <floatToString+0x48c>)
 800192a:	70da      	strb	r2, [r3, #3]
		convertedString[4] = '.';
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <floatToString+0x48c>)
 800192e:	222e      	movs	r2, #46	; 0x2e
 8001930:	711a      	strb	r2, [r3, #4]
		convertedString[5] = (aftdec/10) + 48;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <floatToString+0x494>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <floatToString+0x490>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1092      	asrs	r2, r2, #2
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <floatToString+0x48c>)
 800194a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <floatToString+0x48c>)
 800194e:	2220      	movs	r2, #32
 8001950:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <floatToString+0x48c>)
 8001954:	2200      	movs	r2, #0
 8001956:	71da      	strb	r2, [r3, #7]
 8001958:	e0af      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <floatToString+0x478>)
 800195c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001960:	a30b      	add	r3, pc, #44	; (adr r3, 8001990 <floatToString+0x468>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7ff f887 	bl	8000a78 <__aeabi_dcmpge>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <floatToString+0x44a>
}
 8001970:	e0a3      	b.n	8001aba <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <floatToString+0x478>)
 8001974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001978:	a307      	add	r3, pc, #28	; (adr r3, 8001998 <floatToString+0x470>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7ff f867 	bl	8000a50 <__aeabi_dcmplt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11d      	bne.n	80019c4 <floatToString+0x49c>
}
 8001988:	e097      	b.n	8001aba <floatToString+0x592>
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w
 8001990:	00000000 	.word	0x00000000
 8001994:	40c38800 	.word	0x40c38800
 8001998:	00000000 	.word	0x00000000
 800199c:	40f86a00 	.word	0x40f86a00
 80019a0:	20009630 	.word	0x20009630
 80019a4:	40590000 	.word	0x40590000
 80019a8:	408f4000 	.word	0x408f4000
 80019ac:	20009628 	.word	0x20009628
 80019b0:	51eb851f 	.word	0x51eb851f
 80019b4:	200040a8 	.word	0x200040a8
 80019b8:	66666667 	.word	0x66666667
 80019bc:	2000962c 	.word	0x2000962c
 80019c0:	10624dd3 	.word	0x10624dd3
		convertedString[0] = (befdec/10000) + 48;
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <floatToString+0x59c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <floatToString+0x5a0>)
 80019ca:	fb82 1203 	smull	r1, r2, r2, r3
 80019ce:	1312      	asrs	r2, r2, #12
 80019d0:	17db      	asrs	r3, r3, #31
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <floatToString+0x5a4>)
 80019dc:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1000)%10 + 48;
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <floatToString+0x59c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <floatToString+0x5a8>)
 80019e4:	fb82 1203 	smull	r1, r2, r2, r3
 80019e8:	1192      	asrs	r2, r2, #6
 80019ea:	17db      	asrs	r3, r3, #31
 80019ec:	1ad2      	subs	r2, r2, r3
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <floatToString+0x5ac>)
 80019f0:	fb83 1302 	smull	r1, r3, r3, r2
 80019f4:	1099      	asrs	r1, r3, #2
 80019f6:	17d3      	asrs	r3, r2, #31
 80019f8:	1ac9      	subs	r1, r1, r3
 80019fa:	460b      	mov	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	1ad1      	subs	r1, r2, r3
 8001a04:	b2cb      	uxtb	r3, r1
 8001a06:	3330      	adds	r3, #48	; 0x30
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <floatToString+0x5a4>)
 8001a0c:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/100)%10 + 48;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <floatToString+0x59c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <floatToString+0x5b0>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1152      	asrs	r2, r2, #5
 8001a1a:	17db      	asrs	r3, r3, #31
 8001a1c:	1ad2      	subs	r2, r2, r3
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <floatToString+0x5ac>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1099      	asrs	r1, r3, #2
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad1      	subs	r1, r2, r3
 8001a34:	b2cb      	uxtb	r3, r1
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <floatToString+0x5a4>)
 8001a3c:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/10)%10 + 48;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <floatToString+0x59c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <floatToString+0x5ac>)
 8001a44:	fb82 1203 	smull	r1, r2, r2, r3
 8001a48:	1092      	asrs	r2, r2, #2
 8001a4a:	17db      	asrs	r3, r3, #31
 8001a4c:	1ad2      	subs	r2, r2, r3
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <floatToString+0x5ac>)
 8001a50:	fb83 1302 	smull	r1, r3, r3, r2
 8001a54:	1099      	asrs	r1, r3, #2
 8001a56:	17d3      	asrs	r3, r2, #31
 8001a58:	1ac9      	subs	r1, r1, r3
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	1ad1      	subs	r1, r2, r3
 8001a64:	b2cb      	uxtb	r3, r1
 8001a66:	3330      	adds	r3, #48	; 0x30
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <floatToString+0x5a4>)
 8001a6c:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (befdec/1)%10 + 48;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <floatToString+0x59c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <floatToString+0x5ac>)
 8001a74:	fb83 1302 	smull	r1, r3, r3, r2
 8001a78:	1099      	asrs	r1, r3, #2
 8001a7a:	17d3      	asrs	r3, r2, #31
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	1ad1      	subs	r1, r2, r3
 8001a88:	b2cb      	uxtb	r3, r1
 8001a8a:	3330      	adds	r3, #48	; 0x30
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <floatToString+0x5a4>)
 8001a90:	711a      	strb	r2, [r3, #4]
		convertedString[5] = '.';
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <floatToString+0x5a4>)
 8001a94:	222e      	movs	r2, #46	; 0x2e
 8001a96:	715a      	strb	r2, [r3, #5]
		convertedString[6] = (aftdec/10) + 48;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <floatToString+0x5b4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <floatToString+0x5ac>)
 8001a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa2:	1092      	asrs	r2, r2, #2
 8001aa4:	17db      	asrs	r3, r3, #31
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <floatToString+0x5a4>)
 8001ab0:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <floatToString+0x5a4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	71da      	strb	r2, [r3, #7]
}
 8001ab8:	e7ff      	b.n	8001aba <floatToString+0x592>
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20009628 	.word	0x20009628
 8001ac8:	68db8bad 	.word	0x68db8bad
 8001acc:	200040a8 	.word	0x200040a8
 8001ad0:	10624dd3 	.word	0x10624dd3
 8001ad4:	66666667 	.word	0x66666667
 8001ad8:	51eb851f 	.word	0x51eb851f
 8001adc:	2000962c 	.word	0x2000962c

08001ae0 <write_balance_data_file>:

void write_balance_data_file(char buffer_full)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]

	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++) buffer[file_index] = file_name[file_index];
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <write_balance_data_file+0x194>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e00c      	b.n	8001b0c <write_balance_data_file+0x2c>
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <write_balance_data_file+0x194>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <write_balance_data_file+0x194>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	495f      	ldr	r1, [pc, #380]	; (8001c78 <write_balance_data_file+0x198>)
 8001afc:	5c89      	ldrb	r1, [r1, r2]
 8001afe:	4a5f      	ldr	r2, [pc, #380]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b00:	54d1      	strb	r1, [r2, r3]
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <write_balance_data_file+0x194>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <write_balance_data_file+0x194>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <write_balance_data_file+0x194>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	dc05      	bgt.n	8001b20 <write_balance_data_file+0x40>
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <write_balance_data_file+0x194>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <write_balance_data_file+0x198>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e8      	bne.n	8001af2 <write_balance_data_file+0x12>

	floatToString((int)file_number);
 8001b20:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fcb7 	bl	8000498 <__aeabi_i2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff fcf9 	bl	8001528 <floatToString>

	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)buffer[file_index] = convertedString[i];
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e011      	b.n	8001b62 <write_balance_data_file+0x82>
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <write_balance_data_file+0x194>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4950      	ldr	r1, [pc, #320]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b48:	5c89      	ldrb	r1, [r1, r2]
 8001b4a:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b4c:	54d1      	strb	r1, [r2, r3]
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <write_balance_data_file+0x194>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a45      	ldr	r2, [pc, #276]	; (8001c74 <write_balance_data_file+0x194>)
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d80b      	bhi.n	8001b82 <write_balance_data_file+0xa2>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a46      	ldr	r2, [pc, #280]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <write_balance_data_file+0xa2>
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <write_balance_data_file+0x1a8>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b80:	d1dd      	bne.n	8001b3e <write_balance_data_file+0x5e>

	if(buffer_full == 'y')
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b79      	cmp	r3, #121	; 0x79
 8001b86:	d109      	bne.n	8001b9c <write_balance_data_file+0xbc>
	{
		buffer[file_index] = 'B';
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <write_balance_data_file+0x194>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <write_balance_data_file+0x19c>)
 8001b8e:	2142      	movs	r1, #66	; 0x42
 8001b90:	54d1      	strb	r1, [r2, r3]
		file_index++;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <write_balance_data_file+0x194>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <write_balance_data_file+0x194>)
 8001b9a:	6013      	str	r3, [r2, #0]
	}

	for(i=0;i<4 && extention[i]!='\0';i++,file_index++) buffer[file_index]=extention[i];
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e011      	b.n	8001bc8 <write_balance_data_file+0xe8>
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <write_balance_data_file+0x194>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <write_balance_data_file+0x1ac>)
 8001bae:	5c89      	ldrb	r1, [r1, r2]
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <write_balance_data_file+0x19c>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <write_balance_data_file+0x194>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <write_balance_data_file+0x194>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	dc05      	bgt.n	8001bdc <write_balance_data_file+0xfc>
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <write_balance_data_file+0x1ac>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e3      	bne.n	8001ba4 <write_balance_data_file+0xc4>

	Create_File(buffer);								  // create the file based on the created file name
 8001bdc:	4827      	ldr	r0, [pc, #156]	; (8001c7c <write_balance_data_file+0x19c>)
 8001bde:	f7ff faa3 	bl	8001128 <Create_File>
	Write_File(buffer,balance_data);	      // write the data to the file.
 8001be2:	492b      	ldr	r1, [pc, #172]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001be4:	4825      	ldr	r0, [pc, #148]	; (8001c7c <write_balance_data_file+0x19c>)
 8001be6:	f7ff fa59 	bl	800109c <Write_File>
	balance_index = 0;
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <write_balance_data_file+0x1b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	write_header  = 'n';
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <write_balance_data_file+0x1b8>)
 8001bf2:	226e      	movs	r2, #110	; 0x6e
 8001bf4:	701a      	strb	r2, [r3, #0]
	get_init_conditions = 0;
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <write_balance_data_file+0x1bc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	file_number++;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <write_balance_data_file+0x1a0>)
 8001c04:	6013      	str	r3, [r2, #0]

	for(i=0;i<10000 && balance_data[i]!='\0';i++)balance_data[i] = '\0';
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e009      	b.n	8001c22 <write_balance_data_file+0x142>
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001c14:	2100      	movs	r1, #0
 8001c16:	54d1      	strb	r1, [r2, r3]
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dc05      	bgt.n	8001c3a <write_balance_data_file+0x15a>
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <write_balance_data_file+0x1b0>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e9      	bne.n	8001c0e <write_balance_data_file+0x12e>
	for(i=0;i<11 && buffer[i]!='\0';i++)buffer[i] = '\0';
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e009      	b.n	8001c56 <write_balance_data_file+0x176>
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <write_balance_data_file+0x19c>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	54d1      	strb	r1, [r2, r3]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	dc05      	bgt.n	8001c6a <write_balance_data_file+0x18a>
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <write_balance_data_file+0x1a4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <write_balance_data_file+0x19c>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1eb      	bne.n	8001c42 <write_balance_data_file+0x162>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004064 	.word	0x20004064
 8001c78:	20000090 	.word	0x20000090
 8001c7c:	2000408c 	.word	0x2000408c
 8001c80:	20004060 	.word	0x20004060
 8001c84:	20004054 	.word	0x20004054
 8001c88:	200040a8 	.word	0x200040a8
 8001c8c:	200000ac 	.word	0x200000ac
 8001c90:	200040b4 	.word	0x200040b4
 8001c94:	20004050 	.word	0x20004050
 8001c98:	20000208 	.word	0x20000208
 8001c9c:	200000b2 	.word	0x200000b2

08001ca0 <add_data_to_array>:

void add_data_to_array()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	if(write_header == 'n')
 8001ca4:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <add_data_to_array+0x1f4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8001caa:	d123      	bne.n	8001cf4 <add_data_to_array+0x54>
	{
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001cac:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e011      	b.n	8001cd8 <add_data_to_array+0x38>
		{
			balance_data[balance_index] = balance_header[i];
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <add_data_to_array+0x1fc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4978      	ldr	r1, [pc, #480]	; (8001ea0 <add_data_to_array+0x200>)
 8001cbe:	5c89      	ldrb	r1, [r1, r2]
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <add_data_to_array+0x204>)
 8001cc2:	54d1      	strb	r1, [r2, r3]
			balance_index++;
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <add_data_to_array+0x1fc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a74      	ldr	r2, [pc, #464]	; (8001e9c <add_data_to_array+0x1fc>)
 8001ccc:	6013      	str	r3, [r2, #0]
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a70      	ldr	r2, [pc, #448]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <add_data_to_array+0x1f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001ce0:	d205      	bcs.n	8001cee <add_data_to_array+0x4e>
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <add_data_to_array+0x1f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <add_data_to_array+0x200>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e2      	bne.n	8001cb4 <add_data_to_array+0x14>
		}
		write_header = 'y';
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <add_data_to_array+0x1f4>)
 8001cf0:	2279      	movs	r2, #121	; 0x79
 8001cf2:	701a      	strb	r2, [r3, #0]
	}
	// CSV file data format: pH, total_pH_up_ml, total_pH_down_ml, time_to_bal_pH, TDS, total_nutrient_ml, time_to_bal_nutrient, error, water_temp
	floatToString((double)pH);	// convert water temp to char array and write it to the data buffer
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <add_data_to_array+0x208>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7ff fc13 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e011      	b.n	8001d2e <add_data_to_array+0x8e>
	{
		balance_data[balance_index] = convertedString[i];
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4966      	ldr	r1, [pc, #408]	; (8001eac <add_data_to_array+0x20c>)
 8001d14:	5c89      	ldrb	r1, [r1, r2]
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <add_data_to_array+0x204>)
 8001d18:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d22:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d805      	bhi.n	8001d42 <add_data_to_array+0xa2>
 8001d36:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5c      	ldr	r2, [pc, #368]	; (8001eac <add_data_to_array+0x20c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e3      	bne.n	8001d0a <add_data_to_array+0x6a>
	}
	balance_data[balance_index] = ',';
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <add_data_to_array+0x204>)
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d54:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml);	// convert water temp to char array and write it to the data buffer
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <add_data_to_array+0x210>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff fbe2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e011      	b.n	8001d90 <add_data_to_array+0xf0>
	{
		balance_data[balance_index] = convertedString[i];
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <add_data_to_array+0x20c>)
 8001d76:	5c89      	ldrb	r1, [r1, r2]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <add_data_to_array+0x204>)
 8001d7a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <add_data_to_array+0x1fc>)
 8001d84:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d805      	bhi.n	8001da4 <add_data_to_array+0x104>
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <add_data_to_array+0x1f8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a43      	ldr	r2, [pc, #268]	; (8001eac <add_data_to_array+0x20c>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e3      	bne.n	8001d6c <add_data_to_array+0xcc>
	}
	balance_data[balance_index] = ',';
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <add_data_to_array+0x1fc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <add_data_to_array+0x204>)
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <add_data_to_array+0x1fc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a39      	ldr	r2, [pc, #228]	; (8001e9c <add_data_to_array+0x1fc>)
 8001db6:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_up_dose);	// convert water temp to char array and write it to the data buffer
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <add_data_to_array+0x214>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7ff fbb1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e011      	b.n	8001df2 <add_data_to_array+0x152>
	{
		balance_data[balance_index] = convertedString[i];
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <add_data_to_array+0x1fc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4935      	ldr	r1, [pc, #212]	; (8001eac <add_data_to_array+0x20c>)
 8001dd8:	5c89      	ldrb	r1, [r1, r2]
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <add_data_to_array+0x204>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <add_data_to_array+0x1fc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <add_data_to_array+0x1fc>)
 8001de6:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <add_data_to_array+0x1f8>)
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <add_data_to_array+0x1f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d805      	bhi.n	8001e06 <add_data_to_array+0x166>
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <add_data_to_array+0x1f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <add_data_to_array+0x20c>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e3      	bne.n	8001dce <add_data_to_array+0x12e>
	}
	balance_data[balance_index] = ',';
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <add_data_to_array+0x204>)
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e18:	6013      	str	r3, [r2, #0]


	floatToString((double)total_pH_down_ml);	// convert water temp to char array and write it to the data buffer
 8001e1a:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <add_data_to_array+0x218>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fb80 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e011      	b.n	8001e54 <add_data_to_array+0x1b4>
	{
		balance_data[balance_index] = convertedString[i];
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	491c      	ldr	r1, [pc, #112]	; (8001eac <add_data_to_array+0x20c>)
 8001e3a:	5c89      	ldrb	r1, [r1, r2]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <add_data_to_array+0x204>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e48:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d805      	bhi.n	8001e68 <add_data_to_array+0x1c8>
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a12      	ldr	r2, [pc, #72]	; (8001eac <add_data_to_array+0x20c>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e3      	bne.n	8001e30 <add_data_to_array+0x190>
	}
	balance_data[balance_index] = ',';
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <add_data_to_array+0x204>)
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <add_data_to_array+0x1fc>)
 8001e7a:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_down_dose);	// convert water temp to char array and write it to the data buffer
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <add_data_to_array+0x21c>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7ff fb4f 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <add_data_to_array+0x1f8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e028      	b.n	8001ee4 <add_data_to_array+0x244>
 8001e92:	bf00      	nop
 8001e94:	20000208 	.word	0x20000208
 8001e98:	20004054 	.word	0x20004054
 8001e9c:	20004050 	.word	0x20004050
 8001ea0:	200000f4 	.word	0x200000f4
 8001ea4:	200040b4 	.word	0x200040b4
 8001ea8:	20001808 	.word	0x20001808
 8001eac:	200040a8 	.word	0x200040a8
 8001eb0:	200017d8 	.word	0x200017d8
 8001eb4:	200017b8 	.word	0x200017b8
 8001eb8:	200017e0 	.word	0x200017e0
 8001ebc:	200017c0 	.word	0x200017c0
	{
		balance_data[balance_index] = convertedString[i];
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <add_data_to_array+0x41c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <add_data_to_array+0x420>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	497e      	ldr	r1, [pc, #504]	; (80020c4 <add_data_to_array+0x424>)
 8001eca:	5c89      	ldrb	r1, [r1, r2]
 8001ecc:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <add_data_to_array+0x428>)
 8001ece:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001ed0:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <add_data_to_array+0x420>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <add_data_to_array+0x420>)
 8001ed8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <add_data_to_array+0x41c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4a76      	ldr	r2, [pc, #472]	; (80020bc <add_data_to_array+0x41c>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <add_data_to_array+0x41c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d805      	bhi.n	8001ef8 <add_data_to_array+0x258>
 8001eec:	4b73      	ldr	r3, [pc, #460]	; (80020bc <add_data_to_array+0x41c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a74      	ldr	r2, [pc, #464]	; (80020c4 <add_data_to_array+0x424>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e3      	bne.n	8001ec0 <add_data_to_array+0x220>
	}
	balance_data[balance_index] = ',';
 8001ef8:	4b71      	ldr	r3, [pc, #452]	; (80020c0 <add_data_to_array+0x420>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <add_data_to_array+0x428>)
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f02:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <add_data_to_array+0x420>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a6d      	ldr	r2, [pc, #436]	; (80020c0 <add_data_to_array+0x420>)
 8001f0a:	6013      	str	r3, [r2, #0]


	floatToString(time_to_bal_pH);	// convert water temp to char array and write it to the data buffer
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <add_data_to_array+0x42c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fac1 	bl	8000498 <__aeabi_i2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff fb03 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <add_data_to_array+0x41c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e011      	b.n	8001f4e <add_data_to_array+0x2ae>
	{
		balance_data[balance_index] = convertedString[i];
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <add_data_to_array+0x41c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <add_data_to_array+0x420>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4964      	ldr	r1, [pc, #400]	; (80020c4 <add_data_to_array+0x424>)
 8001f34:	5c89      	ldrb	r1, [r1, r2]
 8001f36:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <add_data_to_array+0x428>)
 8001f38:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f3a:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <add_data_to_array+0x420>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a5f      	ldr	r2, [pc, #380]	; (80020c0 <add_data_to_array+0x420>)
 8001f42:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <add_data_to_array+0x41c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <add_data_to_array+0x41c>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b5b      	ldr	r3, [pc, #364]	; (80020bc <add_data_to_array+0x41c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d805      	bhi.n	8001f62 <add_data_to_array+0x2c2>
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <add_data_to_array+0x41c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <add_data_to_array+0x424>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e3      	bne.n	8001f2a <add_data_to_array+0x28a>
	}
	balance_data[balance_index] = ',';
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <add_data_to_array+0x420>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <add_data_to_array+0x428>)
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <add_data_to_array+0x420>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a53      	ldr	r2, [pc, #332]	; (80020c0 <add_data_to_array+0x420>)
 8001f74:	6013      	str	r3, [r2, #0]

	floatToString( (double)TDS);	// convert water temp to char array and write it to the data buffer
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <add_data_to_array+0x430>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fad2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <add_data_to_array+0x41c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e011      	b.n	8001fb0 <add_data_to_array+0x310>
	{
		balance_data[balance_index] = convertedString[i];
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <add_data_to_array+0x41c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <add_data_to_array+0x420>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	494b      	ldr	r1, [pc, #300]	; (80020c4 <add_data_to_array+0x424>)
 8001f96:	5c89      	ldrb	r1, [r1, r2]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <add_data_to_array+0x428>)
 8001f9a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <add_data_to_array+0x420>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <add_data_to_array+0x420>)
 8001fa4:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <add_data_to_array+0x41c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <add_data_to_array+0x41c>)
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <add_data_to_array+0x41c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d805      	bhi.n	8001fc4 <add_data_to_array+0x324>
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <add_data_to_array+0x41c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <add_data_to_array+0x424>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e3      	bne.n	8001f8c <add_data_to_array+0x2ec>
	}
	balance_data[balance_index] = ',';
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <add_data_to_array+0x420>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <add_data_to_array+0x428>)
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <add_data_to_array+0x420>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <add_data_to_array+0x420>)
 8001fd6:	6013      	str	r3, [r2, #0]

	floatToString((double)total_nutrient_ml);	// convert water temp to char array and write it to the data buffer
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <add_data_to_array+0x434>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff faa1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <add_data_to_array+0x41c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e011      	b.n	8002012 <add_data_to_array+0x372>
	{
		balance_data[balance_index] = convertedString[i];
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <add_data_to_array+0x41c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <add_data_to_array+0x420>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4933      	ldr	r1, [pc, #204]	; (80020c4 <add_data_to_array+0x424>)
 8001ff8:	5c89      	ldrb	r1, [r1, r2]
 8001ffa:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <add_data_to_array+0x428>)
 8001ffc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <add_data_to_array+0x420>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <add_data_to_array+0x420>)
 8002006:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <add_data_to_array+0x41c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <add_data_to_array+0x41c>)
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <add_data_to_array+0x41c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b09      	cmp	r3, #9
 8002018:	d805      	bhi.n	8002026 <add_data_to_array+0x386>
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <add_data_to_array+0x41c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <add_data_to_array+0x424>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e3      	bne.n	8001fee <add_data_to_array+0x34e>
	}
	balance_data[balance_index] = ',';
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <add_data_to_array+0x420>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <add_data_to_array+0x428>)
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <add_data_to_array+0x420>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <add_data_to_array+0x420>)
 8002038:	6013      	str	r3, [r2, #0]

	floatToString( (double)nutrient_dose);	// convert water temp to char array and write it to the data buffer
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <add_data_to_array+0x438>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fa70 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <add_data_to_array+0x41c>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e011      	b.n	8002074 <add_data_to_array+0x3d4>
	{
		balance_data[balance_index] = convertedString[i];
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <add_data_to_array+0x41c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <add_data_to_array+0x420>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <add_data_to_array+0x424>)
 800205a:	5c89      	ldrb	r1, [r1, r2]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <add_data_to_array+0x428>)
 800205e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <add_data_to_array+0x420>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <add_data_to_array+0x420>)
 8002068:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <add_data_to_array+0x41c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <add_data_to_array+0x41c>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <add_data_to_array+0x41c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d805      	bhi.n	8002088 <add_data_to_array+0x3e8>
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <add_data_to_array+0x41c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <add_data_to_array+0x424>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e3      	bne.n	8002050 <add_data_to_array+0x3b0>
	}
	balance_data[balance_index] = ',';
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <add_data_to_array+0x420>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <add_data_to_array+0x428>)
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <add_data_to_array+0x420>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <add_data_to_array+0x420>)
 800209a:	6013      	str	r3, [r2, #0]

	floatToString(time_to_bal_nutrient);	// convert water temp to char array and write it to the data buffer
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <add_data_to_array+0x43c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9f9 	bl	8000498 <__aeabi_i2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fa3b 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020b2:	4b02      	ldr	r3, [pc, #8]	; (80020bc <add_data_to_array+0x41c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e024      	b.n	8002104 <add_data_to_array+0x464>
 80020ba:	bf00      	nop
 80020bc:	20004054 	.word	0x20004054
 80020c0:	20004050 	.word	0x20004050
 80020c4:	200040a8 	.word	0x200040a8
 80020c8:	200040b4 	.word	0x200040b4
 80020cc:	2000405c 	.word	0x2000405c
 80020d0:	20001800 	.word	0x20001800
 80020d4:	200017d0 	.word	0x200017d0
 80020d8:	200017c8 	.word	0x200017c8
 80020dc:	20004058 	.word	0x20004058
	{
		balance_data[balance_index] = convertedString[i];
 80020e0:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <add_data_to_array+0x658>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <add_data_to_array+0x65c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4985      	ldr	r1, [pc, #532]	; (8002300 <add_data_to_array+0x660>)
 80020ea:	5c89      	ldrb	r1, [r1, r2]
 80020ec:	4a85      	ldr	r2, [pc, #532]	; (8002304 <add_data_to_array+0x664>)
 80020ee:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <add_data_to_array+0x65c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a81      	ldr	r2, [pc, #516]	; (80022fc <add_data_to_array+0x65c>)
 80020f8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <add_data_to_array+0x658>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a7d      	ldr	r2, [pc, #500]	; (80022f8 <add_data_to_array+0x658>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b7c      	ldr	r3, [pc, #496]	; (80022f8 <add_data_to_array+0x658>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b09      	cmp	r3, #9
 800210a:	d805      	bhi.n	8002118 <add_data_to_array+0x478>
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <add_data_to_array+0x658>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <add_data_to_array+0x660>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e3      	bne.n	80020e0 <add_data_to_array+0x440>
	}
	balance_data[balance_index] = ',';
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <add_data_to_array+0x65c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a79      	ldr	r2, [pc, #484]	; (8002304 <add_data_to_array+0x664>)
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <add_data_to_array+0x65c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a74      	ldr	r2, [pc, #464]	; (80022fc <add_data_to_array+0x65c>)
 800212a:	6013      	str	r3, [r2, #0]

	balance_data[balance_index] = error;
 800212c:	4b73      	ldr	r3, [pc, #460]	; (80022fc <add_data_to_array+0x65c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a75      	ldr	r2, [pc, #468]	; (8002308 <add_data_to_array+0x668>)
 8002132:	7811      	ldrb	r1, [r2, #0]
 8002134:	4a73      	ldr	r2, [pc, #460]	; (8002304 <add_data_to_array+0x664>)
 8002136:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <add_data_to_array+0x65c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <add_data_to_array+0x65c>)
 8002140:	6013      	str	r3, [r2, #0]
	balance_data[balance_index] = ',';
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <add_data_to_array+0x65c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <add_data_to_array+0x664>)
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <add_data_to_array+0x65c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <add_data_to_array+0x65c>)
 8002154:	6013      	str	r3, [r2, #0]

	floatToString((double)water_temp);	// convert water temp to char array and write it to the data buffer
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <add_data_to_array+0x66c>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff f9e2 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <add_data_to_array+0x658>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e011      	b.n	8002190 <add_data_to_array+0x4f0>
	{
		balance_data[balance_index] = convertedString[i];
 800216c:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <add_data_to_array+0x658>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <add_data_to_array+0x65c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4962      	ldr	r1, [pc, #392]	; (8002300 <add_data_to_array+0x660>)
 8002176:	5c89      	ldrb	r1, [r1, r2]
 8002178:	4a62      	ldr	r2, [pc, #392]	; (8002304 <add_data_to_array+0x664>)
 800217a:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <add_data_to_array+0x65c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a5e      	ldr	r2, [pc, #376]	; (80022fc <add_data_to_array+0x65c>)
 8002184:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <add_data_to_array+0x658>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <add_data_to_array+0x658>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <add_data_to_array+0x658>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b09      	cmp	r3, #9
 8002196:	d805      	bhi.n	80021a4 <add_data_to_array+0x504>
 8002198:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <add_data_to_array+0x658>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <add_data_to_array+0x660>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e3      	bne.n	800216c <add_data_to_array+0x4cc>
	}
	balance_data[balance_index] = ',';
 80021a4:	4b55      	ldr	r3, [pc, #340]	; (80022fc <add_data_to_array+0x65c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <add_data_to_array+0x664>)
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <add_data_to_array+0x65c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <add_data_to_array+0x65c>)
 80021b6:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 80021b8:	4b55      	ldr	r3, [pc, #340]	; (8002310 <add_data_to_array+0x670>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7ff f9b1 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <add_data_to_array+0x658>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e011      	b.n	80021f2 <add_data_to_array+0x552>
	{
		balance_data[balance_index] = convertedString[i];
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <add_data_to_array+0x658>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <add_data_to_array+0x65c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	494a      	ldr	r1, [pc, #296]	; (8002300 <add_data_to_array+0x660>)
 80021d8:	5c89      	ldrb	r1, [r1, r2]
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <add_data_to_array+0x664>)
 80021dc:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <add_data_to_array+0x65c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <add_data_to_array+0x65c>)
 80021e6:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <add_data_to_array+0x658>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <add_data_to_array+0x658>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <add_data_to_array+0x658>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d805      	bhi.n	8002206 <add_data_to_array+0x566>
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <add_data_to_array+0x658>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a40      	ldr	r2, [pc, #256]	; (8002300 <add_data_to_array+0x660>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e3      	bne.n	80021ce <add_data_to_array+0x52e>
	}
	balance_data[balance_index] = ',';
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <add_data_to_array+0x65c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <add_data_to_array+0x664>)
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002210:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <add_data_to_array+0x65c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a39      	ldr	r2, [pc, #228]	; (80022fc <add_data_to_array+0x65c>)
 8002218:	6013      	str	r3, [r2, #0]
	floatToString((double)total_pH_down_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <add_data_to_array+0x674>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff f980 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <add_data_to_array+0x658>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e011      	b.n	8002254 <add_data_to_array+0x5b4>
	{
		balance_data[balance_index] = convertedString[i];
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <add_data_to_array+0x658>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <add_data_to_array+0x65c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4931      	ldr	r1, [pc, #196]	; (8002300 <add_data_to_array+0x660>)
 800223a:	5c89      	ldrb	r1, [r1, r2]
 800223c:	4a31      	ldr	r2, [pc, #196]	; (8002304 <add_data_to_array+0x664>)
 800223e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <add_data_to_array+0x65c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <add_data_to_array+0x65c>)
 8002248:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <add_data_to_array+0x658>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <add_data_to_array+0x658>)
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <add_data_to_array+0x658>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d805      	bhi.n	8002268 <add_data_to_array+0x5c8>
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <add_data_to_array+0x658>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <add_data_to_array+0x660>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e3      	bne.n	8002230 <add_data_to_array+0x590>
	}
	balance_data[balance_index] = ',';
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <add_data_to_array+0x65c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <add_data_to_array+0x664>)
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <add_data_to_array+0x65c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <add_data_to_array+0x65c>)
 800227a:	6013      	str	r3, [r2, #0]
	floatToString((double)total_nutrient_ml_cal_step);	// convert water temp to char array and write it to the data buffer
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <add_data_to_array+0x678>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7ff f94f 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <add_data_to_array+0x658>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e011      	b.n	80022b6 <add_data_to_array+0x616>
	{
		balance_data[balance_index] = convertedString[i];
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <add_data_to_array+0x658>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <add_data_to_array+0x65c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4919      	ldr	r1, [pc, #100]	; (8002300 <add_data_to_array+0x660>)
 800229c:	5c89      	ldrb	r1, [r1, r2]
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <add_data_to_array+0x664>)
 80022a0:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <add_data_to_array+0x65c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <add_data_to_array+0x65c>)
 80022aa:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <add_data_to_array+0x658>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <add_data_to_array+0x658>)
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <add_data_to_array+0x658>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d805      	bhi.n	80022ca <add_data_to_array+0x62a>
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <add_data_to_array+0x658>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <add_data_to_array+0x660>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e3      	bne.n	8002292 <add_data_to_array+0x5f2>
	}
	balance_data[balance_index] = ',';
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <add_data_to_array+0x65c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <add_data_to_array+0x664>)
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <add_data_to_array+0x65c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <add_data_to_array+0x65c>)
 80022dc:	6013      	str	r3, [r2, #0]

	balance_data[balance_index] = '\n';
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <add_data_to_array+0x65c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <add_data_to_array+0x664>)
 80022e4:	210a      	movs	r1, #10
 80022e6:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <add_data_to_array+0x65c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a03      	ldr	r2, [pc, #12]	; (80022fc <add_data_to_array+0x65c>)
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20004054 	.word	0x20004054
 80022fc:	20004050 	.word	0x20004050
 8002300:	200040a8 	.word	0x200040a8
 8002304:	200040b4 	.word	0x200040b4
 8002308:	20000204 	.word	0x20000204
 800230c:	20001810 	.word	0x20001810
 8002310:	20004038 	.word	0x20004038
 8002314:	20004040 	.word	0x20004040
 8002318:	20004048 	.word	0x20004048

0800231c <appendInitialConditions>:

void appendInitialConditions()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <appendInitialConditions+0x230>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e011      	b.n	800234c <appendInitialConditions+0x30>
	{
		balance_data[balance_index] = pH_init_title[i];
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <appendInitialConditions+0x230>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <appendInitialConditions+0x234>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4988      	ldr	r1, [pc, #544]	; (8002554 <appendInitialConditions+0x238>)
 8002332:	5c89      	ldrb	r1, [r1, r2]
 8002334:	4a88      	ldr	r2, [pc, #544]	; (8002558 <appendInitialConditions+0x23c>)
 8002336:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <appendInitialConditions+0x234>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a84      	ldr	r2, [pc, #528]	; (8002550 <appendInitialConditions+0x234>)
 8002340:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <appendInitialConditions+0x230>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a80      	ldr	r2, [pc, #512]	; (800254c <appendInitialConditions+0x230>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b7f      	ldr	r3, [pc, #508]	; (800254c <appendInitialConditions+0x230>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b10      	cmp	r3, #16
 8002352:	dc05      	bgt.n	8002360 <appendInitialConditions+0x44>
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <appendInitialConditions+0x230>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <appendInitialConditions+0x238>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e3      	bne.n	8002328 <appendInitialConditions+0xc>
	}
	balance_data[balance_index] = ',';
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <appendInitialConditions+0x234>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <appendInitialConditions+0x23c>)
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <appendInitialConditions+0x234>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a77      	ldr	r2, [pc, #476]	; (8002550 <appendInitialConditions+0x234>)
 8002372:	6013      	str	r3, [r2, #0]
	floatToString( pH);									// convert pH to char array and write it to the data buffer
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <appendInitialConditions+0x240>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7ff f8d3 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <appendInitialConditions+0x230>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e011      	b.n	80023ae <appendInitialConditions+0x92>
	{
		balance_data[balance_index] = convertedString[i];
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <appendInitialConditions+0x230>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <appendInitialConditions+0x234>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4973      	ldr	r1, [pc, #460]	; (8002560 <appendInitialConditions+0x244>)
 8002394:	5c89      	ldrb	r1, [r1, r2]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <appendInitialConditions+0x23c>)
 8002398:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <appendInitialConditions+0x234>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a6b      	ldr	r2, [pc, #428]	; (8002550 <appendInitialConditions+0x234>)
 80023a2:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <appendInitialConditions+0x230>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <appendInitialConditions+0x230>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <appendInitialConditions+0x230>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d805      	bhi.n	80023c2 <appendInitialConditions+0xa6>
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <appendInitialConditions+0x230>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <appendInitialConditions+0x244>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e3      	bne.n	800238a <appendInitialConditions+0x6e>
	}
	balance_data[balance_index] = ',';
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <appendInitialConditions+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <appendInitialConditions+0x23c>)
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <appendInitialConditions+0x234>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <appendInitialConditions+0x234>)
 80023d4:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <appendInitialConditions+0x230>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e011      	b.n	8002402 <appendInitialConditions+0xe6>
	{
		balance_data[balance_index] = pH_set_point_title[i];
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <appendInitialConditions+0x230>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <appendInitialConditions+0x234>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	495f      	ldr	r1, [pc, #380]	; (8002564 <appendInitialConditions+0x248>)
 80023e8:	5c89      	ldrb	r1, [r1, r2]
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <appendInitialConditions+0x23c>)
 80023ec:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <appendInitialConditions+0x234>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a56      	ldr	r2, [pc, #344]	; (8002550 <appendInitialConditions+0x234>)
 80023f6:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <appendInitialConditions+0x230>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a53      	ldr	r2, [pc, #332]	; (800254c <appendInitialConditions+0x230>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <appendInitialConditions+0x230>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	dc05      	bgt.n	8002416 <appendInitialConditions+0xfa>
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <appendInitialConditions+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <appendInitialConditions+0x248>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e3      	bne.n	80023de <appendInitialConditions+0xc2>
	}
	balance_data[balance_index] = ',';
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <appendInitialConditions+0x234>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <appendInitialConditions+0x23c>)
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <appendInitialConditions+0x234>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <appendInitialConditions+0x234>)
 8002428:	6013      	str	r3, [r2, #0]
	floatToString( pH_set_point);									// convert pH set point to char array and write it to the data buffer
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <appendInitialConditions+0x24c>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7ff f878 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 8002438:	4b44      	ldr	r3, [pc, #272]	; (800254c <appendInitialConditions+0x230>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e011      	b.n	8002464 <appendInitialConditions+0x148>
	{
		balance_data[balance_index] = convertedString[i];
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <appendInitialConditions+0x230>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <appendInitialConditions+0x234>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4945      	ldr	r1, [pc, #276]	; (8002560 <appendInitialConditions+0x244>)
 800244a:	5c89      	ldrb	r1, [r1, r2]
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <appendInitialConditions+0x23c>)
 800244e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <appendInitialConditions+0x234>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <appendInitialConditions+0x234>)
 8002458:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <appendInitialConditions+0x230>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a3a      	ldr	r2, [pc, #232]	; (800254c <appendInitialConditions+0x230>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <appendInitialConditions+0x230>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b09      	cmp	r3, #9
 800246a:	d805      	bhi.n	8002478 <appendInitialConditions+0x15c>
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <appendInitialConditions+0x230>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <appendInitialConditions+0x244>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e3      	bne.n	8002440 <appendInitialConditions+0x124>
	}
	balance_data[balance_index] = '\n';
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <appendInitialConditions+0x234>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <appendInitialConditions+0x23c>)
 800247e:	210a      	movs	r1, #10
 8002480:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <appendInitialConditions+0x234>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <appendInitialConditions+0x234>)
 800248a:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <appendInitialConditions+0x230>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e011      	b.n	80024b8 <appendInitialConditions+0x19c>
	{
		balance_data[balance_index] = TDS_init_title[i];
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <appendInitialConditions+0x230>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <appendInitialConditions+0x234>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4933      	ldr	r1, [pc, #204]	; (800256c <appendInitialConditions+0x250>)
 800249e:	5c89      	ldrb	r1, [r1, r2]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <appendInitialConditions+0x23c>)
 80024a2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <appendInitialConditions+0x234>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <appendInitialConditions+0x234>)
 80024ac:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <appendInitialConditions+0x230>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <appendInitialConditions+0x230>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <appendInitialConditions+0x230>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b10      	cmp	r3, #16
 80024be:	dc05      	bgt.n	80024cc <appendInitialConditions+0x1b0>
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <appendInitialConditions+0x230>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <appendInitialConditions+0x250>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e3      	bne.n	8002494 <appendInitialConditions+0x178>
	}
	balance_data[balance_index] = ',';
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <appendInitialConditions+0x234>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a21      	ldr	r2, [pc, #132]	; (8002558 <appendInitialConditions+0x23c>)
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <appendInitialConditions+0x234>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <appendInitialConditions+0x234>)
 80024de:	6013      	str	r3, [r2, #0]
	floatToString( TDS);									// convert pH to char array and write it to the data buffer
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <appendInitialConditions+0x254>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff f81d 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <appendInitialConditions+0x230>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e011      	b.n	800251a <appendInitialConditions+0x1fe>
	{
		balance_data[balance_index] = convertedString[i];
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <appendInitialConditions+0x230>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <appendInitialConditions+0x234>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <appendInitialConditions+0x244>)
 8002500:	5c89      	ldrb	r1, [r1, r2]
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <appendInitialConditions+0x23c>)
 8002504:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <appendInitialConditions+0x234>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <appendInitialConditions+0x234>)
 800250e:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <appendInitialConditions+0x230>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <appendInitialConditions+0x230>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <appendInitialConditions+0x230>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d805      	bhi.n	800252e <appendInitialConditions+0x212>
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <appendInitialConditions+0x230>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <appendInitialConditions+0x244>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e3      	bne.n	80024f6 <appendInitialConditions+0x1da>
	}
	balance_data[balance_index] = ',';
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <appendInitialConditions+0x234>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <appendInitialConditions+0x23c>)
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <appendInitialConditions+0x234>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <appendInitialConditions+0x234>)
 8002540:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <appendInitialConditions+0x230>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e026      	b.n	8002598 <appendInitialConditions+0x27c>
 800254a:	bf00      	nop
 800254c:	20004054 	.word	0x20004054
 8002550:	20004050 	.word	0x20004050
 8002554:	200000b4 	.word	0x200000b4
 8002558:	200040b4 	.word	0x200040b4
 800255c:	20001808 	.word	0x20001808
 8002560:	200040a8 	.word	0x200040a8
 8002564:	200000c4 	.word	0x200000c4
 8002568:	20000020 	.word	0x20000020
 800256c:	200000d4 	.word	0x200000d4
 8002570:	20001800 	.word	0x20001800
	{
		balance_data[balance_index] = TDS_set_point_title[i];
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <appendInitialConditions+0x310>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <appendInitialConditions+0x314>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	492d      	ldr	r1, [pc, #180]	; (8002634 <appendInitialConditions+0x318>)
 800257e:	5c89      	ldrb	r1, [r1, r2]
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <appendInitialConditions+0x31c>)
 8002582:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <appendInitialConditions+0x314>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <appendInitialConditions+0x314>)
 800258c:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <appendInitialConditions+0x310>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <appendInitialConditions+0x310>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <appendInitialConditions+0x310>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	dc05      	bgt.n	80025ac <appendInitialConditions+0x290>
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <appendInitialConditions+0x310>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <appendInitialConditions+0x318>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e3      	bne.n	8002574 <appendInitialConditions+0x258>
	}
	balance_data[balance_index] = ',';
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <appendInitialConditions+0x314>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <appendInitialConditions+0x31c>)
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <appendInitialConditions+0x314>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <appendInitialConditions+0x314>)
 80025be:	6013      	str	r3, [r2, #0]
	floatToString( nutrient_set_point);									// convert pH set point to char array and write it to the data buffer
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <appendInitialConditions+0x320>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe ffad 	bl	8001528 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <appendInitialConditions+0x310>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e011      	b.n	80025fa <appendInitialConditions+0x2de>
	{
		balance_data[balance_index] = convertedString[i];
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <appendInitialConditions+0x310>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <appendInitialConditions+0x314>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4918      	ldr	r1, [pc, #96]	; (8002640 <appendInitialConditions+0x324>)
 80025e0:	5c89      	ldrb	r1, [r1, r2]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <appendInitialConditions+0x31c>)
 80025e4:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <appendInitialConditions+0x314>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <appendInitialConditions+0x314>)
 80025ee:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <appendInitialConditions+0x310>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <appendInitialConditions+0x310>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <appendInitialConditions+0x310>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d805      	bhi.n	800260e <appendInitialConditions+0x2f2>
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <appendInitialConditions+0x310>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <appendInitialConditions+0x324>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e3      	bne.n	80025d6 <appendInitialConditions+0x2ba>
	}
	balance_data[balance_index] = '\n';
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <appendInitialConditions+0x314>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <appendInitialConditions+0x31c>)
 8002614:	210a      	movs	r1, #10
 8002616:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <appendInitialConditions+0x314>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <appendInitialConditions+0x314>)
 8002620:	6013      	str	r3, [r2, #0]
    get_init_conditions = 'y';
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <appendInitialConditions+0x328>)
 8002624:	2279      	movs	r2, #121	; 0x79
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20004054 	.word	0x20004054
 8002630:	20004050 	.word	0x20004050
 8002634:	200000e4 	.word	0x200000e4
 8002638:	200040b4 	.word	0x200040b4
 800263c:	20000018 	.word	0x20000018
 8002640:	200040a8 	.word	0x200040a8
 8002644:	200000b2 	.word	0x200000b2

08002648 <balancePhAndNutrient>:

void balancePhAndNutrient()
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af04      	add	r7, sp, #16
	TDS_avg_check = 0;
 800264e:	4998      	ldr	r1, [pc, #608]	; (80028b0 <balancePhAndNutrient+0x268>)
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
	pH_avg_check = 0;
 800265c:	4995      	ldr	r1, [pc, #596]	; (80028b4 <balancePhAndNutrient+0x26c>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c1 2300 	strd	r2, r3, [r1]
	//if(waiting_to_write == 'n')
	if(getSensorValues() == 'n') return;
 800266a:	f002 fffb 	bl	8005664 <getSensorValues>
 800266e:	4603      	mov	r3, r0
 8002670:	2b6e      	cmp	r3, #110	; 0x6e
 8002672:	f000 8362 	beq.w	8002d3a <balancePhAndNutrient+0x6f2>

	pH_up = 'n';
 8002676:	4b90      	ldr	r3, [pc, #576]	; (80028b8 <balancePhAndNutrient+0x270>)
 8002678:	226e      	movs	r2, #110	; 0x6e
 800267a:	701a      	strb	r2, [r3, #0]
	pH_down = 'n';
 800267c:	4b8f      	ldr	r3, [pc, #572]	; (80028bc <balancePhAndNutrient+0x274>)
 800267e:	226e      	movs	r2, #110	; 0x6e
 8002680:	701a      	strb	r2, [r3, #0]
	nutrient_up = 'n';	// check twice to see if we need to add nutrient
 8002682:	4b8f      	ldr	r3, [pc, #572]	; (80028c0 <balancePhAndNutrient+0x278>)
 8002684:	226e      	movs	r2, #110	; 0x6e
 8002686:	701a      	strb	r2, [r3, #0]

	if(setting_nutrient == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002688:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <balancePhAndNutrient+0x27c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b6e      	cmp	r3, #110	; 0x6e
 800268e:	d158      	bne.n	8002742 <balancePhAndNutrient+0xfa>
	{
		if(     TDS > nutrient_set_point && (TDS - nutrient_bounds_check) > nutrient_set_point) 	error = 'y'; 				 // if we are over our TDS set point ERROR
 8002690:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <balancePhAndNutrient+0x280>)
 8002692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <balancePhAndNutrient+0x284>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f9f6 	bl	8000a8c <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d017      	beq.n	80026d6 <balancePhAndNutrient+0x8e>
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <balancePhAndNutrient+0x280>)
 80026a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ac:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <balancePhAndNutrient+0x288>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd fda3 	bl	80001fc <__aeabi_dsub>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	4b83      	ldr	r3, [pc, #524]	; (80028cc <balancePhAndNutrient+0x284>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fe f9e2 	bl	8000a8c <__aeabi_dcmpgt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <balancePhAndNutrient+0x8e>
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <balancePhAndNutrient+0x28c>)
 80026d0:	2279      	movs	r2, #121	; 0x79
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e057      	b.n	8002786 <balancePhAndNutrient+0x13e>
		else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_check) < nutrient_set_point )
 80026d6:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <balancePhAndNutrient+0x280>)
 80026d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026dc:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <balancePhAndNutrient+0x284>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f9b5 	bl	8000a50 <__aeabi_dcmplt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04c      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 80026ec:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <balancePhAndNutrient+0x280>)
 80026ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f2:	4b77      	ldr	r3, [pc, #476]	; (80028d0 <balancePhAndNutrient+0x288>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fd82 	bl	8000200 <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	4b71      	ldr	r3, [pc, #452]	; (80028cc <balancePhAndNutrient+0x284>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fe f9a1 	bl	8000a50 <__aeabi_dcmplt>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d038      	beq.n	8002786 <balancePhAndNutrient+0x13e>
		{
			nutrient_up = calibrateDosage('n',pH,pH_bounds_set,nutrient_bounds_set);// if we checked twice and we still need to dose nutrients then go for it.
 8002714:	4b70      	ldr	r3, [pc, #448]	; (80028d8 <balancePhAndNutrient+0x290>)
 8002716:	e9d3 4500 	ldrd	r4, r5, [r3]
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <balancePhAndNutrient+0x294>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	496f      	ldr	r1, [pc, #444]	; (80028e0 <balancePhAndNutrient+0x298>)
 8002722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800272a:	e9cd 2300 	strd	r2, r3, [sp]
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	206e      	movs	r0, #110	; 0x6e
 8002734:	f001 ffa0 	bl	8004678 <calibrateDosage>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b60      	ldr	r3, [pc, #384]	; (80028c0 <balancePhAndNutrient+0x278>)
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e021      	b.n	8002786 <balancePhAndNutrient+0x13e>
		}
	}
	else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_set) < nutrient_set_point) nutrient_up = 'y';		 // if we are under our set point dose the water with pH-down
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <balancePhAndNutrient+0x280>)
 8002744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002748:	4b60      	ldr	r3, [pc, #384]	; (80028cc <balancePhAndNutrient+0x284>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fe f97f 	bl	8000a50 <__aeabi_dcmplt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d016      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 8002758:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <balancePhAndNutrient+0x280>)
 800275a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <balancePhAndNutrient+0x298>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd fd4c 	bl	8000200 <__adddf3>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <balancePhAndNutrient+0x284>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fe f96b 	bl	8000a50 <__aeabi_dcmplt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <balancePhAndNutrient+0x13e>
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <balancePhAndNutrient+0x278>)
 8002782:	2279      	movs	r2, #121	; 0x79
 8002784:	701a      	strb	r2, [r3, #0]

	if(setting_pH == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <balancePhAndNutrient+0x29c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b6e      	cmp	r3, #110	; 0x6e
 800278c:	d16c      	bne.n	8002868 <balancePhAndNutrient+0x220>
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)
 800278e:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <balancePhAndNutrient+0x290>)
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fe f977 	bl	8000a8c <__aeabi_dcmpgt>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02a      	beq.n	80027fa <balancePhAndNutrient+0x1b2>
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <balancePhAndNutrient+0x290>)
 80027a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027aa:	4b50      	ldr	r3, [pc, #320]	; (80028ec <balancePhAndNutrient+0x2a4>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd24 	bl	80001fc <__aeabi_dsub>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fe f963 	bl	8000a8c <__aeabi_dcmpgt>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <balancePhAndNutrient+0x1b2>
		{
			pH_down = calibrateDosage('d', pH,pH_bounds_set,nutrient_bounds_set);		// if we are over our set point dose the water with pH-down
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <balancePhAndNutrient+0x290>)
 80027ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <balancePhAndNutrient+0x294>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	4941      	ldr	r1, [pc, #260]	; (80028e0 <balancePhAndNutrient+0x298>)
 80027da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027e2:	e9cd 2300 	strd	r2, r3, [sp]
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	f001 ff44 	bl	8004678 <calibrateDosage>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b31      	ldr	r3, [pc, #196]	; (80028bc <balancePhAndNutrient+0x274>)
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e09c      	b.n	8002934 <balancePhAndNutrient+0x2ec>
		}
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <balancePhAndNutrient+0x290>)
 80027fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002800:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fe f923 	bl	8000a50 <__aeabi_dcmplt>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8091 	beq.w	8002934 <balancePhAndNutrient+0x2ec>
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <balancePhAndNutrient+0x290>)
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <balancePhAndNutrient+0x2a4>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fcef 	bl	8000200 <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fe f90e 	bl	8000a50 <__aeabi_dcmplt>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07c      	beq.n	8002934 <balancePhAndNutrient+0x2ec>
		{
			pH_up 	= calibrateDosage('u',pH,pH_bounds_set,nutrient_bounds_set); 				// if we are under our set point dose the water with pH-up
 800283a:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <balancePhAndNutrient+0x290>)
 800283c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <balancePhAndNutrient+0x294>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	4926      	ldr	r1, [pc, #152]	; (80028e0 <balancePhAndNutrient+0x298>)
 8002848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800284c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002850:	e9cd 2300 	strd	r2, r3, [sp]
 8002854:	4622      	mov	r2, r4
 8002856:	462b      	mov	r3, r5
 8002858:	2075      	movs	r0, #117	; 0x75
 800285a:	f001 ff0d 	bl	8004678 <calibrateDosage>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <balancePhAndNutrient+0x270>)
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e065      	b.n	8002934 <balancePhAndNutrient+0x2ec>
		}
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_set) > pH_set_point)   				pH_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <balancePhAndNutrient+0x290>)
 800286a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fe f90a 	bl	8000a8c <__aeabi_dcmpgt>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d038      	beq.n	80028f0 <balancePhAndNutrient+0x2a8>
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <balancePhAndNutrient+0x290>)
 8002880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <balancePhAndNutrient+0x294>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fcb7 	bl	80001fc <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fe f8f6 	bl	8000a8c <__aeabi_dcmpgt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d024      	beq.n	80028f0 <balancePhAndNutrient+0x2a8>
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <balancePhAndNutrient+0x274>)
 80028a8:	2279      	movs	r2, #121	; 0x79
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e042      	b.n	8002934 <balancePhAndNutrient+0x2ec>
 80028ae:	bf00      	nop
 80028b0:	20004028 	.word	0x20004028
 80028b4:	20004030 	.word	0x20004030
 80028b8:	20000205 	.word	0x20000205
 80028bc:	20000206 	.word	0x20000206
 80028c0:	20000207 	.word	0x20000207
 80028c4:	200001ff 	.word	0x200001ff
 80028c8:	20001800 	.word	0x20001800
 80028cc:	20000018 	.word	0x20000018
 80028d0:	20000050 	.word	0x20000050
 80028d4:	20000204 	.word	0x20000204
 80028d8:	20001808 	.word	0x20001808
 80028dc:	20000048 	.word	0x20000048
 80028e0:	20000058 	.word	0x20000058
 80028e4:	200001fe 	.word	0x200001fe
 80028e8:	20000020 	.word	0x20000020
 80028ec:	20000040 	.word	0x20000040
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_set) < pH_set_point)  				pH_up 	= 'y'; 				// if we are under our set point dose the water with pH-up
 80028f0:	4b82      	ldr	r3, [pc, #520]	; (8002afc <balancePhAndNutrient+0x4b4>)
 80028f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f6:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fe f8a8 	bl	8000a50 <__aeabi_dcmplt>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <balancePhAndNutrient+0x2ec>
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <balancePhAndNutrient+0x4b4>)
 8002908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290c:	4b7d      	ldr	r3, [pc, #500]	; (8002b04 <balancePhAndNutrient+0x4bc>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	f7fd fc75 	bl	8000200 <__adddf3>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fe f894 	bl	8000a50 <__aeabi_dcmplt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <balancePhAndNutrient+0x2ec>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <balancePhAndNutrient+0x4c0>)
 8002930:	2279      	movs	r2, #121	; 0x79
 8002932:	701a      	strb	r2, [r3, #0]
	}


	if(get_init_conditions == 'n') appendInitialConditions();
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <balancePhAndNutrient+0x4c4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b6e      	cmp	r3, #110	; 0x6e
 800293a:	d101      	bne.n	8002940 <balancePhAndNutrient+0x2f8>
 800293c:	f7ff fcee 	bl	800231c <appendInitialConditions>

	if((pH_down == 'y' || pH_up == 'y' || nutrient_up == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8002940:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b79      	cmp	r3, #121	; 0x79
 8002946:	d007      	beq.n	8002958 <balancePhAndNutrient+0x310>
 8002948:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <balancePhAndNutrient+0x4c0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b79      	cmp	r3, #121	; 0x79
 800294e:	d003      	beq.n	8002958 <balancePhAndNutrient+0x310>
 8002950:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b79      	cmp	r3, #121	; 0x79
 8002956:	d11d      	bne.n	8002994 <balancePhAndNutrient+0x34c>
	{
		if(nutrient_up == 'y') 			setting_nutrient = 'y';
 8002958:	4b6e      	ldr	r3, [pc, #440]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b79      	cmp	r3, #121	; 0x79
 800295e:	d103      	bne.n	8002968 <balancePhAndNutrient+0x320>
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 8002962:	2279      	movs	r2, #121	; 0x79
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e002      	b.n	800296e <balancePhAndNutrient+0x326>
		else setting_nutrient = 'n';
 8002968:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 800296a:	226e      	movs	r2, #110	; 0x6e
 800296c:	701a      	strb	r2, [r3, #0]

		if(pH_down == 'y' || pH_up == 'y')  setting_pH = 'y';
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b79      	cmp	r3, #121	; 0x79
 8002974:	d003      	beq.n	800297e <balancePhAndNutrient+0x336>
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <balancePhAndNutrient+0x4c0>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b79      	cmp	r3, #121	; 0x79
 800297c:	d103      	bne.n	8002986 <balancePhAndNutrient+0x33e>
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 8002980:	2279      	movs	r2, #121	; 0x79
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e002      	b.n	800298c <balancePhAndNutrient+0x344>
		else setting_pH = 'n';
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 8002988:	226e      	movs	r2, #110	; 0x6e
 800298a:	701a      	strb	r2, [r3, #0]
		num_of_stable_runs = 0;
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e006      	b.n	80029a2 <balancePhAndNutrient+0x35a>
	}
	else if(pH_down == 'n')		// else if we are not setting anything, signify that
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b6e      	cmp	r3, #110	; 0x6e
 800299a:	d102      	bne.n	80029a2 <balancePhAndNutrient+0x35a>
	{
		setting_nutrient = 'n';
 800299c:	4b5e      	ldr	r3, [pc, #376]	; (8002b18 <balancePhAndNutrient+0x4d0>)
 800299e:	226e      	movs	r2, #110	; 0x6e
 80029a0:	701a      	strb	r2, [r3, #0]
	}
	if(pH_up == 'n' && nutrient_up == 'n')
 80029a2:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <balancePhAndNutrient+0x4c0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b6e      	cmp	r3, #110	; 0x6e
 80029a8:	d106      	bne.n	80029b8 <balancePhAndNutrient+0x370>
 80029aa:	4b5a      	ldr	r3, [pc, #360]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b6e      	cmp	r3, #110	; 0x6e
 80029b0:	d102      	bne.n	80029b8 <balancePhAndNutrient+0x370>
	{
		setting_pH = 'n';
 80029b2:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <balancePhAndNutrient+0x4d4>)
 80029b4:	226e      	movs	r2, #110	; 0x6e
 80029b6:	701a      	strb	r2, [r3, #0]
	}

	if(num_of_stable_runs >= 0 && num_of_stable_runs < 7 && ((5000 - balance_index) >= 500) && waiting_to_write == 'n' ) // consider changing to 10
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f2c0 812a 	blt.w	8002c16 <balancePhAndNutrient+0x5ce>
 80029c2:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <balancePhAndNutrient+0x4d8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	f300 8125 	bgt.w	8002c16 <balancePhAndNutrient+0x5ce>
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <balancePhAndNutrient+0x4dc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80029d4:	3308      	adds	r3, #8
 80029d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029da:	f2c0 811c 	blt.w	8002c16 <balancePhAndNutrient+0x5ce>
 80029de:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <balancePhAndNutrient+0x4e0>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b6e      	cmp	r3, #110	; 0x6e
 80029e4:	f040 8117 	bne.w	8002c16 <balancePhAndNutrient+0x5ce>
	{
		time_to_bal_pH = 0;
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <balancePhAndNutrient+0x4e4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
		time_to_bal_nutrient = 0;
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <balancePhAndNutrient+0x4e8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

		if(nutrient_up == 'y')	// if we need to add nutrients and we also need to adjust the pH, add the nutrients first and wait to stabilize then add pH-up/down
 80029f4:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <balancePhAndNutrient+0x4cc>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b79      	cmp	r3, #121	; 0x79
 80029fa:	d13b      	bne.n	8002a74 <balancePhAndNutrient+0x42c>
		{
			nutrient_dose = calcNutrientDose(pH_set_point, nutrient_set_point);
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 80029fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <balancePhAndNutrient+0x4ec>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f001 fe06 	bl	8004618 <calcNutrientDose>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4949      	ldr	r1, [pc, #292]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a12:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,0,nutrient_dose);
 8002a16:	4b48      	ldr	r3, [pc, #288]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	f001 fd77 	bl	8004522 <doseWater>
			total_nutrient_ml += nutrient_dose;
 8002a34:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fbde 	bl	8000200 <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	493c      	ldr	r1, [pc, #240]	; (8002b3c <balancePhAndNutrient+0x4f4>)
 8002a4a:	e9c1 2300 	strd	r2, r3, [r1]
			total_nutrient_ml_per_file += nutrient_dose;
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 8002a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a54:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <balancePhAndNutrient+0x4f0>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fbd1 	bl	8000200 <__adddf3>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4937      	ldr	r1, [pc, #220]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 8002a64:	e9c1 2300 	strd	r2, r3, [r1]
			time_to_bal_nutrient = waitForWaterToStabilize();
 8002a68:	f000 ff22 	bl	80038b0 <waitForWaterToStabilize>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <balancePhAndNutrient+0x4e8>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e0af      	b.n	8002bd4 <balancePhAndNutrient+0x58c>
				total_pH_up_ml_per_file+= pH_up_dose;
				pH_up = 'n';
				time_to_bal_pH = waitForWaterToStabilize();
			}*/
		}
		else if(pH_down == 'y')
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b79      	cmp	r3, #121	; 0x79
 8002a7a:	d169      	bne.n	8002b50 <balancePhAndNutrient+0x508>
		{
			pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <balancePhAndNutrient+0x4b8>)
 8002a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a82:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <balancePhAndNutrient+0x4ec>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f001 fd98 	bl	80045bc <calcPhDownDose>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	492c      	ldr	r1, [pc, #176]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(pH_down_dose,0,0);
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9cd 2300 	strd	r2, r3, [sp]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f001 fd37 	bl	8004522 <doseWater>
			total_pH_down_ml += pH_down_dose;
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fb9e 	bl	8000200 <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	491f      	ldr	r1, [pc, #124]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002aca:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_down_ml_per_file += pH_down_dose;
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fb91 	bl	8000200 <__adddf3>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	491a      	ldr	r1, [pc, #104]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002ae4:	e9c1 2300 	strd	r2, r3, [r1]
			pH_down = 'n';
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <balancePhAndNutrient+0x4c8>)
 8002aea:	226e      	movs	r2, #110	; 0x6e
 8002aec:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002aee:	f000 fedf 	bl	80038b0 <waitForWaterToStabilize>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <balancePhAndNutrient+0x4e4>)
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e06c      	b.n	8002bd4 <balancePhAndNutrient+0x58c>
 8002afa:	bf00      	nop
 8002afc:	20001808 	.word	0x20001808
 8002b00:	20000020 	.word	0x20000020
 8002b04:	20000048 	.word	0x20000048
 8002b08:	20000205 	.word	0x20000205
 8002b0c:	200000b2 	.word	0x200000b2
 8002b10:	20000206 	.word	0x20000206
 8002b14:	20000207 	.word	0x20000207
 8002b18:	200001ff 	.word	0x200001ff
 8002b1c:	200001fe 	.word	0x200001fe
 8002b20:	20004068 	.word	0x20004068
 8002b24:	20004050 	.word	0x20004050
 8002b28:	200000b1 	.word	0x200000b1
 8002b2c:	2000405c 	.word	0x2000405c
 8002b30:	20004058 	.word	0x20004058
 8002b34:	20000018 	.word	0x20000018
 8002b38:	200017c8 	.word	0x200017c8
 8002b3c:	200017d0 	.word	0x200017d0
 8002b40:	200017e8 	.word	0x200017e8
 8002b44:	200017c0 	.word	0x200017c0
 8002b48:	200017e0 	.word	0x200017e0
 8002b4c:	200017f8 	.word	0x200017f8
		}
		else if(pH_up == 'y')
 8002b50:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <balancePhAndNutrient+0x6fc>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b79      	cmp	r3, #121	; 0x79
 8002b56:	d13d      	bne.n	8002bd4 <balancePhAndNutrient+0x58c>
		{
			pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002b58:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <balancePhAndNutrient+0x700>)
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <balancePhAndNutrient+0x704>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f001 fcfc 	bl	8004560 <calcPhUpDose>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4978      	ldr	r1, [pc, #480]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002b6e:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,pH_up_dose,0);
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	e9cd 0100 	strd	r0, r1, [sp]
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	f001 fcc9 	bl	8004522 <doseWater>
			total_pH_up_ml += pH_up_dose;
 8002b90:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b96:	4b6e      	ldr	r3, [pc, #440]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fb30 	bl	8000200 <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	496b      	ldr	r1, [pc, #428]	; (8002d54 <balancePhAndNutrient+0x70c>)
 8002ba6:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_up_ml_per_file += pH_up_dose;
 8002baa:	4b6b      	ldr	r3, [pc, #428]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb0:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fb23 	bl	8000200 <__adddf3>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4966      	ldr	r1, [pc, #408]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]
			pH_up = 'n';
 8002bc4:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <balancePhAndNutrient+0x6fc>)
 8002bc6:	226e      	movs	r2, #110	; 0x6e
 8002bc8:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002bca:	f000 fe71 	bl	80038b0 <waitForWaterToStabilize>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a62      	ldr	r2, [pc, #392]	; (8002d5c <balancePhAndNutrient+0x714>)
 8002bd2:	6013      	str	r3, [r2, #0]
		}
		osDelay(500);
 8002bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bd8:	f010 fd83 	bl	80136e2 <osDelay>
		num_of_stable_runs++;
 8002bdc:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002be4:	6013      	str	r3, [r2, #0]
		add_data_to_array();
 8002be6:	f7ff f85b 	bl	8001ca0 <add_data_to_array>
		pH_up_dose = 0;
 8002bea:	4959      	ldr	r1, [pc, #356]	; (8002d50 <balancePhAndNutrient+0x708>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose = 0;
 8002bf8:	495a      	ldr	r1, [pc, #360]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
		nutrient_dose = 0;
 8002c06:	4958      	ldr	r1, [pc, #352]	; (8002d68 <balancePhAndNutrient+0x720>)
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9c1 2300 	strd	r2, r3, [r1]
 8002c14:	e04b      	b.n	8002cae <balancePhAndNutrient+0x666>
	}
	else if(num_of_stable_runs>=7 && waiting_to_write == 'n' && (total_pH_up_ml_per_file > 0 || total_pH_down_ml_per_file > 0 || total_nutrient_ml_per_file > 0) && setting_nutrient =='n' && setting_pH == 'n')
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	dd47      	ble.n	8002cae <balancePhAndNutrient+0x666>
 8002c1e:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b6e      	cmp	r3, #110	; 0x6e
 8002c24:	d143      	bne.n	8002cae <balancePhAndNutrient+0x666>
 8002c26:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f7fd ff2a 	bl	8000a8c <__aeabi_dcmpgt>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d117      	bne.n	8002c6e <balancePhAndNutrient+0x626>
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd ff1e 	bl	8000a8c <__aeabi_dcmpgt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <balancePhAndNutrient+0x626>
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f7fd ff12 	bl	8000a8c <__aeabi_dcmpgt>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01f      	beq.n	8002cae <balancePhAndNutrient+0x666>
 8002c6e:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b6e      	cmp	r3, #110	; 0x6e
 8002c74:	d11b      	bne.n	8002cae <balancePhAndNutrient+0x666>
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <balancePhAndNutrient+0x734>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b6e      	cmp	r3, #110	; 0x6e
 8002c7c:	d117      	bne.n	8002cae <balancePhAndNutrient+0x666>
	{
		waiting_to_write = 'y';
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002c80:	2279      	movs	r2, #121	; 0x79
 8002c82:	701a      	strb	r2, [r3, #0]
		total_pH_down_ml_per_file = 0;
 8002c84:	493a      	ldr	r1, [pc, #232]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9c1 2300 	strd	r2, r3, [r1]
		total_pH_up_ml_per_file = 0;
 8002c92:	4931      	ldr	r1, [pc, #196]	; (8002d58 <balancePhAndNutrient+0x710>)
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c1 2300 	strd	r2, r3, [r1]
		total_nutrient_ml_per_file = 0;
 8002ca0:	4934      	ldr	r1, [pc, #208]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(usb_good == 1 && num_of_stable_runs >= 7 && waiting_to_write == 'y')
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <balancePhAndNutrient+0x738>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d131      	bne.n	8002d1a <balancePhAndNutrient+0x6d2>
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	dd2d      	ble.n	8002d1a <balancePhAndNutrient+0x6d2>
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b79      	cmp	r3, #121	; 0x79
 8002cc4:	d129      	bne.n	8002d1a <balancePhAndNutrient+0x6d2>
	{
		write_balance_data_file('n');
 8002cc6:	206e      	movs	r0, #110	; 0x6e
 8002cc8:	f7fe ff0a 	bl	8001ae0 <write_balance_data_file>
		num_of_stable_runs = 0;
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <balancePhAndNutrient+0x718>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
		balance_index = 0;
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
		get_init_conditions  = 'n';
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <balancePhAndNutrient+0x740>)
 8002cda:	226e      	movs	r2, #110	; 0x6e
 8002cdc:	701a      	strb	r2, [r3, #0]
		waiting_to_write = 'n';
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002ce0:	226e      	movs	r2, #110	; 0x6e
 8002ce2:	701a      	strb	r2, [r3, #0]
		resetStabilityVars();
 8002ce4:	f000 f856 	bl	8002d94 <resetStabilityVars>
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	e00f      	b.n	8002d0e <balancePhAndNutrient+0x6c6>
		{
			balance_data[a]   = '\0';
 8002cee:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <balancePhAndNutrient+0x744>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
			if(a<25)buffer[a] = '\0';
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	dc04      	bgt.n	8002d08 <balancePhAndNutrient+0x6c0>
 8002cfe:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <balancePhAndNutrient+0x748>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f241 3287 	movw	r2, #4999	; 0x1387
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d9ea      	bls.n	8002cee <balancePhAndNutrient+0x6a6>
 8002d18:	e010      	b.n	8002d3c <balancePhAndNutrient+0x6f4>
		}
	}
	else if(usb_good == 1 && ((5000 - balance_index) < 500)) write_balance_data_file('y'); // if the buffer is full write the file
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <balancePhAndNutrient+0x738>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10c      	bne.n	8002d3c <balancePhAndNutrient+0x6f4>
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d30:	da04      	bge.n	8002d3c <balancePhAndNutrient+0x6f4>
 8002d32:	2079      	movs	r0, #121	; 0x79
 8002d34:	f7fe fed4 	bl	8001ae0 <write_balance_data_file>
 8002d38:	e000      	b.n	8002d3c <balancePhAndNutrient+0x6f4>
	if(getSensorValues() == 'n') return;
 8002d3a:	bf00      	nop
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000205 	.word	0x20000205
 8002d48:	20000020 	.word	0x20000020
 8002d4c:	20000018 	.word	0x20000018
 8002d50:	200017b8 	.word	0x200017b8
 8002d54:	200017d8 	.word	0x200017d8
 8002d58:	200017f0 	.word	0x200017f0
 8002d5c:	2000405c 	.word	0x2000405c
 8002d60:	20004068 	.word	0x20004068
 8002d64:	200017c0 	.word	0x200017c0
 8002d68:	200017c8 	.word	0x200017c8
 8002d6c:	200000b1 	.word	0x200000b1
 8002d70:	200017f8 	.word	0x200017f8
 8002d74:	200017e8 	.word	0x200017e8
 8002d78:	200001ff 	.word	0x200001ff
 8002d7c:	200001fe 	.word	0x200001fe
 8002d80:	200095e8 	.word	0x200095e8
 8002d84:	20004050 	.word	0x20004050
 8002d88:	200000b2 	.word	0x200000b2
 8002d8c:	200040b4 	.word	0x200040b4
 8002d90:	2000408c 	.word	0x2000408c

08002d94 <resetStabilityVars>:

void resetStabilityVars()
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
	average_pH = 0;
 8002d9a:	492e      	ldr	r1, [pc, #184]	; (8002e54 <resetStabilityVars+0xc0>)
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9c1 2300 	strd	r2, r3, [r1]
	average_TDS = 0;
 8002da8:	492b      	ldr	r1, [pc, #172]	; (8002e58 <resetStabilityVars+0xc4>)
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
	run_again = 1; 		// set to one its the first run 2 is multiple 0 is do not run again
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <resetStabilityVars+0xc8>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
	valid = 0;
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <resetStabilityVars+0xcc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
	historic_sample_index = 0;
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <resetStabilityVars+0xd0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
	slope_factor_average_TDS = 0;
 8002dc8:	4927      	ldr	r1, [pc, #156]	; (8002e68 <resetStabilityVars+0xd4>)
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9c1 2300 	strd	r2, r3, [r1]
	slope_factor_average_ph = 0;
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <resetStabilityVars+0xd8>)
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9c1 2300 	strd	r2, r3, [r1]

	for(int h = 0; h<200; h++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e02a      	b.n	8002e40 <resetStabilityVars+0xac>
	{
		historic_largest_pH[h] = 0;
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <resetStabilityVars+0xdc>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	18d1      	adds	r1, r2, r3
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[h] = 0;
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <resetStabilityVars+0xe0>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	18d1      	adds	r1, r2, r3
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[h] = 0;
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <resetStabilityVars+0xe4>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	18d1      	adds	r1, r2, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[h] = 0;
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <resetStabilityVars+0xe8>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	18d1      	adds	r1, r2, r3
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9c1 2300 	strd	r2, r3, [r1]
	for(int h = 0; h<200; h++)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2bc7      	cmp	r3, #199	; 0xc7
 8002e44:	ddd1      	ble.n	8002dea <resetStabilityVars+0x56>
	}
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20003dc8 	.word	0x20003dc8
 8002e58:	20003dd0 	.word	0x20003dd0
 8002e5c:	2000008c 	.word	0x2000008c
 8002e60:	20004084 	.word	0x20004084
 8002e64:	20004088 	.word	0x20004088
 8002e68:	20003e08 	.word	0x20003e08
 8002e6c:	20003e10 	.word	0x20003e10
 8002e70:	20001828 	.word	0x20001828
 8002e74:	20001e68 	.word	0x20001e68
 8002e78:	200024a8 	.word	0x200024a8
 8002e7c:	20002ae8 	.word	0x20002ae8

08002e80 <isStabalized>:

void isStabalized()  // will take a few samples of the waters pH and TDS to determine if the solution has stabilized. If stabilized returns one else 0
{		// get the current system time sets global variables sTime and sDate in RTC_driver.c
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0

	end_time_seconds = 0;
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <isStabalized+0xa8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
	prev_smallest_ph = smallest_value_pH;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <isStabalized+0xac>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <isStabalized+0xb0>)
 8002e94:	e9c1 2300 	strd	r2, r3, [r1]
	prev_smallest_TDS = smallest_value_TDS;
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <isStabalized+0xb4>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	4926      	ldr	r1, [pc, #152]	; (8002f38 <isStabalized+0xb8>)
 8002ea0:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_TDS = largest_value_TDS;
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <isStabalized+0xbc>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	4925      	ldr	r1, [pc, #148]	; (8002f40 <isStabalized+0xc0>)
 8002eac:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_pH = largest_value_pH;
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <isStabalized+0xc4>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	4924      	ldr	r1, [pc, #144]	; (8002f48 <isStabalized+0xc8>)
 8002eb8:	e9c1 2300 	strd	r2, r3, [r1]

	if(getSensorValues() == 'n') return;
 8002ebc:	f002 fbd2 	bl	8005664 <getSensorValues>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b6e      	cmp	r3, #110	; 0x6e
 8002ec4:	f000 84b0 	beq.w	8003828 <isStabalized+0x9a8>


	smallest_value_TDS = 10000;							   // set smallest values to value much higher than expected
 8002ec8:	491a      	ldr	r1, [pc, #104]	; (8002f34 <isStabalized+0xb4>)
 8002eca:	a315      	add	r3, pc, #84	; (adr r3, 8002f20 <isStabalized+0xa0>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	e9c1 2300 	strd	r2, r3, [r1]
	largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 8002ed4:	4919      	ldr	r1, [pc, #100]	; (8002f3c <isStabalized+0xbc>)
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
	smallest_value_pH = 100;
 8002ee2:	4912      	ldr	r1, [pc, #72]	; (8002f2c <isStabalized+0xac>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <isStabalized+0xcc>)
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
    largest_value_pH = 0;
 8002eee:	4915      	ldr	r1, [pc, #84]	; (8002f44 <isStabalized+0xc4>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]


    average_pH = 0;
 8002efc:	4914      	ldr	r1, [pc, #80]	; (8002f50 <isStabalized+0xd0>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]
    average_TDS = 0;
 8002f0a:	4912      	ldr	r1, [pc, #72]	; (8002f54 <isStabalized+0xd4>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<num_sensor_samples-1;i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e0fa      	b.n	8003114 <isStabalized+0x294>
 8002f1e:	bf00      	nop
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40c38800 	.word	0x40c38800
 8002f28:	20004074 	.word	0x20004074
 8002f2c:	20000078 	.word	0x20000078
 8002f30:	20001818 	.word	0x20001818
 8002f34:	20000070 	.word	0x20000070
 8002f38:	20001820 	.word	0x20001820
 8002f3c:	20003ff8 	.word	0x20003ff8
 8002f40:	20004010 	.word	0x20004010
 8002f44:	20004000 	.word	0x20004000
 8002f48:	20004008 	.word	0x20004008
 8002f4c:	40590000 	.word	0x40590000
 8002f50:	20003dc8 	.word	0x20003dc8
 8002f54:	20003dd0 	.word	0x20003dd0
	{
		if(sample_array_TDS[i] > largest_value_TDS  && sample_array_TDS[i] != 0)  largest_value_TDS  = sample_array_TDS[i];	// find largest and smallest values in our data
 8002f58:	4aa7      	ldr	r2, [pc, #668]	; (80031f8 <isStabalized+0x378>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f64:	4ba5      	ldr	r3, [pc, #660]	; (80031fc <isStabalized+0x37c>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fd8f 	bl	8000a8c <__aeabi_dcmpgt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <isStabalized+0x124>
 8002f74:	4aa0      	ldr	r2, [pc, #640]	; (80031f8 <isStabalized+0x378>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f7fd fd58 	bl	8000a3c <__aeabi_dcmpeq>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <isStabalized+0x124>
 8002f92:	4a99      	ldr	r2, [pc, #612]	; (80031f8 <isStabalized+0x378>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	4997      	ldr	r1, [pc, #604]	; (80031fc <isStabalized+0x37c>)
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_TDS[i] < smallest_value_TDS && sample_array_TDS[i] != 0) smallest_value_TDS = sample_array_TDS[i];
 8002fa4:	4a94      	ldr	r2, [pc, #592]	; (80031f8 <isStabalized+0x378>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb0:	4b93      	ldr	r3, [pc, #588]	; (8003200 <isStabalized+0x380>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fd4b 	bl	8000a50 <__aeabi_dcmplt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <isStabalized+0x170>
 8002fc0:	4a8d      	ldr	r2, [pc, #564]	; (80031f8 <isStabalized+0x378>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f7fd fd32 	bl	8000a3c <__aeabi_dcmpeq>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <isStabalized+0x170>
 8002fde:	4a86      	ldr	r2, [pc, #536]	; (80031f8 <isStabalized+0x378>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	4985      	ldr	r1, [pc, #532]	; (8003200 <isStabalized+0x380>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  > largest_value_pH && sample_array_pH[i] != 0) 	 largest_value_pH   = sample_array_pH[i];
 8002ff0:	4a84      	ldr	r2, [pc, #528]	; (8003204 <isStabalized+0x384>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ffc:	4b82      	ldr	r3, [pc, #520]	; (8003208 <isStabalized+0x388>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fd43 	bl	8000a8c <__aeabi_dcmpgt>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <isStabalized+0x1bc>
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <isStabalized+0x384>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	f7fd fd0c 	bl	8000a3c <__aeabi_dcmpeq>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <isStabalized+0x1bc>
 800302a:	4a76      	ldr	r2, [pc, #472]	; (8003204 <isStabalized+0x384>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	4974      	ldr	r1, [pc, #464]	; (8003208 <isStabalized+0x388>)
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  < smallest_value_pH && sample_array_pH[i] != 0)   smallest_value_pH  = sample_array_pH[i];
 800303c:	4a71      	ldr	r2, [pc, #452]	; (8003204 <isStabalized+0x384>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <isStabalized+0x38c>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fcff 	bl	8000a50 <__aeabi_dcmplt>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <isStabalized+0x208>
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <isStabalized+0x384>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f7fd fce6 	bl	8000a3c <__aeabi_dcmpeq>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <isStabalized+0x208>
 8003076:	4a63      	ldr	r2, [pc, #396]	; (8003204 <isStabalized+0x384>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	4962      	ldr	r1, [pc, #392]	; (800320c <isStabalized+0x38c>)
 8003084:	e9c1 2300 	strd	r2, r3, [r1]
		if( sample_array_TDS[i] != 0 && sample_array_pH[i] != 0)
 8003088:	4a5b      	ldr	r2, [pc, #364]	; (80031f8 <isStabalized+0x378>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	f7fd fcce 	bl	8000a3c <__aeabi_dcmpeq>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d133      	bne.n	800310e <isStabalized+0x28e>
 80030a6:	4a57      	ldr	r2, [pc, #348]	; (8003204 <isStabalized+0x384>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f7fd fcbf 	bl	8000a3c <__aeabi_dcmpeq>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d124      	bne.n	800310e <isStabalized+0x28e>
		{
			average_pH  += sample_array_pH[i];
 80030c4:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <isStabalized+0x384>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d0:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <isStabalized+0x390>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd f893 	bl	8000200 <__adddf3>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	494c      	ldr	r1, [pc, #304]	; (8003210 <isStabalized+0x390>)
 80030e0:	e9c1 2300 	strd	r2, r3, [r1]
			average_TDS += sample_array_TDS[i];
 80030e4:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <isStabalized+0x378>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f0:	4b48      	ldr	r3, [pc, #288]	; (8003214 <isStabalized+0x394>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f7fd f883 	bl	8000200 <__adddf3>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4945      	ldr	r1, [pc, #276]	; (8003214 <isStabalized+0x394>)
 8003100:	e9c1 2300 	strd	r2, r3, [r1]
			sample_index1++;
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <isStabalized+0x398>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a43      	ldr	r2, [pc, #268]	; (8003218 <isStabalized+0x398>)
 800310c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<num_sensor_samples-1;i++)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3301      	adds	r3, #1
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <isStabalized+0x39c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	f6ff af1b 	blt.w	8002f58 <isStabalized+0xd8>
		}
	}

	TDS_range = largest_value_TDS - smallest_value_TDS; // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <isStabalized+0x37c>)
 8003124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <isStabalized+0x380>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd f865 	bl	80001fc <__aeabi_dsub>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	493a      	ldr	r1, [pc, #232]	; (8003220 <isStabalized+0x3a0>)
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
	pH_range  = largest_value_pH  - smallest_value_pH;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <isStabalized+0x388>)
 800313e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <isStabalized+0x38c>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd f858 	bl	80001fc <__aeabi_dsub>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4934      	ldr	r1, [pc, #208]	; (8003224 <isStabalized+0x3a4>)
 8003152:	e9c1 2300 	strd	r2, r3, [r1]

	historic_TDS_max = 0;
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <isStabalized+0x3a8>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9c1 2300 	strd	r2, r3, [r1]
	historic_TDS_min = 100000;
 8003164:	4931      	ldr	r1, [pc, #196]	; (800322c <isStabalized+0x3ac>)
 8003166:	a322      	add	r3, pc, #136	; (adr r3, 80031f0 <isStabalized+0x370>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_max  = 0;
 8003170:	492f      	ldr	r1, [pc, #188]	; (8003230 <isStabalized+0x3b0>)
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_min  = 100000;
 800317e:	492d      	ldr	r1, [pc, #180]	; (8003234 <isStabalized+0x3b4>)
 8003180:	a31b      	add	r3, pc, #108	; (adr r3, 80031f0 <isStabalized+0x370>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	e9c1 2300 	strd	r2, r3, [r1]

	average_pH  = average_pH/(sample_index1);
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <isStabalized+0x390>)
 800318c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <isStabalized+0x398>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f97f 	bl	8000498 <__aeabi_i2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd fb0d 	bl	80007c0 <__aeabi_ddiv>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4919      	ldr	r1, [pc, #100]	; (8003210 <isStabalized+0x390>)
 80031ac:	e9c1 2300 	strd	r2, r3, [r1]
 	average_TDS = average_TDS/(sample_index1);
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <isStabalized+0x394>)
 80031b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <isStabalized+0x398>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f96c 	bl	8000498 <__aeabi_i2d>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd fafa 	bl	80007c0 <__aeabi_ddiv>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4910      	ldr	r1, [pc, #64]	; (8003214 <isStabalized+0x394>)
 80031d2:	e9c1 2300 	strd	r2, r3, [r1]
	sample_index1 = 0;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <isStabalized+0x398>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
	if(historic_sample_index < number_historic_samples)
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <isStabalized+0x3b8>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <isStabalized+0x3bc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	da6d      	bge.n	80032c4 <isStabalized+0x444>
 80031e8:	e02a      	b.n	8003240 <isStabalized+0x3c0>
 80031ea:	bf00      	nop
 80031ec:	f3af 8000 	nop.w
 80031f0:	00000000 	.word	0x00000000
 80031f4:	40f86a00 	.word	0x40f86a00
 80031f8:	20003e18 	.word	0x20003e18
 80031fc:	20003ff8 	.word	0x20003ff8
 8003200:	20000070 	.word	0x20000070
 8003204:	20003f08 	.word	0x20003f08
 8003208:	20004000 	.word	0x20004000
 800320c:	20000078 	.word	0x20000078
 8003210:	20003dc8 	.word	0x20003dc8
 8003214:	20003dd0 	.word	0x20003dd0
 8003218:	2000407c 	.word	0x2000407c
 800321c:	20000080 	.word	0x20000080
 8003220:	20004018 	.word	0x20004018
 8003224:	20004020 	.word	0x20004020
 8003228:	20003de8 	.word	0x20003de8
 800322c:	20003e00 	.word	0x20003e00
 8003230:	20003df0 	.word	0x20003df0
 8003234:	20003df8 	.word	0x20003df8
 8003238:	20004088 	.word	0x20004088
 800323c:	20000088 	.word	0x20000088
	{
		historic_largest_pH[historic_sample_index]   = largest_value_pH;
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <isStabalized+0x4f0>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <isStabalized+0x4f4>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	484b      	ldr	r0, [pc, #300]	; (8003378 <isStabalized+0x4f8>)
 800324c:	00c9      	lsls	r1, r1, #3
 800324e:	4401      	add	r1, r0
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[historic_sample_index]  = smallest_value_pH;
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <isStabalized+0x4f0>)
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <isStabalized+0x4fc>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	4848      	ldr	r0, [pc, #288]	; (8003380 <isStabalized+0x500>)
 8003260:	00c9      	lsls	r1, r1, #3
 8003262:	4401      	add	r1, r0
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[historic_sample_index]  = largest_value_TDS;
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <isStabalized+0x4f0>)
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <isStabalized+0x504>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	4845      	ldr	r0, [pc, #276]	; (8003388 <isStabalized+0x508>)
 8003274:	00c9      	lsls	r1, r1, #3
 8003276:	4401      	add	r1, r0
 8003278:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[historic_sample_index] = smallest_value_TDS;
 800327c:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <isStabalized+0x4f0>)
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <isStabalized+0x50c>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	4842      	ldr	r0, [pc, #264]	; (8003390 <isStabalized+0x510>)
 8003288:	00c9      	lsls	r1, r1, #3
 800328a:	4401      	add	r1, r0
 800328c:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH[historic_sample_index]   = average_pH;
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <isStabalized+0x4f0>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <isStabalized+0x514>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	483f      	ldr	r0, [pc, #252]	; (8003398 <isStabalized+0x518>)
 800329c:	00c9      	lsls	r1, r1, #3
 800329e:	4401      	add	r1, r0
 80032a0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS[historic_sample_index]  = average_TDS;
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <isStabalized+0x4f0>)
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <isStabalized+0x51c>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	483c      	ldr	r0, [pc, #240]	; (80033a0 <isStabalized+0x520>)
 80032b0:	00c9      	lsls	r1, r1, #3
 80032b2:	4401      	add	r1, r0
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_sample_index++;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <isStabalized+0x4f0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <isStabalized+0x4f0>)
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e004      	b.n	80032ce <isStabalized+0x44e>
	}
	else
	{
		resetStabilityVars();
 80032c4:	f7ff fd66 	bl	8002d94 <resetStabilityVars>
		run_again = 2;
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <isStabalized+0x524>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
	}

	if(historic_sample_index > 20)
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <isStabalized+0x4f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b14      	cmp	r3, #20
 80032d4:	f340 81a7 	ble.w	8003626 <isStabalized+0x7a6>
	{
		historic_average_pH_min = 1000;
 80032d8:	4933      	ldr	r1, [pc, #204]	; (80033a8 <isStabalized+0x528>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <isStabalized+0x52c>)
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_max = 0;
 80032e4:	4932      	ldr	r1, [pc, #200]	; (80033b0 <isStabalized+0x530>)
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_min = 100000;
 80032f2:	4930      	ldr	r1, [pc, #192]	; (80033b4 <isStabalized+0x534>)
 80032f4:	a31c      	add	r3, pc, #112	; (adr r3, 8003368 <isStabalized+0x4e8>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_max = 0;
 80032fe:	492e      	ldr	r1, [pc, #184]	; (80033b8 <isStabalized+0x538>)
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_TDS = 100000;							   // set smallest values to value much higher than expected
 800330c:	491f      	ldr	r1, [pc, #124]	; (800338c <isStabalized+0x50c>)
 800330e:	a316      	add	r3, pc, #88	; (adr r3, 8003368 <isStabalized+0x4e8>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 8003318:	491a      	ldr	r1, [pc, #104]	; (8003384 <isStabalized+0x504>)
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_pH = 100;
 8003326:	4915      	ldr	r1, [pc, #84]	; (800337c <isStabalized+0x4fc>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <isStabalized+0x53c>)
 800332e:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_pH = 0;
 8003332:	4910      	ldr	r1, [pc, #64]	; (8003374 <isStabalized+0x4f4>)
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_TDS = 0;
 8003340:	491f      	ldr	r1, [pc, #124]	; (80033c0 <isStabalized+0x540>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_ph = 0;
 800334e:	491d      	ldr	r1, [pc, #116]	; (80033c4 <isStabalized+0x544>)
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <isStabalized+0x4f0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3b14      	subs	r3, #20
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	e125      	b.n	80035b2 <isStabalized+0x732>
 8003366:	bf00      	nop
 8003368:	00000000 	.word	0x00000000
 800336c:	40f86a00 	.word	0x40f86a00
 8003370:	20004088 	.word	0x20004088
 8003374:	20004000 	.word	0x20004000
 8003378:	20001828 	.word	0x20001828
 800337c:	20000078 	.word	0x20000078
 8003380:	20001e68 	.word	0x20001e68
 8003384:	20003ff8 	.word	0x20003ff8
 8003388:	200024a8 	.word	0x200024a8
 800338c:	20000070 	.word	0x20000070
 8003390:	20002ae8 	.word	0x20002ae8
 8003394:	20003dc8 	.word	0x20003dc8
 8003398:	20003128 	.word	0x20003128
 800339c:	20003dd0 	.word	0x20003dd0
 80033a0:	20003768 	.word	0x20003768
 80033a4:	2000008c 	.word	0x2000008c
 80033a8:	20000060 	.word	0x20000060
 80033ac:	408f4000 	.word	0x408f4000
 80033b0:	20003dd8 	.word	0x20003dd8
 80033b4:	20000068 	.word	0x20000068
 80033b8:	20003de0 	.word	0x20003de0
 80033bc:	40590000 	.word	0x40590000
 80033c0:	20003e08 	.word	0x20003e08
 80033c4:	20003e10 	.word	0x20003e10
		{
			if(historic_largest_TDS[k]  > historic_TDS_max)   		historic_TDS_max 		  = historic_largest_TDS[k];	// find largest and smallest valuesin our data
 80033c8:	4a9b      	ldr	r2, [pc, #620]	; (8003638 <isStabalized+0x7b8>)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <isStabalized+0x7bc>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd fb57 	bl	8000a8c <__aeabi_dcmpgt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <isStabalized+0x576>
 80033e4:	4a94      	ldr	r2, [pc, #592]	; (8003638 <isStabalized+0x7b8>)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	4992      	ldr	r1, [pc, #584]	; (800363c <isStabalized+0x7bc>)
 80033f2:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_TDS[k] < historic_TDS_min)  		historic_TDS_min		  = historic_smallest_TDS[k];
 80033f6:	4a92      	ldr	r2, [pc, #584]	; (8003640 <isStabalized+0x7c0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003402:	4b90      	ldr	r3, [pc, #576]	; (8003644 <isStabalized+0x7c4>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fd fb22 	bl	8000a50 <__aeabi_dcmplt>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <isStabalized+0x5a4>
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <isStabalized+0x7c0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	4989      	ldr	r1, [pc, #548]	; (8003644 <isStabalized+0x7c4>)
 8003420:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_largest_pH[k]   > historic_pH_max )     	historic_pH_max  		  = historic_largest_pH[k];
 8003424:	4a88      	ldr	r2, [pc, #544]	; (8003648 <isStabalized+0x7c8>)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <isStabalized+0x7cc>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fd fb29 	bl	8000a8c <__aeabi_dcmpgt>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <isStabalized+0x5d2>
 8003440:	4a81      	ldr	r2, [pc, #516]	; (8003648 <isStabalized+0x7c8>)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	497f      	ldr	r1, [pc, #508]	; (800364c <isStabalized+0x7cc>)
 800344e:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_pH[k]  < historic_pH_min )    		historic_pH_min  		  = historic_smallest_pH[k];
 8003452:	4a7f      	ldr	r2, [pc, #508]	; (8003650 <isStabalized+0x7d0>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800345e:	4b7d      	ldr	r3, [pc, #500]	; (8003654 <isStabalized+0x7d4>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd faf4 	bl	8000a50 <__aeabi_dcmplt>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <isStabalized+0x600>
 800346e:	4a78      	ldr	r2, [pc, #480]	; (8003650 <isStabalized+0x7d0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	4976      	ldr	r1, [pc, #472]	; (8003654 <isStabalized+0x7d4>)
 800347c:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   < historic_average_pH_min)  historic_average_pH_min   = historic_average_pH[k];
 8003480:	4a75      	ldr	r2, [pc, #468]	; (8003658 <isStabalized+0x7d8>)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <isStabalized+0x7dc>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd fadd 	bl	8000a50 <__aeabi_dcmplt>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <isStabalized+0x62e>
 800349c:	4a6e      	ldr	r2, [pc, #440]	; (8003658 <isStabalized+0x7d8>)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	496c      	ldr	r1, [pc, #432]	; (800365c <isStabalized+0x7dc>)
 80034aa:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   > historic_average_pH_max)  historic_average_pH_max   = historic_average_pH[k];
 80034ae:	4a6a      	ldr	r2, [pc, #424]	; (8003658 <isStabalized+0x7d8>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ba:	4b69      	ldr	r3, [pc, #420]	; (8003660 <isStabalized+0x7e0>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd fae4 	bl	8000a8c <__aeabi_dcmpgt>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <isStabalized+0x65c>
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <isStabalized+0x7d8>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	4962      	ldr	r1, [pc, #392]	; (8003660 <isStabalized+0x7e0>)
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  < historic_average_TDS_min) historic_average_TDS_min  = historic_average_TDS[k];
 80034dc:	4a61      	ldr	r2, [pc, #388]	; (8003664 <isStabalized+0x7e4>)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e8:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <isStabalized+0x7e8>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd faaf 	bl	8000a50 <__aeabi_dcmplt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <isStabalized+0x68a>
 80034f8:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <isStabalized+0x7e4>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	4958      	ldr	r1, [pc, #352]	; (8003668 <isStabalized+0x7e8>)
 8003506:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  > historic_average_TDS_max) historic_average_TDS_max  = historic_average_TDS[k];
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <isStabalized+0x7e4>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003516:	4b55      	ldr	r3, [pc, #340]	; (800366c <isStabalized+0x7ec>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd fab6 	bl	8000a8c <__aeabi_dcmpgt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <isStabalized+0x6b8>
 8003526:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <isStabalized+0x7e4>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	494e      	ldr	r1, [pc, #312]	; (800366c <isStabalized+0x7ec>)
 8003534:	e9c1 2300 	strd	r2, r3, [r1]

			slope_factor_average_TDS += (historic_average_TDS[k]-historic_average_TDS[k-1]);
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <isStabalized+0x7e4>)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	4a46      	ldr	r2, [pc, #280]	; (8003664 <isStabalized+0x7e4>)
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fc fe53 	bl	80001fc <__aeabi_dsub>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <isStabalized+0x7f0>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc fe4c 	bl	8000200 <__adddf3>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4940      	ldr	r1, [pc, #256]	; (8003670 <isStabalized+0x7f0>)
 800356e:	e9c1 2300 	strd	r2, r3, [r1]
			slope_factor_average_ph  += (historic_average_pH[k]-historic_average_pH[k-1]);
 8003572:	4a39      	ldr	r2, [pc, #228]	; (8003658 <isStabalized+0x7d8>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	4a35      	ldr	r2, [pc, #212]	; (8003658 <isStabalized+0x7d8>)
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fc fe36 	bl	80001fc <__aeabi_dsub>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <isStabalized+0x7f4>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fc fe2f 	bl	8000200 <__adddf3>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4933      	ldr	r1, [pc, #204]	; (8003674 <isStabalized+0x7f4>)
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <isStabalized+0x7f8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f6ff af05 	blt.w	80033c8 <isStabalized+0x548>
		}
		historic_range_pH  = historic_pH_max  - historic_pH_min;
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <isStabalized+0x7cc>)
 80035c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <isStabalized+0x7d4>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fc fe17 	bl	80001fc <__aeabi_dsub>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	492a      	ldr	r1, [pc, #168]	; (800367c <isStabalized+0x7fc>)
 80035d4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_range_TDS = historic_TDS_max - historic_TDS_min;
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <isStabalized+0x7bc>)
 80035da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <isStabalized+0x7c4>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc fe0a 	bl	80001fc <__aeabi_dsub>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4924      	ldr	r1, [pc, #144]	; (8003680 <isStabalized+0x800>)
 80035ee:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_range  = historic_average_pH_max  - historic_average_pH_min;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <isStabalized+0x7e0>)
 80035f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <isStabalized+0x7dc>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc fdfd 	bl	80001fc <__aeabi_dsub>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	491f      	ldr	r1, [pc, #124]	; (8003684 <isStabalized+0x804>)
 8003608:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_range = historic_average_TDS_max - historic_average_TDS_min;
 800360c:	4b17      	ldr	r3, [pc, #92]	; (800366c <isStabalized+0x7ec>)
 800360e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <isStabalized+0x7e8>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fdf0 	bl	80001fc <__aeabi_dsub>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4919      	ldr	r1, [pc, #100]	; (8003688 <isStabalized+0x808>)
 8003622:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(run_again != 2 && ( slope_factor_average_TDS > 1.5 ||  slope_factor_average_TDS < -1.5 || slope_factor_average_ph > 0.04 || slope_factor_average_ph < -0.04 || historic_sample_index <= 20 || TDS_range > 10.5 || pH_range > 0.25 || historic_average_pH_range > 0.05 || historic_average_pH_range < -0.05  || historic_range_pH > 0.30 || historic_range_pH < -0.30 || historic_range_TDS > 11 || historic_range_TDS < -11 || historic_average_TDS_range > 5.0 || historic_average_TDS_range < -5.0))
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <isStabalized+0x80c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b02      	cmp	r3, #2
 800362c:	f000 80d9 	beq.w	80037e2 <isStabalized+0x962>
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <isStabalized+0x7f0>)
 8003632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003636:	e02b      	b.n	8003690 <isStabalized+0x810>
 8003638:	200024a8 	.word	0x200024a8
 800363c:	20003de8 	.word	0x20003de8
 8003640:	20002ae8 	.word	0x20002ae8
 8003644:	20003e00 	.word	0x20003e00
 8003648:	20001828 	.word	0x20001828
 800364c:	20003df0 	.word	0x20003df0
 8003650:	20001e68 	.word	0x20001e68
 8003654:	20003df8 	.word	0x20003df8
 8003658:	20003128 	.word	0x20003128
 800365c:	20000060 	.word	0x20000060
 8003660:	20003dd8 	.word	0x20003dd8
 8003664:	20003768 	.word	0x20003768
 8003668:	20000068 	.word	0x20000068
 800366c:	20003de0 	.word	0x20003de0
 8003670:	20003e08 	.word	0x20003e08
 8003674:	20003e10 	.word	0x20003e10
 8003678:	20004088 	.word	0x20004088
 800367c:	20003db8 	.word	0x20003db8
 8003680:	20003dc0 	.word	0x20003dc0
 8003684:	20003da8 	.word	0x20003da8
 8003688:	20003db0 	.word	0x20003db0
 800368c:	2000008c 	.word	0x2000008c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b72      	ldr	r3, [pc, #456]	; (8003860 <isStabalized+0x9e0>)
 8003696:	f7fd f9f9 	bl	8000a8c <__aeabi_dcmpgt>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 8094 	bne.w	80037ca <isStabalized+0x94a>
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <isStabalized+0x9e4>)
 80036a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <isStabalized+0x9e8>)
 80036ae:	f7fd f9cf 	bl	8000a50 <__aeabi_dcmplt>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 8088 	bne.w	80037ca <isStabalized+0x94a>
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <isStabalized+0x9ec>)
 80036bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c0:	a35b      	add	r3, pc, #364	; (adr r3, 8003830 <isStabalized+0x9b0>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fd f9e1 	bl	8000a8c <__aeabi_dcmpgt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d17c      	bne.n	80037ca <isStabalized+0x94a>
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <isStabalized+0x9ec>)
 80036d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d6:	a358      	add	r3, pc, #352	; (adr r3, 8003838 <isStabalized+0x9b8>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fd f9b8 	bl	8000a50 <__aeabi_dcmplt>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d171      	bne.n	80037ca <isStabalized+0x94a>
 80036e6:	4b62      	ldr	r3, [pc, #392]	; (8003870 <isStabalized+0x9f0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b14      	cmp	r3, #20
 80036ec:	dd6d      	ble.n	80037ca <isStabalized+0x94a>
 80036ee:	4b61      	ldr	r3, [pc, #388]	; (8003874 <isStabalized+0x9f4>)
 80036f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <isStabalized+0x9f8>)
 80036fa:	f7fd f9c7 	bl	8000a8c <__aeabi_dcmpgt>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d162      	bne.n	80037ca <isStabalized+0x94a>
 8003704:	4b5d      	ldr	r3, [pc, #372]	; (800387c <isStabalized+0x9fc>)
 8003706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	4b5c      	ldr	r3, [pc, #368]	; (8003880 <isStabalized+0xa00>)
 8003710:	f7fd f9bc 	bl	8000a8c <__aeabi_dcmpgt>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d157      	bne.n	80037ca <isStabalized+0x94a>
 800371a:	4b5a      	ldr	r3, [pc, #360]	; (8003884 <isStabalized+0xa04>)
 800371c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003720:	a347      	add	r3, pc, #284	; (adr r3, 8003840 <isStabalized+0x9c0>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fd f9b1 	bl	8000a8c <__aeabi_dcmpgt>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14c      	bne.n	80037ca <isStabalized+0x94a>
 8003730:	4b54      	ldr	r3, [pc, #336]	; (8003884 <isStabalized+0xa04>)
 8003732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003736:	a344      	add	r3, pc, #272	; (adr r3, 8003848 <isStabalized+0x9c8>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fd f988 	bl	8000a50 <__aeabi_dcmplt>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d141      	bne.n	80037ca <isStabalized+0x94a>
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <isStabalized+0xa08>)
 8003748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374c:	a340      	add	r3, pc, #256	; (adr r3, 8003850 <isStabalized+0x9d0>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fd f99b 	bl	8000a8c <__aeabi_dcmpgt>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d136      	bne.n	80037ca <isStabalized+0x94a>
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <isStabalized+0xa08>)
 800375e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003762:	a33d      	add	r3, pc, #244	; (adr r3, 8003858 <isStabalized+0x9d8>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fd f972 	bl	8000a50 <__aeabi_dcmplt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12b      	bne.n	80037ca <isStabalized+0x94a>
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <isStabalized+0xa0c>)
 8003774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <isStabalized+0xa10>)
 800377e:	f7fd f985 	bl	8000a8c <__aeabi_dcmpgt>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d120      	bne.n	80037ca <isStabalized+0x94a>
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <isStabalized+0xa0c>)
 800378a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <isStabalized+0xa14>)
 8003794:	f7fd f95c 	bl	8000a50 <__aeabi_dcmplt>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <isStabalized+0x94a>
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <isStabalized+0xa18>)
 80037a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b3c      	ldr	r3, [pc, #240]	; (800389c <isStabalized+0xa1c>)
 80037aa:	f7fd f96f 	bl	8000a8c <__aeabi_dcmpgt>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <isStabalized+0x94a>
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <isStabalized+0xa18>)
 80037b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <isStabalized+0xa20>)
 80037c0:	f7fd f946 	bl	8000a50 <__aeabi_dcmplt>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <isStabalized+0x962>
	{
 		valid = 0;
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <isStabalized+0xa24>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 		recheck_count++;
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <isStabalized+0xa28>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a34      	ldr	r2, [pc, #208]	; (80038a8 <isStabalized+0xa28>)
 80037d8:	6013      	str	r3, [r2, #0]
 		run_again = 2; 				// if the ph or TDS values are still changing check again, or the smallest value is at the beginning of the array, or the largest value is at the end of the array
 80037da:	4b34      	ldr	r3, [pc, #208]	; (80038ac <isStabalized+0xa2c>)
 80037dc:	2202      	movs	r2, #2
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e012      	b.n	8003808 <isStabalized+0x988>
	}
	else if(run_again == 1)		    // we are stabilized however, the system could still be changing so we need to check how many times we re-sampled the water if its > 1 check until its 1
 80037e2:	4b32      	ldr	r3, [pc, #200]	; (80038ac <isStabalized+0xa2c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10e      	bne.n	8003808 <isStabalized+0x988>
	{
		run_again = 0; 				// set run again to 0(no) however, if our validity is not high enough we will set run_again to 2(yes)
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <isStabalized+0xa2c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
		valid++;
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <isStabalized+0xa24>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <isStabalized+0xa24>)
 80037f8:	6013      	str	r3, [r2, #0]
		if(valid < 10) run_again = 2;			// if we have not completed three valid runs in a row re-run
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <isStabalized+0xa24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	dc02      	bgt.n	8003808 <isStabalized+0x988>
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <isStabalized+0xa2c>)
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
	}
	if(run_again == 1) run_again = 0;
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <isStabalized+0xa2c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d103      	bne.n	8003818 <isStabalized+0x998>
 8003810:	4b26      	ldr	r3, [pc, #152]	; (80038ac <isStabalized+0xa2c>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e008      	b.n	800382a <isStabalized+0x9aa>
	else if (run_again == 2) run_again = 1;
 8003818:	4b24      	ldr	r3, [pc, #144]	; (80038ac <isStabalized+0xa2c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d104      	bne.n	800382a <isStabalized+0x9aa>
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <isStabalized+0xa2c>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e000      	b.n	800382a <isStabalized+0x9aa>
	if(getSensorValues() == 'n') return;
 8003828:	bf00      	nop
}
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bdb0      	pop	{r4, r5, r7, pc}
 8003830:	47ae147b 	.word	0x47ae147b
 8003834:	3fa47ae1 	.word	0x3fa47ae1
 8003838:	47ae147b 	.word	0x47ae147b
 800383c:	bfa47ae1 	.word	0xbfa47ae1
 8003840:	9999999a 	.word	0x9999999a
 8003844:	3fa99999 	.word	0x3fa99999
 8003848:	9999999a 	.word	0x9999999a
 800384c:	bfa99999 	.word	0xbfa99999
 8003850:	33333333 	.word	0x33333333
 8003854:	3fd33333 	.word	0x3fd33333
 8003858:	33333333 	.word	0x33333333
 800385c:	bfd33333 	.word	0xbfd33333
 8003860:	3ff80000 	.word	0x3ff80000
 8003864:	20003e08 	.word	0x20003e08
 8003868:	bff80000 	.word	0xbff80000
 800386c:	20003e10 	.word	0x20003e10
 8003870:	20004088 	.word	0x20004088
 8003874:	20004018 	.word	0x20004018
 8003878:	40250000 	.word	0x40250000
 800387c:	20004020 	.word	0x20004020
 8003880:	3fd00000 	.word	0x3fd00000
 8003884:	20003da8 	.word	0x20003da8
 8003888:	20003db8 	.word	0x20003db8
 800388c:	20003dc0 	.word	0x20003dc0
 8003890:	40260000 	.word	0x40260000
 8003894:	c0260000 	.word	0xc0260000
 8003898:	20003db0 	.word	0x20003db0
 800389c:	40140000 	.word	0x40140000
 80038a0:	c0140000 	.word	0xc0140000
 80038a4:	20004084 	.word	0x20004084
 80038a8:	20004080 	.word	0x20004080
 80038ac:	2000008c 	.word	0x2000008c

080038b0 <waitForWaterToStabilize>:

int waitForWaterToStabilize() // Returns the total time in seconds
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	getTime();
 80038b4:	f7fd fcba 	bl	800122c <getTime>
	eq_start_time_sec = sTime.Seconds + sTime.Minutes*60;
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038ba:	789b      	ldrb	r3, [r3, #2]
 80038bc:	4619      	mov	r1, r3
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	4a20      	ldr	r2, [pc, #128]	; (8003950 <waitForWaterToStabilize+0xa0>)
 80038d0:	6013      	str	r3, [r2, #0]

	while(run_again > 0)
 80038d2:	e005      	b.n	80038e0 <waitForWaterToStabilize+0x30>
	{
		isStabalized();// if we are not stabilized wait until we are
 80038d4:	f7ff fad4 	bl	8002e80 <isStabalized>
		osDelay(2000);
 80038d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038dc:	f00f ff01 	bl	80136e2 <osDelay>
	while(run_again > 0)
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <waitForWaterToStabilize+0xa4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	dcf5      	bgt.n	80038d4 <waitForWaterToStabilize+0x24>
	}
	getTime();
 80038e8:	f7fd fca0 	bl	800122c <getTime>
	eq_end_time_sec = sTime.Seconds + sTime.Minutes*60;
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <waitForWaterToStabilize+0x9c>)
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <waitForWaterToStabilize+0xa8>)
 8003904:	6013      	str	r3, [r2, #0]
	if(eq_start_time_sec > eq_end_time_sec) total_time_seconds = (3600-eq_start_time_sec)+eq_end_time_sec;	// if seconds rolled over we cannot just subtract since we will get a negative
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <waitForWaterToStabilize+0xa0>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <waitForWaterToStabilize+0xa8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	dd09      	ble.n	8003926 <waitForWaterToStabilize+0x76>
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <waitForWaterToStabilize+0xa0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f5c3 6261 	rsb	r2, r3, #3600	; 0xe10
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <waitForWaterToStabilize+0xa8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <waitForWaterToStabilize+0xac>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e006      	b.n	8003934 <waitForWaterToStabilize+0x84>
	else total_time_seconds = eq_end_time_sec-eq_start_time_sec;	// else we did not roll over so total seconds is end time - start time
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <waitForWaterToStabilize+0xa8>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <waitForWaterToStabilize+0xa0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <waitForWaterToStabilize+0xac>)
 8003932:	6013      	str	r3, [r2, #0]

	stability_value = 0;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <waitForWaterToStabilize+0xb0>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
	recheck_count = 0;
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <waitForWaterToStabilize+0xb4>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
	resetStabilityVars();
 8003940:	f7ff fa28 	bl	8002d94 <resetStabilityVars>
	return (total_time_seconds);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <waitForWaterToStabilize+0xac>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20005458 	.word	0x20005458
 8003950:	20004070 	.word	0x20004070
 8003954:	2000008c 	.word	0x2000008c
 8003958:	2000406c 	.word	0x2000406c
 800395c:	20004078 	.word	0x20004078
 8003960:	20000084 	.word	0x20000084
 8003964:	20004080 	.word	0x20004080

08003968 <waterTempControl>:

void waterTempControl()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	temp_up = 'n';
 800396c:	4b74      	ldr	r3, [pc, #464]	; (8003b40 <waterTempControl+0x1d8>)
 800396e:	226e      	movs	r2, #110	; 0x6e
 8003970:	701a      	strb	r2, [r3, #0]
	temp_down = 'n';
 8003972:	4b74      	ldr	r3, [pc, #464]	; (8003b44 <waterTempControl+0x1dc>)
 8003974:	226e      	movs	r2, #110	; 0x6e
 8003976:	701a      	strb	r2, [r3, #0]

	if(setting_water_temp == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8003978:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <waterTempControl+0x1e0>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b6e      	cmp	r3, #110	; 0x6e
 800397e:	d145      	bne.n	8003a0c <waterTempControl+0xa4>
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_check) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003980:	4b72      	ldr	r3, [pc, #456]	; (8003b4c <waterTempControl+0x1e4>)
 8003982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003986:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <waterTempControl+0x1e8>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fd f87e 	bl	8000a8c <__aeabi_dcmpgt>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <waterTempControl+0x5e>
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <waterTempControl+0x1e4>)
 8003998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399c:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <waterTempControl+0x1ec>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fc2b 	bl	80001fc <__aeabi_dsub>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4b68      	ldr	r3, [pc, #416]	; (8003b50 <waterTempControl+0x1e8>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fd f86a 	bl	8000a8c <__aeabi_dcmpgt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <waterTempControl+0x5e>
 80039be:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <waterTempControl+0x1dc>)
 80039c0:	2279      	movs	r2, #121	; 0x79
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e067      	b.n	8003a96 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_check) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <waterTempControl+0x1e4>)
 80039c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039cc:	4b60      	ldr	r3, [pc, #384]	; (8003b50 <waterTempControl+0x1e8>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fd f83d 	bl	8000a50 <__aeabi_dcmplt>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05c      	beq.n	8003a96 <waterTempControl+0x12e>
 80039dc:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <waterTempControl+0x1e4>)
 80039de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <waterTempControl+0x1ec>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fc0a 	bl	8000200 <__adddf3>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	4b56      	ldr	r3, [pc, #344]	; (8003b50 <waterTempControl+0x1e8>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fd f829 	bl	8000a50 <__aeabi_dcmplt>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d048      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a04:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <waterTempControl+0x1d8>)
 8003a06:	2279      	movs	r2, #121	; 0x79
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e044      	b.n	8003a96 <waterTempControl+0x12e>
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_set) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <waterTempControl+0x1e4>)
 8003a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a12:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <waterTempControl+0x1e8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fd f838 	bl	8000a8c <__aeabi_dcmpgt>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <waterTempControl+0xea>
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <waterTempControl+0x1e4>)
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <waterTempControl+0x1f0>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fbe5 	bl	80001fc <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <waterTempControl+0x1e8>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fd f824 	bl	8000a8c <__aeabi_dcmpgt>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <waterTempControl+0xea>
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <waterTempControl+0x1dc>)
 8003a4c:	2279      	movs	r2, #121	; 0x79
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e021      	b.n	8003a96 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_set) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <waterTempControl+0x1e4>)
 8003a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <waterTempControl+0x1e8>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fff7 	bl	8000a50 <__aeabi_dcmplt>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <waterTempControl+0x1e4>)
 8003a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <waterTempControl+0x1f0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbc4 	bl	8000200 <__adddf3>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <waterTempControl+0x1e8>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc ffe3 	bl	8000a50 <__aeabi_dcmplt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <waterTempControl+0x12e>
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <waterTempControl+0x1d8>)
 8003a92:	2279      	movs	r2, #121	; 0x79
 8003a94:	701a      	strb	r2, [r3, #0]
	}

	if((temp_up == 'y' || temp_down == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <waterTempControl+0x1d8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b79      	cmp	r3, #121	; 0x79
 8003a9c:	d003      	beq.n	8003aa6 <waterTempControl+0x13e>
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <waterTempControl+0x1dc>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b79      	cmp	r3, #121	; 0x79
 8003aa4:	d103      	bne.n	8003aae <waterTempControl+0x146>
	{
		setting_water_temp = 'y';
 8003aa6:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <waterTempControl+0x1e0>)
 8003aa8:	2279      	movs	r2, #121	; 0x79
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e002      	b.n	8003ab4 <waterTempControl+0x14c>
	}
	else setting_water_temp = 'n';
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <waterTempControl+0x1e0>)
 8003ab0:	226e      	movs	r2, #110	; 0x6e
 8003ab2:	701a      	strb	r2, [r3, #0]

	if(temp_up == 'y' && heat_on == 'n')
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <waterTempControl+0x1d8>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b79      	cmp	r3, #121	; 0x79
 8003aba:	d111      	bne.n	8003ae0 <waterTempControl+0x178>
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <waterTempControl+0x1f4>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ac2:	d10d      	bne.n	8003ae0 <waterTempControl+0x178>
	{
		heatOn();	// if we need heat the water turn on the heater
 8003ac4:	f7fd fcf2 	bl	80014ac <heatOn>
		setFanSpeed(3.5,3.5,2.5);
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <waterTempControl+0x1f8>)
 8003aca:	4926      	ldr	r1, [pc, #152]	; (8003b64 <waterTempControl+0x1fc>)
 8003acc:	4825      	ldr	r0, [pc, #148]	; (8003b64 <waterTempControl+0x1fc>)
 8003ace:	f7fd fca9 	bl	8001424 <setFanSpeed>
		heat_on = 'y';
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <waterTempControl+0x1f4>)
 8003ad4:	2279      	movs	r2, #121	; 0x79
 8003ad6:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <waterTempControl+0x200>)
 8003ada:	226e      	movs	r2, #110	; 0x6e
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e02c      	b.n	8003b3a <waterTempControl+0x1d2>
	}
	else if(temp_down == 'y' && cool_on == 'n')
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <waterTempControl+0x1dc>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b79      	cmp	r3, #121	; 0x79
 8003ae6:	d111      	bne.n	8003b0c <waterTempControl+0x1a4>
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <waterTempControl+0x200>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b6e      	cmp	r3, #110	; 0x6e
 8003aee:	d10d      	bne.n	8003b0c <waterTempControl+0x1a4>
	{
		coolOn();	// if we need cool the water turn on the cooler
 8003af0:	f7fd fd04 	bl	80014fc <coolOn>
		setFanSpeed(3.5,3.5,2.5);
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <waterTempControl+0x1f8>)
 8003af6:	491b      	ldr	r1, [pc, #108]	; (8003b64 <waterTempControl+0x1fc>)
 8003af8:	481a      	ldr	r0, [pc, #104]	; (8003b64 <waterTempControl+0x1fc>)
 8003afa:	f7fd fc93 	bl	8001424 <setFanSpeed>
		cool_on = 'y';
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <waterTempControl+0x200>)
 8003b00:	2279      	movs	r2, #121	; 0x79
 8003b02:	701a      	strb	r2, [r3, #0]
		heat_on = 'n';
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <waterTempControl+0x1f4>)
 8003b06:	226e      	movs	r2, #110	; 0x6e
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e016      	b.n	8003b3a <waterTempControl+0x1d2>
	}
	else if(temp_up == 'n' && temp_down == 'n')
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <waterTempControl+0x1d8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b6e      	cmp	r3, #110	; 0x6e
 8003b12:	d112      	bne.n	8003b3a <waterTempControl+0x1d2>
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <waterTempControl+0x1dc>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b6e      	cmp	r3, #110	; 0x6e
 8003b1a:	d10e      	bne.n	8003b3a <waterTempControl+0x1d2>
	{
		heat_on = 'n';
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <waterTempControl+0x1f4>)
 8003b1e:	226e      	movs	r2, #110	; 0x6e
 8003b20:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <waterTempControl+0x200>)
 8003b24:	226e      	movs	r2, #110	; 0x6e
 8003b26:	701a      	strb	r2, [r3, #0]
		heatCoolOff();
 8003b28:	f7fd fcd6 	bl	80014d8 <heatCoolOff>
		setFanSpeed(3.5,3.5,0);
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	490c      	ldr	r1, [pc, #48]	; (8003b64 <waterTempControl+0x1fc>)
 8003b32:	480c      	ldr	r0, [pc, #48]	; (8003b64 <waterTempControl+0x1fc>)
 8003b34:	f7fd fc76 	bl	8001424 <setFanSpeed>
	}
}
 8003b38:	e7ff      	b.n	8003b3a <waterTempControl+0x1d2>
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000209 	.word	0x20000209
 8003b44:	2000543c 	.word	0x2000543c
 8003b48:	20000202 	.word	0x20000202
 8003b4c:	20001810 	.word	0x20001810
 8003b50:	20000028 	.word	0x20000028
 8003b54:	20000038 	.word	0x20000038
 8003b58:	20000030 	.word	0x20000030
 8003b5c:	20000200 	.word	0x20000200
 8003b60:	40200000 	.word	0x40200000
 8003b64:	40600000 	.word	0x40600000
 8003b68:	20000201 	.word	0x20000201

08003b6c <systemControl>:

void systemControl()
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af02      	add	r7, sp, #8

	if(run_once == 'n')
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <systemControl+0x5c>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b6e      	cmp	r3, #110	; 0x6e
 8003b78:	d11a      	bne.n	8003bb0 <systemControl+0x44>
	{

		run_once = 'y';
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <systemControl+0x5c>)
 8003b7c:	2279      	movs	r2, #121	; 0x79
 8003b7e:	701a      	strb	r2, [r3, #0]
		fanOn();
 8003b80:	f7fd fbb0 	bl	80012e4 <fanOn>
		setFanSpeed(3.5,3.5,0);
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	4910      	ldr	r1, [pc, #64]	; (8003bcc <systemControl+0x60>)
 8003b8a:	4810      	ldr	r0, [pc, #64]	; (8003bcc <systemControl+0x60>)
 8003b8c:	f7fd fc4a 	bl	8001424 <setFanSpeed>
		//doseWater(100,100,100);
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8003b90:	2300      	movs	r3, #0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2309      	movs	r3, #9
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	2108      	movs	r1, #8
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fd fb58 	bl	8001254 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8003ba4:	230a      	movs	r3, #10
 8003ba6:	2213      	movs	r2, #19
 8003ba8:	2109      	movs	r1, #9
 8003baa:	2013      	movs	r0, #19
 8003bac:	f000 f810 	bl	8003bd0 <setLightCyle>
		//doseWater(100,100,100);
	}

	if(getSensorValues() == 'n') return;
 8003bb0:	f001 fd58 	bl	8005664 <getSensorValues>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b6e      	cmp	r3, #110	; 0x6e
 8003bb8:	d002      	beq.n	8003bc0 <systemControl+0x54>
	//heatOn();
	balancePhAndNutrient();
 8003bba:	f7fe fd45 	bl	8002648 <balancePhAndNutrient>
 8003bbe:	e000      	b.n	8003bc2 <systemControl+0x56>
	if(getSensorValues() == 'n') return;
 8003bc0:	bf00      	nop
}
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000203 	.word	0x20000203
 8003bcc:	40600000 	.word	0x40600000

08003bd0 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8003bd0:	b490      	push	{r4, r7}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	71fb      	strb	r3, [r7, #7]
 8003be2:	4603      	mov	r3, r0
 8003be4:	71bb      	strb	r3, [r7, #6]
 8003be6:	460b      	mov	r3, r1
 8003be8:	717b      	strb	r3, [r7, #5]
 8003bea:	4613      	mov	r3, r2
 8003bec:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <setLightCyle+0x40>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8003bf4:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <setLightCyle+0x40>)
 8003bf6:	79bb      	ldrb	r3, [r7, #6]
 8003bf8:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <setLightCyle+0x44>)
 8003bfc:	797b      	ldrb	r3, [r7, #5]
 8003bfe:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <setLightCyle+0x44>)
 8003c02:	793b      	ldrb	r3, [r7, #4]
 8003c04:	7053      	strb	r3, [r2, #1]
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc90      	pop	{r4, r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20005440 	.word	0x20005440
 8003c14:	2000544c 	.word	0x2000544c

08003c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c1e:	f002 fb09 	bl	8006234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c22:	f000 f84d 	bl	8003cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c26:	f000 fb7f 	bl	8004328 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003c2a:	f000 f99b 	bl	8003f64 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003c2e:	f000 fa45 	bl	80040bc <MX_TIM4_Init>
  MX_TIM10_Init();
 8003c32:	f000 fa91 	bl	8004158 <MX_TIM10_Init>
  MX_RTC_Init();
 8003c36:	f000 f903 	bl	8003e40 <MX_RTC_Init>
  MX_TIM12_Init();
 8003c3a:	f000 fadb 	bl	80041f4 <MX_TIM12_Init>
  MX_FATFS_Init();
 8003c3e:	f009 fb27 	bl	800d290 <MX_FATFS_Init>
  MX_DMA_Init();
 8003c42:	f000 fb3b 	bl	80042bc <MX_DMA_Init>
  MX_ADC3_Init();
 8003c46:	f000 f89b 	bl	8003d80 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8003c4a:	f000 fb0d 	bl	8004268 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
 // (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
//HAL_DMA_RegisterCallback(&hdma_adc2,HAL_DMA_XFER_CPLT_CB_ID,&DMATransferComplete);
HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&nutrient_ph_values, 80);
 8003c4e:	2250      	movs	r2, #80	; 0x50
 8003c50:	4915      	ldr	r1, [pc, #84]	; (8003ca8 <main+0x90>)
 8003c52:	4816      	ldr	r0, [pc, #88]	; (8003cac <main+0x94>)
 8003c54:	f002 fcd4 	bl	8006600 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityNormal, 0, 3100, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <main+0x98>)
 8003c5a:	f107 041c 	add.w	r4, r7, #28
 8003c5e:	461d      	mov	r5, r3
 8003c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00f fce9 	bl	801364a <osThreadCreate>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <main+0x9c>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebAppCom */
  osThreadStaticDef(WebAppCom, StartWebAppCom, osPriorityNormal, 0, 1024, myTask02Buffer, &myTask02ControlBlock);
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <main+0xa0>)
 8003c80:	463c      	mov	r4, r7
 8003c82:	461d      	mov	r5, r3
 8003c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebAppComHandle = osThreadCreate(osThread(WebAppCom), NULL);
 8003c90:	463b      	mov	r3, r7
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00f fcd8 	bl	801364a <osThreadCreate>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <main+0xa4>)
 8003c9e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003ca0:	f00f fccc 	bl	801363c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <main+0x8c>
 8003ca6:	bf00      	nop
 8003ca8:	20005468 	.word	0x20005468
 8003cac:	20009938 	.word	0x20009938
 8003cb0:	0801b278 	.word	0x0801b278
 8003cb4:	20009638 	.word	0x20009638
 8003cb8:	0801b294 	.word	0x0801b294
 8003cbc:	2000c9f0 	.word	0x2000c9f0

08003cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b096      	sub	sp, #88	; 0x58
 8003cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cca:	2230      	movs	r2, #48	; 0x30
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f012 ff36 	bl	8016b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d02:	2302      	movs	r3, #2
 8003d04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d06:	2300      	movs	r3, #0
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003d0e:	23d8      	movs	r3, #216	; 0xd8
 8003d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003d12:	2306      	movs	r3, #6
 8003d14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003d16:	2309      	movs	r3, #9
 8003d18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 fc44 	bl	80095ac <HAL_RCC_OscConfig>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003d2a:	f000 fbf5 	bl	8004518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d2e:	230f      	movs	r3, #15
 8003d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d32:	2302      	movs	r3, #2
 8003d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 fe7d 	bl	8009a4c <HAL_RCC_ClockConfig>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003d58:	f000 fbde 	bl	8004518 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d66:	463b      	mov	r3, r7
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f006 f88f 	bl	8009e8c <HAL_RCCEx_PeriphCLKConfig>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003d74:	f000 fbd0 	bl	8004518 <Error_Handler>
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3758      	adds	r7, #88	; 0x58
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d86:	463b      	mov	r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003d94:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <MX_ADC3_Init+0xb8>)
 8003d96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003d98:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <MX_ADC3_Init+0xbc>)
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dcc:	2202      	movs	r2, #2
 8003dce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003dd0:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003dde:	4815      	ldr	r0, [pc, #84]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003de0:	f002 fa8a 	bl	80062f8 <HAL_ADC_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8003dea:	f000 fb95 	bl	8004518 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003dee:	230f      	movs	r3, #15
 8003df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003df6:	2307      	movs	r3, #7
 8003df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003e00:	f002 fcf8 	bl	80067f4 <HAL_ADC_ConfigChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8003e0a:	f000 fb85 	bl	8004518 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003e0e:	230e      	movs	r3, #14
 8003e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e12:	2302      	movs	r3, #2
 8003e14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e16:	463b      	mov	r3, r7
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4806      	ldr	r0, [pc, #24]	; (8003e34 <MX_ADC3_Init+0xb4>)
 8003e1c:	f002 fcea 	bl	80067f4 <HAL_ADC_ConfigChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8003e26:	f000 fb77 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20009938 	.word	0x20009938
 8003e38:	40012200 	.word	0x40012200
 8003e3c:	0f000001 	.word	0x0f000001

08003e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8003e52:	2300      	movs	r3, #0
 8003e54:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	615a      	str	r2, [r3, #20]
 8003e66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e68:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e6a:	4a3d      	ldr	r2, [pc, #244]	; (8003f60 <MX_RTC_Init+0x120>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e76:	227f      	movs	r2, #127	; 0x7f
 8003e78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e7c:	22ff      	movs	r2, #255	; 0xff
 8003e7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e80:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e86:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e8c:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e92:	4832      	ldr	r0, [pc, #200]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003e94:	f006 f8f0 	bl	800a078 <HAL_RTC_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8003e9e:	f000 fb3b 	bl	8004518 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4825      	ldr	r0, [pc, #148]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003ec6:	f006 f961 	bl	800a18c <HAL_RTC_SetTime>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8003ed0:	f000 fb22 	bl	8004518 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003eec:	f107 0320 	add.w	r3, r7, #32
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4819      	ldr	r0, [pc, #100]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003ef6:	f006 fa51 	bl	800a39c <HAL_RTC_SetDate>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8003f00:	f000 fb0a 	bl	8004518 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003f20:	2301      	movs	r3, #1
 8003f22:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8003f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f28:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	480a      	ldr	r0, [pc, #40]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003f32:	f006 fb22 	bl	800a57a <HAL_RTC_SetAlarm>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8003f3c:	f000 faec 	bl	8004518 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_RTC_Init+0x11c>)
 8003f46:	f006 fcac 	bl	800a8a2 <HAL_RTCEx_SetWakeUpTimer>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8003f50:	f000 fae2 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f54:	bf00      	nop
 8003f56:	3730      	adds	r7, #48	; 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000c9f4 	.word	0x2000c9f4
 8003f60:	40002800 	.word	0x40002800

08003f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b096      	sub	sp, #88	; 0x58
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	615a      	str	r2, [r3, #20]
 8003f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	2220      	movs	r2, #32
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f012 fdcf 	bl	8016b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fa2:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fa4:	4a44      	ldr	r2, [pc, #272]	; (80040b8 <MX_TIM1_Init+0x154>)
 8003fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fce:	4839      	ldr	r0, [pc, #228]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fd0:	f006 fcfb 	bl	800a9ca <HAL_TIM_Base_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003fda:	f000 fa9d 	bl	8004518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4832      	ldr	r0, [pc, #200]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003fec:	f007 f890 	bl	800b110 <HAL_TIM_ConfigClockSource>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003ff6:	f000 fa8f 	bl	8004518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ffa:	482e      	ldr	r0, [pc, #184]	; (80040b4 <MX_TIM1_Init+0x150>)
 8003ffc:	f006 fda2 	bl	800ab44 <HAL_TIM_PWM_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004006:	f000 fa87 	bl	8004518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004016:	4619      	mov	r1, r3
 8004018:	4826      	ldr	r0, [pc, #152]	; (80040b4 <MX_TIM1_Init+0x150>)
 800401a:	f007 fc65 	bl	800b8e8 <HAL_TIMEx_MasterConfigSynchronization>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004024:	f000 fa78 	bl	8004518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004028:	2360      	movs	r3, #96	; 0x60
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004034:	2300      	movs	r3, #0
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004038:	2304      	movs	r3, #4
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004040:	2300      	movs	r3, #0
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004048:	2200      	movs	r2, #0
 800404a:	4619      	mov	r1, r3
 800404c:	4819      	ldr	r0, [pc, #100]	; (80040b4 <MX_TIM1_Init+0x150>)
 800404e:	f006 ffa1 	bl	800af94 <HAL_TIM_PWM_ConfigChannel>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004058:	f000 fa5e 	bl	8004518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004060:	2208      	movs	r2, #8
 8004062:	4619      	mov	r1, r3
 8004064:	4813      	ldr	r0, [pc, #76]	; (80040b4 <MX_TIM1_Init+0x150>)
 8004066:	f006 ff95 	bl	800af94 <HAL_TIM_PWM_ConfigChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004070:	f000 fa52 	bl	8004518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800408c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4807      	ldr	r0, [pc, #28]	; (80040b4 <MX_TIM1_Init+0x150>)
 8004098:	f007 fca0 	bl	800b9dc <HAL_TIMEx_ConfigBreakDeadTime>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80040a2:	f000 fa39 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040a6:	4803      	ldr	r0, [pc, #12]	; (80040b4 <MX_TIM1_Init+0x150>)
 80040a8:	f001 fcfc 	bl	8005aa4 <HAL_TIM_MspPostInit>

}
 80040ac:	bf00      	nop
 80040ae:	3758      	adds	r7, #88	; 0x58
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	2000ca28 	.word	0x2000ca28
 80040b8:	40010000 	.word	0x40010000

080040bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d0:	463b      	mov	r3, r7
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <MX_TIM4_Init+0x94>)
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <MX_TIM4_Init+0x98>)
 80040dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <MX_TIM4_Init+0x94>)
 80040e0:	2223      	movs	r2, #35	; 0x23
 80040e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <MX_TIM4_Init+0x94>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <MX_TIM4_Init+0x94>)
 80040ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MX_TIM4_Init+0x94>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <MX_TIM4_Init+0x94>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80040fe:	4814      	ldr	r0, [pc, #80]	; (8004150 <MX_TIM4_Init+0x94>)
 8004100:	f006 fc63 	bl	800a9ca <HAL_TIM_Base_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800410a:	f000 fa05 	bl	8004518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004114:	f107 0308 	add.w	r3, r7, #8
 8004118:	4619      	mov	r1, r3
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <MX_TIM4_Init+0x94>)
 800411c:	f006 fff8 	bl	800b110 <HAL_TIM_ConfigClockSource>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004126:	f000 f9f7 	bl	8004518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004132:	463b      	mov	r3, r7
 8004134:	4619      	mov	r1, r3
 8004136:	4806      	ldr	r0, [pc, #24]	; (8004150 <MX_TIM4_Init+0x94>)
 8004138:	f007 fbd6 	bl	800b8e8 <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004142:	f000 f9e9 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200097a4 	.word	0x200097a4
 8004154:	40000800 	.word	0x40000800

08004158 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
 800416c:	615a      	str	r2, [r3, #20]
 800416e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004170:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <MX_TIM10_Init+0x94>)
 8004172:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <MX_TIM10_Init+0x98>)
 8004174:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <MX_TIM10_Init+0x94>)
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <MX_TIM10_Init+0x94>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <MX_TIM10_Init+0x94>)
 8004184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004188:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <MX_TIM10_Init+0x94>)
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <MX_TIM10_Init+0x94>)
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004196:	4815      	ldr	r0, [pc, #84]	; (80041ec <MX_TIM10_Init+0x94>)
 8004198:	f006 fc17 	bl	800a9ca <HAL_TIM_Base_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80041a2:	f000 f9b9 	bl	8004518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <MX_TIM10_Init+0x94>)
 80041a8:	f006 fccc 	bl	800ab44 <HAL_TIM_PWM_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80041b2:	f000 f9b1 	bl	8004518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b6:	2360      	movs	r3, #96	; 0x60
 80041b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	2200      	movs	r2, #0
 80041ca:	4619      	mov	r1, r3
 80041cc:	4807      	ldr	r0, [pc, #28]	; (80041ec <MX_TIM10_Init+0x94>)
 80041ce:	f006 fee1 	bl	800af94 <HAL_TIM_PWM_ConfigChannel>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80041d8:	f000 f99e 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <MX_TIM10_Init+0x94>)
 80041de:	f001 fc61 	bl	8005aa4 <HAL_TIM_MspPostInit>

}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20009890 	.word	0x20009890
 80041f0:	40014400 	.word	0x40014400

080041f4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fa:	463b      	mov	r3, r7
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <MX_TIM12_Init+0x6c>)
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <MX_TIM12_Init+0x70>)
 800420a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <MX_TIM12_Init+0x6c>)
 800420e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004212:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <MX_TIM12_Init+0x6c>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <MX_TIM12_Init+0x6c>)
 800421c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8004220:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <MX_TIM12_Init+0x6c>)
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <MX_TIM12_Init+0x6c>)
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800422e:	480c      	ldr	r0, [pc, #48]	; (8004260 <MX_TIM12_Init+0x6c>)
 8004230:	f006 fbcb 	bl	800a9ca <HAL_TIM_Base_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800423a:	f000 f96d 	bl	8004518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800423e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004242:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004244:	463b      	mov	r3, r7
 8004246:	4619      	mov	r1, r3
 8004248:	4805      	ldr	r0, [pc, #20]	; (8004260 <MX_TIM12_Init+0x6c>)
 800424a:	f006 ff61 	bl	800b110 <HAL_TIM_ConfigClockSource>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004254:	f000 f960 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2000ca70 	.word	0x2000ca70
 8004264:	40001800 	.word	0x40001800

08004268 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <MX_USART3_UART_Init+0x50>)
 8004270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004274:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004288:	2200      	movs	r2, #0
 800428a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800428e:	220c      	movs	r2, #12
 8004290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 800429a:	2200      	movs	r2, #0
 800429c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_USART3_UART_Init+0x4c>)
 80042a0:	f007 fbff 	bl	800baa2 <HAL_UART_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042aa:	f000 f935 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	2000984c 	.word	0x2000984c
 80042b8:	40004800 	.word	0x40004800

080042bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <MX_DMA_Init+0x68>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <MX_DMA_Init+0x68>)
 80042cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <MX_DMA_Init+0x68>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <MX_DMA_Init+0x68>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <MX_DMA_Init+0x68>)
 80042e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <MX_DMA_Init+0x68>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80042fa:	2200      	movs	r2, #0
 80042fc:	2105      	movs	r1, #5
 80042fe:	200c      	movs	r0, #12
 8004300:	f002 fddf 	bl	8006ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004304:	200c      	movs	r0, #12
 8004306:	f002 fdf8 	bl	8006efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2105      	movs	r1, #5
 800430e:	2038      	movs	r0, #56	; 0x38
 8004310:	f002 fdd7 	bl	8006ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004314:	2038      	movs	r0, #56	; 0x38
 8004316:	f002 fdf0 	bl	8006efa <HAL_NVIC_EnableIRQ>

}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	; 0x30
 800432c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432e:	f107 031c 	add.w	r3, r7, #28
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
 800433c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <MX_GPIO_Init+0x174>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a55      	ldr	r2, [pc, #340]	; (800449c <MX_GPIO_Init+0x174>)
 8004348:	f043 0310 	orr.w	r3, r3, #16
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b53      	ldr	r3, [pc, #332]	; (800449c <MX_GPIO_Init+0x174>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	4b4f      	ldr	r3, [pc, #316]	; (800449c <MX_GPIO_Init+0x174>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a4e      	ldr	r2, [pc, #312]	; (800449c <MX_GPIO_Init+0x174>)
 8004364:	f043 0320 	orr.w	r3, r3, #32
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <MX_GPIO_Init+0x174>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	4b48      	ldr	r3, [pc, #288]	; (800449c <MX_GPIO_Init+0x174>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	4a47      	ldr	r2, [pc, #284]	; (800449c <MX_GPIO_Init+0x174>)
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	6313      	str	r3, [r2, #48]	; 0x30
 8004386:	4b45      	ldr	r3, [pc, #276]	; (800449c <MX_GPIO_Init+0x174>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <MX_GPIO_Init+0x174>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a40      	ldr	r2, [pc, #256]	; (800449c <MX_GPIO_Init+0x174>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <MX_GPIO_Init+0x174>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	4b3a      	ldr	r3, [pc, #232]	; (800449c <MX_GPIO_Init+0x174>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a39      	ldr	r2, [pc, #228]	; (800449c <MX_GPIO_Init+0x174>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <MX_GPIO_Init+0x174>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <MX_GPIO_Init+0x174>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a32      	ldr	r2, [pc, #200]	; (800449c <MX_GPIO_Init+0x174>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b30      	ldr	r3, [pc, #192]	; (800449c <MX_GPIO_Init+0x174>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80043e6:	2201      	movs	r2, #1
 80043e8:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 80043ec:	482c      	ldr	r0, [pc, #176]	; (80044a0 <MX_GPIO_Init+0x178>)
 80043ee:	f003 fb46 	bl	8007a7e <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin|grow_light_Pin
                          |water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2104      	movs	r1, #4
 80043f6:	482b      	ldr	r0, [pc, #172]	; (80044a4 <MX_GPIO_Init+0x17c>)
 80043f8:	f003 fb41 	bl	8007a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	4829      	ldr	r0, [pc, #164]	; (80044a8 <MX_GPIO_Init+0x180>)
 8004402:	f003 fb3c 	bl	8007a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8004406:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800440a:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440c:	2301      	movs	r3, #1
 800440e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004414:	2303      	movs	r3, #3
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004418:	f107 031c 	add.w	r3, r7, #28
 800441c:	4619      	mov	r1, r3
 800441e:	4820      	ldr	r0, [pc, #128]	; (80044a0 <MX_GPIO_Init+0x178>)
 8004420:	f003 f978 	bl	8007714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004424:	2304      	movs	r3, #4
 8004426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004428:	2301      	movs	r3, #1
 800442a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	4619      	mov	r1, r3
 800443a:	481a      	ldr	r0, [pc, #104]	; (80044a4 <MX_GPIO_Init+0x17c>)
 800443c:	f003 f96a 	bl	8007714 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8004440:	2340      	movs	r3, #64	; 0x40
 8004442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004444:	2301      	movs	r3, #1
 8004446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	4619      	mov	r1, r3
 8004456:	4814      	ldr	r0, [pc, #80]	; (80044a8 <MX_GPIO_Init+0x180>)
 8004458:	f003 f95c 	bl	8007714 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 800445c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004462:	2301      	movs	r3, #1
 8004464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446a:	2300      	movs	r3, #0
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	4619      	mov	r1, r3
 8004474:	480a      	ldr	r0, [pc, #40]	; (80044a0 <MX_GPIO_Init+0x178>)
 8004476:	f003 f94d 	bl	8007714 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800447a:	2302      	movs	r3, #2
 800447c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8004486:	f107 031c 	add.w	r3, r7, #28
 800448a:	4619      	mov	r1, r3
 800448c:	4804      	ldr	r0, [pc, #16]	; (80044a0 <MX_GPIO_Init+0x178>)
 800448e:	f003 f941 	bl	8007714 <HAL_GPIO_Init>

}
 8004492:	bf00      	nop
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40020800 	.word	0x40020800
 80044a8:	40020000 	.word	0x40020000

080044ac <HAL_ADC_ConvCpltCallback>:



char retrieved_ADC_values = 'n';
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	retrieved_ADC_values = 'y';
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x18>)
 80044b6:	2279      	movs	r2, #121	; 0x79
 80044b8:	701a      	strb	r2, [r3, #0]
	//water_temp = readWaterTemp();

}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	2000020a 	.word	0x2000020a

080044c8 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80044d0:	f011 feb4 	bl	801623c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 // MX_USB_HOST_Process();
	systemControl();
 80044d4:	f7ff fb4a 	bl	8003b6c <systemControl>
    osDelay(1000);
 80044d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044dc:	f00f f901 	bl	80136e2 <osDelay>
	systemControl();
 80044e0:	e7f8      	b.n	80044d4 <StartBalanceWater+0xc>

080044e2 <StartWebAppCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebAppCom */
void StartWebAppCom(void const * argument)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebAppCom */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f00f f8f9 	bl	80136e2 <osDelay>
 80044f0:	e7fb      	b.n	80044ea <StartWebAppCom+0x8>
	...

080044f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004506:	f001 feb7 	bl	8006278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40001000 	.word	0x40001000

08004518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800451c:	b672      	cpsid	i
}
 800451e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004520:	e7fe      	b.n	8004520 <Error_Handler+0x8>

08004522 <doseWater>:
double nutrient_volume = 0;
char cont_cal_additions_PH_up = 'n',cont_cal_additions_PH_down = 'n',cont_cal_additions_nutrient = 'n';
//int cont_additions = 0; // 0: (first cal run) we need to figure out what cal dosage we need based on the TDS level. 2: (fine tuning the cal dosage) add 0.1ml to pH dose and see if that changed the waters pH enough to calaculate a dose. 3: signifies we are/need to dosing water via calc methods above)

void doseWater(double acid_ml, double base_ml, double nutrient_ml)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800452c:	e9c7 2300 	strd	r2, r3, [r7]
	int ph_down_steps = calc_dose_steps(acid_ml);
 8004530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004534:	f000 fc3c 	bl	8004db0 <calc_dose_steps>
 8004538:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 800453a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800453e:	f000 fc37 	bl	8004db0 <calc_dose_steps>
 8004542:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 8004544:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004548:	f000 fc32 	bl	8004db0 <calc_dose_steps>
 800454c:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f000 fe02 	bl	800515c <step>
}
 8004558:	bf00      	nop
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <calcPhUpDose>:
//max_pH_up_dose = 1.0, max_pH_down_dose = 1.0, max_nutrient_dose = 50
double d  = 0;
double pH_up_ml_per_val_change = 0, pH_down_ml_per_val_change = 0, nutrient_ml_per_val_change = 0;
double calcPhUpDose(double pH_set_val, double TDS_set_val)      // following dose methods return a double in milliliters.
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800456a:	e9c7 2300 	strd	r2, r3, [r7]
	//cont_additions = 0;
	pH_up_volume = (pH_up_ml_per_val_change)*(pH_set_point-pH);
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <calcPhUpDose+0x4c>)
 8004570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <calcPhUpDose+0x50>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fb fe3f 	bl	80001fc <__aeabi_dsub>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <calcPhUpDose+0x54>)
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fb ffee 	bl	800056c <__aeabi_dmul>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4908      	ldr	r1, [pc, #32]	; (80045b8 <calcPhUpDose+0x58>)
 8004596:	e9c1 2300 	strd	r2, r3, [r1]
	return pH_up_volume;
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <calcPhUpDose+0x58>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000020 	.word	0x20000020
 80045b0:	20001808 	.word	0x20001808
 80045b4:	200055d8 	.word	0x200055d8
 80045b8:	200055c0 	.word	0x200055c0

080045bc <calcPhDownDose>:

double calcPhDownDose(double pH_set_val, double TDS_set_val)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80045c6:	e9c7 2300 	strd	r2, r3, [r7]
//cont_additions = 0;
	pH_down_volume = (pH_down_ml_per_val_change)*(pH-pH_set_point);
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <calcPhDownDose+0x4c>)
 80045cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <calcPhDownDose+0x50>)
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f7fb fe11 	bl	80001fc <__aeabi_dsub>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <calcPhDownDose+0x54>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb ffc0 	bl	800056c <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4908      	ldr	r1, [pc, #32]	; (8004614 <calcPhDownDose+0x58>)
 80045f2:	e9c1 2300 	strd	r2, r3, [r1]
	return pH_down_volume;
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <calcPhDownDose+0x58>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20001808 	.word	0x20001808
 800460c:	20000020 	.word	0x20000020
 8004610:	200055e0 	.word	0x200055e0
 8004614:	200055c8 	.word	0x200055c8

08004618 <calcNutrientDose>:

double calcNutrientDose(double pH_set_val, double TDS_set_val)	// calculates nutrient dosage based on how far we are away from the set-point
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004622:	e9c7 2300 	strd	r2, r3, [r7]
	//cont_additions = 0;
	nutrient_volume = (nutrient_ml_per_val_change)*(nutrient_set_point - TDS);
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <calcNutrientDose+0x4c>)
 8004628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <calcNutrientDose+0x50>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb fde3 	bl	80001fc <__aeabi_dsub>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <calcNutrientDose+0x54>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fb ff92 	bl	800056c <__aeabi_dmul>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4908      	ldr	r1, [pc, #32]	; (8004670 <calcNutrientDose+0x58>)
 800464e:	e9c1 2300 	strd	r2, r3, [r1]
	return nutrient_volume;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <calcNutrientDose+0x58>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000018 	.word	0x20000018
 8004668:	20001800 	.word	0x20001800
 800466c:	200055e8 	.word	0x200055e8
 8004670:	200055d0 	.word	0x200055d0
 8004674:	00000000 	.word	0x00000000

08004678 <calibrateDosage>:
double Start_Nutrient = 0;
double pH_up_cal_dosage = 0.05, pH_down_cal_dosage = 0.05, nutrient_up_cal_dosage = 10;
char calibrating = 'n';

char calibrateDosage(char what_to_cal,double Cal_pH, double p_bounds_set, double n_bounds_set)	// goal: Calculate the pH/nutrient change given a set volume. This will allow us to reduce over/undershooting without PID
{
 8004678:	b5b0      	push	{r4, r5, r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af02      	add	r7, sp, #8
 800467e:	4601      	mov	r1, r0
 8004680:	e9c7 2300 	strd	r2, r3, [r7]
 8004684:	460b      	mov	r3, r1
 8004686:	73fb      	strb	r3, [r7, #15]
//	getSensorValues();

	Start_pH = Cal_pH;
 8004688:	498b      	ldr	r1, [pc, #556]	; (80048b8 <calibrateDosage+0x240>)
 800468a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468e:	e9c1 2300 	strd	r2, r3, [r1]
	Start_Nutrient = TDS;
 8004692:	4b8a      	ldr	r3, [pc, #552]	; (80048bc <calibrateDosage+0x244>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	4989      	ldr	r1, [pc, #548]	; (80048c0 <calibrateDosage+0x248>)
 800469a:	e9c1 2300 	strd	r2, r3, [r1]

	// NEED TO ACCOUNT FOR what_to_cal
	if(TDS > 300 && TDS <= 500)// && calibrating == 'y')
 800469e:	4b87      	ldr	r3, [pc, #540]	; (80048bc <calibrateDosage+0x244>)
 80046a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046a4:	a37c      	add	r3, pc, #496	; (adr r3, 8004898 <calibrateDosage+0x220>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f7fc f9ef 	bl	8000a8c <__aeabi_dcmpgt>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d028      	beq.n	8004706 <calibrateDosage+0x8e>
 80046b4:	4b81      	ldr	r3, [pc, #516]	; (80048bc <calibrateDosage+0x244>)
 80046b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <calibrateDosage+0x24c>)
 80046c0:	f7fc f9d0 	bl	8000a64 <__aeabi_dcmple>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01d      	beq.n	8004706 <calibrateDosage+0x8e>
	{
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d10a      	bne.n	80046e6 <calibrateDosage+0x6e>
 80046d0:	4b7d      	ldr	r3, [pc, #500]	; (80048c8 <calibrateDosage+0x250>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b6e      	cmp	r3, #110	; 0x6e
 80046d6:	d106      	bne.n	80046e6 <calibrateDosage+0x6e>
 80046d8:	497c      	ldr	r1, [pc, #496]	; (80048cc <calibrateDosage+0x254>)
 80046da:	a371      	add	r3, pc, #452	; (adr r3, 80048a0 <calibrateDosage+0x228>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	e9c1 2300 	strd	r2, r3, [r1]
 80046e4:	e092      	b.n	800480c <calibrateDosage+0x194>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n')   pH_up_cal_dosage = 0.2;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b75      	cmp	r3, #117	; 0x75
 80046ea:	f040 808f 	bne.w	800480c <calibrateDosage+0x194>
 80046ee:	4b78      	ldr	r3, [pc, #480]	; (80048d0 <calibrateDosage+0x258>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b6e      	cmp	r3, #110	; 0x6e
 80046f4:	f040 808a 	bne.w	800480c <calibrateDosage+0x194>
 80046f8:	4976      	ldr	r1, [pc, #472]	; (80048d4 <calibrateDosage+0x25c>)
 80046fa:	a369      	add	r3, pc, #420	; (adr r3, 80048a0 <calibrateDosage+0x228>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	e9c1 2300 	strd	r2, r3, [r1]
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 8004704:	e082      	b.n	800480c <calibrateDosage+0x194>
	}
	else if(TDS > 500 && TDS < 700) // && calibrating != 'y')
 8004706:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <calibrateDosage+0x244>)
 8004708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <calibrateDosage+0x24c>)
 8004712:	f7fc f9bb 	bl	8000a8c <__aeabi_dcmpgt>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d026      	beq.n	800476a <calibrateDosage+0xf2>
 800471c:	4b67      	ldr	r3, [pc, #412]	; (80048bc <calibrateDosage+0x244>)
 800471e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <calibrateDosage+0x260>)
 8004728:	f7fc f992 	bl	8000a50 <__aeabi_dcmplt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01b      	beq.n	800476a <calibrateDosage+0xf2>
	{
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b64      	cmp	r3, #100	; 0x64
 8004736:	d10a      	bne.n	800474e <calibrateDosage+0xd6>
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <calibrateDosage+0x250>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b6e      	cmp	r3, #110	; 0x6e
 800473e:	d106      	bne.n	800474e <calibrateDosage+0xd6>
 8004740:	4962      	ldr	r1, [pc, #392]	; (80048cc <calibrateDosage+0x254>)
 8004742:	a359      	add	r3, pc, #356	; (adr r3, 80048a8 <calibrateDosage+0x230>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	e9c1 2300 	strd	r2, r3, [r1]
 800474c:	e060      	b.n	8004810 <calibrateDosage+0x198>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n') pH_up_cal_dosage = 0.4;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b75      	cmp	r3, #117	; 0x75
 8004752:	d15d      	bne.n	8004810 <calibrateDosage+0x198>
 8004754:	4b5e      	ldr	r3, [pc, #376]	; (80048d0 <calibrateDosage+0x258>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b6e      	cmp	r3, #110	; 0x6e
 800475a:	d159      	bne.n	8004810 <calibrateDosage+0x198>
 800475c:	495d      	ldr	r1, [pc, #372]	; (80048d4 <calibrateDosage+0x25c>)
 800475e:	a352      	add	r3, pc, #328	; (adr r3, 80048a8 <calibrateDosage+0x230>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	e9c1 2300 	strd	r2, r3, [r1]
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 8004768:	e052      	b.n	8004810 <calibrateDosage+0x198>
	}
	else if(TDS >= 700)//&& calibrating != 'y')
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <calibrateDosage+0x244>)
 800476c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	4b58      	ldr	r3, [pc, #352]	; (80048d8 <calibrateDosage+0x260>)
 8004776:	f7fc f97f 	bl	8000a78 <__aeabi_dcmpge>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01b      	beq.n	80047b8 <calibrateDosage+0x140>
	{
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n')  pH_down_cal_dosage = 0.5;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d10a      	bne.n	800479c <calibrateDosage+0x124>
 8004786:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <calibrateDosage+0x250>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b6e      	cmp	r3, #110	; 0x6e
 800478c:	d106      	bne.n	800479c <calibrateDosage+0x124>
 800478e:	494f      	ldr	r1, [pc, #316]	; (80048cc <calibrateDosage+0x254>)
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <calibrateDosage+0x264>)
 8004796:	e9c1 2300 	strd	r2, r3, [r1]
 800479a:	e03a      	b.n	8004812 <calibrateDosage+0x19a>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n') pH_up_cal_dosage = 0.5;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b75      	cmp	r3, #117	; 0x75
 80047a0:	d137      	bne.n	8004812 <calibrateDosage+0x19a>
 80047a2:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <calibrateDosage+0x258>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b6e      	cmp	r3, #110	; 0x6e
 80047a8:	d133      	bne.n	8004812 <calibrateDosage+0x19a>
 80047aa:	494a      	ldr	r1, [pc, #296]	; (80048d4 <calibrateDosage+0x25c>)
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <calibrateDosage+0x264>)
 80047b2:	e9c1 2300 	strd	r2, r3, [r1]
 80047b6:	e02c      	b.n	8004812 <calibrateDosage+0x19a>
	}
	else  //calibrating != 'n')
	{
		if(what_to_cal == 'd' &&  cont_cal_additions_PH_down == 'n') 	 pH_down_cal_dosage = 0.1;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d10a      	bne.n	80047d4 <calibrateDosage+0x15c>
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <calibrateDosage+0x250>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b6e      	cmp	r3, #110	; 0x6e
 80047c4:	d106      	bne.n	80047d4 <calibrateDosage+0x15c>
 80047c6:	4941      	ldr	r1, [pc, #260]	; (80048cc <calibrateDosage+0x254>)
 80047c8:	a339      	add	r3, pc, #228	; (adr r3, 80048b0 <calibrateDosage+0x238>)
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	e9c1 2300 	strd	r2, r3, [r1]
 80047d2:	e01e      	b.n	8004812 <calibrateDosage+0x19a>
		else if(what_to_cal == 'u' && cont_cal_additions_PH_up == 'n' )  pH_up_cal_dosage = 0.1;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b75      	cmp	r3, #117	; 0x75
 80047d8:	d10a      	bne.n	80047f0 <calibrateDosage+0x178>
 80047da:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <calibrateDosage+0x258>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b6e      	cmp	r3, #110	; 0x6e
 80047e0:	d106      	bne.n	80047f0 <calibrateDosage+0x178>
 80047e2:	493c      	ldr	r1, [pc, #240]	; (80048d4 <calibrateDosage+0x25c>)
 80047e4:	a332      	add	r3, pc, #200	; (adr r3, 80048b0 <calibrateDosage+0x238>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	e9c1 2300 	strd	r2, r3, [r1]
 80047ee:	e010      	b.n	8004812 <calibrateDosage+0x19a>
		else if(what_to_cal == 'n' && cont_cal_additions_nutrient == 'n')nutrient_up_cal_dosage = 5;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b6e      	cmp	r3, #110	; 0x6e
 80047f4:	d10d      	bne.n	8004812 <calibrateDosage+0x19a>
 80047f6:	4b3a      	ldr	r3, [pc, #232]	; (80048e0 <calibrateDosage+0x268>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b6e      	cmp	r3, #110	; 0x6e
 80047fc:	d109      	bne.n	8004812 <calibrateDosage+0x19a>
 80047fe:	4939      	ldr	r1, [pc, #228]	; (80048e4 <calibrateDosage+0x26c>)
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <calibrateDosage+0x270>)
 8004806:	e9c1 2300 	strd	r2, r3, [r1]
 800480a:	e002      	b.n	8004812 <calibrateDosage+0x19a>
		if(		what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.2;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <calibrateDosage+0x19a>
		if(what_to_cal == 'd' && cont_cal_additions_PH_down == 'n') pH_down_cal_dosage = 0.4;
 8004810:	bf00      	nop
	}
	if(what_to_cal == 'u')
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b75      	cmp	r3, #117	; 0x75
 8004816:	d11c      	bne.n	8004852 <calibrateDosage+0x1da>
	{
		doseWater(0,pH_up_cal_dosage,0);// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004818:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <calibrateDosage+0x25c>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	e9cd 0100 	strd	r0, r1, [sp]
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f7ff fe76 	bl	8004522 <doseWater>
		total_pH_up_ml_cal_step += pH_up_cal_dosage;
 8004836:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <calibrateDosage+0x274>)
 8004838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <calibrateDosage+0x25c>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fcdd 	bl	8000200 <__adddf3>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4928      	ldr	r1, [pc, #160]	; (80048ec <calibrateDosage+0x274>)
 800484c:	e9c1 2300 	strd	r2, r3, [r1]
 8004850:	e06f      	b.n	8004932 <calibrateDosage+0x2ba>
	}
	else if(what_to_cal == 'd')
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b64      	cmp	r3, #100	; 0x64
 8004856:	d14d      	bne.n	80048f4 <calibrateDosage+0x27c>
	{
		doseWater(pH_down_cal_dosage,0,0);// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004858:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <calibrateDosage+0x254>)
 800485a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	e9cd 2300 	strd	r2, r3, [sp]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f7ff fe56 	bl	8004522 <doseWater>
		total_pH_down_ml_cal_step += pH_down_cal_dosage;
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <calibrateDosage+0x278>)
 8004878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <calibrateDosage+0x254>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fcbd 	bl	8000200 <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4919      	ldr	r1, [pc, #100]	; (80048f0 <calibrateDosage+0x278>)
 800488c:	e9c1 2300 	strd	r2, r3, [r1]
 8004890:	e04f      	b.n	8004932 <calibrateDosage+0x2ba>
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
 8004898:	00000000 	.word	0x00000000
 800489c:	4072c000 	.word	0x4072c000
 80048a0:	9999999a 	.word	0x9999999a
 80048a4:	3fc99999 	.word	0x3fc99999
 80048a8:	9999999a 	.word	0x9999999a
 80048ac:	3fd99999 	.word	0x3fd99999
 80048b0:	9999999a 	.word	0x9999999a
 80048b4:	3fb99999 	.word	0x3fb99999
 80048b8:	200055f0 	.word	0x200055f0
 80048bc:	20001800 	.word	0x20001800
 80048c0:	200055f8 	.word	0x200055f8
 80048c4:	407f4000 	.word	0x407f4000
 80048c8:	2000020c 	.word	0x2000020c
 80048cc:	20000218 	.word	0x20000218
 80048d0:	2000020b 	.word	0x2000020b
 80048d4:	20000210 	.word	0x20000210
 80048d8:	4085e000 	.word	0x4085e000
 80048dc:	3fe00000 	.word	0x3fe00000
 80048e0:	2000020d 	.word	0x2000020d
 80048e4:	20000220 	.word	0x20000220
 80048e8:	40140000 	.word	0x40140000
 80048ec:	20004038 	.word	0x20004038
 80048f0:	20004040 	.word	0x20004040
	}
	else if(what_to_cal == 'n')
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b6e      	cmp	r3, #110	; 0x6e
 80048f8:	d11b      	bne.n	8004932 <calibrateDosage+0x2ba>
	{
		doseWater(0,0,nutrient_up_cal_dosage);
 80048fa:	4ba5      	ldr	r3, [pc, #660]	; (8004b90 <calibrateDosage+0x518>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	e9cd 2300 	strd	r2, r3, [sp]
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	f04f 0000 	mov.w	r0, #0
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f7ff fe05 	bl	8004522 <doseWater>
		total_nutrient_ml_cal_step += nutrient_up_cal_dosage;
 8004918:	4b9e      	ldr	r3, [pc, #632]	; (8004b94 <calibrateDosage+0x51c>)
 800491a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491e:	4b9c      	ldr	r3, [pc, #624]	; (8004b90 <calibrateDosage+0x518>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fc6c 	bl	8000200 <__adddf3>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4999      	ldr	r1, [pc, #612]	; (8004b94 <calibrateDosage+0x51c>)
 800492e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	waitForWaterToStabilize();
 8004932:	f7fe ffbd 	bl	80038b0 <waitForWaterToStabilize>

	if(what_to_cal == 'u' && (pH+p_bounds_set) > pH_set_point)			   return 'n';
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b75      	cmp	r3, #117	; 0x75
 800493a:	d114      	bne.n	8004966 <calibrateDosage+0x2ee>
 800493c:	4b96      	ldr	r3, [pc, #600]	; (8004b98 <calibrateDosage+0x520>)
 800493e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004946:	f7fb fc5b 	bl	8000200 <__adddf3>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <calibrateDosage+0x524>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fc f898 	bl	8000a8c <__aeabi_dcmpgt>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <calibrateDosage+0x2ee>
 8004962:	236e      	movs	r3, #110	; 0x6e
 8004964:	e161      	b.n	8004c2a <calibrateDosage+0x5b2>
	else if(what_to_cal == 'd' && (pH-p_bounds_set) < pH_set_point) 	   return 'n';
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b64      	cmp	r3, #100	; 0x64
 800496a:	d114      	bne.n	8004996 <calibrateDosage+0x31e>
 800496c:	4b8a      	ldr	r3, [pc, #552]	; (8004b98 <calibrateDosage+0x520>)
 800496e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004976:	f7fb fc41 	bl	80001fc <__aeabi_dsub>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	4b86      	ldr	r3, [pc, #536]	; (8004b9c <calibrateDosage+0x524>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fc f862 	bl	8000a50 <__aeabi_dcmplt>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <calibrateDosage+0x31e>
 8004992:	236e      	movs	r3, #110	; 0x6e
 8004994:	e149      	b.n	8004c2a <calibrateDosage+0x5b2>
	else if(what_to_cal == 'n' && (TDS+n_bounds_set) > nutrient_set_point) return 'n';
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b6e      	cmp	r3, #110	; 0x6e
 800499a:	d114      	bne.n	80049c6 <calibrateDosage+0x34e>
 800499c:	4b80      	ldr	r3, [pc, #512]	; (8004ba0 <calibrateDosage+0x528>)
 800499e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049a6:	f7fb fc2b 	bl	8000200 <__adddf3>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4b7c      	ldr	r3, [pc, #496]	; (8004ba4 <calibrateDosage+0x52c>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fc f868 	bl	8000a8c <__aeabi_dcmpgt>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <calibrateDosage+0x34e>
 80049c2:	236e      	movs	r3, #110	; 0x6e
 80049c4:	e131      	b.n	8004c2a <calibrateDosage+0x5b2>
	// NEED to make sure we did not reach our required pH or nutrient
	else if(what_to_cal == 'u' && pH-Start_pH <= 0.03)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b75      	cmp	r3, #117	; 0x75
 80049ca:	d128      	bne.n	8004a1e <calibrateDosage+0x3a6>
 80049cc:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <calibrateDosage+0x520>)
 80049ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d2:	4b75      	ldr	r3, [pc, #468]	; (8004ba8 <calibrateDosage+0x530>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f7fb fc10 	bl	80001fc <__aeabi_dsub>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	a364      	add	r3, pc, #400	; (adr r3, 8004b78 <calibrateDosage+0x500>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fc f83b 	bl	8000a64 <__aeabi_dcmple>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d014      	beq.n	8004a1e <calibrateDosage+0x3a6>
	{
		cont_cal_additions_PH_up = 'y';
 80049f4:	4b6d      	ldr	r3, [pc, #436]	; (8004bac <calibrateDosage+0x534>)
 80049f6:	2279      	movs	r2, #121	; 0x79
 80049f8:	701a      	strb	r2, [r3, #0]
		calibrating = 'y';
 80049fa:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <calibrateDosage+0x538>)
 80049fc:	2279      	movs	r2, #121	; 0x79
 80049fe:	701a      	strb	r2, [r3, #0]
		pH_up_cal_dosage += 0.1;								// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004a00:	4b6c      	ldr	r3, [pc, #432]	; (8004bb4 <calibrateDosage+0x53c>)
 8004a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a06:	a35e      	add	r3, pc, #376	; (adr r3, 8004b80 <calibrateDosage+0x508>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fbf8 	bl	8000200 <__adddf3>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4967      	ldr	r1, [pc, #412]	; (8004bb4 <calibrateDosage+0x53c>)
 8004a16:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 8004a1a:	236e      	movs	r3, #110	; 0x6e
 8004a1c:	e105      	b.n	8004c2a <calibrateDosage+0x5b2>
	}
	else if(what_to_cal == 'd' && Start_pH-pH <= 0.03)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b64      	cmp	r3, #100	; 0x64
 8004a22:	d128      	bne.n	8004a76 <calibrateDosage+0x3fe>
 8004a24:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <calibrateDosage+0x530>)
 8004a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <calibrateDosage+0x520>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fbe4 	bl	80001fc <__aeabi_dsub>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	a34e      	add	r3, pc, #312	; (adr r3, 8004b78 <calibrateDosage+0x500>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fc f80f 	bl	8000a64 <__aeabi_dcmple>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d014      	beq.n	8004a76 <calibrateDosage+0x3fe>
	{
		cont_cal_additions_PH_down = 'y';
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <calibrateDosage+0x540>)
 8004a4e:	2279      	movs	r2, #121	; 0x79
 8004a50:	701a      	strb	r2, [r3, #0]
		//cont_additions = 2;
		calibrating = 'y';
 8004a52:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <calibrateDosage+0x538>)
 8004a54:	2279      	movs	r2, #121	; 0x79
 8004a56:	701a      	strb	r2, [r3, #0]
		pH_down_cal_dosage += 0.1;	// if we are close to our pH set point dose with a very small amount to not over-dose the water.
 8004a58:	4b58      	ldr	r3, [pc, #352]	; (8004bbc <calibrateDosage+0x544>)
 8004a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a5e:	a348      	add	r3, pc, #288	; (adr r3, 8004b80 <calibrateDosage+0x508>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fbcc 	bl	8000200 <__adddf3>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4953      	ldr	r1, [pc, #332]	; (8004bbc <calibrateDosage+0x544>)
 8004a6e:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 8004a72:	236e      	movs	r3, #110	; 0x6e
 8004a74:	e0d9      	b.n	8004c2a <calibrateDosage+0x5b2>
	}
	else if(what_to_cal == 'n' && TDS-Start_Nutrient < 3 )
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b6e      	cmp	r3, #110	; 0x6e
 8004a7a:	d128      	bne.n	8004ace <calibrateDosage+0x456>
 8004a7c:	4b48      	ldr	r3, [pc, #288]	; (8004ba0 <calibrateDosage+0x528>)
 8004a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a82:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <calibrateDosage+0x548>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fbb8 	bl	80001fc <__aeabi_dsub>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <calibrateDosage+0x54c>)
 8004a9a:	f7fb ffd9 	bl	8000a50 <__aeabi_dcmplt>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d014      	beq.n	8004ace <calibrateDosage+0x456>
	{
		cont_cal_additions_nutrient = 'y';
 8004aa4:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <calibrateDosage+0x550>)
 8004aa6:	2279      	movs	r2, #121	; 0x79
 8004aa8:	701a      	strb	r2, [r3, #0]
		//cont_additions = 2;
		calibrating = 'y';
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <calibrateDosage+0x538>)
 8004aac:	2279      	movs	r2, #121	; 0x79
 8004aae:	701a      	strb	r2, [r3, #0]
		nutrient_up_cal_dosage += 3;
 8004ab0:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <calibrateDosage+0x518>)
 8004ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <calibrateDosage+0x54c>)
 8004abc:	f7fb fba0 	bl	8000200 <__adddf3>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4932      	ldr	r1, [pc, #200]	; (8004b90 <calibrateDosage+0x518>)
 8004ac6:	e9c1 2300 	strd	r2, r3, [r1]
		return 'n';
 8004aca:	236e      	movs	r3, #110	; 0x6e
 8004acc:	e0ad      	b.n	8004c2a <calibrateDosage+0x5b2>
	}
	else if(what_to_cal == 'u')
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b75      	cmp	r3, #117	; 0x75
 8004ad2:	d126      	bne.n	8004b22 <calibrateDosage+0x4aa>
	{
		pH_up_ml_per_val_change  =  (pH_up_cal_dosage/((pH-Start_pH)-0.02)); // constant is used to slightly underestimate the max amount of pH solution we dose so not to overshoot
 8004ad4:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <calibrateDosage+0x53c>)
 8004ad6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ada:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <calibrateDosage+0x520>)
 8004adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <calibrateDosage+0x530>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fb89 	bl	80001fc <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	a325      	add	r3, pc, #148	; (adr r3, 8004b88 <calibrateDosage+0x510>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f7fb fb80 	bl	80001fc <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fe5c 	bl	80007c0 <__aeabi_ddiv>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	492f      	ldr	r1, [pc, #188]	; (8004bcc <calibrateDosage+0x554>)
 8004b0e:	e9c1 2300 	strd	r2, r3, [r1]
		cont_cal_additions_PH_up = 'n';
 8004b12:	4b26      	ldr	r3, [pc, #152]	; (8004bac <calibrateDosage+0x534>)
 8004b14:	226e      	movs	r2, #110	; 0x6e
 8004b16:	701a      	strb	r2, [r3, #0]
		//pH_up_dose_factor    = 90/(pH-Start_pH);
		calibrating = 'n';
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <calibrateDosage+0x538>)
 8004b1a:	226e      	movs	r2, #110	; 0x6e
 8004b1c:	701a      	strb	r2, [r3, #0]
	//	cont_additions = 3;
		return 'y';
 8004b1e:	2379      	movs	r3, #121	; 0x79
 8004b20:	e083      	b.n	8004c2a <calibrateDosage+0x5b2>
	}
	else if(what_to_cal == 'd')
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b64      	cmp	r3, #100	; 0x64
 8004b26:	d155      	bne.n	8004bd4 <calibrateDosage+0x55c>
	{
		cont_cal_additions_PH_down = 'n';
 8004b28:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <calibrateDosage+0x540>)
 8004b2a:	226e      	movs	r2, #110	; 0x6e
 8004b2c:	701a      	strb	r2, [r3, #0]
		pH_down_ml_per_val_change  = (pH_down_cal_dosage/((Start_pH-pH)-0.02));
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <calibrateDosage+0x544>)
 8004b30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b34:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <calibrateDosage+0x530>)
 8004b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3a:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <calibrateDosage+0x520>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fb5c 	bl	80001fc <__aeabi_dsub>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	a30e      	add	r3, pc, #56	; (adr r3, 8004b88 <calibrateDosage+0x510>)
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f7fb fb53 	bl	80001fc <__aeabi_dsub>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fe2f 	bl	80007c0 <__aeabi_ddiv>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	491a      	ldr	r1, [pc, #104]	; (8004bd0 <calibrateDosage+0x558>)
 8004b68:	e9c1 2300 	strd	r2, r3, [r1]
		calibrating = 'n';
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <calibrateDosage+0x538>)
 8004b6e:	226e      	movs	r2, #110	; 0x6e
 8004b70:	701a      	strb	r2, [r3, #0]
		//cont_additions = 3;
		return 'y';
 8004b72:	2379      	movs	r3, #121	; 0x79
 8004b74:	e059      	b.n	8004c2a <calibrateDosage+0x5b2>
 8004b76:	bf00      	nop
 8004b78:	eb851eb8 	.word	0xeb851eb8
 8004b7c:	3f9eb851 	.word	0x3f9eb851
 8004b80:	9999999a 	.word	0x9999999a
 8004b84:	3fb99999 	.word	0x3fb99999
 8004b88:	47ae147b 	.word	0x47ae147b
 8004b8c:	3f947ae1 	.word	0x3f947ae1
 8004b90:	20000220 	.word	0x20000220
 8004b94:	20004048 	.word	0x20004048
 8004b98:	20001808 	.word	0x20001808
 8004b9c:	20000020 	.word	0x20000020
 8004ba0:	20001800 	.word	0x20001800
 8004ba4:	20000018 	.word	0x20000018
 8004ba8:	200055f0 	.word	0x200055f0
 8004bac:	2000020b 	.word	0x2000020b
 8004bb0:	20000228 	.word	0x20000228
 8004bb4:	20000210 	.word	0x20000210
 8004bb8:	2000020c 	.word	0x2000020c
 8004bbc:	20000218 	.word	0x20000218
 8004bc0:	200055f8 	.word	0x200055f8
 8004bc4:	40080000 	.word	0x40080000
 8004bc8:	2000020d 	.word	0x2000020d
 8004bcc:	200055d8 	.word	0x200055d8
 8004bd0:	200055e0 	.word	0x200055e0
	}
	else if(what_to_cal == 'n')
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b6e      	cmp	r3, #110	; 0x6e
 8004bd8:	d126      	bne.n	8004c28 <calibrateDosage+0x5b0>
	{
		cont_cal_additions_nutrient = 'n';
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <calibrateDosage+0x5c8>)
 8004bdc:	226e      	movs	r2, #110	; 0x6e
 8004bde:	701a      	strb	r2, [r3, #0]
		nutrient_ml_per_val_change = (nutrient_up_cal_dosage/((TDS-Start_Nutrient)-1.1));
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <calibrateDosage+0x5cc>)
 8004be2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <calibrateDosage+0x5d0>)
 8004be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <calibrateDosage+0x5d4>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fb03 	bl	80001fc <__aeabi_dsub>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	a30e      	add	r3, pc, #56	; (adr r3, 8004c38 <calibrateDosage+0x5c0>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fafa 	bl	80001fc <__aeabi_dsub>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f7fb fdd6 	bl	80007c0 <__aeabi_ddiv>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	490d      	ldr	r1, [pc, #52]	; (8004c50 <calibrateDosage+0x5d8>)
 8004c1a:	e9c1 2300 	strd	r2, r3, [r1]
		calibrating = 'n';
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <calibrateDosage+0x5dc>)
 8004c20:	226e      	movs	r2, #110	; 0x6e
 8004c22:	701a      	strb	r2, [r3, #0]
//		cont_additions = 3;
		return 'y';
 8004c24:	2379      	movs	r3, #121	; 0x79
 8004c26:	e000      	b.n	8004c2a <calibrateDosage+0x5b2>
	}
	return 'n';
 8004c28:	236e      	movs	r3, #110	; 0x6e
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bdb0      	pop	{r4, r5, r7, pc}
 8004c32:	bf00      	nop
 8004c34:	f3af 8000 	nop.w
 8004c38:	9999999a 	.word	0x9999999a
 8004c3c:	3ff19999 	.word	0x3ff19999
 8004c40:	2000020d 	.word	0x2000020d
 8004c44:	20000220 	.word	0x20000220
 8004c48:	20001800 	.word	0x20001800
 8004c4c:	200055f8 	.word	0x200055f8
 8004c50:	200055e8 	.word	0x200055e8
 8004c54:	20000228 	.word	0x20000228

08004c58 <convert_ph>:
double ph_voltage_buffer[30] = {0};
double pH_low_cal = 2073.0, pH_mid_cal = 1577.0, pH_high_cal= 1139.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
double slope = 0, ph_Value_Buf = 0;

double convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 8004c58:	b5b0      	push	{r4, r5, r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fb fc2b 	bl	80004bc <__aeabi_f2d>
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <convert_ph+0x138>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb ff0e 	bl	8000a8c <__aeabi_dcmpgt>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d03b      	beq.n	8004cee <convert_ph+0x96>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <convert_ph+0x13c>)
 8004c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c7c:	4b46      	ldr	r3, [pc, #280]	; (8004d98 <convert_ph+0x140>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fabb 	bl	80001fc <__aeabi_dsub>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	461d      	mov	r5, r3
 8004c8e:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <convert_ph+0x138>)
 8004c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <convert_ph+0x144>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb faaf 	bl	80001fc <__aeabi_dsub>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb fd8b 	bl	80007c0 <__aeabi_ddiv>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	493c      	ldr	r1, [pc, #240]	; (8004da0 <convert_ph+0x148>)
 8004cb0:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fb fc01 	bl	80004bc <__aeabi_f2d>
 8004cba:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <convert_ph+0x144>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f7fb fa9c 	bl	80001fc <__aeabi_dsub>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <convert_ph+0x148>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fc4b 	bl	800056c <__aeabi_dmul>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <convert_ph+0x140>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fa8c 	bl	8000200 <__adddf3>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	e04a      	b.n	8004d84 <convert_ph+0x12c>
	}
	else if(voltage_mV<=pH_mid_cal)
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fb fbe4 	bl	80004bc <__aeabi_f2d>
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <convert_ph+0x138>)
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f7fb feb3 	bl	8000a64 <__aeabi_dcmple>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03b      	beq.n	8004d7c <convert_ph+0x124>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <convert_ph+0x14c>)
 8004d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <convert_ph+0x13c>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f7fb fa74 	bl	80001fc <__aeabi_dsub>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <convert_ph+0x150>)
 8004d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <convert_ph+0x138>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fa68 	bl	80001fc <__aeabi_dsub>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fd44 	bl	80007c0 <__aeabi_ddiv>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4918      	ldr	r1, [pc, #96]	; (8004da0 <convert_ph+0x148>)
 8004d3e:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fb fbba 	bl	80004bc <__aeabi_f2d>
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <convert_ph+0x138>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fa55 	bl	80001fc <__aeabi_dsub>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <convert_ph+0x148>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fc04 	bl	800056c <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <convert_ph+0x13c>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fa45 	bl	8000200 <__adddf3>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	e003      	b.n	8004d84 <convert_ph+0x12c>
	}
	return 0;
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
}
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000238 	.word	0x20000238
 8004d94:	20000250 	.word	0x20000250
 8004d98:	20000248 	.word	0x20000248
 8004d9c:	20000230 	.word	0x20000230
 8004da0:	20005600 	.word	0x20005600
 8004da4:	20000258 	.word	0x20000258
 8004da8:	20000240 	.word	0x20000240
 8004dac:	00000000 	.word	0x00000000

08004db0 <calc_dose_steps>:
//extern TIM_HandleTypeDef step_timer;


double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc6:	f7fb fe61 	bl	8000a8c <__aeabi_dcmpgt>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d028      	beq.n	8004e22 <calc_dose_steps+0x72>
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	4bbe      	ldr	r3, [pc, #760]	; (80050d0 <calc_dose_steps+0x320>)
 8004dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dda:	f7fb fe43 	bl	8000a64 <__aeabi_dcmple>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01e      	beq.n	8004e22 <calc_dose_steps+0x72>
 8004de4:	a3ae      	add	r3, pc, #696	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dee:	f7fb fa07 	bl	8000200 <__adddf3>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4610      	mov	r0, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	a3ab      	add	r3, pc, #684	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb fbb4 	bl	800056c <__aeabi_dmul>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	a3a8      	add	r3, pc, #672	; (adr r3, 80050b0 <calc_dose_steps+0x300>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f7fb fbab 	bl	800056c <__aeabi_dmul>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	49ae      	ldr	r1, [pc, #696]	; (80050d4 <calc_dose_steps+0x324>)
 8004e1c:	e9c1 2300 	strd	r2, r3, [r1]
 8004e20:	e131      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	4baa      	ldr	r3, [pc, #680]	; (80050d0 <calc_dose_steps+0x320>)
 8004e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e2c:	f7fb fe2e 	bl	8000a8c <__aeabi_dcmpgt>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d029      	beq.n	8004e8a <calc_dose_steps+0xda>
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e42:	f7fb fe0f 	bl	8000a64 <__aeabi_dcmple>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01e      	beq.n	8004e8a <calc_dose_steps+0xda>
 8004e4c:	a394      	add	r3, pc, #592	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e56:	f7fb f9d3 	bl	8000200 <__adddf3>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	a391      	add	r3, pc, #580	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fb80 	bl	800056c <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	a390      	add	r3, pc, #576	; (adr r3, 80050b8 <calc_dose_steps+0x308>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fb77 	bl	800056c <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4994      	ldr	r1, [pc, #592]	; (80050d4 <calc_dose_steps+0x324>)
 8004e84:	e9c1 2300 	strd	r2, r3, [r1]
 8004e88:	e0fd      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e96:	f7fb fdf9 	bl	8000a8c <__aeabi_dcmpgt>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d028      	beq.n	8004ef2 <calc_dose_steps+0x142>
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	4b8c      	ldr	r3, [pc, #560]	; (80050d8 <calc_dose_steps+0x328>)
 8004ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eaa:	f7fb fddb 	bl	8000a64 <__aeabi_dcmple>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01e      	beq.n	8004ef2 <calc_dose_steps+0x142>
 8004eb4:	a37a      	add	r3, pc, #488	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ebe:	f7fb f99f 	bl	8000200 <__adddf3>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	a377      	add	r3, pc, #476	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f7fb fb4c 	bl	800056c <__aeabi_dmul>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	a378      	add	r3, pc, #480	; (adr r3, 80050c0 <calc_dose_steps+0x310>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb fb43 	bl	800056c <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	497a      	ldr	r1, [pc, #488]	; (80050d4 <calc_dose_steps+0x324>)
 8004eec:	e9c1 2300 	strd	r2, r3, [r1]
 8004ef0:	e0c9      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <calc_dose_steps+0x328>)
 8004ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004efc:	f7fb fdc6 	bl	8000a8c <__aeabi_dcmpgt>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d028      	beq.n	8004f58 <calc_dose_steps+0x1a8>
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	4b74      	ldr	r3, [pc, #464]	; (80050dc <calc_dose_steps+0x32c>)
 8004f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f10:	f7fb fda8 	bl	8000a64 <__aeabi_dcmple>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01e      	beq.n	8004f58 <calc_dose_steps+0x1a8>
 8004f1a:	a361      	add	r3, pc, #388	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f24:	f7fb f96c 	bl	8000200 <__adddf3>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	a35d      	add	r3, pc, #372	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fb19 	bl	800056c <__aeabi_dmul>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	a35f      	add	r3, pc, #380	; (adr r3, 80050c0 <calc_dose_steps+0x310>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb fb10 	bl	800056c <__aeabi_dmul>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4960      	ldr	r1, [pc, #384]	; (80050d4 <calc_dose_steps+0x324>)
 8004f52:	e9c1 2300 	strd	r2, r3, [r1]
 8004f56:	e096      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	4b5f      	ldr	r3, [pc, #380]	; (80050dc <calc_dose_steps+0x32c>)
 8004f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f62:	f7fb fd93 	bl	8000a8c <__aeabi_dcmpgt>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d028      	beq.n	8004fbe <calc_dose_steps+0x20e>
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	4b5b      	ldr	r3, [pc, #364]	; (80050e0 <calc_dose_steps+0x330>)
 8004f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f76:	f7fb fd75 	bl	8000a64 <__aeabi_dcmple>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <calc_dose_steps+0x20e>
 8004f80:	a347      	add	r3, pc, #284	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f8a:	f7fb f939 	bl	8000200 <__adddf3>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	a344      	add	r3, pc, #272	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fae6 	bl	800056c <__aeabi_dmul>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	a345      	add	r3, pc, #276	; (adr r3, 80050c0 <calc_dose_steps+0x310>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fadd 	bl	800056c <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4947      	ldr	r1, [pc, #284]	; (80050d4 <calc_dose_steps+0x324>)
 8004fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8004fbc:	e063      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <calc_dose_steps+0x330>)
 8004fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc8:	f7fb fd60 	bl	8000a8c <__aeabi_dcmpgt>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d028      	beq.n	8005024 <calc_dose_steps+0x274>
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <calc_dose_steps+0x334>)
 8004fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fdc:	f7fb fd42 	bl	8000a64 <__aeabi_dcmple>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01e      	beq.n	8005024 <calc_dose_steps+0x274>
 8004fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff0:	f7fb f906 	bl	8000200 <__adddf3>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	a32a      	add	r3, pc, #168	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fab3 	bl	800056c <__aeabi_dmul>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	a32c      	add	r3, pc, #176	; (adr r3, 80050c0 <calc_dose_steps+0x310>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb faaa 	bl	800056c <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	492d      	ldr	r1, [pc, #180]	; (80050d4 <calc_dose_steps+0x324>)
 800501e:	e9c1 2300 	strd	r2, r3, [r1]
 8005022:	e030      	b.n	8005086 <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005030:	f7fb fd04 	bl	8000a3c <__aeabi_dcmpeq>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <calc_dose_steps+0x29a>
 800503a:	4926      	ldr	r1, [pc, #152]	; (80050d4 <calc_dose_steps+0x324>)
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9c1 2300 	strd	r2, r3, [r1]
 8005048:	e01d      	b.n	8005086 <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 800504a:	a315      	add	r3, pc, #84	; (adr r3, 80050a0 <calc_dose_steps+0x2f0>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005054:	f7fb f8d4 	bl	8000200 <__adddf3>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	a311      	add	r3, pc, #68	; (adr r3, 80050a8 <calc_dose_steps+0x2f8>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb fa81 	bl	800056c <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	a315      	add	r3, pc, #84	; (adr r3, 80050c8 <calc_dose_steps+0x318>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fa78 	bl	800056c <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4914      	ldr	r1, [pc, #80]	; (80050d4 <calc_dose_steps+0x324>)
 8005082:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <calc_dose_steps+0x324>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f7fb fd1c 	bl	8000acc <__aeabi_d2iz>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	edfa43fe 	.word	0xedfa43fe
 80050a4:	3fc9c0eb 	.word	0x3fc9c0eb
 80050a8:	f2197bf2 	.word	0xf2197bf2
 80050ac:	4012197b 	.word	0x4012197b
 80050b0:	00000000 	.word	0x00000000
 80050b4:	409b4400 	.word	0x409b4400
 80050b8:	00000000 	.word	0x00000000
 80050bc:	409bf800 	.word	0x409bf800
 80050c0:	00000000 	.word	0x00000000
 80050c4:	409ef000 	.word	0x409ef000
 80050c8:	00000000 	.word	0x00000000
 80050cc:	409dec00 	.word	0x409dec00
 80050d0:	3ff00000 	.word	0x3ff00000
 80050d4:	20005608 	.word	0x20005608
 80050d8:	40080000 	.word	0x40080000
 80050dc:	40100000 	.word	0x40100000
 80050e0:	40140000 	.word	0x40140000
 80050e4:	403e0000 	.word	0x403e0000

080050e8 <disablePumps>:

void disablePumps()	// disable all pumps
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 80050ec:	2201      	movs	r2, #1
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	4807      	ldr	r0, [pc, #28]	; (8005110 <disablePumps+0x28>)
 80050f2:	f002 fcc4 	bl	8007a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 80050f6:	2201      	movs	r2, #1
 80050f8:	2140      	movs	r1, #64	; 0x40
 80050fa:	4805      	ldr	r0, [pc, #20]	; (8005110 <disablePumps+0x28>)
 80050fc:	f002 fcbf 	bl	8007a7e <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8005100:	2201      	movs	r2, #1
 8005102:	2120      	movs	r1, #32
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <disablePumps+0x28>)
 8005106:	f002 fcba 	bl	8007a7e <HAL_GPIO_WritePin>

}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000

08005114 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dd04      	ble.n	8005130 <enablePumps+0x1c>
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	480b      	ldr	r0, [pc, #44]	; (8005158 <enablePumps+0x44>)
 800512c:	f002 fca7 	bl	8007a7e <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dd04      	ble.n	8005140 <enablePumps+0x2c>
 8005136:	2200      	movs	r2, #0
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	4807      	ldr	r0, [pc, #28]	; (8005158 <enablePumps+0x44>)
 800513c:	f002 fc9f 	bl	8007a7e <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dd04      	ble.n	8005150 <enablePumps+0x3c>
 8005146:	2200      	movs	r2, #0
 8005148:	2120      	movs	r1, #32
 800514a:	4803      	ldr	r0, [pc, #12]	; (8005158 <enablePumps+0x44>)
 800514c:	f002 fc97 	bl	8007a7e <HAL_GPIO_WritePin>
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000

0800515c <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	 DWT_Delay_Init();
 8005168:	f000 fef2 	bl	8005f50 <DWT_Delay_Init>

	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	dd01      	ble.n	800517c <step+0x20>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	429a      	cmp	r2, r3
 8005182:	dd01      	ble.n	8005188 <step+0x2c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ffc1 	bl	8005114 <enablePumps>

	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8005192:	2300      	movs	r3, #0
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	e038      	b.n	800520a <step+0xae>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	429a      	cmp	r2, r3
 800519e:	da03      	bge.n	80051a8 <step+0x4c>
 80051a0:	2110      	movs	r1, #16
 80051a2:	481f      	ldr	r0, [pc, #124]	; (8005220 <step+0xc4>)
 80051a4:	f002 fc83 	bl	8007aae <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	da03      	bge.n	80051b8 <step+0x5c>
 80051b0:	2104      	movs	r1, #4
 80051b2:	481b      	ldr	r0, [pc, #108]	; (8005220 <step+0xc4>)
 80051b4:	f002 fc7b 	bl	8007aae <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	da03      	bge.n	80051c8 <step+0x6c>
 80051c0:	2108      	movs	r1, #8
 80051c2:	4817      	ldr	r0, [pc, #92]	; (8005220 <step+0xc4>)
 80051c4:	f002 fc73 	bl	8007aae <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 80051c8:	2028      	movs	r0, #40	; 0x28
 80051ca:	f000 fef1 	bl	8005fb0 <DWT_Delay_us>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	da03      	bge.n	80051de <step+0x82>
 80051d6:	2110      	movs	r1, #16
 80051d8:	4811      	ldr	r0, [pc, #68]	; (8005220 <step+0xc4>)
 80051da:	f002 fc68 	bl	8007aae <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	da03      	bge.n	80051ee <step+0x92>
 80051e6:	2104      	movs	r1, #4
 80051e8:	480d      	ldr	r0, [pc, #52]	; (8005220 <step+0xc4>)
 80051ea:	f002 fc60 	bl	8007aae <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	da03      	bge.n	80051fe <step+0xa2>
 80051f6:	2108      	movs	r1, #8
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <step+0xc4>)
 80051fa:	f002 fc58 	bl	8007aae <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 80051fe:	2028      	movs	r0, #40	; 0x28
 8005200:	f000 fed6 	bl	8005fb0 <DWT_Delay_us>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3301      	adds	r3, #1
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	dbc2      	blt.n	8005198 <step+0x3c>
	}
	disablePumps();
 8005212:	f7ff ff69 	bl	80050e8 <disablePumps>
}
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <readWaterTemp>:

int TDS_computation_buffer[80] = {0}, valid_value_pH  = 0, valid_value_TDS  = 0;
double TDS_voltage = 0, compensationCoefficient = 0, compensationVolatge = 0, DMA_pH_sample_avg = 0, mili_voltage, Humidity = 0;

void readWaterTemp()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8005228:	f010 fd30 	bl	8015c8c <vPortEnterCritical>
	{
		 DWT_Delay_Init();
 800522c:	f000 fe90 	bl	8005f50 <DWT_Delay_Init>
		 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8005230:	2201      	movs	r2, #1
 8005232:	2140      	movs	r1, #64	; 0x40
 8005234:	4828      	ldr	r0, [pc, #160]	; (80052d8 <readWaterTemp+0xb4>)
 8005236:	f002 fc22 	bl	8007a7e <HAL_GPIO_WritePin>
		 DWT_Delay_us(100);
 800523a:	2064      	movs	r0, #100	; 0x64
 800523c:	f000 feb8 	bl	8005fb0 <DWT_Delay_us>
		 Presence = DS18B20_Start();
 8005240:	f000 fede 	bl	8006000 <DS18B20_Start>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <readWaterTemp+0xb8>)
 800524a:	701a      	strb	r2, [r3, #0]

		 DWT_Delay_us (300);
 800524c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005250:	f000 feae 	bl	8005fb0 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 8005254:	20cc      	movs	r0, #204	; 0xcc
 8005256:	f000 ff03 	bl	8006060 <DS18B20_Write>
		 DS18B20_Write (0x44);  // convert t
 800525a:	2044      	movs	r0, #68	; 0x44
 800525c:	f000 ff00 	bl	8006060 <DS18B20_Write>

		 Presence = DS18B20_Start();
 8005260:	f000 fece 	bl	8006000 <DS18B20_Start>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	4b1c      	ldr	r3, [pc, #112]	; (80052dc <readWaterTemp+0xb8>)
 800526a:	701a      	strb	r2, [r3, #0]
		 DWT_Delay_us (300);
 800526c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005270:	f000 fe9e 	bl	8005fb0 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 8005274:	20cc      	movs	r0, #204	; 0xcc
 8005276:	f000 fef3 	bl	8006060 <DS18B20_Write>
		 DS18B20_Write (0xBE);  // Read Scratch-pad
 800527a:	20be      	movs	r0, #190	; 0xbe
 800527c:	f000 fef0 	bl	8006060 <DS18B20_Write>

		 Temp_byte1 = DS18B20_Read();
 8005280:	f000 ff34 	bl	80060ec <DS18B20_Read>
 8005284:	4603      	mov	r3, r0
 8005286:	461a      	mov	r2, r3
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <readWaterTemp+0xbc>)
 800528a:	701a      	strb	r2, [r3, #0]
		 Temp_byte2 = DS18B20_Read();
 800528c:	f000 ff2e 	bl	80060ec <DS18B20_Read>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <readWaterTemp+0xc0>)
 8005296:	701a      	strb	r2, [r3, #0]
		 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <readWaterTemp+0xc0>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b21a      	sxth	r2, r3
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <readWaterTemp+0xbc>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	b21b      	sxth	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b21b      	sxth	r3, r3
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <readWaterTemp+0xc4>)
 80052ae:	801a      	strh	r2, [r3, #0]
		 water_temp = (double)TEMP/16;
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <readWaterTemp+0xc4>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f8df 	bl	8000478 <__aeabi_ui2d>
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <readWaterTemp+0xc8>)
 80052c0:	f7fb fa7e 	bl	80007c0 <__aeabi_ddiv>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4909      	ldr	r1, [pc, #36]	; (80052f0 <readWaterTemp+0xcc>)
 80052ca:	e9c1 2300 	strd	r2, r3, [r1]
	} taskEXIT_CRITICAL();
 80052ce:	f010 fd0d 	bl	8015cec <vPortExitCritical>
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40020000 	.word	0x40020000
 80052dc:	20005610 	.word	0x20005610
 80052e0:	2000daba 	.word	0x2000daba
 80052e4:	2000dac8 	.word	0x2000dac8
 80052e8:	2000dab8 	.word	0x2000dab8
 80052ec:	40300000 	.word	0x40300000
 80052f0:	20001810 	.word	0x20001810
 80052f4:	00000000 	.word	0x00000000

080052f8 <convertWaterTDS>:


void convertWaterTDS() // Get nutrient level
{TDS_voltage = 0;
 80052f8:	b5b0      	push	{r4, r5, r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	496e      	ldr	r1, [pc, #440]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9c1 2300 	strd	r2, r3, [r1]
	int j = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	607b      	str	r3, [r7, #4]
	for(j = 0; j < 38; j++)
 8005310:	2300      	movs	r3, #0
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e013      	b.n	800533e <convertWaterTDS+0x46>
	{
		TDS_voltage += TDS_computation_buffer[j];
 8005316:	4a69      	ldr	r2, [pc, #420]	; (80054bc <convertWaterTDS+0x1c4>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb f8ba 	bl	8000498 <__aeabi_i2d>
 8005324:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff69 	bl	8000200 <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4961      	ldr	r1, [pc, #388]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005334:	e9c1 2300 	strd	r2, r3, [r1]
	for(j = 0; j < 38; j++)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b25      	cmp	r3, #37	; 0x25
 8005342:	dde8      	ble.n	8005316 <convertWaterTDS+0x1e>
	}
	TDS_voltage = (double)TDS_voltage/j;
 8005344:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005346:	e9d3 4500 	ldrd	r4, r5, [r3]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb f8a4 	bl	8000498 <__aeabi_i2d>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fb fa32 	bl	80007c0 <__aeabi_ddiv>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4955      	ldr	r1, [pc, #340]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005362:	e9c1 2300 	strd	r2, r3, [r1]
	TDS_voltage = TDS_voltage*(double)0.000805664; 																					 // read the analog value more stable by averaging and convert to voltage value
 8005366:	4b54      	ldr	r3, [pc, #336]	; (80054b8 <convertWaterTDS+0x1c0>)
 8005368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800536c:	a348      	add	r3, pc, #288	; (adr r3, 8005490 <convertWaterTDS+0x198>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f7fb f8fb 	bl	800056c <__aeabi_dmul>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	494f      	ldr	r1, [pc, #316]	; (80054b8 <convertWaterTDS+0x1c0>)
 800537c:	e9c1 2300 	strd	r2, r3, [r1]
	compensationCoefficient=1.0+0.02*(water_temp-25.0);   																								    		 //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 8005380:	4b4f      	ldr	r3, [pc, #316]	; (80054c0 <convertWaterTDS+0x1c8>)
 8005382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	4b4e      	ldr	r3, [pc, #312]	; (80054c4 <convertWaterTDS+0x1cc>)
 800538c:	f7fa ff36 	bl	80001fc <__aeabi_dsub>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	a33f      	add	r3, pc, #252	; (adr r3, 8005498 <convertWaterTDS+0x1a0>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb f8e5 	bl	800056c <__aeabi_dmul>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	4b46      	ldr	r3, [pc, #280]	; (80054c8 <convertWaterTDS+0x1d0>)
 80053b0:	f7fa ff26 	bl	8000200 <__adddf3>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4944      	ldr	r1, [pc, #272]	; (80054cc <convertWaterTDS+0x1d4>)
 80053ba:	e9c1 2300 	strd	r2, r3, [r1]
	compensationVolatge=TDS_voltage/compensationCoefficient;  																									 //temperature compensation
 80053be:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <convertWaterTDS+0x1c0>)
 80053c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053c4:	4b41      	ldr	r3, [pc, #260]	; (80054cc <convertWaterTDS+0x1d4>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fb f9f9 	bl	80007c0 <__aeabi_ddiv>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	493f      	ldr	r1, [pc, #252]	; (80054d0 <convertWaterTDS+0x1d8>)
 80053d4:	e9c1 2300 	strd	r2, r3, [r1]
	TDS =(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds
 80053d8:	4b3d      	ldr	r3, [pc, #244]	; (80054d0 <convertWaterTDS+0x1d8>)
 80053da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053de:	a330      	add	r3, pc, #192	; (adr r3, 80054a0 <convertWaterTDS+0x1a8>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fb f8c2 	bl	800056c <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <convertWaterTDS+0x1d8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f8b9 	bl	800056c <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <convertWaterTDS+0x1d8>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fb f8b0 	bl	800056c <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4614      	mov	r4, r2
 8005412:	461d      	mov	r5, r3
 8005414:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <convertWaterTDS+0x1d8>)
 8005416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800541a:	a323      	add	r3, pc, #140	; (adr r3, 80054a8 <convertWaterTDS+0x1b0>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb f8a4 	bl	800056c <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <convertWaterTDS+0x1d8>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fb f89b 	bl	800056c <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	f7fa fedd 	bl	80001fc <__aeabi_dsub>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4614      	mov	r4, r2
 8005448:	461d      	mov	r5, r3
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <convertWaterTDS+0x1d8>)
 800544c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005450:	a317      	add	r3, pc, #92	; (adr r3, 80054b0 <convertWaterTDS+0x1b8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb f889 	bl	800056c <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fa fecd 	bl	8000200 <__adddf3>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <convertWaterTDS+0x1dc>)
 8005474:	f7fb f87a 	bl	800056c <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4916      	ldr	r1, [pc, #88]	; (80054d8 <convertWaterTDS+0x1e0>)
 800547e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bdb0      	pop	{r4, r5, r7, pc}
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w
 8005490:	440a4e96 	.word	0x440a4e96
 8005494:	3f4a6666 	.word	0x3f4a6666
 8005498:	47ae147b 	.word	0x47ae147b
 800549c:	3f947ae1 	.word	0x3f947ae1
 80054a0:	a3d70a3d 	.word	0xa3d70a3d
 80054a4:	4060ad70 	.word	0x4060ad70
 80054a8:	1eb851ec 	.word	0x1eb851ec
 80054ac:	406ffb85 	.word	0x406ffb85
 80054b0:	b851eb85 	.word	0xb851eb85
 80054b4:	408acb1e 	.word	0x408acb1e
 80054b8:	20005760 	.word	0x20005760
 80054bc:	20005614 	.word	0x20005614
 80054c0:	20001810 	.word	0x20001810
 80054c4:	40390000 	.word	0x40390000
 80054c8:	3ff00000 	.word	0x3ff00000
 80054cc:	20005768 	.word	0x20005768
 80054d0:	20005770 	.word	0x20005770
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	20001800 	.word	0x20001800

080054dc <get_DMA_nutrient_ph_value>:

char micro_reset = 'y';
int pH_val_buf[55] = {0};
void get_DMA_nutrient_ph_value()	// gets nutrient and ph values from the ADC DMA buffer and place it in a buffer
{
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
	valid_value_pH = 0;
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <get_DMA_nutrient_ph_value+0xe8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
	valid_value_TDS = 0;
 80054e8:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <get_DMA_nutrient_ph_value+0xec>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
	DMA_pH_sample_avg = 0;
 80054ee:	4937      	ldr	r1, [pc, #220]	; (80055cc <get_DMA_nutrient_ph_value+0xf0>)
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9c1 2300 	strd	r2, r3, [r1]
	taskENTER_CRITICAL();
 80054fc:	f010 fbc6 	bl	8015c8c <vPortEnterCritical>
	{
		for(int j = 0; j<79; j++ )
 8005500:	2300      	movs	r3, #0
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	e042      	b.n	800558c <get_DMA_nutrient_ph_value+0xb0>
		{
			if(j%2 == 0)//&& nutrient_ph_values[j] < 80)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10f      	bne.n	8005530 <get_DMA_nutrient_ph_value+0x54>
			{
				TDS_computation_buffer[valid_value_TDS] = nutrient_ph_values[j];
 8005510:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <get_DMA_nutrient_ph_value+0xf4>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <get_DMA_nutrient_ph_value+0xec>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4611      	mov	r1, r2
 800551e:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <get_DMA_nutrient_ph_value+0xf8>)
 8005520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				valid_value_TDS++;
 8005524:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <get_DMA_nutrient_ph_value+0xec>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <get_DMA_nutrient_ph_value+0xec>)
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e02a      	b.n	8005586 <get_DMA_nutrient_ph_value+0xaa>
			}
			else if(j%2 != 0 && nutrient_ph_values[j] != 0)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d025      	beq.n	8005586 <get_DMA_nutrient_ph_value+0xaa>
 800553a:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <get_DMA_nutrient_ph_value+0xf4>)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01f      	beq.n	8005586 <get_DMA_nutrient_ph_value+0xaa>
			{
				pH_val_buf[valid_value_pH] = nutrient_ph_values[j];
 8005546:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <get_DMA_nutrient_ph_value+0xf4>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <get_DMA_nutrient_ph_value+0xe8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	4a20      	ldr	r2, [pc, #128]	; (80055d8 <get_DMA_nutrient_ph_value+0xfc>)
 8005556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DMA_pH_sample_avg += nutrient_ph_values[j];
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <get_DMA_nutrient_ph_value+0xf4>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fa ff88 	bl	8000478 <__aeabi_ui2d>
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <get_DMA_nutrient_ph_value+0xf0>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fa fe47 	bl	8000200 <__adddf3>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4915      	ldr	r1, [pc, #84]	; (80055cc <get_DMA_nutrient_ph_value+0xf0>)
 8005578:	e9c1 2300 	strd	r2, r3, [r1]
				valid_value_pH++;
 800557c:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <get_DMA_nutrient_ph_value+0xe8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <get_DMA_nutrient_ph_value+0xe8>)
 8005584:	6013      	str	r3, [r2, #0]
		for(int j = 0; j<79; j++ )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3301      	adds	r3, #1
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b4e      	cmp	r3, #78	; 0x4e
 8005590:	ddb9      	ble.n	8005506 <get_DMA_nutrient_ph_value+0x2a>
			}
		}
	}
	taskEXIT_CRITICAL();
 8005592:	f010 fbab 	bl	8015cec <vPortExitCritical>
	DMA_pH_sample_avg = DMA_pH_sample_avg/valid_value_pH;
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <get_DMA_nutrient_ph_value+0xf0>)
 8005598:	e9d3 4500 	ldrd	r4, r5, [r3]
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <get_DMA_nutrient_ph_value+0xe8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fa ff79 	bl	8000498 <__aeabi_i2d>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4620      	mov	r0, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7fb f907 	bl	80007c0 <__aeabi_ddiv>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4905      	ldr	r1, [pc, #20]	; (80055cc <get_DMA_nutrient_ph_value+0xf0>)
 80055b8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}
 80055c4:	20005754 	.word	0x20005754
 80055c8:	20005758 	.word	0x20005758
 80055cc:	20005778 	.word	0x20005778
 80055d0:	20005468 	.word	0x20005468
 80055d4:	20005614 	.word	0x20005614
 80055d8:	20005780 	.word	0x20005780
 80055dc:	00000000 	.word	0x00000000

080055e0 <convertPH>:
{

}

void convertPH()
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
	mili_voltage = ((DMA_pH_sample_avg/4096.0)*3.3)*1000;
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <convertPH+0x70>)
 80055e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <convertPH+0x74>)
 80055f0:	f7fb f8e6 	bl	80007c0 <__aeabi_ddiv>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	a312      	add	r3, pc, #72	; (adr r3, 8005648 <convertPH+0x68>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa ffb3 	bl	800056c <__aeabi_dmul>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4610      	mov	r0, r2
 800560c:	4619      	mov	r1, r3
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <convertPH+0x78>)
 8005614:	f7fa ffaa 	bl	800056c <__aeabi_dmul>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	490f      	ldr	r1, [pc, #60]	; (800565c <convertPH+0x7c>)
 800561e:	e9c1 2300 	strd	r2, r3, [r1]
	pH = convert_ph(mili_voltage);
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <convertPH+0x7c>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	f7fb fa96 	bl	8000b5c <__aeabi_d2f>
 8005630:	4603      	mov	r3, r0
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fb10 	bl	8004c58 <convert_ph>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4908      	ldr	r1, [pc, #32]	; (8005660 <convertPH+0x80>)
 800563e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	66666666 	.word	0x66666666
 800564c:	400a6666 	.word	0x400a6666
 8005650:	20005778 	.word	0x20005778
 8005654:	40b00000 	.word	0x40b00000
 8005658:	408f4000 	.word	0x408f4000
 800565c:	2000dac0 	.word	0x2000dac0
 8005660:	20001808 	.word	0x20001808

08005664 <getSensorValues>:

int runs_after = 0;
double previous_temp = 0;
char get_init_temp = 'n';
char getSensorValues()
{
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0


	readWaterTemp();
 800566a:	f7ff fddb 	bl	8005224 <readWaterTemp>
	if(get_init_temp == 'n')
 800566e:	4b70      	ldr	r3, [pc, #448]	; (8005830 <getSensorValues+0x1cc>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b6e      	cmp	r3, #110	; 0x6e
 8005674:	d108      	bne.n	8005688 <getSensorValues+0x24>
	{
		previous_temp = water_temp;
 8005676:	4b6f      	ldr	r3, [pc, #444]	; (8005834 <getSensorValues+0x1d0>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	496e      	ldr	r1, [pc, #440]	; (8005838 <getSensorValues+0x1d4>)
 800567e:	e9c1 2300 	strd	r2, r3, [r1]
		get_init_temp = 'y';
 8005682:	4b6b      	ldr	r3, [pc, #428]	; (8005830 <getSensorValues+0x1cc>)
 8005684:	2279      	movs	r2, #121	; 0x79
 8005686:	701a      	strb	r2, [r3, #0]
			if(pH <= 14 ) runs_after++;
		}
		else micro_reset ='n';
	}*/

	for(int checkSamples = 0; checkSamples<num_sensor_samples+3; checkSamples++)			   // sample TDS and PH every half second for 30 times
 8005688:	2300      	movs	r3, #0
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	e034      	b.n	80056f8 <getSensorValues+0x94>
	{
		//osDelay(100);
		get_DMA_nutrient_ph_value();
 800568e:	f7ff ff25 	bl	80054dc <get_DMA_nutrient_ph_value>
				//osDelay(10);
		convertWaterTDS();
 8005692:	f7ff fe31 	bl	80052f8 <convertWaterTDS>
				//osDelay(10);
		convertPH();
 8005696:	f7ff ffa3 	bl	80055e0 <convertPH>

		if(checkSamples >= 3) // Sometimes the first 3 samples are invalad so lets just skip them
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b02      	cmp	r3, #2
 800569e:	dd17      	ble.n	80056d0 <getSensorValues+0x6c>
		{
			 sample_array_TDS[checkSamples-3] = TDS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ed9      	subs	r1, r3, #3
 80056a4:	4b65      	ldr	r3, [pc, #404]	; (800583c <getSensorValues+0x1d8>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	4865      	ldr	r0, [pc, #404]	; (8005840 <getSensorValues+0x1dc>)
 80056ac:	00c9      	lsls	r1, r1, #3
 80056ae:	4401      	add	r1, r0
 80056b0:	e9c1 2300 	strd	r2, r3, [r1]
			 sample_array_pH[checkSamples-3] = pH;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ed9      	subs	r1, r3, #3
 80056b8:	4b62      	ldr	r3, [pc, #392]	; (8005844 <getSensorValues+0x1e0>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	4862      	ldr	r0, [pc, #392]	; (8005848 <getSensorValues+0x1e4>)
 80056c0:	00c9      	lsls	r1, r1, #3
 80056c2:	4401      	add	r1, r0
 80056c4:	e9c1 2300 	strd	r2, r3, [r1]
			 osDelay(10);
 80056c8:	200a      	movs	r0, #10
 80056ca:	f00e f80a 	bl	80136e2 <osDelay>
 80056ce:	e002      	b.n	80056d6 <getSensorValues+0x72>
		}
		else  osDelay(100);
 80056d0:	2064      	movs	r0, #100	; 0x64
 80056d2:	f00e f806 	bl	80136e2 <osDelay>
		TDS = 0;
 80056d6:	4959      	ldr	r1, [pc, #356]	; (800583c <getSensorValues+0x1d8>)
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9c1 2300 	strd	r2, r3, [r1]
		pH = 0;
 80056e4:	4957      	ldr	r1, [pc, #348]	; (8005844 <getSensorValues+0x1e0>)
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9c1 2300 	strd	r2, r3, [r1]
	for(int checkSamples = 0; checkSamples<num_sensor_samples+3; checkSamples++)			   // sample TDS and PH every half second for 30 times
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3301      	adds	r3, #1
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	4b54      	ldr	r3, [pc, #336]	; (800584c <getSensorValues+0x1e8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3302      	adds	r3, #2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	ddc4      	ble.n	800568e <getSensorValues+0x2a>
	}
//	TDS = 0;
//	pH = 0;

	for(int get_average = 0; get_average<num_sensor_samples; get_average++)			   // sample TDS and PH every half second for 30 times
 8005704:	2300      	movs	r3, #0
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	e022      	b.n	8005750 <getSensorValues+0xec>
	{
		TDS += sample_array_TDS[get_average];
 800570a:	4a4d      	ldr	r2, [pc, #308]	; (8005840 <getSensorValues+0x1dc>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005716:	4b49      	ldr	r3, [pc, #292]	; (800583c <getSensorValues+0x1d8>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fd70 	bl	8000200 <__adddf3>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4945      	ldr	r1, [pc, #276]	; (800583c <getSensorValues+0x1d8>)
 8005726:	e9c1 2300 	strd	r2, r3, [r1]
		pH += sample_array_pH[get_average];
 800572a:	4a47      	ldr	r2, [pc, #284]	; (8005848 <getSensorValues+0x1e4>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005736:	4b43      	ldr	r3, [pc, #268]	; (8005844 <getSensorValues+0x1e0>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f7fa fd60 	bl	8000200 <__adddf3>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	493f      	ldr	r1, [pc, #252]	; (8005844 <getSensorValues+0x1e0>)
 8005746:	e9c1 2300 	strd	r2, r3, [r1]
	for(int get_average = 0; get_average<num_sensor_samples; get_average++)			   // sample TDS and PH every half second for 30 times
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4b3e      	ldr	r3, [pc, #248]	; (800584c <getSensorValues+0x1e8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	dbd7      	blt.n	800570a <getSensorValues+0xa6>
	}
	TDS = TDS/num_sensor_samples;
 800575a:	4b38      	ldr	r3, [pc, #224]	; (800583c <getSensorValues+0x1d8>)
 800575c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005760:	4b3a      	ldr	r3, [pc, #232]	; (800584c <getSensorValues+0x1e8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7fa fe97 	bl	8000498 <__aeabi_i2d>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f825 	bl	80007c0 <__aeabi_ddiv>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4930      	ldr	r1, [pc, #192]	; (800583c <getSensorValues+0x1d8>)
 800577c:	e9c1 2300 	strd	r2, r3, [r1]
	pH  = pH/num_sensor_samples;
 8005780:	4b30      	ldr	r3, [pc, #192]	; (8005844 <getSensorValues+0x1e0>)
 8005782:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005786:	4b31      	ldr	r3, [pc, #196]	; (800584c <getSensorValues+0x1e8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fe84 	bl	8000498 <__aeabi_i2d>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fb f812 	bl	80007c0 <__aeabi_ddiv>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4928      	ldr	r1, [pc, #160]	; (8005844 <getSensorValues+0x1e0>)
 80057a2:	e9c1 2300 	strd	r2, r3, [r1]
	runs_after = 0;
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <getSensorValues+0x1ec>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]


	if(water_temp > 100 || previous_temp-water_temp > 3 || water_temp-previous_temp > 3) return 'n'; // handle invalid temp reading which happen from time to time
 80057ac:	4b21      	ldr	r3, [pc, #132]	; (8005834 <getSensorValues+0x1d0>)
 80057ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <getSensorValues+0x1f0>)
 80057b8:	f7fb f968 	bl	8000a8c <__aeabi_dcmpgt>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d127      	bne.n	8005812 <getSensorValues+0x1ae>
 80057c2:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <getSensorValues+0x1d4>)
 80057c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <getSensorValues+0x1d0>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa fd15 	bl	80001fc <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <getSensorValues+0x1f4>)
 80057e0:	f7fb f954 	bl	8000a8c <__aeabi_dcmpgt>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d113      	bne.n	8005812 <getSensorValues+0x1ae>
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <getSensorValues+0x1d0>)
 80057ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <getSensorValues+0x1d4>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa fd01 	bl	80001fc <__aeabi_dsub>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <getSensorValues+0x1f4>)
 8005808:	f7fb f940 	bl	8000a8c <__aeabi_dcmpgt>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <getSensorValues+0x1b2>
 8005812:	236e      	movs	r3, #110	; 0x6e
 8005814:	e008      	b.n	8005828 <getSensorValues+0x1c4>

	previous_temp = water_temp;
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <getSensorValues+0x1d0>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	4906      	ldr	r1, [pc, #24]	; (8005838 <getSensorValues+0x1d4>)
 800581e:	e9c1 2300 	strd	r2, r3, [r1]
	waterTempControl();
 8005822:	f7fe f8a1 	bl	8003968 <waterTempControl>
	return 'y';
 8005826:	2379      	movs	r3, #121	; 0x79
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bdb0      	pop	{r4, r5, r7, pc}
 8005830:	20000260 	.word	0x20000260
 8005834:	20001810 	.word	0x20001810
 8005838:	20005860 	.word	0x20005860
 800583c:	20001800 	.word	0x20001800
 8005840:	20003e18 	.word	0x20003e18
 8005844:	20001808 	.word	0x20001808
 8005848:	20003f08 	.word	0x20003f08
 800584c:	20000080 	.word	0x20000080
 8005850:	2000585c 	.word	0x2000585c
 8005854:	40590000 	.word	0x40590000
 8005858:	40080000 	.word	0x40080000

0800585c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_MspInit+0x54>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <HAL_MspInit+0x54>)
 800586c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005870:	6453      	str	r3, [r2, #68]	; 0x44
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <HAL_MspInit+0x54>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_MspInit+0x54>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <HAL_MspInit+0x54>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <HAL_MspInit+0x54>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800589a:	2200      	movs	r2, #0
 800589c:	210f      	movs	r1, #15
 800589e:	f06f 0001 	mvn.w	r0, #1
 80058a2:	f001 fb0e 	bl	8006ec2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800

080058b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <HAL_ADC_MspInit+0xec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d160      	bne.n	8005998 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 80058e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058e4:	6453      	str	r3, [r2, #68]	; 0x44
 80058e6:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 80058fc:	f043 0320 	orr.w	r3, r3, #32
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <HAL_ADC_MspInit+0xf0>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800590e:	2330      	movs	r3, #48	; 0x30
 8005910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005912:	2303      	movs	r3, #3
 8005914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800591a:	f107 0314 	add.w	r3, r7, #20
 800591e:	4619      	mov	r1, r3
 8005920:	4821      	ldr	r0, [pc, #132]	; (80059a8 <HAL_ADC_MspInit+0xf4>)
 8005922:	f001 fef7 	bl	8007714 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005928:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_ADC_MspInit+0xfc>)
 800592a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 800592e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005932:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005934:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005936:	2200      	movs	r2, #0
 8005938:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 800593c:	2200      	movs	r2, #0
 800593e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005946:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005948:	4b18      	ldr	r3, [pc, #96]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 800594a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800594e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005956:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 800595a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005962:	2200      	movs	r2, #0
 8005964:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005968:	2200      	movs	r2, #0
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800596c:	480f      	ldr	r0, [pc, #60]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 800596e:	f001 fad3 	bl	8006f18 <HAL_DMA_Init>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8005978:	f7fe fdce 	bl	8004518 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
 8005982:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <HAL_ADC_MspInit+0xf8>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8005988:	2200      	movs	r2, #0
 800598a:	2105      	movs	r1, #5
 800598c:	2012      	movs	r0, #18
 800598e:	f001 fa98 	bl	8006ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005992:	2012      	movs	r0, #18
 8005994:	f001 fab1 	bl	8006efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005998:	bf00      	nop
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40012200 	.word	0x40012200
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40021400 	.word	0x40021400
 80059ac:	200098d8 	.word	0x200098d8
 80059b0:	40026410 	.word	0x40026410

080059b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <HAL_RTC_MspInit+0x24>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d102      	bne.n	80059cc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RTC_MspInit+0x28>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40002800 	.word	0x40002800
 80059dc:	42470e3c 	.word	0x42470e3c

080059e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <HAL_TIM_Base_MspInit+0xb0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005a0e:	e03a      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <HAL_TIM_Base_MspInit+0xb8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
}
 8005a36:	e026      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <HAL_TIM_Base_MspInit+0xbc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10e      	bne.n	8005a60 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	4a12      	ldr	r2, [pc, #72]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	6453      	str	r3, [r2, #68]	; 0x44
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	e012      	b.n	8005a86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d10d      	bne.n	8005a86 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a78:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_TIM_Base_MspInit+0xb4>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40001800 	.word	0x40001800

08005aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a24      	ldr	r2, [pc, #144]	; (8005b54 <HAL_TIM_MspPostInit+0xb0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d11f      	bne.n	8005b06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005ad0:	f043 0310 	orr.w	r3, r3, #16
 8005ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8005ae2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8005ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af0:	2300      	movs	r3, #0
 8005af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005af4:	2301      	movs	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4619      	mov	r1, r3
 8005afe:	4817      	ldr	r0, [pc, #92]	; (8005b5c <HAL_TIM_MspPostInit+0xb8>)
 8005b00:	f001 fe08 	bl	8007714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005b04:	e022      	b.n	8005b4c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <HAL_TIM_MspPostInit+0xbc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d11d      	bne.n	8005b4c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005b1a:	f043 0320 	orr.w	r3, r3, #32
 8005b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <HAL_TIM_MspPostInit+0xb4>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8005b2c:	2340      	movs	r3, #64	; 0x40
 8005b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b30:	2302      	movs	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4619      	mov	r1, r3
 8005b46:	4807      	ldr	r0, [pc, #28]	; (8005b64 <HAL_TIM_MspPostInit+0xc0>)
 8005b48:	f001 fde4 	bl	8007714 <HAL_GPIO_Init>
}
 8005b4c:	bf00      	nop
 8005b4e:	3728      	adds	r7, #40	; 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40021400 	.word	0x40021400

08005b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a34      	ldr	r2, [pc, #208]	; (8005c58 <HAL_UART_MspInit+0xf0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d162      	bne.n	8005c50 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a32      	ldr	r2, [pc, #200]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9a:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <HAL_UART_MspInit+0xf4>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005bc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bd4:	2307      	movs	r3, #7
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd8:	f107 0314 	add.w	r3, r7, #20
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4820      	ldr	r0, [pc, #128]	; (8005c60 <HAL_UART_MspInit+0xf8>)
 8005be0:	f001 fd98 	bl	8007714 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005be4:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005be6:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_UART_MspInit+0x100>)
 8005be8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bf0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bfe:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c04:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c06:	4b17      	ldr	r3, [pc, #92]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c18:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005c24:	480f      	ldr	r0, [pc, #60]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c26:	f001 f977 	bl	8006f18 <HAL_DMA_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005c30:	f7fe fc72 	bl	8004518 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <HAL_UART_MspInit+0xfc>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005c40:	2200      	movs	r2, #0
 8005c42:	2105      	movs	r1, #5
 8005c44:	2027      	movs	r0, #39	; 0x27
 8005c46:	f001 f93c 	bl	8006ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005c4a:	2027      	movs	r0, #39	; 0x27
 8005c4c:	f001 f955 	bl	8006efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c50:	bf00      	nop
 8005c52:	3728      	adds	r7, #40	; 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40004800 	.word	0x40004800
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40020400 	.word	0x40020400
 8005c64:	200097ec 	.word	0x200097ec
 8005c68:	40026028 	.word	0x40026028

08005c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	; 0x30
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	2036      	movs	r0, #54	; 0x36
 8005c82:	f001 f91e 	bl	8006ec2 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c86:	2036      	movs	r0, #54	; 0x36
 8005c88:	f001 f937 	bl	8006efa <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <HAL_InitTick+0xa4>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_InitTick+0xa4>)
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_InitTick+0xa4>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ca8:	f107 0210 	add.w	r2, r7, #16
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 f8ba 	bl	8009e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005cb8:	f004 f874 	bl	8009da4 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <HAL_InitTick+0xa8>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0c9b      	lsrs	r3, r3, #18
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <HAL_InitTick+0xac>)
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <HAL_InitTick+0xb0>)
 8005cd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_InitTick+0xac>)
 8005cd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cdc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005cde:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <HAL_InitTick+0xac>)
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_InitTick+0xac>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_InitTick+0xac>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005cf0:	4809      	ldr	r0, [pc, #36]	; (8005d18 <HAL_InitTick+0xac>)
 8005cf2:	f004 fe6a 	bl	800a9ca <HAL_TIM_Base_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005cfc:	4806      	ldr	r0, [pc, #24]	; (8005d18 <HAL_InitTick+0xac>)
 8005cfe:	f004 feb3 	bl	800aa68 <HAL_TIM_Base_Start_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	e000      	b.n	8005d08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3730      	adds	r7, #48	; 0x30
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40023800 	.word	0x40023800
 8005d14:	431bde83 	.word	0x431bde83
 8005d18:	2000dacc 	.word	0x2000dacc
 8005d1c:	40001000 	.word	0x40001000

08005d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d24:	e7fe      	b.n	8005d24 <NMI_Handler+0x4>

08005d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d26:	b480      	push	{r7}
 8005d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d2a:	e7fe      	b.n	8005d2a <HardFault_Handler+0x4>

08005d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d30:	e7fe      	b.n	8005d30 <MemManage_Handler+0x4>

08005d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d36:	e7fe      	b.n	8005d36 <BusFault_Handler+0x4>

08005d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d3c:	e7fe      	b.n	8005d3c <UsageFault_Handler+0x4>

08005d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
	...

08005d4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <DMA1_Stream1_IRQHandler+0x10>)
 8005d52:	f001 fa79 	bl	8007248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200097ec 	.word	0x200097ec

08005d60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <ADC_IRQHandler+0x10>)
 8005d66:	f000 fb0a 	bl	800637e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20009938 	.word	0x20009938

08005d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <USART3_IRQHandler+0x10>)
 8005d7a:	f005 fedf 	bl	800bb3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	2000984c 	.word	0x2000984c

08005d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <TIM6_DAC_IRQHandler+0x10>)
 8005d8e:	f004 fff9 	bl	800ad84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	2000dacc 	.word	0x2000dacc

08005d9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <DMA2_Stream0_IRQHandler+0x10>)
 8005da2:	f001 fa51 	bl	8007248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200098d8 	.word	0x200098d8

08005db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <OTG_FS_IRQHandler+0x10>)
 8005db6:	f002 f8fd 	bl	8007fb4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000e39c 	.word	0x2000e39c

08005dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
	return 1;
 8005dc8:	2301      	movs	r3, #1
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <_kill>:

int _kill(int pid, int sig)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ddc:	f010 fd6e 	bl	80168bc <__errno>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2216      	movs	r2, #22
 8005de4:	601a      	str	r2, [r3, #0]
	return -1;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <_exit>:

void _exit (int status)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffe7 	bl	8005dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005e04:	e7fe      	b.n	8005e04 <_exit+0x12>

08005e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e00a      	b.n	8005e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e18:	f3af 8000 	nop.w
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	60ba      	str	r2, [r7, #8]
 8005e24:	b2ca      	uxtb	r2, r1
 8005e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	dbf0      	blt.n	8005e18 <_read+0x12>
	}

return len;
 8005e36:	687b      	ldr	r3, [r7, #4]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e009      	b.n	8005e66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	60ba      	str	r2, [r7, #8]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3301      	adds	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	dbf1      	blt.n	8005e52 <_write+0x12>
	}
	return len;
 8005e6e:	687b      	ldr	r3, [r7, #4]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_close>:

int _close(int file)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <_isatty>:

int _isatty(int file)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	return 1;
 8005eb4:	2301      	movs	r3, #1
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ee0:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <_sbrk+0x5c>)
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <_sbrk+0x60>)
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <_sbrk+0x64>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <_sbrk+0x64>)
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <_sbrk+0x68>)
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <_sbrk+0x64>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d207      	bcs.n	8005f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f08:	f010 fcd8 	bl	80168bc <__errno>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	220c      	movs	r2, #12
 8005f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	e009      	b.n	8005f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <_sbrk+0x64>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <_sbrk+0x64>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <_sbrk+0x64>)
 8005f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	2001c000 	.word	0x2001c000
 8005f38:	00000800 	.word	0x00000800
 8005f3c:	20005868 	.word	0x20005868
 8005f40:	2000e6b0 	.word	0x2000e6b0

08005f44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005f54:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <DWT_Delay_Init+0x58>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <DWT_Delay_Init+0x58>)
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <DWT_Delay_Init+0x58>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <DWT_Delay_Init+0x58>)
 8005f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f6a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005f8a:	bf00      	nop
    __ASM volatile ("NOP");
 8005f8c:	bf00      	nop
    __ASM volatile ("NOP");
 8005f8e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <DWT_Delay_Init+0x5c>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005f9c:	2301      	movs	r3, #1
    }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000edf0 	.word	0xe000edf0
 8005fac:	e0001000 	.word	0xe0001000

08005fb0 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <DWT_Delay_us+0x48>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8005fbe:	f003 fee7 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <DWT_Delay_us+0x4c>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0c9b      	lsrs	r3, r3, #18
 8005fcc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8005fd8:	bf00      	nop
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <DWT_Delay_us+0x48>)
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1ad2      	subs	r2, r2, r3
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1acb      	subs	r3, r1, r3
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d3f6      	bcc.n	8005fda <DWT_Delay_us+0x2a>
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	e0001000 	.word	0xe0001000
 8005ffc:	431bde83 	.word	0x431bde83

08006000 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800600a:	2140      	movs	r1, #64	; 0x40
 800600c:	4813      	ldr	r0, [pc, #76]	; (800605c <DS18B20_Start+0x5c>)
 800600e:	f000 f8ab 	bl	8006168 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8006012:	2200      	movs	r2, #0
 8006014:	2140      	movs	r1, #64	; 0x40
 8006016:	4811      	ldr	r0, [pc, #68]	; (800605c <DS18B20_Start+0x5c>)
 8006018:	f001 fd31 	bl	8007a7e <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 800601c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8006020:	f7ff ffc6 	bl	8005fb0 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8006024:	2140      	movs	r1, #64	; 0x40
 8006026:	480d      	ldr	r0, [pc, #52]	; (800605c <DS18B20_Start+0x5c>)
 8006028:	f000 f8bc 	bl	80061a4 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 800602c:	2050      	movs	r0, #80	; 0x50
 800602e:	f7ff ffbf 	bl	8005fb0 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8006032:	2140      	movs	r1, #64	; 0x40
 8006034:	4809      	ldr	r0, [pc, #36]	; (800605c <DS18B20_Start+0x5c>)
 8006036:	f001 fd0b 	bl	8007a50 <HAL_GPIO_ReadPin>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <DS18B20_Start+0x46>
 8006040:	2301      	movs	r3, #1
 8006042:	71fb      	strb	r3, [r7, #7]
 8006044:	e001      	b.n	800604a <DS18B20_Start+0x4a>
	else Response = -1;
 8006046:	23ff      	movs	r3, #255	; 0xff
 8006048:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 800604a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800604e:	f7ff ffaf 	bl	8005fb0 <DWT_Delay_us>

	return Response;
 8006052:	79fb      	ldrb	r3, [r7, #7]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40020000 	.word	0x40020000

08006060 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	481e      	ldr	r0, [pc, #120]	; (80060e8 <DS18B20_Write+0x88>)
 800606e:	f000 f87b 	bl	8006168 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e02e      	b.n	80060d6 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8006078:	79fa      	ldrb	r2, [r7, #7]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	fa42 f303 	asr.w	r3, r2, r3
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	4817      	ldr	r0, [pc, #92]	; (80060e8 <DS18B20_Write+0x88>)
 800608c:	f000 f86c 	bl	8006168 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8006090:	2200      	movs	r2, #0
 8006092:	2140      	movs	r1, #64	; 0x40
 8006094:	4814      	ldr	r0, [pc, #80]	; (80060e8 <DS18B20_Write+0x88>)
 8006096:	f001 fcf2 	bl	8007a7e <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 800609a:	2005      	movs	r0, #5
 800609c:	f7ff ff88 	bl	8005fb0 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80060a0:	2140      	movs	r1, #64	; 0x40
 80060a2:	4811      	ldr	r0, [pc, #68]	; (80060e8 <DS18B20_Write+0x88>)
 80060a4:	f000 f87e 	bl	80061a4 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 80060a8:	2041      	movs	r0, #65	; 0x41
 80060aa:	f7ff ff81 	bl	8005fb0 <DWT_Delay_us>
 80060ae:	e00f      	b.n	80060d0 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	480d      	ldr	r0, [pc, #52]	; (80060e8 <DS18B20_Write+0x88>)
 80060b4:	f000 f858 	bl	8006168 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80060b8:	2200      	movs	r2, #0
 80060ba:	2140      	movs	r1, #64	; 0x40
 80060bc:	480a      	ldr	r0, [pc, #40]	; (80060e8 <DS18B20_Write+0x88>)
 80060be:	f001 fcde 	bl	8007a7e <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 80060c2:	2041      	movs	r0, #65	; 0x41
 80060c4:	f7ff ff74 	bl	8005fb0 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80060c8:	2140      	movs	r1, #64	; 0x40
 80060ca:	4807      	ldr	r0, [pc, #28]	; (80060e8 <DS18B20_Write+0x88>)
 80060cc:	f000 f86a 	bl	80061a4 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b07      	cmp	r3, #7
 80060da:	ddcd      	ble.n	8006078 <DS18B20_Write+0x18>
		}
	}
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40020000 	.word	0x40020000

080060ec <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80060f6:	2140      	movs	r1, #64	; 0x40
 80060f8:	481a      	ldr	r0, [pc, #104]	; (8006164 <DS18B20_Read+0x78>)
 80060fa:	f000 f853 	bl	80061a4 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	e026      	b.n	8006152 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8006104:	2140      	movs	r1, #64	; 0x40
 8006106:	4817      	ldr	r0, [pc, #92]	; (8006164 <DS18B20_Read+0x78>)
 8006108:	f000 f82e 	bl	8006168 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	4814      	ldr	r0, [pc, #80]	; (8006164 <DS18B20_Read+0x78>)
 8006112:	f001 fcb4 	bl	8007a7e <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 8006116:	2005      	movs	r0, #5
 8006118:	f7ff ff4a 	bl	8005fb0 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	4811      	ldr	r0, [pc, #68]	; (8006164 <DS18B20_Read+0x78>)
 8006120:	f000 f840 	bl	80061a4 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8006124:	2140      	movs	r1, #64	; 0x40
 8006126:	480f      	ldr	r0, [pc, #60]	; (8006164 <DS18B20_Read+0x78>)
 8006128:	f001 fc92 	bl	8007a50 <HAL_GPIO_ReadPin>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8006132:	2201      	movs	r2, #1
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	b25a      	sxtb	r2, r3
 800613c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006140:	4313      	orrs	r3, r2
 8006142:	b25b      	sxtb	r3, r3
 8006144:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 8006146:	2032      	movs	r0, #50	; 0x32
 8006148:	f7ff ff32 	bl	8005fb0 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b07      	cmp	r3, #7
 8006156:	ddd5      	ble.n	8006104 <DS18B20_Read+0x18>
	}
	return value;
 8006158:	79fb      	ldrb	r3, [r7, #7]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40020000 	.word	0x40020000

08006168 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006188:	2301      	movs	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8006190:	f107 030c 	add.w	r3, r7, #12
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fabc 	bl	8007714 <HAL_GPIO_Init>
}
 800619c:	bf00      	nop
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fa9e 	bl	8007714 <HAL_GPIO_Init>
}
 80061d8:	bf00      	nop
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061e4:	480d      	ldr	r0, [pc, #52]	; (800621c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061e6:	490e      	ldr	r1, [pc, #56]	; (8006220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061e8:	4a0e      	ldr	r2, [pc, #56]	; (8006224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061ec:	e002      	b.n	80061f4 <LoopCopyDataInit>

080061ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061f2:	3304      	adds	r3, #4

080061f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061f8:	d3f9      	bcc.n	80061ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061fa:	4a0b      	ldr	r2, [pc, #44]	; (8006228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061fc:	4c0b      	ldr	r4, [pc, #44]	; (800622c <LoopFillZerobss+0x26>)
  movs r3, #0
 80061fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006200:	e001      	b.n	8006206 <LoopFillZerobss>

08006202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006204:	3204      	adds	r2, #4

08006206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006208:	d3fb      	bcc.n	8006202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800620a:	f7ff fe9b 	bl	8005f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800620e:	f010 fc51 	bl	8016ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006212:	f7fd fd01 	bl	8003c18 <main>
  bx  lr
 8006216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006218:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800621c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006220:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8006224:	0801b8b4 	.word	0x0801b8b4
  ldr r2, =_sbss
 8006228:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 800622c:	2000e6b0 	.word	0x2000e6b0

08006230 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006230:	e7fe      	b.n	8006230 <CAN1_RX0_IRQHandler>
	...

08006234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006238:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <HAL_Init+0x40>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a0d      	ldr	r2, [pc, #52]	; (8006274 <HAL_Init+0x40>)
 800623e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_Init+0x40>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <HAL_Init+0x40>)
 800624a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800624e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006250:	4b08      	ldr	r3, [pc, #32]	; (8006274 <HAL_Init+0x40>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a07      	ldr	r2, [pc, #28]	; (8006274 <HAL_Init+0x40>)
 8006256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800625c:	2003      	movs	r0, #3
 800625e:	f000 fe25 	bl	8006eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006262:	200f      	movs	r0, #15
 8006264:	f7ff fd02 	bl	8005c6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006268:	f7ff faf8 	bl	800585c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023c00 	.word	0x40023c00

08006278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_IncTick+0x1c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_IncTick+0x20>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4413      	add	r3, r2
 8006288:	4a03      	ldr	r2, [pc, #12]	; (8006298 <HAL_IncTick+0x20>)
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	2000026c 	.word	0x2000026c
 8006298:	2000db14 	.word	0x2000db14

0800629c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return uwTick;
 80062a0:	4b02      	ldr	r3, [pc, #8]	; (80062ac <HAL_GetTick+0x10>)
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	2000db14 	.word	0x2000db14

080062b0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7ff fff0 	bl	800629c <HAL_GetTick>
 80062bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d005      	beq.n	80062d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <HAL_Delay+0x44>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062d6:	bf00      	nop
 80062d8:	f7ff ffe0 	bl	800629c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d8f7      	bhi.n	80062d8 <HAL_Delay+0x28>
  {
  }
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2000026c 	.word	0x2000026c

080062f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e033      	b.n	8006376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff facc 	bl	80058b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d118      	bne.n	8006368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800633e:	f023 0302 	bic.w	r3, r3, #2
 8006342:	f043 0202 	orr.w	r2, r3, #2
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fb72 	bl	8006a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
 8006366:	e001      	b.n	800636c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d049      	beq.n	8006454 <HAL_ADC_IRQHandler+0xd6>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d046      	beq.n	8006454 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d12b      	bne.n	8006444 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d127      	bne.n	8006444 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0220 	bic.w	r2, r2, #32
 800641e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe f831 	bl	80044ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0212 	mvn.w	r2, #18
 8006452:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d057      	beq.n	8006536 <HAL_ADC_IRQHandler+0x1b8>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d054      	beq.n	8006536 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d139      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d12b      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d124      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d11d      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d119      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006500:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0201 	orr.w	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fc0c 	bl	8006d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 020c 	mvn.w	r2, #12
 8006534:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	bf0c      	ite	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	2300      	movne	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <HAL_ADC_IRQHandler+0x21a>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d014      	beq.n	8006598 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10d      	bne.n	8006598 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f920 	bl	80067ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f06f 0201 	mvn.w	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	bf0c      	ite	eq
 80065a6:	2301      	moveq	r3, #1
 80065a8:	2300      	movne	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_ADC_IRQHandler+0x27a>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d012      	beq.n	80065f8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0220 	mvn.w	r2, #32
 80065e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8f9 	bl	80067e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0220 	mvn.w	r2, #32
 80065f6:	601a      	str	r2, [r3, #0]
  }
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_ADC_Start_DMA+0x1e>
 800661a:	2302      	movs	r3, #2
 800661c:	e0bc      	b.n	8006798 <HAL_ADC_Start_DMA+0x198>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d018      	beq.n	8006666 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006644:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <HAL_ADC_Start_DMA+0x1a0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a56      	ldr	r2, [pc, #344]	; (80067a4 <HAL_ADC_Start_DMA+0x1a4>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0c9a      	lsrs	r2, r3, #18
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006658:	e002      	b.n	8006660 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	3b01      	subs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f9      	bne.n	800665a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	f040 8084 	bne.w	800677e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	d106      	bne.n	80066c4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f023 0206 	bic.w	r2, r3, #6
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
 80066c2:	e002      	b.n	80066ca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	4a34      	ldr	r2, [pc, #208]	; (80067a8 <HAL_ADC_Start_DMA+0x1a8>)
 80066d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	4a33      	ldr	r2, [pc, #204]	; (80067ac <HAL_ADC_Start_DMA+0x1ac>)
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <HAL_ADC_Start_DMA+0x1b0>)
 80066e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80066f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006702:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006712:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	334c      	adds	r3, #76	; 0x4c
 800671e:	4619      	mov	r1, r3
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f000 fca6 	bl	8007074 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006728:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <HAL_ADC_Start_DMA+0x1b4>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d129      	bne.n	8006796 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006750:	609a      	str	r2, [r3, #8]
 8006752:	e020      	b.n	8006796 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_ADC_Start_DMA+0x1b8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d11b      	bne.n	8006796 <HAL_ADC_Start_DMA+0x196>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d114      	bne.n	8006796 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	e00b      	b.n	8006796 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f043 0210 	orr.w	r2, r3, #16
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	f043 0201 	orr.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000264 	.word	0x20000264
 80067a4:	431bde83 	.word	0x431bde83
 80067a8:	08006c41 	.word	0x08006c41
 80067ac:	08006cfb 	.word	0x08006cfb
 80067b0:	08006d17 	.word	0x08006d17
 80067b4:	40012300 	.word	0x40012300
 80067b8:	40012000 	.word	0x40012000

080067bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_ADC_ConfigChannel+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e103      	b.n	8006a18 <HAL_ADC_ConfigChannel+0x224>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b09      	cmp	r3, #9
 800681e:	d925      	bls.n	800686c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	4613      	mov	r3, r2
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	4413      	add	r3, r2
 8006834:	3b1e      	subs	r3, #30
 8006836:	2207      	movs	r2, #7
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	43da      	mvns	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	400a      	ands	r2, r1
 8006844:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68d9      	ldr	r1, [r3, #12]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	4618      	mov	r0, r3
 8006858:	4603      	mov	r3, r0
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4403      	add	r3, r0
 800685e:	3b1e      	subs	r3, #30
 8006860:	409a      	lsls	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e022      	b.n	80068b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6919      	ldr	r1, [r3, #16]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4413      	add	r3, r2
 8006880:	2207      	movs	r2, #7
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	400a      	ands	r2, r1
 800688e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6919      	ldr	r1, [r3, #16]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4618      	mov	r0, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4403      	add	r3, r0
 80068a8:	409a      	lsls	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b06      	cmp	r3, #6
 80068b8:	d824      	bhi.n	8006904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	3b05      	subs	r3, #5
 80068cc:	221f      	movs	r2, #31
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43da      	mvns	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	400a      	ands	r2, r1
 80068da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4618      	mov	r0, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	3b05      	subs	r3, #5
 80068f6:	fa00 f203 	lsl.w	r2, r0, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	635a      	str	r2, [r3, #52]	; 0x34
 8006902:	e04c      	b.n	800699e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d824      	bhi.n	8006956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	3b23      	subs	r3, #35	; 0x23
 800691e:	221f      	movs	r2, #31
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43da      	mvns	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	400a      	ands	r2, r1
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	3b23      	subs	r3, #35	; 0x23
 8006948:	fa00 f203 	lsl.w	r2, r0, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
 8006954:	e023      	b.n	800699e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	3b41      	subs	r3, #65	; 0x41
 8006968:	221f      	movs	r2, #31
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43da      	mvns	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	400a      	ands	r2, r1
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	4618      	mov	r0, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	3b41      	subs	r3, #65	; 0x41
 8006992:	fa00 f203 	lsl.w	r2, r0, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <HAL_ADC_ConfigChannel+0x230>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d109      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x1c8>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b12      	cmp	r3, #18
 80069ae:	d105      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80069b0:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <HAL_ADC_ConfigChannel+0x234>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_ADC_ConfigChannel+0x234>)
 80069b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069ba:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_ADC_ConfigChannel+0x230>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d123      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0x21a>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d003      	beq.n	80069d6 <HAL_ADC_ConfigChannel+0x1e2>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b11      	cmp	r3, #17
 80069d4:	d11b      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <HAL_ADC_ConfigChannel+0x234>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <HAL_ADC_ConfigChannel+0x234>)
 80069dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069e0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d111      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <HAL_ADC_ConfigChannel+0x238>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a10      	ldr	r2, [pc, #64]	; (8006a30 <HAL_ADC_ConfigChannel+0x23c>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	0c9a      	lsrs	r2, r3, #18
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006a00:	e002      	b.n	8006a08 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f9      	bne.n	8006a02 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012000 	.word	0x40012000
 8006a28:	40012300 	.word	0x40012300
 8006a2c:	20000264 	.word	0x20000264
 8006a30:	431bde83 	.word	0x431bde83

08006a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006a3c:	4b7e      	ldr	r3, [pc, #504]	; (8006c38 <ADC_Init+0x204>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a7d      	ldr	r2, [pc, #500]	; (8006c38 <ADC_Init+0x204>)
 8006a42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006a46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006a48:	4b7b      	ldr	r3, [pc, #492]	; (8006c38 <ADC_Init+0x204>)
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4979      	ldr	r1, [pc, #484]	; (8006c38 <ADC_Init+0x204>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6859      	ldr	r1, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	021a      	lsls	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6899      	ldr	r1, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <ADC_Init+0x208>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d022      	beq.n	8006b0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6899      	ldr	r1, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	e00f      	b.n	8006b2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0202 	bic.w	r2, r2, #2
 8006b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7e1b      	ldrb	r3, [r3, #24]
 8006b48:	005a      	lsls	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d027      	beq.n	8006bac <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006b86:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	fa92 f2a2 	rbit	r2, r2
 8006b8e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	fab2 f282 	clz	r2, r2
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	fa03 f102 	lsl.w	r1, r3, r2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	e007      	b.n	8006bbc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	051a      	lsls	r2, r3, #20
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bfe:	025a      	lsls	r2, r3, #9
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6899      	ldr	r1, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	029a      	lsls	r2, r3, #10
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012300 	.word	0x40012300
 8006c3c:	0f000001 	.word	0x0f000001

08006c40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d13c      	bne.n	8006cd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d12b      	bne.n	8006ccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d127      	bne.n	8006ccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d119      	bne.n	8006ccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0220 	bic.w	r2, r2, #32
 8006ca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	f043 0201 	orr.w	r2, r3, #1
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fd fbed 	bl	80044ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cd2:	e00e      	b.n	8006cf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fd7d 	bl	80067e0 <HAL_ADC_ErrorCallback>
}
 8006ce6:	e004      	b.n	8006cf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff fd57 	bl	80067bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2240      	movs	r2, #64	; 0x40
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fd52 	bl	80067e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr
	...

08006d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d74:	4013      	ands	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d8a:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <__NVIC_SetPriorityGrouping+0x44>)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	60d3      	str	r3, [r2, #12]
}
 8006d90:	bf00      	nop
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	e000ed00 	.word	0xe000ed00

08006da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <__NVIC_GetPriorityGrouping+0x18>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	f003 0307 	and.w	r3, r3, #7
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	e000ed00 	.word	0xe000ed00

08006dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	db0b      	blt.n	8006de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	4906      	ldr	r1, [pc, #24]	; (8006df0 <__NVIC_EnableIRQ+0x34>)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2001      	movs	r0, #1
 8006dde:	fa00 f202 	lsl.w	r2, r0, r2
 8006de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	e000e100 	.word	0xe000e100

08006df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db0a      	blt.n	8006e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	490c      	ldr	r1, [pc, #48]	; (8006e40 <__NVIC_SetPriority+0x4c>)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	440b      	add	r3, r1
 8006e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e1c:	e00a      	b.n	8006e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	4908      	ldr	r1, [pc, #32]	; (8006e44 <__NVIC_SetPriority+0x50>)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	0112      	lsls	r2, r2, #4
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	440b      	add	r3, r1
 8006e32:	761a      	strb	r2, [r3, #24]
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	e000e100 	.word	0xe000e100
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	; 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	bf28      	it	cs
 8006e66:	2304      	movcs	r3, #4
 8006e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d902      	bls.n	8006e78 <NVIC_EncodePriority+0x30>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3b03      	subs	r3, #3
 8006e76:	e000      	b.n	8006e7a <NVIC_EncodePriority+0x32>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e90:	f04f 31ff 	mov.w	r1, #4294967295
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9a:	43d9      	mvns	r1, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea0:	4313      	orrs	r3, r2
         );
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3724      	adds	r7, #36	; 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff ff4f 	bl	8006d58 <__NVIC_SetPriorityGrouping>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	4603      	mov	r3, r0
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ed4:	f7ff ff64 	bl	8006da0 <__NVIC_GetPriorityGrouping>
 8006ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	6978      	ldr	r0, [r7, #20]
 8006ee0:	f7ff ffb2 	bl	8006e48 <NVIC_EncodePriority>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff81 	bl	8006df4 <__NVIC_SetPriority>
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff57 	bl	8006dbc <__NVIC_EnableIRQ>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f24:	f7ff f9ba 	bl	800629c <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e099      	b.n	8007068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0201 	bic.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f54:	e00f      	b.n	8006f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f56:	f7ff f9a1 	bl	800629c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	d908      	bls.n	8006f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e078      	b.n	8007068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e8      	bne.n	8006f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <HAL_DMA_Init+0x158>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d107      	bne.n	8006fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0307 	bic.w	r3, r3, #7
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b04      	cmp	r3, #4
 8007008:	d117      	bne.n	800703a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 faff 	bl	8007620 <DMA_CheckFifoParam>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007036:	2301      	movs	r3, #1
 8007038:	e016      	b.n	8007068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fab8 	bl	80075b8 <DMA_CalcBaseAndBitshift>
 8007048:	4603      	mov	r3, r0
 800704a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007050:	223f      	movs	r2, #63	; 0x3f
 8007052:	409a      	lsls	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	f010803f 	.word	0xf010803f

08007074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_DMA_Start_IT+0x26>
 8007096:	2302      	movs	r3, #2
 8007098:	e040      	b.n	800711c <HAL_DMA_Start_IT+0xa8>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d12f      	bne.n	800710e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fa4a 	bl	800755c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070cc:	223f      	movs	r2, #63	; 0x3f
 80070ce:	409a      	lsls	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0216 	orr.w	r2, r2, #22
 80070e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0208 	orr.w	r2, r2, #8
 80070fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e005      	b.n	800711a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007116:	2302      	movs	r3, #2
 8007118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007132:	f7ff f8b3 	bl	800629c <HAL_GetTick>
 8007136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d008      	beq.n	8007156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e052      	b.n	80071fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0216 	bic.w	r2, r2, #22
 8007164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695a      	ldr	r2, [r3, #20]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <HAL_DMA_Abort+0x62>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0208 	bic.w	r2, r2, #8
 8007194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071a6:	e013      	b.n	80071d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071a8:	f7ff f878 	bl	800629c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d90c      	bls.n	80071d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e015      	b.n	80071fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e4      	bne.n	80071a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e2:	223f      	movs	r2, #63	; 0x3f
 80071e4:	409a      	lsls	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e00c      	b.n	800723c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2205      	movs	r2, #5
 8007226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
	...

08007248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007254:	4b92      	ldr	r3, [pc, #584]	; (80074a0 <HAL_DMA_IRQHandler+0x258>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a92      	ldr	r2, [pc, #584]	; (80074a4 <HAL_DMA_IRQHandler+0x25c>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	0a9b      	lsrs	r3, r3, #10
 8007260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007272:	2208      	movs	r2, #8
 8007274:	409a      	lsls	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01a      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d013      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a0:	2208      	movs	r2, #8
 80072a2:	409a      	lsls	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0201 	orr.w	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b8:	2201      	movs	r2, #1
 80072ba:	409a      	lsls	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d012      	beq.n	80072ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	2201      	movs	r2, #1
 80072d8:	409a      	lsls	r2, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0202 	orr.w	r2, r3, #2
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ee:	2204      	movs	r2, #4
 80072f0:	409a      	lsls	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d012      	beq.n	8007320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	2204      	movs	r2, #4
 800730e:	409a      	lsls	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f043 0204 	orr.w	r2, r3, #4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	2210      	movs	r2, #16
 8007326:	409a      	lsls	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d043      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d03c      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007342:	2210      	movs	r2, #16
 8007344:	409a      	lsls	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d018      	beq.n	800738a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d108      	bne.n	8007378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d024      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
 8007376:	e01f      	b.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e016      	b.n	80073b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0208 	bic.w	r2, r2, #8
 80073a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	2220      	movs	r2, #32
 80073be:	409a      	lsls	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 808e 	beq.w	80074e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8086 	beq.w	80074e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	2220      	movs	r2, #32
 80073e0:	409a      	lsls	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	d136      	bne.n	8007460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0216 	bic.w	r2, r2, #22
 8007400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <HAL_DMA_IRQHandler+0x1da>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0208 	bic.w	r2, r2, #8
 8007430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	223f      	movs	r2, #63	; 0x3f
 8007438:	409a      	lsls	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	d07d      	beq.n	8007552 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
        }
        return;
 800745e:	e078      	b.n	8007552 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01c      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	2b00      	cmp	r3, #0
 8007482:	d030      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
 800748c:	e02b      	b.n	80074e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d027      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
 800749e:	e022      	b.n	80074e6 <HAL_DMA_IRQHandler+0x29e>
 80074a0:	20000264 	.word	0x20000264
 80074a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0210 	bic.w	r2, r2, #16
 80074c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d032      	beq.n	8007554 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d022      	beq.n	8007540 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2205      	movs	r2, #5
 80074fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	3301      	adds	r3, #1
 8007516:	60bb      	str	r3, [r7, #8]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	429a      	cmp	r2, r3
 800751c:	d307      	bcc.n	800752e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f2      	bne.n	8007512 <HAL_DMA_IRQHandler+0x2ca>
 800752c:	e000      	b.n	8007530 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800752e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
 8007550:	e000      	b.n	8007554 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007552:	bf00      	nop
    }
  }
}
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007578:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d108      	bne.n	800759c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800759a:	e007      	b.n	80075ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
	...

080075b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	3b10      	subs	r3, #16
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <DMA_CalcBaseAndBitshift+0x60>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075d2:	4a12      	ldr	r2, [pc, #72]	; (800761c <DMA_CalcBaseAndBitshift+0x64>)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d909      	bls.n	80075fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075ee:	f023 0303 	bic.w	r3, r3, #3
 80075f2:	1d1a      	adds	r2, r3, #4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	659a      	str	r2, [r3, #88]	; 0x58
 80075f8:	e007      	b.n	800760a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr
 8007618:	aaaaaaab 	.word	0xaaaaaaab
 800761c:	0801b354 	.word	0x0801b354

08007620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d11f      	bne.n	800767a <DMA_CheckFifoParam+0x5a>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b03      	cmp	r3, #3
 800763e:	d856      	bhi.n	80076ee <DMA_CheckFifoParam+0xce>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <DMA_CheckFifoParam+0x28>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007659 	.word	0x08007659
 800764c:	0800766b 	.word	0x0800766b
 8007650:	08007659 	.word	0x08007659
 8007654:	080076ef 	.word	0x080076ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d046      	beq.n	80076f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007668:	e043      	b.n	80076f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007672:	d140      	bne.n	80076f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007678:	e03d      	b.n	80076f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007682:	d121      	bne.n	80076c8 <DMA_CheckFifoParam+0xa8>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d837      	bhi.n	80076fa <DMA_CheckFifoParam+0xda>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <DMA_CheckFifoParam+0x70>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076a7 	.word	0x080076a7
 8007698:	080076a1 	.word	0x080076a1
 800769c:	080076b9 	.word	0x080076b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
      break;
 80076a4:	e030      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d025      	beq.n	80076fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076b6:	e022      	b.n	80076fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076c0:	d11f      	bne.n	8007702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076c6:	e01c      	b.n	8007702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d903      	bls.n	80076d6 <DMA_CheckFifoParam+0xb6>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d003      	beq.n	80076dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076d4:	e018      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e015      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00e      	beq.n	8007706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
      break;
 80076ec:	e00b      	b.n	8007706 <DMA_CheckFifoParam+0xe6>
      break;
 80076ee:	bf00      	nop
 80076f0:	e00a      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;
 80076f2:	bf00      	nop
 80076f4:	e008      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;
 80076f6:	bf00      	nop
 80076f8:	e006      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;
 80076fa:	bf00      	nop
 80076fc:	e004      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;   
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <DMA_CheckFifoParam+0xe8>
      break;
 8007706:	bf00      	nop
    }
  } 
  
  return status; 
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007722:	e16f      	b.n	8007a04 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	2101      	movs	r1, #1
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	fa01 f303 	lsl.w	r3, r1, r3
 8007730:	4013      	ands	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8161 	beq.w	80079fe <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d005      	beq.n	8007754 <HAL_GPIO_Init+0x40>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d130      	bne.n	80077b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	2203      	movs	r2, #3
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4013      	ands	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800778a:	2201      	movs	r2, #1
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4013      	ands	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	f003 0201 	and.w	r2, r3, #1
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d017      	beq.n	80077f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2203      	movs	r2, #3
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4013      	ands	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d123      	bne.n	8007846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	08da      	lsrs	r2, r3, #3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3208      	adds	r2, #8
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	220f      	movs	r2, #15
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	43db      	mvns	r3, r3
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4013      	ands	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	08da      	lsrs	r2, r3, #3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3208      	adds	r2, #8
 8007840:	6939      	ldr	r1, [r7, #16]
 8007842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	2203      	movs	r2, #3
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4013      	ands	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 0203 	and.w	r2, r3, #3
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80bb 	beq.w	80079fe <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007888:	2300      	movs	r3, #0
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	4b64      	ldr	r3, [pc, #400]	; (8007a20 <HAL_GPIO_Init+0x30c>)
 800788e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007890:	4a63      	ldr	r2, [pc, #396]	; (8007a20 <HAL_GPIO_Init+0x30c>)
 8007892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007896:	6453      	str	r3, [r2, #68]	; 0x44
 8007898:	4b61      	ldr	r3, [pc, #388]	; (8007a20 <HAL_GPIO_Init+0x30c>)
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80078a4:	4a5f      	ldr	r2, [pc, #380]	; (8007a24 <HAL_GPIO_Init+0x310>)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	089b      	lsrs	r3, r3, #2
 80078aa:	3302      	adds	r3, #2
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	220f      	movs	r2, #15
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43db      	mvns	r3, r3
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4013      	ands	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a57      	ldr	r2, [pc, #348]	; (8007a28 <HAL_GPIO_Init+0x314>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d031      	beq.n	8007934 <HAL_GPIO_Init+0x220>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a56      	ldr	r2, [pc, #344]	; (8007a2c <HAL_GPIO_Init+0x318>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d02b      	beq.n	8007930 <HAL_GPIO_Init+0x21c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a55      	ldr	r2, [pc, #340]	; (8007a30 <HAL_GPIO_Init+0x31c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d025      	beq.n	800792c <HAL_GPIO_Init+0x218>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a54      	ldr	r2, [pc, #336]	; (8007a34 <HAL_GPIO_Init+0x320>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d01f      	beq.n	8007928 <HAL_GPIO_Init+0x214>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a53      	ldr	r2, [pc, #332]	; (8007a38 <HAL_GPIO_Init+0x324>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d019      	beq.n	8007924 <HAL_GPIO_Init+0x210>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a52      	ldr	r2, [pc, #328]	; (8007a3c <HAL_GPIO_Init+0x328>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <HAL_GPIO_Init+0x20c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a51      	ldr	r2, [pc, #324]	; (8007a40 <HAL_GPIO_Init+0x32c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00d      	beq.n	800791c <HAL_GPIO_Init+0x208>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a50      	ldr	r2, [pc, #320]	; (8007a44 <HAL_GPIO_Init+0x330>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <HAL_GPIO_Init+0x204>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a4f      	ldr	r2, [pc, #316]	; (8007a48 <HAL_GPIO_Init+0x334>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <HAL_GPIO_Init+0x200>
 8007910:	2308      	movs	r3, #8
 8007912:	e010      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007914:	2309      	movs	r3, #9
 8007916:	e00e      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007918:	2307      	movs	r3, #7
 800791a:	e00c      	b.n	8007936 <HAL_GPIO_Init+0x222>
 800791c:	2306      	movs	r3, #6
 800791e:	e00a      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007920:	2305      	movs	r3, #5
 8007922:	e008      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007924:	2304      	movs	r3, #4
 8007926:	e006      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007928:	2303      	movs	r3, #3
 800792a:	e004      	b.n	8007936 <HAL_GPIO_Init+0x222>
 800792c:	2302      	movs	r3, #2
 800792e:	e002      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_GPIO_Init+0x222>
 8007934:	2300      	movs	r3, #0
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	f002 0203 	and.w	r2, r2, #3
 800793c:	0092      	lsls	r2, r2, #2
 800793e:	4093      	lsls	r3, r2
 8007940:	461a      	mov	r2, r3
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007948:	4936      	ldr	r1, [pc, #216]	; (8007a24 <HAL_GPIO_Init+0x310>)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	089b      	lsrs	r3, r3, #2
 800794e:	3302      	adds	r3, #2
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007956:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <HAL_GPIO_Init+0x338>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	43db      	mvns	r3, r3
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4013      	ands	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800797a:	4a34      	ldr	r2, [pc, #208]	; (8007a4c <HAL_GPIO_Init+0x338>)
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007980:	4b32      	ldr	r3, [pc, #200]	; (8007a4c <HAL_GPIO_Init+0x338>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	43db      	mvns	r3, r3
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4013      	ands	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80079a4:	4a29      	ldr	r2, [pc, #164]	; (8007a4c <HAL_GPIO_Init+0x338>)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079aa:	4b28      	ldr	r3, [pc, #160]	; (8007a4c <HAL_GPIO_Init+0x338>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	43db      	mvns	r3, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4013      	ands	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80079ce:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <HAL_GPIO_Init+0x338>)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <HAL_GPIO_Init+0x338>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	43db      	mvns	r3, r3
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4013      	ands	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80079f8:	4a14      	ldr	r2, [pc, #80]	; (8007a4c <HAL_GPIO_Init+0x338>)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	3301      	adds	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f47f ae88 	bne.w	8007724 <HAL_GPIO_Init+0x10>
  }
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40013800 	.word	0x40013800
 8007a28:	40020000 	.word	0x40020000
 8007a2c:	40020400 	.word	0x40020400
 8007a30:	40020800 	.word	0x40020800
 8007a34:	40020c00 	.word	0x40020c00
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	40021400 	.word	0x40021400
 8007a40:	40021800 	.word	0x40021800
 8007a44:	40021c00 	.word	0x40021c00
 8007a48:	40022000 	.word	0x40022000
 8007a4c:	40013c00 	.word	0x40013c00

08007a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e001      	b.n	8007a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	807b      	strh	r3, [r7, #2]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a8e:	787b      	ldrb	r3, [r7, #1]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a94:	887a      	ldrh	r2, [r7, #2]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a9a:	e003      	b.n	8007aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a9c:	887b      	ldrh	r3, [r7, #2]
 8007a9e:	041a      	lsls	r2, r3, #16
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	619a      	str	r2, [r3, #24]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr

08007aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ac0:	887a      	ldrh	r2, [r7, #2]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	041a      	lsls	r2, r3, #16
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	43d9      	mvns	r1, r3
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	400b      	ands	r3, r1
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	619a      	str	r2, [r3, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae2:	b08f      	sub	sp, #60	; 0x3c
 8007ae4:	af0a      	add	r7, sp, #40	; 0x28
 8007ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e054      	b.n	8007b9c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f00e fbf9 	bl	8016304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2203      	movs	r2, #3
 8007b16:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f004 fc76 	bl	800c422 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	687e      	ldr	r6, [r7, #4]
 8007b3e:	466d      	mov	r5, sp
 8007b40:	f106 0410 	add.w	r4, r6, #16
 8007b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b54:	1d33      	adds	r3, r6, #4
 8007b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b58:	6838      	ldr	r0, [r7, #0]
 8007b5a:	f004 fbfb 	bl	800c354 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f004 fc6c 	bl	800c442 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	687e      	ldr	r6, [r7, #4]
 8007b72:	466d      	mov	r5, sp
 8007b74:	f106 0410 	add.w	r4, r6, #16
 8007b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b84:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b88:	1d33      	adds	r3, r6, #4
 8007b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b8c:	6838      	ldr	r0, [r7, #0]
 8007b8e:	f004 fdcf 	bl	800c730 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b089      	sub	sp, #36	; 0x24
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	70fb      	strb	r3, [r7, #3]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70bb      	strb	r3, [r7, #2]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_HCD_HC_Init+0x28>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e076      	b.n	8007cba <HAL_HCD_HC_Init+0x116>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	212c      	movs	r1, #44	; 0x2c
 8007bda:	fb01 f303 	mul.w	r3, r1, r3
 8007bde:	4413      	add	r3, r2
 8007be0:	333d      	adds	r3, #61	; 0x3d
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	212c      	movs	r1, #44	; 0x2c
 8007bec:	fb01 f303 	mul.w	r3, r1, r3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3338      	adds	r3, #56	; 0x38
 8007bf4:	787a      	ldrb	r2, [r7, #1]
 8007bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	212c      	movs	r1, #44	; 0x2c
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	3340      	adds	r3, #64	; 0x40
 8007c06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c08:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	212c      	movs	r1, #44	; 0x2c
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	3339      	adds	r3, #57	; 0x39
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	212c      	movs	r1, #44	; 0x2c
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	4413      	add	r3, r2
 8007c28:	333f      	adds	r3, #63	; 0x3f
 8007c2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007c2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	78ba      	ldrb	r2, [r7, #2]
 8007c34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c38:	b2d0      	uxtb	r0, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	212c      	movs	r1, #44	; 0x2c
 8007c3e:	fb01 f303 	mul.w	r3, r1, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	333a      	adds	r3, #58	; 0x3a
 8007c46:	4602      	mov	r2, r0
 8007c48:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007c4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da09      	bge.n	8007c66 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	212c      	movs	r1, #44	; 0x2c
 8007c58:	fb01 f303 	mul.w	r3, r1, r3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	333b      	adds	r3, #59	; 0x3b
 8007c60:	2201      	movs	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	e008      	b.n	8007c78 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	212c      	movs	r1, #44	; 0x2c
 8007c6c:	fb01 f303 	mul.w	r3, r1, r3
 8007c70:	4413      	add	r3, r2
 8007c72:	333b      	adds	r3, #59	; 0x3b
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	212c      	movs	r1, #44	; 0x2c
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	4413      	add	r3, r2
 8007c84:	333c      	adds	r3, #60	; 0x3c
 8007c86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007c8a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	787c      	ldrb	r4, [r7, #1]
 8007c92:	78ba      	ldrb	r2, [r7, #2]
 8007c94:	78f9      	ldrb	r1, [r7, #3]
 8007c96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	f004 feb8 	bl	800ca1c <USB_HC_Init>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd90      	pop	{r4, r7, pc}

08007cc2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d101      	bne.n	8007ce0 <HAL_HCD_HC_Halt+0x1e>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e00f      	b.n	8007d00 <HAL_HCD_HC_Halt+0x3e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f005 f8f3 	bl	800cedc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	4608      	mov	r0, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	70fb      	strb	r3, [r7, #3]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70bb      	strb	r3, [r7, #2]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	212c      	movs	r1, #44	; 0x2c
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	333b      	adds	r3, #59	; 0x3b
 8007d30:	78ba      	ldrb	r2, [r7, #2]
 8007d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	212c      	movs	r1, #44	; 0x2c
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	333f      	adds	r3, #63	; 0x3f
 8007d42:	787a      	ldrb	r2, [r7, #1]
 8007d44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007d46:	7c3b      	ldrb	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d112      	bne.n	8007d72 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	212c      	movs	r1, #44	; 0x2c
 8007d52:	fb01 f303 	mul.w	r3, r1, r3
 8007d56:	4413      	add	r3, r2
 8007d58:	3342      	adds	r3, #66	; 0x42
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	212c      	movs	r1, #44	; 0x2c
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	4413      	add	r3, r2
 8007d6a:	333d      	adds	r3, #61	; 0x3d
 8007d6c:	7f3a      	ldrb	r2, [r7, #28]
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	e008      	b.n	8007d84 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	212c      	movs	r1, #44	; 0x2c
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3342      	adds	r3, #66	; 0x42
 8007d80:	2202      	movs	r2, #2
 8007d82:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007d84:	787b      	ldrb	r3, [r7, #1]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f200 80c6 	bhi.w	8007f18 <HAL_HCD_HC_SubmitRequest+0x210>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007f05 	.word	0x08007f05
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007e87 	.word	0x08007e87
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8007da4:	7c3b      	ldrb	r3, [r7, #16]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	f040 80b8 	bne.w	8007f1c <HAL_HCD_HC_SubmitRequest+0x214>
 8007dac:	78bb      	ldrb	r3, [r7, #2]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 80b4 	bne.w	8007f1c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8007db4:	8b3b      	ldrh	r3, [r7, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d108      	bne.n	8007dcc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	212c      	movs	r1, #44	; 0x2c
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	3355      	adds	r3, #85	; 0x55
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	212c      	movs	r1, #44	; 0x2c
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3355      	adds	r3, #85	; 0x55
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	212c      	movs	r1, #44	; 0x2c
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	3342      	adds	r3, #66	; 0x42
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007df2:	e093      	b.n	8007f1c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	212c      	movs	r1, #44	; 0x2c
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	4413      	add	r3, r2
 8007e00:	3342      	adds	r3, #66	; 0x42
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
      break;
 8007e06:	e089      	b.n	8007f1c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007e08:	78bb      	ldrb	r3, [r7, #2]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d11d      	bne.n	8007e4a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	212c      	movs	r1, #44	; 0x2c
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	3355      	adds	r3, #85	; 0x55
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	212c      	movs	r1, #44	; 0x2c
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3342      	adds	r3, #66	; 0x42
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007e34:	e073      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	212c      	movs	r1, #44	; 0x2c
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	3342      	adds	r3, #66	; 0x42
 8007e44:	2202      	movs	r2, #2
 8007e46:	701a      	strb	r2, [r3, #0]
      break;
 8007e48:	e069      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	212c      	movs	r1, #44	; 0x2c
 8007e50:	fb01 f303 	mul.w	r3, r1, r3
 8007e54:	4413      	add	r3, r2
 8007e56:	3354      	adds	r3, #84	; 0x54
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	212c      	movs	r1, #44	; 0x2c
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	3342      	adds	r3, #66	; 0x42
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
      break;
 8007e70:	e055      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	212c      	movs	r1, #44	; 0x2c
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3342      	adds	r3, #66	; 0x42
 8007e80:	2202      	movs	r2, #2
 8007e82:	701a      	strb	r2, [r3, #0]
      break;
 8007e84:	e04b      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007e86:	78bb      	ldrb	r3, [r7, #2]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11d      	bne.n	8007ec8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	212c      	movs	r1, #44	; 0x2c
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	3355      	adds	r3, #85	; 0x55
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	212c      	movs	r1, #44	; 0x2c
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	3342      	adds	r3, #66	; 0x42
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007eb2:	e034      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	212c      	movs	r1, #44	; 0x2c
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3342      	adds	r3, #66	; 0x42
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
      break;
 8007ec6:	e02a      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	212c      	movs	r1, #44	; 0x2c
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3354      	adds	r3, #84	; 0x54
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	212c      	movs	r1, #44	; 0x2c
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3342      	adds	r3, #66	; 0x42
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
      break;
 8007eee:	e016      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	212c      	movs	r1, #44	; 0x2c
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3342      	adds	r3, #66	; 0x42
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e00c      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	212c      	movs	r1, #44	; 0x2c
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	4413      	add	r3, r2
 8007f10:	3342      	adds	r3, #66	; 0x42
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
      break;
 8007f16:	e002      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007f1c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	212c      	movs	r1, #44	; 0x2c
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	3344      	adds	r3, #68	; 0x44
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	8b3a      	ldrh	r2, [r7, #24]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	202c      	movs	r0, #44	; 0x2c
 8007f38:	fb00 f303 	mul.w	r3, r0, r3
 8007f3c:	440b      	add	r3, r1
 8007f3e:	334c      	adds	r3, #76	; 0x4c
 8007f40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	212c      	movs	r1, #44	; 0x2c
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3360      	adds	r3, #96	; 0x60
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	212c      	movs	r1, #44	; 0x2c
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	3350      	adds	r3, #80	; 0x50
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	212c      	movs	r1, #44	; 0x2c
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	3339      	adds	r3, #57	; 0x39
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	212c      	movs	r1, #44	; 0x2c
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3361      	adds	r3, #97	; 0x61
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	222c      	movs	r2, #44	; 0x2c
 8007f92:	fb02 f303 	mul.w	r3, r2, r3
 8007f96:	3338      	adds	r3, #56	; 0x38
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	18d1      	adds	r1, r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f004 fe48 	bl	800cc38 <USB_HC_StartXfer>
 8007fa8:	4603      	mov	r3, r0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f004 fb70 	bl	800c6b0 <USB_GetMode>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	f040 80ef 	bne.w	80081b6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f004 fb55 	bl	800c68c <USB_ReadInterrupts>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80e5 	beq.w	80081b4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f004 fb4c 	bl	800c68c <USB_ReadInterrupts>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ffe:	d104      	bne.n	800800a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008008:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f004 fb3c 	bl	800c68c <USB_ReadInterrupts>
 8008014:	4603      	mov	r3, r0
 8008016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801e:	d104      	bne.n	800802a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008028:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f004 fb2c 	bl	800c68c <USB_ReadInterrupts>
 8008034:	4603      	mov	r3, r0
 8008036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800803a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800803e:	d104      	bne.n	800804a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008048:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f004 fb1c 	bl	800c68c <USB_ReadInterrupts>
 8008054:	4603      	mov	r3, r0
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b02      	cmp	r3, #2
 800805c:	d103      	bne.n	8008066 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2202      	movs	r2, #2
 8008064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4618      	mov	r0, r3
 800806c:	f004 fb0e 	bl	800c68c <USB_ReadInterrupts>
 8008070:	4603      	mov	r3, r0
 8008072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d115      	bne.n	80080a8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008084:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f00e f9b2 	bl	8016400 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2101      	movs	r1, #1
 80080a2:	4618      	mov	r0, r3
 80080a4:	f004 fbf8 	bl	800c898 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f004 faed 	bl	800c68c <USB_ReadInterrupts>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080bc:	d102      	bne.n	80080c4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fa01 	bl	80094c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f004 fadf 	bl	800c68c <USB_ReadInterrupts>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d106      	bne.n	80080e6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f00e f975 	bl	80163c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2208      	movs	r2, #8
 80080e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f004 face 	bl	800c68c <USB_ReadInterrupts>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d101      	bne.n	80080fe <HAL_HCD_IRQHandler+0x14a>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <HAL_HCD_IRQHandler+0x14c>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d012      	beq.n	800812a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0210 	bic.w	r2, r2, #16
 8008112:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f904 	bl	8009322 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	699a      	ldr	r2, [r3, #24]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0210 	orr.w	r2, r2, #16
 8008128:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f004 faac 	bl	800c68c <USB_ReadInterrupts>
 8008134:	4603      	mov	r3, r0
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800813e:	d13a      	bne.n	80081b6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f004 feb9 	bl	800cebc <USB_HC_ReadInterrupt>
 800814a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e025      	b.n	800819e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	fa22 f303 	lsr.w	r3, r2, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d018      	beq.n	8008198 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	d106      	bne.n	800818c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8a9 	bl	80082dc <HCD_HC_IN_IRQHandler>
 800818a:	e005      	b.n	8008198 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fcc4 	bl	8008b20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3301      	adds	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3d4      	bcc.n	8008152 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081b0:	615a      	str	r2, [r3, #20]
 80081b2:	e000      	b.n	80081b6 <HAL_HCD_IRQHandler+0x202>
      return;
 80081b4:	bf00      	nop
    }
  }
}
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_HCD_Start+0x16>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e013      	b.n	80081fa <HAL_HCD_Start+0x3e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2101      	movs	r1, #1
 80081e0:	4618      	mov	r0, r3
 80081e2:	f004 fbbc 	bl	800c95e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f004 f909 	bl	800c402 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_HCD_Stop+0x16>
 8008214:	2302      	movs	r3, #2
 8008216:	e00d      	b.n	8008234 <HAL_HCD_Stop+0x32>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f004 ffaf 	bl	800d188 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f004 fb5e 	bl	800c90a <USB_ResetPort>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	212c      	movs	r1, #44	; 0x2c
 800826a:	fb01 f303 	mul.w	r3, r1, r3
 800826e:	4413      	add	r3, r2
 8008270:	3360      	adds	r3, #96	; 0x60
 8008272:	781b      	ldrb	r3, [r3, #0]
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr

0800827e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	212c      	movs	r1, #44	; 0x2c
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	4413      	add	r3, r2
 8008296:	3350      	adds	r3, #80	; 0x50
 8008298:	681b      	ldr	r3, [r3, #0]
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f004 fba2 	bl	800c9fa <USB_GetCurrentFrame>
 80082b6:	4603      	mov	r3, r0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f004 fb7e 	bl	800c9ce <USB_GetHostSpeed>
 80082d2:	4603      	mov	r3, r0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b04      	cmp	r3, #4
 800830a:	d119      	bne.n	8008340 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008318:	461a      	mov	r2, r3
 800831a:	2304      	movs	r3, #4
 800831c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	440a      	add	r2, r1
 8008334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	60d3      	str	r3, [r2, #12]
 800833e:	e101      	b.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008356:	d12b      	bne.n	80083b0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	4413      	add	r3, r2
 8008360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008364:	461a      	mov	r2, r3
 8008366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800836a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	212c      	movs	r1, #44	; 0x2c
 8008372:	fb01 f303 	mul.w	r3, r1, r3
 8008376:	4413      	add	r3, r2
 8008378:	3361      	adds	r3, #97	; 0x61
 800837a:	2207      	movs	r2, #7
 800837c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	4413      	add	r3, r2
 8008386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	440a      	add	r2, r1
 8008394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008398:	f043 0302 	orr.w	r3, r3, #2
 800839c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f004 fd97 	bl	800cedc <USB_HC_Halt>
 80083ae:	e0c9      	b.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d109      	bne.n	80083da <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	461a      	mov	r2, r3
 80083d4:	2320      	movs	r3, #32
 80083d6:	6093      	str	r3, [r2, #8]
 80083d8:	e0b4      	b.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d133      	bne.n	8008458 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	440a      	add	r2, r1
 8008406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840a:	f043 0302 	orr.w	r3, r3, #2
 800840e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	212c      	movs	r1, #44	; 0x2c
 8008416:	fb01 f303 	mul.w	r3, r1, r3
 800841a:	4413      	add	r3, r2
 800841c:	3361      	adds	r3, #97	; 0x61
 800841e:	2205      	movs	r2, #5
 8008420:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842e:	461a      	mov	r2, r3
 8008430:	2310      	movs	r3, #16
 8008432:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008440:	461a      	mov	r2, r3
 8008442:	2308      	movs	r3, #8
 8008444:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f004 fd43 	bl	800cedc <USB_HC_Halt>
 8008456:	e075      	b.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846e:	d134      	bne.n	80084da <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	440a      	add	r2, r1
 8008486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800848a:	f043 0302 	orr.w	r3, r3, #2
 800848e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	212c      	movs	r1, #44	; 0x2c
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3361      	adds	r3, #97	; 0x61
 800849e:	2208      	movs	r2, #8
 80084a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ae:	461a      	mov	r2, r3
 80084b0:	2310      	movs	r3, #16
 80084b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c0:	461a      	mov	r2, r3
 80084c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f004 fd02 	bl	800cedc <USB_HC_Halt>
 80084d8:	e034      	b.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ec:	2b80      	cmp	r3, #128	; 0x80
 80084ee:	d129      	bne.n	8008544 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	440a      	add	r2, r1
 8008506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	212c      	movs	r1, #44	; 0x2c
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	4413      	add	r3, r2
 800851c:	3361      	adds	r3, #97	; 0x61
 800851e:	2206      	movs	r2, #6
 8008520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f004 fcd5 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	461a      	mov	r2, r3
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800855a:	d122      	bne.n	80085a2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	440a      	add	r2, r1
 8008572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008576:	f043 0302 	orr.w	r3, r3, #2
 800857a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f004 fca8 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4413      	add	r3, r2
 8008594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008598:	461a      	mov	r2, r3
 800859a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800859e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80085a0:	e2ba      	b.n	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	f040 811b 	bne.w	80087f0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d019      	beq.n	80085f6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	212c      	movs	r1, #44	; 0x2c
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	4413      	add	r3, r2
 80085ce:	3348      	adds	r3, #72	; 0x48
 80085d0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	0159      	lsls	r1, r3, #5
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	440b      	add	r3, r1
 80085da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80085e4:	1ad2      	subs	r2, r2, r3
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	202c      	movs	r0, #44	; 0x2c
 80085ec:	fb00 f303 	mul.w	r3, r0, r3
 80085f0:	440b      	add	r3, r1
 80085f2:	3350      	adds	r3, #80	; 0x50
 80085f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	212c      	movs	r1, #44	; 0x2c
 80085fc:	fb01 f303 	mul.w	r3, r1, r3
 8008600:	4413      	add	r3, r2
 8008602:	3361      	adds	r3, #97	; 0x61
 8008604:	2201      	movs	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	212c      	movs	r1, #44	; 0x2c
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	4413      	add	r3, r2
 8008614:	335c      	adds	r3, #92	; 0x5c
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008626:	461a      	mov	r2, r3
 8008628:	2301      	movs	r3, #1
 800862a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	212c      	movs	r1, #44	; 0x2c
 8008632:	fb01 f303 	mul.w	r3, r1, r3
 8008636:	4413      	add	r3, r2
 8008638:	333f      	adds	r3, #63	; 0x3f
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	212c      	movs	r1, #44	; 0x2c
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	333f      	adds	r3, #63	; 0x3f
 800864e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008650:	2b02      	cmp	r3, #2
 8008652:	d121      	bne.n	8008698 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4413      	add	r3, r2
 800865c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	440a      	add	r2, r1
 800866a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800866e:	f043 0302 	orr.w	r3, r3, #2
 8008672:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f004 fc2c 	bl	800cedc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	4413      	add	r3, r2
 800868c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008690:	461a      	mov	r2, r3
 8008692:	2310      	movs	r3, #16
 8008694:	6093      	str	r3, [r2, #8]
 8008696:	e066      	b.n	8008766 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	212c      	movs	r1, #44	; 0x2c
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	333f      	adds	r3, #63	; 0x3f
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d127      	bne.n	80086fc <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	212c      	movs	r1, #44	; 0x2c
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	3360      	adds	r3, #96	; 0x60
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	b2d9      	uxtb	r1, r3
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	202c      	movs	r0, #44	; 0x2c
 80086e8:	fb00 f303 	mul.w	r3, r0, r3
 80086ec:	4413      	add	r3, r2
 80086ee:	3360      	adds	r3, #96	; 0x60
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f00d fe91 	bl	801641c <HAL_HCD_HC_NotifyURBChange_Callback>
 80086fa:	e034      	b.n	8008766 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	212c      	movs	r1, #44	; 0x2c
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	4413      	add	r3, r2
 8008708:	333f      	adds	r3, #63	; 0x3f
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d12a      	bne.n	8008766 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	212c      	movs	r1, #44	; 0x2c
 8008716:	fb01 f303 	mul.w	r3, r1, r3
 800871a:	4413      	add	r3, r2
 800871c:	3360      	adds	r3, #96	; 0x60
 800871e:	2201      	movs	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	212c      	movs	r1, #44	; 0x2c
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	4413      	add	r3, r2
 800872e:	3354      	adds	r3, #84	; 0x54
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f083 0301 	eor.w	r3, r3, #1
 8008736:	b2d8      	uxtb	r0, r3
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	212c      	movs	r1, #44	; 0x2c
 800873e:	fb01 f303 	mul.w	r3, r1, r3
 8008742:	4413      	add	r3, r2
 8008744:	3354      	adds	r3, #84	; 0x54
 8008746:	4602      	mov	r2, r0
 8008748:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	b2d9      	uxtb	r1, r3
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	202c      	movs	r0, #44	; 0x2c
 8008754:	fb00 f303 	mul.w	r3, r0, r3
 8008758:	4413      	add	r3, r2
 800875a:	3360      	adds	r3, #96	; 0x60
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f00d fe5b 	bl	801641c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d12b      	bne.n	80087c6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	212c      	movs	r1, #44	; 0x2c
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	4413      	add	r3, r2
 800877a:	3348      	adds	r3, #72	; 0x48
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	202c      	movs	r0, #44	; 0x2c
 8008784:	fb00 f202 	mul.w	r2, r0, r2
 8008788:	440a      	add	r2, r1
 800878a:	3240      	adds	r2, #64	; 0x40
 800878c:	8812      	ldrh	r2, [r2, #0]
 800878e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 81be 	beq.w	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	212c      	movs	r1, #44	; 0x2c
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	3354      	adds	r3, #84	; 0x54
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f083 0301 	eor.w	r3, r3, #1
 80087b0:	b2d8      	uxtb	r0, r3
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	212c      	movs	r1, #44	; 0x2c
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	3354      	adds	r3, #84	; 0x54
 80087c0:	4602      	mov	r2, r0
 80087c2:	701a      	strb	r2, [r3, #0]
}
 80087c4:	e1a8      	b.n	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	212c      	movs	r1, #44	; 0x2c
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	3354      	adds	r3, #84	; 0x54
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f083 0301 	eor.w	r3, r3, #1
 80087da:	b2d8      	uxtb	r0, r3
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	212c      	movs	r1, #44	; 0x2c
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	3354      	adds	r3, #84	; 0x54
 80087ea:	4602      	mov	r2, r0
 80087ec:	701a      	strb	r2, [r3, #0]
}
 80087ee:	e193      	b.n	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b02      	cmp	r3, #2
 8008804:	f040 8106 	bne.w	8008a14 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	440a      	add	r2, r1
 800881e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008822:	f023 0302 	bic.w	r3, r3, #2
 8008826:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	212c      	movs	r1, #44	; 0x2c
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	4413      	add	r3, r2
 8008834:	3361      	adds	r3, #97	; 0x61
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d109      	bne.n	8008850 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	212c      	movs	r1, #44	; 0x2c
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3360      	adds	r3, #96	; 0x60
 800884a:	2201      	movs	r2, #1
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e0c9      	b.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	212c      	movs	r1, #44	; 0x2c
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	3361      	adds	r3, #97	; 0x61
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b05      	cmp	r3, #5
 8008862:	d109      	bne.n	8008878 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	212c      	movs	r1, #44	; 0x2c
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	3360      	adds	r3, #96	; 0x60
 8008872:	2205      	movs	r2, #5
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	e0b5      	b.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	212c      	movs	r1, #44	; 0x2c
 800887e:	fb01 f303 	mul.w	r3, r1, r3
 8008882:	4413      	add	r3, r2
 8008884:	3361      	adds	r3, #97	; 0x61
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b06      	cmp	r3, #6
 800888a:	d009      	beq.n	80088a0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	212c      	movs	r1, #44	; 0x2c
 8008892:	fb01 f303 	mul.w	r3, r1, r3
 8008896:	4413      	add	r3, r2
 8008898:	3361      	adds	r3, #97	; 0x61
 800889a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800889c:	2b08      	cmp	r3, #8
 800889e:	d150      	bne.n	8008942 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	212c      	movs	r1, #44	; 0x2c
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	335c      	adds	r3, #92	; 0x5c
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	202c      	movs	r0, #44	; 0x2c
 80088b8:	fb00 f303 	mul.w	r3, r0, r3
 80088bc:	440b      	add	r3, r1
 80088be:	335c      	adds	r3, #92	; 0x5c
 80088c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	212c      	movs	r1, #44	; 0x2c
 80088c8:	fb01 f303 	mul.w	r3, r1, r3
 80088cc:	4413      	add	r3, r2
 80088ce:	335c      	adds	r3, #92	; 0x5c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d912      	bls.n	80088fc <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	212c      	movs	r1, #44	; 0x2c
 80088dc:	fb01 f303 	mul.w	r3, r1, r3
 80088e0:	4413      	add	r3, r2
 80088e2:	335c      	adds	r3, #92	; 0x5c
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	212c      	movs	r1, #44	; 0x2c
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	3360      	adds	r3, #96	; 0x60
 80088f6:	2204      	movs	r2, #4
 80088f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80088fa:	e073      	b.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	212c      	movs	r1, #44	; 0x2c
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	3360      	adds	r3, #96	; 0x60
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4413      	add	r3, r2
 8008916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008924:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800892c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4413      	add	r3, r2
 8008936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893a:	461a      	mov	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008940:	e050      	b.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	212c      	movs	r1, #44	; 0x2c
 8008948:	fb01 f303 	mul.w	r3, r1, r3
 800894c:	4413      	add	r3, r2
 800894e:	3361      	adds	r3, #97	; 0x61
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d122      	bne.n	800899c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	212c      	movs	r1, #44	; 0x2c
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	4413      	add	r3, r2
 8008962:	3360      	adds	r3, #96	; 0x60
 8008964:	2202      	movs	r2, #2
 8008966:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800897e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008986:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008994:	461a      	mov	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e023      	b.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	212c      	movs	r1, #44	; 0x2c
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	4413      	add	r3, r2
 80089a8:	3361      	adds	r3, #97	; 0x61
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b07      	cmp	r3, #7
 80089ae:	d119      	bne.n	80089e4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	212c      	movs	r1, #44	; 0x2c
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	4413      	add	r3, r2
 80089bc:	335c      	adds	r3, #92	; 0x5c
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	202c      	movs	r0, #44	; 0x2c
 80089c8:	fb00 f303 	mul.w	r3, r0, r3
 80089cc:	440b      	add	r3, r1
 80089ce:	335c      	adds	r3, #92	; 0x5c
 80089d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	212c      	movs	r1, #44	; 0x2c
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	4413      	add	r3, r2
 80089de:	3360      	adds	r3, #96	; 0x60
 80089e0:	2204      	movs	r2, #4
 80089e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f0:	461a      	mov	r2, r3
 80089f2:	2302      	movs	r3, #2
 80089f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	b2d9      	uxtb	r1, r3
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	202c      	movs	r0, #44	; 0x2c
 8008a00:	fb00 f303 	mul.w	r3, r0, r3
 8008a04:	4413      	add	r3, r2
 8008a06:	3360      	adds	r3, #96	; 0x60
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f00d fd05 	bl	801641c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008a12:	e081      	b.n	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f003 0310 	and.w	r3, r3, #16
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d176      	bne.n	8008b18 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	212c      	movs	r1, #44	; 0x2c
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	4413      	add	r3, r2
 8008a36:	333f      	adds	r3, #63	; 0x3f
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d121      	bne.n	8008a82 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	212c      	movs	r1, #44	; 0x2c
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	4413      	add	r3, r2
 8008a4a:	335c      	adds	r3, #92	; 0x5c
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a6a:	f043 0302 	orr.w	r3, r3, #2
 8008a6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f004 fa2e 	bl	800cedc <USB_HC_Halt>
 8008a80:	e041      	b.n	8008b06 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	212c      	movs	r1, #44	; 0x2c
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	333f      	adds	r3, #63	; 0x3f
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	212c      	movs	r1, #44	; 0x2c
 8008a9c:	fb01 f303 	mul.w	r3, r1, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	333f      	adds	r3, #63	; 0x3f
 8008aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d12d      	bne.n	8008b06 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	212c      	movs	r1, #44	; 0x2c
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	335c      	adds	r3, #92	; 0x5c
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d120      	bne.n	8008b06 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3361      	adds	r3, #97	; 0x61
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f004 f9eb 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b12:	461a      	mov	r2, r3
 8008b14:	2310      	movs	r3, #16
 8008b16:	6093      	str	r3, [r2, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d119      	bne.n	8008b84 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	2304      	movs	r3, #4
 8008b60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008b82:	e3ca      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d13e      	bne.n	8008c18 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2320      	movs	r3, #32
 8008baa:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	212c      	movs	r1, #44	; 0x2c
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	333d      	adds	r3, #61	; 0x3d
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 83ac 	bne.w	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	212c      	movs	r1, #44	; 0x2c
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	333d      	adds	r3, #61	; 0x3d
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	212c      	movs	r1, #44	; 0x2c
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	3360      	adds	r3, #96	; 0x60
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	b2d2      	uxtb	r2, r2
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f004 f963 	bl	800cedc <USB_HC_Halt>
}
 8008c16:	e380      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c2e:	d122      	bne.n	8008c76 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c4a:	f043 0302 	orr.w	r3, r3, #2
 8008c4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f004 f93e 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c72:	6093      	str	r3, [r2, #8]
}
 8008c74:	e351      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d150      	bne.n	8008d2e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	212c      	movs	r1, #44	; 0x2c
 8008c92:	fb01 f303 	mul.w	r3, r1, r3
 8008c96:	4413      	add	r3, r2
 8008c98:	335c      	adds	r3, #92	; 0x5c
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d111      	bne.n	8008cd8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	212c      	movs	r1, #44	; 0x2c
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	333d      	adds	r3, #61	; 0x3d
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f004 f8ea 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d14:	461a      	mov	r2, r3
 8008d16:	2301      	movs	r3, #1
 8008d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	212c      	movs	r1, #44	; 0x2c
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	3361      	adds	r3, #97	; 0x61
 8008d28:	2201      	movs	r2, #1
 8008d2a:	701a      	strb	r2, [r3, #0]
}
 8008d2c:	e2f5      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d13c      	bne.n	8008dbe <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	212c      	movs	r1, #44	; 0x2c
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3361      	adds	r3, #97	; 0x61
 8008d52:	2204      	movs	r2, #4
 8008d54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	212c      	movs	r1, #44	; 0x2c
 8008d5c:	fb01 f303 	mul.w	r3, r1, r3
 8008d60:	4413      	add	r3, r2
 8008d62:	333d      	adds	r3, #61	; 0x3d
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	212c      	movs	r1, #44	; 0x2c
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	335c      	adds	r3, #92	; 0x5c
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d94:	f043 0302 	orr.w	r3, r3, #2
 8008d98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f004 f899 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db6:	461a      	mov	r2, r3
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	6093      	str	r3, [r2, #8]
}
 8008dbc:	e2ad      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d12a      	bne.n	8008e2a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de0:	461a      	mov	r2, r3
 8008de2:	2308      	movs	r3, #8
 8008de4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f004 f863 	bl	800cedc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	212c      	movs	r1, #44	; 0x2c
 8008e1c:	fb01 f303 	mul.w	r3, r1, r3
 8008e20:	4413      	add	r3, r2
 8008e22:	3361      	adds	r3, #97	; 0x61
 8008e24:	2205      	movs	r2, #5
 8008e26:	701a      	strb	r2, [r3, #0]
}
 8008e28:	e277      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d150      	bne.n	8008ee2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	212c      	movs	r1, #44	; 0x2c
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	335c      	adds	r3, #92	; 0x5c
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	212c      	movs	r1, #44	; 0x2c
 8008e58:	fb01 f303 	mul.w	r3, r1, r3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3361      	adds	r3, #97	; 0x61
 8008e60:	2203      	movs	r2, #3
 8008e62:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	212c      	movs	r1, #44	; 0x2c
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	4413      	add	r3, r2
 8008e70:	333d      	adds	r3, #61	; 0x3d
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d112      	bne.n	8008e9e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	212c      	movs	r1, #44	; 0x2c
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	333c      	adds	r3, #60	; 0x3c
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	212c      	movs	r1, #44	; 0x2c
 8008e92:	fb01 f303 	mul.w	r3, r1, r3
 8008e96:	4413      	add	r3, r2
 8008e98:	333d      	adds	r3, #61	; 0x3d
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eb8:	f043 0302 	orr.w	r3, r3, #2
 8008ebc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f004 f807 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eda:	461a      	mov	r2, r3
 8008edc:	2310      	movs	r3, #16
 8008ede:	6093      	str	r3, [r2, #8]
}
 8008ee0:	e21b      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef4:	2b80      	cmp	r3, #128	; 0x80
 8008ef6:	d174      	bne.n	8008fe2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d121      	bne.n	8008f44 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	212c      	movs	r1, #44	; 0x2c
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3361      	adds	r3, #97	; 0x61
 8008f0e:	2206      	movs	r2, #6
 8008f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f003 ffcd 	bl	800cedc <USB_HC_Halt>
 8008f42:	e044      	b.n	8008fce <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	212c      	movs	r1, #44	; 0x2c
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	335c      	adds	r3, #92	; 0x5c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	202c      	movs	r0, #44	; 0x2c
 8008f5c:	fb00 f303 	mul.w	r3, r0, r3
 8008f60:	440b      	add	r3, r1
 8008f62:	335c      	adds	r3, #92	; 0x5c
 8008f64:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	212c      	movs	r1, #44	; 0x2c
 8008f6c:	fb01 f303 	mul.w	r3, r1, r3
 8008f70:	4413      	add	r3, r2
 8008f72:	335c      	adds	r3, #92	; 0x5c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d920      	bls.n	8008fbc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	212c      	movs	r1, #44	; 0x2c
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	4413      	add	r3, r2
 8008f86:	335c      	adds	r3, #92	; 0x5c
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	212c      	movs	r1, #44	; 0x2c
 8008f92:	fb01 f303 	mul.w	r3, r1, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	3360      	adds	r3, #96	; 0x60
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	b2d9      	uxtb	r1, r3
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	202c      	movs	r0, #44	; 0x2c
 8008fa8:	fb00 f303 	mul.w	r3, r0, r3
 8008fac:	4413      	add	r3, r2
 8008fae:	3360      	adds	r3, #96	; 0x60
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f00d fa31 	bl	801641c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008fba:	e008      	b.n	8008fce <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	212c      	movs	r1, #44	; 0x2c
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3360      	adds	r3, #96	; 0x60
 8008fca:	2202      	movs	r2, #2
 8008fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	6093      	str	r3, [r2, #8]
}
 8008fe0:	e19b      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff8:	d134      	bne.n	8009064 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	4413      	add	r3, r2
 8009002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	0151      	lsls	r1, r2, #5
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	440a      	add	r2, r1
 8009010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f003 ff59 	bl	800cedc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	4413      	add	r3, r2
 8009032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009036:	461a      	mov	r2, r3
 8009038:	2310      	movs	r3, #16
 800903a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	4413      	add	r3, r2
 8009044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009048:	461a      	mov	r2, r3
 800904a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	212c      	movs	r1, #44	; 0x2c
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	4413      	add	r3, r2
 800905c:	3361      	adds	r3, #97	; 0x61
 800905e:	2208      	movs	r2, #8
 8009060:	701a      	strb	r2, [r3, #0]
}
 8009062:	e15a      	b.n	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	4413      	add	r3, r2
 800906c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b02      	cmp	r3, #2
 8009078:	f040 814f 	bne.w	800931a <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	4413      	add	r3, r2
 8009084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	440a      	add	r2, r1
 8009092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009096:	f023 0302 	bic.w	r3, r3, #2
 800909a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	212c      	movs	r1, #44	; 0x2c
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	3361      	adds	r3, #97	; 0x61
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d17d      	bne.n	80091ac <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	212c      	movs	r1, #44	; 0x2c
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	4413      	add	r3, r2
 80090bc:	3360      	adds	r3, #96	; 0x60
 80090be:	2201      	movs	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	212c      	movs	r1, #44	; 0x2c
 80090c8:	fb01 f303 	mul.w	r3, r1, r3
 80090cc:	4413      	add	r3, r2
 80090ce:	333f      	adds	r3, #63	; 0x3f
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d00a      	beq.n	80090ec <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	212c      	movs	r1, #44	; 0x2c
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	333f      	adds	r3, #63	; 0x3f
 80090e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	f040 8100 	bne.w	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d113      	bne.n	800911c <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	212c      	movs	r1, #44	; 0x2c
 80090fa:	fb01 f303 	mul.w	r3, r1, r3
 80090fe:	4413      	add	r3, r2
 8009100:	3355      	adds	r3, #85	; 0x55
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f083 0301 	eor.w	r3, r3, #1
 8009108:	b2d8      	uxtb	r0, r3
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	212c      	movs	r1, #44	; 0x2c
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	4413      	add	r3, r2
 8009116:	3355      	adds	r3, #85	; 0x55
 8009118:	4602      	mov	r2, r0
 800911a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f040 80e3 	bne.w	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	212c      	movs	r1, #44	; 0x2c
 800912c:	fb01 f303 	mul.w	r3, r1, r3
 8009130:	4413      	add	r3, r2
 8009132:	334c      	adds	r3, #76	; 0x4c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80d8 	beq.w	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	212c      	movs	r1, #44	; 0x2c
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	334c      	adds	r3, #76	; 0x4c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	202c      	movs	r0, #44	; 0x2c
 8009152:	fb00 f202 	mul.w	r2, r0, r2
 8009156:	440a      	add	r2, r1
 8009158:	3240      	adds	r2, #64	; 0x40
 800915a:	8812      	ldrh	r2, [r2, #0]
 800915c:	4413      	add	r3, r2
 800915e:	3b01      	subs	r3, #1
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	202c      	movs	r0, #44	; 0x2c
 8009166:	fb00 f202 	mul.w	r2, r0, r2
 800916a:	440a      	add	r2, r1
 800916c:	3240      	adds	r2, #64	; 0x40
 800916e:	8812      	ldrh	r2, [r2, #0]
 8009170:	fbb3 f3f2 	udiv	r3, r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80b5 	beq.w	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	212c      	movs	r1, #44	; 0x2c
 8009188:	fb01 f303 	mul.w	r3, r1, r3
 800918c:	4413      	add	r3, r2
 800918e:	3355      	adds	r3, #85	; 0x55
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f083 0301 	eor.w	r3, r3, #1
 8009196:	b2d8      	uxtb	r0, r3
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	212c      	movs	r1, #44	; 0x2c
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	4413      	add	r3, r2
 80091a4:	3355      	adds	r3, #85	; 0x55
 80091a6:	4602      	mov	r2, r0
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e09f      	b.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	212c      	movs	r1, #44	; 0x2c
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	3361      	adds	r3, #97	; 0x61
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d109      	bne.n	80091d4 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	212c      	movs	r1, #44	; 0x2c
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	4413      	add	r3, r2
 80091cc:	3360      	adds	r3, #96	; 0x60
 80091ce:	2202      	movs	r2, #2
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	e08b      	b.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	212c      	movs	r1, #44	; 0x2c
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	3361      	adds	r3, #97	; 0x61
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d109      	bne.n	80091fc <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	212c      	movs	r1, #44	; 0x2c
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	3360      	adds	r3, #96	; 0x60
 80091f6:	2202      	movs	r2, #2
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e077      	b.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	212c      	movs	r1, #44	; 0x2c
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	3361      	adds	r3, #97	; 0x61
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b05      	cmp	r3, #5
 800920e:	d109      	bne.n	8009224 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	212c      	movs	r1, #44	; 0x2c
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	4413      	add	r3, r2
 800921c:	3360      	adds	r3, #96	; 0x60
 800921e:	2205      	movs	r2, #5
 8009220:	701a      	strb	r2, [r3, #0]
 8009222:	e063      	b.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	212c      	movs	r1, #44	; 0x2c
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	4413      	add	r3, r2
 8009230:	3361      	adds	r3, #97	; 0x61
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b06      	cmp	r3, #6
 8009236:	d009      	beq.n	800924c <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	212c      	movs	r1, #44	; 0x2c
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	3361      	adds	r3, #97	; 0x61
 8009246:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009248:	2b08      	cmp	r3, #8
 800924a:	d14f      	bne.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	212c      	movs	r1, #44	; 0x2c
 8009252:	fb01 f303 	mul.w	r3, r1, r3
 8009256:	4413      	add	r3, r2
 8009258:	335c      	adds	r3, #92	; 0x5c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	202c      	movs	r0, #44	; 0x2c
 8009264:	fb00 f303 	mul.w	r3, r0, r3
 8009268:	440b      	add	r3, r1
 800926a:	335c      	adds	r3, #92	; 0x5c
 800926c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	212c      	movs	r1, #44	; 0x2c
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	4413      	add	r3, r2
 800927a:	335c      	adds	r3, #92	; 0x5c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d912      	bls.n	80092a8 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	212c      	movs	r1, #44	; 0x2c
 8009288:	fb01 f303 	mul.w	r3, r1, r3
 800928c:	4413      	add	r3, r2
 800928e:	335c      	adds	r3, #92	; 0x5c
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	212c      	movs	r1, #44	; 0x2c
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	4413      	add	r3, r2
 80092a0:	3360      	adds	r3, #96	; 0x60
 80092a2:	2204      	movs	r2, #4
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e021      	b.n	80092ec <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	212c      	movs	r1, #44	; 0x2c
 80092ae:	fb01 f303 	mul.w	r3, r1, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	3360      	adds	r3, #96	; 0x60
 80092b6:	2202      	movs	r2, #2
 80092b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e6:	461a      	mov	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f8:	461a      	mov	r2, r3
 80092fa:	2302      	movs	r3, #2
 80092fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	b2d9      	uxtb	r1, r3
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	202c      	movs	r0, #44	; 0x2c
 8009308:	fb00 f303 	mul.w	r3, r0, r3
 800930c:	4413      	add	r3, r2
 800930e:	3360      	adds	r3, #96	; 0x60
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f00d f881 	bl	801641c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800931a:	bf00      	nop
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b08a      	sub	sp, #40	; 0x28
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	0c5b      	lsrs	r3, r3, #17
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	091b      	lsrs	r3, r3, #4
 8009352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009356:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d004      	beq.n	8009368 <HCD_RXQLVL_IRQHandler+0x46>
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b05      	cmp	r3, #5
 8009362:	f000 80a9 	beq.w	80094b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009366:	e0aa      	b.n	80094be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80a6 	beq.w	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	212c      	movs	r1, #44	; 0x2c
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	3344      	adds	r3, #68	; 0x44
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 809b 	beq.w	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	212c      	movs	r1, #44	; 0x2c
 800938c:	fb01 f303 	mul.w	r3, r1, r3
 8009390:	4413      	add	r3, r2
 8009392:	3350      	adds	r3, #80	; 0x50
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	441a      	add	r2, r3
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	202c      	movs	r0, #44	; 0x2c
 80093a0:	fb00 f303 	mul.w	r3, r0, r3
 80093a4:	440b      	add	r3, r1
 80093a6:	334c      	adds	r3, #76	; 0x4c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d87a      	bhi.n	80094a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	212c      	movs	r1, #44	; 0x2c
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	3344      	adds	r3, #68	; 0x44
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	b292      	uxth	r2, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	f003 f909 	bl	800c5de <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	212c      	movs	r1, #44	; 0x2c
 80093d2:	fb01 f303 	mul.w	r3, r1, r3
 80093d6:	4413      	add	r3, r2
 80093d8:	3344      	adds	r3, #68	; 0x44
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	441a      	add	r2, r3
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	202c      	movs	r0, #44	; 0x2c
 80093e6:	fb00 f303 	mul.w	r3, r0, r3
 80093ea:	440b      	add	r3, r1
 80093ec:	3344      	adds	r3, #68	; 0x44
 80093ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	212c      	movs	r1, #44	; 0x2c
 80093f6:	fb01 f303 	mul.w	r3, r1, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	3350      	adds	r3, #80	; 0x50
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	441a      	add	r2, r3
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	202c      	movs	r0, #44	; 0x2c
 800940a:	fb00 f303 	mul.w	r3, r0, r3
 800940e:	440b      	add	r3, r1
 8009410:	3350      	adds	r3, #80	; 0x50
 8009412:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	4413      	add	r3, r2
 800941c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	0cdb      	lsrs	r3, r3, #19
 8009424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009428:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	212c      	movs	r1, #44	; 0x2c
 8009430:	fb01 f303 	mul.w	r3, r1, r3
 8009434:	4413      	add	r3, r2
 8009436:	3340      	adds	r3, #64	; 0x40
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	4293      	cmp	r3, r2
 8009440:	d13c      	bne.n	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d039      	beq.n	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	4413      	add	r3, r2
 8009450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800945e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009466:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	4413      	add	r3, r2
 8009470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009474:	461a      	mov	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	212c      	movs	r1, #44	; 0x2c
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	4413      	add	r3, r2
 8009486:	3354      	adds	r3, #84	; 0x54
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	f083 0301 	eor.w	r3, r3, #1
 800948e:	b2d8      	uxtb	r0, r3
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	212c      	movs	r1, #44	; 0x2c
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	3354      	adds	r3, #84	; 0x54
 800949e:	4602      	mov	r2, r0
 80094a0:	701a      	strb	r2, [r3, #0]
      break;
 80094a2:	e00b      	b.n	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	212c      	movs	r1, #44	; 0x2c
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3360      	adds	r3, #96	; 0x60
 80094b2:	2204      	movs	r2, #4
 80094b4:	701a      	strb	r2, [r3, #0]
      break;
 80094b6:	e001      	b.n	80094bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80094b8:	bf00      	nop
 80094ba:	e000      	b.n	80094be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80094bc:	bf00      	nop
  }
}
 80094be:	bf00      	nop
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80094f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d10b      	bne.n	8009516 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b01      	cmp	r3, #1
 8009506:	d102      	bne.n	800950e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f00c ff6b 	bl	80163e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f043 0302 	orr.w	r3, r3, #2
 8009514:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b08      	cmp	r3, #8
 800951e:	d132      	bne.n	8009586 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f043 0308 	orr.w	r3, r3, #8
 8009526:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	2b04      	cmp	r3, #4
 8009530:	d126      	bne.n	8009580 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d113      	bne.n	8009562 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009540:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009544:	d106      	bne.n	8009554 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2102      	movs	r1, #2
 800954c:	4618      	mov	r0, r3
 800954e:	f003 f9a3 	bl	800c898 <USB_InitFSLSPClkSel>
 8009552:	e011      	b.n	8009578 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2101      	movs	r1, #1
 800955a:	4618      	mov	r0, r3
 800955c:	f003 f99c 	bl	800c898 <USB_InitFSLSPClkSel>
 8009560:	e00a      	b.n	8009578 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d106      	bne.n	8009578 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009570:	461a      	mov	r2, r3
 8009572:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009576:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f00c ff61 	bl	8016440 <HAL_HCD_PortEnabled_Callback>
 800957e:	e002      	b.n	8009586 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f00c ff6b 	bl	801645c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b20      	cmp	r3, #32
 800958e:	d103      	bne.n	8009598 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f043 0320 	orr.w	r3, r3, #32
 8009596:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800959e:	461a      	mov	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6013      	str	r3, [r2, #0]
}
 80095a4:	bf00      	nop
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	; 0x28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e237      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d050      	beq.n	800966c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095ca:	4ba3      	ldr	r3, [pc, #652]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 030c 	and.w	r3, r3, #12
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d00c      	beq.n	80095f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095d6:	4ba0      	ldr	r3, [pc, #640]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d112      	bne.n	8009608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095e2:	4b9d      	ldr	r3, [pc, #628]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ee:	d10b      	bne.n	8009608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095f0:	4b99      	ldr	r3, [pc, #612]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d036      	beq.n	800966a <HAL_RCC_OscConfig+0xbe>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d132      	bne.n	800966a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e212      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	4b93      	ldr	r3, [pc, #588]	; (800985c <HAL_RCC_OscConfig+0x2b0>)
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d013      	beq.n	8009642 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800961a:	f7fc fe3f 	bl	800629c <HAL_GetTick>
 800961e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009622:	f7fc fe3b 	bl	800629c <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b64      	cmp	r3, #100	; 0x64
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e1fc      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009634:	4b88      	ldr	r3, [pc, #544]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x76>
 8009640:	e014      	b.n	800966c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009642:	f7fc fe2b 	bl	800629c <HAL_GetTick>
 8009646:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009648:	e008      	b.n	800965c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800964a:	f7fc fe27 	bl	800629c <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	2b64      	cmp	r3, #100	; 0x64
 8009656:	d901      	bls.n	800965c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e1e8      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800965c:	4b7e      	ldr	r3, [pc, #504]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1f0      	bne.n	800964a <HAL_RCC_OscConfig+0x9e>
 8009668:	e000      	b.n	800966c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800966a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d077      	beq.n	8009768 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009678:	4b77      	ldr	r3, [pc, #476]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 030c 	and.w	r3, r3, #12
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009684:	4b74      	ldr	r3, [pc, #464]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800968c:	2b08      	cmp	r3, #8
 800968e:	d126      	bne.n	80096de <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009690:	4b71      	ldr	r3, [pc, #452]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d120      	bne.n	80096de <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800969c:	4b6e      	ldr	r3, [pc, #440]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_OscConfig+0x108>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d001      	beq.n	80096b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e1bc      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096b4:	4b68      	ldr	r3, [pc, #416]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	21f8      	movs	r1, #248	; 0xf8
 80096c2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096c4:	69b9      	ldr	r1, [r7, #24]
 80096c6:	fa91 f1a1 	rbit	r1, r1
 80096ca:	6179      	str	r1, [r7, #20]
  return result;
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	fab1 f181 	clz	r1, r1
 80096d2:	b2c9      	uxtb	r1, r1
 80096d4:	408b      	lsls	r3, r1
 80096d6:	4960      	ldr	r1, [pc, #384]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096dc:	e044      	b.n	8009768 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d02a      	beq.n	800973c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096e6:	4b5e      	ldr	r3, [pc, #376]	; (8009860 <HAL_RCC_OscConfig+0x2b4>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096ec:	f7fc fdd6 	bl	800629c <HAL_GetTick>
 80096f0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096f2:	e008      	b.n	8009706 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096f4:	f7fc fdd2 	bl	800629c <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e193      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009706:	4b54      	ldr	r3, [pc, #336]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0f0      	beq.n	80096f4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009712:	4b51      	ldr	r3, [pc, #324]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	21f8      	movs	r1, #248	; 0xf8
 8009720:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009722:	6939      	ldr	r1, [r7, #16]
 8009724:	fa91 f1a1 	rbit	r1, r1
 8009728:	60f9      	str	r1, [r7, #12]
  return result;
 800972a:	68f9      	ldr	r1, [r7, #12]
 800972c:	fab1 f181 	clz	r1, r1
 8009730:	b2c9      	uxtb	r1, r1
 8009732:	408b      	lsls	r3, r1
 8009734:	4948      	ldr	r1, [pc, #288]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009736:	4313      	orrs	r3, r2
 8009738:	600b      	str	r3, [r1, #0]
 800973a:	e015      	b.n	8009768 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800973c:	4b48      	ldr	r3, [pc, #288]	; (8009860 <HAL_RCC_OscConfig+0x2b4>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009742:	f7fc fdab 	bl	800629c <HAL_GetTick>
 8009746:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009748:	e008      	b.n	800975c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800974a:	f7fc fda7 	bl	800629c <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d901      	bls.n	800975c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e168      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800975c:	4b3e      	ldr	r3, [pc, #248]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1f0      	bne.n	800974a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d030      	beq.n	80097d6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d016      	beq.n	80097aa <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800977c:	4b39      	ldr	r3, [pc, #228]	; (8009864 <HAL_RCC_OscConfig+0x2b8>)
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009782:	f7fc fd8b 	bl	800629c <HAL_GetTick>
 8009786:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009788:	e008      	b.n	800979c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800978a:	f7fc fd87 	bl	800629c <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	2b02      	cmp	r3, #2
 8009796:	d901      	bls.n	800979c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e148      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800979c:	4b2e      	ldr	r3, [pc, #184]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 800979e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0f0      	beq.n	800978a <HAL_RCC_OscConfig+0x1de>
 80097a8:	e015      	b.n	80097d6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097aa:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <HAL_RCC_OscConfig+0x2b8>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097b0:	f7fc fd74 	bl	800629c <HAL_GetTick>
 80097b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097b6:	e008      	b.n	80097ca <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097b8:	f7fc fd70 	bl	800629c <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e131      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097ca:	4b23      	ldr	r3, [pc, #140]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80097cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1f0      	bne.n	80097b8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8088 	beq.w	80098f4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097e4:	2300      	movs	r3, #0
 80097e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d110      	bne.n	8009818 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	4b17      	ldr	r3, [pc, #92]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	4a16      	ldr	r2, [pc, #88]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009804:	6413      	str	r3, [r2, #64]	; 0x40
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <HAL_RCC_OscConfig+0x2ac>)
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800980e:	60bb      	str	r3, [r7, #8]
 8009810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009818:	4b13      	ldr	r3, [pc, #76]	; (8009868 <HAL_RCC_OscConfig+0x2bc>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a12      	ldr	r2, [pc, #72]	; (8009868 <HAL_RCC_OscConfig+0x2bc>)
 800981e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009822:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <HAL_RCC_OscConfig+0x2bc>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982c:	2b00      	cmp	r3, #0
 800982e:	d123      	bne.n	8009878 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <HAL_RCC_OscConfig+0x2bc>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a0c      	ldr	r2, [pc, #48]	; (8009868 <HAL_RCC_OscConfig+0x2bc>)
 8009836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800983c:	f7fc fd2e 	bl	800629c <HAL_GetTick>
 8009840:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009842:	e013      	b.n	800986c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009844:	f7fc fd2a 	bl	800629c <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d90c      	bls.n	800986c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e0eb      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
 8009856:	bf00      	nop
 8009858:	40023800 	.word	0x40023800
 800985c:	40023802 	.word	0x40023802
 8009860:	42470000 	.word	0x42470000
 8009864:	42470e80 	.word	0x42470e80
 8009868:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800986c:	4b72      	ldr	r3, [pc, #456]	; (8009a38 <HAL_RCC_OscConfig+0x48c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0e5      	beq.n	8009844 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	4b6f      	ldr	r3, [pc, #444]	; (8009a3c <HAL_RCC_OscConfig+0x490>)
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d015      	beq.n	80098b6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800988a:	f7fc fd07 	bl	800629c <HAL_GetTick>
 800988e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009890:	e00a      	b.n	80098a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009892:	f7fc fd03 	bl	800629c <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d901      	bls.n	80098a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e0c2      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098a8:	4b65      	ldr	r3, [pc, #404]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80098aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ac:	f003 0302 	and.w	r3, r3, #2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0ee      	beq.n	8009892 <HAL_RCC_OscConfig+0x2e6>
 80098b4:	e014      	b.n	80098e0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098b6:	f7fc fcf1 	bl	800629c <HAL_GetTick>
 80098ba:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098bc:	e00a      	b.n	80098d4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098be:	f7fc fced 	bl	800629c <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e0ac      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098d4:	4b5a      	ldr	r3, [pc, #360]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80098d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ee      	bne.n	80098be <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d105      	bne.n	80098f4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098e8:	4b55      	ldr	r3, [pc, #340]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	4a54      	ldr	r2, [pc, #336]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80098ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8097 	beq.w	8009a2c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098fe:	4b50      	ldr	r3, [pc, #320]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 030c 	and.w	r3, r3, #12
 8009906:	2b08      	cmp	r3, #8
 8009908:	d061      	beq.n	80099ce <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d146      	bne.n	80099a0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009912:	4b4c      	ldr	r3, [pc, #304]	; (8009a44 <HAL_RCC_OscConfig+0x498>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009918:	f7fc fcc0 	bl	800629c <HAL_GetTick>
 800991c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009920:	f7fc fcbc 	bl	800629c <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b64      	cmp	r3, #100	; 0x64
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e07d      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009932:	4b43      	ldr	r3, [pc, #268]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1f0      	bne.n	8009920 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800993e:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	4b41      	ldr	r3, [pc, #260]	; (8009a48 <HAL_RCC_OscConfig+0x49c>)
 8009944:	4013      	ands	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	69d1      	ldr	r1, [r2, #28]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6a12      	ldr	r2, [r2, #32]
 800994e:	4311      	orrs	r1, r2
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009954:	0192      	lsls	r2, r2, #6
 8009956:	4311      	orrs	r1, r2
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800995c:	0612      	lsls	r2, r2, #24
 800995e:	4311      	orrs	r1, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009964:	0852      	lsrs	r2, r2, #1
 8009966:	3a01      	subs	r2, #1
 8009968:	0412      	lsls	r2, r2, #16
 800996a:	430a      	orrs	r2, r1
 800996c:	4934      	ldr	r1, [pc, #208]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 800996e:	4313      	orrs	r3, r2
 8009970:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009972:	4b34      	ldr	r3, [pc, #208]	; (8009a44 <HAL_RCC_OscConfig+0x498>)
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009978:	f7fc fc90 	bl	800629c <HAL_GetTick>
 800997c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009980:	f7fc fc8c 	bl	800629c <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b64      	cmp	r3, #100	; 0x64
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e04d      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009992:	4b2b      	ldr	r3, [pc, #172]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <HAL_RCC_OscConfig+0x3d4>
 800999e:	e045      	b.n	8009a2c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099a0:	4b28      	ldr	r3, [pc, #160]	; (8009a44 <HAL_RCC_OscConfig+0x498>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a6:	f7fc fc79 	bl	800629c <HAL_GetTick>
 80099aa:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ae:	f7fc fc75 	bl	800629c <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b64      	cmp	r3, #100	; 0x64
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e036      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099c0:	4b1f      	ldr	r3, [pc, #124]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f0      	bne.n	80099ae <HAL_RCC_OscConfig+0x402>
 80099cc:	e02e      	b.n	8009a2c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e029      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80099da:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <HAL_RCC_OscConfig+0x494>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d11c      	bne.n	8009a28 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d115      	bne.n	8009a28 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	099b      	lsrs	r3, r3, #6
 8009a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d10d      	bne.n	8009a28 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d106      	bne.n	8009a28 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d001      	beq.n	8009a2c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e000      	b.n	8009a2e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40007000 	.word	0x40007000
 8009a3c:	40023870 	.word	0x40023870
 8009a40:	40023800 	.word	0x40023800
 8009a44:	42470060 	.word	0x42470060
 8009a48:	f0bc8000 	.word	0xf0bc8000

08009a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0d2      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a60:	4b6b      	ldr	r3, [pc, #428]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d90c      	bls.n	8009a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a6e:	4b68      	ldr	r3, [pc, #416]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	b2d2      	uxtb	r2, r2
 8009a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a76:	4b66      	ldr	r3, [pc, #408]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d001      	beq.n	8009a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e0be      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d020      	beq.n	8009ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009aa0:	4b5c      	ldr	r3, [pc, #368]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	4a5b      	ldr	r2, [pc, #364]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009ab8:	4b56      	ldr	r3, [pc, #344]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	4a55      	ldr	r2, [pc, #340]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009ac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ac4:	4b53      	ldr	r3, [pc, #332]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	4950      	ldr	r1, [pc, #320]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d040      	beq.n	8009b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d107      	bne.n	8009afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aea:	4b4a      	ldr	r3, [pc, #296]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d115      	bne.n	8009b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e085      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d107      	bne.n	8009b12 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b02:	4b44      	ldr	r3, [pc, #272]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d109      	bne.n	8009b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e079      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b12:	4b40      	ldr	r3, [pc, #256]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e071      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b22:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f023 0203 	bic.w	r2, r3, #3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4939      	ldr	r1, [pc, #228]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b34:	f7fc fbb2 	bl	800629c <HAL_GetTick>
 8009b38:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b3a:	e00a      	b.n	8009b52 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b3c:	f7fc fbae 	bl	800629c <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e059      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b52:	4b30      	ldr	r3, [pc, #192]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f003 020c 	and.w	r2, r3, #12
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d1eb      	bne.n	8009b3c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b64:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d20c      	bcs.n	8009b8c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b72:	4b27      	ldr	r3, [pc, #156]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	b2d2      	uxtb	r2, r2
 8009b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b7a:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d001      	beq.n	8009b8c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e03c      	b.n	8009c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d008      	beq.n	8009baa <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b98:	4b1e      	ldr	r3, [pc, #120]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	491b      	ldr	r1, [pc, #108]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0308 	and.w	r3, r3, #8
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bb6:	4b17      	ldr	r3, [pc, #92]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4913      	ldr	r1, [pc, #76]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009bca:	f000 f82b 	bl	8009c24 <HAL_RCC_GetSysClockFreq>
 8009bce:	4601      	mov	r1, r0
 8009bd0:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bd8:	22f0      	movs	r2, #240	; 0xf0
 8009bda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	fa92 f2a2 	rbit	r2, r2
 8009be2:	60fa      	str	r2, [r7, #12]
  return result;
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	fab2 f282 	clz	r2, r2
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	40d3      	lsrs	r3, r2
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <HAL_RCC_ClockConfig+0x1cc>)
 8009bf0:	5cd3      	ldrb	r3, [r2, r3]
 8009bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8009bf6:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <HAL_RCC_ClockConfig+0x1d0>)
 8009bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009bfa:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <HAL_RCC_ClockConfig+0x1d4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fc f834 	bl	8005c6c <HAL_InitTick>

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40023c00 	.word	0x40023c00
 8009c14:	40023800 	.word	0x40023800
 8009c18:	0801b33c 	.word	0x0801b33c
 8009c1c:	20000264 	.word	0x20000264
 8009c20:	20000268 	.word	0x20000268

08009c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6079      	str	r1, [r7, #4]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	60f9      	str	r1, [r7, #12]
 8009c32:	2100      	movs	r1, #0
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009c36:	2100      	movs	r1, #0
 8009c38:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c3a:	4952      	ldr	r1, [pc, #328]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c3c:	6889      	ldr	r1, [r1, #8]
 8009c3e:	f001 010c 	and.w	r1, r1, #12
 8009c42:	2908      	cmp	r1, #8
 8009c44:	d00d      	beq.n	8009c62 <HAL_RCC_GetSysClockFreq+0x3e>
 8009c46:	2908      	cmp	r1, #8
 8009c48:	f200 8094 	bhi.w	8009d74 <HAL_RCC_GetSysClockFreq+0x150>
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_RCC_GetSysClockFreq+0x32>
 8009c50:	2904      	cmp	r1, #4
 8009c52:	d003      	beq.n	8009c5c <HAL_RCC_GetSysClockFreq+0x38>
 8009c54:	e08e      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c56:	4b4c      	ldr	r3, [pc, #304]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x164>)
 8009c58:	60bb      	str	r3, [r7, #8]
       break;
 8009c5a:	e08e      	b.n	8009d7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c5c:	4b4b      	ldr	r3, [pc, #300]	; (8009d8c <HAL_RCC_GetSysClockFreq+0x168>)
 8009c5e:	60bb      	str	r3, [r7, #8]
      break;
 8009c60:	e08b      	b.n	8009d7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c62:	4948      	ldr	r1, [pc, #288]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c64:	6849      	ldr	r1, [r1, #4]
 8009c66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009c6a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c6c:	4945      	ldr	r1, [pc, #276]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c6e:	6849      	ldr	r1, [r1, #4]
 8009c70:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d024      	beq.n	8009cc2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c78:	4942      	ldr	r1, [pc, #264]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c7a:	6849      	ldr	r1, [r1, #4]
 8009c7c:	0989      	lsrs	r1, r1, #6
 8009c7e:	4608      	mov	r0, r1
 8009c80:	f04f 0100 	mov.w	r1, #0
 8009c84:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009c88:	f04f 0500 	mov.w	r5, #0
 8009c8c:	ea00 0204 	and.w	r2, r0, r4
 8009c90:	ea01 0305 	and.w	r3, r1, r5
 8009c94:	493d      	ldr	r1, [pc, #244]	; (8009d8c <HAL_RCC_GetSysClockFreq+0x168>)
 8009c96:	fb01 f003 	mul.w	r0, r1, r3
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	fb01 f102 	mul.w	r1, r1, r2
 8009ca0:	1844      	adds	r4, r0, r1
 8009ca2:	493a      	ldr	r1, [pc, #232]	; (8009d8c <HAL_RCC_GetSysClockFreq+0x168>)
 8009ca4:	fba2 0101 	umull	r0, r1, r2, r1
 8009ca8:	1863      	adds	r3, r4, r1
 8009caa:	4619      	mov	r1, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	f7f6 ffa2 	bl	8000bfc <__aeabi_uldivmod>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e04a      	b.n	8009d58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cc2:	4b30      	ldr	r3, [pc, #192]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	461a      	mov	r2, r3
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009cd2:	f04f 0100 	mov.w	r1, #0
 8009cd6:	ea02 0400 	and.w	r4, r2, r0
 8009cda:	ea03 0501 	and.w	r5, r3, r1
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	014b      	lsls	r3, r1, #5
 8009cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009cf0:	0142      	lsls	r2, r0, #5
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	1b00      	subs	r0, r0, r4
 8009cf8:	eb61 0105 	sbc.w	r1, r1, r5
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	018b      	lsls	r3, r1, #6
 8009d06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009d0a:	0182      	lsls	r2, r0, #6
 8009d0c:	1a12      	subs	r2, r2, r0
 8009d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f04f 0100 	mov.w	r1, #0
 8009d1a:	00d9      	lsls	r1, r3, #3
 8009d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d20:	00d0      	lsls	r0, r2, #3
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	1912      	adds	r2, r2, r4
 8009d28:	eb45 0303 	adc.w	r3, r5, r3
 8009d2c:	f04f 0000 	mov.w	r0, #0
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	0299      	lsls	r1, r3, #10
 8009d36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009d3a:	0290      	lsls	r0, r2, #10
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4610      	mov	r0, r2
 8009d42:	4619      	mov	r1, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	f7f6 ff56 	bl	8000bfc <__aeabi_uldivmod>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4613      	mov	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d58:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	0c1b      	lsrs	r3, r3, #16
 8009d5e:	f003 0303 	and.w	r3, r3, #3
 8009d62:	3301      	adds	r3, #1
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d70:	60bb      	str	r3, [r7, #8]
      break;
 8009d72:	e002      	b.n	8009d7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x164>)
 8009d76:	60bb      	str	r3, [r7, #8]
      break;
 8009d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bdb0      	pop	{r4, r5, r7, pc}
 8009d84:	40023800 	.word	0x40023800
 8009d88:	00f42400 	.word	0x00f42400
 8009d8c:	017d7840 	.word	0x017d7840

08009d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d94:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009d96:	681b      	ldr	r3, [r3, #0]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bc80      	pop	{r7}
 8009d9e:	4770      	bx	lr
 8009da0:	20000264 	.word	0x20000264

08009da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009daa:	f7ff fff1 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009dae:	4601      	mov	r1, r0
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009db8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8009dbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	fa92 f2a2 	rbit	r2, r2
 8009dc4:	603a      	str	r2, [r7, #0]
  return result;
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	fab2 f282 	clz	r2, r2
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	40d3      	lsrs	r3, r2
 8009dd0:	4a04      	ldr	r2, [pc, #16]	; (8009de4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009dd2:	5cd3      	ldrb	r3, [r2, r3]
 8009dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	40023800 	.word	0x40023800
 8009de4:	0801b34c 	.word	0x0801b34c

08009de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8009dee:	f7ff ffcf 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009df2:	4601      	mov	r1, r0
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009dfc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8009e00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	fa92 f2a2 	rbit	r2, r2
 8009e08:	603a      	str	r2, [r7, #0]
  return result;
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	fab2 f282 	clz	r2, r2
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	40d3      	lsrs	r3, r2
 8009e14:	4a04      	ldr	r2, [pc, #16]	; (8009e28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009e16:	5cd3      	ldrb	r3, [r2, r3]
 8009e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	40023800 	.word	0x40023800
 8009e28:	0801b34c 	.word	0x0801b34c

08009e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	220f      	movs	r2, #15
 8009e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009e3c:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <HAL_RCC_GetClockConfig+0x58>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f003 0203 	and.w	r2, r3, #3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009e48:	4b0e      	ldr	r3, [pc, #56]	; (8009e84 <HAL_RCC_GetClockConfig+0x58>)
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <HAL_RCC_GetClockConfig+0x58>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <HAL_RCC_GetClockConfig+0x58>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	08db      	lsrs	r3, r3, #3
 8009e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <HAL_RCC_GetClockConfig+0x5c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 020f 	and.w	r2, r3, #15
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	601a      	str	r2, [r3, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr
 8009e84:	40023800 	.word	0x40023800
 8009e88:	40023c00 	.word	0x40023c00

08009e8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08a      	sub	sp, #40	; 0x28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d14c      	bne.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009eb0:	4b6d      	ldr	r3, [pc, #436]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009eb6:	f7fc f9f1 	bl	800629c <HAL_GetTick>
 8009eba:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ebc:	e008      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ebe:	f7fc f9ed 	bl	800629c <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e0c7      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ed0:	4b66      	ldr	r3, [pc, #408]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f0      	bne.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8009ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	fa92 f2a2 	rbit	r2, r2
 8009eec:	613a      	str	r2, [r7, #16]
  return result;
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	fab2 f282 	clz	r2, r2
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	fa03 f202 	lsl.w	r2, r3, r2
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8009f02:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f04:	69f9      	ldr	r1, [r7, #28]
 8009f06:	fa91 f1a1 	rbit	r1, r1
 8009f0a:	61b9      	str	r1, [r7, #24]
  return result;
 8009f0c:	69b9      	ldr	r1, [r7, #24]
 8009f0e:	fab1 f181 	clz	r1, r1
 8009f12:	b2c9      	uxtb	r1, r1
 8009f14:	408b      	lsls	r3, r1
 8009f16:	4955      	ldr	r1, [pc, #340]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f1e:	4b52      	ldr	r3, [pc, #328]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009f20:	2201      	movs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f24:	f7fc f9ba 	bl	800629c <HAL_GetTick>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f2c:	f7fc f9b6 	bl	800629c <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e090      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f3e:	4b4b      	ldr	r3, [pc, #300]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0f0      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8083 	beq.w	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	4b43      	ldr	r3, [pc, #268]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	4a42      	ldr	r2, [pc, #264]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f66:	6413      	str	r3, [r2, #64]	; 0x40
 8009f68:	4b40      	ldr	r3, [pc, #256]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f74:	4b3e      	ldr	r3, [pc, #248]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a3d      	ldr	r2, [pc, #244]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f7e:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f80:	f7fc f98c 	bl	800629c <HAL_GetTick>
 8009f84:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f88:	f7fc f988 	bl	800629c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e062      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f9a:	4b35      	ldr	r3, [pc, #212]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fa6:	4b31      	ldr	r3, [pc, #196]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fae:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d02f      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d028      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fc4:	4b29      	ldr	r3, [pc, #164]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fcc:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fce:	4b29      	ldr	r3, [pc, #164]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fd4:	4b27      	ldr	r3, [pc, #156]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fda:	4a24      	ldr	r2, [pc, #144]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fe0:	4b22      	ldr	r3, [pc, #136]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d114      	bne.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009fec:	f7fc f956 	bl	800629c <HAL_GetTick>
 8009ff0:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff2:	e00a      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ff4:	f7fc f952 	bl	800629c <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a002:	4293      	cmp	r3, r2
 800a004:	d901      	bls.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e02a      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a00a:	4b18      	ldr	r3, [pc, #96]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0ee      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a01e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a022:	d10d      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a024:	4b11      	ldr	r3, [pc, #68]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a038:	490c      	ldr	r1, [pc, #48]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	608b      	str	r3, [r1, #8]
 800a03e:	e005      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a040:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4a09      	ldr	r2, [pc, #36]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a046:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a04a:	6093      	str	r3, [r2, #8]
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a04e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a058:	4904      	ldr	r1, [pc, #16]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3728      	adds	r7, #40	; 0x28
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	42470068 	.word	0x42470068
 800a06c:	40023800 	.word	0x40023800
 800a070:	40007000 	.word	0x40007000
 800a074:	42470e40 	.word	0x42470e40

0800a078 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e07c      	b.n	800a184 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	7f5b      	ldrb	r3, [r3, #29]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7fb fc8a 	bl	80059b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	22ca      	movs	r2, #202	; 0xca
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2253      	movs	r2, #83	; 0x53
 800a0b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fb8d 	bl	800a7d6 <RTC_EnterInitMode>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	22ff      	movs	r2, #255	; 0xff
 800a0c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2204      	movs	r2, #4
 800a0ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e057      	b.n	800a184 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6899      	ldr	r1, [r3, #8]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	68d2      	ldr	r2, [r2, #12]
 800a10e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6919      	ldr	r1, [r3, #16]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	041a      	lsls	r2, r3, #16
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a132:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fb26 	bl	800a786 <HAL_RTC_WaitForSynchro>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d008      	beq.n	800a152 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	22ff      	movs	r2, #255	; 0xff
 800a146:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e018      	b.n	800a184 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a182:	2300      	movs	r3, #0
  }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a18c:	b590      	push	{r4, r7, lr}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7f1b      	ldrb	r3, [r3, #28]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RTC_SetTime+0x1c>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e0a3      	b.n	800a2f0 <HAL_RTC_SetTime+0x164>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d126      	bne.n	800a208 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fb2b 	bl	800a82e <RTC_ByteToBcd2>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fb24 	bl	800a82e <RTC_ByteToBcd2>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a1ea:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	789b      	ldrb	r3, [r3, #2]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fb1c 	bl	800a82e <RTC_ByteToBcd2>
 800a1f6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a1f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	78db      	ldrb	r3, [r3, #3]
 800a200:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	e018      	b.n	800a23a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2200      	movs	r2, #0
 800a21a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a228:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a22e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	78db      	ldrb	r3, [r3, #3]
 800a234:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	22ca      	movs	r2, #202	; 0xca
 800a240:	625a      	str	r2, [r3, #36]	; 0x24
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2253      	movs	r2, #83	; 0x53
 800a248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 fac3 	bl	800a7d6 <RTC_EnterInitMode>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	22ff      	movs	r2, #255	; 0xff
 800a25c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2204      	movs	r2, #4
 800a262:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e040      	b.n	800a2f0 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a278:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a27c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a28c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6899      	ldr	r1, [r3, #8]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2b4:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 fa65 	bl	800a786 <HAL_RTC_WaitForSynchro>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	22ff      	movs	r2, #255	; 0xff
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2204      	movs	r2, #4
 800a2ce:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e00a      	b.n	800a2f0 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	22ff      	movs	r2, #255	; 0xff
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
  }
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd90      	pop	{r4, r7, pc}

0800a2f8 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a312:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a316:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	0c1b      	lsrs	r3, r3, #16
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	0a1b      	lsrs	r3, r3, #8
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	b2da      	uxtb	r2, r3
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a340:	b2da      	uxtb	r2, r3
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	0c1b      	lsrs	r3, r3, #16
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a350:	b2da      	uxtb	r2, r3
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d11a      	bne.n	800a392 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fa81 	bl	800a868 <RTC_Bcd2ToByte>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fa78 	bl	800a868 <RTC_Bcd2ToByte>
 800a378:	4603      	mov	r3, r0
 800a37a:	461a      	mov	r2, r3
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	789b      	ldrb	r3, [r3, #2]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fa6f 	bl	800a868 <RTC_Bcd2ToByte>
 800a38a:	4603      	mov	r3, r0
 800a38c:	461a      	mov	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7f1b      	ldrb	r3, [r3, #28]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d101      	bne.n	800a3b8 <HAL_RTC_SetDate+0x1c>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	e08d      	b.n	800a4d4 <HAL_RTC_SetDate+0x138>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10e      	bne.n	800a3e8 <HAL_RTC_SetDate+0x4c>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	f023 0310 	bic.w	r3, r3, #16
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	330a      	adds	r3, #10
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11c      	bne.n	800a428 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	78db      	ldrb	r3, [r3, #3]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fa1b 	bl	800a82e <RTC_ByteToBcd2>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 fa14 	bl	800a82e <RTC_ByteToBcd2>
 800a406:	4603      	mov	r3, r0
 800a408:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a40a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	789b      	ldrb	r3, [r3, #2]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fa0c 	bl	800a82e <RTC_ByteToBcd2>
 800a416:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a418:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]
 800a426:	e00e      	b.n	800a446 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	78db      	ldrb	r3, [r3, #3]
 800a42c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a434:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a43a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a442:	4313      	orrs	r3, r2
 800a444:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	22ca      	movs	r2, #202	; 0xca
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2253      	movs	r2, #83	; 0x53
 800a454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f9bd 	bl	800a7d6 <RTC_EnterInitMode>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	22ff      	movs	r2, #255	; 0xff
 800a468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2204      	movs	r2, #4
 800a46e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e02c      	b.n	800a4d4 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a484:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a488:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a498:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 f973 	bl	800a786 <HAL_RTC_WaitForSynchro>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	22ff      	movs	r2, #255	; 0xff
 800a4ac:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e00a      	b.n	800a4d4 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	22ff      	movs	r2, #255	; 0xff
 800a4c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
  }
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}

0800a4dc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	0c1b      	lsrs	r3, r3, #16
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	0a1b      	lsrs	r3, r3, #8
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	f003 031f 	and.w	r3, r3, #31
 800a510:	b2da      	uxtb	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	0b5b      	lsrs	r3, r3, #13
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d11a      	bne.n	800a570 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	78db      	ldrb	r3, [r3, #3]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f992 	bl	800a868 <RTC_Bcd2ToByte>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f989 	bl	800a868 <RTC_Bcd2ToByte>
 800a556:	4603      	mov	r3, r0
 800a558:	461a      	mov	r2, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	789b      	ldrb	r3, [r3, #2]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f980 	bl	800a868 <RTC_Bcd2ToByte>
 800a568:	4603      	mov	r3, r0
 800a56a:	461a      	mov	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a57a:	b590      	push	{r4, r7, lr}
 800a57c:	b087      	sub	sp, #28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	7f1b      	ldrb	r3, [r3, #28]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_RTC_SetAlarm+0x20>
 800a596:	2302      	movs	r3, #2
 800a598:	e0f1      	b.n	800a77e <HAL_RTC_SetAlarm+0x204>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d136      	bne.n	800a61a <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f932 	bl	800a82e <RTC_ByteToBcd2>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	785b      	ldrb	r3, [r3, #1]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f92b 	bl	800a82e <RTC_ByteToBcd2>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a5dc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	789b      	ldrb	r3, [r3, #2]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f923 	bl	800a82e <RTC_ByteToBcd2>
 800a5e8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a5ea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	78db      	ldrb	r3, [r3, #3]
 800a5f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a5f4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	7d1b      	ldrb	r3, [r3, #20]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f916 	bl	800a82e <RTC_ByteToBcd2>
 800a602:	4603      	mov	r3, r0
 800a604:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a606:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a60e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e022      	b.n	800a660 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a63a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a640:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	78db      	ldrb	r3, [r3, #3]
 800a646:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a648:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	7d1b      	ldrb	r3, [r3, #20]
 800a64e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a650:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a656:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	22ca      	movs	r2, #202	; 0xca
 800a666:	625a      	str	r2, [r3, #36]	; 0x24
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2253      	movs	r2, #83	; 0x53
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a678:	d13b      	bne.n	800a6f2 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a688:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a698:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a69a:	f7fb fdff 	bl	800629c <HAL_GetTick>
 800a69e:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a6a0:	e013      	b.n	800a6ca <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6a2:	f7fb fdfb 	bl	800629c <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6b0:	d90b      	bls.n	800a6ca <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	22ff      	movs	r2, #255	; 0xff
 800a6b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2203      	movs	r2, #3
 800a6be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e059      	b.n	800a77e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0e4      	beq.n	800a6a2 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6ee:	609a      	str	r2, [r3, #8]
 800a6f0:	e03a      	b.n	800a768 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a700:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a710:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a712:	f7fb fdc3 	bl	800629c <HAL_GetTick>
 800a716:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a718:	e013      	b.n	800a742 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a71a:	f7fb fdbf 	bl	800629c <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a728:	d90b      	bls.n	800a742 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	22ff      	movs	r2, #255	; 0xff
 800a730:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2203      	movs	r2, #3
 800a736:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e01d      	b.n	800a77e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0e4      	beq.n	800a71a <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a766:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	22ff      	movs	r2, #255	; 0xff
 800a76e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	bd90      	pop	{r4, r7, pc}

0800a786 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a7a0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7a2:	f7fb fd7b 	bl	800629c <HAL_GetTick>
 800a7a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7a8:	e009      	b.n	800a7be <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a7aa:	f7fb fd77 	bl	800629c <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7b8:	d901      	bls.n	800a7be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e007      	b.n	800a7ce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0ee      	beq.n	800a7aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d119      	bne.n	800a824 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7fa:	f7fb fd4f 	bl	800629c <HAL_GetTick>
 800a7fe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a800:	e009      	b.n	800a816 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a802:	f7fb fd4b 	bl	800629c <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a810:	d901      	bls.n	800a816 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e007      	b.n	800a826 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0ee      	beq.n	800a802 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	4603      	mov	r3, r0
 800a836:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800a83c:	e005      	b.n	800a84a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3301      	adds	r3, #1
 800a842:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	3b0a      	subs	r3, #10
 800a848:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d8f6      	bhi.n	800a83e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	011b      	lsls	r3, r3, #4
 800a856:	b2da      	uxtb	r2, r3
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b2db      	uxtb	r3, r3
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	bc80      	pop	{r7}
 800a866:	4770      	bx	lr

0800a868 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	091b      	lsrs	r3, r3, #4
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	4413      	add	r3, r2
 800a896:	b2db      	uxtb	r3, r3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	7f1b      	ldrb	r3, [r3, #28]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	e081      	b.n	800a9c2 <HAL_RTCEx_SetWakeUpTimer+0x120>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	22ca      	movs	r2, #202	; 0xca
 800a8d0:	625a      	str	r2, [r3, #36]	; 0x24
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2253      	movs	r2, #83	; 0x53
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d01e      	beq.n	800a926 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 800a8e8:	f7fb fcd8 	bl	800629c <HAL_GetTick>
 800a8ec:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a8ee:	e013      	b.n	800a918 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a8f0:	f7fb fcd4 	bl	800629c <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8fe:	d90b      	bls.n	800a918 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	22ff      	movs	r2, #255	; 0xff
 800a906:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2203      	movs	r2, #3
 800a90c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e054      	b.n	800a9c2 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1e4      	bne.n	800a8f0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a934:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a936:	f7fb fcb1 	bl	800629c <HAL_GetTick>
 800a93a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a93c:	e013      	b.n	800a966 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a93e:	f7fb fcad 	bl	800629c <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a94c:	d90b      	bls.n	800a966 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	22ff      	movs	r2, #255	; 0xff
 800a954:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2203      	movs	r2, #3
 800a95a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e02d      	b.n	800a9c2 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0e4      	beq.n	800a93e <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689a      	ldr	r2, [r3, #8]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0207 	bic.w	r2, r2, #7
 800a982:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6899      	ldr	r1, [r3, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	430a      	orrs	r2, r1
 800a992:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	22ff      	movs	r2, #255	; 0xff
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e041      	b.n	800aa60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fa fff5 	bl	80059e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f000 fc69 	bl	800b2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d001      	beq.n	800aa80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e04e      	b.n	800ab1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a22      	ldr	r2, [pc, #136]	; (800ab28 <HAL_TIM_Base_Start_IT+0xc0>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d022      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaaa:	d01d      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a1e      	ldr	r2, [pc, #120]	; (800ab2c <HAL_TIM_Base_Start_IT+0xc4>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d018      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a1d      	ldr	r2, [pc, #116]	; (800ab30 <HAL_TIM_Base_Start_IT+0xc8>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d013      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1b      	ldr	r2, [pc, #108]	; (800ab34 <HAL_TIM_Base_Start_IT+0xcc>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d00e      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a1a      	ldr	r2, [pc, #104]	; (800ab38 <HAL_TIM_Base_Start_IT+0xd0>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d009      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <HAL_TIM_Base_Start_IT+0xd4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d004      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x80>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a17      	ldr	r2, [pc, #92]	; (800ab40 <HAL_TIM_Base_Start_IT+0xd8>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d111      	bne.n	800ab0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b06      	cmp	r3, #6
 800aaf8:	d010      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	e007      	b.n	800ab1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bc80      	pop	{r7}
 800ab26:	4770      	bx	lr
 800ab28:	40010000 	.word	0x40010000
 800ab2c:	40000400 	.word	0x40000400
 800ab30:	40000800 	.word	0x40000800
 800ab34:	40000c00 	.word	0x40000c00
 800ab38:	40010400 	.word	0x40010400
 800ab3c:	40014000 	.word	0x40014000
 800ab40:	40001800 	.word	0x40001800

0800ab44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e041      	b.n	800abda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f839 	bl	800abe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4619      	mov	r1, r3
 800ab82:	4610      	mov	r0, r2
 800ab84:	f000 fbac 	bl	800b2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr

0800abf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <HAL_TIM_PWM_Start+0x24>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	e022      	b.n	800ac5e <HAL_TIM_PWM_Start+0x6a>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d109      	bne.n	800ac32 <HAL_TIM_PWM_Start+0x3e>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	e015      	b.n	800ac5e <HAL_TIM_PWM_Start+0x6a>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d109      	bne.n	800ac4c <HAL_TIM_PWM_Start+0x58>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	bf14      	ite	ne
 800ac44:	2301      	movne	r3, #1
 800ac46:	2300      	moveq	r3, #0
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	e008      	b.n	800ac5e <HAL_TIM_PWM_Start+0x6a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e07c      	b.n	800ad60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <HAL_TIM_PWM_Start+0x82>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac74:	e013      	b.n	800ac9e <HAL_TIM_PWM_Start+0xaa>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d104      	bne.n	800ac86 <HAL_TIM_PWM_Start+0x92>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac84:	e00b      	b.n	800ac9e <HAL_TIM_PWM_Start+0xaa>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d104      	bne.n	800ac96 <HAL_TIM_PWM_Start+0xa2>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac94:	e003      	b.n	800ac9e <HAL_TIM_PWM_Start+0xaa>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2201      	movs	r2, #1
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fdfa 	bl	800b8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a2d      	ldr	r2, [pc, #180]	; (800ad68 <HAL_TIM_PWM_Start+0x174>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d004      	beq.n	800acc0 <HAL_TIM_PWM_Start+0xcc>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a2c      	ldr	r2, [pc, #176]	; (800ad6c <HAL_TIM_PWM_Start+0x178>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d101      	bne.n	800acc4 <HAL_TIM_PWM_Start+0xd0>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <HAL_TIM_PWM_Start+0xd2>
 800acc4:	2300      	movs	r3, #0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a22      	ldr	r2, [pc, #136]	; (800ad68 <HAL_TIM_PWM_Start+0x174>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d022      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d01d      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <HAL_TIM_PWM_Start+0x17c>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d018      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a1d      	ldr	r2, [pc, #116]	; (800ad74 <HAL_TIM_PWM_Start+0x180>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1c      	ldr	r2, [pc, #112]	; (800ad78 <HAL_TIM_PWM_Start+0x184>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a16      	ldr	r2, [pc, #88]	; (800ad6c <HAL_TIM_PWM_Start+0x178>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <HAL_TIM_PWM_Start+0x188>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x136>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <HAL_TIM_PWM_Start+0x18c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d111      	bne.n	800ad4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0307 	and.w	r3, r3, #7
 800ad34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b06      	cmp	r3, #6
 800ad3a:	d010      	beq.n	800ad5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0201 	orr.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad4c:	e007      	b.n	800ad5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f042 0201 	orr.w	r2, r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	40010000 	.word	0x40010000
 800ad6c:	40010400 	.word	0x40010400
 800ad70:	40000400 	.word	0x40000400
 800ad74:	40000800 	.word	0x40000800
 800ad78:	40000c00 	.word	0x40000c00
 800ad7c:	40014000 	.word	0x40014000
 800ad80:	40001800 	.word	0x40001800

0800ad84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d122      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f003 0302 	and.w	r3, r3, #2
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d11b      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f06f 0202 	mvn.w	r2, #2
 800adb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f003 0303 	and.w	r3, r3, #3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa6f 	bl	800b2aa <HAL_TIM_IC_CaptureCallback>
 800adcc:	e005      	b.n	800adda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa62 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fa71 	bl	800b2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0304 	and.w	r3, r3, #4
 800adea:	2b04      	cmp	r3, #4
 800adec:	d122      	bne.n	800ae34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	d11b      	bne.n	800ae34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0204 	mvn.w	r2, #4
 800ae04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa45 	bl	800b2aa <HAL_TIM_IC_CaptureCallback>
 800ae20:	e005      	b.n	800ae2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa38 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fa47 	bl	800b2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f003 0308 	and.w	r3, r3, #8
 800ae3e:	2b08      	cmp	r3, #8
 800ae40:	d122      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f003 0308 	and.w	r3, r3, #8
 800ae4c:	2b08      	cmp	r3, #8
 800ae4e:	d11b      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f06f 0208 	mvn.w	r2, #8
 800ae58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa1b 	bl	800b2aa <HAL_TIM_IC_CaptureCallback>
 800ae74:	e005      	b.n	800ae82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa0e 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fa1d 	bl	800b2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f003 0310 	and.w	r3, r3, #16
 800ae92:	2b10      	cmp	r3, #16
 800ae94:	d122      	bne.n	800aedc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b10      	cmp	r3, #16
 800aea2:	d11b      	bne.n	800aedc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f06f 0210 	mvn.w	r2, #16
 800aeac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f9f1 	bl	800b2aa <HAL_TIM_IC_CaptureCallback>
 800aec8:	e005      	b.n	800aed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9e4 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f9f3 	bl	800b2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d10e      	bne.n	800af08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d107      	bne.n	800af08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0201 	mvn.w	r2, #1
 800af00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7f9 faf6 	bl	80044f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af12:	2b80      	cmp	r3, #128	; 0x80
 800af14:	d10e      	bne.n	800af34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af20:	2b80      	cmp	r3, #128	; 0x80
 800af22:	d107      	bne.n	800af34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fdae 	bl	800ba90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3e:	2b40      	cmp	r3, #64	; 0x40
 800af40:	d10e      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	d107      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f9b7 	bl	800b2ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	d10e      	bne.n	800af8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0320 	and.w	r3, r3, #32
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d107      	bne.n	800af8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0220 	mvn.w	r2, #32
 800af84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fd79 	bl	800ba7e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d101      	bne.n	800afae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800afaa:	2302      	movs	r3, #2
 800afac:	e0ac      	b.n	800b108 <HAL_TIM_PWM_ConfigChannel+0x174>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b0c      	cmp	r3, #12
 800afba:	f200 809f 	bhi.w	800b0fc <HAL_TIM_PWM_ConfigChannel+0x168>
 800afbe:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800afc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc4:	0800aff9 	.word	0x0800aff9
 800afc8:	0800b0fd 	.word	0x0800b0fd
 800afcc:	0800b0fd 	.word	0x0800b0fd
 800afd0:	0800b0fd 	.word	0x0800b0fd
 800afd4:	0800b039 	.word	0x0800b039
 800afd8:	0800b0fd 	.word	0x0800b0fd
 800afdc:	0800b0fd 	.word	0x0800b0fd
 800afe0:	0800b0fd 	.word	0x0800b0fd
 800afe4:	0800b07b 	.word	0x0800b07b
 800afe8:	0800b0fd 	.word	0x0800b0fd
 800afec:	0800b0fd 	.word	0x0800b0fd
 800aff0:	0800b0fd 	.word	0x0800b0fd
 800aff4:	0800b0bb 	.word	0x0800b0bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 fa0c 	bl	800b41c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699a      	ldr	r2, [r3, #24]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f042 0208 	orr.w	r2, r2, #8
 800b012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0204 	bic.w	r2, r2, #4
 800b022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6999      	ldr	r1, [r3, #24]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	691a      	ldr	r2, [r3, #16]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	619a      	str	r2, [r3, #24]
      break;
 800b036:	e062      	b.n	800b0fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fa5c 	bl	800b4fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699a      	ldr	r2, [r3, #24]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6999      	ldr	r1, [r3, #24]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	021a      	lsls	r2, r3, #8
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	619a      	str	r2, [r3, #24]
      break;
 800b078:	e041      	b.n	800b0fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 faaf 	bl	800b5e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0208 	orr.w	r2, r2, #8
 800b094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0204 	bic.w	r2, r2, #4
 800b0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69d9      	ldr	r1, [r3, #28]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	61da      	str	r2, [r3, #28]
      break;
 800b0b8:	e021      	b.n	800b0fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 fb03 	bl	800b6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	69da      	ldr	r2, [r3, #28]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69da      	ldr	r2, [r3, #28]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69d9      	ldr	r1, [r3, #28]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	021a      	lsls	r2, r3, #8
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	61da      	str	r2, [r3, #28]
      break;
 800b0fa:	e000      	b.n	800b0fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b0fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b120:	2b01      	cmp	r3, #1
 800b122:	d101      	bne.n	800b128 <HAL_TIM_ConfigClockSource+0x18>
 800b124:	2302      	movs	r3, #2
 800b126:	e0b3      	b.n	800b290 <HAL_TIM_ConfigClockSource+0x180>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b14e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b160:	d03e      	beq.n	800b1e0 <HAL_TIM_ConfigClockSource+0xd0>
 800b162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b166:	f200 8087 	bhi.w	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b16a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b16e:	f000 8085 	beq.w	800b27c <HAL_TIM_ConfigClockSource+0x16c>
 800b172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b176:	d87f      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b178:	2b70      	cmp	r3, #112	; 0x70
 800b17a:	d01a      	beq.n	800b1b2 <HAL_TIM_ConfigClockSource+0xa2>
 800b17c:	2b70      	cmp	r3, #112	; 0x70
 800b17e:	d87b      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b180:	2b60      	cmp	r3, #96	; 0x60
 800b182:	d050      	beq.n	800b226 <HAL_TIM_ConfigClockSource+0x116>
 800b184:	2b60      	cmp	r3, #96	; 0x60
 800b186:	d877      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b188:	2b50      	cmp	r3, #80	; 0x50
 800b18a:	d03c      	beq.n	800b206 <HAL_TIM_ConfigClockSource+0xf6>
 800b18c:	2b50      	cmp	r3, #80	; 0x50
 800b18e:	d873      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b190:	2b40      	cmp	r3, #64	; 0x40
 800b192:	d058      	beq.n	800b246 <HAL_TIM_ConfigClockSource+0x136>
 800b194:	2b40      	cmp	r3, #64	; 0x40
 800b196:	d86f      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b198:	2b30      	cmp	r3, #48	; 0x30
 800b19a:	d064      	beq.n	800b266 <HAL_TIM_ConfigClockSource+0x156>
 800b19c:	2b30      	cmp	r3, #48	; 0x30
 800b19e:	d86b      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d060      	beq.n	800b266 <HAL_TIM_ConfigClockSource+0x156>
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d867      	bhi.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d05c      	beq.n	800b266 <HAL_TIM_ConfigClockSource+0x156>
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	d05a      	beq.n	800b266 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b1b0:	e062      	b.n	800b278 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	6899      	ldr	r1, [r3, #8]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	f000 fb4e 	bl	800b862 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	609a      	str	r2, [r3, #8]
      break;
 800b1de:	e04e      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	6899      	ldr	r1, [r3, #8]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f000 fb37 	bl	800b862 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689a      	ldr	r2, [r3, #8]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b202:	609a      	str	r2, [r3, #8]
      break;
 800b204:	e03b      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	6859      	ldr	r1, [r3, #4]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	461a      	mov	r2, r3
 800b214:	f000 faae 	bl	800b774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2150      	movs	r1, #80	; 0x50
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fb05 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b224:	e02b      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	6859      	ldr	r1, [r3, #4]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	461a      	mov	r2, r3
 800b234:	f000 facc 	bl	800b7d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2160      	movs	r1, #96	; 0x60
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 faf5 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b244:	e01b      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	6859      	ldr	r1, [r3, #4]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	461a      	mov	r2, r3
 800b254:	f000 fa8e 	bl	800b774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2140      	movs	r1, #64	; 0x40
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 fae5 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b264:	e00b      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4619      	mov	r1, r3
 800b270:	4610      	mov	r0, r2
 800b272:	f000 fadc 	bl	800b82e <TIM_ITRx_SetConfig>
        break;
 800b276:	e002      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b278:	bf00      	nop
 800b27a:	e000      	b.n	800b27e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b27c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bc80      	pop	{r7}
 800b2a8:	4770      	bx	lr

0800b2aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3f      	ldr	r2, [pc, #252]	; (800b3f0 <TIM_Base_SetConfig+0x110>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d013      	beq.n	800b320 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fe:	d00f      	beq.n	800b320 <TIM_Base_SetConfig+0x40>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a3c      	ldr	r2, [pc, #240]	; (800b3f4 <TIM_Base_SetConfig+0x114>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00b      	beq.n	800b320 <TIM_Base_SetConfig+0x40>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a3b      	ldr	r2, [pc, #236]	; (800b3f8 <TIM_Base_SetConfig+0x118>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d007      	beq.n	800b320 <TIM_Base_SetConfig+0x40>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a3a      	ldr	r2, [pc, #232]	; (800b3fc <TIM_Base_SetConfig+0x11c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d003      	beq.n	800b320 <TIM_Base_SetConfig+0x40>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a39      	ldr	r2, [pc, #228]	; (800b400 <TIM_Base_SetConfig+0x120>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d108      	bne.n	800b332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a2e      	ldr	r2, [pc, #184]	; (800b3f0 <TIM_Base_SetConfig+0x110>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d02b      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b340:	d027      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <TIM_Base_SetConfig+0x114>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d023      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <TIM_Base_SetConfig+0x118>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d01f      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a29      	ldr	r2, [pc, #164]	; (800b3fc <TIM_Base_SetConfig+0x11c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d01b      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a28      	ldr	r2, [pc, #160]	; (800b400 <TIM_Base_SetConfig+0x120>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d017      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a27      	ldr	r2, [pc, #156]	; (800b404 <TIM_Base_SetConfig+0x124>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d013      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a26      	ldr	r2, [pc, #152]	; (800b408 <TIM_Base_SetConfig+0x128>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00f      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a25      	ldr	r2, [pc, #148]	; (800b40c <TIM_Base_SetConfig+0x12c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d00b      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a24      	ldr	r2, [pc, #144]	; (800b410 <TIM_Base_SetConfig+0x130>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d007      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a23      	ldr	r2, [pc, #140]	; (800b414 <TIM_Base_SetConfig+0x134>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d003      	beq.n	800b392 <TIM_Base_SetConfig+0xb2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a22      	ldr	r2, [pc, #136]	; (800b418 <TIM_Base_SetConfig+0x138>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d108      	bne.n	800b3a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <TIM_Base_SetConfig+0x110>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d003      	beq.n	800b3d8 <TIM_Base_SetConfig+0xf8>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a0b      	ldr	r2, [pc, #44]	; (800b400 <TIM_Base_SetConfig+0x120>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d103      	bne.n	800b3e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	615a      	str	r2, [r3, #20]
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40000400 	.word	0x40000400
 800b3f8:	40000800 	.word	0x40000800
 800b3fc:	40000c00 	.word	0x40000c00
 800b400:	40010400 	.word	0x40010400
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800
 800b410:	40001800 	.word	0x40001800
 800b414:	40001c00 	.word	0x40001c00
 800b418:	40002000 	.word	0x40002000

0800b41c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	f023 0201 	bic.w	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0303 	bic.w	r3, r3, #3
 800b452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f023 0302 	bic.w	r3, r3, #2
 800b464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a20      	ldr	r2, [pc, #128]	; (800b4f4 <TIM_OC1_SetConfig+0xd8>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d003      	beq.n	800b480 <TIM_OC1_SetConfig+0x64>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a1f      	ldr	r2, [pc, #124]	; (800b4f8 <TIM_OC1_SetConfig+0xdc>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10c      	bne.n	800b49a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f023 0308 	bic.w	r3, r3, #8
 800b486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f023 0304 	bic.w	r3, r3, #4
 800b498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <TIM_OC1_SetConfig+0xd8>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d003      	beq.n	800b4aa <TIM_OC1_SetConfig+0x8e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a14      	ldr	r2, [pc, #80]	; (800b4f8 <TIM_OC1_SetConfig+0xdc>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d111      	bne.n	800b4ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	621a      	str	r2, [r3, #32]
}
 800b4e8:	bf00      	nop
 800b4ea:	371c      	adds	r7, #28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	40010000 	.word	0x40010000
 800b4f8:	40010400 	.word	0x40010400

0800b4fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	f023 0210 	bic.w	r2, r3, #16
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f023 0320 	bic.w	r3, r3, #32
 800b546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	4313      	orrs	r3, r2
 800b552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a21      	ldr	r2, [pc, #132]	; (800b5dc <TIM_OC2_SetConfig+0xe0>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d003      	beq.n	800b564 <TIM_OC2_SetConfig+0x68>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a20      	ldr	r2, [pc, #128]	; (800b5e0 <TIM_OC2_SetConfig+0xe4>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d10d      	bne.n	800b580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b56a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a16      	ldr	r2, [pc, #88]	; (800b5dc <TIM_OC2_SetConfig+0xe0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d003      	beq.n	800b590 <TIM_OC2_SetConfig+0x94>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a15      	ldr	r2, [pc, #84]	; (800b5e0 <TIM_OC2_SetConfig+0xe4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d113      	bne.n	800b5b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b59e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr
 800b5dc:	40010000 	.word	0x40010000
 800b5e0:	40010400 	.word	0x40010400

0800b5e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	021b      	lsls	r3, r3, #8
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	4313      	orrs	r3, r2
 800b638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a21      	ldr	r2, [pc, #132]	; (800b6c4 <TIM_OC3_SetConfig+0xe0>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_OC3_SetConfig+0x66>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a20      	ldr	r2, [pc, #128]	; (800b6c8 <TIM_OC3_SetConfig+0xe4>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d10d      	bne.n	800b666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a16      	ldr	r2, [pc, #88]	; (800b6c4 <TIM_OC3_SetConfig+0xe0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d003      	beq.n	800b676 <TIM_OC3_SetConfig+0x92>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a15      	ldr	r2, [pc, #84]	; (800b6c8 <TIM_OC3_SetConfig+0xe4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d113      	bne.n	800b69e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	011b      	lsls	r3, r3, #4
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	621a      	str	r2, [r3, #32]
}
 800b6b8:	bf00      	nop
 800b6ba:	371c      	adds	r7, #28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40010400 	.word	0x40010400

0800b6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	021b      	lsls	r3, r3, #8
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	031b      	lsls	r3, r3, #12
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a11      	ldr	r2, [pc, #68]	; (800b76c <TIM_OC4_SetConfig+0xa0>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d003      	beq.n	800b734 <TIM_OC4_SetConfig+0x68>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a10      	ldr	r2, [pc, #64]	; (800b770 <TIM_OC4_SetConfig+0xa4>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d109      	bne.n	800b748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b73a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	019b      	lsls	r3, r3, #6
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4313      	orrs	r3, r2
 800b746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	621a      	str	r2, [r3, #32]
}
 800b762:	bf00      	nop
 800b764:	371c      	adds	r7, #28
 800b766:	46bd      	mov	sp, r7
 800b768:	bc80      	pop	{r7}
 800b76a:	4770      	bx	lr
 800b76c:	40010000 	.word	0x40010000
 800b770:	40010400 	.word	0x40010400

0800b774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	f023 0201 	bic.w	r2, r3, #1
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b79e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f023 030a 	bic.w	r3, r3, #10
 800b7b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	621a      	str	r2, [r3, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bc80      	pop	{r7}
 800b7ce:	4770      	bx	lr

0800b7d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	f023 0210 	bic.w	r2, r3, #16
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	031b      	lsls	r3, r3, #12
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b80c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	011b      	lsls	r3, r3, #4
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	621a      	str	r2, [r3, #32]
}
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr

0800b82e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	f043 0307 	orr.w	r3, r3, #7
 800b850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	609a      	str	r2, [r3, #8]
}
 800b858:	bf00      	nop
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bc80      	pop	{r7}
 800b860:	4770      	bx	lr

0800b862 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b862:	b480      	push	{r7}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b87c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	021a      	lsls	r2, r3, #8
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	431a      	orrs	r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	4313      	orrs	r3, r2
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	609a      	str	r2, [r3, #8]
}
 800b896:	bf00      	nop
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bc80      	pop	{r7}
 800b89e:	4770      	bx	lr

0800b8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	f003 031f 	and.w	r3, r3, #31
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1a      	ldr	r2, [r3, #32]
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a1a      	ldr	r2, [r3, #32]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f003 031f 	and.w	r3, r3, #31
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	621a      	str	r2, [r3, #32]
}
 800b8de:	bf00      	nop
 800b8e0:	371c      	adds	r7, #28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bc80      	pop	{r7}
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e05a      	b.n	800b9b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2202      	movs	r2, #2
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a20      	ldr	r2, [pc, #128]	; (800b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d022      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94c:	d01d      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a1c      	ldr	r2, [pc, #112]	; (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d018      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a1a      	ldr	r2, [pc, #104]	; (800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a19      	ldr	r2, [pc, #100]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00e      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a17      	ldr	r2, [pc, #92]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d009      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d004      	beq.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a14      	ldr	r2, [pc, #80]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d10c      	bne.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bc80      	pop	{r7}
 800b9be:	4770      	bx	lr
 800b9c0:	40010000 	.word	0x40010000
 800b9c4:	40000400 	.word	0x40000400
 800b9c8:	40000800 	.word	0x40000800
 800b9cc:	40000c00 	.word	0x40000c00
 800b9d0:	40010400 	.word	0x40010400
 800b9d4:	40014000 	.word	0x40014000
 800b9d8:	40001800 	.word	0x40001800

0800b9dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d101      	bne.n	800b9f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	e03d      	b.n	800ba74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr

0800ba7e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc80      	pop	{r7}
 800baa0:	4770      	bx	lr

0800baa2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e03f      	b.n	800bb34 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d106      	bne.n	800bace <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7fa f84d 	bl	8005b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2224      	movs	r2, #36	; 0x24
 800bad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bae4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb4a 	bl	800c180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691a      	ldr	r2, [r3, #16]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bafa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	695a      	ldr	r2, [r3, #20]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2220      	movs	r2, #32
 800bb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	; 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10d      	bne.n	800bb8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d008      	beq.n	800bb8e <HAL_UART_IRQHandler+0x52>
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	f003 0320 	and.w	r3, r3, #32
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fa51 	bl	800c02e <UART_Receive_IT>
      return;
 800bb8c:	e17c      	b.n	800be88 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 80b1 	beq.w	800bcf8 <HAL_UART_IRQHandler+0x1bc>
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <HAL_UART_IRQHandler+0x70>
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 80a6 	beq.w	800bcf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <HAL_UART_IRQHandler+0x90>
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	f043 0201 	orr.w	r2, r3, #1
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <HAL_UART_IRQHandler+0xb0>
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe4:	f043 0202 	orr.w	r2, r3, #2
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <HAL_UART_IRQHandler+0xd0>
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc04:	f043 0204 	orr.w	r2, r3, #4
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	f003 0308 	and.w	r3, r3, #8
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00f      	beq.n	800bc36 <HAL_UART_IRQHandler+0xfa>
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	f003 0320 	and.w	r3, r3, #32
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d104      	bne.n	800bc2a <HAL_UART_IRQHandler+0xee>
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	f043 0208 	orr.w	r2, r3, #8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 811f 	beq.w	800be7e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	f003 0320 	and.w	r3, r3, #32
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <HAL_UART_IRQHandler+0x11e>
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f9ea 	bl	800c02e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	bf0c      	ite	eq
 800bc68:	2301      	moveq	r3, #1
 800bc6a:	2300      	movne	r3, #0
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <HAL_UART_IRQHandler+0x146>
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d031      	beq.n	800bce6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f92c 	bl	800bee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc92:	2b40      	cmp	r3, #64	; 0x40
 800bc94:	d123      	bne.n	800bcde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	695a      	ldr	r2, [r3, #20]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bca4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d013      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb2:	4a77      	ldr	r2, [pc, #476]	; (800be90 <HAL_UART_IRQHandler+0x354>)
 800bcb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fb faa2 	bl	8007204 <HAL_DMA_Abort_IT>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d016      	beq.n	800bcf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd4:	e00e      	b.n	800bcf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f8ee 	bl	800beb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcdc:	e00a      	b.n	800bcf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f8ea 	bl	800beb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce4:	e006      	b.n	800bcf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f8e6 	bl	800beb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bcf2:	e0c4      	b.n	800be7e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf4:	bf00      	nop
    return;
 800bcf6:	e0c2      	b.n	800be7e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	f040 80a2 	bne.w	800be46 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	f003 0310 	and.w	r3, r3, #16
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 809c 	beq.w	800be46 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 8096 	beq.w	800be46 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3a:	2b40      	cmp	r3, #64	; 0x40
 800bd3c:	d14f      	bne.n	800bdde <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800bd48:	8a3b      	ldrh	r3, [r7, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 8099 	beq.w	800be82 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd54:	8a3a      	ldrh	r2, [r7, #16]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	f080 8093 	bcs.w	800be82 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	8a3a      	ldrh	r2, [r7, #16]
 800bd60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd6c:	d02b      	beq.n	800bdc6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68da      	ldr	r2, [r3, #12]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd7c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	695a      	ldr	r2, [r3, #20]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0201 	bic.w	r2, r2, #1
 800bd8c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	695a      	ldr	r2, [r3, #20]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd9c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2220      	movs	r2, #32
 800bda2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68da      	ldr	r2, [r3, #12]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f022 0210 	bic.w	r2, r2, #16
 800bdba:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fb f9af 	bl	8007124 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f877 	bl	800beca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bddc:	e051      	b.n	800be82 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d047      	beq.n	800be86 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800bdf6:	8a7b      	ldrh	r3, [r7, #18]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d044      	beq.n	800be86 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be0a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	695a      	ldr	r2, [r3, #20]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f022 0201 	bic.w	r2, r2, #1
 800be1a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68da      	ldr	r2, [r3, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0210 	bic.w	r2, r2, #16
 800be38:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be3a:	8a7b      	ldrh	r3, [r7, #18]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f843 	bl	800beca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800be44:	e01f      	b.n	800be86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d008      	beq.n	800be62 <HAL_UART_IRQHandler+0x326>
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f880 	bl	800bf60 <UART_Transmit_IT>
    return;
 800be60:	e012      	b.n	800be88 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00d      	beq.n	800be88 <HAL_UART_IRQHandler+0x34c>
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be72:	2b00      	cmp	r3, #0
 800be74:	d008      	beq.n	800be88 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f8c1 	bl	800bffe <UART_EndTransmit_IT>
    return;
 800be7c:	e004      	b.n	800be88 <HAL_UART_IRQHandler+0x34c>
    return;
 800be7e:	bf00      	nop
 800be80:	e002      	b.n	800be88 <HAL_UART_IRQHandler+0x34c>
      return;
 800be82:	bf00      	nop
 800be84:	e000      	b.n	800be88 <HAL_UART_IRQHandler+0x34c>
      return;
 800be86:	bf00      	nop
  }
}
 800be88:	3728      	adds	r7, #40	; 0x28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	0800bf39 	.word	0x0800bf39

0800be94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bc80      	pop	{r7}
 800bea4:	4770      	bx	lr

0800bea6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bc80      	pop	{r7}
 800bec8:	4770      	bx	lr

0800beca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr

0800bee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bef6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	695a      	ldr	r2, [r3, #20]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0201 	bic.w	r2, r2, #1
 800bf06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d107      	bne.n	800bf20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f022 0210 	bic.w	r2, r2, #16
 800bf1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc80      	pop	{r7}
 800bf36:	4770      	bx	lr

0800bf38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7ff ffb0 	bl	800beb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf58:	bf00      	nop
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b21      	cmp	r3, #33	; 0x21
 800bf72:	d13e      	bne.n	800bff2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf7c:	d114      	bne.n	800bfa8 <UART_Transmit_IT+0x48>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d110      	bne.n	800bfa8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a1b      	ldr	r3, [r3, #32]
 800bfa0:	1c9a      	adds	r2, r3, #2
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	621a      	str	r2, [r3, #32]
 800bfa6:	e008      	b.n	800bfba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	1c59      	adds	r1, r3, #1
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	6211      	str	r1, [r2, #32]
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10f      	bne.n	800bfee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	e000      	b.n	800bff4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bff2:	2302      	movs	r3, #2
  }
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bc80      	pop	{r7}
 800bffc:	4770      	bx	lr

0800bffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2220      	movs	r2, #32
 800c01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff ff38 	bl	800be94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b086      	sub	sp, #24
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b22      	cmp	r3, #34	; 0x22
 800c040:	f040 8099 	bne.w	800c176 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c04c:	d117      	bne.n	800c07e <UART_Receive_IT+0x50>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d113      	bne.n	800c07e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	b29b      	uxth	r3, r3
 800c068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	1c9a      	adds	r2, r3, #2
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	629a      	str	r2, [r3, #40]	; 0x28
 800c07c:	e026      	b.n	800c0cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c082:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800c084:	2300      	movs	r3, #0
 800c086:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c090:	d007      	beq.n	800c0a2 <UART_Receive_IT+0x74>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10a      	bne.n	800c0b0 <UART_Receive_IT+0x82>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	e008      	b.n	800c0c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d148      	bne.n	800c172 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f022 0220 	bic.w	r2, r2, #32
 800c0ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68da      	ldr	r2, [r3, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	695a      	ldr	r2, [r3, #20]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f022 0201 	bic.w	r2, r2, #1
 800c10e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2220      	movs	r2, #32
 800c114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d123      	bne.n	800c168 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f022 0210 	bic.w	r2, r2, #16
 800c134:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0310 	and.w	r3, r3, #16
 800c140:	2b10      	cmp	r3, #16
 800c142:	d10a      	bne.n	800c15a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c144:	2300      	movs	r3, #0
 800c146:	60fb      	str	r3, [r7, #12]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff feb2 	bl	800beca <HAL_UARTEx_RxEventCallback>
 800c166:	e002      	b.n	800c16e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fe9c 	bl	800bea6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e002      	b.n	800c178 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	e000      	b.n	800c178 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800c176:	2302      	movs	r3, #2
  }
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68da      	ldr	r2, [r3, #12]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	430a      	orrs	r2, r1
 800c19c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c1c0:	f023 030c 	bic.w	r3, r3, #12
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	6812      	ldr	r2, [r2, #0]
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	699a      	ldr	r2, [r3, #24]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a57      	ldr	r2, [pc, #348]	; (800c348 <UART_SetConfig+0x1c8>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d004      	beq.n	800c1f8 <UART_SetConfig+0x78>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a56      	ldr	r2, [pc, #344]	; (800c34c <UART_SetConfig+0x1cc>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d103      	bne.n	800c200 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c1f8:	f7fd fdf6 	bl	8009de8 <HAL_RCC_GetPCLK2Freq>
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	e002      	b.n	800c206 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c200:	f7fd fdd0 	bl	8009da4 <HAL_RCC_GetPCLK1Freq>
 800c204:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c20e:	d14c      	bne.n	800c2aa <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4613      	mov	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	009a      	lsls	r2, r3, #2
 800c21a:	441a      	add	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	4a4a      	ldr	r2, [pc, #296]	; (800c350 <UART_SetConfig+0x1d0>)
 800c228:	fba2 2303 	umull	r2, r3, r2, r3
 800c22c:	095b      	lsrs	r3, r3, #5
 800c22e:	0119      	lsls	r1, r3, #4
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	009a      	lsls	r2, r3, #2
 800c23a:	441a      	add	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	fbb2 f2f3 	udiv	r2, r2, r3
 800c246:	4b42      	ldr	r3, [pc, #264]	; (800c350 <UART_SetConfig+0x1d0>)
 800c248:	fba3 0302 	umull	r0, r3, r3, r2
 800c24c:	095b      	lsrs	r3, r3, #5
 800c24e:	2064      	movs	r0, #100	; 0x64
 800c250:	fb00 f303 	mul.w	r3, r0, r3
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	3332      	adds	r3, #50	; 0x32
 800c25a:	4a3d      	ldr	r2, [pc, #244]	; (800c350 <UART_SetConfig+0x1d0>)
 800c25c:	fba2 2303 	umull	r2, r3, r2, r3
 800c260:	095b      	lsrs	r3, r3, #5
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c268:	4419      	add	r1, r3
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009a      	lsls	r2, r3, #2
 800c274:	441a      	add	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c280:	4b33      	ldr	r3, [pc, #204]	; (800c350 <UART_SetConfig+0x1d0>)
 800c282:	fba3 0302 	umull	r0, r3, r3, r2
 800c286:	095b      	lsrs	r3, r3, #5
 800c288:	2064      	movs	r0, #100	; 0x64
 800c28a:	fb00 f303 	mul.w	r3, r0, r3
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	3332      	adds	r3, #50	; 0x32
 800c294:	4a2e      	ldr	r2, [pc, #184]	; (800c350 <UART_SetConfig+0x1d0>)
 800c296:	fba2 2303 	umull	r2, r3, r2, r3
 800c29a:	095b      	lsrs	r3, r3, #5
 800c29c:	f003 0207 	and.w	r2, r3, #7
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	440a      	add	r2, r1
 800c2a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2a8:	e04a      	b.n	800c340 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009a      	lsls	r2, r3, #2
 800c2b4:	441a      	add	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c0:	4a23      	ldr	r2, [pc, #140]	; (800c350 <UART_SetConfig+0x1d0>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	095b      	lsrs	r3, r3, #5
 800c2c8:	0119      	lsls	r1, r3, #4
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009a      	lsls	r2, r3, #2
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2e0:	4b1b      	ldr	r3, [pc, #108]	; (800c350 <UART_SetConfig+0x1d0>)
 800c2e2:	fba3 0302 	umull	r0, r3, r3, r2
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	2064      	movs	r0, #100	; 0x64
 800c2ea:	fb00 f303 	mul.w	r3, r0, r3
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	3332      	adds	r3, #50	; 0x32
 800c2f4:	4a16      	ldr	r2, [pc, #88]	; (800c350 <UART_SetConfig+0x1d0>)
 800c2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fa:	095b      	lsrs	r3, r3, #5
 800c2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c300:	4419      	add	r1, r3
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009a      	lsls	r2, r3, #2
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	fbb2 f2f3 	udiv	r2, r2, r3
 800c318:	4b0d      	ldr	r3, [pc, #52]	; (800c350 <UART_SetConfig+0x1d0>)
 800c31a:	fba3 0302 	umull	r0, r3, r3, r2
 800c31e:	095b      	lsrs	r3, r3, #5
 800c320:	2064      	movs	r0, #100	; 0x64
 800c322:	fb00 f303 	mul.w	r3, r0, r3
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	3332      	adds	r3, #50	; 0x32
 800c32c:	4a08      	ldr	r2, [pc, #32]	; (800c350 <UART_SetConfig+0x1d0>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f003 020f 	and.w	r2, r3, #15
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	440a      	add	r2, r1
 800c33e:	609a      	str	r2, [r3, #8]
}
 800c340:	bf00      	nop
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	40011000 	.word	0x40011000
 800c34c:	40011400 	.word	0x40011400
 800c350:	51eb851f 	.word	0x51eb851f

0800c354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c354:	b084      	sub	sp, #16
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	f107 001c 	add.w	r0, r7, #28
 800c362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d122      	bne.n	800c3b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c396:	2b01      	cmp	r3, #1
 800c398:	d105      	bne.n	800c3a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f990 	bl	800c6cc <USB_CoreReset>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]
 800c3b0:	e010      	b.n	800c3d4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f984 	bl	800c6cc <USB_CoreReset>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d10b      	bne.n	800c3f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f043 0206 	orr.w	r2, r3, #6
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f043 0220 	orr.w	r2, r3, #32
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3fe:	b004      	add	sp, #16
 800c400:	4770      	bx	lr

0800c402 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f043 0201 	orr.w	r2, r3, #1
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr

0800c422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f023 0201 	bic.w	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bc80      	pop	{r7}
 800c440:	4770      	bx	lr

0800c442 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	460b      	mov	r3, r1
 800c44c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d115      	bne.n	800c490 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c470:	2001      	movs	r0, #1
 800c472:	f7f9 ff1d 	bl	80062b0 <HAL_Delay>
      ms++;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3301      	adds	r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f917 	bl	800c6b0 <USB_GetMode>
 800c482:	4603      	mov	r3, r0
 800c484:	2b01      	cmp	r3, #1
 800c486:	d01e      	beq.n	800c4c6 <USB_SetCurrentMode+0x84>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b31      	cmp	r3, #49	; 0x31
 800c48c:	d9f0      	bls.n	800c470 <USB_SetCurrentMode+0x2e>
 800c48e:	e01a      	b.n	800c4c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d115      	bne.n	800c4c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	f7f9 ff04 	bl	80062b0 <HAL_Delay>
      ms++;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f8fe 	bl	800c6b0 <USB_GetMode>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <USB_SetCurrentMode+0x84>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b31      	cmp	r3, #49	; 0x31
 800c4be:	d9f0      	bls.n	800c4a2 <USB_SetCurrentMode+0x60>
 800c4c0:	e001      	b.n	800c4c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e005      	b.n	800c4d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b32      	cmp	r3, #50	; 0x32
 800c4ca:	d101      	bne.n	800c4d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e000      	b.n	800c4d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	019b      	lsls	r3, r3, #6
 800c4ee:	f043 0220 	orr.w	r2, r3, #32
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	60fb      	str	r3, [r7, #12]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4a08      	ldr	r2, [pc, #32]	; (800c520 <USB_FlushTxFifo+0x44>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d901      	bls.n	800c508 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e006      	b.n	800c516 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f003 0320 	and.w	r3, r3, #32
 800c510:	2b20      	cmp	r3, #32
 800c512:	d0f0      	beq.n	800c4f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bc80      	pop	{r7}
 800c51e:	4770      	bx	lr
 800c520:	00030d40 	.word	0x00030d40

0800c524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2210      	movs	r2, #16
 800c534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	3301      	adds	r3, #1
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4a08      	ldr	r2, [pc, #32]	; (800c560 <USB_FlushRxFifo+0x3c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d901      	bls.n	800c548 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e006      	b.n	800c556 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	f003 0310 	and.w	r3, r3, #16
 800c550:	2b10      	cmp	r3, #16
 800c552:	d0f0      	beq.n	800c536 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bc80      	pop	{r7}
 800c55e:	4770      	bx	lr
 800c560:	00030d40 	.word	0x00030d40

0800c564 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c564:	b480      	push	{r7}
 800c566:	b089      	sub	sp, #36	; 0x24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	460b      	mov	r3, r1
 800c574:	71fb      	strb	r3, [r7, #7]
 800c576:	4613      	mov	r3, r2
 800c578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	d123      	bne.n	800c5d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c58a:	88bb      	ldrh	r3, [r7, #4]
 800c58c:	3303      	adds	r3, #3
 800c58e:	089b      	lsrs	r3, r3, #2
 800c590:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c592:	2300      	movs	r3, #0
 800c594:	61bb      	str	r3, [r7, #24]
 800c596:	e018      	b.n	800c5ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c598:	79fb      	ldrb	r3, [r7, #7]
 800c59a:	031a      	lsls	r2, r3, #12
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d3e2      	bcc.n	800c598 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3724      	adds	r7, #36	; 0x24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr

0800c5de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b08b      	sub	sp, #44	; 0x2c
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c5f4:	88fb      	ldrh	r3, [r7, #6]
 800c5f6:	089b      	lsrs	r3, r3, #2
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c5fc:	88fb      	ldrh	r3, [r7, #6]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c604:	2300      	movs	r3, #0
 800c606:	623b      	str	r3, [r7, #32]
 800c608:	e014      	b.n	800c634 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	601a      	str	r2, [r3, #0]
    pDest++;
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	3301      	adds	r3, #1
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	3301      	adds	r3, #1
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	3301      	adds	r3, #1
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	3301      	adds	r3, #1
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	3301      	adds	r3, #1
 800c632:	623b      	str	r3, [r7, #32]
 800c634:	6a3a      	ldr	r2, [r7, #32]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d3e6      	bcc.n	800c60a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c63c:	8bfb      	ldrh	r3, [r7, #30]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d01e      	beq.n	800c680 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c642:	2300      	movs	r3, #0
 800c644:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c64c:	461a      	mov	r2, r3
 800c64e:	f107 0310 	add.w	r3, r7, #16
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	fa22 f303 	lsr.w	r3, r2, r3
 800c662:	b2da      	uxtb	r2, r3
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	701a      	strb	r2, [r3, #0]
      i++;
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	3301      	adds	r3, #1
 800c66c:	623b      	str	r3, [r7, #32]
      pDest++;
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	3301      	adds	r3, #1
 800c672:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c674:	8bfb      	ldrh	r3, [r7, #30]
 800c676:	3b01      	subs	r3, #1
 800c678:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c67a:	8bfb      	ldrh	r3, [r7, #30]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1ea      	bne.n	800c656 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c682:	4618      	mov	r0, r3
 800c684:	372c      	adds	r7, #44	; 0x2c
 800c686:	46bd      	mov	sp, r7
 800c688:	bc80      	pop	{r7}
 800c68a:	4770      	bx	lr

0800c68c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr

0800c6b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr
	...

0800c6cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4a12      	ldr	r2, [pc, #72]	; (800c72c <USB_CoreReset+0x60>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d901      	bls.n	800c6ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e01b      	b.n	800c722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	daf2      	bge.n	800c6d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f043 0201 	orr.w	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3301      	adds	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4a08      	ldr	r2, [pc, #32]	; (800c72c <USB_CoreReset+0x60>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d901      	bls.n	800c714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e006      	b.n	800c722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d0f0      	beq.n	800c702 <USB_CoreReset+0x36>

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	bc80      	pop	{r7}
 800c72a:	4770      	bx	lr
 800c72c:	00030d40 	.word	0x00030d40

0800c730 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c730:	b084      	sub	sp, #16
 800c732:	b580      	push	{r7, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	f107 001c 	add.w	r0, r7, #28
 800c73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c74c:	461a      	mov	r2, r3
 800c74e:	2300      	movs	r3, #0
 800c750:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d018      	beq.n	800c7b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	2b01      	cmp	r3, #1
 800c786:	d10a      	bne.n	800c79e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c796:	f043 0304 	orr.w	r3, r3, #4
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	e014      	b.n	800c7c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7ac:	f023 0304 	bic.w	r3, r3, #4
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	e009      	b.n	800c7c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7c2:	f023 0304 	bic.w	r3, r3, #4
 800c7c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c7c8:	2110      	movs	r1, #16
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff fe86 	bl	800c4dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fea7 	bl	800c524 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	e015      	b.n	800c808 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	2300      	movs	r3, #0
 800c800:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3301      	adds	r3, #1
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d3e5      	bcc.n	800c7dc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f04f 32ff 	mov.w	r2, #4294967295
 800c81c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c830:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a13      	ldr	r2, [pc, #76]	; (800c884 <USB_HostInit+0x154>)
 800c836:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a13      	ldr	r2, [pc, #76]	; (800c888 <USB_HostInit+0x158>)
 800c83c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c840:	e009      	b.n	800c856 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2280      	movs	r2, #128	; 0x80
 800c846:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a10      	ldr	r2, [pc, #64]	; (800c88c <USB_HostInit+0x15c>)
 800c84c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a0f      	ldr	r2, [pc, #60]	; (800c890 <USB_HostInit+0x160>)
 800c852:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d105      	bne.n	800c868 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	f043 0210 	orr.w	r2, r3, #16
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699a      	ldr	r2, [r3, #24]
 800c86c:	4b09      	ldr	r3, [pc, #36]	; (800c894 <USB_HostInit+0x164>)
 800c86e:	4313      	orrs	r3, r2
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c880:	b004      	add	sp, #16
 800c882:	4770      	bx	lr
 800c884:	01000200 	.word	0x01000200
 800c888:	00e00300 	.word	0x00e00300
 800c88c:	00600080 	.word	0x00600080
 800c890:	004000e0 	.word	0x004000e0
 800c894:	a3200008 	.word	0xa3200008

0800c898 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8b6:	f023 0303 	bic.w	r3, r3, #3
 800c8ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	78fb      	ldrb	r3, [r7, #3]
 800c8c6:	f003 0303 	and.w	r3, r3, #3
 800c8ca:	68f9      	ldr	r1, [r7, #12]
 800c8cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d107      	bne.n	800c8ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c8e6:	6053      	str	r3, [r2, #4]
 800c8e8:	e009      	b.n	800c8fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d106      	bne.n	800c8fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f241 7370 	movw	r3, #6000	; 0x1770
 800c8fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	bc80      	pop	{r7}
 800c908:	4770      	bx	lr

0800c90a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c92a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c938:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c93a:	2064      	movs	r0, #100	; 0x64
 800c93c:	f7f9 fcb8 	bl	80062b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c94c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c94e:	200a      	movs	r0, #10
 800c950:	f7f9 fcae 	bl	80062b0 <HAL_Delay>

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c982:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <USB_DriveVbus+0x44>
 800c98e:	78fb      	ldrb	r3, [r7, #3]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d106      	bne.n	800c9a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c99c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c9a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ac:	d109      	bne.n	800c9c2 <USB_DriveVbus+0x64>
 800c9ae:	78fb      	ldrb	r3, [r7, #3]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c9bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr

0800c9ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	0c5b      	lsrs	r3, r3, #17
 800c9ec:	f003 0303 	and.w	r3, r3, #3
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bc80      	pop	{r7}
 800c9f8:	4770      	bx	lr

0800c9fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	b29b      	uxth	r3, r3
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bc80      	pop	{r7}
 800ca18:	4770      	bx	lr
	...

0800ca1c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	4608      	mov	r0, r1
 800ca26:	4611      	mov	r1, r2
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	70fb      	strb	r3, [r7, #3]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	70bb      	strb	r3, [r7, #2]
 800ca32:	4613      	mov	r3, r2
 800ca34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ca3e:	78fb      	ldrb	r3, [r7, #3]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ca52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d87e      	bhi.n	800cb58 <USB_HC_Init+0x13c>
 800ca5a:	a201      	add	r2, pc, #4	; (adr r2, 800ca60 <USB_HC_Init+0x44>)
 800ca5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca60:	0800ca71 	.word	0x0800ca71
 800ca64:	0800cb1b 	.word	0x0800cb1b
 800ca68:	0800ca71 	.word	0x0800ca71
 800ca6c:	0800cadd 	.word	0x0800cadd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f240 439d 	movw	r3, #1181	; 0x49d
 800ca82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ca84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	da10      	bge.n	800caae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ca8c:	78fb      	ldrb	r3, [r7, #3]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	78fa      	ldrb	r2, [r7, #3]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caaa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800caac:	e057      	b.n	800cb5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d051      	beq.n	800cb5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	78fa      	ldrb	r2, [r7, #3]
 800caca:	0151      	lsls	r1, r2, #5
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	440a      	add	r2, r1
 800cad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cad4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cad8:	60d3      	str	r3, [r2, #12]
      break;
 800cada:	e040      	b.n	800cb5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae8:	461a      	mov	r2, r3
 800caea:	f240 639d 	movw	r3, #1693	; 0x69d
 800caee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800caf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	da34      	bge.n	800cb62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800caf8:	78fb      	ldrb	r3, [r7, #3]
 800cafa:	015a      	lsls	r2, r3, #5
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	4413      	add	r3, r2
 800cb00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	78fa      	ldrb	r2, [r7, #3]
 800cb08:	0151      	lsls	r1, r2, #5
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	440a      	add	r2, r1
 800cb0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb16:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cb18:	e023      	b.n	800cb62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cb1a:	78fb      	ldrb	r3, [r7, #3]
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb26:	461a      	mov	r2, r3
 800cb28:	f240 2325 	movw	r3, #549	; 0x225
 800cb2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cb2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	da17      	bge.n	800cb66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cb36:	78fb      	ldrb	r3, [r7, #3]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	78fa      	ldrb	r2, [r7, #3]
 800cb46:	0151      	lsls	r1, r2, #5
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	440a      	add	r2, r1
 800cb4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cb54:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cb56:	e006      	b.n	800cb66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	77fb      	strb	r3, [r7, #31]
      break;
 800cb5c:	e004      	b.n	800cb68 <USB_HC_Init+0x14c>
      break;
 800cb5e:	bf00      	nop
 800cb60:	e002      	b.n	800cb68 <USB_HC_Init+0x14c>
      break;
 800cb62:	bf00      	nop
 800cb64:	e000      	b.n	800cb68 <USB_HC_Init+0x14c>
      break;
 800cb66:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb6e:	699a      	ldr	r2, [r3, #24]
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	f003 030f 	and.w	r3, r3, #15
 800cb76:	2101      	movs	r1, #1
 800cb78:	fa01 f303 	lsl.w	r3, r1, r3
 800cb7c:	6939      	ldr	r1, [r7, #16]
 800cb7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cb82:	4313      	orrs	r3, r2
 800cb84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cb92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da03      	bge.n	800cba2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cb9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb9e:	61bb      	str	r3, [r7, #24]
 800cba0:	e001      	b.n	800cba6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff ff11 	bl	800c9ce <USB_GetHostSpeed>
 800cbac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cbae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d106      	bne.n	800cbc4 <USB_HC_Init+0x1a8>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d003      	beq.n	800cbc4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cbbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	e001      	b.n	800cbc8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cbc8:	787b      	ldrb	r3, [r7, #1]
 800cbca:	059b      	lsls	r3, r3, #22
 800cbcc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cbd0:	78bb      	ldrb	r3, [r7, #2]
 800cbd2:	02db      	lsls	r3, r3, #11
 800cbd4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cbd8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cbda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cbde:	049b      	lsls	r3, r3, #18
 800cbe0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cbe4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cbe6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cbe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cbec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cbf2:	78fb      	ldrb	r3, [r7, #3]
 800cbf4:	0159      	lsls	r1, r3, #5
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	440b      	add	r3, r1
 800cbfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbfe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cc04:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cc06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d10f      	bne.n	800cc2e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cc0e:	78fb      	ldrb	r3, [r7, #3]
 800cc10:	015a      	lsls	r2, r3, #5
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	78fa      	ldrb	r2, [r7, #3]
 800cc1e:	0151      	lsls	r1, r2, #5
 800cc20:	693a      	ldr	r2, [r7, #16]
 800cc22:	440a      	add	r2, r1
 800cc24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cc2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08c      	sub	sp, #48	; 0x30
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4613      	mov	r3, r2
 800cc44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	785b      	ldrb	r3, [r3, #1]
 800cc4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cc50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc54:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d02d      	beq.n	800ccbe <USB_HC_StartXfer+0x86>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	791b      	ldrb	r3, [r3, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d129      	bne.n	800ccbe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d117      	bne.n	800cca0 <USB_HC_StartXfer+0x68>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	79db      	ldrb	r3, [r3, #7]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <USB_HC_StartXfer+0x48>
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	79db      	ldrb	r3, [r3, #7]
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d10f      	bne.n	800cca0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	0151      	lsls	r1, r2, #5
 800cc92:	6a3a      	ldr	r2, [r7, #32]
 800cc94:	440a      	add	r2, r1
 800cc96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc9e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10b      	bne.n	800ccbe <USB_HC_StartXfer+0x86>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	795b      	ldrb	r3, [r3, #5]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d107      	bne.n	800ccbe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f000 fa2d 	bl	800d114 <USB_DoPing>
      return HAL_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	e0f8      	b.n	800ceb0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d018      	beq.n	800ccf8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	8912      	ldrh	r2, [r2, #8]
 800ccce:	4413      	add	r3, r2
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	8912      	ldrh	r2, [r2, #8]
 800ccd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccda:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ccdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ccde:	8b7b      	ldrh	r3, [r7, #26]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d90b      	bls.n	800ccfc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800cce4:	8b7b      	ldrh	r3, [r7, #26]
 800cce6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	8912      	ldrh	r2, [r2, #8]
 800ccee:	fb02 f203 	mul.w	r2, r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	611a      	str	r2, [r3, #16]
 800ccf6:	e001      	b.n	800ccfc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	78db      	ldrb	r3, [r3, #3]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d007      	beq.n	800cd14 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cd04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	8912      	ldrh	r2, [r2, #8]
 800cd0a:	fb02 f203 	mul.w	r2, r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	611a      	str	r2, [r3, #16]
 800cd12:	e003      	b.n	800cd1c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	695a      	ldr	r2, [r3, #20]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cd24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd26:	04d9      	lsls	r1, r3, #19
 800cd28:	4b63      	ldr	r3, [pc, #396]	; (800ceb8 <USB_HC_StartXfer+0x280>)
 800cd2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cd2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	7a9b      	ldrb	r3, [r3, #10]
 800cd32:	075b      	lsls	r3, r3, #29
 800cd34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cd38:	69f9      	ldr	r1, [r7, #28]
 800cd3a:	0148      	lsls	r0, r1, #5
 800cd3c:	6a39      	ldr	r1, [r7, #32]
 800cd3e:	4401      	add	r1, r0
 800cd40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cd44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cd46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d009      	beq.n	800cd62 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	68d9      	ldr	r1, [r3, #12]
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd5e:	460a      	mov	r2, r1
 800cd60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bf0c      	ite	eq
 800cd72:	2301      	moveq	r3, #1
 800cd74:	2300      	movne	r3, #0
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	4413      	add	r3, r2
 800cd82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	69fa      	ldr	r2, [r7, #28]
 800cd8a:	0151      	lsls	r1, r2, #5
 800cd8c:	6a3a      	ldr	r2, [r7, #32]
 800cd8e:	440a      	add	r2, r1
 800cd90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	015a      	lsls	r2, r3, #5
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	4413      	add	r3, r2
 800cda2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	7e7b      	ldrb	r3, [r7, #25]
 800cdaa:	075b      	lsls	r3, r3, #29
 800cdac:	69f9      	ldr	r1, [r7, #28]
 800cdae:	0148      	lsls	r0, r1, #5
 800cdb0:	6a39      	ldr	r1, [r7, #32]
 800cdb2:	4401      	add	r1, r0
 800cdb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	015a      	lsls	r2, r3, #5
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdd2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	78db      	ldrb	r3, [r3, #3]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cde2:	613b      	str	r3, [r7, #16]
 800cde4:	e003      	b.n	800cdee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cdec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdf4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	015a      	lsls	r2, r3, #5
 800cdfa:	6a3b      	ldr	r3, [r7, #32]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce02:	461a      	mov	r2, r3
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e04e      	b.n	800ceb0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	78db      	ldrb	r3, [r3, #3]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d149      	bne.n	800ceae <USB_HC_StartXfer+0x276>
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d045      	beq.n	800ceae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	79db      	ldrb	r3, [r3, #7]
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d830      	bhi.n	800ce8c <USB_HC_StartXfer+0x254>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USB_HC_StartXfer+0x1f8>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce41 	.word	0x0800ce41
 800ce34:	0800ce65 	.word	0x0800ce65
 800ce38:	0800ce41 	.word	0x0800ce41
 800ce3c:	0800ce65 	.word	0x0800ce65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	3303      	adds	r3, #3
 800ce46:	089b      	lsrs	r3, r3, #2
 800ce48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ce4a:	8afa      	ldrh	r2, [r7, #22]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d91c      	bls.n	800ce90 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	f043 0220 	orr.w	r2, r3, #32
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	619a      	str	r2, [r3, #24]
        }
        break;
 800ce62:	e015      	b.n	800ce90 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	3303      	adds	r3, #3
 800ce6a:	089b      	lsrs	r3, r3, #2
 800ce6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ce6e:	8afa      	ldrh	r2, [r7, #22]
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d90a      	bls.n	800ce94 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	619a      	str	r2, [r3, #24]
        }
        break;
 800ce8a:	e003      	b.n	800ce94 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ce8c:	bf00      	nop
 800ce8e:	e002      	b.n	800ce96 <USB_HC_StartXfer+0x25e>
        break;
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <USB_HC_StartXfer+0x25e>
        break;
 800ce94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	68d9      	ldr	r1, [r3, #12]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	785a      	ldrb	r2, [r3, #1]
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	2000      	movs	r0, #0
 800cea6:	9000      	str	r0, [sp, #0]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f7ff fb5b 	bl	800c564 <USB_WritePacket>
  }

  return HAL_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3728      	adds	r7, #40	; 0x28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	1ff80000 	.word	0x1ff80000

0800cebc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	b29b      	uxth	r3, r3
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bc80      	pop	{r7}
 800ceda:	4770      	bx	lr

0800cedc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cedc:	b480      	push	{r7}
 800cede:	b089      	sub	sp, #36	; 0x24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ceec:	78fb      	ldrb	r3, [r7, #3]
 800ceee:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	0c9b      	lsrs	r3, r3, #18
 800cf04:	f003 0303 	and.w	r3, r3, #3
 800cf08:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	0fdb      	lsrs	r3, r3, #31
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d104      	bne.n	800cf36 <USB_HC_Halt+0x5a>
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e0e8      	b.n	800d108 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <USB_HC_Halt+0x66>
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d173      	bne.n	800d02a <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	0151      	lsls	r1, r2, #5
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	440a      	add	r2, r1
 800cf58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf60:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f040 80cb 	bne.w	800d106 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d143      	bne.n	800d004 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	0151      	lsls	r1, r2, #5
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	440a      	add	r2, r1
 800cf92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf9a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	0151      	lsls	r1, r2, #5
 800cfae:	69ba      	ldr	r2, [r7, #24]
 800cfb0:	440a      	add	r2, r1
 800cfb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cfba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	015a      	lsls	r2, r3, #5
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	0151      	lsls	r1, r2, #5
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	440a      	add	r2, r1
 800cfd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfda:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	61fb      	str	r3, [r7, #28]
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfe8:	d81d      	bhi.n	800d026 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d000:	d0ec      	beq.n	800cfdc <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d002:	e080      	b.n	800d106 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	015a      	lsls	r2, r3, #5
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	0151      	lsls	r1, r2, #5
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	440a      	add	r2, r1
 800d01a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d01e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d022:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d024:	e06f      	b.n	800d106 <USB_HC_Halt+0x22a>
            break;
 800d026:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d028:	e06d      	b.n	800d106 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	4413      	add	r3, r2
 800d032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	0151      	lsls	r1, r2, #5
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	440a      	add	r2, r1
 800d040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d048:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d143      	bne.n	800d0e2 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	015a      	lsls	r2, r3, #5
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	4413      	add	r3, r2
 800d062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	0151      	lsls	r1, r2, #5
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	440a      	add	r2, r1
 800d070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d078:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	015a      	lsls	r2, r3, #5
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	4413      	add	r3, r2
 800d082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	0151      	lsls	r1, r2, #5
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	440a      	add	r2, r1
 800d090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d098:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	0151      	lsls	r1, r2, #5
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	440a      	add	r2, r1
 800d0b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d0b8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	61fb      	str	r3, [r7, #28]
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0c6:	d81d      	bhi.n	800d104 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0de:	d0ec      	beq.n	800d0ba <USB_HC_Halt+0x1de>
 800d0e0:	e011      	b.n	800d106 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	015a      	lsls	r2, r3, #5
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	697a      	ldr	r2, [r7, #20]
 800d0f2:	0151      	lsls	r1, r2, #5
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	440a      	add	r2, r1
 800d0f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	e000      	b.n	800d106 <USB_HC_Halt+0x22a>
          break;
 800d104:	bf00      	nop
    }
  }

  return HAL_OK;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3724      	adds	r7, #36	; 0x24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bc80      	pop	{r7}
 800d110:	4770      	bx	lr
	...

0800d114 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d124:	78fb      	ldrb	r3, [r7, #3]
 800d126:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d128:	2301      	movs	r3, #1
 800d12a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	04da      	lsls	r2, r3, #19
 800d130:	4b14      	ldr	r3, [pc, #80]	; (800d184 <USB_DoPing+0x70>)
 800d132:	4013      	ands	r3, r2
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	0151      	lsls	r1, r2, #5
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	440a      	add	r2, r1
 800d13c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d144:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	015a      	lsls	r2, r3, #5
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d15c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d164:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d172:	461a      	mov	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bc80      	pop	{r7}
 800d182:	4770      	bx	lr
 800d184:	1ff80000 	.word	0x1ff80000

0800d188 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d194:	2300      	movs	r3, #0
 800d196:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff f942 	bl	800c422 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d19e:	2110      	movs	r1, #16
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff f99b 	bl	800c4dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff f9bc 	bl	800c524 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	e01f      	b.n	800d1f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	613b      	str	r3, [r7, #16]
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	2b0f      	cmp	r3, #15
 800d1f6:	d9dc      	bls.n	800d1b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	e034      	b.n	800d268 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	015a      	lsls	r2, r3, #5
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	4413      	add	r3, r2
 800d206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d214:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d21c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d224:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d232:	461a      	mov	r2, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	3301      	adds	r3, #1
 800d23c:	617b      	str	r3, [r7, #20]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d244:	d80c      	bhi.n	800d260 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d25c:	d0ec      	beq.n	800d238 <USB_StopHost+0xb0>
 800d25e:	e000      	b.n	800d262 <USB_StopHost+0xda>
        break;
 800d260:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	3301      	adds	r3, #1
 800d266:	613b      	str	r3, [r7, #16]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b0f      	cmp	r3, #15
 800d26c:	d9c7      	bls.n	800d1fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d274:	461a      	mov	r2, r3
 800d276:	f04f 33ff 	mov.w	r3, #4294967295
 800d27a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f04f 32ff 	mov.w	r2, #4294967295
 800d282:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800d294:	4904      	ldr	r1, [pc, #16]	; (800d2a8 <MX_FATFS_Init+0x18>)
 800d296:	4805      	ldr	r0, [pc, #20]	; (800d2ac <MX_FATFS_Init+0x1c>)
 800d298:	f006 f820 	bl	80132dc <FATFS_LinkDriver>
 800d29c:	4603      	mov	r3, r0
 800d29e:	461a      	mov	r2, r3
 800d2a0:	4b03      	ldr	r3, [pc, #12]	; (800d2b0 <MX_FATFS_Init+0x20>)
 800d2a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d2a4:	bf00      	nop
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	2000db18 	.word	0x2000db18
 800d2ac:	0801b3dc 	.word	0x0801b3dc
 800d2b0:	2000df7c 	.word	0x2000df7c

0800d2b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d2b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bc80      	pop	{r7}
 800d2c0:	4770      	bx	lr

0800d2c2 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d2c2:	b590      	push	{r4, r7, lr}
 800d2c4:	b089      	sub	sp, #36	; 0x24
 800d2c6:	af04      	add	r7, sp, #16
 800d2c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d2d0:	7919      	ldrb	r1, [r3, #4]
 800d2d2:	2350      	movs	r3, #80	; 0x50
 800d2d4:	2206      	movs	r2, #6
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f001 fd3b 	bl	800ed52 <USBH_FindInterface>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	2bff      	cmp	r3, #255	; 0xff
 800d2e4:	d002      	beq.n	800d2ec <USBH_MSC_InterfaceInit+0x2a>
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d901      	bls.n	800d2f0 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e0ef      	b.n	800d4d0 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f001 fd11 	bl	800ed1c <USBH_SelectInterface>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800d304:	2302      	movs	r3, #2
 800d306:	e0e3      	b.n	800d4d0 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800d30e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d312:	f009 fbf7 	bl	8016b04 <malloc>
 800d316:	4603      	mov	r3, r0
 800d318:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d320:	69db      	ldr	r3, [r3, #28]
 800d322:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800d32a:	2302      	movs	r3, #2
 800d32c:	e0d0      	b.n	800d4d0 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800d32e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d332:	2100      	movs	r1, #0
 800d334:	68b8      	ldr	r0, [r7, #8]
 800d336:	f009 fc03 	bl	8016b40 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	211a      	movs	r1, #26
 800d340:	fb01 f303 	mul.w	r3, r1, r3
 800d344:	4413      	add	r3, r2
 800d346:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b25b      	sxtb	r3, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da16      	bge.n	800d380 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	211a      	movs	r1, #26
 800d358:	fb01 f303 	mul.w	r3, r1, r3
 800d35c:	4413      	add	r3, r2
 800d35e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d362:	781a      	ldrb	r2, [r3, #0]
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	211a      	movs	r1, #26
 800d36e:	fb01 f303 	mul.w	r3, r1, r3
 800d372:	4413      	add	r3, r2
 800d374:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d378:	881a      	ldrh	r2, [r3, #0]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	815a      	strh	r2, [r3, #10]
 800d37e:	e015      	b.n	800d3ac <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	211a      	movs	r1, #26
 800d386:	fb01 f303 	mul.w	r3, r1, r3
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	211a      	movs	r1, #26
 800d39c:	fb01 f303 	mul.w	r3, r1, r3
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d3a6:	881a      	ldrh	r2, [r3, #0]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	211a      	movs	r1, #26
 800d3b2:	fb01 f303 	mul.w	r3, r1, r3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b25b      	sxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	da16      	bge.n	800d3f2 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	211a      	movs	r1, #26
 800d3ca:	fb01 f303 	mul.w	r3, r1, r3
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d3d4:	781a      	ldrb	r2, [r3, #0]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	211a      	movs	r1, #26
 800d3e0:	fb01 f303 	mul.w	r3, r1, r3
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d3ea:	881a      	ldrh	r2, [r3, #0]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	815a      	strh	r2, [r3, #10]
 800d3f0:	e015      	b.n	800d41e <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	211a      	movs	r1, #26
 800d3f8:	fb01 f303 	mul.w	r3, r1, r3
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d402:	781a      	ldrb	r2, [r3, #0]
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	211a      	movs	r1, #26
 800d40e:	fb01 f303 	mul.w	r3, r1, r3
 800d412:	4413      	add	r3, r2
 800d414:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d418:	881a      	ldrh	r2, [r3, #0]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2200      	movs	r2, #0
 800d422:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2200      	movs	r2, #0
 800d428:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2200      	movs	r2, #0
 800d42e:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	799b      	ldrb	r3, [r3, #6]
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f002 ff77 	bl	801032a <USBH_AllocPipe>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	79db      	ldrb	r3, [r3, #7]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f002 ff6d 	bl	801032a <USBH_AllocPipe>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fdeb 	bl	800e034 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	7959      	ldrb	r1, [r3, #5]
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	7998      	ldrb	r0, [r3, #6]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	8912      	ldrh	r2, [r2, #8]
 800d476:	9202      	str	r2, [sp, #8]
 800d478:	2202      	movs	r2, #2
 800d47a:	9201      	str	r2, [sp, #4]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	4623      	mov	r3, r4
 800d480:	4602      	mov	r2, r0
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 ff22 	bl	80102cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	7919      	ldrb	r1, [r3, #4]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	79d8      	ldrb	r0, [r3, #7]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	8952      	ldrh	r2, [r2, #10]
 800d4a0:	9202      	str	r2, [sp, #8]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	9201      	str	r2, [sp, #4]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f002 ff0d 	bl	80102cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	791b      	ldrb	r3, [r3, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f009 f94c 	bl	8016758 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	795b      	ldrb	r3, [r3, #5]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f009 f945 	bl	8016758 <USBH_LL_SetToggle>

  return USBH_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd90      	pop	{r4, r7, pc}

0800d4d8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	795b      	ldrb	r3, [r3, #5]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00e      	beq.n	800d510 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	795b      	ldrb	r3, [r3, #5]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f002 ff06 	bl	801030a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	795b      	ldrb	r3, [r3, #5]
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f002 ff30 	bl	801036a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	791b      	ldrb	r3, [r3, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00e      	beq.n	800d536 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	791b      	ldrb	r3, [r3, #4]
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f002 fef3 	bl	801030a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	791b      	ldrb	r3, [r3, #4]
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f002 ff1d 	bl	801036a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d548:	69db      	ldr	r3, [r3, #28]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f009 fae2 	bl	8016b14 <free>
    phost->pActiveClass->pData = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d556:	2200      	movs	r2, #0
 800d558:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d576:	2301      	movs	r3, #1
 800d578:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	7b9b      	ldrb	r3, [r3, #14]
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d042      	beq.n	800d608 <USBH_MSC_ClassRequest+0xa4>
 800d582:	2b03      	cmp	r3, #3
 800d584:	dc4c      	bgt.n	800d620 <USBH_MSC_ClassRequest+0xbc>
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <USBH_MSC_ClassRequest+0x2a>
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d148      	bne.n	800d620 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	4619      	mov	r1, r3
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fd30 	bl	800dff8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800d598:	4603      	mov	r3, r0
 800d59a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d104      	bne.n	800d5ac <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d138      	bne.n	800d624 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d804      	bhi.n	800d5c6 <USBH_MSC_ClassRequest+0x62>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <USBH_MSC_ClassRequest+0x64>
 800d5c6:	2302      	movs	r3, #2
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	73bb      	strb	r3, [r7, #14]
 800d5d0:	e014      	b.n	800d5fc <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800d5d2:	7bbb      	ldrb	r3, [r7, #14]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	2134      	movs	r1, #52	; 0x34
 800d5d8:	fb01 f303 	mul.w	r3, r1, r3
 800d5dc:	4413      	add	r3, r2
 800d5de:	3392      	adds	r3, #146	; 0x92
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	2134      	movs	r1, #52	; 0x34
 800d5ea:	fb01 f303 	mul.w	r3, r1, r3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	33c1      	adds	r3, #193	; 0xc1
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	73bb      	strb	r3, [r7, #14]
 800d5fc:	7bba      	ldrb	r2, [r7, #14]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d3e5      	bcc.n	800d5d2 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 800d606:	e00d      	b.n	800d624 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800d608:	2100      	movs	r1, #0
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f002 f94f 	bl	800f8ae <USBH_ClrFeature>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d108      	bne.n	800d628 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	7bda      	ldrb	r2, [r3, #15]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800d61e:	e003      	b.n	800d628 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800d620:	bf00      	nop
 800d622:	e002      	b.n	800d62a <USBH_MSC_ClassRequest+0xc6>
      break;
 800d624:	bf00      	nop
 800d626:	e000      	b.n	800d62a <USBH_MSC_ClassRequest+0xc6>
      break;
 800d628:	bf00      	nop
  }

  return status;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800d646:	2301      	movs	r3, #1
 800d648:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800d64a:	2301      	movs	r3, #1
 800d64c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800d64e:	2301      	movs	r3, #1
 800d650:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	7b1b      	ldrb	r3, [r3, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <USBH_MSC_Process+0x2e>
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	f000 828d 	beq.w	800db7a <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800d660:	e28e      	b.n	800db80 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d668:	461a      	mov	r2, r3
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	f080 8267 	bcs.w	800db42 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d67a:	4619      	mov	r1, r3
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	2334      	movs	r3, #52	; 0x34
 800d680:	fb03 f301 	mul.w	r3, r3, r1
 800d684:	4413      	add	r3, r2
 800d686:	3391      	adds	r3, #145	; 0x91
 800d688:	2201      	movs	r2, #1
 800d68a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d692:	4619      	mov	r1, r3
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	2334      	movs	r3, #52	; 0x34
 800d698:	fb03 f301 	mul.w	r3, r3, r1
 800d69c:	4413      	add	r3, r2
 800d69e:	3390      	adds	r3, #144	; 0x90
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b08      	cmp	r3, #8
 800d6a4:	f200 8235 	bhi.w	800db12 <USBH_MSC_Process+0x4de>
 800d6a8:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <USBH_MSC_Process+0x7c>)
 800d6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ae:	bf00      	nop
 800d6b0:	0800d6d5 	.word	0x0800d6d5
 800d6b4:	0800db13 	.word	0x0800db13
 800d6b8:	0800d79d 	.word	0x0800d79d
 800d6bc:	0800d921 	.word	0x0800d921
 800d6c0:	0800d6fb 	.word	0x0800d6fb
 800d6c4:	0800d9ed 	.word	0x0800d9ed
 800d6c8:	0800db13 	.word	0x0800db13
 800d6cc:	0800db13 	.word	0x0800db13
 800d6d0:	0800db01 	.word	0x0800db01
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d6da:	4619      	mov	r1, r3
 800d6dc:	693a      	ldr	r2, [r7, #16]
 800d6de:	2334      	movs	r3, #52	; 0x34
 800d6e0:	fb03 f301 	mul.w	r3, r3, r1
 800d6e4:	4413      	add	r3, r2
 800d6e6:	3390      	adds	r3, #144	; 0x90
 800d6e8:	2204      	movs	r2, #4
 800d6ea:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800d6f8:	e214      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d700:	b2d9      	uxtb	r1, r3
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d708:	461a      	mov	r2, r3
 800d70a:	2334      	movs	r3, #52	; 0x34
 800d70c:	fb03 f302 	mul.w	r3, r3, r2
 800d710:	3398      	adds	r3, #152	; 0x98
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	4413      	add	r3, r2
 800d716:	3307      	adds	r3, #7
 800d718:	461a      	mov	r2, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f001 f834 	bl	800e788 <USBH_MSC_SCSI_Inquiry>
 800d720:	4603      	mov	r3, r0
 800d722:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d730:	4619      	mov	r1, r3
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	2334      	movs	r3, #52	; 0x34
 800d736:	fb03 f301 	mul.w	r3, r3, r1
 800d73a:	4413      	add	r3, r2
 800d73c:	3390      	adds	r3, #144	; 0x90
 800d73e:	2202      	movs	r2, #2
 800d740:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	2b02      	cmp	r3, #2
 800d746:	d10c      	bne.n	800d762 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d74e:	4619      	mov	r1, r3
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	2334      	movs	r3, #52	; 0x34
 800d754:	fb03 f301 	mul.w	r3, r3, r1
 800d758:	4413      	add	r3, r2
 800d75a:	3390      	adds	r3, #144	; 0x90
 800d75c:	2205      	movs	r2, #5
 800d75e:	701a      	strb	r2, [r3, #0]
            break;
 800d760:	e1d9      	b.n	800db16 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d762:	7bfb      	ldrb	r3, [r7, #15]
 800d764:	2b04      	cmp	r3, #4
 800d766:	f040 81d6 	bne.w	800db16 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d770:	4619      	mov	r1, r3
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	2334      	movs	r3, #52	; 0x34
 800d776:	fb03 f301 	mul.w	r3, r3, r1
 800d77a:	4413      	add	r3, r2
 800d77c:	3390      	adds	r3, #144	; 0x90
 800d77e:	2201      	movs	r2, #1
 800d780:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d788:	4619      	mov	r1, r3
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	2334      	movs	r3, #52	; 0x34
 800d78e:	fb03 f301 	mul.w	r3, r3, r1
 800d792:	4413      	add	r3, r2
 800d794:	3391      	adds	r3, #145	; 0x91
 800d796:	2202      	movs	r2, #2
 800d798:	701a      	strb	r2, [r3, #0]
            break;
 800d79a:	e1bc      	b.n	800db16 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 ff30 	bl	800e60c <USBH_MSC_SCSI_TestUnitReady>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d149      	bne.n	800d84a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7bc:	4619      	mov	r1, r3
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	2334      	movs	r3, #52	; 0x34
 800d7c2:	fb03 f301 	mul.w	r3, r3, r1
 800d7c6:	4413      	add	r3, r2
 800d7c8:	3392      	adds	r3, #146	; 0x92
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00c      	beq.n	800d7ea <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	2334      	movs	r3, #52	; 0x34
 800d7dc:	fb03 f301 	mul.w	r3, r3, r1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	33c1      	adds	r3, #193	; 0xc1
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	701a      	strb	r2, [r3, #0]
 800d7e8:	e00b      	b.n	800d802 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	2334      	movs	r3, #52	; 0x34
 800d7f6:	fb03 f301 	mul.w	r3, r3, r1
 800d7fa:	4413      	add	r3, r2
 800d7fc:	33c1      	adds	r3, #193	; 0xc1
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d808:	4619      	mov	r1, r3
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	2334      	movs	r3, #52	; 0x34
 800d80e:	fb03 f301 	mul.w	r3, r3, r1
 800d812:	4413      	add	r3, r2
 800d814:	3390      	adds	r3, #144	; 0x90
 800d816:	2203      	movs	r2, #3
 800d818:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d820:	4619      	mov	r1, r3
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	2334      	movs	r3, #52	; 0x34
 800d826:	fb03 f301 	mul.w	r3, r3, r1
 800d82a:	4413      	add	r3, r2
 800d82c:	3391      	adds	r3, #145	; 0x91
 800d82e:	2200      	movs	r2, #0
 800d830:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d838:	4619      	mov	r1, r3
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	2334      	movs	r3, #52	; 0x34
 800d83e:	fb03 f301 	mul.w	r3, r3, r1
 800d842:	4413      	add	r3, r2
 800d844:	3392      	adds	r3, #146	; 0x92
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d14a      	bne.n	800d8e6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d856:	4619      	mov	r1, r3
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	2334      	movs	r3, #52	; 0x34
 800d85c:	fb03 f301 	mul.w	r3, r3, r1
 800d860:	4413      	add	r3, r2
 800d862:	3392      	adds	r3, #146	; 0x92
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b02      	cmp	r3, #2
 800d868:	d00c      	beq.n	800d884 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d870:	4619      	mov	r1, r3
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	2334      	movs	r3, #52	; 0x34
 800d876:	fb03 f301 	mul.w	r3, r3, r1
 800d87a:	4413      	add	r3, r2
 800d87c:	33c1      	adds	r3, #193	; 0xc1
 800d87e:	2201      	movs	r2, #1
 800d880:	701a      	strb	r2, [r3, #0]
 800d882:	e00b      	b.n	800d89c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d88a:	4619      	mov	r1, r3
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	2334      	movs	r3, #52	; 0x34
 800d890:	fb03 f301 	mul.w	r3, r3, r1
 800d894:	4413      	add	r3, r2
 800d896:	33c1      	adds	r3, #193	; 0xc1
 800d898:	2200      	movs	r2, #0
 800d89a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	2334      	movs	r3, #52	; 0x34
 800d8a8:	fb03 f301 	mul.w	r3, r3, r1
 800d8ac:	4413      	add	r3, r2
 800d8ae:	3390      	adds	r3, #144	; 0x90
 800d8b0:	2205      	movs	r2, #5
 800d8b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	2334      	movs	r3, #52	; 0x34
 800d8c0:	fb03 f301 	mul.w	r3, r3, r1
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3391      	adds	r3, #145	; 0x91
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	693a      	ldr	r2, [r7, #16]
 800d8d6:	2334      	movs	r3, #52	; 0x34
 800d8d8:	fb03 f301 	mul.w	r3, r3, r1
 800d8dc:	4413      	add	r3, r2
 800d8de:	3392      	adds	r3, #146	; 0x92
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	701a      	strb	r2, [r3, #0]
            break;
 800d8e4:	e119      	b.n	800db1a <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
 800d8e8:	2b04      	cmp	r3, #4
 800d8ea:	f040 8116 	bne.w	800db1a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	693a      	ldr	r2, [r7, #16]
 800d8f8:	2334      	movs	r3, #52	; 0x34
 800d8fa:	fb03 f301 	mul.w	r3, r3, r1
 800d8fe:	4413      	add	r3, r2
 800d900:	3390      	adds	r3, #144	; 0x90
 800d902:	2201      	movs	r2, #1
 800d904:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d90c:	4619      	mov	r1, r3
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	2334      	movs	r3, #52	; 0x34
 800d912:	fb03 f301 	mul.w	r3, r3, r1
 800d916:	4413      	add	r3, r2
 800d918:	3391      	adds	r3, #145	; 0x91
 800d91a:	2202      	movs	r2, #2
 800d91c:	701a      	strb	r2, [r3, #0]
            break;
 800d91e:	e0fc      	b.n	800db1a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d926:	b2d9      	uxtb	r1, r3
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d92e:	461a      	mov	r2, r3
 800d930:	2334      	movs	r3, #52	; 0x34
 800d932:	fb03 f302 	mul.w	r3, r3, r2
 800d936:	3390      	adds	r3, #144	; 0x90
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	4413      	add	r3, r2
 800d93c:	3304      	adds	r3, #4
 800d93e:	461a      	mov	r2, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fea6 	bl	800e692 <USBH_MSC_SCSI_ReadCapacity>
 800d946:	4603      	mov	r3, r0
 800d948:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d120      	bne.n	800d992 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d956:	4619      	mov	r1, r3
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	2334      	movs	r3, #52	; 0x34
 800d95c:	fb03 f301 	mul.w	r3, r3, r1
 800d960:	4413      	add	r3, r2
 800d962:	3390      	adds	r3, #144	; 0x90
 800d964:	2201      	movs	r2, #1
 800d966:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d96e:	4619      	mov	r1, r3
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	2334      	movs	r3, #52	; 0x34
 800d974:	fb03 f301 	mul.w	r3, r3, r1
 800d978:	4413      	add	r3, r2
 800d97a:	3391      	adds	r3, #145	; 0x91
 800d97c:	2200      	movs	r2, #0
 800d97e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d986:	3301      	adds	r3, #1
 800d988:	b29a      	uxth	r2, r3
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d990:	e0c5      	b.n	800db1e <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800d992:	7bfb      	ldrb	r3, [r7, #15]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d10c      	bne.n	800d9b2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d99e:	4619      	mov	r1, r3
 800d9a0:	693a      	ldr	r2, [r7, #16]
 800d9a2:	2334      	movs	r3, #52	; 0x34
 800d9a4:	fb03 f301 	mul.w	r3, r3, r1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	3390      	adds	r3, #144	; 0x90
 800d9ac:	2205      	movs	r2, #5
 800d9ae:	701a      	strb	r2, [r3, #0]
            break;
 800d9b0:	e0b5      	b.n	800db1e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	f040 80b2 	bne.w	800db1e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	2334      	movs	r3, #52	; 0x34
 800d9c6:	fb03 f301 	mul.w	r3, r3, r1
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3390      	adds	r3, #144	; 0x90
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9d8:	4619      	mov	r1, r3
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	2334      	movs	r3, #52	; 0x34
 800d9de:	fb03 f301 	mul.w	r3, r3, r1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	3391      	adds	r3, #145	; 0x91
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	701a      	strb	r2, [r3, #0]
            break;
 800d9ea:	e098      	b.n	800db1e <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9f2:	b2d9      	uxtb	r1, r3
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	2334      	movs	r3, #52	; 0x34
 800d9fe:	fb03 f302 	mul.w	r3, r3, r2
 800da02:	3398      	adds	r3, #152	; 0x98
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	4413      	add	r3, r2
 800da08:	3304      	adds	r3, #4
 800da0a:	461a      	mov	r2, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 ff60 	bl	800e8d2 <USBH_MSC_SCSI_RequestSense>
 800da12:	4603      	mov	r3, r0
 800da14:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800da16:	7bfb      	ldrb	r3, [r7, #15]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d145      	bne.n	800daa8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da22:	4619      	mov	r1, r3
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	2334      	movs	r3, #52	; 0x34
 800da28:	fb03 f301 	mul.w	r3, r3, r1
 800da2c:	4413      	add	r3, r2
 800da2e:	339c      	adds	r3, #156	; 0x9c
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b06      	cmp	r3, #6
 800da34:	d00c      	beq.n	800da50 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da3c:	4619      	mov	r1, r3
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	2334      	movs	r3, #52	; 0x34
 800da42:	fb03 f301 	mul.w	r3, r3, r1
 800da46:	4413      	add	r3, r2
 800da48:	339c      	adds	r3, #156	; 0x9c
 800da4a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d117      	bne.n	800da80 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	f242 720f 	movw	r2, #9999	; 0x270f
 800da62:	4293      	cmp	r3, r2
 800da64:	d80c      	bhi.n	800da80 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da6c:	4619      	mov	r1, r3
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	2334      	movs	r3, #52	; 0x34
 800da72:	fb03 f301 	mul.w	r3, r3, r1
 800da76:	4413      	add	r3, r2
 800da78:	3390      	adds	r3, #144	; 0x90
 800da7a:	2202      	movs	r2, #2
 800da7c:	701a      	strb	r2, [r3, #0]
                  break;
 800da7e:	e051      	b.n	800db24 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da86:	4619      	mov	r1, r3
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	2334      	movs	r3, #52	; 0x34
 800da8c:	fb03 f301 	mul.w	r3, r3, r1
 800da90:	4413      	add	r3, r2
 800da92:	3390      	adds	r3, #144	; 0x90
 800da94:	2201      	movs	r2, #1
 800da96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da9e:	3301      	adds	r3, #1
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d10c      	bne.n	800dac8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dab4:	4619      	mov	r1, r3
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	2334      	movs	r3, #52	; 0x34
 800daba:	fb03 f301 	mul.w	r3, r3, r1
 800dabe:	4413      	add	r3, r2
 800dac0:	3390      	adds	r3, #144	; 0x90
 800dac2:	2208      	movs	r2, #8
 800dac4:	701a      	strb	r2, [r3, #0]
            break;
 800dac6:	e02c      	b.n	800db22 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	2b04      	cmp	r3, #4
 800dacc:	d129      	bne.n	800db22 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dad4:	4619      	mov	r1, r3
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	2334      	movs	r3, #52	; 0x34
 800dada:	fb03 f301 	mul.w	r3, r3, r1
 800dade:	4413      	add	r3, r2
 800dae0:	3390      	adds	r3, #144	; 0x90
 800dae2:	2201      	movs	r2, #1
 800dae4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800daec:	4619      	mov	r1, r3
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	2334      	movs	r3, #52	; 0x34
 800daf2:	fb03 f301 	mul.w	r3, r3, r1
 800daf6:	4413      	add	r3, r2
 800daf8:	3391      	adds	r3, #145	; 0x91
 800dafa:	2202      	movs	r2, #2
 800dafc:	701a      	strb	r2, [r3, #0]
            break;
 800dafe:	e010      	b.n	800db22 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db06:	3301      	adds	r3, #1
 800db08:	b29a      	uxth	r2, r3
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800db10:	e008      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            break;
 800db12:	bf00      	nop
 800db14:	e006      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            break;
 800db16:	bf00      	nop
 800db18:	e004      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            break;
 800db1a:	bf00      	nop
 800db1c:	e002      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            break;
 800db1e:	bf00      	nop
 800db20:	e000      	b.n	800db24 <USBH_MSC_Process+0x4f0>
            break;
 800db22:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2204      	movs	r2, #4
 800db28:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800db38:	2200      	movs	r2, #0
 800db3a:	4619      	mov	r1, r3
 800db3c:	f005 fed8 	bl	80138f0 <osMessagePut>
      break;
 800db40:	e01e      	b.n	800db80 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2200      	movs	r2, #0
 800db46:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	2201      	movs	r2, #1
 800db4e:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2204      	movs	r2, #4
 800db54:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800db64:	2200      	movs	r2, #0
 800db66:	4619      	mov	r1, r3
 800db68:	f005 fec2 	bl	80138f0 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800db72:	2102      	movs	r1, #2
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	4798      	blx	r3
      break;
 800db78:	e002      	b.n	800db80 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
      break;
 800db7e:	bf00      	nop
  }
  return error;
 800db80:	7dfb      	ldrb	r3, [r7, #23]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop

0800db8c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bc80      	pop	{r7}
 800db9e:	4770      	bx	lr

0800dba0 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b088      	sub	sp, #32
 800dba4:	af02      	add	r7, sp, #8
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800dbbe:	78fb      	ldrb	r3, [r7, #3]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	2134      	movs	r1, #52	; 0x34
 800dbc4:	fb01 f303 	mul.w	r3, r1, r3
 800dbc8:	4413      	add	r3, r2
 800dbca:	3390      	adds	r3, #144	; 0x90
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	d04b      	beq.n	800dc6a <USBH_MSC_RdWrProcess+0xca>
 800dbd2:	2b07      	cmp	r3, #7
 800dbd4:	f300 80d2 	bgt.w	800dd7c <USBH_MSC_RdWrProcess+0x1dc>
 800dbd8:	2b05      	cmp	r3, #5
 800dbda:	f000 8089 	beq.w	800dcf0 <USBH_MSC_RdWrProcess+0x150>
 800dbde:	2b06      	cmp	r3, #6
 800dbe0:	f040 80cc 	bne.w	800dd7c <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800dbe4:	78f9      	ldrb	r1, [r7, #3]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	2300      	movs	r3, #0
 800dbec:	2200      	movs	r2, #0
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 ff53 	bl	800ea9a <USBH_MSC_SCSI_Read>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10b      	bne.n	800dc16 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	2134      	movs	r1, #52	; 0x34
 800dc04:	fb01 f303 	mul.w	r3, r1, r3
 800dc08:	4413      	add	r3, r2
 800dc0a:	3390      	adds	r3, #144	; 0x90
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	75fb      	strb	r3, [r7, #23]
 800dc14:	e01a      	b.n	800dc4c <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d109      	bne.n	800dc30 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	2134      	movs	r1, #52	; 0x34
 800dc22:	fb01 f303 	mul.w	r3, r1, r3
 800dc26:	4413      	add	r3, r2
 800dc28:	3390      	adds	r3, #144	; 0x90
 800dc2a:	2205      	movs	r2, #5
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	e00d      	b.n	800dc4c <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d10a      	bne.n	800dc4c <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	2134      	movs	r1, #52	; 0x34
 800dc3c:	fb01 f303 	mul.w	r3, r1, r3
 800dc40:	4413      	add	r3, r2
 800dc42:	3390      	adds	r3, #144	; 0x90
 800dc44:	2208      	movs	r2, #8
 800dc46:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2204      	movs	r2, #4
 800dc50:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dc60:	2200      	movs	r2, #0
 800dc62:	4619      	mov	r1, r3
 800dc64:	f005 fe44 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dc68:	e089      	b.n	800dd7e <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800dc6a:	78f9      	ldrb	r1, [r7, #3]
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	2300      	movs	r3, #0
 800dc72:	2200      	movs	r2, #0
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fea5 	bl	800e9c4 <USBH_MSC_SCSI_Write>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10b      	bne.n	800dc9c <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800dc84:	78fb      	ldrb	r3, [r7, #3]
 800dc86:	693a      	ldr	r2, [r7, #16]
 800dc88:	2134      	movs	r1, #52	; 0x34
 800dc8a:	fb01 f303 	mul.w	r3, r1, r3
 800dc8e:	4413      	add	r3, r2
 800dc90:	3390      	adds	r3, #144	; 0x90
 800dc92:	2201      	movs	r2, #1
 800dc94:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75fb      	strb	r3, [r7, #23]
 800dc9a:	e01a      	b.n	800dcd2 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d109      	bne.n	800dcb6 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800dca2:	78fb      	ldrb	r3, [r7, #3]
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	2134      	movs	r1, #52	; 0x34
 800dca8:	fb01 f303 	mul.w	r3, r1, r3
 800dcac:	4413      	add	r3, r2
 800dcae:	3390      	adds	r3, #144	; 0x90
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	e00d      	b.n	800dcd2 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b04      	cmp	r3, #4
 800dcba:	d10a      	bne.n	800dcd2 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800dcbc:	78fb      	ldrb	r3, [r7, #3]
 800dcbe:	693a      	ldr	r2, [r7, #16]
 800dcc0:	2134      	movs	r1, #52	; 0x34
 800dcc2:	fb01 f303 	mul.w	r3, r1, r3
 800dcc6:	4413      	add	r3, r2
 800dcc8:	3390      	adds	r3, #144	; 0x90
 800dcca:	2208      	movs	r2, #8
 800dccc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800dcce:	2302      	movs	r3, #2
 800dcd0:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dce6:	2200      	movs	r2, #0
 800dce8:	4619      	mov	r1, r3
 800dcea:	f005 fe01 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dcee:	e046      	b.n	800dd7e <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800dcf0:	78fb      	ldrb	r3, [r7, #3]
 800dcf2:	2234      	movs	r2, #52	; 0x34
 800dcf4:	fb02 f303 	mul.w	r3, r2, r3
 800dcf8:	3398      	adds	r3, #152	; 0x98
 800dcfa:	693a      	ldr	r2, [r7, #16]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	1d1a      	adds	r2, r3, #4
 800dd00:	78fb      	ldrb	r3, [r7, #3]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fde4 	bl	800e8d2 <USBH_MSC_SCSI_RequestSense>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d113      	bne.n	800dd3c <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800dd14:	78fb      	ldrb	r3, [r7, #3]
 800dd16:	693a      	ldr	r2, [r7, #16]
 800dd18:	2134      	movs	r1, #52	; 0x34
 800dd1a:	fb01 f303 	mul.w	r3, r1, r3
 800dd1e:	4413      	add	r3, r2
 800dd20:	3390      	adds	r3, #144	; 0x90
 800dd22:	2201      	movs	r2, #1
 800dd24:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800dd26:	78fb      	ldrb	r3, [r7, #3]
 800dd28:	693a      	ldr	r2, [r7, #16]
 800dd2a:	2134      	movs	r1, #52	; 0x34
 800dd2c:	fb01 f303 	mul.w	r3, r1, r3
 800dd30:	4413      	add	r3, r2
 800dd32:	3391      	adds	r3, #145	; 0x91
 800dd34:	2202      	movs	r2, #2
 800dd36:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800dd38:	2302      	movs	r3, #2
 800dd3a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d00d      	beq.n	800dd5e <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dd42:	7bfb      	ldrb	r3, [r7, #15]
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d10a      	bne.n	800dd5e <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800dd48:	78fb      	ldrb	r3, [r7, #3]
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	2134      	movs	r1, #52	; 0x34
 800dd4e:	fb01 f303 	mul.w	r3, r1, r3
 800dd52:	4413      	add	r3, r2
 800dd54:	3390      	adds	r3, #144	; 0x90
 800dd56:	2208      	movs	r2, #8
 800dd58:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2204      	movs	r2, #4
 800dd62:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dd72:	2200      	movs	r2, #0
 800dd74:	4619      	mov	r1, r3
 800dd76:	f005 fdbb 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dd7a:	e000      	b.n	800dd7e <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800dd7c:	bf00      	nop

  }
  return error;
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dd9a:	69db      	ldr	r3, [r3, #28]
 800dd9c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	2b0b      	cmp	r3, #11
 800dda6:	d10c      	bne.n	800ddc2 <USBH_MSC_UnitIsReady+0x3a>
 800dda8:	78fb      	ldrb	r3, [r7, #3]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	2134      	movs	r1, #52	; 0x34
 800ddae:	fb01 f303 	mul.w	r3, r1, r3
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3391      	adds	r3, #145	; 0x91
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	73fb      	strb	r3, [r7, #15]
 800ddc0:	e001      	b.n	800ddc6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bc80      	pop	{r7}
 800ddd0:	4770      	bx	lr

0800ddd2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b086      	sub	sp, #24
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	460b      	mov	r3, r1
 800dddc:	607a      	str	r2, [r7, #4]
 800ddde:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dde6:	69db      	ldr	r3, [r3, #28]
 800dde8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b0b      	cmp	r3, #11
 800ddf2:	d10d      	bne.n	800de10 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ddf4:	7afb      	ldrb	r3, [r7, #11]
 800ddf6:	2234      	movs	r2, #52	; 0x34
 800ddf8:	fb02 f303 	mul.w	r3, r2, r3
 800ddfc:	3390      	adds	r3, #144	; 0x90
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	4413      	add	r3, r2
 800de02:	2234      	movs	r2, #52	; 0x34
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f008 fe8c 	bl	8016b24 <memcpy>
    return USBH_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	e000      	b.n	800de12 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800de10:	2302      	movs	r3, #2
  }
}
 800de12:	4618      	mov	r0, r3
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b088      	sub	sp, #32
 800de1e:	af02      	add	r7, sp, #8
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	460b      	mov	r3, r1
 800de28:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de30:	69db      	ldr	r3, [r3, #28]
 800de32:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00e      	beq.n	800de5e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800de46:	2b0b      	cmp	r3, #11
 800de48:	d109      	bne.n	800de5e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800de4a:	7afb      	ldrb	r3, [r7, #11]
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	2134      	movs	r1, #52	; 0x34
 800de50:	fb01 f303 	mul.w	r3, r1, r3
 800de54:	4413      	add	r3, r2
 800de56:	3390      	adds	r3, #144	; 0x90
 800de58:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d001      	beq.n	800de62 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800de5e:	2302      	movs	r3, #2
 800de60:	e040      	b.n	800dee4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2206      	movs	r2, #6
 800de66:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800de68:	7afb      	ldrb	r3, [r7, #11]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	2134      	movs	r1, #52	; 0x34
 800de6e:	fb01 f303 	mul.w	r3, r1, r3
 800de72:	4413      	add	r3, r2
 800de74:	3390      	adds	r3, #144	; 0x90
 800de76:	2206      	movs	r2, #6
 800de78:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800de84:	7af9      	ldrb	r1, [r7, #11]
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 fe03 	bl	800ea9a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800de9a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800de9c:	e016      	b.n	800decc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	1ad2      	subs	r2, r2, r3
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	f242 7110 	movw	r1, #10000	; 0x2710
 800deae:	fb01 f303 	mul.w	r3, r1, r3
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d805      	bhi.n	800dec2 <USBH_MSC_Read+0xa8>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d104      	bne.n	800decc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2201      	movs	r2, #1
 800dec6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800dec8:	2302      	movs	r3, #2
 800deca:	e00b      	b.n	800dee4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800decc:	7afb      	ldrb	r3, [r7, #11]
 800dece:	4619      	mov	r1, r3
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f7ff fe65 	bl	800dba0 <USBH_MSC_RdWrProcess>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d0e0      	beq.n	800de9e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2201      	movs	r2, #1
 800dee0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	607a      	str	r2, [r7, #4]
 800def6:	603b      	str	r3, [r7, #0]
 800def8:	460b      	mov	r3, r1
 800defa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800df02:	69db      	ldr	r3, [r3, #28]
 800df04:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00e      	beq.n	800df30 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800df18:	2b0b      	cmp	r3, #11
 800df1a:	d109      	bne.n	800df30 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800df1c:	7afb      	ldrb	r3, [r7, #11]
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	2134      	movs	r1, #52	; 0x34
 800df22:	fb01 f303 	mul.w	r3, r1, r3
 800df26:	4413      	add	r3, r2
 800df28:	3390      	adds	r3, #144	; 0x90
 800df2a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d001      	beq.n	800df34 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800df30:	2302      	movs	r3, #2
 800df32:	e040      	b.n	800dfb6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2207      	movs	r2, #7
 800df38:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800df3a:	7afb      	ldrb	r3, [r7, #11]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	2134      	movs	r1, #52	; 0x34
 800df40:	fb01 f303 	mul.w	r3, r1, r3
 800df44:	4413      	add	r3, r2
 800df46:	3390      	adds	r3, #144	; 0x90
 800df48:	2207      	movs	r2, #7
 800df4a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800df4c:	7afb      	ldrb	r3, [r7, #11]
 800df4e:	b29a      	uxth	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800df56:	7af9      	ldrb	r1, [r7, #11]
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 fd2f 	bl	800e9c4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800df6c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800df6e:	e016      	b.n	800df9e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad2      	subs	r2, r2, r3
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	f242 7110 	movw	r1, #10000	; 0x2710
 800df80:	fb01 f303 	mul.w	r3, r1, r3
 800df84:	429a      	cmp	r2, r3
 800df86:	d805      	bhi.n	800df94 <USBH_MSC_Write+0xa8>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d104      	bne.n	800df9e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	2201      	movs	r2, #1
 800df98:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800df9a:	2302      	movs	r3, #2
 800df9c:	e00b      	b.n	800dfb6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800df9e:	7afb      	ldrb	r3, [r7, #11]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f7ff fdfc 	bl	800dba0 <USBH_MSC_RdWrProcess>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d0e0      	beq.n	800df70 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3718      	adds	r7, #24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2221      	movs	r2, #33	; 0x21
 800dfca:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	22ff      	movs	r2, #255	; 0xff
 800dfd0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f001 fe3b 	bl	800fc64 <USBH_CtlReq>
 800dfee:	4603      	mov	r3, r0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	22a1      	movs	r2, #161	; 0xa1
 800e006:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	22fe      	movs	r2, #254	; 0xfe
 800e00c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800e020:	2201      	movs	r2, #1
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f001 fe1d 	bl	800fc64 <USBH_CtlReq>
 800e02a:	4603      	mov	r3, r0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4a09      	ldr	r2, [pc, #36]	; (800e070 <USBH_MSC_BOT_Init+0x3c>)
 800e04a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4a09      	ldr	r2, [pc, #36]	; (800e074 <USBH_MSC_BOT_Init+0x40>)
 800e050:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	bc80      	pop	{r7}
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	43425355 	.word	0x43425355
 800e074:	20304050 	.word	0x20304050

0800e078 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800e084:	2301      	movs	r3, #1
 800e086:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800e088:	2301      	movs	r3, #1
 800e08a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800e08c:	2301      	movs	r3, #1
 800e08e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e090:	2300      	movs	r3, #0
 800e092:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e09a:	69db      	ldr	r3, [r3, #28]
 800e09c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	2b0a      	cmp	r3, #10
 800e0ac:	f200 822a 	bhi.w	800e504 <USBH_MSC_BOT_Process+0x48c>
 800e0b0:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <USBH_MSC_BOT_Process+0x40>)
 800e0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b6:	bf00      	nop
 800e0b8:	0800e0e5 	.word	0x0800e0e5
 800e0bc:	0800e10d 	.word	0x0800e10d
 800e0c0:	0800e1cb 	.word	0x0800e1cb
 800e0c4:	0800e1e9 	.word	0x0800e1e9
 800e0c8:	0800e2a5 	.word	0x0800e2a5
 800e0cc:	0800e2c7 	.word	0x0800e2c7
 800e0d0:	0800e3b3 	.word	0x0800e3b3
 800e0d4:	0800e3cf 	.word	0x0800e3cf
 800e0d8:	0800e459 	.word	0x0800e459
 800e0dc:	0800e489 	.word	0x0800e489
 800e0e0:	0800e4eb 	.word	0x0800e4eb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	78fa      	ldrb	r2, [r7, #3]
 800e0e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	795b      	ldrb	r3, [r3, #5]
 800e0fe:	2201      	movs	r2, #1
 800e100:	9200      	str	r2, [sp, #0]
 800e102:	221f      	movs	r2, #31
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f002 f89e 	bl	8010246 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800e10a:	e20a      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	795b      	ldrb	r3, [r3, #5]
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f008 faf6 	bl	8016704 <USBH_LL_GetURBState>
 800e118:	4603      	mov	r3, r0
 800e11a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e11c:	7d3b      	ldrb	r3, [r7, #20]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d126      	bne.n	800e170 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00f      	beq.n	800e14a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e130:	b25b      	sxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	da04      	bge.n	800e140 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	2203      	movs	r2, #3
 800e13a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800e13e:	e008      	b.n	800e152 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	2205      	movs	r2, #5
 800e144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800e148:	e003      	b.n	800e152 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	2207      	movs	r2, #7
 800e14e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2202      	movs	r2, #2
 800e156:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e166:	2200      	movs	r2, #0
 800e168:	4619      	mov	r1, r3
 800e16a:	f005 fbc1 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e16e:	e1cb      	b.n	800e508 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e170:	7d3b      	ldrb	r3, [r7, #20]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d112      	bne.n	800e19c <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2202      	movs	r2, #2
 800e182:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e192:	2200      	movs	r2, #0
 800e194:	4619      	mov	r1, r3
 800e196:	f005 fbab 	bl	80138f0 <osMessagePut>
      break;
 800e19a:	e1b5      	b.n	800e508 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800e19c:	7d3b      	ldrb	r3, [r7, #20]
 800e19e:	2b05      	cmp	r3, #5
 800e1a0:	f040 81b2 	bne.w	800e508 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	220a      	movs	r2, #10
 800e1a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f005 fb94 	bl	80138f0 <osMessagePut>
      break;
 800e1c8:	e19e      	b.n	800e508 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	895a      	ldrh	r2, [r3, #10]
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	791b      	ldrb	r3, [r3, #4]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f002 f859 	bl	8010290 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2204      	movs	r2, #4
 800e1e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800e1e6:	e19c      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	791b      	ldrb	r3, [r3, #4]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f008 fa88 	bl	8016704 <USBH_LL_GetURBState>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e1f8:	7d3b      	ldrb	r3, [r7, #20]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d13b      	bne.n	800e276 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e202:	693a      	ldr	r2, [r7, #16]
 800e204:	8952      	ldrh	r2, [r2, #10]
 800e206:	4293      	cmp	r3, r2
 800e208:	d910      	bls.n	800e22c <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	8952      	ldrh	r2, [r2, #10]
 800e214:	441a      	add	r2, r3
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	8952      	ldrh	r2, [r2, #10]
 800e224:	1a9a      	subs	r2, r3, r2
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	65da      	str	r2, [r3, #92]	; 0x5c
 800e22a:	e002      	b.n	800e232 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2200      	movs	r2, #0
 800e230:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00a      	beq.n	800e250 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	895a      	ldrh	r2, [r3, #10]
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	791b      	ldrb	r3, [r3, #4]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f002 f821 	bl	8010290 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800e24e:	e15d      	b.n	800e50c <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2207      	movs	r2, #7
 800e254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2202      	movs	r2, #2
 800e25c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e26c:	2200      	movs	r2, #0
 800e26e:	4619      	mov	r1, r3
 800e270:	f005 fb3e 	bl	80138f0 <osMessagePut>
      break;
 800e274:	e14a      	b.n	800e50c <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800e276:	7d3b      	ldrb	r3, [r7, #20]
 800e278:	2b05      	cmp	r3, #5
 800e27a:	f040 8147 	bne.w	800e50c <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2209      	movs	r2, #9
 800e282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2202      	movs	r2, #2
 800e28a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e29a:	2200      	movs	r2, #0
 800e29c:	4619      	mov	r1, r3
 800e29e:	f005 fb27 	bl	80138f0 <osMessagePut>
      break;
 800e2a2:	e133      	b.n	800e50c <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	891a      	ldrh	r2, [r3, #8]
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	795b      	ldrb	r3, [r3, #5]
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	9000      	str	r0, [sp, #0]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f001 ffc5 	bl	8010246 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2206      	movs	r2, #6
 800e2c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e2c4:	e12d      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	795b      	ldrb	r3, [r3, #5]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f008 fa19 	bl	8016704 <USBH_LL_GetURBState>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e2d6:	7d3b      	ldrb	r3, [r7, #20]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d13d      	bne.n	800e358 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2e0:	693a      	ldr	r2, [r7, #16]
 800e2e2:	8912      	ldrh	r2, [r2, #8]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d910      	bls.n	800e30a <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	8912      	ldrh	r2, [r2, #8]
 800e2f2:	441a      	add	r2, r3
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	8912      	ldrh	r2, [r2, #8]
 800e302:	1a9a      	subs	r2, r3, r2
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	65da      	str	r2, [r3, #92]	; 0x5c
 800e308:	e002      	b.n	800e310 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2200      	movs	r2, #0
 800e30e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00c      	beq.n	800e332 <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	891a      	ldrh	r2, [r3, #8]
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	795b      	ldrb	r3, [r3, #5]
 800e326:	2001      	movs	r0, #1
 800e328:	9000      	str	r0, [sp, #0]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f001 ff8b 	bl	8010246 <USBH_BulkSendData>
 800e330:	e003      	b.n	800e33a <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	2207      	movs	r2, #7
 800e336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2202      	movs	r2, #2
 800e33e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e34e:	2200      	movs	r2, #0
 800e350:	4619      	mov	r1, r3
 800e352:	f005 facd 	bl	80138f0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800e356:	e0db      	b.n	800e510 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e358:	7d3b      	ldrb	r3, [r7, #20]
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d112      	bne.n	800e384 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	2205      	movs	r2, #5
 800e362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2202      	movs	r2, #2
 800e36a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e37a:	2200      	movs	r2, #0
 800e37c:	4619      	mov	r1, r3
 800e37e:	f005 fab7 	bl	80138f0 <osMessagePut>
      break;
 800e382:	e0c5      	b.n	800e510 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800e384:	7d3b      	ldrb	r3, [r7, #20]
 800e386:	2b05      	cmp	r3, #5
 800e388:	f040 80c2 	bne.w	800e510 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	220a      	movs	r2, #10
 800e390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2202      	movs	r2, #2
 800e398:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	f005 faa0 	bl	80138f0 <osMessagePut>
      break;
 800e3b0:	e0ae      	b.n	800e510 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	791b      	ldrb	r3, [r3, #4]
 800e3bc:	220d      	movs	r2, #13
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 ff66 	bl	8010290 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e3cc:	e0a9      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	791b      	ldrb	r3, [r3, #4]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f008 f995 	bl	8016704 <USBH_LL_GetURBState>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800e3de:	7d3b      	ldrb	r3, [r7, #20]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d123      	bne.n	800e42c <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f8c5 	bl	800e584 <USBH_MSC_DecodeCSW>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800e3fe:	7d7b      	ldrb	r3, [r7, #21]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d102      	bne.n	800e40a <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	75fb      	strb	r3, [r7, #23]
 800e408:	e001      	b.n	800e40e <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800e40a:	2302      	movs	r3, #2
 800e40c:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2202      	movs	r2, #2
 800e412:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e422:	2200      	movs	r2, #0
 800e424:	4619      	mov	r1, r3
 800e426:	f005 fa63 	bl	80138f0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800e42a:	e073      	b.n	800e514 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800e42c:	7d3b      	ldrb	r3, [r7, #20]
 800e42e:	2b05      	cmp	r3, #5
 800e430:	d170      	bne.n	800e514 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2209      	movs	r2, #9
 800e436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2202      	movs	r2, #2
 800e43e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e44e:	2200      	movs	r2, #0
 800e450:	4619      	mov	r1, r3
 800e452:	f005 fa4d 	bl	80138f0 <osMessagePut>
      break;
 800e456:	e05d      	b.n	800e514 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800e458:	78fb      	ldrb	r3, [r7, #3]
 800e45a:	2200      	movs	r2, #0
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f864 	bl	800e52c <USBH_MSC_BOT_Abort>
 800e464:	4603      	mov	r3, r0
 800e466:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e468:	7dbb      	ldrb	r3, [r7, #22]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d104      	bne.n	800e478 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	2207      	movs	r2, #7
 800e472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800e476:	e04f      	b.n	800e518 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800e478:	7dbb      	ldrb	r3, [r7, #22]
 800e47a:	2b04      	cmp	r3, #4
 800e47c:	d14c      	bne.n	800e518 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	220b      	movs	r2, #11
 800e482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e486:	e047      	b.n	800e518 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	2201      	movs	r2, #1
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f84c 	bl	800e52c <USBH_MSC_BOT_Abort>
 800e494:	4603      	mov	r3, r0
 800e496:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e498:	7dbb      	ldrb	r3, [r7, #22]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d11d      	bne.n	800e4da <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	795b      	ldrb	r3, [r3, #5]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f008 f986 	bl	80167b6 <USBH_LL_GetToggle>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	7959      	ldrb	r1, [r3, #5]
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	f1c3 0301 	rsb	r3, r3, #1
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f008 f94b 	bl	8016758 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	791b      	ldrb	r3, [r3, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f008 f944 	bl	8016758 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	2209      	movs	r2, #9
 800e4d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800e4d8:	e020      	b.n	800e51c <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800e4da:	7dbb      	ldrb	r3, [r7, #22]
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d11d      	bne.n	800e51c <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	220b      	movs	r2, #11
 800e4e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e4e8:	e018      	b.n	800e51c <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7ff fd67 	bl	800dfbe <USBH_MSC_BOT_REQ_Reset>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d112      	bne.n	800e520 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800e502:	e00d      	b.n	800e520 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800e504:	bf00      	nop
 800e506:	e00c      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e508:	bf00      	nop
 800e50a:	e00a      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e50c:	bf00      	nop
 800e50e:	e008      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e510:	bf00      	nop
 800e512:	e006      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e514:	bf00      	nop
 800e516:	e004      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e518:	bf00      	nop
 800e51a:	e002      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e51c:	bf00      	nop
 800e51e:	e000      	b.n	800e522 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e520:	bf00      	nop
  }
  return status;
 800e522:	7dfb      	ldrb	r3, [r7, #23]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
 800e538:	4613      	mov	r3, r2
 800e53a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800e53c:	2302      	movs	r3, #2
 800e53e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e546:	69db      	ldr	r3, [r3, #28]
 800e548:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800e54a:	78bb      	ldrb	r3, [r7, #2]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <USBH_MSC_BOT_Abort+0x2a>
 800e550:	2b01      	cmp	r3, #1
 800e552:	d009      	beq.n	800e568 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800e554:	e011      	b.n	800e57a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	79db      	ldrb	r3, [r3, #7]
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 f9a6 	bl	800f8ae <USBH_ClrFeature>
 800e562:	4603      	mov	r3, r0
 800e564:	73fb      	strb	r3, [r7, #15]
      break;
 800e566:	e008      	b.n	800e57a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	799b      	ldrb	r3, [r3, #6]
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f001 f99d 	bl	800f8ae <USBH_ClrFeature>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
      break;
 800e578:	bf00      	nop
  }
  return status;
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e592:	69db      	ldr	r3, [r3, #28]
 800e594:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800e596:	2301      	movs	r3, #1
 800e598:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	791b      	ldrb	r3, [r3, #4]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f008 f81d 	bl	80165e0 <USBH_LL_GetLastXferSize>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b0d      	cmp	r3, #13
 800e5aa:	d002      	beq.n	800e5b2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	73fb      	strb	r3, [r7, #15]
 800e5b0:	e024      	b.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5b6:	4a14      	ldr	r2, [pc, #80]	; (800e608 <USBH_MSC_DecodeCSW+0x84>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d11d      	bne.n	800e5f8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d119      	bne.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	73fb      	strb	r3, [r7, #15]
 800e5d6:	e011      	b.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d102      	bne.n	800e5e8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	73fb      	strb	r3, [r7, #15]
 800e5e6:	e009      	b.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d104      	bne.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	73fb      	strb	r3, [r7, #15]
 800e5f6:	e001      	b.n	800e5fc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	53425355 	.word	0x53425355

0800e60c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	460b      	mov	r3, r1
 800e616:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e618:	2302      	movs	r3, #2
 800e61a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e622:	69db      	ldr	r3, [r3, #28]
 800e624:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d002      	beq.n	800e636 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800e630:	2b02      	cmp	r3, #2
 800e632:	d021      	beq.n	800e678 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e634:	e028      	b.n	800e688 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2200      	movs	r2, #0
 800e63a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	220a      	movs	r2, #10
 800e648:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	3363      	adds	r3, #99	; 0x63
 800e650:	2210      	movs	r2, #16
 800e652:	2100      	movs	r1, #0
 800e654:	4618      	mov	r0, r3
 800e656:	f008 fa73 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	2202      	movs	r2, #2
 800e66e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800e672:	2301      	movs	r3, #1
 800e674:	73fb      	strb	r3, [r7, #15]
      break;
 800e676:	e007      	b.n	800e688 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e678:	78fb      	ldrb	r3, [r7, #3]
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7ff fcfb 	bl	800e078 <USBH_MSC_BOT_Process>
 800e682:	4603      	mov	r3, r0
 800e684:	73fb      	strb	r3, [r7, #15]
      break;
 800e686:	bf00      	nop
  }

  return error;
 800e688:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	460b      	mov	r3, r1
 800e69c:	607a      	str	r2, [r7, #4]
 800e69e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e6aa:	69db      	ldr	r3, [r3, #28]
 800e6ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d002      	beq.n	800e6be <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d027      	beq.n	800e70c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800e6bc:	e05f      	b.n	800e77e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	2208      	movs	r2, #8
 800e6c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	2280      	movs	r2, #128	; 0x80
 800e6c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	220a      	movs	r2, #10
 800e6d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3363      	adds	r3, #99	; 0x63
 800e6d8:	2210      	movs	r2, #16
 800e6da:	2100      	movs	r1, #0
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f008 fa2f 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	2225      	movs	r2, #37	; 0x25
 800e6e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f103 0210 	add.w	r2, r3, #16
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e706:	2301      	movs	r3, #1
 800e708:	75fb      	strb	r3, [r7, #23]
      break;
 800e70a:	e038      	b.n	800e77e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e70c:	7afb      	ldrb	r3, [r7, #11]
 800e70e:	4619      	mov	r1, r3
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f7ff fcb1 	bl	800e078 <USBH_MSC_BOT_Process>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d12d      	bne.n	800e77c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e726:	3303      	adds	r3, #3
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	461a      	mov	r2, r3
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e732:	3302      	adds	r3, #2
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e740:	3301      	adds	r3, #1
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e746:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	061b      	lsls	r3, r3, #24
 800e752:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e75e:	3307      	adds	r3, #7
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	b29a      	uxth	r2, r3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e76a:	3306      	adds	r3, #6
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	021b      	lsls	r3, r3, #8
 800e772:	b29b      	uxth	r3, r3
 800e774:	4313      	orrs	r3, r2
 800e776:	b29a      	uxth	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	809a      	strh	r2, [r3, #4]
      break;
 800e77c:	bf00      	nop
  }

  return error;
 800e77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3718      	adds	r7, #24
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	460b      	mov	r3, r1
 800e792:	607a      	str	r2, [r7, #4]
 800e794:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800e796:	2302      	movs	r3, #2
 800e798:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d002      	beq.n	800e7b4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d03d      	beq.n	800e82e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800e7b2:	e089      	b.n	800e8c8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2224      	movs	r2, #36	; 0x24
 800e7b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	2280      	movs	r2, #128	; 0x80
 800e7be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	220a      	movs	r2, #10
 800e7c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	3363      	adds	r3, #99	; 0x63
 800e7ce:	220a      	movs	r2, #10
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f008 f9b4 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2212      	movs	r2, #18
 800e7dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e7e0:	7afb      	ldrb	r3, [r7, #11]
 800e7e2:	015b      	lsls	r3, r3, #5
 800e7e4:	b2da      	uxtb	r2, r3
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	2224      	movs	r2, #36	; 0x24
 800e800:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2200      	movs	r2, #0
 800e808:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	2201      	movs	r2, #1
 800e810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2202      	movs	r2, #2
 800e818:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	f103 0210 	add.w	r2, r3, #16
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e828:	2301      	movs	r3, #1
 800e82a:	75fb      	strb	r3, [r7, #23]
      break;
 800e82c:	e04c      	b.n	800e8c8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e82e:	7afb      	ldrb	r3, [r7, #11]
 800e830:	4619      	mov	r1, r3
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f7ff fc20 	bl	800e078 <USBH_MSC_BOT_Process>
 800e838:	4603      	mov	r3, r0
 800e83a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d141      	bne.n	800e8c6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800e842:	2222      	movs	r2, #34	; 0x22
 800e844:	2100      	movs	r1, #0
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f008 f97a 	bl	8016b40 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 031f 	and.w	r3, r3, #31
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	095b      	lsrs	r3, r3, #5
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e874:	3301      	adds	r3, #1
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	b25b      	sxtb	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	da03      	bge.n	800e886 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	709a      	strb	r2, [r3, #2]
 800e884:	e002      	b.n	800e88c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	1cd8      	adds	r0, r3, #3
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e896:	3308      	adds	r3, #8
 800e898:	2208      	movs	r2, #8
 800e89a:	4619      	mov	r1, r3
 800e89c:	f008 f942 	bl	8016b24 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f103 000c 	add.w	r0, r3, #12
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ac:	3310      	adds	r3, #16
 800e8ae:	2210      	movs	r2, #16
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	f008 f937 	bl	8016b24 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	331d      	adds	r3, #29
 800e8ba:	693a      	ldr	r2, [r7, #16]
 800e8bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800e8c0:	3220      	adds	r2, #32
 800e8c2:	6812      	ldr	r2, [r2, #0]
 800e8c4:	601a      	str	r2, [r3, #0]
      break;
 800e8c6:	bf00      	nop
  }

  return error;
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b086      	sub	sp, #24
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	460b      	mov	r3, r1
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d002      	beq.n	800e8fe <USBH_MSC_SCSI_RequestSense+0x2c>
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d03d      	beq.n	800e978 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800e8fc:	e05d      	b.n	800e9ba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	220e      	movs	r2, #14
 800e902:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	2280      	movs	r2, #128	; 0x80
 800e908:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	220a      	movs	r2, #10
 800e910:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	3363      	adds	r3, #99	; 0x63
 800e918:	2210      	movs	r2, #16
 800e91a:	2100      	movs	r1, #0
 800e91c:	4618      	mov	r0, r3
 800e91e:	f008 f90f 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2203      	movs	r2, #3
 800e926:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e92a:	7afb      	ldrb	r3, [r7, #11]
 800e92c:	015b      	lsls	r3, r3, #5
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	220e      	movs	r2, #14
 800e94a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	2202      	movs	r2, #2
 800e962:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	f103 0210 	add.w	r2, r3, #16
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e972:	2301      	movs	r3, #1
 800e974:	75fb      	strb	r3, [r7, #23]
      break;
 800e976:	e020      	b.n	800e9ba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e978:	7afb      	ldrb	r3, [r7, #11]
 800e97a:	4619      	mov	r1, r3
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7ff fb7b 	bl	800e078 <USBH_MSC_BOT_Process>
 800e982:	4603      	mov	r3, r0
 800e984:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d115      	bne.n	800e9b8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e992:	3302      	adds	r3, #2
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	f003 030f 	and.w	r3, r3, #15
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9a6:	7b1a      	ldrb	r2, [r3, #12]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9b2:	7b5a      	ldrb	r2, [r3, #13]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	709a      	strb	r2, [r3, #2]
      break;
 800e9b8:	bf00      	nop
  }

  return error;
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	607a      	str	r2, [r7, #4]
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d002      	beq.n	800e9f2 <USBH_MSC_SCSI_Write+0x2e>
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d047      	beq.n	800ea80 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e9f0:	e04e      	b.n	800ea90 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	fb03 f202 	mul.w	r2, r3, r2
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	220a      	movs	r2, #10
 800ea10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	3363      	adds	r3, #99	; 0x63
 800ea18:	2210      	movs	r2, #16
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f008 f88f 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	222a      	movs	r2, #42	; 0x2a
 800ea26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ea2a:	79fa      	ldrb	r2, [r7, #7]
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ea32:	79ba      	ldrb	r2, [r7, #6]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ea3a:	797a      	ldrb	r2, [r7, #5]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ea42:	1d3b      	adds	r3, r7, #4
 800ea44:	781a      	ldrb	r2, [r3, #0]
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ea4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ea56:	f107 0320 	add.w	r3, r7, #32
 800ea5a:	781a      	ldrb	r2, [r3, #0]
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea7e:	e007      	b.n	800ea90 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ea80:	7afb      	ldrb	r3, [r7, #11]
 800ea82:	4619      	mov	r1, r3
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff faf7 	bl	800e078 <USBH_MSC_BOT_Process>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea8e:	bf00      	nop
  }

  return error;
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3718      	adds	r7, #24
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b086      	sub	sp, #24
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	60f8      	str	r0, [r7, #12]
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	603b      	str	r3, [r7, #0]
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800eaaa:	2302      	movs	r3, #2
 800eaac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d002      	beq.n	800eac8 <USBH_MSC_SCSI_Read+0x2e>
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d047      	beq.n	800eb56 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800eac6:	e04e      	b.n	800eb66 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800eace:	461a      	mov	r2, r3
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	fb03 f202 	mul.w	r2, r3, r2
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2280      	movs	r2, #128	; 0x80
 800eade:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	220a      	movs	r2, #10
 800eae6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	3363      	adds	r3, #99	; 0x63
 800eaee:	2210      	movs	r2, #16
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f008 f824 	bl	8016b40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	2228      	movs	r2, #40	; 0x28
 800eafc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800eb00:	79fa      	ldrb	r2, [r7, #7]
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800eb08:	79ba      	ldrb	r2, [r7, #6]
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800eb10:	797a      	ldrb	r2, [r7, #5]
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800eb18:	1d3b      	adds	r3, r7, #4
 800eb1a:	781a      	ldrb	r2, [r3, #0]
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800eb22:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800eb2c:	f107 0320 	add.w	r3, r7, #32
 800eb30:	781a      	ldrb	r2, [r3, #0]
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	2202      	movs	r2, #2
 800eb44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800eb50:	2301      	movs	r3, #1
 800eb52:	75fb      	strb	r3, [r7, #23]
      break;
 800eb54:	e007      	b.n	800eb66 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800eb56:	7afb      	ldrb	r3, [r7, #11]
 800eb58:	4619      	mov	r1, r3
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7ff fa8c 	bl	800e078 <USBH_MSC_BOT_Process>
 800eb60:	4603      	mov	r3, r0
 800eb62:	75fb      	strb	r3, [r7, #23]
      break;
 800eb64:	bf00      	nop
  }

  return error;
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800eb70:	b5b0      	push	{r4, r5, r7, lr}
 800eb72:	b090      	sub	sp, #64	; 0x40
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800eb84:	2302      	movs	r3, #2
 800eb86:	e04d      	b.n	800ec24 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	79fa      	ldrb	r2, [r7, #7]
 800eb8c:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f000 f847 	bl	800ec34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ebd4:	4b15      	ldr	r3, [pc, #84]	; (800ec2c <USBH_Init+0xbc>)
 800ebd6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ebda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ebe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f004 fe59 	bl	801389e <osMessageCreate>
 800ebec:	4602      	mov	r2, r0
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ebf4:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <USBH_Init+0xc0>)
 800ebf6:	f107 0414 	add.w	r4, r7, #20
 800ebfa:	461d      	mov	r5, r3
 800ebfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ec04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	68f9      	ldr	r1, [r7, #12]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f004 fd1b 	bl	801364a <osThreadCreate>
 800ec14:	4602      	mov	r2, r0
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f007 fc2b 	bl	8016478 <USBH_LL_Init>

  return USBH_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3740      	adds	r7, #64	; 0x40
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ec2c:	0801b2c0 	.word	0x0801b2c0
 800ec30:	0801b2d0 	.word	0x0801b2d0

0800ec34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ec40:	2300      	movs	r3, #0
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e008      	b.n	800ec58 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	32e0      	adds	r2, #224	; 0xe0
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	3301      	adds	r3, #1
 800ec56:	60fb      	str	r3, [r7, #12]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b0e      	cmp	r3, #14
 800ec5c:	d9f3      	bls.n	800ec46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	e009      	b.n	800ec78 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	4413      	add	r3, r2
 800ec6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec6e:	2200      	movs	r2, #0
 800ec70:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3301      	adds	r3, #1
 800ec76:	60fb      	str	r3, [r7, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec7e:	d3f1      	bcc.n	800ec64 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2240      	movs	r2, #64	; 0x40
 800eca4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ecbc:	2300      	movs	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bc80      	pop	{r7}
 800ecc6:	4770      	bx	lr

0800ecc8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d017      	beq.n	800ed0c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10f      	bne.n	800ed06 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecec:	1c59      	adds	r1, r3, #1
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	33dc      	adds	r3, #220	; 0xdc
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800ed00:	2300      	movs	r3, #0
 800ed02:	73fb      	strb	r3, [r7, #15]
 800ed04:	e004      	b.n	800ed10 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ed06:	2302      	movs	r3, #2
 800ed08:	73fb      	strb	r3, [r7, #15]
 800ed0a:	e001      	b.n	800ed10 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bc80      	pop	{r7}
 800ed1a:	4770      	bx	lr

0800ed1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ed32:	78fa      	ldrb	r2, [r7, #3]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d204      	bcs.n	800ed42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	78fa      	ldrb	r2, [r7, #3]
 800ed3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800ed40:	e001      	b.n	800ed46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ed42:	2302      	movs	r3, #2
 800ed44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bc80      	pop	{r7}
 800ed50:	4770      	bx	lr

0800ed52 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b087      	sub	sp, #28
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	4608      	mov	r0, r1
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	461a      	mov	r2, r3
 800ed60:	4603      	mov	r3, r0
 800ed62:	70fb      	strb	r3, [r7, #3]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70bb      	strb	r3, [r7, #2]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f203 3336 	addw	r3, r3, #822	; 0x336
 800ed7a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ed7c:	e025      	b.n	800edca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	221a      	movs	r2, #26
 800ed82:	fb02 f303 	mul.w	r3, r2, r3
 800ed86:	3308      	adds	r3, #8
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	3302      	adds	r3, #2
 800ed8e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	795b      	ldrb	r3, [r3, #5]
 800ed94:	78fa      	ldrb	r2, [r7, #3]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d002      	beq.n	800eda0 <USBH_FindInterface+0x4e>
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	2bff      	cmp	r3, #255	; 0xff
 800ed9e:	d111      	bne.n	800edc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eda4:	78ba      	ldrb	r2, [r7, #2]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d002      	beq.n	800edb0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800edaa:	78bb      	ldrb	r3, [r7, #2]
 800edac:	2bff      	cmp	r3, #255	; 0xff
 800edae:	d109      	bne.n	800edc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800edb4:	787a      	ldrb	r2, [r7, #1]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d002      	beq.n	800edc0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800edba:	787b      	ldrb	r3, [r7, #1]
 800edbc:	2bff      	cmp	r3, #255	; 0xff
 800edbe:	d101      	bne.n	800edc4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
 800edc2:	e006      	b.n	800edd2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800edc4:	7dfb      	ldrb	r3, [r7, #23]
 800edc6:	3301      	adds	r3, #1
 800edc8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d9d6      	bls.n	800ed7e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800edd0:	23ff      	movs	r3, #255	; 0xff
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	371c      	adds	r7, #28
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bc80      	pop	{r7}
 800edda:	4770      	bx	lr

0800eddc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f007 fb83 	bl	80164f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800edea:	2101      	movs	r1, #1
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f007 fc9c 	bl	801672a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af04      	add	r7, sp, #16
 800ee02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ee04:	2302      	movs	r3, #2
 800ee06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d102      	bne.n	800ee1e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2203      	movs	r2, #3
 800ee1c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b0b      	cmp	r3, #11
 800ee26:	f200 81e4 	bhi.w	800f1f2 <USBH_Process+0x3f6>
 800ee2a:	a201      	add	r2, pc, #4	; (adr r2, 800ee30 <USBH_Process+0x34>)
 800ee2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee30:	0800ee61 	.word	0x0800ee61
 800ee34:	0800ee9f 	.word	0x0800ee9f
 800ee38:	0800eeb3 	.word	0x0800eeb3
 800ee3c:	0800f171 	.word	0x0800f171
 800ee40:	0800f1f3 	.word	0x0800f1f3
 800ee44:	0800ef73 	.word	0x0800ef73
 800ee48:	0800f10b 	.word	0x0800f10b
 800ee4c:	0800efa3 	.word	0x0800efa3
 800ee50:	0800efdf 	.word	0x0800efdf
 800ee54:	0800f019 	.word	0x0800f019
 800ee58:	0800f061 	.word	0x0800f061
 800ee5c:	0800f159 	.word	0x0800f159
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f000 81c4 	beq.w	800f1f6 <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ee74:	20c8      	movs	r0, #200	; 0xc8
 800ee76:	f007 fccd 	bl	8016814 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f007 fb95 	bl	80165aa <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ee94:	2200      	movs	r2, #0
 800ee96:	4619      	mov	r1, r3
 800ee98:	f004 fd2a 	bl	80138f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ee9c:	e1ab      	b.n	800f1f6 <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	f040 81a8 	bne.w	800f1fa <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2202      	movs	r2, #2
 800eeae:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eeb0:	e1a3      	b.n	800f1fa <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d005      	beq.n	800eec8 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800eec2:	2104      	movs	r1, #4
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800eec8:	2064      	movs	r0, #100	; 0x64
 800eeca:	f007 fca3 	bl	8016814 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f007 fb44 	bl	801655c <USBH_LL_GetSpeed>
 800eed4:	4603      	mov	r3, r0
 800eed6:	461a      	mov	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2205      	movs	r2, #5
 800eee2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800eee4:	2100      	movs	r1, #0
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f001 fa1f 	bl	801032a <USBH_AllocPipe>
 800eeec:	4603      	mov	r3, r0
 800eeee:	461a      	mov	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800eef4:	2180      	movs	r1, #128	; 0x80
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f001 fa17 	bl	801032a <USBH_AllocPipe>
 800eefc:	4603      	mov	r3, r0
 800eefe:	461a      	mov	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	7919      	ldrb	r1, [r3, #4]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800ef18:	b292      	uxth	r2, r2
 800ef1a:	9202      	str	r2, [sp, #8]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	9201      	str	r2, [sp, #4]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	4603      	mov	r3, r0
 800ef24:	2280      	movs	r2, #128	; 0x80
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f001 f9d0 	bl	80102cc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	7959      	ldrb	r1, [r3, #5]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800ef40:	b292      	uxth	r2, r2
 800ef42:	9202      	str	r2, [sp, #8]
 800ef44:	2200      	movs	r2, #0
 800ef46:	9201      	str	r2, [sp, #4]
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f001 f9bc 	bl	80102cc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ef68:	2200      	movs	r2, #0
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	f004 fcc0 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef70:	e14c      	b.n	800f20c <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f950 	bl	800f218 <USBH_HandleEnum>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f040 813f 	bne.w	800f1fe <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d103      	bne.n	800ef9a <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2208      	movs	r2, #8
 800ef96:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800ef98:	e131      	b.n	800f1fe <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2207      	movs	r2, #7
 800ef9e:	701a      	strb	r2, [r3, #0]
      break;
 800efa0:	e12d      	b.n	800f1fe <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 812a 	beq.w	800f202 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800efb4:	2101      	movs	r1, #1
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2208      	movs	r2, #8
 800efbe:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2205      	movs	r2, #5
 800efc4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800efd4:	2200      	movs	r2, #0
 800efd6:	4619      	mov	r1, r3
 800efd8:	f004 fc8a 	bl	80138f0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800efdc:	e111      	b.n	800f202 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4619      	mov	r1, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fc19 	bl	800f820 <USBH_SetCfg>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2209      	movs	r2, #9
 800eff8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2201      	movs	r2, #1
 800effe:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f00e:	2200      	movs	r2, #0
 800f010:	4619      	mov	r1, r3
 800f012:	f004 fc6d 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f016:	e0f9      	b.n	800f20c <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f01e:	f003 0320 	and.w	r3, r3, #32
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f026:	2101      	movs	r1, #1
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fc1c 	bl	800f866 <USBH_SetFeature>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	220a      	movs	r2, #10
 800f038:	701a      	strb	r2, [r3, #0]
 800f03a:	e002      	b.n	800f042 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	220a      	movs	r2, #10
 800f040:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f056:	2200      	movs	r2, #0
 800f058:	4619      	mov	r1, r3
 800f05a:	f004 fc49 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f05e:	e0d5      	b.n	800f20c <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d040      	beq.n	800f0ec <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f072:	2300      	movs	r3, #0
 800f074:	73fb      	strb	r3, [r7, #15]
 800f076:	e017      	b.n	800f0a8 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f078:	7bfb      	ldrb	r3, [r7, #15]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	33dc      	adds	r3, #220	; 0xdc
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	791a      	ldrb	r2, [r3, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d108      	bne.n	800f0a2 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	33dc      	adds	r3, #220	; 0xdc
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	685a      	ldr	r2, [r3, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	73fb      	strb	r3, [r7, #15]
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0e4      	beq.n	800f078 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d016      	beq.n	800f0e6 <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	4798      	blx	r3
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2206      	movs	r2, #6
 800f0ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800f0d6:	2103      	movs	r1, #3
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	4798      	blx	r3
 800f0dc:	e006      	b.n	800f0ec <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	220d      	movs	r2, #13
 800f0e2:	701a      	strb	r2, [r3, #0]
 800f0e4:	e002      	b.n	800f0ec <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	220d      	movs	r2, #13
 800f0ea:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2205      	movs	r2, #5
 800f0f0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f100:	2200      	movs	r2, #0
 800f102:	4619      	mov	r1, r3
 800f104:	f004 fbf4 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f108:	e080      	b.n	800f20c <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00f      	beq.n	800f134 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f11a:	691b      	ldr	r3, [r3, #16]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	4798      	blx	r3
 800f120:	4603      	mov	r3, r0
 800f122:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f124:	7bbb      	ldrb	r3, [r7, #14]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d16c      	bne.n	800f206 <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	220b      	movs	r2, #11
 800f130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f132:	e068      	b.n	800f206 <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	220d      	movs	r2, #13
 800f138:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2205      	movs	r2, #5
 800f13e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f14e:	2200      	movs	r2, #0
 800f150:	4619      	mov	r1, r3
 800f152:	f004 fbcd 	bl	80138f0 <osMessagePut>
      break;
 800f156:	e056      	b.n	800f206 <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d053      	beq.n	800f20a <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f168:	695b      	ldr	r3, [r3, #20]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	4798      	blx	r3
      }
      break;
 800f16e:	e04c      	b.n	800f20a <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff fd5b 	bl	800ec34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f184:	2b00      	cmp	r3, #0
 800f186:	d009      	beq.n	800f19c <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d005      	beq.n	800f1b2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800f1ac:	2105      	movs	r1, #5
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d107      	bne.n	800f1ce <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff fe08 	bl	800eddc <USBH_Start>
 800f1cc:	e002      	b.n	800f1d4 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f007 f98e 	bl	80164f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	f004 fb80 	bl	80138f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1f0:	e00c      	b.n	800f20c <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800f1f2:	bf00      	nop
 800f1f4:	e00a      	b.n	800f20c <USBH_Process+0x410>
      break;
 800f1f6:	bf00      	nop
 800f1f8:	e008      	b.n	800f20c <USBH_Process+0x410>
      break;
 800f1fa:	bf00      	nop
 800f1fc:	e006      	b.n	800f20c <USBH_Process+0x410>
      break;
 800f1fe:	bf00      	nop
 800f200:	e004      	b.n	800f20c <USBH_Process+0x410>
    break;
 800f202:	bf00      	nop
 800f204:	e002      	b.n	800f20c <USBH_Process+0x410>
      break;
 800f206:	bf00      	nop
 800f208:	e000      	b.n	800f20c <USBH_Process+0x410>
      break;
 800f20a:	bf00      	nop
  }
  return USBH_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop

0800f218 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b088      	sub	sp, #32
 800f21c:	af04      	add	r7, sp, #16
 800f21e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f220:	2301      	movs	r3, #1
 800f222:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	785b      	ldrb	r3, [r3, #1]
 800f228:	2b07      	cmp	r3, #7
 800f22a:	f200 8132 	bhi.w	800f492 <USBH_HandleEnum+0x27a>
 800f22e:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <USBH_HandleEnum+0x1c>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f255 	.word	0x0800f255
 800f238:	0800f2c7 	.word	0x0800f2c7
 800f23c:	0800f2df 	.word	0x0800f2df
 800f240:	0800f355 	.word	0x0800f355
 800f244:	0800f36d 	.word	0x0800f36d
 800f248:	0800f38b 	.word	0x0800f38b
 800f24c:	0800f3f7 	.word	0x0800f3f7
 800f250:	0800f447 	.word	0x0800f447
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800f254:	2108      	movs	r1, #8
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fa12 	bl	800f680 <USBH_Get_DevDesc>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f040 8119 	bne.w	800f496 <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	7919      	ldrb	r1, [r3, #4]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800f288:	b292      	uxth	r2, r2
 800f28a:	9202      	str	r2, [sp, #8]
 800f28c:	2200      	movs	r2, #0
 800f28e:	9201      	str	r2, [sp, #4]
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	4603      	mov	r3, r0
 800f294:	2280      	movs	r2, #128	; 0x80
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f001 f818 	bl	80102cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	7959      	ldrb	r1, [r3, #5]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800f2b0:	b292      	uxth	r2, r2
 800f2b2:	9202      	str	r2, [sp, #8]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	9201      	str	r2, [sp, #4]
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2200      	movs	r2, #0
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f001 f804 	bl	80102cc <USBH_OpenPipe>
      }
      break;
 800f2c4:	e0e7      	b.n	800f496 <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800f2c6:	2112      	movs	r1, #18
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f9d9 	bl	800f680 <USBH_Get_DevDesc>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 80e2 	bne.w	800f49a <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2202      	movs	r2, #2
 800f2da:	705a      	strb	r2, [r3, #1]

      }
      break;
 800f2dc:	e0dd      	b.n	800f49a <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800f2de:	2101      	movs	r1, #1
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fa79 	bl	800f7d8 <USBH_SetAddress>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f040 80d8 	bne.w	800f49e <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800f2ee:	2002      	movs	r0, #2
 800f2f0:	f007 fa90 	bl	8016814 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2203      	movs	r2, #3
 800f300:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7919      	ldrb	r1, [r3, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800f316:	b292      	uxth	r2, r2
 800f318:	9202      	str	r2, [sp, #8]
 800f31a:	2200      	movs	r2, #0
 800f31c:	9201      	str	r2, [sp, #4]
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	4603      	mov	r3, r0
 800f322:	2280      	movs	r2, #128	; 0x80
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 ffd1 	bl	80102cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	7959      	ldrb	r1, [r3, #5]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800f33e:	b292      	uxth	r2, r2
 800f340:	9202      	str	r2, [sp, #8]
 800f342:	2200      	movs	r2, #0
 800f344:	9201      	str	r2, [sp, #4]
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	4603      	mov	r3, r0
 800f34a:	2200      	movs	r2, #0
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 ffbd 	bl	80102cc <USBH_OpenPipe>
      }
      break;
 800f352:	e0a4      	b.n	800f49e <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800f354:	2109      	movs	r1, #9
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f9ba 	bl	800f6d0 <USBH_Get_CfgDesc>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f040 809f 	bne.w	800f4a2 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2204      	movs	r2, #4
 800f368:	705a      	strb	r2, [r3, #1]
      }
      break;
 800f36a:	e09a      	b.n	800f4a2 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f9ab 	bl	800f6d0 <USBH_Get_CfgDesc>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f040 8092 	bne.w	800f4a6 <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2205      	movs	r2, #5
 800f386:	705a      	strb	r2, [r3, #1]
      }
      break;
 800f388:	e08d      	b.n	800f4a6 <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800f390:	2b00      	cmp	r3, #0
 800f392:	d01e      	beq.n	800f3d2 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800f3a0:	23ff      	movs	r3, #255	; 0xff
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f9b8 	bl	800f718 <USBH_Get_StringDesc>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d17d      	bne.n	800f4aa <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2206      	movs	r2, #6
 800f3b2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2205      	movs	r2, #5
 800f3b8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	f004 fa90 	bl	80138f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f3d0:	e06b      	b.n	800f4aa <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2206      	movs	r2, #6
 800f3d6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2205      	movs	r2, #5
 800f3dc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	f004 fa7e 	bl	80138f0 <osMessagePut>
      break;
 800f3f4:	e059      	b.n	800f4aa <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d010      	beq.n	800f422 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800f40c:	23ff      	movs	r3, #255	; 0xff
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f982 	bl	800f718 <USBH_Get_StringDesc>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d149      	bne.n	800f4ae <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2207      	movs	r2, #7
 800f41e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f420:	e045      	b.n	800f4ae <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2207      	movs	r2, #7
 800f426:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2205      	movs	r2, #5
 800f42c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f43c:	2200      	movs	r2, #0
 800f43e:	4619      	mov	r1, r3
 800f440:	f004 fa56 	bl	80138f0 <osMessagePut>
      break;
 800f444:	e033      	b.n	800f4ae <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00f      	beq.n	800f470 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800f45c:	23ff      	movs	r3, #255	; 0xff
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f95a 	bl	800f718 <USBH_Get_StringDesc>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d123      	bne.n	800f4b2 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f46a:	2300      	movs	r3, #0
 800f46c:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f46e:	e020      	b.n	800f4b2 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800f470:	2300      	movs	r3, #0
 800f472:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2205      	movs	r2, #5
 800f478:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f488:	2200      	movs	r2, #0
 800f48a:	4619      	mov	r1, r3
 800f48c:	f004 fa30 	bl	80138f0 <osMessagePut>
      break;
 800f490:	e00f      	b.n	800f4b2 <USBH_HandleEnum+0x29a>

    default:
      break;
 800f492:	bf00      	nop
 800f494:	e00e      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f496:	bf00      	nop
 800f498:	e00c      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f49a:	bf00      	nop
 800f49c:	e00a      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f49e:	bf00      	nop
 800f4a0:	e008      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f4a2:	bf00      	nop
 800f4a4:	e006      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f4a6:	bf00      	nop
 800f4a8:	e004      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f4aa:	bf00      	nop
 800f4ac:	e002      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f4ae:	bf00      	nop
 800f4b0:	e000      	b.n	800f4b4 <USBH_HandleEnum+0x29c>
      break;
 800f4b2:	bf00      	nop
  }
  return Status;
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop

0800f4c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800f4d2:	bf00      	nop
 800f4d4:	370c      	adds	r7, #12
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bc80      	pop	{r7}
 800f4da:	4770      	bx	lr

0800f4dc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f804 	bl	800f500 <USBH_HandleSof>
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b0b      	cmp	r3, #11
 800f510:	d10a      	bne.n	800f528 <USBH_HandleSof+0x28>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d005      	beq.n	800f528 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	4798      	blx	r3
  }
}
 800f528:	bf00      	nop
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f554:	2200      	movs	r2, #0
 800f556:	4619      	mov	r1, r3
 800f558:	f004 f9ca 	bl	80138f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f55c:	bf00      	nop
}
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800f574:	bf00      	nop
}
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	bc80      	pop	{r7}
 800f57c:	4770      	bx	lr

0800f57e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b082      	sub	sp, #8
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2201      	movs	r2, #1
 800f58a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2200      	movs	r2, #0
 800f592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f004 f99b 	bl	80138f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f006 ff9e 	bl	8016526 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	791b      	ldrb	r3, [r3, #4]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 feba 	bl	801036a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	795b      	ldrb	r3, [r3, #5]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 feb4 	bl	801036a <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f616:	2200      	movs	r2, #0
 800f618:	4619      	mov	r1, r3
 800f61a:	f004 f969 	bl	80138f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800f636:	f107 030c 	add.w	r3, r7, #12
 800f63a:	f04f 32ff 	mov.w	r2, #4294967295
 800f63e:	4618      	mov	r0, r3
 800f640:	f004 f996 	bl	8013970 <osMessageGet>
    if (event.status == osEventMessage)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b10      	cmp	r3, #16
 800f648:	d1f2      	bne.n	800f630 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff fbd6 	bl	800edfc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f650:	e7ee      	b.n	800f630 <USBH_Process_OS+0x8>

0800f652 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b082      	sub	sp, #8
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f66e:	2200      	movs	r2, #0
 800f670:	4619      	mov	r1, r3
 800f672:	f004 f93d 	bl	80138f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af02      	add	r7, sp, #8
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f692:	78fb      	ldrb	r3, [r7, #3]
 800f694:	b29b      	uxth	r3, r3
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	4613      	mov	r3, r2
 800f69a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f69e:	2100      	movs	r1, #0
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f864 	bl	800f76e <USBH_GetDescriptor>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	73fb      	strb	r3, [r7, #15]
 800f6aa:	7bfb      	ldrb	r3, [r7, #15]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10a      	bne.n	800f6c6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f6bc:	78fa      	ldrb	r2, [r7, #3]
 800f6be:	b292      	uxth	r2, r2
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f000 f918 	bl	800f8f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af02      	add	r7, sp, #8
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	331c      	adds	r3, #28
 800f6e0:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f6e2:	887b      	ldrh	r3, [r7, #2]
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f83d 	bl	800f76e <USBH_GetDescriptor>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	72fb      	strb	r3, [r7, #11]
 800f6f8:	7afb      	ldrb	r3, [r7, #11]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d107      	bne.n	800f70e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f203 3336 	addw	r3, r3, #822	; 0x336
 800f704:	887a      	ldrh	r2, [r7, #2]
 800f706:	68f9      	ldr	r1, [r7, #12]
 800f708:	4618      	mov	r0, r3
 800f70a:	f000 f963 	bl	800f9d4 <USBH_ParseCfgDesc>
  }

  return status;
 800f70e:	7afb      	ldrb	r3, [r7, #11]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b088      	sub	sp, #32
 800f71c:	af02      	add	r7, sp, #8
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	607a      	str	r2, [r7, #4]
 800f722:	461a      	mov	r2, r3
 800f724:	460b      	mov	r3, r1
 800f726:	72fb      	strb	r3, [r7, #11]
 800f728:	4613      	mov	r3, r2
 800f72a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f734:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f73c:	893b      	ldrh	r3, [r7, #8]
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	460b      	mov	r3, r1
 800f742:	2100      	movs	r1, #0
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f000 f812 	bl	800f76e <USBH_GetDescriptor>
 800f74a:	4603      	mov	r3, r0
 800f74c:	75fb      	strb	r3, [r7, #23]
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d107      	bne.n	800f764 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f75a:	893a      	ldrh	r2, [r7, #8]
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	f000 fa34 	bl	800fbcc <USBH_ParseStringDesc>
  }

  return status;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b084      	sub	sp, #16
 800f772:	af00      	add	r7, sp, #0
 800f774:	60f8      	str	r0, [r7, #12]
 800f776:	607b      	str	r3, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	72fb      	strb	r3, [r7, #11]
 800f77c:	4613      	mov	r3, r2
 800f77e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	789b      	ldrb	r3, [r3, #2]
 800f784:	2b01      	cmp	r3, #1
 800f786:	d11c      	bne.n	800f7c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2206      	movs	r2, #6
 800f798:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	893a      	ldrh	r2, [r7, #8]
 800f79e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f7a0:	893b      	ldrh	r3, [r7, #8]
 800f7a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f7a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7aa:	d104      	bne.n	800f7b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f240 4209 	movw	r2, #1033	; 0x409
 800f7b2:	829a      	strh	r2, [r3, #20]
 800f7b4:	e002      	b.n	800f7bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	8b3a      	ldrh	r2, [r7, #24]
 800f7c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f7c2:	8b3b      	ldrh	r3, [r7, #24]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f000 fa4b 	bl	800fc64 <USBH_CtlReq>
 800f7ce:	4603      	mov	r3, r0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	789b      	ldrb	r3, [r3, #2]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d10f      	bne.n	800f80c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2205      	movs	r2, #5
 800f7f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f7f8:	78fb      	ldrb	r3, [r7, #3]
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f80c:	2200      	movs	r2, #0
 800f80e:	2100      	movs	r1, #0
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fa27 	bl	800fc64 <USBH_CtlReq>
 800f816:	4603      	mov	r3, r0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	789b      	ldrb	r3, [r3, #2]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d10e      	bne.n	800f852 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2209      	movs	r2, #9
 800f83e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	887a      	ldrh	r2, [r7, #2]
 800f844:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2200      	movs	r2, #0
 800f84a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f852:	2200      	movs	r2, #0
 800f854:	2100      	movs	r1, #0
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fa04 	bl	800fc64 <USBH_CtlReq>
 800f85c:	4603      	mov	r3, r0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}

0800f866 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b082      	sub	sp, #8
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
 800f86e:	460b      	mov	r3, r1
 800f870:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	789b      	ldrb	r3, [r3, #2]
 800f876:	2b01      	cmp	r3, #1
 800f878:	d10f      	bne.n	800f89a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2203      	movs	r2, #3
 800f884:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f886:	78fb      	ldrb	r3, [r7, #3]
 800f888:	b29a      	uxth	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f89a:	2200      	movs	r2, #0
 800f89c:	2100      	movs	r1, #0
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 f9e0 	bl	800fc64 <USBH_CtlReq>
 800f8a4:	4603      	mov	r3, r0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b082      	sub	sp, #8
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	789b      	ldrb	r3, [r3, #2]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d10f      	bne.n	800f8e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f9bc 	bl	800fc64 <USBH_CtlReq>
 800f8ec:	4603      	mov	r3, r0
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	b085      	sub	sp, #20
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	60f8      	str	r0, [r7, #12]
 800f8fe:	60b9      	str	r1, [r7, #8]
 800f900:	4613      	mov	r3, r2
 800f902:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	781a      	ldrb	r2, [r3, #0]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	785a      	ldrb	r2, [r3, #1]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	3302      	adds	r3, #2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	3303      	adds	r3, #3
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	b29b      	uxth	r3, r3
 800f924:	021b      	lsls	r3, r3, #8
 800f926:	b29b      	uxth	r3, r3
 800f928:	4313      	orrs	r3, r2
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	791a      	ldrb	r2, [r3, #4]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	795a      	ldrb	r2, [r3, #5]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	799a      	ldrb	r2, [r3, #6]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	79da      	ldrb	r2, [r3, #7]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f950:	88fb      	ldrh	r3, [r7, #6]
 800f952:	2b08      	cmp	r3, #8
 800f954:	d939      	bls.n	800f9ca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	3308      	adds	r3, #8
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	3309      	adds	r3, #9
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	b29b      	uxth	r3, r3
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	b29b      	uxth	r3, r3
 800f96a:	4313      	orrs	r3, r2
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	330a      	adds	r3, #10
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	330b      	adds	r3, #11
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	b29b      	uxth	r3, r3
 800f982:	021b      	lsls	r3, r3, #8
 800f984:	b29b      	uxth	r3, r3
 800f986:	4313      	orrs	r3, r2
 800f988:	b29a      	uxth	r2, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	330c      	adds	r3, #12
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	b29a      	uxth	r2, r3
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	330d      	adds	r3, #13
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	021b      	lsls	r3, r3, #8
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	7b9a      	ldrb	r2, [r3, #14]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	7bda      	ldrb	r2, [r3, #15]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	7c1a      	ldrb	r2, [r3, #16]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	7c5a      	ldrb	r2, [r3, #17]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	745a      	strb	r2, [r3, #17]
  }
}
 800f9ca:	bf00      	nop
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bc80      	pop	{r7}
 800f9d2:	4770      	bx	lr

0800f9d4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b08a      	sub	sp, #40	; 0x28
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	781a      	ldrb	r2, [r3, #0]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	785a      	ldrb	r2, [r3, #1]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	3302      	adds	r3, #2
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	3303      	adds	r3, #3
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	791a      	ldrb	r2, [r3, #4]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	795a      	ldrb	r2, [r3, #5]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	799a      	ldrb	r2, [r3, #6]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	79da      	ldrb	r2, [r3, #7]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	7a1a      	ldrb	r2, [r3, #8]
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fa4a:	88fb      	ldrh	r3, [r7, #6]
 800fa4c:	2b09      	cmp	r3, #9
 800fa4e:	d95f      	bls.n	800fb10 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fa50:	2309      	movs	r3, #9
 800fa52:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fa54:	2300      	movs	r3, #0
 800fa56:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fa58:	e051      	b.n	800fafe <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa5a:	f107 0316 	add.w	r3, r7, #22
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa62:	f000 f8e5 	bl	800fc30 <USBH_GetNextDesc>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	785b      	ldrb	r3, [r3, #1]
 800fa6c:	2b04      	cmp	r3, #4
 800fa6e:	d146      	bne.n	800fafe <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fa70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa74:	221a      	movs	r2, #26
 800fa76:	fb02 f303 	mul.w	r3, r2, r3
 800fa7a:	3308      	adds	r3, #8
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	3302      	adds	r3, #2
 800fa82:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fa84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa86:	69f8      	ldr	r0, [r7, #28]
 800fa88:	f000 f846 	bl	800fb18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fa96:	e022      	b.n	800fade <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa98:	f107 0316 	add.w	r3, r7, #22
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faa0:	f000 f8c6 	bl	800fc30 <USBH_GetNextDesc>
 800faa4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	785b      	ldrb	r3, [r3, #1]
 800faaa:	2b05      	cmp	r3, #5
 800faac:	d117      	bne.n	800fade <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800faae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fab2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fab6:	3201      	adds	r2, #1
 800fab8:	00d2      	lsls	r2, r2, #3
 800faba:	211a      	movs	r1, #26
 800fabc:	fb01 f303 	mul.w	r3, r1, r3
 800fac0:	4413      	add	r3, r2
 800fac2:	3308      	adds	r3, #8
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4413      	add	r3, r2
 800fac8:	3304      	adds	r3, #4
 800faca:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800facc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800face:	69b8      	ldr	r0, [r7, #24]
 800fad0:	f000 f850 	bl	800fb74 <USBH_ParseEPDesc>
            ep_ix++;
 800fad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fad8:	3301      	adds	r3, #1
 800fada:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	791b      	ldrb	r3, [r3, #4]
 800fae2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d204      	bcs.n	800faf4 <USBH_ParseCfgDesc+0x120>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	885a      	ldrh	r2, [r3, #2]
 800faee:	8afb      	ldrh	r3, [r7, #22]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d8d1      	bhi.n	800fa98 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800faf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800faf8:	3301      	adds	r3, #1
 800fafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fafe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d804      	bhi.n	800fb10 <USBH_ParseCfgDesc+0x13c>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	885a      	ldrh	r2, [r3, #2]
 800fb0a:	8afb      	ldrh	r3, [r7, #22]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d8a4      	bhi.n	800fa5a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fb10:	bf00      	nop
 800fb12:	3728      	adds	r7, #40	; 0x28
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	781a      	ldrb	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	785a      	ldrb	r2, [r3, #1]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	789a      	ldrb	r2, [r3, #2]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	78da      	ldrb	r2, [r3, #3]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	791a      	ldrb	r2, [r3, #4]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	795a      	ldrb	r2, [r3, #5]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	799a      	ldrb	r2, [r3, #6]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	79da      	ldrb	r2, [r3, #7]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	7a1a      	ldrb	r2, [r3, #8]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	721a      	strb	r2, [r3, #8]
}
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bc80      	pop	{r7}
 800fb72:	4770      	bx	lr

0800fb74 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	785a      	ldrb	r2, [r3, #1]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	789a      	ldrb	r2, [r3, #2]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	78da      	ldrb	r2, [r3, #3]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	3304      	adds	r3, #4
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	3305      	adds	r3, #5
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	021b      	lsls	r3, r3, #8
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	799a      	ldrb	r2, [r3, #6]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	719a      	strb	r2, [r3, #6]
}
 800fbc2:	bf00      	nop
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bc80      	pop	{r7}
 800fbca:	4770      	bx	lr

0800fbcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	d120      	bne.n	800fc26 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	1e9a      	subs	r2, r3, #2
 800fbea:	88fb      	ldrh	r3, [r7, #6]
 800fbec:	4293      	cmp	r3, r2
 800fbee:	bf28      	it	cs
 800fbf0:	4613      	movcs	r3, r2
 800fbf2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	3302      	adds	r3, #2
 800fbf8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	82fb      	strh	r3, [r7, #22]
 800fbfe:	e00b      	b.n	800fc18 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fc00:	8afb      	ldrh	r3, [r7, #22]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	4413      	add	r3, r2
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fc12:	8afb      	ldrh	r3, [r7, #22]
 800fc14:	3302      	adds	r3, #2
 800fc16:	82fb      	strh	r3, [r7, #22]
 800fc18:	8afa      	ldrh	r2, [r7, #22]
 800fc1a:	8abb      	ldrh	r3, [r7, #20]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d3ef      	bcc.n	800fc00 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2200      	movs	r2, #0
 800fc24:	701a      	strb	r2, [r3, #0]
  }
}
 800fc26:	bf00      	nop
 800fc28:	371c      	adds	r7, #28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bc80      	pop	{r7}
 800fc2e:	4770      	bx	lr

0800fc30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	881a      	ldrh	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	4413      	add	r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4413      	add	r3, r2
 800fc56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc58:	68fb      	ldr	r3, [r7, #12]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bc80      	pop	{r7}
 800fc62:	4770      	bx	lr

0800fc64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fc72:	2301      	movs	r3, #1
 800fc74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	789b      	ldrb	r3, [r3, #2]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d002      	beq.n	800fc84 <USBH_CtlReq+0x20>
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	d01d      	beq.n	800fcbe <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800fc82:	e042      	b.n	800fd0a <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	88fa      	ldrh	r2, [r7, #6]
 800fc8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2201      	movs	r2, #1
 800fc94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2203      	movs	r2, #3
 800fca4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	f003 fe1a 	bl	80138f0 <osMessagePut>
      break;
 800fcbc:	e025      	b.n	800fd0a <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f000 f828 	bl	800fd14 <USBH_HandleControl>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d108      	bne.n	800fce0 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	75fb      	strb	r3, [r7, #23]
      break;
 800fcde:	e013      	b.n	800fd08 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
 800fce2:	2b03      	cmp	r3, #3
 800fce4:	d108      	bne.n	800fcf8 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2201      	movs	r2, #1
 800fcea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	75fb      	strb	r3, [r7, #23]
      break;
 800fcf6:	e007      	b.n	800fd08 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	d104      	bne.n	800fd08 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2201      	movs	r2, #1
 800fd02:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800fd04:	2302      	movs	r3, #2
 800fd06:	75fb      	strb	r3, [r7, #23]
      break;
 800fd08:	bf00      	nop
  }
  return status;
 800fd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3718      	adds	r7, #24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd20:	2300      	movs	r3, #0
 800fd22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	7e1b      	ldrb	r3, [r3, #24]
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	2b0a      	cmp	r3, #10
 800fd2c:	f200 821d 	bhi.w	801016a <USBH_HandleControl+0x456>
 800fd30:	a201      	add	r2, pc, #4	; (adr r2, 800fd38 <USBH_HandleControl+0x24>)
 800fd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd36:	bf00      	nop
 800fd38:	0800fd65 	.word	0x0800fd65
 800fd3c:	0800fd7f 	.word	0x0800fd7f
 800fd40:	0800fe21 	.word	0x0800fe21
 800fd44:	0800fe47 	.word	0x0800fe47
 800fd48:	0800fed3 	.word	0x0800fed3
 800fd4c:	0800fefd 	.word	0x0800fefd
 800fd50:	0800ffbf 	.word	0x0800ffbf
 800fd54:	0800ffe1 	.word	0x0800ffe1
 800fd58:	08010073 	.word	0x08010073
 800fd5c:	08010099 	.word	0x08010099
 800fd60:	0801012b 	.word	0x0801012b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f103 0110 	add.w	r1, r3, #16
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	795b      	ldrb	r3, [r3, #5]
 800fd6e:	461a      	mov	r2, r3
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fa0b 	bl	801018c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	761a      	strb	r2, [r3, #24]
      break;
 800fd7c:	e200      	b.n	8010180 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	795b      	ldrb	r3, [r3, #5]
 800fd82:	4619      	mov	r1, r3
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f006 fcbd 	bl	8016704 <USBH_LL_GetURBState>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fd8e:	7bbb      	ldrb	r3, [r7, #14]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d12c      	bne.n	800fdee <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	7c1b      	ldrb	r3, [r3, #16]
 800fd98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8adb      	ldrh	r3, [r3, #22]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00a      	beq.n	800fdbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fda6:	7b7b      	ldrb	r3, [r7, #13]
 800fda8:	2b80      	cmp	r3, #128	; 0x80
 800fdaa:	d103      	bne.n	800fdb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2203      	movs	r2, #3
 800fdb0:	761a      	strb	r2, [r3, #24]
 800fdb2:	e00d      	b.n	800fdd0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2205      	movs	r2, #5
 800fdb8:	761a      	strb	r2, [r3, #24]
 800fdba:	e009      	b.n	800fdd0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fdbc:	7b7b      	ldrb	r3, [r7, #13]
 800fdbe:	2b80      	cmp	r3, #128	; 0x80
 800fdc0:	d103      	bne.n	800fdca <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2209      	movs	r2, #9
 800fdc6:	761a      	strb	r2, [r3, #24]
 800fdc8:	e002      	b.n	800fdd0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2207      	movs	r2, #7
 800fdce:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2203      	movs	r2, #3
 800fdd4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fde4:	2200      	movs	r2, #0
 800fde6:	4619      	mov	r1, r3
 800fde8:	f003 fd82 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fdec:	e1bf      	b.n	801016e <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fdee:	7bbb      	ldrb	r3, [r7, #14]
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d003      	beq.n	800fdfc <USBH_HandleControl+0xe8>
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	f040 81b9 	bne.w	801016e <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	220b      	movs	r2, #11
 800fe00:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2203      	movs	r2, #3
 800fe06:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fe16:	2200      	movs	r2, #0
 800fe18:	4619      	mov	r1, r3
 800fe1a:	f003 fd69 	bl	80138f0 <osMessagePut>
      break;
 800fe1e:	e1a6      	b.n	801016e <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6899      	ldr	r1, [r3, #8]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	899a      	ldrh	r2, [r3, #12]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	791b      	ldrb	r3, [r3, #4]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f9e6 	bl	801020a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2204      	movs	r2, #4
 800fe42:	761a      	strb	r2, [r3, #24]
      break;
 800fe44:	e19c      	b.n	8010180 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	791b      	ldrb	r3, [r3, #4]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f006 fc59 	bl	8016704 <USBH_LL_GetURBState>
 800fe52:	4603      	mov	r3, r0
 800fe54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d110      	bne.n	800fe7e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2209      	movs	r2, #9
 800fe60:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2203      	movs	r2, #3
 800fe66:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fe76:	2200      	movs	r2, #0
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f003 fd39 	bl	80138f0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fe7e:	7bbb      	ldrb	r3, [r7, #14]
 800fe80:	2b05      	cmp	r3, #5
 800fe82:	d110      	bne.n	800fea6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fe84:	2303      	movs	r3, #3
 800fe86:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2203      	movs	r2, #3
 800fe8c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	4619      	mov	r1, r3
 800fea0:	f003 fd26 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fea4:	e165      	b.n	8010172 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	2b04      	cmp	r3, #4
 800feaa:	f040 8162 	bne.w	8010172 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	220b      	movs	r2, #11
 800feb2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2203      	movs	r2, #3
 800feb8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800fec8:	2200      	movs	r2, #0
 800feca:	4619      	mov	r1, r3
 800fecc:	f003 fd10 	bl	80138f0 <osMessagePut>
      break;
 800fed0:	e14f      	b.n	8010172 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6899      	ldr	r1, [r3, #8]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	899a      	ldrh	r2, [r3, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	795b      	ldrb	r3, [r3, #5]
 800fede:	2001      	movs	r0, #1
 800fee0:	9000      	str	r0, [sp, #0]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f96c 	bl	80101c0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800feee:	b29a      	uxth	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2206      	movs	r2, #6
 800fef8:	761a      	strb	r2, [r3, #24]
      break;
 800fefa:	e141      	b.n	8010180 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	795b      	ldrb	r3, [r3, #5]
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f006 fbfe 	bl	8016704 <USBH_LL_GetURBState>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d111      	bne.n	800ff36 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2207      	movs	r2, #7
 800ff16:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2203      	movs	r2, #3
 800ff1c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4619      	mov	r1, r3
 800ff30:	f003 fcde 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff34:	e11f      	b.n	8010176 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800ff36:	7bbb      	ldrb	r3, [r7, #14]
 800ff38:	2b05      	cmp	r3, #5
 800ff3a:	d113      	bne.n	800ff64 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	220c      	movs	r2, #12
 800ff40:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff42:	2303      	movs	r3, #3
 800ff44:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2203      	movs	r2, #3
 800ff4a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	f003 fcc7 	bl	80138f0 <osMessagePut>
      break;
 800ff62:	e108      	b.n	8010176 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d111      	bne.n	800ff8e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2205      	movs	r2, #5
 800ff6e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2203      	movs	r2, #3
 800ff74:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ff84:	2200      	movs	r2, #0
 800ff86:	4619      	mov	r1, r3
 800ff88:	f003 fcb2 	bl	80138f0 <osMessagePut>
      break;
 800ff8c:	e0f3      	b.n	8010176 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800ff8e:	7bbb      	ldrb	r3, [r7, #14]
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	f040 80f0 	bne.w	8010176 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	220b      	movs	r2, #11
 800ff9a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ff9c:	2302      	movs	r3, #2
 800ff9e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2203      	movs	r2, #3
 800ffa4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	f003 fc9a 	bl	80138f0 <osMessagePut>
      break;
 800ffbc:	e0db      	b.n	8010176 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	791b      	ldrb	r3, [r3, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 f91f 	bl	801020a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2208      	movs	r2, #8
 800ffdc:	761a      	strb	r2, [r3, #24]

      break;
 800ffde:	e0cf      	b.n	8010180 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	791b      	ldrb	r3, [r3, #4]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f006 fb8c 	bl	8016704 <USBH_LL_GetURBState>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fff0:	7bbb      	ldrb	r3, [r7, #14]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d113      	bne.n	801001e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	220d      	movs	r2, #13
 800fffa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2203      	movs	r2, #3
 8010004:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010014:	2200      	movs	r2, #0
 8010016:	4619      	mov	r1, r3
 8010018:	f003 fc6a 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801001c:	e0ad      	b.n	801017a <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	2b04      	cmp	r3, #4
 8010022:	d111      	bne.n	8010048 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	220b      	movs	r2, #11
 8010028:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2203      	movs	r2, #3
 801002e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 801003e:	2200      	movs	r2, #0
 8010040:	4619      	mov	r1, r3
 8010042:	f003 fc55 	bl	80138f0 <osMessagePut>
      break;
 8010046:	e098      	b.n	801017a <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 8010048:	7bbb      	ldrb	r3, [r7, #14]
 801004a:	2b05      	cmp	r3, #5
 801004c:	f040 8095 	bne.w	801017a <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8010050:	2303      	movs	r3, #3
 8010052:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2203      	movs	r2, #3
 8010058:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010068:	2200      	movs	r2, #0
 801006a:	4619      	mov	r1, r3
 801006c:	f003 fc40 	bl	80138f0 <osMessagePut>
      break;
 8010070:	e083      	b.n	801017a <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	795b      	ldrb	r3, [r3, #5]
 8010076:	2201      	movs	r2, #1
 8010078:	9200      	str	r2, [sp, #0]
 801007a:	2200      	movs	r2, #0
 801007c:	2100      	movs	r1, #0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 f89e 	bl	80101c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	220a      	movs	r2, #10
 8010094:	761a      	strb	r2, [r3, #24]
      break;
 8010096:	e073      	b.n	8010180 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	795b      	ldrb	r3, [r3, #5]
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f006 fb30 	bl	8016704 <USBH_LL_GetURBState>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80100a8:	7bbb      	ldrb	r3, [r7, #14]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d113      	bne.n	80100d6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	220d      	movs	r2, #13
 80100b6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2203      	movs	r2, #3
 80100bc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80100cc:	2200      	movs	r2, #0
 80100ce:	4619      	mov	r1, r3
 80100d0:	f003 fc0e 	bl	80138f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80100d4:	e053      	b.n	801017e <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d111      	bne.n	8010100 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2209      	movs	r2, #9
 80100e0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2203      	movs	r2, #3
 80100e6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80100f6:	2200      	movs	r2, #0
 80100f8:	4619      	mov	r1, r3
 80100fa:	f003 fbf9 	bl	80138f0 <osMessagePut>
      break;
 80100fe:	e03e      	b.n	801017e <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 8010100:	7bbb      	ldrb	r3, [r7, #14]
 8010102:	2b04      	cmp	r3, #4
 8010104:	d13b      	bne.n	801017e <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	220b      	movs	r2, #11
 801010a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2203      	movs	r2, #3
 8010110:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010120:	2200      	movs	r2, #0
 8010122:	4619      	mov	r1, r3
 8010124:	f003 fbe4 	bl	80138f0 <osMessagePut>
      break;
 8010128:	e029      	b.n	801017e <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	7e5b      	ldrb	r3, [r3, #25]
 801012e:	3301      	adds	r3, #1
 8010130:	b2da      	uxtb	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	765a      	strb	r2, [r3, #25]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	7e5b      	ldrb	r3, [r3, #25]
 801013a:	2b02      	cmp	r3, #2
 801013c:	d806      	bhi.n	801014c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2201      	movs	r2, #1
 8010142:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801014a:	e019      	b.n	8010180 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8010152:	2106      	movs	r1, #6
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010164:	2302      	movs	r3, #2
 8010166:	73fb      	strb	r3, [r7, #15]
      break;
 8010168:	e00a      	b.n	8010180 <USBH_HandleControl+0x46c>

    default:
      break;
 801016a:	bf00      	nop
 801016c:	e008      	b.n	8010180 <USBH_HandleControl+0x46c>
      break;
 801016e:	bf00      	nop
 8010170:	e006      	b.n	8010180 <USBH_HandleControl+0x46c>
      break;
 8010172:	bf00      	nop
 8010174:	e004      	b.n	8010180 <USBH_HandleControl+0x46c>
      break;
 8010176:	bf00      	nop
 8010178:	e002      	b.n	8010180 <USBH_HandleControl+0x46c>
      break;
 801017a:	bf00      	nop
 801017c:	e000      	b.n	8010180 <USBH_HandleControl+0x46c>
      break;
 801017e:	bf00      	nop
  }

  return status;
 8010180:	7bfb      	ldrb	r3, [r7, #15]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop

0801018c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af04      	add	r7, sp, #16
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	4613      	mov	r3, r2
 8010198:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801019a:	79f9      	ldrb	r1, [r7, #7]
 801019c:	2300      	movs	r3, #0
 801019e:	9303      	str	r3, [sp, #12]
 80101a0:	2308      	movs	r3, #8
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	2300      	movs	r3, #0
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	2300      	movs	r3, #0
 80101ae:	2200      	movs	r2, #0
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f006 fa76 	bl	80166a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b088      	sub	sp, #32
 80101c4:	af04      	add	r7, sp, #16
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	4611      	mov	r1, r2
 80101cc:	461a      	mov	r2, r3
 80101ce:	460b      	mov	r3, r1
 80101d0:	80fb      	strh	r3, [r7, #6]
 80101d2:	4613      	mov	r3, r2
 80101d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80101e0:	2300      	movs	r3, #0
 80101e2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101e4:	7979      	ldrb	r1, [r7, #5]
 80101e6:	7e3b      	ldrb	r3, [r7, #24]
 80101e8:	9303      	str	r3, [sp, #12]
 80101ea:	88fb      	ldrh	r3, [r7, #6]
 80101ec:	9302      	str	r3, [sp, #8]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	2301      	movs	r3, #1
 80101f4:	9300      	str	r3, [sp, #0]
 80101f6:	2300      	movs	r3, #0
 80101f8:	2200      	movs	r2, #0
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f006 fa51 	bl	80166a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010200:	2300      	movs	r3, #0
}
 8010202:	4618      	mov	r0, r3
 8010204:	3710      	adds	r7, #16
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b088      	sub	sp, #32
 801020e:	af04      	add	r7, sp, #16
 8010210:	60f8      	str	r0, [r7, #12]
 8010212:	60b9      	str	r1, [r7, #8]
 8010214:	4611      	mov	r1, r2
 8010216:	461a      	mov	r2, r3
 8010218:	460b      	mov	r3, r1
 801021a:	80fb      	strh	r3, [r7, #6]
 801021c:	4613      	mov	r3, r2
 801021e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010220:	7979      	ldrb	r1, [r7, #5]
 8010222:	2300      	movs	r3, #0
 8010224:	9303      	str	r3, [sp, #12]
 8010226:	88fb      	ldrh	r3, [r7, #6]
 8010228:	9302      	str	r3, [sp, #8]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	2301      	movs	r3, #1
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	2300      	movs	r3, #0
 8010234:	2201      	movs	r2, #1
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f006 fa33 	bl	80166a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801023c:	2300      	movs	r3, #0

}
 801023e:	4618      	mov	r0, r3
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	b088      	sub	sp, #32
 801024a:	af04      	add	r7, sp, #16
 801024c:	60f8      	str	r0, [r7, #12]
 801024e:	60b9      	str	r1, [r7, #8]
 8010250:	4611      	mov	r1, r2
 8010252:	461a      	mov	r2, r3
 8010254:	460b      	mov	r3, r1
 8010256:	80fb      	strh	r3, [r7, #6]
 8010258:	4613      	mov	r3, r2
 801025a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010266:	2300      	movs	r3, #0
 8010268:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801026a:	7979      	ldrb	r1, [r7, #5]
 801026c:	7e3b      	ldrb	r3, [r7, #24]
 801026e:	9303      	str	r3, [sp, #12]
 8010270:	88fb      	ldrh	r3, [r7, #6]
 8010272:	9302      	str	r3, [sp, #8]
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	2301      	movs	r3, #1
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	2302      	movs	r3, #2
 801027e:	2200      	movs	r2, #0
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f006 fa0e 	bl	80166a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010286:	2300      	movs	r3, #0
}
 8010288:	4618      	mov	r0, r3
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af04      	add	r7, sp, #16
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	4611      	mov	r1, r2
 801029c:	461a      	mov	r2, r3
 801029e:	460b      	mov	r3, r1
 80102a0:	80fb      	strh	r3, [r7, #6]
 80102a2:	4613      	mov	r3, r2
 80102a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102a6:	7979      	ldrb	r1, [r7, #5]
 80102a8:	2300      	movs	r3, #0
 80102aa:	9303      	str	r3, [sp, #12]
 80102ac:	88fb      	ldrh	r3, [r7, #6]
 80102ae:	9302      	str	r3, [sp, #8]
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	2301      	movs	r3, #1
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	2302      	movs	r3, #2
 80102ba:	2201      	movs	r2, #1
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f006 f9f0 	bl	80166a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af04      	add	r7, sp, #16
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	4608      	mov	r0, r1
 80102d6:	4611      	mov	r1, r2
 80102d8:	461a      	mov	r2, r3
 80102da:	4603      	mov	r3, r0
 80102dc:	70fb      	strb	r3, [r7, #3]
 80102de:	460b      	mov	r3, r1
 80102e0:	70bb      	strb	r3, [r7, #2]
 80102e2:	4613      	mov	r3, r2
 80102e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80102e6:	7878      	ldrb	r0, [r7, #1]
 80102e8:	78ba      	ldrb	r2, [r7, #2]
 80102ea:	78f9      	ldrb	r1, [r7, #3]
 80102ec:	8b3b      	ldrh	r3, [r7, #24]
 80102ee:	9302      	str	r3, [sp, #8]
 80102f0:	7d3b      	ldrb	r3, [r7, #20]
 80102f2:	9301      	str	r3, [sp, #4]
 80102f4:	7c3b      	ldrb	r3, [r7, #16]
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	4603      	mov	r3, r0
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f006 f983 	bl	8016606 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b082      	sub	sp, #8
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
 8010312:	460b      	mov	r3, r1
 8010314:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8010316:	78fb      	ldrb	r3, [r7, #3]
 8010318:	4619      	mov	r1, r3
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f006 f9a2 	bl	8016664 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b084      	sub	sp, #16
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
 8010332:	460b      	mov	r3, r1
 8010334:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f832 	bl	80103a0 <USBH_GetFreePipe>
 801033c:	4603      	mov	r3, r0
 801033e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010340:	89fb      	ldrh	r3, [r7, #14]
 8010342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010346:	4293      	cmp	r3, r2
 8010348:	d009      	beq.n	801035e <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801034a:	78fb      	ldrb	r3, [r7, #3]
 801034c:	89fa      	ldrh	r2, [r7, #14]
 801034e:	f002 020f 	and.w	r2, r2, #15
 8010352:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	32e0      	adds	r2, #224	; 0xe0
 801035a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 801035e:	89fb      	ldrh	r3, [r7, #14]
 8010360:	b2db      	uxtb	r3, r3
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801036a:	b480      	push	{r7}
 801036c:	b083      	sub	sp, #12
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
 8010372:	460b      	mov	r3, r1
 8010374:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010376:	78fb      	ldrb	r3, [r7, #3]
 8010378:	2b0a      	cmp	r3, #10
 801037a:	d80b      	bhi.n	8010394 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801037c:	78fa      	ldrb	r2, [r7, #3]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	32e0      	adds	r2, #224	; 0xe0
 8010382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010386:	78fa      	ldrb	r2, [r7, #3]
 8010388:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	32e0      	adds	r2, #224	; 0xe0
 8010390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	370c      	adds	r7, #12
 801039a:	46bd      	mov	sp, r7
 801039c:	bc80      	pop	{r7}
 801039e:	4770      	bx	lr

080103a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80103a8:	2300      	movs	r3, #0
 80103aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80103ac:	2300      	movs	r3, #0
 80103ae:	73fb      	strb	r3, [r7, #15]
 80103b0:	e00e      	b.n	80103d0 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80103b2:	7bfa      	ldrb	r2, [r7, #15]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	32e0      	adds	r2, #224	; 0xe0
 80103b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 80103c4:	7bfb      	ldrb	r3, [r7, #15]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	e007      	b.n	80103da <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	3301      	adds	r3, #1
 80103ce:	73fb      	strb	r3, [r7, #15]
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
 80103d2:	2b0a      	cmp	r3, #10
 80103d4:	d9ed      	bls.n	80103b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80103d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3714      	adds	r7, #20
 80103de:	46bd      	mov	sp, r7
 80103e0:	bc80      	pop	{r7}
 80103e2:	4770      	bx	lr

080103e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80103ee:	79fb      	ldrb	r3, [r7, #7]
 80103f0:	4a08      	ldr	r2, [pc, #32]	; (8010414 <disk_status+0x30>)
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	79fa      	ldrb	r2, [r7, #7]
 80103fc:	4905      	ldr	r1, [pc, #20]	; (8010414 <disk_status+0x30>)
 80103fe:	440a      	add	r2, r1
 8010400:	7a12      	ldrb	r2, [r2, #8]
 8010402:	4610      	mov	r0, r2
 8010404:	4798      	blx	r3
 8010406:	4603      	mov	r3, r0
 8010408:	73fb      	strb	r3, [r7, #15]
  return stat;
 801040a:	7bfb      	ldrb	r3, [r7, #15]
}
 801040c:	4618      	mov	r0, r3
 801040e:	3710      	adds	r7, #16
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	2000588c 	.word	0x2000588c

08010418 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010422:	2300      	movs	r3, #0
 8010424:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	4a0d      	ldr	r2, [pc, #52]	; (8010460 <disk_initialize+0x48>)
 801042a:	5cd3      	ldrb	r3, [r2, r3]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d111      	bne.n	8010454 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8010430:	79fb      	ldrb	r3, [r7, #7]
 8010432:	4a0b      	ldr	r2, [pc, #44]	; (8010460 <disk_initialize+0x48>)
 8010434:	2101      	movs	r1, #1
 8010436:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	4a09      	ldr	r2, [pc, #36]	; (8010460 <disk_initialize+0x48>)
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4413      	add	r3, r2
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	79fa      	ldrb	r2, [r7, #7]
 8010446:	4906      	ldr	r1, [pc, #24]	; (8010460 <disk_initialize+0x48>)
 8010448:	440a      	add	r2, r1
 801044a:	7a12      	ldrb	r2, [r2, #8]
 801044c:	4610      	mov	r0, r2
 801044e:	4798      	blx	r3
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010454:	7bfb      	ldrb	r3, [r7, #15]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	2000588c 	.word	0x2000588c

08010464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010464:	b590      	push	{r4, r7, lr}
 8010466:	b087      	sub	sp, #28
 8010468:	af00      	add	r7, sp, #0
 801046a:	60b9      	str	r1, [r7, #8]
 801046c:	607a      	str	r2, [r7, #4]
 801046e:	603b      	str	r3, [r7, #0]
 8010470:	4603      	mov	r3, r0
 8010472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010474:	7bfb      	ldrb	r3, [r7, #15]
 8010476:	4a0a      	ldr	r2, [pc, #40]	; (80104a0 <disk_read+0x3c>)
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4413      	add	r3, r2
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	689c      	ldr	r4, [r3, #8]
 8010480:	7bfb      	ldrb	r3, [r7, #15]
 8010482:	4a07      	ldr	r2, [pc, #28]	; (80104a0 <disk_read+0x3c>)
 8010484:	4413      	add	r3, r2
 8010486:	7a18      	ldrb	r0, [r3, #8]
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	68b9      	ldr	r1, [r7, #8]
 801048e:	47a0      	blx	r4
 8010490:	4603      	mov	r3, r0
 8010492:	75fb      	strb	r3, [r7, #23]
  return res;
 8010494:	7dfb      	ldrb	r3, [r7, #23]
}
 8010496:	4618      	mov	r0, r3
 8010498:	371c      	adds	r7, #28
 801049a:	46bd      	mov	sp, r7
 801049c:	bd90      	pop	{r4, r7, pc}
 801049e:	bf00      	nop
 80104a0:	2000588c 	.word	0x2000588c

080104a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80104a4:	b590      	push	{r4, r7, lr}
 80104a6:	b087      	sub	sp, #28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
 80104ae:	603b      	str	r3, [r7, #0]
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	4a0a      	ldr	r2, [pc, #40]	; (80104e0 <disk_write+0x3c>)
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	4413      	add	r3, r2
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	68dc      	ldr	r4, [r3, #12]
 80104c0:	7bfb      	ldrb	r3, [r7, #15]
 80104c2:	4a07      	ldr	r2, [pc, #28]	; (80104e0 <disk_write+0x3c>)
 80104c4:	4413      	add	r3, r2
 80104c6:	7a18      	ldrb	r0, [r3, #8]
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	68b9      	ldr	r1, [r7, #8]
 80104ce:	47a0      	blx	r4
 80104d0:	4603      	mov	r3, r0
 80104d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80104d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	371c      	adds	r7, #28
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd90      	pop	{r4, r7, pc}
 80104de:	bf00      	nop
 80104e0:	2000588c 	.word	0x2000588c

080104e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	4603      	mov	r3, r0
 80104ec:	603a      	str	r2, [r7, #0]
 80104ee:	71fb      	strb	r3, [r7, #7]
 80104f0:	460b      	mov	r3, r1
 80104f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80104f4:	79fb      	ldrb	r3, [r7, #7]
 80104f6:	4a09      	ldr	r2, [pc, #36]	; (801051c <disk_ioctl+0x38>)
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	4413      	add	r3, r2
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	79fa      	ldrb	r2, [r7, #7]
 8010502:	4906      	ldr	r1, [pc, #24]	; (801051c <disk_ioctl+0x38>)
 8010504:	440a      	add	r2, r1
 8010506:	7a10      	ldrb	r0, [r2, #8]
 8010508:	79b9      	ldrb	r1, [r7, #6]
 801050a:	683a      	ldr	r2, [r7, #0]
 801050c:	4798      	blx	r3
 801050e:	4603      	mov	r3, r0
 8010510:	73fb      	strb	r3, [r7, #15]
  return res;
 8010512:	7bfb      	ldrb	r3, [r7, #15]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	2000588c 	.word	0x2000588c

08010520 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8010534:	e007      	b.n	8010546 <mem_cpy+0x26>
		*d++ = *s++;
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	1c53      	adds	r3, r2, #1
 801053a:	613b      	str	r3, [r7, #16]
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	1c59      	adds	r1, r3, #1
 8010540:	6179      	str	r1, [r7, #20]
 8010542:	7812      	ldrb	r2, [r2, #0]
 8010544:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	1e5a      	subs	r2, r3, #1
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1f2      	bne.n	8010536 <mem_cpy+0x16>
}
 8010550:	bf00      	nop
 8010552:	bf00      	nop
 8010554:	371c      	adds	r7, #28
 8010556:	46bd      	mov	sp, r7
 8010558:	bc80      	pop	{r7}
 801055a:	4770      	bx	lr

0801055c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 801056c:	e005      	b.n	801057a <mem_set+0x1e>
		*d++ = (BYTE)val;
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	617a      	str	r2, [r7, #20]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	b2d2      	uxtb	r2, r2
 8010578:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	1e5a      	subs	r2, r3, #1
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1f4      	bne.n	801056e <mem_set+0x12>
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop
 8010588:	371c      	adds	r7, #28
 801058a:	46bd      	mov	sp, r7
 801058c:	bc80      	pop	{r7}
 801058e:	4770      	bx	lr

08010590 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8010590:	b480      	push	{r7}
 8010592:	b089      	sub	sp, #36	; 0x24
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	61fb      	str	r3, [r7, #28]
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80105a8:	bf00      	nop
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	1e5a      	subs	r2, r3, #1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00d      	beq.n	80105d0 <mem_cmp+0x40>
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	61fa      	str	r2, [r7, #28]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	4619      	mov	r1, r3
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	61ba      	str	r2, [r7, #24]
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	1acb      	subs	r3, r1, r3
 80105c8:	617b      	str	r3, [r7, #20]
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d0ec      	beq.n	80105aa <mem_cmp+0x1a>
	return r;
 80105d0:	697b      	ldr	r3, [r7, #20]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3724      	adds	r7, #36	; 0x24
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bc80      	pop	{r7}
 80105da:	4770      	bx	lr

080105dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80105e6:	e002      	b.n	80105ee <chk_chr+0x12>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d005      	beq.n	8010602 <chk_chr+0x26>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	461a      	mov	r2, r3
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	4293      	cmp	r3, r2
 8010600:	d1f2      	bne.n	80105e8 <chk_chr+0xc>
	return *str;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	781b      	ldrb	r3, [r3, #0]
}
 8010606:	4618      	mov	r0, r3
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	bc80      	pop	{r7}
 801060e:	4770      	bx	lr

08010610 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801061e:	4618      	mov	r0, r3
 8010620:	f002 ffc4 	bl	80135ac <ff_req_grant>
 8010624:	4603      	mov	r3, r0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b082      	sub	sp, #8
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	460b      	mov	r3, r1
 8010638:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d011      	beq.n	8010664 <unlock_fs+0x36>
 8010640:	78fb      	ldrb	r3, [r7, #3]
 8010642:	2b0c      	cmp	r3, #12
 8010644:	d00e      	beq.n	8010664 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8010646:	78fb      	ldrb	r3, [r7, #3]
 8010648:	2b0b      	cmp	r3, #11
 801064a:	d00b      	beq.n	8010664 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 801064c:	78fb      	ldrb	r3, [r7, #3]
 801064e:	2b09      	cmp	r3, #9
 8010650:	d008      	beq.n	8010664 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8010652:	78fb      	ldrb	r3, [r7, #3]
 8010654:	2b0f      	cmp	r3, #15
 8010656:	d005      	beq.n	8010664 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801065e:	4618      	mov	r0, r3
 8010660:	f002 ffb9 	bl	80135d6 <ff_rel_grant>
	}
}
 8010664:	bf00      	nop
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010676:	2300      	movs	r3, #0
 8010678:	60bb      	str	r3, [r7, #8]
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	60fb      	str	r3, [r7, #12]
 801067e:	e038      	b.n	80106f2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8010680:	492f      	ldr	r1, [pc, #188]	; (8010740 <chk_lock+0xd4>)
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	4613      	mov	r3, r2
 8010686:	005b      	lsls	r3, r3, #1
 8010688:	4413      	add	r3, r2
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	440b      	add	r3, r1
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d029      	beq.n	80106e8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010694:	492a      	ldr	r1, [pc, #168]	; (8010740 <chk_lock+0xd4>)
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	4613      	mov	r3, r2
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	4413      	add	r3, r2
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	440b      	add	r3, r1
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d11e      	bne.n	80106ec <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80106ae:	4924      	ldr	r1, [pc, #144]	; (8010740 <chk_lock+0xd4>)
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	4613      	mov	r3, r2
 80106b4:	005b      	lsls	r3, r3, #1
 80106b6:	4413      	add	r3, r2
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	440b      	add	r3, r1
 80106bc:	3304      	adds	r3, #4
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d110      	bne.n	80106ec <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80106ca:	491d      	ldr	r1, [pc, #116]	; (8010740 <chk_lock+0xd4>)
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	4613      	mov	r3, r2
 80106d0:	005b      	lsls	r3, r3, #1
 80106d2:	4413      	add	r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	440b      	add	r3, r1
 80106d8:	3308      	adds	r3, #8
 80106da:	881a      	ldrh	r2, [r3, #0]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d102      	bne.n	80106ec <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80106e6:	e007      	b.n	80106f8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80106e8:	2301      	movs	r3, #1
 80106ea:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	3301      	adds	r3, #1
 80106f0:	60fb      	str	r3, [r7, #12]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d9c3      	bls.n	8010680 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2b02      	cmp	r3, #2
 80106fc:	d109      	bne.n	8010712 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d102      	bne.n	801070a <chk_lock+0x9e>
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2b02      	cmp	r3, #2
 8010708:	d101      	bne.n	801070e <chk_lock+0xa2>
 801070a:	2300      	movs	r3, #0
 801070c:	e013      	b.n	8010736 <chk_lock+0xca>
 801070e:	2312      	movs	r3, #18
 8010710:	e011      	b.n	8010736 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d10b      	bne.n	8010730 <chk_lock+0xc4>
 8010718:	4909      	ldr	r1, [pc, #36]	; (8010740 <chk_lock+0xd4>)
 801071a:	68fa      	ldr	r2, [r7, #12]
 801071c:	4613      	mov	r3, r2
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	4413      	add	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	440b      	add	r3, r1
 8010726:	330a      	adds	r3, #10
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801072e:	d101      	bne.n	8010734 <chk_lock+0xc8>
 8010730:	2310      	movs	r3, #16
 8010732:	e000      	b.n	8010736 <chk_lock+0xca>
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	bc80      	pop	{r7}
 801073e:	4770      	bx	lr
 8010740:	20005874 	.word	0x20005874

08010744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801074a:	2300      	movs	r3, #0
 801074c:	607b      	str	r3, [r7, #4]
 801074e:	e002      	b.n	8010756 <enq_lock+0x12>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	3301      	adds	r3, #1
 8010754:	607b      	str	r3, [r7, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d809      	bhi.n	8010770 <enq_lock+0x2c>
 801075c:	490a      	ldr	r1, [pc, #40]	; (8010788 <enq_lock+0x44>)
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	440b      	add	r3, r1
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1ef      	bne.n	8010750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b02      	cmp	r3, #2
 8010774:	bf14      	ite	ne
 8010776:	2301      	movne	r3, #1
 8010778:	2300      	moveq	r3, #0
 801077a:	b2db      	uxtb	r3, r3
}
 801077c:	4618      	mov	r0, r3
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	bc80      	pop	{r7}
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	20005874 	.word	0x20005874

0801078c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010796:	2300      	movs	r3, #0
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	e02b      	b.n	80107f4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 801079c:	4955      	ldr	r1, [pc, #340]	; (80108f4 <inc_lock+0x168>)
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	440b      	add	r3, r1
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d11b      	bne.n	80107ee <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80107b6:	494f      	ldr	r1, [pc, #316]	; (80108f4 <inc_lock+0x168>)
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4613      	mov	r3, r2
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	4413      	add	r3, r2
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	440b      	add	r3, r1
 80107c4:	3304      	adds	r3, #4
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d10d      	bne.n	80107ee <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80107d2:	4948      	ldr	r1, [pc, #288]	; (80108f4 <inc_lock+0x168>)
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	4613      	mov	r3, r2
 80107d8:	005b      	lsls	r3, r3, #1
 80107da:	4413      	add	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	440b      	add	r3, r1
 80107e0:	3308      	adds	r3, #8
 80107e2:	881a      	ldrh	r2, [r3, #0]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d006      	beq.n	80107fc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	3301      	adds	r3, #1
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d9d0      	bls.n	801079c <inc_lock+0x10>
 80107fa:	e000      	b.n	80107fe <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80107fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d145      	bne.n	8010890 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	e002      	b.n	8010810 <inc_lock+0x84>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	3301      	adds	r3, #1
 801080e:	60fb      	str	r3, [r7, #12]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d809      	bhi.n	801082a <inc_lock+0x9e>
 8010816:	4937      	ldr	r1, [pc, #220]	; (80108f4 <inc_lock+0x168>)
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	4613      	mov	r3, r2
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	4413      	add	r3, r2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	440b      	add	r3, r1
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1ef      	bne.n	801080a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2b02      	cmp	r3, #2
 801082e:	d101      	bne.n	8010834 <inc_lock+0xa8>
 8010830:	2300      	movs	r3, #0
 8010832:	e05a      	b.n	80108ea <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 801083a:	482e      	ldr	r0, [pc, #184]	; (80108f4 <inc_lock+0x168>)
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4403      	add	r3, r0
 8010848:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8010850:	4828      	ldr	r0, [pc, #160]	; (80108f4 <inc_lock+0x168>)
 8010852:	68fa      	ldr	r2, [r7, #12]
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	4403      	add	r3, r0
 801085e:	3304      	adds	r3, #4
 8010860:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8010868:	4922      	ldr	r1, [pc, #136]	; (80108f4 <inc_lock+0x168>)
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	009b      	lsls	r3, r3, #2
 8010874:	440b      	add	r3, r1
 8010876:	3308      	adds	r3, #8
 8010878:	4602      	mov	r2, r0
 801087a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 801087c:	491d      	ldr	r1, [pc, #116]	; (80108f4 <inc_lock+0x168>)
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	4613      	mov	r3, r2
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	4413      	add	r3, r2
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	440b      	add	r3, r1
 801088a:	330a      	adds	r3, #10
 801088c:	2200      	movs	r2, #0
 801088e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00c      	beq.n	80108b0 <inc_lock+0x124>
 8010896:	4917      	ldr	r1, [pc, #92]	; (80108f4 <inc_lock+0x168>)
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	4613      	mov	r3, r2
 801089c:	005b      	lsls	r3, r3, #1
 801089e:	4413      	add	r3, r2
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	440b      	add	r3, r1
 80108a4:	330a      	adds	r3, #10
 80108a6:	881b      	ldrh	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <inc_lock+0x124>
 80108ac:	2300      	movs	r3, #0
 80108ae:	e01c      	b.n	80108ea <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10b      	bne.n	80108ce <inc_lock+0x142>
 80108b6:	490f      	ldr	r1, [pc, #60]	; (80108f4 <inc_lock+0x168>)
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	4613      	mov	r3, r2
 80108bc:	005b      	lsls	r3, r3, #1
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	440b      	add	r3, r1
 80108c4:	330a      	adds	r3, #10
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	3301      	adds	r3, #1
 80108ca:	b299      	uxth	r1, r3
 80108cc:	e001      	b.n	80108d2 <inc_lock+0x146>
 80108ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80108d2:	4808      	ldr	r0, [pc, #32]	; (80108f4 <inc_lock+0x168>)
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	4613      	mov	r3, r2
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4413      	add	r3, r2
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	4403      	add	r3, r0
 80108e0:	330a      	adds	r3, #10
 80108e2:	460a      	mov	r2, r1
 80108e4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3301      	adds	r3, #1
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bc80      	pop	{r7}
 80108f2:	4770      	bx	lr
 80108f4:	20005874 	.word	0x20005874

080108f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3b01      	subs	r3, #1
 8010904:	607b      	str	r3, [r7, #4]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d82e      	bhi.n	801096a <dec_lock+0x72>
		n = Files[i].ctr;
 801090c:	491b      	ldr	r1, [pc, #108]	; (801097c <dec_lock+0x84>)
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4613      	mov	r3, r2
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	4413      	add	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	440b      	add	r3, r1
 801091a:	330a      	adds	r3, #10
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010920:	89fb      	ldrh	r3, [r7, #14]
 8010922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010926:	d101      	bne.n	801092c <dec_lock+0x34>
 8010928:	2300      	movs	r3, #0
 801092a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 801092c:	89fb      	ldrh	r3, [r7, #14]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <dec_lock+0x40>
 8010932:	89fb      	ldrh	r3, [r7, #14]
 8010934:	3b01      	subs	r3, #1
 8010936:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010938:	4910      	ldr	r1, [pc, #64]	; (801097c <dec_lock+0x84>)
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	4613      	mov	r3, r2
 801093e:	005b      	lsls	r3, r3, #1
 8010940:	4413      	add	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	440b      	add	r3, r1
 8010946:	330a      	adds	r3, #10
 8010948:	89fa      	ldrh	r2, [r7, #14]
 801094a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801094c:	89fb      	ldrh	r3, [r7, #14]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d108      	bne.n	8010964 <dec_lock+0x6c>
 8010952:	490a      	ldr	r1, [pc, #40]	; (801097c <dec_lock+0x84>)
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	440b      	add	r3, r1
 8010960:	2200      	movs	r2, #0
 8010962:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	737b      	strb	r3, [r7, #13]
 8010968:	e001      	b.n	801096e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801096a:	2302      	movs	r3, #2
 801096c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801096e:	7b7b      	ldrb	r3, [r7, #13]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3714      	adds	r7, #20
 8010974:	46bd      	mov	sp, r7
 8010976:	bc80      	pop	{r7}
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	20005874 	.word	0x20005874

08010980 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010988:	2300      	movs	r3, #0
 801098a:	60fb      	str	r3, [r7, #12]
 801098c:	e016      	b.n	80109bc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801098e:	4910      	ldr	r1, [pc, #64]	; (80109d0 <clear_lock+0x50>)
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	440b      	add	r3, r1
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d108      	bne.n	80109b6 <clear_lock+0x36>
 80109a4:	490a      	ldr	r1, [pc, #40]	; (80109d0 <clear_lock+0x50>)
 80109a6:	68fa      	ldr	r2, [r7, #12]
 80109a8:	4613      	mov	r3, r2
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	4413      	add	r3, r2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	440b      	add	r3, r1
 80109b2:	2200      	movs	r2, #0
 80109b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3301      	adds	r3, #1
 80109ba:	60fb      	str	r3, [r7, #12]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d9e5      	bls.n	801098e <clear_lock+0xe>
	}
}
 80109c2:	bf00      	nop
 80109c4:	bf00      	nop
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bc80      	pop	{r7}
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	20005874 	.word	0x20005874

080109d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80109dc:	2300      	movs	r3, #0
 80109de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d038      	beq.n	8010a5c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80109f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80109f8:	6879      	ldr	r1, [r7, #4]
 80109fa:	2301      	movs	r3, #1
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	f7ff fd51 	bl	80104a4 <disk_write>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	73fb      	strb	r3, [r7, #15]
 8010a0c:	e026      	b.n	8010a5c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010a1c:	697a      	ldr	r2, [r7, #20]
 8010a1e:	1ad2      	subs	r2, r2, r3
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d218      	bcs.n	8010a5c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010a30:	613b      	str	r3, [r7, #16]
 8010a32:	e010      	b.n	8010a56 <sync_window+0x82>
					wsect += fs->fsize;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010a3a:	697a      	ldr	r2, [r7, #20]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	2301      	movs	r3, #1
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	f7ff fd2a 	bl	80104a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	3b01      	subs	r3, #1
 8010a54:	613b      	str	r3, [r7, #16]
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d8eb      	bhi.n	8010a34 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3718      	adds	r7, #24
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b084      	sub	sp, #16
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010a70:	2300      	movs	r3, #0
 8010a72:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d01b      	beq.n	8010ab8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ffa7 	bl	80109d4 <sync_window>
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010a8a:	7bfb      	ldrb	r3, [r7, #15]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d113      	bne.n	8010ab8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010a96:	6879      	ldr	r1, [r7, #4]
 8010a98:	2301      	movs	r3, #1
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	f7ff fce2 	bl	8010464 <disk_read>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d004      	beq.n	8010ab0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aaa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010aac:	2301      	movs	r3, #1
 8010aae:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8010ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff ff82 	bl	80109d4 <sync_window>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f040 809b 	bne.w	8010c12 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010ae2:	2b03      	cmp	r3, #3
 8010ae4:	f040 8088 	bne.w	8010bf8 <sync_fs+0x136>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	f040 8082 	bne.w	8010bf8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010afa:	2100      	movs	r1, #0
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7ff fd2d 	bl	801055c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2255      	movs	r2, #85	; 0x55
 8010b06:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	22aa      	movs	r2, #170	; 0xaa
 8010b0e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2252      	movs	r2, #82	; 0x52
 8010b16:	701a      	strb	r2, [r3, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2252      	movs	r2, #82	; 0x52
 8010b1c:	705a      	strb	r2, [r3, #1]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2261      	movs	r2, #97	; 0x61
 8010b22:	709a      	strb	r2, [r3, #2]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2241      	movs	r2, #65	; 0x41
 8010b28:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2272      	movs	r2, #114	; 0x72
 8010b2e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2272      	movs	r2, #114	; 0x72
 8010b36:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2241      	movs	r2, #65	; 0x41
 8010b3e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2261      	movs	r2, #97	; 0x61
 8010b46:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	0a1b      	lsrs	r3, r3, #8
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b72:	0c1b      	lsrs	r3, r3, #16
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b82:	0e1b      	lsrs	r3, r3, #24
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	0a1b      	lsrs	r3, r3, #8
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bb4:	0c1b      	lsrs	r3, r3, #16
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bc4:	0e1b      	lsrs	r3, r3, #24
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8010bea:	2301      	movs	r3, #1
 8010bec:	f7ff fc5a 	bl	80104a4 <disk_write>
			fs->fsi_flag = 0;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010bfe:	2200      	movs	r2, #0
 8010c00:	2100      	movs	r1, #0
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fc6e 	bl	80104e4 <disk_ioctl>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d001      	beq.n	8010c12 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	3b02      	subs	r3, #2
 8010c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c32:	3b02      	subs	r3, #2
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d301      	bcc.n	8010c3e <clust2sect+0x22>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e00a      	b.n	8010c54 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010c44:	461a      	mov	r2, r3
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	fb03 f202 	mul.w	r2, r3, r2
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010c52:	4413      	add	r3, r2
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bc80      	pop	{r7}
 8010c5c:	4770      	bx	lr

08010c5e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b086      	sub	sp, #24
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d905      	bls.n	8010c7a <get_fat+0x1c>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c74:	683a      	ldr	r2, [r7, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d302      	bcc.n	8010c80 <get_fat+0x22>
		val = 1;	/* Internal error */
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	617b      	str	r3, [r7, #20]
 8010c7e:	e0a3      	b.n	8010dc8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c80:	f04f 33ff 	mov.w	r3, #4294967295
 8010c84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010c8c:	2b03      	cmp	r3, #3
 8010c8e:	d068      	beq.n	8010d62 <get_fat+0x104>
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	f300 808f 	bgt.w	8010db4 <get_fat+0x156>
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d002      	beq.n	8010ca0 <get_fat+0x42>
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d040      	beq.n	8010d20 <get_fat+0xc2>
 8010c9e:	e089      	b.n	8010db4 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	60fb      	str	r3, [r7, #12]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	085b      	lsrs	r3, r3, #1
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	4413      	add	r3, r2
 8010cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	0a5b      	lsrs	r3, r3, #9
 8010cb8:	4413      	add	r3, r2
 8010cba:	4619      	mov	r1, r3
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff fed2 	bl	8010a66 <move_window>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d178      	bne.n	8010dba <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	60fa      	str	r2, [r7, #12]
 8010cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	5cd3      	ldrb	r3, [r2, r3]
 8010cd6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	0a5b      	lsrs	r3, r3, #9
 8010ce2:	4413      	add	r3, r2
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f7ff febd 	bl	8010a66 <move_window>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d165      	bne.n	8010dbe <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	5cd3      	ldrb	r3, [r2, r3]
 8010cfc:	021b      	lsls	r3, r3, #8
 8010cfe:	461a      	mov	r2, r3
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	f003 0301 	and.w	r3, r3, #1
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <get_fat+0xb8>
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	091b      	lsrs	r3, r3, #4
 8010d14:	e002      	b.n	8010d1c <get_fat+0xbe>
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d1c:	617b      	str	r3, [r7, #20]
			break;
 8010d1e:	e053      	b.n	8010dc8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	0a1b      	lsrs	r3, r3, #8
 8010d2a:	4413      	add	r3, r2
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff fe99 	bl	8010a66 <move_window>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d143      	bne.n	8010dc2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	4413      	add	r3, r2
 8010d46:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	021b      	lsls	r3, r3, #8
 8010d50:	b21a      	sxth	r2, r3
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	b21b      	sxth	r3, r3
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	b21b      	sxth	r3, r3
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	617b      	str	r3, [r7, #20]
			break;
 8010d60:	e032      	b.n	8010dc8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	09db      	lsrs	r3, r3, #7
 8010d6c:	4413      	add	r3, r2
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7ff fe78 	bl	8010a66 <move_window>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d124      	bne.n	8010dc6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	4413      	add	r3, r2
 8010d88:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	3303      	adds	r3, #3
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	061a      	lsls	r2, r3, #24
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	3302      	adds	r3, #2
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	041b      	lsls	r3, r3, #16
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	3201      	adds	r2, #1
 8010da0:	7812      	ldrb	r2, [r2, #0]
 8010da2:	0212      	lsls	r2, r2, #8
 8010da4:	4313      	orrs	r3, r2
 8010da6:	693a      	ldr	r2, [r7, #16]
 8010da8:	7812      	ldrb	r2, [r2, #0]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010db0:	617b      	str	r3, [r7, #20]
			break;
 8010db2:	e009      	b.n	8010dc8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010db4:	2301      	movs	r3, #1
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	e006      	b.n	8010dc8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dba:	bf00      	nop
 8010dbc:	e004      	b.n	8010dc8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dbe:	bf00      	nop
 8010dc0:	e002      	b.n	8010dc8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010dc2:	bf00      	nop
 8010dc4:	e000      	b.n	8010dc8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010dc6:	bf00      	nop
		}
	}

	return val;
 8010dc8:	697b      	ldr	r3, [r7, #20]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b088      	sub	sp, #32
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	60f8      	str	r0, [r7, #12]
 8010dda:	60b9      	str	r1, [r7, #8]
 8010ddc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d905      	bls.n	8010df0 <put_fat+0x1e>
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010dea:	68ba      	ldr	r2, [r7, #8]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d302      	bcc.n	8010df6 <put_fat+0x24>
		res = FR_INT_ERR;
 8010df0:	2302      	movs	r3, #2
 8010df2:	77fb      	strb	r3, [r7, #31]
 8010df4:	e0f6      	b.n	8010fe4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	f000 809e 	beq.w	8010f3e <put_fat+0x16c>
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	f300 80e4 	bgt.w	8010fd0 <put_fat+0x1fe>
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d002      	beq.n	8010e12 <put_fat+0x40>
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d06f      	beq.n	8010ef0 <put_fat+0x11e>
 8010e10:	e0de      	b.n	8010fd0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	617b      	str	r3, [r7, #20]
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	085b      	lsrs	r3, r3, #1
 8010e1a:	697a      	ldr	r2, [r7, #20]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	0a5b      	lsrs	r3, r3, #9
 8010e2a:	4413      	add	r3, r2
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f7ff fe19 	bl	8010a66 <move_window>
 8010e34:	4603      	mov	r3, r0
 8010e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e38:	7ffb      	ldrb	r3, [r7, #31]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f040 80cb 	bne.w	8010fd6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	1c5a      	adds	r2, r3, #1
 8010e44:	617a      	str	r2, [r7, #20]
 8010e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	f003 0301 	and.w	r3, r3, #1
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00d      	beq.n	8010e76 <put_fat+0xa4>
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	b25b      	sxtb	r3, r3
 8010e60:	f003 030f 	and.w	r3, r3, #15
 8010e64:	b25a      	sxtb	r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	011b      	lsls	r3, r3, #4
 8010e6c:	b25b      	sxtb	r3, r3
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	b25b      	sxtb	r3, r3
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	e001      	b.n	8010e7a <put_fat+0xa8>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	69ba      	ldr	r2, [r7, #24]
 8010e7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2201      	movs	r2, #1
 8010e82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	0a5b      	lsrs	r3, r3, #9
 8010e90:	4413      	add	r3, r2
 8010e92:	4619      	mov	r1, r3
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f7ff fde6 	bl	8010a66 <move_window>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f040 809a 	bne.w	8010fda <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	4413      	add	r3, r2
 8010eb0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	f003 0301 	and.w	r3, r3, #1
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d003      	beq.n	8010ec4 <put_fat+0xf2>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	091b      	lsrs	r3, r3, #4
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	e00e      	b.n	8010ee2 <put_fat+0x110>
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	b25b      	sxtb	r3, r3
 8010eca:	f023 030f 	bic.w	r3, r3, #15
 8010ece:	b25a      	sxtb	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	0a1b      	lsrs	r3, r3, #8
 8010ed4:	b25b      	sxtb	r3, r3
 8010ed6:	f003 030f 	and.w	r3, r3, #15
 8010eda:	b25b      	sxtb	r3, r3
 8010edc:	4313      	orrs	r3, r2
 8010ede:	b25b      	sxtb	r3, r3
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	69ba      	ldr	r2, [r7, #24]
 8010ee4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010eee:	e079      	b.n	8010fe4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	0a1b      	lsrs	r3, r3, #8
 8010efa:	4413      	add	r3, r2
 8010efc:	4619      	mov	r1, r3
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff fdb1 	bl	8010a66 <move_window>
 8010f04:	4603      	mov	r3, r0
 8010f06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f08:	7ffb      	ldrb	r3, [r7, #31]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d167      	bne.n	8010fde <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	005b      	lsls	r3, r3, #1
 8010f12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	4413      	add	r3, r2
 8010f1a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	701a      	strb	r2, [r3, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	0a1b      	lsrs	r3, r3, #8
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	b2d2      	uxtb	r2, r2
 8010f32:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2201      	movs	r2, #1
 8010f38:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010f3c:	e052      	b.n	8010fe4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	09db      	lsrs	r3, r3, #7
 8010f48:	4413      	add	r3, r2
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f7ff fd8a 	bl	8010a66 <move_window>
 8010f52:	4603      	mov	r3, r0
 8010f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f56:	7ffb      	ldrb	r3, [r7, #31]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d142      	bne.n	8010fe2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	4413      	add	r3, r2
 8010f68:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	3303      	adds	r3, #3
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	061a      	lsls	r2, r3, #24
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	3302      	adds	r3, #2
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	041b      	lsls	r3, r3, #16
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	69ba      	ldr	r2, [r7, #24]
 8010f7e:	3201      	adds	r2, #1
 8010f80:	7812      	ldrb	r2, [r2, #0]
 8010f82:	0212      	lsls	r2, r2, #8
 8010f84:	4313      	orrs	r3, r2
 8010f86:	69ba      	ldr	r2, [r7, #24]
 8010f88:	7812      	ldrb	r2, [r2, #0]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	4313      	orrs	r3, r2
 8010f94:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	701a      	strb	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	0a1b      	lsrs	r3, r3, #8
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	b2d2      	uxtb	r2, r2
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	0c1a      	lsrs	r2, r3, #16
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	3302      	adds	r3, #2
 8010fb6:	b2d2      	uxtb	r2, r2
 8010fb8:	701a      	strb	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	0e1a      	lsrs	r2, r3, #24
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	3303      	adds	r3, #3
 8010fc2:	b2d2      	uxtb	r2, r2
 8010fc4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010fce:	e009      	b.n	8010fe4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	77fb      	strb	r3, [r7, #31]
 8010fd4:	e006      	b.n	8010fe4 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fd6:	bf00      	nop
 8010fd8:	e004      	b.n	8010fe4 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fda:	bf00      	nop
 8010fdc:	e002      	b.n	8010fe4 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fde:	bf00      	nop
 8010fe0:	e000      	b.n	8010fe4 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fe2:	bf00      	nop
		}
	}

	return res;
 8010fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3720      	adds	r7, #32
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b084      	sub	sp, #16
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d905      	bls.n	801100a <remove_chain+0x1c>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011004:	683a      	ldr	r2, [r7, #0]
 8011006:	429a      	cmp	r2, r3
 8011008:	d302      	bcc.n	8011010 <remove_chain+0x22>
		res = FR_INT_ERR;
 801100a:	2302      	movs	r3, #2
 801100c:	73fb      	strb	r3, [r7, #15]
 801100e:	e043      	b.n	8011098 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8011014:	e036      	b.n	8011084 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8011016:	6839      	ldr	r1, [r7, #0]
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff fe20 	bl	8010c5e <get_fat>
 801101e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d035      	beq.n	8011092 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d102      	bne.n	8011032 <remove_chain+0x44>
 801102c:	2302      	movs	r3, #2
 801102e:	73fb      	strb	r3, [r7, #15]
 8011030:	e032      	b.n	8011098 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011038:	d102      	bne.n	8011040 <remove_chain+0x52>
 801103a:	2301      	movs	r3, #1
 801103c:	73fb      	strb	r3, [r7, #15]
 801103e:	e02b      	b.n	8011098 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8011040:	2200      	movs	r2, #0
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7ff fec4 	bl	8010dd2 <put_fat>
 801104a:	4603      	mov	r3, r0
 801104c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801104e:	7bfb      	ldrb	r3, [r7, #15]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d120      	bne.n	8011096 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105e:	d00f      	beq.n	8011080 <remove_chain+0x92>
				fs->free_clust++;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011066:	1c5a      	adds	r2, r3, #1
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8011074:	f043 0301 	orr.w	r3, r3, #1
 8011078:	b2da      	uxtb	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	429a      	cmp	r2, r3
 801108e:	d3c2      	bcc.n	8011016 <remove_chain+0x28>
 8011090:	e002      	b.n	8011098 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8011092:	bf00      	nop
 8011094:	e000      	b.n	8011098 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8011096:	bf00      	nop
		}
	}

	return res;
 8011098:	7bfb      	ldrb	r3, [r7, #15]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b086      	sub	sp, #24
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
 80110aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d10f      	bne.n	80110d2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80110b8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d005      	beq.n	80110cc <create_chain+0x2a>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80110c6:	693a      	ldr	r2, [r7, #16]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d31c      	bcc.n	8011106 <create_chain+0x64>
 80110cc:	2301      	movs	r3, #1
 80110ce:	613b      	str	r3, [r7, #16]
 80110d0:	e019      	b.n	8011106 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff fdc2 	bl	8010c5e <get_fat>
 80110da:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d801      	bhi.n	80110e6 <create_chain+0x44>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e076      	b.n	80111d4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ec:	d101      	bne.n	80110f2 <create_chain+0x50>
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	e070      	b.n	80111d4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80110f8:	68ba      	ldr	r2, [r7, #8]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d201      	bcs.n	8011102 <create_chain+0x60>
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	e068      	b.n	80111d4 <create_chain+0x132>
		scl = clst;
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	3301      	adds	r3, #1
 801110e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	429a      	cmp	r2, r3
 801111a:	d307      	bcc.n	801112c <create_chain+0x8a>
			ncl = 2;
 801111c:	2302      	movs	r3, #2
 801111e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8011120:	697a      	ldr	r2, [r7, #20]
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	429a      	cmp	r2, r3
 8011126:	d901      	bls.n	801112c <create_chain+0x8a>
 8011128:	2300      	movs	r3, #0
 801112a:	e053      	b.n	80111d4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 801112c:	6979      	ldr	r1, [r7, #20]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff fd95 	bl	8010c5e <get_fat>
 8011134:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00e      	beq.n	801115a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011142:	d002      	beq.n	801114a <create_chain+0xa8>
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b01      	cmp	r3, #1
 8011148:	d101      	bne.n	801114e <create_chain+0xac>
			return cs;
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	e042      	b.n	80111d4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 801114e:	697a      	ldr	r2, [r7, #20]
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	429a      	cmp	r2, r3
 8011154:	d1d9      	bne.n	801110a <create_chain+0x68>
 8011156:	2300      	movs	r3, #0
 8011158:	e03c      	b.n	80111d4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 801115a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 801115c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011160:	6979      	ldr	r1, [r7, #20]
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7ff fe35 	bl	8010dd2 <put_fat>
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d109      	bne.n	8011186 <create_chain+0xe4>
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d006      	beq.n	8011186 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8011178:	697a      	ldr	r2, [r7, #20]
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff fe28 	bl	8010dd2 <put_fat>
 8011182:	4603      	mov	r3, r0
 8011184:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8011186:	7bfb      	ldrb	r3, [r7, #15]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d11a      	bne.n	80111c2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	697a      	ldr	r2, [r7, #20]
 8011190:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801119a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801119e:	d018      	beq.n	80111d2 <create_chain+0x130>
			fs->free_clust--;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111a6:	1e5a      	subs	r2, r3, #1
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80111b4:	f043 0301 	orr.w	r3, r3, #1
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80111c0:	e007      	b.n	80111d2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d102      	bne.n	80111ce <create_chain+0x12c>
 80111c8:	f04f 33ff 	mov.w	r3, #4294967295
 80111cc:	e000      	b.n	80111d0 <create_chain+0x12e>
 80111ce:	2301      	movs	r3, #1
 80111d0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80111d2:	697b      	ldr	r3, [r7, #20]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80111dc:	b480      	push	{r7}
 80111de:	b087      	sub	sp, #28
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80111ec:	3304      	adds	r3, #4
 80111ee:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	0a5b      	lsrs	r3, r3, #9
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80111fa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80111fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8011202:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	1d1a      	adds	r2, r3, #4
 8011208:	613a      	str	r2, [r7, #16]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d101      	bne.n	8011218 <clmt_clust+0x3c>
 8011214:	2300      	movs	r3, #0
 8011216:	e010      	b.n	801123a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8011218:	697a      	ldr	r2, [r7, #20]
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	429a      	cmp	r2, r3
 801121e:	d307      	bcc.n	8011230 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	617b      	str	r3, [r7, #20]
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	3304      	adds	r3, #4
 801122c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801122e:	e7e9      	b.n	8011204 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8011230:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	4413      	add	r3, r2
}
 801123a:	4618      	mov	r0, r3
 801123c:	371c      	adds	r7, #28
 801123e:	46bd      	mov	sp, r7
 8011240:	bc80      	pop	{r7}
 8011242:	4770      	bx	lr

08011244 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	b29a      	uxth	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801125e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2b01      	cmp	r3, #1
 8011264:	d007      	beq.n	8011276 <dir_sdi+0x32>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801126c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011270:	697a      	ldr	r2, [r7, #20]
 8011272:	429a      	cmp	r2, r3
 8011274:	d301      	bcc.n	801127a <dir_sdi+0x36>
		return FR_INT_ERR;
 8011276:	2302      	movs	r3, #2
 8011278:	e074      	b.n	8011364 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d10c      	bne.n	801129a <dir_sdi+0x56>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011286:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801128a:	2b03      	cmp	r3, #3
 801128c:	d105      	bne.n	801129a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011294:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011298:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d111      	bne.n	80112c4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112a6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80112aa:	461a      	mov	r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d301      	bcc.n	80112b6 <dir_sdi+0x72>
			return FR_INT_ERR;
 80112b2:	2302      	movs	r3, #2
 80112b4:	e056      	b.n	8011364 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112bc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80112c0:	613b      	str	r3, [r7, #16]
 80112c2:	e032      	b.n	801132a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112ca:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80112ce:	011b      	lsls	r3, r3, #4
 80112d0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80112d2:	e01e      	b.n	8011312 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112da:	6979      	ldr	r1, [r7, #20]
 80112dc:	4618      	mov	r0, r3
 80112de:	f7ff fcbe 	bl	8010c5e <get_fat>
 80112e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ea:	d101      	bne.n	80112f0 <dir_sdi+0xac>
 80112ec:	2301      	movs	r3, #1
 80112ee:	e039      	b.n	8011364 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d907      	bls.n	8011306 <dir_sdi+0xc2>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	429a      	cmp	r2, r3
 8011304:	d301      	bcc.n	801130a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8011306:	2302      	movs	r3, #2
 8011308:	e02c      	b.n	8011364 <dir_sdi+0x120>
			idx -= ic;
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8011312:	683a      	ldr	r2, [r7, #0]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	429a      	cmp	r2, r3
 8011318:	d2dc      	bcs.n	80112d4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011320:	6979      	ldr	r1, [r7, #20]
 8011322:	4618      	mov	r0, r3
 8011324:	f7ff fc7a 	bl	8010c1c <clust2sect>
 8011328:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	697a      	ldr	r2, [r7, #20]
 801132e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <dir_sdi+0xf8>
 8011338:	2302      	movs	r3, #2
 801133a:	e013      	b.n	8011364 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	091a      	lsrs	r2, r3, #4
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	441a      	add	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011350:	461a      	mov	r2, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	f003 030f 	and.w	r3, r3, #15
 8011358:	015b      	lsls	r3, r3, #5
 801135a:	441a      	add	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801136c:	b590      	push	{r4, r7, lr}
 801136e:	b087      	sub	sp, #28
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 801137c:	3301      	adds	r3, #1
 801137e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	b29b      	uxth	r3, r3
 8011384:	2b00      	cmp	r3, #0
 8011386:	d004      	beq.n	8011392 <dir_next+0x26>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801138e:	2b00      	cmp	r3, #0
 8011390:	d101      	bne.n	8011396 <dir_next+0x2a>
		return FR_NO_FILE;
 8011392:	2304      	movs	r3, #4
 8011394:	e0dd      	b.n	8011552 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f003 030f 	and.w	r3, r3, #15
 801139c:	2b00      	cmp	r3, #0
 801139e:	f040 80c6 	bne.w	801152e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80113a8:	1c5a      	adds	r2, r3, #1
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10b      	bne.n	80113d2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113c0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80113c4:	461a      	mov	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	4293      	cmp	r3, r2
 80113ca:	f0c0 80b0 	bcc.w	801152e <dir_next+0x1c2>
				return FR_NO_FILE;
 80113ce:	2304      	movs	r3, #4
 80113d0:	e0bf      	b.n	8011552 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	091b      	lsrs	r3, r3, #4
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80113dc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80113e0:	3a01      	subs	r2, #1
 80113e2:	4013      	ands	r3, r2
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f040 80a2 	bne.w	801152e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80113f6:	4619      	mov	r1, r3
 80113f8:	4610      	mov	r0, r2
 80113fa:	f7ff fc30 	bl	8010c5e <get_fat>
 80113fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d801      	bhi.n	801140a <dir_next+0x9e>
 8011406:	2302      	movs	r3, #2
 8011408:	e0a3      	b.n	8011552 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011410:	d101      	bne.n	8011416 <dir_next+0xaa>
 8011412:	2301      	movs	r3, #1
 8011414:	e09d      	b.n	8011552 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801141c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011420:	697a      	ldr	r2, [r7, #20]
 8011422:	429a      	cmp	r2, r3
 8011424:	d374      	bcc.n	8011510 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d101      	bne.n	8011430 <dir_next+0xc4>
 801142c:	2304      	movs	r3, #4
 801142e:	e090      	b.n	8011552 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801143c:	4619      	mov	r1, r3
 801143e:	4610      	mov	r0, r2
 8011440:	f7ff fe2f 	bl	80110a2 <create_chain>
 8011444:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d101      	bne.n	8011450 <dir_next+0xe4>
 801144c:	2307      	movs	r3, #7
 801144e:	e080      	b.n	8011552 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2b01      	cmp	r3, #1
 8011454:	d101      	bne.n	801145a <dir_next+0xee>
 8011456:	2302      	movs	r3, #2
 8011458:	e07b      	b.n	8011552 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011460:	d101      	bne.n	8011466 <dir_next+0xfa>
 8011462:	2301      	movs	r3, #1
 8011464:	e075      	b.n	8011552 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff fab1 	bl	80109d4 <sync_window>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <dir_next+0x110>
 8011478:	2301      	movs	r3, #1
 801147a:	e06a      	b.n	8011552 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011486:	2100      	movs	r1, #0
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff f867 	bl	801055c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 801149a:	6979      	ldr	r1, [r7, #20]
 801149c:	4610      	mov	r0, r2
 801149e:	f7ff fbbd 	bl	8010c1c <clust2sect>
 80114a2:	4603      	mov	r3, r0
 80114a4:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80114a8:	2300      	movs	r3, #0
 80114aa:	613b      	str	r3, [r7, #16]
 80114ac:	e01b      	b.n	80114e6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114b4:	2201      	movs	r2, #1
 80114b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff fa87 	bl	80109d4 <sync_window>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <dir_next+0x164>
 80114cc:	2301      	movs	r3, #1
 80114ce:	e040      	b.n	8011552 <dir_next+0x1e6>
						dp->fs->winsect++;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114d6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80114da:	3201      	adds	r2, #1
 80114dc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	3301      	adds	r3, #1
 80114e4:	613b      	str	r3, [r7, #16]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80114f0:	461a      	mov	r2, r3
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d3da      	bcc.n	80114ae <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114fe:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	1a8a      	subs	r2, r1, r2
 801150c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801151e:	6979      	ldr	r1, [r7, #20]
 8011520:	4618      	mov	r0, r3
 8011522:	f7ff fb7b 	bl	8010c1c <clust2sect>
 8011526:	4602      	mov	r2, r0
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	b29a      	uxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801153e:	461a      	mov	r2, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f003 030f 	and.w	r3, r3, #15
 8011546:	015b      	lsls	r3, r3, #5
 8011548:	441a      	add	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011550:	2300      	movs	r3, #0
}
 8011552:	4618      	mov	r0, r3
 8011554:	371c      	adds	r7, #28
 8011556:	46bd      	mov	sp, r7
 8011558:	bd90      	pop	{r4, r7, pc}

0801155a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 801155a:	b580      	push	{r7, lr}
 801155c:	b084      	sub	sp, #16
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
 8011562:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8011564:	2100      	movs	r1, #0
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ff fe6c 	bl	8011244 <dir_sdi>
 801156c:	4603      	mov	r3, r0
 801156e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d131      	bne.n	80115da <dir_alloc+0x80>
		n = 0;
 8011576:	2300      	movs	r3, #0
 8011578:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011586:	4619      	mov	r1, r3
 8011588:	4610      	mov	r0, r2
 801158a:	f7ff fa6c 	bl	8010a66 <move_window>
 801158e:	4603      	mov	r3, r0
 8011590:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011592:	7bfb      	ldrb	r3, [r7, #15]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d11f      	bne.n	80115d8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2be5      	cmp	r3, #229	; 0xe5
 80115a2:	d005      	beq.n	80115b0 <dir_alloc+0x56>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d107      	bne.n	80115c0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	3301      	adds	r3, #1
 80115b4:	60bb      	str	r3, [r7, #8]
 80115b6:	68ba      	ldr	r2, [r7, #8]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d102      	bne.n	80115c4 <dir_alloc+0x6a>
 80115be:	e00c      	b.n	80115da <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80115c0:	2300      	movs	r3, #0
 80115c2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80115c4:	2101      	movs	r1, #1
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f7ff fed0 	bl	801136c <dir_next>
 80115cc:	4603      	mov	r3, r0
 80115ce:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0d1      	beq.n	801157a <dir_alloc+0x20>
 80115d6:	e000      	b.n	80115da <dir_alloc+0x80>
			if (res != FR_OK) break;
 80115d8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115da:	7bfb      	ldrb	r3, [r7, #15]
 80115dc:	2b04      	cmp	r3, #4
 80115de:	d101      	bne.n	80115e4 <dir_alloc+0x8a>
 80115e0:	2307      	movs	r3, #7
 80115e2:	73fb      	strb	r3, [r7, #15]
	return res;
 80115e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b085      	sub	sp, #20
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	331b      	adds	r3, #27
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	021b      	lsls	r3, r3, #8
 8011600:	b21a      	sxth	r2, r3
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	331a      	adds	r3, #26
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	b21b      	sxth	r3, r3
 801160a:	4313      	orrs	r3, r2
 801160c:	b21b      	sxth	r3, r3
 801160e:	b29b      	uxth	r3, r3
 8011610:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011618:	2b03      	cmp	r3, #3
 801161a:	d10f      	bne.n	801163c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	3315      	adds	r3, #21
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	021b      	lsls	r3, r3, #8
 8011624:	b21a      	sxth	r2, r3
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	3314      	adds	r3, #20
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	b21b      	sxth	r3, r3
 801162e:	4313      	orrs	r3, r2
 8011630:	b21b      	sxth	r3, r3
 8011632:	b29b      	uxth	r3, r3
 8011634:	041b      	lsls	r3, r3, #16
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	4313      	orrs	r3, r2
 801163a:	60fb      	str	r3, [r7, #12]

	return cl;
 801163c:	68fb      	ldr	r3, [r7, #12]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	bc80      	pop	{r7}
 8011646:	4770      	bx	lr

08011648 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	331a      	adds	r3, #26
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	b2d2      	uxtb	r2, r2
 801165a:	701a      	strb	r2, [r3, #0]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	b29b      	uxth	r3, r3
 8011660:	0a1b      	lsrs	r3, r3, #8
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	331b      	adds	r3, #27
 8011668:	b2d2      	uxtb	r2, r2
 801166a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	0c1a      	lsrs	r2, r3, #16
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	3314      	adds	r3, #20
 8011674:	b2d2      	uxtb	r2, r2
 8011676:	701a      	strb	r2, [r3, #0]
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	0c1b      	lsrs	r3, r3, #16
 801167c:	b29b      	uxth	r3, r3
 801167e:	0a1b      	lsrs	r3, r3, #8
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	3315      	adds	r3, #21
 8011686:	b2d2      	uxtb	r2, r2
 8011688:	701a      	strb	r2, [r3, #0]
}
 801168a:	bf00      	nop
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	bc80      	pop	{r7}
 8011692:	4770      	bx	lr

08011694 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b086      	sub	sp, #24
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801169c:	2100      	movs	r1, #0
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7ff fdd0 	bl	8011244 <dir_sdi>
 80116a4:	4603      	mov	r3, r0
 80116a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d001      	beq.n	80116b2 <dir_find+0x1e>
 80116ae:	7dfb      	ldrb	r3, [r7, #23]
 80116b0:	e03b      	b.n	801172a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116be:	4619      	mov	r1, r3
 80116c0:	4610      	mov	r0, r2
 80116c2:	f7ff f9d0 	bl	8010a66 <move_window>
 80116c6:	4603      	mov	r3, r0
 80116c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116ca:	7dfb      	ldrb	r3, [r7, #23]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d128      	bne.n	8011722 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80116d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d102      	bne.n	80116ea <dir_find+0x56>
 80116e4:	2304      	movs	r3, #4
 80116e6:	75fb      	strb	r3, [r7, #23]
 80116e8:	e01e      	b.n	8011728 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	330b      	adds	r3, #11
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	f003 0308 	and.w	r3, r3, #8
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10a      	bne.n	801170e <dir_find+0x7a>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80116fe:	220b      	movs	r2, #11
 8011700:	4619      	mov	r1, r3
 8011702:	6938      	ldr	r0, [r7, #16]
 8011704:	f7fe ff44 	bl	8010590 <mem_cmp>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00b      	beq.n	8011726 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 801170e:	2100      	movs	r1, #0
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff fe2b 	bl	801136c <dir_next>
 8011716:	4603      	mov	r3, r0
 8011718:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801171a:	7dfb      	ldrb	r3, [r7, #23]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d0c8      	beq.n	80116b2 <dir_find+0x1e>
 8011720:	e002      	b.n	8011728 <dir_find+0x94>
		if (res != FR_OK) break;
 8011722:	bf00      	nop
 8011724:	e000      	b.n	8011728 <dir_find+0x94>
			break;
 8011726:	bf00      	nop

	return res;
 8011728:	7dfb      	ldrb	r3, [r7, #23]
}
 801172a:	4618      	mov	r0, r3
 801172c:	3718      	adds	r7, #24
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b086      	sub	sp, #24
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 801173c:	2304      	movs	r3, #4
 801173e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8011740:	e03f      	b.n	80117c2 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801174e:	4619      	mov	r1, r3
 8011750:	4610      	mov	r0, r2
 8011752:	f7ff f988 	bl	8010a66 <move_window>
 8011756:	4603      	mov	r3, r0
 8011758:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d136      	bne.n	80117ce <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011766:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801176e:	7bfb      	ldrb	r3, [r7, #15]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <dir_read+0x48>
 8011774:	2304      	movs	r3, #4
 8011776:	75fb      	strb	r3, [r7, #23]
 8011778:	e02e      	b.n	80117d8 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	330b      	adds	r3, #11
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011784:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	2be5      	cmp	r3, #229	; 0xe5
 801178a:	d011      	beq.n	80117b0 <dir_read+0x7e>
 801178c:	7bfb      	ldrb	r3, [r7, #15]
 801178e:	2b2e      	cmp	r3, #46	; 0x2e
 8011790:	d00e      	beq.n	80117b0 <dir_read+0x7e>
 8011792:	7bbb      	ldrb	r3, [r7, #14]
 8011794:	2b0f      	cmp	r3, #15
 8011796:	d00b      	beq.n	80117b0 <dir_read+0x7e>
 8011798:	7bbb      	ldrb	r3, [r7, #14]
 801179a:	f023 0320 	bic.w	r3, r3, #32
 801179e:	2b08      	cmp	r3, #8
 80117a0:	bf0c      	ite	eq
 80117a2:	2301      	moveq	r3, #1
 80117a4:	2300      	movne	r3, #0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	461a      	mov	r2, r3
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d010      	beq.n	80117d2 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80117b0:	2100      	movs	r1, #0
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7ff fdda 	bl	801136c <dir_next>
 80117b8:	4603      	mov	r3, r0
 80117ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d109      	bne.n	80117d6 <dir_read+0xa4>
	while (dp->sect) {
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1ba      	bne.n	8011742 <dir_read+0x10>
 80117cc:	e004      	b.n	80117d8 <dir_read+0xa6>
		if (res != FR_OK) break;
 80117ce:	bf00      	nop
 80117d0:	e002      	b.n	80117d8 <dir_read+0xa6>
			break;
 80117d2:	bf00      	nop
 80117d4:	e000      	b.n	80117d8 <dir_read+0xa6>
		if (res != FR_OK) break;
 80117d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 80117d8:	7dfb      	ldrb	r3, [r7, #23]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d003      	beq.n	80117e6 <dir_read+0xb4>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3718      	adds	r7, #24
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80117f8:	2101      	movs	r1, #1
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f7ff fead 	bl	801155a <dir_alloc>
 8011800:	4603      	mov	r3, r0
 8011802:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8011804:	7bfb      	ldrb	r3, [r7, #15]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d126      	bne.n	8011858 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011816:	4619      	mov	r1, r3
 8011818:	4610      	mov	r0, r2
 801181a:	f7ff f924 	bl	8010a66 <move_window>
 801181e:	4603      	mov	r3, r0
 8011820:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011822:	7bfb      	ldrb	r3, [r7, #15]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d117      	bne.n	8011858 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801182e:	2220      	movs	r2, #32
 8011830:	2100      	movs	r1, #0
 8011832:	4618      	mov	r0, r3
 8011834:	f7fe fe92 	bl	801055c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011844:	220b      	movs	r2, #11
 8011846:	4619      	mov	r1, r3
 8011848:	f7fe fe6a 	bl	8010520 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011852:	2201      	movs	r2, #1
 8011854:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8011858:	7bfb      	ldrb	r3, [r7, #15]
}
 801185a:	4618      	mov	r0, r3
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011862:	b480      	push	{r7}
 8011864:	b087      	sub	sp, #28
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
 801186a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	3309      	adds	r3, #9
 8011870:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011878:	2b00      	cmp	r3, #0
 801187a:	d05a      	beq.n	8011932 <get_fileinfo+0xd0>
		dir = dp->dir;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011882:	60bb      	str	r3, [r7, #8]
		i = 0;
 8011884:	2300      	movs	r3, #0
 8011886:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8011888:	e01c      	b.n	80118c4 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	617a      	str	r2, [r7, #20]
 8011890:	68ba      	ldr	r2, [r7, #8]
 8011892:	4413      	add	r3, r2
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8011898:	7bfb      	ldrb	r3, [r7, #15]
 801189a:	2b20      	cmp	r3, #32
 801189c:	d100      	bne.n	80118a0 <get_fileinfo+0x3e>
 801189e:	e011      	b.n	80118c4 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	2b05      	cmp	r3, #5
 80118a4:	d101      	bne.n	80118aa <get_fileinfo+0x48>
 80118a6:	23e5      	movs	r3, #229	; 0xe5
 80118a8:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	2b09      	cmp	r3, #9
 80118ae:	d104      	bne.n	80118ba <get_fileinfo+0x58>
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	1c5a      	adds	r2, r3, #1
 80118b4:	613a      	str	r2, [r7, #16]
 80118b6:	222e      	movs	r2, #46	; 0x2e
 80118b8:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	613a      	str	r2, [r7, #16]
 80118c0:	7bfa      	ldrb	r2, [r7, #15]
 80118c2:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	2b0a      	cmp	r3, #10
 80118c8:	d9df      	bls.n	801188a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	7ada      	ldrb	r2, [r3, #11]
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	331f      	adds	r3, #31
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	061a      	lsls	r2, r3, #24
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	331e      	adds	r3, #30
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	041b      	lsls	r3, r3, #16
 80118e2:	4313      	orrs	r3, r2
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	321d      	adds	r2, #29
 80118e8:	7812      	ldrb	r2, [r2, #0]
 80118ea:	0212      	lsls	r2, r2, #8
 80118ec:	4313      	orrs	r3, r2
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	321c      	adds	r2, #28
 80118f2:	7812      	ldrb	r2, [r2, #0]
 80118f4:	431a      	orrs	r2, r3
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	3319      	adds	r3, #25
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	021b      	lsls	r3, r3, #8
 8011902:	b21a      	sxth	r2, r3
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	3318      	adds	r3, #24
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	b21b      	sxth	r3, r3
 801190c:	4313      	orrs	r3, r2
 801190e:	b21b      	sxth	r3, r3
 8011910:	b29a      	uxth	r2, r3
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	3317      	adds	r3, #23
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	021b      	lsls	r3, r3, #8
 801191e:	b21a      	sxth	r2, r3
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	3316      	adds	r3, #22
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	b21b      	sxth	r3, r3
 8011928:	4313      	orrs	r3, r2
 801192a:	b21b      	sxth	r3, r3
 801192c:	b29a      	uxth	r2, r3
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	2200      	movs	r2, #0
 8011936:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8011938:	bf00      	nop
 801193a:	371c      	adds	r7, #28
 801193c:	46bd      	mov	sp, r7
 801193e:	bc80      	pop	{r7}
 8011940:	4770      	bx	lr
	...

08011944 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b088      	sub	sp, #32
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	e002      	b.n	801195c <create_name+0x18>
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	3301      	adds	r3, #1
 801195a:	60fb      	str	r3, [r7, #12]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b2f      	cmp	r3, #47	; 0x2f
 8011962:	d0f8      	beq.n	8011956 <create_name+0x12>
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b5c      	cmp	r3, #92	; 0x5c
 801196a:	d0f4      	beq.n	8011956 <create_name+0x12>
	sfn = dp->fn;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011972:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011974:	220b      	movs	r2, #11
 8011976:	2120      	movs	r1, #32
 8011978:	68b8      	ldr	r0, [r7, #8]
 801197a:	f7fe fdef 	bl	801055c <mem_set>
	si = i = b = 0; ni = 8;
 801197e:	2300      	movs	r3, #0
 8011980:	77fb      	strb	r3, [r7, #31]
 8011982:	2300      	movs	r3, #0
 8011984:	613b      	str	r3, [r7, #16]
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	617b      	str	r3, [r7, #20]
 801198a:	2308      	movs	r3, #8
 801198c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	1c5a      	adds	r2, r3, #1
 8011992:	617a      	str	r2, [r7, #20]
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	4413      	add	r3, r2
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 801199c:	7fbb      	ldrb	r3, [r7, #30]
 801199e:	2b20      	cmp	r3, #32
 80119a0:	d953      	bls.n	8011a4a <create_name+0x106>
 80119a2:	7fbb      	ldrb	r3, [r7, #30]
 80119a4:	2b2f      	cmp	r3, #47	; 0x2f
 80119a6:	d050      	beq.n	8011a4a <create_name+0x106>
 80119a8:	7fbb      	ldrb	r3, [r7, #30]
 80119aa:	2b5c      	cmp	r3, #92	; 0x5c
 80119ac:	d04d      	beq.n	8011a4a <create_name+0x106>
		if (c == '.' || i >= ni) {
 80119ae:	7fbb      	ldrb	r3, [r7, #30]
 80119b0:	2b2e      	cmp	r3, #46	; 0x2e
 80119b2:	d003      	beq.n	80119bc <create_name+0x78>
 80119b4:	693a      	ldr	r2, [r7, #16]
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d30f      	bcc.n	80119dc <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	2b08      	cmp	r3, #8
 80119c0:	d102      	bne.n	80119c8 <create_name+0x84>
 80119c2:	7fbb      	ldrb	r3, [r7, #30]
 80119c4:	2b2e      	cmp	r3, #46	; 0x2e
 80119c6:	d001      	beq.n	80119cc <create_name+0x88>
 80119c8:	2306      	movs	r3, #6
 80119ca:	e073      	b.n	8011ab4 <create_name+0x170>
			i = 8; ni = 11;
 80119cc:	2308      	movs	r3, #8
 80119ce:	613b      	str	r3, [r7, #16]
 80119d0:	230b      	movs	r3, #11
 80119d2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80119d4:	7ffb      	ldrb	r3, [r7, #31]
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	77fb      	strb	r3, [r7, #31]
 80119da:	e035      	b.n	8011a48 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80119dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da08      	bge.n	80119f6 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80119e4:	7ffb      	ldrb	r3, [r7, #31]
 80119e6:	f043 0303 	orr.w	r3, r3, #3
 80119ea:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80119ec:	7fbb      	ldrb	r3, [r7, #30]
 80119ee:	3b80      	subs	r3, #128	; 0x80
 80119f0:	4a32      	ldr	r2, [pc, #200]	; (8011abc <create_name+0x178>)
 80119f2:	5cd3      	ldrb	r3, [r2, r3]
 80119f4:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80119f6:	7fbb      	ldrb	r3, [r7, #30]
 80119f8:	4619      	mov	r1, r3
 80119fa:	4831      	ldr	r0, [pc, #196]	; (8011ac0 <create_name+0x17c>)
 80119fc:	f7fe fdee 	bl	80105dc <chk_chr>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <create_name+0xc6>
				return FR_INVALID_NAME;
 8011a06:	2306      	movs	r3, #6
 8011a08:	e054      	b.n	8011ab4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8011a0a:	7fbb      	ldrb	r3, [r7, #30]
 8011a0c:	2b40      	cmp	r3, #64	; 0x40
 8011a0e:	d907      	bls.n	8011a20 <create_name+0xdc>
 8011a10:	7fbb      	ldrb	r3, [r7, #30]
 8011a12:	2b5a      	cmp	r3, #90	; 0x5a
 8011a14:	d804      	bhi.n	8011a20 <create_name+0xdc>
				b |= 2;
 8011a16:	7ffb      	ldrb	r3, [r7, #31]
 8011a18:	f043 0302 	orr.w	r3, r3, #2
 8011a1c:	77fb      	strb	r3, [r7, #31]
 8011a1e:	e00c      	b.n	8011a3a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8011a20:	7fbb      	ldrb	r3, [r7, #30]
 8011a22:	2b60      	cmp	r3, #96	; 0x60
 8011a24:	d909      	bls.n	8011a3a <create_name+0xf6>
 8011a26:	7fbb      	ldrb	r3, [r7, #30]
 8011a28:	2b7a      	cmp	r3, #122	; 0x7a
 8011a2a:	d806      	bhi.n	8011a3a <create_name+0xf6>
					b |= 1; c -= 0x20;
 8011a2c:	7ffb      	ldrb	r3, [r7, #31]
 8011a2e:	f043 0301 	orr.w	r3, r3, #1
 8011a32:	77fb      	strb	r3, [r7, #31]
 8011a34:	7fbb      	ldrb	r3, [r7, #30]
 8011a36:	3b20      	subs	r3, #32
 8011a38:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	613a      	str	r2, [r7, #16]
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	4413      	add	r3, r2
 8011a44:	7fba      	ldrb	r2, [r7, #30]
 8011a46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011a48:	e7a1      	b.n	801198e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	441a      	add	r2, r3
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8011a54:	7fbb      	ldrb	r3, [r7, #30]
 8011a56:	2b20      	cmp	r3, #32
 8011a58:	d801      	bhi.n	8011a5e <create_name+0x11a>
 8011a5a:	2304      	movs	r3, #4
 8011a5c:	e000      	b.n	8011a60 <create_name+0x11c>
 8011a5e:	2300      	movs	r3, #0
 8011a60:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d101      	bne.n	8011a6c <create_name+0x128>
 8011a68:	2306      	movs	r3, #6
 8011a6a:	e023      	b.n	8011ab4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	2be5      	cmp	r3, #229	; 0xe5
 8011a72:	d102      	bne.n	8011a7a <create_name+0x136>
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2205      	movs	r2, #5
 8011a78:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	2b08      	cmp	r3, #8
 8011a7e:	d102      	bne.n	8011a86 <create_name+0x142>
 8011a80:	7ffb      	ldrb	r3, [r7, #31]
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8011a86:	7ffb      	ldrb	r3, [r7, #31]
 8011a88:	f003 0303 	and.w	r3, r3, #3
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d103      	bne.n	8011a98 <create_name+0x154>
 8011a90:	7fbb      	ldrb	r3, [r7, #30]
 8011a92:	f043 0310 	orr.w	r3, r3, #16
 8011a96:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8011a98:	7ffb      	ldrb	r3, [r7, #31]
 8011a9a:	f003 030c 	and.w	r3, r3, #12
 8011a9e:	2b04      	cmp	r3, #4
 8011aa0:	d103      	bne.n	8011aaa <create_name+0x166>
 8011aa2:	7fbb      	ldrb	r3, [r7, #30]
 8011aa4:	f043 0308 	orr.w	r3, r3, #8
 8011aa8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	330b      	adds	r3, #11
 8011aae:	7fba      	ldrb	r2, [r7, #30]
 8011ab0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ab2:	2300      	movs	r3, #0
#endif
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3720      	adds	r7, #32
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	0801b35c 	.word	0x0801b35c
 8011ac0:	0801b2ec 	.word	0x0801b2ec

08011ac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8011ad4:	d003      	beq.n	8011ade <follow_path+0x1a>
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b5c      	cmp	r3, #92	; 0x5c
 8011adc:	d102      	bne.n	8011ae4 <follow_path+0x20>
		path++;
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	2b1f      	cmp	r3, #31
 8011af2:	d80a      	bhi.n	8011b0a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8011af4:	2100      	movs	r1, #0
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7ff fba4 	bl	8011244 <dir_sdi>
 8011afc:	4603      	mov	r3, r0
 8011afe:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011b08:	e045      	b.n	8011b96 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b0a:	463b      	mov	r3, r7
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f7ff ff18 	bl	8011944 <create_name>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d136      	bne.n	8011b8c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f7ff fdb8 	bl	8011694 <dir_find>
 8011b24:	4603      	mov	r3, r0
 8011b26:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b2e:	7adb      	ldrb	r3, [r3, #11]
 8011b30:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00a      	beq.n	8011b4e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
 8011b3a:	2b04      	cmp	r3, #4
 8011b3c:	d128      	bne.n	8011b90 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	f003 0304 	and.w	r3, r3, #4
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d123      	bne.n	8011b90 <follow_path+0xcc>
 8011b48:	2305      	movs	r3, #5
 8011b4a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8011b4c:	e020      	b.n	8011b90 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b4e:	7bbb      	ldrb	r3, [r7, #14]
 8011b50:	f003 0304 	and.w	r3, r3, #4
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d11d      	bne.n	8011b94 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b5e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	330b      	adds	r3, #11
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	f003 0310 	and.w	r3, r3, #16
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d102      	bne.n	8011b74 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8011b6e:	2305      	movs	r3, #5
 8011b70:	73fb      	strb	r3, [r7, #15]
 8011b72:	e010      	b.n	8011b96 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b7a:	68b9      	ldr	r1, [r7, #8]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7ff fd36 	bl	80115ee <ld_clust>
 8011b82:	4602      	mov	r2, r0
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b8a:	e7be      	b.n	8011b0a <follow_path+0x46>
			if (res != FR_OK) break;
 8011b8c:	bf00      	nop
 8011b8e:	e002      	b.n	8011b96 <follow_path+0xd2>
				break;
 8011b90:	bf00      	nop
 8011b92:	e000      	b.n	8011b96 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b94:	bf00      	nop
		}
	}

	return res;
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b087      	sub	sp, #28
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d031      	beq.n	8011c1a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	617b      	str	r3, [r7, #20]
 8011bbc:	e002      	b.n	8011bc4 <get_ldnumber+0x24>
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	617b      	str	r3, [r7, #20]
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	2b20      	cmp	r3, #32
 8011bca:	d903      	bls.n	8011bd4 <get_ldnumber+0x34>
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	2b3a      	cmp	r3, #58	; 0x3a
 8011bd2:	d1f4      	bne.n	8011bbe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	2b3a      	cmp	r3, #58	; 0x3a
 8011bda:	d11c      	bne.n	8011c16 <get_ldnumber+0x76>
			tp = *path;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	1c5a      	adds	r2, r3, #1
 8011be6:	60fa      	str	r2, [r7, #12]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	3b30      	subs	r3, #48	; 0x30
 8011bec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	2b09      	cmp	r3, #9
 8011bf2:	d80e      	bhi.n	8011c12 <get_ldnumber+0x72>
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d10a      	bne.n	8011c12 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d107      	bne.n	8011c12 <get_ldnumber+0x72>
					vol = (int)i;
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	3301      	adds	r3, #1
 8011c0a:	617b      	str	r3, [r7, #20]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	697a      	ldr	r2, [r7, #20]
 8011c10:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	e002      	b.n	8011c1c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011c16:	2300      	movs	r3, #0
 8011c18:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011c1a:	693b      	ldr	r3, [r7, #16]
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	371c      	adds	r7, #28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bc80      	pop	{r7}
 8011c24:	4770      	bx	lr
	...

08011c28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c40:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7fe ff0d 	bl	8010a66 <move_window>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d001      	beq.n	8011c56 <check_fs+0x2e>
		return 3;
 8011c52:	2303      	movs	r3, #3
 8011c54:	e04a      	b.n	8011cec <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	021b      	lsls	r3, r3, #8
 8011c62:	b21a      	sxth	r2, r3
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011c6a:	b21b      	sxth	r3, r3
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	b21b      	sxth	r3, r3
 8011c70:	4a20      	ldr	r2, [pc, #128]	; (8011cf4 <check_fs+0xcc>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d001      	beq.n	8011c7a <check_fs+0x52>
		return 2;
 8011c76:	2302      	movs	r3, #2
 8011c78:	e038      	b.n	8011cec <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	3336      	adds	r3, #54	; 0x36
 8011c7e:	3303      	adds	r3, #3
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	061a      	lsls	r2, r3, #24
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	3336      	adds	r3, #54	; 0x36
 8011c88:	3302      	adds	r3, #2
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	041b      	lsls	r3, r3, #16
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	3236      	adds	r2, #54	; 0x36
 8011c94:	3201      	adds	r2, #1
 8011c96:	7812      	ldrb	r2, [r2, #0]
 8011c98:	0212      	lsls	r2, r2, #8
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ca8:	4a13      	ldr	r2, [pc, #76]	; (8011cf8 <check_fs+0xd0>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d101      	bne.n	8011cb2 <check_fs+0x8a>
		return 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	e01c      	b.n	8011cec <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	3352      	adds	r3, #82	; 0x52
 8011cb6:	3303      	adds	r3, #3
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	061a      	lsls	r2, r3, #24
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	3352      	adds	r3, #82	; 0x52
 8011cc0:	3302      	adds	r3, #2
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	041b      	lsls	r3, r3, #16
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	3252      	adds	r2, #82	; 0x52
 8011ccc:	3201      	adds	r2, #1
 8011cce:	7812      	ldrb	r2, [r2, #0]
 8011cd0:	0212      	lsls	r2, r2, #8
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ce0:	4a05      	ldr	r2, [pc, #20]	; (8011cf8 <check_fs+0xd0>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d101      	bne.n	8011cea <check_fs+0xc2>
		return 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	e000      	b.n	8011cec <check_fs+0xc4>

	return 1;
 8011cea:	2301      	movs	r3, #1
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	ffffaa55 	.word	0xffffaa55
 8011cf8:	00544146 	.word	0x00544146

08011cfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b096      	sub	sp, #88	; 0x58
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	4613      	mov	r3, r2
 8011d08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d10:	68b8      	ldr	r0, [r7, #8]
 8011d12:	f7ff ff45 	bl	8011ba0 <get_ldnumber>
 8011d16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	da01      	bge.n	8011d22 <find_volume+0x26>
 8011d1e:	230b      	movs	r3, #11
 8011d20:	e2b2      	b.n	8012288 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d22:	4aa2      	ldr	r2, [pc, #648]	; (8011fac <find_volume+0x2b0>)
 8011d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d101      	bne.n	8011d36 <find_volume+0x3a>
 8011d32:	230c      	movs	r3, #12
 8011d34:	e2a8      	b.n	8012288 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 8011d36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d38:	f7fe fc6a 	bl	8010610 <lock_fs>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <find_volume+0x4a>
 8011d42:	230f      	movs	r3, #15
 8011d44:	e2a0      	b.n	8012288 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d4a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d01b      	beq.n	8011d8e <find_volume+0x92>
		stat = disk_status(fs->drv);
 8011d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d58:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fe fb41 	bl	80103e4 <disk_status>
 8011d62:	4603      	mov	r3, r0
 8011d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d6c:	f003 0301 	and.w	r3, r3, #1
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d10c      	bne.n	8011d8e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8011d74:	79fb      	ldrb	r3, [r7, #7]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d007      	beq.n	8011d8a <find_volume+0x8e>
 8011d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d7e:	f003 0304 	and.w	r3, r3, #4
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d001      	beq.n	8011d8a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8011d86:	230a      	movs	r3, #10
 8011d88:	e27e      	b.n	8012288 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e27c      	b.n	8012288 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d90:	2200      	movs	r2, #0
 8011d92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe fb36 	bl	8010418 <disk_initialize>
 8011dac:	4603      	mov	r3, r0
 8011dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8011db2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d001      	beq.n	8011dc2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011dbe:	2303      	movs	r3, #3
 8011dc0:	e262      	b.n	8012288 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8011dc2:	79fb      	ldrb	r3, [r7, #7]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d007      	beq.n	8011dd8 <find_volume+0xdc>
 8011dc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dcc:	f003 0304 	and.w	r3, r3, #4
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8011dd4:	230a      	movs	r3, #10
 8011dd6:	e257      	b.n	8012288 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011ddc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011de0:	f7ff ff22 	bl	8011c28 <check_fs>
 8011de4:	4603      	mov	r3, r0
 8011de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8011dea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d155      	bne.n	8011e9e <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011df2:	2300      	movs	r3, #0
 8011df4:	643b      	str	r3, [r7, #64]	; 0x40
 8011df6:	e029      	b.n	8011e4c <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8011df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dfc:	011b      	lsls	r3, r3, #4
 8011dfe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011e02:	4413      	add	r3, r2
 8011e04:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	3304      	adds	r3, #4
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d012      	beq.n	8011e36 <find_volume+0x13a>
 8011e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e12:	330b      	adds	r3, #11
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	061a      	lsls	r2, r3, #24
 8011e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1a:	330a      	adds	r3, #10
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	041b      	lsls	r3, r3, #16
 8011e20:	4313      	orrs	r3, r2
 8011e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e24:	3209      	adds	r2, #9
 8011e26:	7812      	ldrb	r2, [r2, #0]
 8011e28:	0212      	lsls	r2, r2, #8
 8011e2a:	4313      	orrs	r3, r2
 8011e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e2e:	3208      	adds	r2, #8
 8011e30:	7812      	ldrb	r2, [r2, #0]
 8011e32:	431a      	orrs	r2, r3
 8011e34:	e000      	b.n	8011e38 <find_volume+0x13c>
 8011e36:	2200      	movs	r2, #0
 8011e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011e40:	440b      	add	r3, r1
 8011e42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e48:	3301      	adds	r3, #1
 8011e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8011e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e4e:	2b03      	cmp	r3, #3
 8011e50:	d9d2      	bls.n	8011df8 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8011e52:	2300      	movs	r3, #0
 8011e54:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <find_volume+0x166>
 8011e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8011e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011e70:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8011e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d005      	beq.n	8011e84 <find_volume+0x188>
 8011e78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e7c:	f7ff fed4 	bl	8011c28 <check_fs>
 8011e80:	4603      	mov	r3, r0
 8011e82:	e000      	b.n	8011e86 <find_volume+0x18a>
 8011e84:	2302      	movs	r3, #2
 8011e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8011e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d005      	beq.n	8011e9e <find_volume+0x1a2>
 8011e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e94:	3301      	adds	r3, #1
 8011e96:	643b      	str	r3, [r7, #64]	; 0x40
 8011e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	d9e1      	bls.n	8011e62 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d101      	bne.n	8011eaa <find_volume+0x1ae>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e1ee      	b.n	8012288 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8011eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <find_volume+0x1ba>
 8011eb2:	230d      	movs	r3, #13
 8011eb4:	e1e8      	b.n	8012288 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb8:	7b1b      	ldrb	r3, [r3, #12]
 8011eba:	021b      	lsls	r3, r3, #8
 8011ebc:	b21a      	sxth	r2, r3
 8011ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec0:	7adb      	ldrb	r3, [r3, #11]
 8011ec2:	b21b      	sxth	r3, r3
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	b21b      	sxth	r3, r3
 8011ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ecc:	d001      	beq.n	8011ed2 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8011ece:	230d      	movs	r3, #13
 8011ed0:	e1da      	b.n	8012288 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	7ddb      	ldrb	r3, [r3, #23]
 8011ed6:	021b      	lsls	r3, r3, #8
 8011ed8:	b21a      	sxth	r2, r3
 8011eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011edc:	7d9b      	ldrb	r3, [r3, #22]
 8011ede:	b21b      	sxth	r3, r3
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	b21b      	sxth	r3, r3
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d112      	bne.n	8011f14 <find_volume+0x218>
 8011eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011ef4:	061a      	lsls	r2, r3, #24
 8011ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011efc:	041b      	lsls	r3, r3, #16
 8011efe:	4313      	orrs	r3, r2
 8011f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f02:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011f06:	0212      	lsls	r2, r2, #8
 8011f08:	4313      	orrs	r3, r2
 8011f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f0c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011f10:	4313      	orrs	r3, r2
 8011f12:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	7c1a      	ldrb	r2, [r3, #16]
 8011f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f22:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8011f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f28:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d006      	beq.n	8011f3e <find_volume+0x242>
 8011f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f32:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	d001      	beq.n	8011f3e <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 8011f3a:	230d      	movs	r3, #13
 8011f3c:	e1a4      	b.n	8012288 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011f44:	461a      	mov	r2, r3
 8011f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f48:	fb02 f303 	mul.w	r3, r2, r3
 8011f4c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f50:	7b5a      	ldrb	r2, [r3, #13]
 8011f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f54:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8011f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00a      	beq.n	8011f78 <find_volume+0x27c>
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011f68:	461a      	mov	r2, r3
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011f70:	3b01      	subs	r3, #1
 8011f72:	4013      	ands	r3, r2
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d001      	beq.n	8011f7c <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 8011f78:	230d      	movs	r3, #13
 8011f7a:	e185      	b.n	8012288 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	7c9b      	ldrb	r3, [r3, #18]
 8011f80:	021b      	lsls	r3, r3, #8
 8011f82:	b21a      	sxth	r2, r3
 8011f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f86:	7c5b      	ldrb	r3, [r3, #17]
 8011f88:	b21b      	sxth	r3, r3
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	b21b      	sxth	r3, r3
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f92:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f98:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011f9c:	f003 030f 	and.w	r3, r3, #15
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d004      	beq.n	8011fb0 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 8011fa6:	230d      	movs	r3, #13
 8011fa8:	e16e      	b.n	8012288 <find_volume+0x58c>
 8011faa:	bf00      	nop
 8011fac:	2000586c 	.word	0x2000586c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	7d1b      	ldrb	r3, [r3, #20]
 8011fb4:	021b      	lsls	r3, r3, #8
 8011fb6:	b21a      	sxth	r2, r3
 8011fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fba:	7cdb      	ldrb	r3, [r3, #19]
 8011fbc:	b21b      	sxth	r3, r3
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	b21b      	sxth	r3, r3
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8011fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d112      	bne.n	8011ff2 <find_volume+0x2f6>
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011fd2:	061a      	lsls	r2, r3, #24
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011fda:	041b      	lsls	r3, r3, #16
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fe0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011fe4:	0212      	lsls	r2, r2, #8
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8011ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff4:	7bdb      	ldrb	r3, [r3, #15]
 8011ff6:	021b      	lsls	r3, r3, #8
 8011ff8:	b21a      	sxth	r2, r3
 8011ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffc:	7b9b      	ldrb	r3, [r3, #14]
 8011ffe:	b21b      	sxth	r3, r3
 8012000:	4313      	orrs	r3, r2
 8012002:	b21b      	sxth	r3, r3
 8012004:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8012006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012008:	2b00      	cmp	r3, #0
 801200a:	d101      	bne.n	8012010 <find_volume+0x314>
 801200c:	230d      	movs	r3, #13
 801200e:	e13b      	b.n	8012288 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8012010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012014:	4413      	add	r3, r2
 8012016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012018:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 801201c:	0912      	lsrs	r2, r2, #4
 801201e:	b292      	uxth	r2, r2
 8012020:	4413      	add	r3, r2
 8012022:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012028:	429a      	cmp	r2, r3
 801202a:	d201      	bcs.n	8012030 <find_volume+0x334>
 801202c:	230d      	movs	r3, #13
 801202e:	e12b      	b.n	8012288 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8012030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012038:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801203c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012040:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	2b00      	cmp	r3, #0
 8012046:	d101      	bne.n	801204c <find_volume+0x350>
 8012048:	230d      	movs	r3, #13
 801204a:	e11d      	b.n	8012288 <find_volume+0x58c>
	fmt = FS_FAT12;
 801204c:	2301      	movs	r3, #1
 801204e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8012052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012054:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012058:	4293      	cmp	r3, r2
 801205a:	d902      	bls.n	8012062 <find_volume+0x366>
 801205c:	2302      	movs	r3, #2
 801205e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012068:	4293      	cmp	r3, r2
 801206a:	d902      	bls.n	8012072 <find_volume+0x376>
 801206c:	2303      	movs	r3, #3
 801206e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	1c9a      	adds	r2, r3, #2
 8012076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012078:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012080:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8012084:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012088:	441a      	add	r2, r3
 801208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8012090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012094:	441a      	add	r2, r3
 8012096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012098:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 801209c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120a0:	2b03      	cmp	r3, #3
 80120a2:	d121      	bne.n	80120e8 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d001      	beq.n	80120b2 <find_volume+0x3b6>
 80120ae:	230d      	movs	r3, #13
 80120b0:	e0ea      	b.n	8012288 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80120b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80120b8:	061a      	lsls	r2, r3, #24
 80120ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80120c0:	041b      	lsls	r3, r3, #16
 80120c2:	4313      	orrs	r3, r2
 80120c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80120ca:	0212      	lsls	r2, r2, #8
 80120cc:	4313      	orrs	r3, r2
 80120ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120d0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80120d4:	431a      	orrs	r2, r3
 80120d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	647b      	str	r3, [r7, #68]	; 0x44
 80120e6:	e025      	b.n	8012134 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80120e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d101      	bne.n	80120f6 <find_volume+0x3fa>
 80120f2:	230d      	movs	r3, #13
 80120f4:	e0c8      	b.n	8012288 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80120f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80120fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120fe:	441a      	add	r2, r3
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012106:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801210a:	2b02      	cmp	r3, #2
 801210c:	d104      	bne.n	8012118 <find_volume+0x41c>
 801210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012110:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	e00c      	b.n	8012132 <find_volume+0x436>
 8012118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801211e:	4613      	mov	r3, r2
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	4413      	add	r3, r2
 8012124:	085a      	lsrs	r2, r3, #1
 8012126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012128:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8012132:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8012134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012136:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801213c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012140:	0a5b      	lsrs	r3, r3, #9
 8012142:	429a      	cmp	r2, r3
 8012144:	d201      	bcs.n	801214a <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 8012146:	230d      	movs	r3, #13
 8012148:	e09e      	b.n	8012288 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214c:	f04f 32ff 	mov.w	r2, #4294967295
 8012150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8012154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012156:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8012160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012162:	2280      	movs	r2, #128	; 0x80
 8012164:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8012168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801216c:	2b03      	cmp	r3, #3
 801216e:	d177      	bne.n	8012260 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8012170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012172:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012176:	021b      	lsls	r3, r3, #8
 8012178:	b21a      	sxth	r2, r3
 801217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012180:	b21b      	sxth	r3, r3
 8012182:	4313      	orrs	r3, r2
 8012184:	b21b      	sxth	r3, r3
 8012186:	2b01      	cmp	r3, #1
 8012188:	d16a      	bne.n	8012260 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 801218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801218c:	3301      	adds	r3, #1
 801218e:	4619      	mov	r1, r3
 8012190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012192:	f7fe fc68 	bl	8010a66 <move_window>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d161      	bne.n	8012260 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 801219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219e:	2200      	movs	r2, #0
 80121a0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80121a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80121aa:	021b      	lsls	r3, r3, #8
 80121ac:	b21a      	sxth	r2, r3
 80121ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80121b4:	b21b      	sxth	r3, r3
 80121b6:	4313      	orrs	r3, r2
 80121b8:	b21b      	sxth	r3, r3
 80121ba:	4a35      	ldr	r2, [pc, #212]	; (8012290 <find_volume+0x594>)
 80121bc:	4293      	cmp	r3, r2
 80121be:	d14f      	bne.n	8012260 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80121c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c2:	78db      	ldrb	r3, [r3, #3]
 80121c4:	061a      	lsls	r2, r3, #24
 80121c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c8:	789b      	ldrb	r3, [r3, #2]
 80121ca:	041b      	lsls	r3, r3, #16
 80121cc:	4313      	orrs	r3, r2
 80121ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121d0:	7852      	ldrb	r2, [r2, #1]
 80121d2:	0212      	lsls	r2, r2, #8
 80121d4:	4313      	orrs	r3, r2
 80121d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121d8:	7812      	ldrb	r2, [r2, #0]
 80121da:	4313      	orrs	r3, r2
 80121dc:	4a2d      	ldr	r2, [pc, #180]	; (8012294 <find_volume+0x598>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d13e      	bne.n	8012260 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80121e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80121e8:	061a      	lsls	r2, r3, #24
 80121ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ec:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80121f0:	041b      	lsls	r3, r3, #16
 80121f2:	4313      	orrs	r3, r2
 80121f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121f6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80121fa:	0212      	lsls	r2, r2, #8
 80121fc:	4313      	orrs	r3, r2
 80121fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012200:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8012204:	4313      	orrs	r3, r2
 8012206:	4a24      	ldr	r2, [pc, #144]	; (8012298 <find_volume+0x59c>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d129      	bne.n	8012260 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 801220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8012212:	061a      	lsls	r2, r3, #24
 8012214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012216:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801221a:	041b      	lsls	r3, r3, #16
 801221c:	4313      	orrs	r3, r2
 801221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012220:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8012224:	0212      	lsls	r2, r2, #8
 8012226:	4313      	orrs	r3, r2
 8012228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801222a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 801222e:	431a      	orrs	r2, r3
 8012230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8012236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012238:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 801223c:	061a      	lsls	r2, r3, #24
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8012244:	041b      	lsls	r3, r3, #16
 8012246:	4313      	orrs	r3, r2
 8012248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801224a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 801224e:	0212      	lsls	r2, r2, #8
 8012250:	4313      	orrs	r3, r2
 8012252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012254:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8012258:	431a      	orrs	r2, r3
 801225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8012260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012262:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012266:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 801226a:	4b0c      	ldr	r3, [pc, #48]	; (801229c <find_volume+0x5a0>)
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	3301      	adds	r3, #1
 8012270:	b29a      	uxth	r2, r3
 8012272:	4b0a      	ldr	r3, [pc, #40]	; (801229c <find_volume+0x5a0>)
 8012274:	801a      	strh	r2, [r3, #0]
 8012276:	4b09      	ldr	r3, [pc, #36]	; (801229c <find_volume+0x5a0>)
 8012278:	881a      	ldrh	r2, [r3, #0]
 801227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8012280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012282:	f7fe fb7d 	bl	8010980 <clear_lock>
#endif

	return FR_OK;
 8012286:	2300      	movs	r3, #0
}
 8012288:	4618      	mov	r0, r3
 801228a:	3758      	adds	r7, #88	; 0x58
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	ffffaa55 	.word	0xffffaa55
 8012294:	41615252 	.word	0x41615252
 8012298:	61417272 	.word	0x61417272
 801229c:	20005870 	.word	0x20005870

080122a0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d022      	beq.n	80122f8 <validate+0x58>
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d01d      	beq.n	80122f8 <validate+0x58>
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d016      	beq.n	80122f8 <validate+0x58>
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122d0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80122da:	429a      	cmp	r2, r3
 80122dc:	d10c      	bne.n	80122f8 <validate+0x58>
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fe f87b 	bl	80103e4 <disk_status>
 80122ee:	4603      	mov	r3, r0
 80122f0:	f003 0301 	and.w	r3, r3, #1
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <validate+0x5c>
		return FR_INVALID_OBJECT;
 80122f8:	2309      	movs	r3, #9
 80122fa:	e00b      	b.n	8012314 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012302:	4618      	mov	r0, r3
 8012304:	f7fe f984 	bl	8010610 <lock_fs>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d101      	bne.n	8012312 <validate+0x72>
 801230e:	230f      	movs	r3, #15
 8012310:	e000      	b.n	8012314 <validate+0x74>

	return FR_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b088      	sub	sp, #32
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	4613      	mov	r3, r2
 8012328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801232e:	f107 0310 	add.w	r3, r7, #16
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff fc34 	bl	8011ba0 <get_ldnumber>
 8012338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	2b00      	cmp	r3, #0
 801233e:	da01      	bge.n	8012344 <f_mount+0x28>
 8012340:	230b      	movs	r3, #11
 8012342:	e04c      	b.n	80123de <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012344:	4a28      	ldr	r2, [pc, #160]	; (80123e8 <f_mount+0xcc>)
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801234c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d011      	beq.n	8012378 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8012354:	69b8      	ldr	r0, [r7, #24]
 8012356:	f7fe fb13 	bl	8010980 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801235a:	69bb      	ldr	r3, [r7, #24]
 801235c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012360:	4618      	mov	r0, r3
 8012362:	f001 f917 	bl	8013594 <ff_del_syncobj>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <f_mount+0x54>
 801236c:	2302      	movs	r3, #2
 801236e:	e036      	b.n	80123de <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	2200      	movs	r2, #0
 8012374:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d011      	beq.n	80123a2 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	b2da      	uxtb	r2, r3
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8012390:	4619      	mov	r1, r3
 8012392:	4610      	mov	r0, r2
 8012394:	f001 f8de 	bl	8013554 <ff_cre_syncobj>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d101      	bne.n	80123a2 <f_mount+0x86>
 801239e:	2302      	movs	r3, #2
 80123a0:	e01d      	b.n	80123de <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	4910      	ldr	r1, [pc, #64]	; (80123e8 <f_mount+0xcc>)
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d002      	beq.n	80123b8 <f_mount+0x9c>
 80123b2:	79fb      	ldrb	r3, [r7, #7]
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d001      	beq.n	80123bc <f_mount+0xa0>
 80123b8:	2300      	movs	r3, #0
 80123ba:	e010      	b.n	80123de <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80123bc:	f107 0108 	add.w	r1, r7, #8
 80123c0:	f107 030c 	add.w	r3, r7, #12
 80123c4:	2200      	movs	r2, #0
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff fc98 	bl	8011cfc <find_volume>
 80123cc:	4603      	mov	r3, r0
 80123ce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	7dfa      	ldrb	r2, [r7, #23]
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe f929 	bl	801062e <unlock_fs>
 80123dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	2000586c 	.word	0x2000586c

080123ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	f107 030c 	add.w	r3, r7, #12
 80123f8:	6018      	str	r0, [r3, #0]
 80123fa:	f107 0308 	add.w	r3, r7, #8
 80123fe:	6019      	str	r1, [r3, #0]
 8012400:	1dfb      	adds	r3, r7, #7
 8012402:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8012404:	f107 030c 	add.w	r3, r7, #12
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d101      	bne.n	8012412 <f_open+0x26>
 801240e:	2309      	movs	r3, #9
 8012410:	e1fc      	b.n	801280c <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 8012412:	f107 030c 	add.w	r3, r7, #12
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	2200      	movs	r2, #0
 801241a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 801241e:	1dfb      	adds	r3, r7, #7
 8012420:	1dfa      	adds	r2, r7, #7
 8012422:	7812      	ldrb	r2, [r2, #0]
 8012424:	f002 021f 	and.w	r2, r2, #31
 8012428:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801242a:	1dfb      	adds	r3, r7, #7
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	f023 0301 	bic.w	r3, r3, #1
 8012432:	b2da      	uxtb	r2, r3
 8012434:	f107 0108 	add.w	r1, r7, #8
 8012438:	f107 0320 	add.w	r3, r7, #32
 801243c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff fc5b 	bl	8011cfc <find_volume>
 8012446:	4603      	mov	r3, r0
 8012448:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 801244c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012450:	2b00      	cmp	r3, #0
 8012452:	f040 81cf 	bne.w	80127f4 <f_open+0x408>
		INIT_BUF(dj);
 8012456:	f107 0320 	add.w	r3, r7, #32
 801245a:	f107 0214 	add.w	r2, r7, #20
 801245e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8012462:	f107 0308 	add.w	r3, r7, #8
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	f107 0320 	add.w	r3, r7, #32
 801246c:	4611      	mov	r1, r2
 801246e:	4618      	mov	r0, r3
 8012470:	f7ff fb28 	bl	8011ac4 <follow_path>
 8012474:	4603      	mov	r3, r0
 8012476:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 801247a:	f107 0320 	add.w	r3, r7, #32
 801247e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012482:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012486:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801248a:	2b00      	cmp	r3, #0
 801248c:	d11a      	bne.n	80124c4 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 801248e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012492:	2b00      	cmp	r3, #0
 8012494:	d103      	bne.n	801249e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8012496:	2306      	movs	r3, #6
 8012498:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801249c:	e012      	b.n	80124c4 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801249e:	1dfb      	adds	r3, r7, #7
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	f023 0301 	bic.w	r3, r3, #1
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bf14      	ite	ne
 80124aa:	2301      	movne	r3, #1
 80124ac:	2300      	moveq	r3, #0
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	461a      	mov	r2, r3
 80124b2:	f107 0320 	add.w	r3, r7, #32
 80124b6:	4611      	mov	r1, r2
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fe f8d7 	bl	801066c <chk_lock>
 80124be:	4603      	mov	r3, r0
 80124c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80124c4:	1dfb      	adds	r3, r7, #7
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	f003 031c 	and.w	r3, r3, #28
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f000 80cc 	beq.w	801266a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80124d2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d01f      	beq.n	801251a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80124da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80124de:	2b04      	cmp	r3, #4
 80124e0:	d10e      	bne.n	8012500 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80124e2:	f7fe f92f 	bl	8010744 <enq_lock>
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d006      	beq.n	80124fa <f_open+0x10e>
 80124ec:	f107 0320 	add.w	r3, r7, #32
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ff f97d 	bl	80117f0 <dir_register>
 80124f6:	4603      	mov	r3, r0
 80124f8:	e000      	b.n	80124fc <f_open+0x110>
 80124fa:	2312      	movs	r3, #18
 80124fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012500:	1dfb      	adds	r3, r7, #7
 8012502:	1dfa      	adds	r2, r7, #7
 8012504:	7812      	ldrb	r2, [r2, #0]
 8012506:	f042 0208 	orr.w	r2, r2, #8
 801250a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 801250c:	f107 0320 	add.w	r3, r7, #32
 8012510:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012514:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8012518:	e014      	b.n	8012544 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801251a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801251e:	330b      	adds	r3, #11
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	f003 0311 	and.w	r3, r3, #17
 8012526:	2b00      	cmp	r3, #0
 8012528:	d003      	beq.n	8012532 <f_open+0x146>
					res = FR_DENIED;
 801252a:	2307      	movs	r3, #7
 801252c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012530:	e008      	b.n	8012544 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8012532:	1dfb      	adds	r3, r7, #7
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	f003 0304 	and.w	r3, r3, #4
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <f_open+0x158>
						res = FR_EXIST;
 801253e:	2308      	movs	r3, #8
 8012540:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012544:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012548:	2b00      	cmp	r3, #0
 801254a:	f040 80af 	bne.w	80126ac <f_open+0x2c0>
 801254e:	1dfb      	adds	r3, r7, #7
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	f003 0308 	and.w	r3, r3, #8
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 80a8 	beq.w	80126ac <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 801255c:	f7fa feaa 	bl	800d2b4 <get_fattime>
 8012560:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8012564:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012568:	330e      	adds	r3, #14
 801256a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801256e:	b2d2      	uxtb	r2, r2
 8012570:	701a      	strb	r2, [r3, #0]
 8012572:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012576:	b29b      	uxth	r3, r3
 8012578:	0a1b      	lsrs	r3, r3, #8
 801257a:	b29a      	uxth	r2, r3
 801257c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012580:	330f      	adds	r3, #15
 8012582:	b2d2      	uxtb	r2, r2
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801258a:	0c1a      	lsrs	r2, r3, #16
 801258c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012590:	3310      	adds	r3, #16
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	701a      	strb	r2, [r3, #0]
 8012596:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801259a:	0e1a      	lsrs	r2, r3, #24
 801259c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125a0:	3311      	adds	r3, #17
 80125a2:	b2d2      	uxtb	r2, r2
 80125a4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80125a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125aa:	330b      	adds	r3, #11
 80125ac:	2200      	movs	r2, #0
 80125ae:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80125b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125b4:	331c      	adds	r3, #28
 80125b6:	2200      	movs	r2, #0
 80125b8:	701a      	strb	r2, [r3, #0]
 80125ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125be:	331d      	adds	r3, #29
 80125c0:	2200      	movs	r2, #0
 80125c2:	701a      	strb	r2, [r3, #0]
 80125c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125c8:	331e      	adds	r3, #30
 80125ca:	2200      	movs	r2, #0
 80125cc:	701a      	strb	r2, [r3, #0]
 80125ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125d2:	331f      	adds	r3, #31
 80125d4:	2200      	movs	r2, #0
 80125d6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80125d8:	f107 0320 	add.w	r3, r7, #32
 80125dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80125e0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff f802 	bl	80115ee <ld_clust>
 80125ea:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80125ee:	2100      	movs	r1, #0
 80125f0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80125f4:	f7ff f828 	bl	8011648 <st_clust>
				dj.fs->wflag = 1;
 80125f8:	f107 0320 	add.w	r3, r7, #32
 80125fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012600:	2201      	movs	r2, #1
 8012602:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8012606:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801260a:	2b00      	cmp	r3, #0
 801260c:	d04e      	beq.n	80126ac <f_open+0x2c0>
					dw = dj.fs->winsect;
 801260e:	f107 0320 	add.w	r3, r7, #32
 8012612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012616:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 801261a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 801261e:	f107 0320 	add.w	r3, r7, #32
 8012622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012626:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe fcdf 	bl	8010fee <remove_chain>
 8012630:	4603      	mov	r3, r0
 8012632:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8012636:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801263a:	2b00      	cmp	r3, #0
 801263c:	d136      	bne.n	80126ac <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801263e:	f107 0320 	add.w	r3, r7, #32
 8012642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012646:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801264a:	3a01      	subs	r2, #1
 801264c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8012650:	f107 0320 	add.w	r3, r7, #32
 8012654:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012658:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 801265c:	4618      	mov	r0, r3
 801265e:	f7fe fa02 	bl	8010a66 <move_window>
 8012662:	4603      	mov	r3, r0
 8012664:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012668:	e020      	b.n	80126ac <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801266a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801266e:	2b00      	cmp	r3, #0
 8012670:	d11c      	bne.n	80126ac <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8012672:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012676:	330b      	adds	r3, #11
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	f003 0310 	and.w	r3, r3, #16
 801267e:	2b00      	cmp	r3, #0
 8012680:	d003      	beq.n	801268a <f_open+0x29e>
					res = FR_NO_FILE;
 8012682:	2304      	movs	r3, #4
 8012684:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012688:	e010      	b.n	80126ac <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801268a:	1dfb      	adds	r3, r7, #7
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	f003 0302 	and.w	r3, r3, #2
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00a      	beq.n	80126ac <f_open+0x2c0>
 8012696:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801269a:	330b      	adds	r3, #11
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	f003 0301 	and.w	r3, r3, #1
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d002      	beq.n	80126ac <f_open+0x2c0>
						res = FR_DENIED;
 80126a6:	2307      	movs	r3, #7
 80126a8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80126ac:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d13d      	bne.n	8012730 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80126b4:	1dfb      	adds	r3, r7, #7
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	f003 0308 	and.w	r3, r3, #8
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d005      	beq.n	80126cc <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80126c0:	1dfb      	adds	r3, r7, #7
 80126c2:	1dfa      	adds	r2, r7, #7
 80126c4:	7812      	ldrb	r2, [r2, #0]
 80126c6:	f042 0220 	orr.w	r2, r2, #32
 80126ca:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80126cc:	f107 0320 	add.w	r3, r7, #32
 80126d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126d4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80126d8:	f107 030c 	add.w	r3, r7, #12
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80126e2:	f107 030c 	add.w	r3, r7, #12
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80126ec:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80126f0:	1dfb      	adds	r3, r7, #7
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	f023 0301 	bic.w	r3, r3, #1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	bf14      	ite	ne
 80126fc:	2301      	movne	r3, #1
 80126fe:	2300      	moveq	r3, #0
 8012700:	b2db      	uxtb	r3, r3
 8012702:	461a      	mov	r2, r3
 8012704:	f107 0320 	add.w	r3, r7, #32
 8012708:	4611      	mov	r1, r2
 801270a:	4618      	mov	r0, r3
 801270c:	f7fe f83e 	bl	801078c <inc_lock>
 8012710:	4602      	mov	r2, r0
 8012712:	f107 030c 	add.w	r3, r7, #12
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801271c:	f107 030c 	add.w	r3, r7, #12
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <f_open+0x344>
 801272a:	2302      	movs	r3, #2
 801272c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8012730:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012734:	2b00      	cmp	r3, #0
 8012736:	d15d      	bne.n	80127f4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8012738:	f107 030c 	add.w	r3, r7, #12
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	1dfa      	adds	r2, r7, #7
 8012740:	7812      	ldrb	r2, [r2, #0]
 8012742:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8012746:	f107 030c 	add.w	r3, r7, #12
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2200      	movs	r2, #0
 801274e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8012752:	f107 0320 	add.w	r3, r7, #32
 8012756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801275a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe ff45 	bl	80115ee <ld_clust>
 8012764:	4602      	mov	r2, r0
 8012766:	f107 030c 	add.w	r3, r7, #12
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8012770:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012774:	331f      	adds	r3, #31
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	061a      	lsls	r2, r3, #24
 801277a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801277e:	331e      	adds	r3, #30
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	041b      	lsls	r3, r3, #16
 8012784:	4313      	orrs	r3, r2
 8012786:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801278a:	321d      	adds	r2, #29
 801278c:	7812      	ldrb	r2, [r2, #0]
 801278e:	0212      	lsls	r2, r2, #8
 8012790:	4313      	orrs	r3, r2
 8012792:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012796:	321c      	adds	r2, #28
 8012798:	7812      	ldrb	r2, [r2, #0]
 801279a:	431a      	orrs	r2, r3
 801279c:	f107 030c 	add.w	r3, r7, #12
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80127a6:	f107 030c 	add.w	r3, r7, #12
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2200      	movs	r2, #0
 80127ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80127b2:	f107 030c 	add.w	r3, r7, #12
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	2200      	movs	r2, #0
 80127ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80127be:	f107 030c 	add.w	r3, r7, #12
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2200      	movs	r2, #0
 80127c6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80127ca:	f107 0320 	add.w	r3, r7, #32
 80127ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80127d2:	f107 030c 	add.w	r3, r7, #12
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80127dc:	f107 030c 	add.w	r3, r7, #12
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80127e6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80127ea:	f107 030c 	add.w	r3, r7, #12
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80127f4:	f107 0320 	add.w	r3, r7, #32
 80127f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80127fc:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8012800:	4611      	mov	r1, r2
 8012802:	4618      	mov	r0, r3
 8012804:	f7fd ff13 	bl	801062e <unlock_fs>
 8012808:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 801280c:	4618      	mov	r0, r3
 801280e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b08a      	sub	sp, #40	; 0x28
 801281a:	af00      	add	r7, sp, #0
 801281c:	60f8      	str	r0, [r7, #12]
 801281e:	60b9      	str	r1, [r7, #8]
 8012820:	607a      	str	r2, [r7, #4]
 8012822:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 801282e:	68f8      	ldr	r0, [r7, #12]
 8012830:	f7ff fd36 	bl	80122a0 <validate>
 8012834:	4603      	mov	r3, r0
 8012836:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8012838:	7dfb      	ldrb	r3, [r7, #23]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d009      	beq.n	8012852 <f_write+0x3c>
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012844:	7dfa      	ldrb	r2, [r7, #23]
 8012846:	4611      	mov	r1, r2
 8012848:	4618      	mov	r0, r3
 801284a:	f7fd fef0 	bl	801062e <unlock_fs>
 801284e:	7dfb      	ldrb	r3, [r7, #23]
 8012850:	e1d4      	b.n	8012bfc <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00d      	beq.n	8012878 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012868:	4619      	mov	r1, r3
 801286a:	4610      	mov	r0, r2
 801286c:	f7fd fedf 	bl	801062e <unlock_fs>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012876:	e1c1      	b.n	8012bfc <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801287e:	f003 0302 	and.w	r3, r3, #2
 8012882:	2b00      	cmp	r3, #0
 8012884:	d108      	bne.n	8012898 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801288c:	2107      	movs	r1, #7
 801288e:	4618      	mov	r0, r3
 8012890:	f7fd fecd 	bl	801062e <unlock_fs>
 8012894:	2307      	movs	r3, #7
 8012896:	e1b1      	b.n	8012bfc <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	441a      	add	r2, r3
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80128a8:	429a      	cmp	r2, r3
 80128aa:	f080 8182 	bcs.w	8012bb2 <f_write+0x39c>
 80128ae:	2300      	movs	r3, #0
 80128b0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80128b2:	e17e      	b.n	8012bb2 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80128ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f040 813e 	bne.w	8012b40 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80128ca:	0a5b      	lsrs	r3, r3, #9
 80128cc:	b2da      	uxtb	r2, r3
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80128d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80128d8:	3b01      	subs	r3, #1
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	4013      	ands	r3, r2
 80128de:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80128e0:	7dbb      	ldrb	r3, [r7, #22]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d15f      	bne.n	80129a6 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10f      	bne.n	8012910 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80128f6:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d121      	bne.n	8012942 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012904:	2100      	movs	r1, #0
 8012906:	4618      	mov	r0, r3
 8012908:	f7fe fbcb 	bl	80110a2 <create_chain>
 801290c:	6278      	str	r0, [r7, #36]	; 0x24
 801290e:	e018      	b.n	8012942 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012916:	2b00      	cmp	r3, #0
 8012918:	d008      	beq.n	801292c <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012920:	4619      	mov	r1, r3
 8012922:	68f8      	ldr	r0, [r7, #12]
 8012924:	f7fe fc5a 	bl	80111dc <clmt_clust>
 8012928:	6278      	str	r0, [r7, #36]	; 0x24
 801292a:	e00a      	b.n	8012942 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012938:	4619      	mov	r1, r3
 801293a:	4610      	mov	r0, r2
 801293c:	f7fe fbb1 	bl	80110a2 <create_chain>
 8012940:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	f000 8139 	beq.w	8012bbc <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294c:	2b01      	cmp	r3, #1
 801294e:	d10c      	bne.n	801296a <f_write+0x154>
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2202      	movs	r2, #2
 8012954:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801295e:	2102      	movs	r1, #2
 8012960:	4618      	mov	r0, r3
 8012962:	f7fd fe64 	bl	801062e <unlock_fs>
 8012966:	2302      	movs	r3, #2
 8012968:	e148      	b.n	8012bfc <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012970:	d10c      	bne.n	801298c <f_write+0x176>
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2201      	movs	r2, #1
 8012976:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012980:	2101      	movs	r1, #1
 8012982:	4618      	mov	r0, r3
 8012984:	f7fd fe53 	bl	801062e <unlock_fs>
 8012988:	2301      	movs	r3, #1
 801298a:	e137      	b.n	8012bfc <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801299a:	2b00      	cmp	r3, #0
 801299c:	d103      	bne.n	80129a6 <f_write+0x190>
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80129ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d024      	beq.n	80129fe <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80129ba:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80129be:	68f9      	ldr	r1, [r7, #12]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80129c6:	2301      	movs	r3, #1
 80129c8:	f7fd fd6c 	bl	80104a4 <disk_write>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00c      	beq.n	80129ec <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2201      	movs	r2, #1
 80129d6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80129e0:	2101      	movs	r1, #1
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fd fe23 	bl	801062e <unlock_fs>
 80129e8:	2301      	movs	r3, #1
 80129ea:	e107      	b.n	8012bfc <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80129f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129f6:	b2da      	uxtb	r2, r3
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	f7fe f905 	bl	8010c1c <clust2sect>
 8012a12:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10c      	bne.n	8012a34 <f_write+0x21e>
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a28:	2102      	movs	r1, #2
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fd fdff 	bl	801062e <unlock_fs>
 8012a30:	2302      	movs	r3, #2
 8012a32:	e0e3      	b.n	8012bfc <f_write+0x3e6>
			sect += csect;
 8012a34:	7dbb      	ldrb	r3, [r7, #22]
 8012a36:	693a      	ldr	r2, [r7, #16]
 8012a38:	4413      	add	r3, r2
 8012a3a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	0a5b      	lsrs	r3, r3, #9
 8012a40:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d04f      	beq.n	8012ae8 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8012a48:	7dba      	ldrb	r2, [r7, #22]
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012a54:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d908      	bls.n	8012a6e <f_write+0x258>
					cc = fp->fs->csize - csect;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a62:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012a66:	461a      	mov	r2, r3
 8012a68:	7dbb      	ldrb	r3, [r7, #22]
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a74:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	693a      	ldr	r2, [r7, #16]
 8012a7c:	69b9      	ldr	r1, [r7, #24]
 8012a7e:	f7fd fd11 	bl	80104a4 <disk_write>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d00c      	beq.n	8012aa2 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a96:	2101      	movs	r1, #1
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fd fdc8 	bl	801062e <unlock_fs>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e0ac      	b.n	8012bfc <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	69fa      	ldr	r2, [r7, #28]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d916      	bls.n	8012ae0 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8012ab2:	68f8      	ldr	r0, [r7, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	025b      	lsls	r3, r3, #9
 8012ac0:	69ba      	ldr	r2, [r7, #24]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ac8:	4619      	mov	r1, r3
 8012aca:	f7fd fd29 	bl	8010520 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ad8:	b2da      	uxtb	r2, r3
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	025b      	lsls	r3, r3, #9
 8012ae4:	623b      	str	r3, [r7, #32]
				continue;
 8012ae6:	e04e      	b.n	8012b86 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012aee:	693a      	ldr	r2, [r7, #16]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d021      	beq.n	8012b38 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d219      	bcs.n	8012b38 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012b0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012b0e:	68f9      	ldr	r1, [r7, #12]
 8012b10:	2301      	movs	r3, #1
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	f7fd fca6 	bl	8010464 <disk_read>
 8012b18:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00c      	beq.n	8012b38 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2201      	movs	r2, #1
 8012b22:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012b2c:	2101      	movs	r1, #1
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fd fd7d 	bl	801062e <unlock_fs>
 8012b34:	2301      	movs	r3, #1
 8012b36:	e061      	b.n	8012bfc <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	693a      	ldr	r2, [r7, #16]
 8012b3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b4a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012b4e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8012b50:	6a3a      	ldr	r2, [r7, #32]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d901      	bls.n	8012b5c <f_write+0x346>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	4413      	add	r3, r2
 8012b6a:	6a3a      	ldr	r2, [r7, #32]
 8012b6c:	69b9      	ldr	r1, [r7, #24]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7fd fcd6 	bl	8010520 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8012b86:	69ba      	ldr	r2, [r7, #24]
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	61bb      	str	r3, [r7, #24]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	441a      	add	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	6a3b      	ldr	r3, [r7, #32]
 8012ba4:	441a      	add	r2, r3
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	6a3b      	ldr	r3, [r7, #32]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f47f ae7d 	bne.w	80128b4 <f_write+0x9e>
 8012bba:	e000      	b.n	8012bbe <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012bbc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d905      	bls.n	8012bda <f_write+0x3c4>
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012be0:	f043 0320 	orr.w	r3, r3, #32
 8012be4:	b2da      	uxtb	r2, r3
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7fd fd1a 	bl	801062e <unlock_fs>
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3728      	adds	r7, #40	; 0x28
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b086      	sub	sp, #24
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f7ff fb47 	bl	80122a0 <validate>
 8012c12:	4603      	mov	r3, r0
 8012c14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f040 80af 	bne.w	8012d7c <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012c24:	f003 0320 	and.w	r3, r3, #32
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f000 80a7 	beq.w	8012d7c <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d020      	beq.n	8012c7e <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012c42:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012c46:	6879      	ldr	r1, [r7, #4]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012c4e:	2301      	movs	r3, #1
 8012c50:	f7fd fc28 	bl	80104a4 <disk_write>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d008      	beq.n	8012c6c <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012c60:	2101      	movs	r1, #1
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fd fce3 	bl	801062e <unlock_fs>
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e090      	b.n	8012d8e <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c76:	b2da      	uxtb	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	4610      	mov	r0, r2
 8012c8e:	f7fd feea 	bl	8010a66 <move_window>
 8012c92:	4603      	mov	r3, r0
 8012c94:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8012c96:	7dfb      	ldrb	r3, [r7, #23]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d16f      	bne.n	8012d7c <f_sync+0x178>
				dir = fp->dir_ptr;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012ca2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	330b      	adds	r3, #11
 8012ca8:	781a      	ldrb	r2, [r3, #0]
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	330b      	adds	r3, #11
 8012cae:	f042 0220 	orr.w	r2, r2, #32
 8012cb2:	b2d2      	uxtb	r2, r2
 8012cb4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	331c      	adds	r3, #28
 8012cc0:	b2d2      	uxtb	r2, r2
 8012cc2:	701a      	strb	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	0a1b      	lsrs	r3, r3, #8
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	331d      	adds	r3, #29
 8012cd4:	b2d2      	uxtb	r2, r2
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012cde:	0c1a      	lsrs	r2, r3, #16
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	331e      	adds	r3, #30
 8012ce4:	b2d2      	uxtb	r2, r2
 8012ce6:	701a      	strb	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012cee:	0e1a      	lsrs	r2, r3, #24
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	331f      	adds	r3, #31
 8012cf4:	b2d2      	uxtb	r2, r2
 8012cf6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012cfe:	4619      	mov	r1, r3
 8012d00:	6938      	ldr	r0, [r7, #16]
 8012d02:	f7fe fca1 	bl	8011648 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012d06:	f7fa fad5 	bl	800d2b4 <get_fattime>
 8012d0a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	3316      	adds	r3, #22
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	b2d2      	uxtb	r2, r2
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	0a1b      	lsrs	r3, r3, #8
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	3317      	adds	r3, #23
 8012d22:	b2d2      	uxtb	r2, r2
 8012d24:	701a      	strb	r2, [r3, #0]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	0c1a      	lsrs	r2, r3, #16
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	3318      	adds	r3, #24
 8012d2e:	b2d2      	uxtb	r2, r2
 8012d30:	701a      	strb	r2, [r3, #0]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	0e1a      	lsrs	r2, r3, #24
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	3319      	adds	r3, #25
 8012d3a:	b2d2      	uxtb	r2, r2
 8012d3c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	3312      	adds	r3, #18
 8012d42:	2200      	movs	r2, #0
 8012d44:	701a      	strb	r2, [r3, #0]
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	3313      	adds	r3, #19
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012d54:	f023 0320 	bic.w	r3, r3, #32
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d66:	2201      	movs	r2, #1
 8012d68:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fd fea5 	bl	8010ac2 <sync_fs>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d82:	7dfa      	ldrb	r2, [r7, #23]
 8012d84:	4611      	mov	r1, r2
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fd fc51 	bl	801062e <unlock_fs>
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3718      	adds	r7, #24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8012d96:	b580      	push	{r7, lr}
 8012d98:	b084      	sub	sp, #16
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff ff30 	bl	8012c04 <f_sync>
 8012da4:	4603      	mov	r3, r0
 8012da6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d11e      	bne.n	8012dec <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff fa76 	bl	80122a0 <validate>
 8012db4:	4603      	mov	r3, r0
 8012db6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012db8:	7bfb      	ldrb	r3, [r7, #15]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d116      	bne.n	8012dec <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012dc4:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fd fd93 	bl	80108f8 <dec_lock>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d103      	bne.n	8012de4 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012de4:	2100      	movs	r1, #0
 8012de6:	68b8      	ldr	r0, [r7, #8]
 8012de8:	f7fd fc21 	bl	801062e <unlock_fs>
#endif
		}
	}
	return res;
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b088      	sub	sp, #32
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
 8012dfe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d101      	bne.n	8012e0a <f_opendir+0x14>
 8012e06:	2309      	movs	r3, #9
 8012e08:	e079      	b.n	8012efe <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8012e0a:	4639      	mov	r1, r7
 8012e0c:	f107 0318 	add.w	r3, r7, #24
 8012e10:	2200      	movs	r2, #0
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe ff72 	bl	8011cfc <find_volume>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8012e1c:	7ffb      	ldrb	r3, [r7, #31]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d15f      	bne.n	8012ee2 <f_opendir+0xec>
		dp->fs = fs;
 8012e22:	69ba      	ldr	r2, [r7, #24]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f107 020c 	add.w	r2, r7, #12
 8012e30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	4619      	mov	r1, r3
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7fe fe43 	bl	8011ac4 <follow_path>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8012e42:	7ffb      	ldrb	r3, [r7, #31]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d147      	bne.n	8012ed8 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d017      	beq.n	8012e82 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e58:	330b      	adds	r3, #11
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	f003 0310 	and.w	r3, r3, #16
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00c      	beq.n	8012e7e <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8012e64:	69ba      	ldr	r2, [r7, #24]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4610      	mov	r0, r2
 8012e70:	f7fe fbbd 	bl	80115ee <ld_clust>
 8012e74:	4602      	mov	r2, r0
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8012e7c:	e001      	b.n	8012e82 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8012e7e:	2305      	movs	r3, #5
 8012e80:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8012e82:	7ffb      	ldrb	r3, [r7, #31]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d127      	bne.n	8012ed8 <f_opendir+0xe2>
				dp->id = fs->id;
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012e94:	2100      	movs	r1, #0
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7fe f9d4 	bl	8011244 <dir_sdi>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8012ea0:	7ffb      	ldrb	r3, [r7, #31]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d118      	bne.n	8012ed8 <f_opendir+0xe2>
					if (dp->sclust) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d00f      	beq.n	8012ed0 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7fd fc6a 	bl	801078c <inc_lock>
 8012eb8:	4602      	mov	r2, r0
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d106      	bne.n	8012ed8 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8012eca:	2312      	movs	r3, #18
 8012ecc:	77fb      	strb	r3, [r7, #31]
 8012ece:	e003      	b.n	8012ed8 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012ed8:	7ffb      	ldrb	r3, [r7, #31]
 8012eda:	2b04      	cmp	r3, #4
 8012edc:	d101      	bne.n	8012ee2 <f_opendir+0xec>
 8012ede:	2305      	movs	r3, #5
 8012ee0:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8012ee2:	7ffb      	ldrb	r3, [r7, #31]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d003      	beq.n	8012ef0 <f_opendir+0xfa>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2200      	movs	r2, #0
 8012eec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	7ffa      	ldrb	r2, [r7, #31]
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fd fb99 	bl	801062e <unlock_fs>
 8012efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3720      	adds	r7, #32
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}

08012f06 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012f06:	b580      	push	{r7, lr}
 8012f08:	b084      	sub	sp, #16
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7ff f9c6 	bl	80122a0 <validate>
 8012f14:	4603      	mov	r3, r0
 8012f16:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d11b      	bne.n	8012f56 <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f24:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d007      	beq.n	8012f40 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fd fcde 	bl	80108f8 <dec_lock>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8012f40:	7bfb      	ldrb	r3, [r7, #15]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d103      	bne.n	8012f4e <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012f4e:	2100      	movs	r1, #0
 8012f50:	68b8      	ldr	r0, [r7, #8]
 8012f52:	f7fd fb6c 	bl	801062e <unlock_fs>
#endif
	}
	return res;
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b086      	sub	sp, #24
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f7ff f998 	bl	80122a0 <validate>
 8012f70:	4603      	mov	r3, r0
 8012f72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012f74:	7dfb      	ldrb	r3, [r7, #23]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d133      	bne.n	8012fe2 <f_readdir+0x82>
		if (!fno) {
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d106      	bne.n	8012f8e <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012f80:	2100      	movs	r1, #0
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7fe f95e 	bl	8011244 <dir_sdi>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	75fb      	strb	r3, [r7, #23]
 8012f8c:	e029      	b.n	8012fe2 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f107 0208 	add.w	r2, r7, #8
 8012f94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8012f98:	2100      	movs	r1, #0
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7fe fbc9 	bl	8011732 <dir_read>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8012fa4:	7dfb      	ldrb	r3, [r7, #23]
 8012fa6:	2b04      	cmp	r3, #4
 8012fa8:	d105      	bne.n	8012fb6 <f_readdir+0x56>
				dp->sect = 0;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d112      	bne.n	8012fe2 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012fbc:	6839      	ldr	r1, [r7, #0]
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7fe fc4f 	bl	8011862 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7fe f9d0 	bl	801136c <dir_next>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8012fd0:	7dfb      	ldrb	r3, [r7, #23]
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	d105      	bne.n	8012fe2 <f_readdir+0x82>
					dp->sect = 0;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012fe8:	7dfa      	ldrb	r2, [r7, #23]
 8012fea:	4611      	mov	r1, r2
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7fd fb1e 	bl	801062e <unlock_fs>
 8012ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3718      	adds	r7, #24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8013002:	af00      	add	r7, sp, #0
 8013004:	1d3b      	adds	r3, r7, #4
 8013006:	6018      	str	r0, [r3, #0]
 8013008:	463b      	mov	r3, r7
 801300a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 801300c:	1d39      	adds	r1, r7, #4
 801300e:	f107 0314 	add.w	r3, r7, #20
 8013012:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013016:	2200      	movs	r2, #0
 8013018:	4618      	mov	r0, r3
 801301a:	f7fe fe6f 	bl	8011cfc <find_volume>
 801301e:	4603      	mov	r3, r0
 8013020:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8013024:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8013028:	2b00      	cmp	r3, #0
 801302a:	d129      	bne.n	8013080 <f_stat+0x84>
		INIT_BUF(dj);
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	f107 0208 	add.w	r2, r7, #8
 8013034:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8013038:	1d3b      	adds	r3, r7, #4
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	f107 0314 	add.w	r3, r7, #20
 8013040:	4611      	mov	r1, r2
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe fd3e 	bl	8011ac4 <follow_path>
 8013048:	4603      	mov	r3, r0
 801304a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 801304e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8013052:	2b00      	cmp	r3, #0
 8013054:	d114      	bne.n	8013080 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 8013056:	f107 0314 	add.w	r3, r7, #20
 801305a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00b      	beq.n	801307a <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 8013062:	463b      	mov	r3, r7
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00a      	beq.n	8013080 <f_stat+0x84>
 801306a:	463b      	mov	r3, r7
 801306c:	f107 0214 	add.w	r2, r7, #20
 8013070:	6819      	ldr	r1, [r3, #0]
 8013072:	4610      	mov	r0, r2
 8013074:	f7fe fbf5 	bl	8011862 <get_fileinfo>
 8013078:	e002      	b.n	8013080 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 801307a:	2306      	movs	r3, #6
 801307c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8013080:	f107 0314 	add.w	r3, r7, #20
 8013084:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013088:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f7fd facd 	bl	801062e <unlock_fs>
 8013094:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8013098:	4618      	mov	r0, r3
 801309a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}

080130a2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b08e      	sub	sp, #56	; 0x38
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	60f8      	str	r0, [r7, #12]
 80130aa:	60b9      	str	r1, [r7, #8]
 80130ac:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80130ae:	f107 030c 	add.w	r3, r7, #12
 80130b2:	2200      	movs	r2, #0
 80130b4:	4619      	mov	r1, r3
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f7fe fe20 	bl	8011cfc <find_volume>
 80130bc:	4603      	mov	r3, r0
 80130be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80130c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f040 80af 	bne.w	8013230 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80130de:	3b02      	subs	r3, #2
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d805      	bhi.n	80130f0 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	e09f      	b.n	8013230 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80130f0:	69fb      	ldr	r3, [r7, #28]
 80130f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80130f6:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80130fc:	7efb      	ldrb	r3, [r7, #27]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d125      	bne.n	801314e <f_getfree+0xac>
				clst = 2;
 8013102:	2302      	movs	r3, #2
 8013104:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8013106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013108:	69f8      	ldr	r0, [r7, #28]
 801310a:	f7fd fda8 	bl	8010c5e <get_fat>
 801310e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013116:	d103      	bne.n	8013120 <f_getfree+0x7e>
 8013118:	2301      	movs	r3, #1
 801311a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801311e:	e077      	b.n	8013210 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d103      	bne.n	801312e <f_getfree+0x8c>
 8013126:	2302      	movs	r3, #2
 8013128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801312c:	e070      	b.n	8013210 <f_getfree+0x16e>
					if (stat == 0) n++;
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d102      	bne.n	801313a <f_getfree+0x98>
 8013134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013136:	3301      	adds	r3, #1
 8013138:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 801313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313c:	3301      	adds	r3, #1
 801313e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013148:	429a      	cmp	r2, r3
 801314a:	d3dc      	bcc.n	8013106 <f_getfree+0x64>
 801314c:	e060      	b.n	8013210 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013154:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801315c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 801315e:	2300      	movs	r3, #0
 8013160:	627b      	str	r3, [r7, #36]	; 0x24
 8013162:	2300      	movs	r3, #0
 8013164:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8013166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013168:	2b00      	cmp	r3, #0
 801316a:	d112      	bne.n	8013192 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	62ba      	str	r2, [r7, #40]	; 0x28
 8013172:	4619      	mov	r1, r3
 8013174:	69f8      	ldr	r0, [r7, #28]
 8013176:	f7fd fc76 	bl	8010a66 <move_window>
 801317a:	4603      	mov	r3, r0
 801317c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8013180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013184:	2b00      	cmp	r3, #0
 8013186:	d142      	bne.n	801320e <f_getfree+0x16c>
						p = fs->win.d8;
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 801318c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013190:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8013192:	7efb      	ldrb	r3, [r7, #27]
 8013194:	2b02      	cmp	r3, #2
 8013196:	d115      	bne.n	80131c4 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8013198:	6a3b      	ldr	r3, [r7, #32]
 801319a:	3301      	adds	r3, #1
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	021b      	lsls	r3, r3, #8
 80131a0:	b21a      	sxth	r2, r3
 80131a2:	6a3b      	ldr	r3, [r7, #32]
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	b21b      	sxth	r3, r3
 80131a8:	4313      	orrs	r3, r2
 80131aa:	b21b      	sxth	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <f_getfree+0x114>
 80131b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b2:	3301      	adds	r3, #1
 80131b4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80131b6:	6a3b      	ldr	r3, [r7, #32]
 80131b8:	3302      	adds	r3, #2
 80131ba:	623b      	str	r3, [r7, #32]
 80131bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131be:	3b02      	subs	r3, #2
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
 80131c2:	e01d      	b.n	8013200 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80131c4:	6a3b      	ldr	r3, [r7, #32]
 80131c6:	3303      	adds	r3, #3
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	061a      	lsls	r2, r3, #24
 80131cc:	6a3b      	ldr	r3, [r7, #32]
 80131ce:	3302      	adds	r3, #2
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	041b      	lsls	r3, r3, #16
 80131d4:	4313      	orrs	r3, r2
 80131d6:	6a3a      	ldr	r2, [r7, #32]
 80131d8:	3201      	adds	r2, #1
 80131da:	7812      	ldrb	r2, [r2, #0]
 80131dc:	0212      	lsls	r2, r2, #8
 80131de:	4313      	orrs	r3, r2
 80131e0:	6a3a      	ldr	r2, [r7, #32]
 80131e2:	7812      	ldrb	r2, [r2, #0]
 80131e4:	4313      	orrs	r3, r2
 80131e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d102      	bne.n	80131f4 <f_getfree+0x152>
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	3301      	adds	r3, #1
 80131f2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	3304      	adds	r3, #4
 80131f8:	623b      	str	r3, [r7, #32]
 80131fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fc:	3b04      	subs	r3, #4
 80131fe:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8013200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013202:	3b01      	subs	r3, #1
 8013204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013208:	2b00      	cmp	r3, #0
 801320a:	d1ac      	bne.n	8013166 <f_getfree+0xc4>
 801320c:	e000      	b.n	8013210 <f_getfree+0x16e>
						if (res != FR_OK) break;
 801320e:	bf00      	nop
			}
			fs->free_clust = n;
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801321e:	f043 0301 	orr.w	r3, r3, #1
 8013222:	b2da      	uxtb	r2, r3
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801322e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8013230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013234:	4619      	mov	r1, r3
 8013236:	69f8      	ldr	r0, [r7, #28]
 8013238:	f7fd f9f9 	bl	801062e <unlock_fs>
 801323c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8013240:	4618      	mov	r0, r3
 8013242:	3738      	adds	r7, #56	; 0x38
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013248:	b480      	push	{r7}
 801324a:	b087      	sub	sp, #28
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	4613      	mov	r3, r2
 8013254:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013256:	2301      	movs	r3, #1
 8013258:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801325a:	2300      	movs	r3, #0
 801325c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801325e:	4b1e      	ldr	r3, [pc, #120]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013260:	7a5b      	ldrb	r3, [r3, #9]
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b01      	cmp	r3, #1
 8013266:	d831      	bhi.n	80132cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013268:	4b1b      	ldr	r3, [pc, #108]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 801326a:	7a5b      	ldrb	r3, [r3, #9]
 801326c:	b2db      	uxtb	r3, r3
 801326e:	461a      	mov	r2, r3
 8013270:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013272:	2100      	movs	r1, #0
 8013274:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8013276:	4b18      	ldr	r3, [pc, #96]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013278:	7a5b      	ldrb	r3, [r3, #9]
 801327a:	b2db      	uxtb	r3, r3
 801327c:	4a16      	ldr	r2, [pc, #88]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	4413      	add	r3, r2
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8013286:	4b14      	ldr	r3, [pc, #80]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013288:	7a5b      	ldrb	r3, [r3, #9]
 801328a:	b2db      	uxtb	r3, r3
 801328c:	461a      	mov	r2, r3
 801328e:	4b12      	ldr	r3, [pc, #72]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013290:	4413      	add	r3, r2
 8013292:	79fa      	ldrb	r2, [r7, #7]
 8013294:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013296:	4b10      	ldr	r3, [pc, #64]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 8013298:	7a5b      	ldrb	r3, [r3, #9]
 801329a:	b2db      	uxtb	r3, r3
 801329c:	1c5a      	adds	r2, r3, #1
 801329e:	b2d1      	uxtb	r1, r2
 80132a0:	4a0d      	ldr	r2, [pc, #52]	; (80132d8 <FATFS_LinkDriverEx+0x90>)
 80132a2:	7251      	strb	r1, [r2, #9]
 80132a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80132a6:	7dbb      	ldrb	r3, [r7, #22]
 80132a8:	3330      	adds	r3, #48	; 0x30
 80132aa:	b2da      	uxtb	r2, r3
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	3301      	adds	r3, #1
 80132b4:	223a      	movs	r2, #58	; 0x3a
 80132b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	3302      	adds	r3, #2
 80132bc:	222f      	movs	r2, #47	; 0x2f
 80132be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	3303      	adds	r3, #3
 80132c4:	2200      	movs	r2, #0
 80132c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	371c      	adds	r7, #28
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bc80      	pop	{r7}
 80132d6:	4770      	bx	lr
 80132d8:	2000588c 	.word	0x2000588c

080132dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80132e6:	2200      	movs	r2, #0
 80132e8:	6839      	ldr	r1, [r7, #0]
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f7ff ffac 	bl	8013248 <FATFS_LinkDriverEx>
 80132f0:	4603      	mov	r3, r0
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3708      	adds	r7, #8
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}

080132fa <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80132fa:	b480      	push	{r7}
 80132fc:	b083      	sub	sp, #12
 80132fe:	af00      	add	r7, sp, #0
 8013300:	4603      	mov	r3, r0
 8013302:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	bc80      	pop	{r7}
 801330e:	4770      	bx	lr

08013310 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	4603      	mov	r3, r0
 8013318:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 801331a:	2301      	movs	r3, #1
 801331c:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 801331e:	79fb      	ldrb	r3, [r7, #7]
 8013320:	4619      	mov	r1, r3
 8013322:	4808      	ldr	r0, [pc, #32]	; (8013344 <USBH_status+0x34>)
 8013324:	f7fa fd30 	bl	800dd88 <USBH_MSC_UnitIsReady>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d002      	beq.n	8013334 <USBH_status+0x24>
  {
    res = RES_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73fb      	strb	r3, [r7, #15]
 8013332:	e001      	b.n	8013338 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8013334:	2301      	movs	r3, #1
 8013336:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 8013338:	7bfb      	ldrb	r3, [r7, #15]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	2000dfc0 	.word	0x2000dfc0

08013348 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b094      	sub	sp, #80	; 0x50
 801334c:	af02      	add	r7, sp, #8
 801334e:	60b9      	str	r1, [r7, #8]
 8013350:	607a      	str	r2, [r7, #4]
 8013352:	603b      	str	r3, [r7, #0]
 8013354:	4603      	mov	r3, r0
 8013356:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013358:	2301      	movs	r3, #1
 801335a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 801335e:	2300      	movs	r3, #0
 8013360:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	f003 0303 	and.w	r3, r3, #3
 801336a:	2b00      	cmp	r3, #0
 801336c:	d002      	beq.n	8013374 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 801336e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013372:	e02c      	b.n	80133ce <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8013374:	7bf9      	ldrb	r1, [r7, #15]
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	4816      	ldr	r0, [pc, #88]	; (80133d8 <USBH_read+0x90>)
 8013380:	f7fa fd4b 	bl	800de1a <USBH_MSC_Read>
 8013384:	4603      	mov	r3, r0
 8013386:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 801338a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801338e:	2b00      	cmp	r3, #0
 8013390:	d103      	bne.n	801339a <USBH_read+0x52>
  {
    res = RES_OK;
 8013392:	2300      	movs	r3, #0
 8013394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013398:	e017      	b.n	80133ca <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 801339a:	f107 0210 	add.w	r2, r7, #16
 801339e:	7bfb      	ldrb	r3, [r7, #15]
 80133a0:	4619      	mov	r1, r3
 80133a2:	480d      	ldr	r0, [pc, #52]	; (80133d8 <USBH_read+0x90>)
 80133a4:	f7fa fd15 	bl	800ddd2 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 80133a8:	7f7b      	ldrb	r3, [r7, #29]
 80133aa:	2b3a      	cmp	r3, #58	; 0x3a
 80133ac:	d005      	beq.n	80133ba <USBH_read+0x72>
 80133ae:	2b3a      	cmp	r3, #58	; 0x3a
 80133b0:	dc07      	bgt.n	80133c2 <USBH_read+0x7a>
 80133b2:	2b04      	cmp	r3, #4
 80133b4:	d001      	beq.n	80133ba <USBH_read+0x72>
 80133b6:	2b28      	cmp	r3, #40	; 0x28
 80133b8:	d103      	bne.n	80133c2 <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 80133ba:	2303      	movs	r3, #3
 80133bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80133c0:	e003      	b.n	80133ca <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 80133c2:	2301      	movs	r3, #1
 80133c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80133c8:	bf00      	nop
    }
  }
  
  return res;
 80133ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3748      	adds	r7, #72	; 0x48
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	2000dfc0 	.word	0x2000dfc0

080133dc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b094      	sub	sp, #80	; 0x50
 80133e0:	af02      	add	r7, sp, #8
 80133e2:	60b9      	str	r1, [r7, #8]
 80133e4:	607a      	str	r2, [r7, #4]
 80133e6:	603b      	str	r3, [r7, #0]
 80133e8:	4603      	mov	r3, r0
 80133ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 80133ec:	2301      	movs	r3, #1
 80133ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 80133f2:	2300      	movs	r3, #0
 80133f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	f003 0303 	and.w	r3, r3, #3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d002      	beq.n	8013408 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8013402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013406:	e034      	b.n	8013472 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8013408:	7bf9      	ldrb	r1, [r7, #15]
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	9300      	str	r3, [sp, #0]
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	481a      	ldr	r0, [pc, #104]	; (801347c <USBH_write+0xa0>)
 8013414:	f7fa fd6a 	bl	800deec <USBH_MSC_Write>
 8013418:	4603      	mov	r3, r0
 801341a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 801341e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013422:	2b00      	cmp	r3, #0
 8013424:	d103      	bne.n	801342e <USBH_write+0x52>
  {
    res = RES_OK;
 8013426:	2300      	movs	r3, #0
 8013428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801342c:	e01f      	b.n	801346e <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 801342e:	f107 0210 	add.w	r2, r7, #16
 8013432:	7bfb      	ldrb	r3, [r7, #15]
 8013434:	4619      	mov	r1, r3
 8013436:	4811      	ldr	r0, [pc, #68]	; (801347c <USBH_write+0xa0>)
 8013438:	f7fa fccb 	bl	800ddd2 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 801343c:	7f7b      	ldrb	r3, [r7, #29]
 801343e:	2b3a      	cmp	r3, #58	; 0x3a
 8013440:	d00d      	beq.n	801345e <USBH_write+0x82>
 8013442:	2b3a      	cmp	r3, #58	; 0x3a
 8013444:	dc0f      	bgt.n	8013466 <USBH_write+0x8a>
 8013446:	2b28      	cmp	r3, #40	; 0x28
 8013448:	d009      	beq.n	801345e <USBH_write+0x82>
 801344a:	2b28      	cmp	r3, #40	; 0x28
 801344c:	dc0b      	bgt.n	8013466 <USBH_write+0x8a>
 801344e:	2b04      	cmp	r3, #4
 8013450:	d005      	beq.n	801345e <USBH_write+0x82>
 8013452:	2b27      	cmp	r3, #39	; 0x27
 8013454:	d107      	bne.n	8013466 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8013456:	2302      	movs	r3, #2
 8013458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801345c:	e007      	b.n	801346e <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 801345e:	2303      	movs	r3, #3
 8013460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8013464:	e003      	b.n	801346e <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 8013466:	2301      	movs	r3, #1
 8013468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 801346c:	bf00      	nop
    }
  }
  
  return res;   
 801346e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013472:	4618      	mov	r0, r3
 8013474:	3748      	adds	r7, #72	; 0x48
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	2000dfc0 	.word	0x2000dfc0

08013480 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b090      	sub	sp, #64	; 0x40
 8013484:	af00      	add	r7, sp, #0
 8013486:	4603      	mov	r3, r0
 8013488:	603a      	str	r2, [r7, #0]
 801348a:	71fb      	strb	r3, [r7, #7]
 801348c:	460b      	mov	r3, r1
 801348e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013490:	2301      	movs	r3, #1
 8013492:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 8013496:	79bb      	ldrb	r3, [r7, #6]
 8013498:	2b03      	cmp	r3, #3
 801349a:	d850      	bhi.n	801353e <USBH_ioctl+0xbe>
 801349c:	a201      	add	r2, pc, #4	; (adr r2, 80134a4 <USBH_ioctl+0x24>)
 801349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134a2:	bf00      	nop
 80134a4:	080134b5 	.word	0x080134b5
 80134a8:	080134bd 	.word	0x080134bd
 80134ac:	080134e7 	.word	0x080134e7
 80134b0:	08013513 	.word	0x08013513
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80134ba:	e043      	b.n	8013544 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80134bc:	f107 0208 	add.w	r2, r7, #8
 80134c0:	79fb      	ldrb	r3, [r7, #7]
 80134c2:	4619      	mov	r1, r3
 80134c4:	4822      	ldr	r0, [pc, #136]	; (8013550 <USBH_ioctl+0xd0>)
 80134c6:	f7fa fc84 	bl	800ddd2 <USBH_MSC_GetLUNInfo>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d106      	bne.n	80134de <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80134d6:	2300      	movs	r3, #0
 80134d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80134dc:	e032      	b.n	8013544 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80134de:	2301      	movs	r3, #1
 80134e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80134e4:	e02e      	b.n	8013544 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80134e6:	f107 0208 	add.w	r2, r7, #8
 80134ea:	79fb      	ldrb	r3, [r7, #7]
 80134ec:	4619      	mov	r1, r3
 80134ee:	4818      	ldr	r0, [pc, #96]	; (8013550 <USBH_ioctl+0xd0>)
 80134f0:	f7fa fc6f 	bl	800ddd2 <USBH_MSC_GetLUNInfo>
 80134f4:	4603      	mov	r3, r0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d107      	bne.n	801350a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80134fa:	8a3b      	ldrh	r3, [r7, #16]
 80134fc:	461a      	mov	r2, r3
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8013502:	2300      	movs	r3, #0
 8013504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8013508:	e01c      	b.n	8013544 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 801350a:	2301      	movs	r3, #1
 801350c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8013510:	e018      	b.n	8013544 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8013512:	f107 0208 	add.w	r2, r7, #8
 8013516:	79fb      	ldrb	r3, [r7, #7]
 8013518:	4619      	mov	r1, r3
 801351a:	480d      	ldr	r0, [pc, #52]	; (8013550 <USBH_ioctl+0xd0>)
 801351c:	f7fa fc59 	bl	800ddd2 <USBH_MSC_GetLUNInfo>
 8013520:	4603      	mov	r3, r0
 8013522:	2b00      	cmp	r3, #0
 8013524:	d107      	bne.n	8013536 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8013526:	8a3b      	ldrh	r3, [r7, #16]
 8013528:	461a      	mov	r2, r3
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801352e:	2300      	movs	r3, #0
 8013530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8013534:	e006      	b.n	8013544 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8013536:	2301      	movs	r3, #1
 8013538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 801353c:	e002      	b.n	8013544 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 801353e:	2304      	movs	r3, #4
 8013540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 8013544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013548:	4618      	mov	r0, r3
 801354a:	3740      	adds	r7, #64	; 0x40
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	2000dfc0 	.word	0x2000dfc0

08013554 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b086      	sub	sp, #24
 8013558:	af00      	add	r7, sp, #0
 801355a:	4603      	mov	r3, r0
 801355c:	6039      	str	r1, [r7, #0]
 801355e:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8013560:	2300      	movs	r3, #0
 8013562:	60fb      	str	r3, [r7, #12]
 8013564:	2300      	movs	r3, #0
 8013566:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8013568:	f107 030c 	add.w	r3, r7, #12
 801356c:	2101      	movs	r1, #1
 801356e:	4618      	mov	r0, r3
 8013570:	f000 f8cb 	bl	801370a <osSemaphoreCreate>
 8013574:	4602      	mov	r2, r0
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	bf14      	ite	ne
 8013582:	2301      	movne	r3, #1
 8013584:	2300      	moveq	r3, #0
 8013586:	b2db      	uxtb	r3, r3
 8013588:	617b      	str	r3, [r7, #20]
  
  return ret;
 801358a:	697b      	ldr	r3, [r7, #20]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3718      	adds	r7, #24
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f96b 	bl	8013878 <osSemaphoreDelete>
  return 1;
 80135a2:	2301      	movs	r3, #1
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b084      	sub	sp, #16
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80135b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 f8d7 	bl	8013770 <osSemaphoreWait>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d101      	bne.n	80135cc <ff_req_grant+0x20>
  {
    ret = 1;
 80135c8:	2301      	movs	r3, #1
 80135ca:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80135cc:	68fb      	ldr	r3, [r7, #12]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3710      	adds	r7, #16
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b082      	sub	sp, #8
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 f914 	bl	801380c <osSemaphoreRelease>
}
 80135e4:	bf00      	nop
 80135e6:	3708      	adds	r7, #8
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}

080135ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	4603      	mov	r3, r0
 80135f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80135f6:	2300      	movs	r3, #0
 80135f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80135fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80135fe:	2b84      	cmp	r3, #132	; 0x84
 8013600:	d005      	beq.n	801360e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013602:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	4413      	add	r3, r2
 801360a:	3303      	adds	r3, #3
 801360c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801360e:	68fb      	ldr	r3, [r7, #12]
}
 8013610:	4618      	mov	r0, r3
 8013612:	3714      	adds	r7, #20
 8013614:	46bd      	mov	sp, r7
 8013616:	bc80      	pop	{r7}
 8013618:	4770      	bx	lr

0801361a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801361a:	b480      	push	{r7}
 801361c:	b083      	sub	sp, #12
 801361e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013620:	f3ef 8305 	mrs	r3, IPSR
 8013624:	607b      	str	r3, [r7, #4]
  return(result);
 8013626:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013628:	2b00      	cmp	r3, #0
 801362a:	bf14      	ite	ne
 801362c:	2301      	movne	r3, #1
 801362e:	2300      	moveq	r3, #0
 8013630:	b2db      	uxtb	r3, r3
}
 8013632:	4618      	mov	r0, r3
 8013634:	370c      	adds	r7, #12
 8013636:	46bd      	mov	sp, r7
 8013638:	bc80      	pop	{r7}
 801363a:	4770      	bx	lr

0801363c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013640:	f001 fbd0 	bl	8014de4 <vTaskStartScheduler>
  
  return osOK;
 8013644:	2300      	movs	r3, #0
}
 8013646:	4618      	mov	r0, r3
 8013648:	bd80      	pop	{r7, pc}

0801364a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801364a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801364c:	b089      	sub	sp, #36	; 0x24
 801364e:	af04      	add	r7, sp, #16
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	695b      	ldr	r3, [r3, #20]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d020      	beq.n	801369e <osThreadCreate+0x54>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	699b      	ldr	r3, [r3, #24]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d01c      	beq.n	801369e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685c      	ldr	r4, [r3, #4]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681d      	ldr	r5, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	691e      	ldr	r6, [r3, #16]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff ffb8 	bl	80135ec <makeFreeRtosPriority>
 801367c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	695b      	ldr	r3, [r3, #20]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013686:	9202      	str	r2, [sp, #8]
 8013688:	9301      	str	r3, [sp, #4]
 801368a:	9100      	str	r1, [sp, #0]
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	4632      	mov	r2, r6
 8013690:	4629      	mov	r1, r5
 8013692:	4620      	mov	r0, r4
 8013694:	f001 f9d0 	bl	8014a38 <xTaskCreateStatic>
 8013698:	4603      	mov	r3, r0
 801369a:	60fb      	str	r3, [r7, #12]
 801369c:	e01c      	b.n	80136d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	685c      	ldr	r4, [r3, #4]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80136aa:	b29e      	uxth	r6, r3
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff ff9a 	bl	80135ec <makeFreeRtosPriority>
 80136b8:	4602      	mov	r2, r0
 80136ba:	f107 030c 	add.w	r3, r7, #12
 80136be:	9301      	str	r3, [sp, #4]
 80136c0:	9200      	str	r2, [sp, #0]
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	4632      	mov	r2, r6
 80136c6:	4629      	mov	r1, r5
 80136c8:	4620      	mov	r0, r4
 80136ca:	f001 fa11 	bl	8014af0 <xTaskCreate>
 80136ce:	4603      	mov	r3, r0
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d001      	beq.n	80136d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80136d4:	2300      	movs	r3, #0
 80136d6:	e000      	b.n	80136da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80136d8:	68fb      	ldr	r3, [r7, #12]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3714      	adds	r7, #20
 80136de:	46bd      	mov	sp, r7
 80136e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b084      	sub	sp, #16
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <osDelay+0x16>
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	e000      	b.n	80136fa <osDelay+0x18>
 80136f8:	2301      	movs	r3, #1
 80136fa:	4618      	mov	r0, r3
 80136fc:	f001 fb3e 	bl	8014d7c <vTaskDelay>
  
  return osOK;
 8013700:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013702:	4618      	mov	r0, r3
 8013704:	3710      	adds	r7, #16
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801370a:	b580      	push	{r7, lr}
 801370c:	b086      	sub	sp, #24
 801370e:	af02      	add	r7, sp, #8
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00f      	beq.n	801373c <osSemaphoreCreate+0x32>
    if (count == 1) {
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	2b01      	cmp	r3, #1
 8013720:	d10a      	bne.n	8013738 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	2203      	movs	r2, #3
 8013728:	9200      	str	r2, [sp, #0]
 801372a:	2200      	movs	r2, #0
 801372c:	2100      	movs	r1, #0
 801372e:	2001      	movs	r0, #1
 8013730:	f000 faaa 	bl	8013c88 <xQueueGenericCreateStatic>
 8013734:	4603      	mov	r3, r0
 8013736:	e016      	b.n	8013766 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013738:	2300      	movs	r3, #0
 801373a:	e014      	b.n	8013766 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	2b01      	cmp	r3, #1
 8013740:	d110      	bne.n	8013764 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8013742:	2203      	movs	r2, #3
 8013744:	2100      	movs	r1, #0
 8013746:	2001      	movs	r0, #1
 8013748:	f000 fb15 	bl	8013d76 <xQueueGenericCreate>
 801374c:	60f8      	str	r0, [r7, #12]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d005      	beq.n	8013760 <osSemaphoreCreate+0x56>
 8013754:	2300      	movs	r3, #0
 8013756:	2200      	movs	r2, #0
 8013758:	2100      	movs	r1, #0
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f000 fb68 	bl	8013e30 <xQueueGenericSend>
      return sema;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	e000      	b.n	8013766 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8013764:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013766:	4618      	mov	r0, r3
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
	...

08013770 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801377a:	2300      	movs	r3, #0
 801377c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d101      	bne.n	8013788 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013784:	2380      	movs	r3, #128	; 0x80
 8013786:	e03a      	b.n	80137fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013788:	2300      	movs	r3, #0
 801378a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013792:	d103      	bne.n	801379c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013794:	f04f 33ff 	mov.w	r3, #4294967295
 8013798:	60fb      	str	r3, [r7, #12]
 801379a:	e009      	b.n	80137b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d101      	bne.n	80137b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80137ac:	2301      	movs	r3, #1
 80137ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80137b0:	f7ff ff33 	bl	801361a <inHandlerMode>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d017      	beq.n	80137ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80137ba:	f107 0308 	add.w	r3, r7, #8
 80137be:	461a      	mov	r2, r3
 80137c0:	2100      	movs	r1, #0
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 ff44 	bl	8014650 <xQueueReceiveFromISR>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2b01      	cmp	r3, #1
 80137cc:	d001      	beq.n	80137d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80137ce:	23ff      	movs	r3, #255	; 0xff
 80137d0:	e015      	b.n	80137fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d011      	beq.n	80137fc <osSemaphoreWait+0x8c>
 80137d8:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <osSemaphoreWait+0x98>)
 80137da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137de:	601a      	str	r2, [r3, #0]
 80137e0:	f3bf 8f4f 	dsb	sy
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	e008      	b.n	80137fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80137ea:	68f9      	ldr	r1, [r7, #12]
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f000 fe23 	bl	8014438 <xQueueSemaphoreTake>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d001      	beq.n	80137fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80137f8:	23ff      	movs	r3, #255	; 0xff
 80137fa:	e000      	b.n	80137fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80137fc:	2300      	movs	r3, #0
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3710      	adds	r7, #16
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	e000ed04 	.word	0xe000ed04

0801380c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013814:	2300      	movs	r3, #0
 8013816:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013818:	2300      	movs	r3, #0
 801381a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801381c:	f7ff fefd 	bl	801361a <inHandlerMode>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d016      	beq.n	8013854 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013826:	f107 0308 	add.w	r3, r7, #8
 801382a:	4619      	mov	r1, r3
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f000 fc95 	bl	801415c <xQueueGiveFromISR>
 8013832:	4603      	mov	r3, r0
 8013834:	2b01      	cmp	r3, #1
 8013836:	d001      	beq.n	801383c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013838:	23ff      	movs	r3, #255	; 0xff
 801383a:	e017      	b.n	801386c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d013      	beq.n	801386a <osSemaphoreRelease+0x5e>
 8013842:	4b0c      	ldr	r3, [pc, #48]	; (8013874 <osSemaphoreRelease+0x68>)
 8013844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	e00a      	b.n	801386a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013854:	2300      	movs	r3, #0
 8013856:	2200      	movs	r2, #0
 8013858:	2100      	movs	r1, #0
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 fae8 	bl	8013e30 <xQueueGenericSend>
 8013860:	4603      	mov	r3, r0
 8013862:	2b01      	cmp	r3, #1
 8013864:	d001      	beq.n	801386a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013866:	23ff      	movs	r3, #255	; 0xff
 8013868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801386a:	68fb      	ldr	r3, [r7, #12]
}
 801386c:	4618      	mov	r0, r3
 801386e:	3710      	adds	r7, #16
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	e000ed04 	.word	0xe000ed04

08013878 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013880:	f7ff fecb 	bl	801361a <inHandlerMode>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d001      	beq.n	801388e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801388a:	2382      	movs	r3, #130	; 0x82
 801388c:	e003      	b.n	8013896 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f000 ff5e 	bl	8014750 <vQueueDelete>

  return osOK; 
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	3708      	adds	r7, #8
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801389e:	b590      	push	{r4, r7, lr}
 80138a0:	b085      	sub	sp, #20
 80138a2:	af02      	add	r7, sp, #8
 80138a4:	6078      	str	r0, [r7, #4]
 80138a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	689b      	ldr	r3, [r3, #8]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d011      	beq.n	80138d4 <osMessageCreate+0x36>
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00d      	beq.n	80138d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6818      	ldr	r0, [r3, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6859      	ldr	r1, [r3, #4]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	689a      	ldr	r2, [r3, #8]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	2400      	movs	r4, #0
 80138ca:	9400      	str	r4, [sp, #0]
 80138cc:	f000 f9dc 	bl	8013c88 <xQueueGenericCreateStatic>
 80138d0:	4603      	mov	r3, r0
 80138d2:	e008      	b.n	80138e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6818      	ldr	r0, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	2200      	movs	r2, #0
 80138de:	4619      	mov	r1, r3
 80138e0:	f000 fa49 	bl	8013d76 <xQueueGenericCreate>
 80138e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd90      	pop	{r4, r7, pc}
	...

080138f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80138fc:	2300      	movs	r3, #0
 80138fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d101      	bne.n	801390e <osMessagePut+0x1e>
    ticks = 1;
 801390a:	2301      	movs	r3, #1
 801390c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801390e:	f7ff fe84 	bl	801361a <inHandlerMode>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d018      	beq.n	801394a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013918:	f107 0210 	add.w	r2, r7, #16
 801391c:	f107 0108 	add.w	r1, r7, #8
 8013920:	2300      	movs	r3, #0
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f000 fb82 	bl	801402c <xQueueGenericSendFromISR>
 8013928:	4603      	mov	r3, r0
 801392a:	2b01      	cmp	r3, #1
 801392c:	d001      	beq.n	8013932 <osMessagePut+0x42>
      return osErrorOS;
 801392e:	23ff      	movs	r3, #255	; 0xff
 8013930:	e018      	b.n	8013964 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d014      	beq.n	8013962 <osMessagePut+0x72>
 8013938:	4b0c      	ldr	r3, [pc, #48]	; (801396c <osMessagePut+0x7c>)
 801393a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801393e:	601a      	str	r2, [r3, #0]
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	e00b      	b.n	8013962 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801394a:	f107 0108 	add.w	r1, r7, #8
 801394e:	2300      	movs	r3, #0
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f000 fa6c 	bl	8013e30 <xQueueGenericSend>
 8013958:	4603      	mov	r3, r0
 801395a:	2b01      	cmp	r3, #1
 801395c:	d001      	beq.n	8013962 <osMessagePut+0x72>
      return osErrorOS;
 801395e:	23ff      	movs	r3, #255	; 0xff
 8013960:	e000      	b.n	8013964 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013962:	2300      	movs	r3, #0
}
 8013964:	4618      	mov	r0, r3
 8013966:	3718      	adds	r7, #24
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	e000ed04 	.word	0xe000ed04

08013970 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013970:	b590      	push	{r4, r7, lr}
 8013972:	b08b      	sub	sp, #44	; 0x2c
 8013974:	af00      	add	r7, sp, #0
 8013976:	60f8      	str	r0, [r7, #12]
 8013978:	60b9      	str	r1, [r7, #8]
 801397a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013980:	2300      	movs	r3, #0
 8013982:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d10a      	bne.n	80139a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801398a:	2380      	movs	r3, #128	; 0x80
 801398c:	617b      	str	r3, [r7, #20]
    return event;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	461c      	mov	r4, r3
 8013992:	f107 0314 	add.w	r3, r7, #20
 8013996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801399a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801399e:	e054      	b.n	8013a4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80139a0:	2300      	movs	r3, #0
 80139a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ae:	d103      	bne.n	80139b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80139b0:	f04f 33ff 	mov.w	r3, #4294967295
 80139b4:	627b      	str	r3, [r7, #36]	; 0x24
 80139b6:	e009      	b.n	80139cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d006      	beq.n	80139cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80139c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d101      	bne.n	80139cc <osMessageGet+0x5c>
      ticks = 1;
 80139c8:	2301      	movs	r3, #1
 80139ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80139cc:	f7ff fe25 	bl	801361a <inHandlerMode>
 80139d0:	4603      	mov	r3, r0
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d01c      	beq.n	8013a10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80139d6:	f107 0220 	add.w	r2, r7, #32
 80139da:	f107 0314 	add.w	r3, r7, #20
 80139de:	3304      	adds	r3, #4
 80139e0:	4619      	mov	r1, r3
 80139e2:	68b8      	ldr	r0, [r7, #8]
 80139e4:	f000 fe34 	bl	8014650 <xQueueReceiveFromISR>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d102      	bne.n	80139f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80139ee:	2310      	movs	r3, #16
 80139f0:	617b      	str	r3, [r7, #20]
 80139f2:	e001      	b.n	80139f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80139f8:	6a3b      	ldr	r3, [r7, #32]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d01d      	beq.n	8013a3a <osMessageGet+0xca>
 80139fe:	4b15      	ldr	r3, [pc, #84]	; (8013a54 <osMessageGet+0xe4>)
 8013a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	f3bf 8f4f 	dsb	sy
 8013a0a:	f3bf 8f6f 	isb	sy
 8013a0e:	e014      	b.n	8013a3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013a10:	f107 0314 	add.w	r3, r7, #20
 8013a14:	3304      	adds	r3, #4
 8013a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a18:	4619      	mov	r1, r3
 8013a1a:	68b8      	ldr	r0, [r7, #8]
 8013a1c:	f000 fc2c 	bl	8014278 <xQueueReceive>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	d102      	bne.n	8013a2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8013a26:	2310      	movs	r3, #16
 8013a28:	617b      	str	r3, [r7, #20]
 8013a2a:	e006      	b.n	8013a3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d101      	bne.n	8013a36 <osMessageGet+0xc6>
 8013a32:	2300      	movs	r3, #0
 8013a34:	e000      	b.n	8013a38 <osMessageGet+0xc8>
 8013a36:	2340      	movs	r3, #64	; 0x40
 8013a38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	461c      	mov	r4, r3
 8013a3e:	f107 0314 	add.w	r3, r7, #20
 8013a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013a4a:	68f8      	ldr	r0, [r7, #12]
 8013a4c:	372c      	adds	r7, #44	; 0x2c
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd90      	pop	{r4, r7, pc}
 8013a52:	bf00      	nop
 8013a54:	e000ed04 	.word	0xe000ed04

08013a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013a58:	b480      	push	{r7}
 8013a5a:	b083      	sub	sp, #12
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f103 0208 	add.w	r2, r3, #8
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f103 0208 	add.w	r2, r3, #8
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f103 0208 	add.w	r2, r3, #8
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013a8c:	bf00      	nop
 8013a8e:	370c      	adds	r7, #12
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bc80      	pop	{r7}
 8013a94:	4770      	bx	lr

08013a96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013a96:	b480      	push	{r7}
 8013a98:	b083      	sub	sp, #12
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013aa4:	bf00      	nop
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bc80      	pop	{r7}
 8013aac:	4770      	bx	lr

08013aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013aae:	b480      	push	{r7}
 8013ab0:	b085      	sub	sp, #20
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	689a      	ldr	r2, [r3, #8]
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	683a      	ldr	r2, [r7, #0]
 8013ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	601a      	str	r2, [r3, #0]
}
 8013aea:	bf00      	nop
 8013aec:	3714      	adds	r7, #20
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bc80      	pop	{r7}
 8013af2:	4770      	bx	lr

08013af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013af4:	b480      	push	{r7}
 8013af6:	b085      	sub	sp, #20
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b0a:	d103      	bne.n	8013b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	60fb      	str	r3, [r7, #12]
 8013b12:	e00c      	b.n	8013b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	3308      	adds	r3, #8
 8013b18:	60fb      	str	r3, [r7, #12]
 8013b1a:	e002      	b.n	8013b22 <vListInsert+0x2e>
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d2f6      	bcs.n	8013b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	685a      	ldr	r2, [r3, #4]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	683a      	ldr	r2, [r7, #0]
 8013b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	68fa      	ldr	r2, [r7, #12]
 8013b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	683a      	ldr	r2, [r7, #0]
 8013b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	1c5a      	adds	r2, r3, #1
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	601a      	str	r2, [r3, #0]
}
 8013b5a:	bf00      	nop
 8013b5c:	3714      	adds	r7, #20
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bc80      	pop	{r7}
 8013b62:	4770      	bx	lr

08013b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013b64:	b480      	push	{r7}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	6892      	ldr	r2, [r2, #8]
 8013b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	6852      	ldr	r2, [r2, #4]
 8013b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d103      	bne.n	8013b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	689a      	ldr	r2, [r3, #8]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	1e5a      	subs	r2, r3, #1
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3714      	adds	r7, #20
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bc80      	pop	{r7}
 8013bb4:	4770      	bx	lr
	...

08013bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d10a      	bne.n	8013be2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd0:	f383 8811 	msr	BASEPRI, r3
 8013bd4:	f3bf 8f6f 	isb	sy
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013bde:	bf00      	nop
 8013be0:	e7fe      	b.n	8013be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013be2:	f002 f853 	bl	8015c8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bee:	68f9      	ldr	r1, [r7, #12]
 8013bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013bf2:	fb01 f303 	mul.w	r3, r1, r3
 8013bf6:	441a      	add	r2, r3
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c12:	3b01      	subs	r3, #1
 8013c14:	68f9      	ldr	r1, [r7, #12]
 8013c16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013c18:	fb01 f303 	mul.w	r3, r1, r3
 8013c1c:	441a      	add	r2, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	22ff      	movs	r2, #255	; 0xff
 8013c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	22ff      	movs	r2, #255	; 0xff
 8013c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d114      	bne.n	8013c62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	691b      	ldr	r3, [r3, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d01a      	beq.n	8013c76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	3310      	adds	r3, #16
 8013c44:	4618      	mov	r0, r3
 8013c46:	f001 fb25 	bl	8015294 <xTaskRemoveFromEventList>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d012      	beq.n	8013c76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013c50:	4b0c      	ldr	r3, [pc, #48]	; (8013c84 <xQueueGenericReset+0xcc>)
 8013c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	e009      	b.n	8013c76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3310      	adds	r3, #16
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7ff fef6 	bl	8013a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	3324      	adds	r3, #36	; 0x24
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff fef1 	bl	8013a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013c76:	f002 f839 	bl	8015cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013c7a:	2301      	movs	r3, #1
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	e000ed04 	.word	0xe000ed04

08013c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b08e      	sub	sp, #56	; 0x38
 8013c8c:	af02      	add	r7, sp, #8
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
 8013c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d10a      	bne.n	8013cb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013cae:	bf00      	nop
 8013cb0:	e7fe      	b.n	8013cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d10a      	bne.n	8013cce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbc:	f383 8811 	msr	BASEPRI, r3
 8013cc0:	f3bf 8f6f 	isb	sy
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013cca:	bf00      	nop
 8013ccc:	e7fe      	b.n	8013ccc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <xQueueGenericCreateStatic+0x52>
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d001      	beq.n	8013cde <xQueueGenericCreateStatic+0x56>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	e000      	b.n	8013ce0 <xQueueGenericCreateStatic+0x58>
 8013cde:	2300      	movs	r3, #0
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d10a      	bne.n	8013cfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	623b      	str	r3, [r7, #32]
}
 8013cf6:	bf00      	nop
 8013cf8:	e7fe      	b.n	8013cf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d102      	bne.n	8013d06 <xQueueGenericCreateStatic+0x7e>
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <xQueueGenericCreateStatic+0x82>
 8013d06:	2301      	movs	r3, #1
 8013d08:	e000      	b.n	8013d0c <xQueueGenericCreateStatic+0x84>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10a      	bne.n	8013d26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d14:	f383 8811 	msr	BASEPRI, r3
 8013d18:	f3bf 8f6f 	isb	sy
 8013d1c:	f3bf 8f4f 	dsb	sy
 8013d20:	61fb      	str	r3, [r7, #28]
}
 8013d22:	bf00      	nop
 8013d24:	e7fe      	b.n	8013d24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013d26:	2348      	movs	r3, #72	; 0x48
 8013d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	2b48      	cmp	r3, #72	; 0x48
 8013d2e:	d00a      	beq.n	8013d46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d34:	f383 8811 	msr	BASEPRI, r3
 8013d38:	f3bf 8f6f 	isb	sy
 8013d3c:	f3bf 8f4f 	dsb	sy
 8013d40:	61bb      	str	r3, [r7, #24]
}
 8013d42:	bf00      	nop
 8013d44:	e7fe      	b.n	8013d44 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00d      	beq.n	8013d6c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d52:	2201      	movs	r2, #1
 8013d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013d58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	4613      	mov	r3, r2
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	68b9      	ldr	r1, [r7, #8]
 8013d66:	68f8      	ldr	r0, [r7, #12]
 8013d68:	f000 f843 	bl	8013df2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3730      	adds	r7, #48	; 0x30
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b08a      	sub	sp, #40	; 0x28
 8013d7a:	af02      	add	r7, sp, #8
 8013d7c:	60f8      	str	r0, [r7, #12]
 8013d7e:	60b9      	str	r1, [r7, #8]
 8013d80:	4613      	mov	r3, r2
 8013d82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d10a      	bne.n	8013da0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d8e:	f383 8811 	msr	BASEPRI, r3
 8013d92:	f3bf 8f6f 	isb	sy
 8013d96:	f3bf 8f4f 	dsb	sy
 8013d9a:	613b      	str	r3, [r7, #16]
}
 8013d9c:	bf00      	nop
 8013d9e:	e7fe      	b.n	8013d9e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d102      	bne.n	8013dac <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	61fb      	str	r3, [r7, #28]
 8013daa:	e004      	b.n	8013db6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	68ba      	ldr	r2, [r7, #8]
 8013db0:	fb02 f303 	mul.w	r3, r2, r3
 8013db4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	3348      	adds	r3, #72	; 0x48
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f002 f866 	bl	8015e8c <pvPortMalloc>
 8013dc0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d00f      	beq.n	8013de8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	3348      	adds	r3, #72	; 0x48
 8013dcc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013dce:	69bb      	ldr	r3, [r7, #24]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013dd6:	79fa      	ldrb	r2, [r7, #7]
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	9300      	str	r3, [sp, #0]
 8013ddc:	4613      	mov	r3, r2
 8013dde:	697a      	ldr	r2, [r7, #20]
 8013de0:	68b9      	ldr	r1, [r7, #8]
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f000 f805 	bl	8013df2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8013de8:	69bb      	ldr	r3, [r7, #24]
	}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3720      	adds	r7, #32
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}

08013df2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013df2:	b580      	push	{r7, lr}
 8013df4:	b084      	sub	sp, #16
 8013df6:	af00      	add	r7, sp, #0
 8013df8:	60f8      	str	r0, [r7, #12]
 8013dfa:	60b9      	str	r1, [r7, #8]
 8013dfc:	607a      	str	r2, [r7, #4]
 8013dfe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d103      	bne.n	8013e0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	69ba      	ldr	r2, [r7, #24]
 8013e0a:	601a      	str	r2, [r3, #0]
 8013e0c:	e002      	b.n	8013e14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013e1a:	69bb      	ldr	r3, [r7, #24]
 8013e1c:	68ba      	ldr	r2, [r7, #8]
 8013e1e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013e20:	2101      	movs	r1, #1
 8013e22:	69b8      	ldr	r0, [r7, #24]
 8013e24:	f7ff fec8 	bl	8013bb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013e28:	bf00      	nop
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b08e      	sub	sp, #56	; 0x38
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d10a      	bne.n	8013e62 <xQueueGenericSend+0x32>
	__asm volatile
 8013e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e50:	f383 8811 	msr	BASEPRI, r3
 8013e54:	f3bf 8f6f 	isb	sy
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e5e:	bf00      	nop
 8013e60:	e7fe      	b.n	8013e60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d103      	bne.n	8013e70 <xQueueGenericSend+0x40>
 8013e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <xQueueGenericSend+0x44>
 8013e70:	2301      	movs	r3, #1
 8013e72:	e000      	b.n	8013e76 <xQueueGenericSend+0x46>
 8013e74:	2300      	movs	r3, #0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10a      	bne.n	8013e90 <xQueueGenericSend+0x60>
	__asm volatile
 8013e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7e:	f383 8811 	msr	BASEPRI, r3
 8013e82:	f3bf 8f6f 	isb	sy
 8013e86:	f3bf 8f4f 	dsb	sy
 8013e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e8c:	bf00      	nop
 8013e8e:	e7fe      	b.n	8013e8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	2b02      	cmp	r3, #2
 8013e94:	d103      	bne.n	8013e9e <xQueueGenericSend+0x6e>
 8013e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	d101      	bne.n	8013ea2 <xQueueGenericSend+0x72>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	e000      	b.n	8013ea4 <xQueueGenericSend+0x74>
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10a      	bne.n	8013ebe <xQueueGenericSend+0x8e>
	__asm volatile
 8013ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	623b      	str	r3, [r7, #32]
}
 8013eba:	bf00      	nop
 8013ebc:	e7fe      	b.n	8013ebc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ebe:	f001 fbad 	bl	801561c <xTaskGetSchedulerState>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d102      	bne.n	8013ece <xQueueGenericSend+0x9e>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d101      	bne.n	8013ed2 <xQueueGenericSend+0xa2>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	e000      	b.n	8013ed4 <xQueueGenericSend+0xa4>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10a      	bne.n	8013eee <xQueueGenericSend+0xbe>
	__asm volatile
 8013ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	61fb      	str	r3, [r7, #28]
}
 8013eea:	bf00      	nop
 8013eec:	e7fe      	b.n	8013eec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013eee:	f001 fecd 	bl	8015c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d302      	bcc.n	8013f04 <xQueueGenericSend+0xd4>
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	2b02      	cmp	r3, #2
 8013f02:	d129      	bne.n	8013f58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f04:	683a      	ldr	r2, [r7, #0]
 8013f06:	68b9      	ldr	r1, [r7, #8]
 8013f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f0a:	f000 fc5b 	bl	80147c4 <prvCopyDataToQueue>
 8013f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d010      	beq.n	8013f3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1a:	3324      	adds	r3, #36	; 0x24
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f001 f9b9 	bl	8015294 <xTaskRemoveFromEventList>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d013      	beq.n	8013f50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013f28:	4b3f      	ldr	r3, [pc, #252]	; (8014028 <xQueueGenericSend+0x1f8>)
 8013f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f2e:	601a      	str	r2, [r3, #0]
 8013f30:	f3bf 8f4f 	dsb	sy
 8013f34:	f3bf 8f6f 	isb	sy
 8013f38:	e00a      	b.n	8013f50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d007      	beq.n	8013f50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013f40:	4b39      	ldr	r3, [pc, #228]	; (8014028 <xQueueGenericSend+0x1f8>)
 8013f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f46:	601a      	str	r2, [r3, #0]
 8013f48:	f3bf 8f4f 	dsb	sy
 8013f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f50:	f001 fecc 	bl	8015cec <vPortExitCritical>
				return pdPASS;
 8013f54:	2301      	movs	r3, #1
 8013f56:	e063      	b.n	8014020 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d103      	bne.n	8013f66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f5e:	f001 fec5 	bl	8015cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f62:	2300      	movs	r3, #0
 8013f64:	e05c      	b.n	8014020 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d106      	bne.n	8013f7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f6c:	f107 0314 	add.w	r3, r7, #20
 8013f70:	4618      	mov	r0, r3
 8013f72:	f001 f9f1 	bl	8015358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f76:	2301      	movs	r3, #1
 8013f78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f7a:	f001 feb7 	bl	8015cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f7e:	f000 ff9b 	bl	8014eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f82:	f001 fe83 	bl	8015c8c <vPortEnterCritical>
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f8c:	b25b      	sxtb	r3, r3
 8013f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f92:	d103      	bne.n	8013f9c <xQueueGenericSend+0x16c>
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	2200      	movs	r2, #0
 8013f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fa2:	b25b      	sxtb	r3, r3
 8013fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa8:	d103      	bne.n	8013fb2 <xQueueGenericSend+0x182>
 8013faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fac:	2200      	movs	r2, #0
 8013fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013fb2:	f001 fe9b 	bl	8015cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013fb6:	1d3a      	adds	r2, r7, #4
 8013fb8:	f107 0314 	add.w	r3, r7, #20
 8013fbc:	4611      	mov	r1, r2
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f001 f9e0 	bl	8015384 <xTaskCheckForTimeOut>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d124      	bne.n	8014014 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fcc:	f000 fcf2 	bl	80149b4 <prvIsQueueFull>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d018      	beq.n	8014008 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd8:	3310      	adds	r3, #16
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	4611      	mov	r1, r2
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f001 f934 	bl	801524c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fe6:	f000 fc7d 	bl	80148e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013fea:	f000 ff73 	bl	8014ed4 <xTaskResumeAll>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f47f af7c 	bne.w	8013eee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013ff6:	4b0c      	ldr	r3, [pc, #48]	; (8014028 <xQueueGenericSend+0x1f8>)
 8013ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ffc:	601a      	str	r2, [r3, #0]
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	f3bf 8f6f 	isb	sy
 8014006:	e772      	b.n	8013eee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801400a:	f000 fc6b 	bl	80148e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801400e:	f000 ff61 	bl	8014ed4 <xTaskResumeAll>
 8014012:	e76c      	b.n	8013eee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014016:	f000 fc65 	bl	80148e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801401a:	f000 ff5b 	bl	8014ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801401e:	2300      	movs	r3, #0
		}
	}
}
 8014020:	4618      	mov	r0, r3
 8014022:	3738      	adds	r7, #56	; 0x38
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	e000ed04 	.word	0xe000ed04

0801402c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b08e      	sub	sp, #56	; 0x38
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014040:	2b00      	cmp	r3, #0
 8014042:	d10a      	bne.n	801405a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014048:	f383 8811 	msr	BASEPRI, r3
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014056:	bf00      	nop
 8014058:	e7fe      	b.n	8014058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d103      	bne.n	8014068 <xQueueGenericSendFromISR+0x3c>
 8014060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014064:	2b00      	cmp	r3, #0
 8014066:	d101      	bne.n	801406c <xQueueGenericSendFromISR+0x40>
 8014068:	2301      	movs	r3, #1
 801406a:	e000      	b.n	801406e <xQueueGenericSendFromISR+0x42>
 801406c:	2300      	movs	r3, #0
 801406e:	2b00      	cmp	r3, #0
 8014070:	d10a      	bne.n	8014088 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	623b      	str	r3, [r7, #32]
}
 8014084:	bf00      	nop
 8014086:	e7fe      	b.n	8014086 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	2b02      	cmp	r3, #2
 801408c:	d103      	bne.n	8014096 <xQueueGenericSendFromISR+0x6a>
 801408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014092:	2b01      	cmp	r3, #1
 8014094:	d101      	bne.n	801409a <xQueueGenericSendFromISR+0x6e>
 8014096:	2301      	movs	r3, #1
 8014098:	e000      	b.n	801409c <xQueueGenericSendFromISR+0x70>
 801409a:	2300      	movs	r3, #0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10a      	bne.n	80140b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80140a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	61fb      	str	r3, [r7, #28]
}
 80140b2:	bf00      	nop
 80140b4:	e7fe      	b.n	80140b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140b6:	f001 feab 	bl	8015e10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80140ba:	f3ef 8211 	mrs	r2, BASEPRI
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	61ba      	str	r2, [r7, #24]
 80140d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80140d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140de:	429a      	cmp	r2, r3
 80140e0:	d302      	bcc.n	80140e8 <xQueueGenericSendFromISR+0xbc>
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	2b02      	cmp	r3, #2
 80140e6:	d12c      	bne.n	8014142 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80140e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	68b9      	ldr	r1, [r7, #8]
 80140f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140f8:	f000 fb64 	bl	80147c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80140fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014104:	d112      	bne.n	801412c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410a:	2b00      	cmp	r3, #0
 801410c:	d016      	beq.n	801413c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014110:	3324      	adds	r3, #36	; 0x24
 8014112:	4618      	mov	r0, r3
 8014114:	f001 f8be 	bl	8015294 <xTaskRemoveFromEventList>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00e      	beq.n	801413c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00b      	beq.n	801413c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2201      	movs	r2, #1
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	e007      	b.n	801413c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801412c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014130:	3301      	adds	r3, #1
 8014132:	b2db      	uxtb	r3, r3
 8014134:	b25a      	sxtb	r2, r3
 8014136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801413c:	2301      	movs	r3, #1
 801413e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014140:	e001      	b.n	8014146 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014142:	2300      	movs	r3, #0
 8014144:	637b      	str	r3, [r7, #52]	; 0x34
 8014146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014148:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014150:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014154:	4618      	mov	r0, r3
 8014156:	3738      	adds	r7, #56	; 0x38
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b08e      	sub	sp, #56	; 0x38
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10a      	bne.n	8014186 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014174:	f383 8811 	msr	BASEPRI, r3
 8014178:	f3bf 8f6f 	isb	sy
 801417c:	f3bf 8f4f 	dsb	sy
 8014180:	623b      	str	r3, [r7, #32]
}
 8014182:	bf00      	nop
 8014184:	e7fe      	b.n	8014184 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00a      	beq.n	80141a4 <xQueueGiveFromISR+0x48>
	__asm volatile
 801418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014192:	f383 8811 	msr	BASEPRI, r3
 8014196:	f3bf 8f6f 	isb	sy
 801419a:	f3bf 8f4f 	dsb	sy
 801419e:	61fb      	str	r3, [r7, #28]
}
 80141a0:	bf00      	nop
 80141a2:	e7fe      	b.n	80141a2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80141a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d103      	bne.n	80141b4 <xQueueGiveFromISR+0x58>
 80141ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d101      	bne.n	80141b8 <xQueueGiveFromISR+0x5c>
 80141b4:	2301      	movs	r3, #1
 80141b6:	e000      	b.n	80141ba <xQueueGiveFromISR+0x5e>
 80141b8:	2300      	movs	r3, #0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d10a      	bne.n	80141d4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80141be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	61bb      	str	r3, [r7, #24]
}
 80141d0:	bf00      	nop
 80141d2:	e7fe      	b.n	80141d2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141d4:	f001 fe1c 	bl	8015e10 <vPortValidateInterruptPriority>
	__asm volatile
 80141d8:	f3ef 8211 	mrs	r2, BASEPRI
 80141dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e0:	f383 8811 	msr	BASEPRI, r3
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	617a      	str	r2, [r7, #20]
 80141ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80141f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80141f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141f8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80141fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014200:	429a      	cmp	r2, r3
 8014202:	d22b      	bcs.n	801425c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801420a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014210:	1c5a      	adds	r2, r3, #1
 8014212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014214:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014216:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801421e:	d112      	bne.n	8014246 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014224:	2b00      	cmp	r3, #0
 8014226:	d016      	beq.n	8014256 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422a:	3324      	adds	r3, #36	; 0x24
 801422c:	4618      	mov	r0, r3
 801422e:	f001 f831 	bl	8015294 <xTaskRemoveFromEventList>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00e      	beq.n	8014256 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00b      	beq.n	8014256 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2201      	movs	r2, #1
 8014242:	601a      	str	r2, [r3, #0]
 8014244:	e007      	b.n	8014256 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801424a:	3301      	adds	r3, #1
 801424c:	b2db      	uxtb	r3, r3
 801424e:	b25a      	sxtb	r2, r3
 8014250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014256:	2301      	movs	r3, #1
 8014258:	637b      	str	r3, [r7, #52]	; 0x34
 801425a:	e001      	b.n	8014260 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801425c:	2300      	movs	r3, #0
 801425e:	637b      	str	r3, [r7, #52]	; 0x34
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	f383 8811 	msr	BASEPRI, r3
}
 801426a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801426e:	4618      	mov	r0, r3
 8014270:	3738      	adds	r7, #56	; 0x38
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
	...

08014278 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b08c      	sub	sp, #48	; 0x30
 801427c:	af00      	add	r7, sp, #0
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014284:	2300      	movs	r3, #0
 8014286:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428e:	2b00      	cmp	r3, #0
 8014290:	d10a      	bne.n	80142a8 <xQueueReceive+0x30>
	__asm volatile
 8014292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014296:	f383 8811 	msr	BASEPRI, r3
 801429a:	f3bf 8f6f 	isb	sy
 801429e:	f3bf 8f4f 	dsb	sy
 80142a2:	623b      	str	r3, [r7, #32]
}
 80142a4:	bf00      	nop
 80142a6:	e7fe      	b.n	80142a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d103      	bne.n	80142b6 <xQueueReceive+0x3e>
 80142ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <xQueueReceive+0x42>
 80142b6:	2301      	movs	r3, #1
 80142b8:	e000      	b.n	80142bc <xQueueReceive+0x44>
 80142ba:	2300      	movs	r3, #0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d10a      	bne.n	80142d6 <xQueueReceive+0x5e>
	__asm volatile
 80142c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c4:	f383 8811 	msr	BASEPRI, r3
 80142c8:	f3bf 8f6f 	isb	sy
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	61fb      	str	r3, [r7, #28]
}
 80142d2:	bf00      	nop
 80142d4:	e7fe      	b.n	80142d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80142d6:	f001 f9a1 	bl	801561c <xTaskGetSchedulerState>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d102      	bne.n	80142e6 <xQueueReceive+0x6e>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d101      	bne.n	80142ea <xQueueReceive+0x72>
 80142e6:	2301      	movs	r3, #1
 80142e8:	e000      	b.n	80142ec <xQueueReceive+0x74>
 80142ea:	2300      	movs	r3, #0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d10a      	bne.n	8014306 <xQueueReceive+0x8e>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	61bb      	str	r3, [r7, #24]
}
 8014302:	bf00      	nop
 8014304:	e7fe      	b.n	8014304 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8014306:	f001 fcc1 	bl	8015c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801430e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	2b00      	cmp	r3, #0
 8014314:	d01f      	beq.n	8014356 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801431a:	f000 fabd 	bl	8014898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	1e5a      	subs	r2, r3, #1
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00f      	beq.n	801434e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014330:	3310      	adds	r3, #16
 8014332:	4618      	mov	r0, r3
 8014334:	f000 ffae 	bl	8015294 <xTaskRemoveFromEventList>
 8014338:	4603      	mov	r3, r0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d007      	beq.n	801434e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801433e:	4b3d      	ldr	r3, [pc, #244]	; (8014434 <xQueueReceive+0x1bc>)
 8014340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801434e:	f001 fccd 	bl	8015cec <vPortExitCritical>
				return pdPASS;
 8014352:	2301      	movs	r3, #1
 8014354:	e069      	b.n	801442a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d103      	bne.n	8014364 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801435c:	f001 fcc6 	bl	8015cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014360:	2300      	movs	r3, #0
 8014362:	e062      	b.n	801442a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014366:	2b00      	cmp	r3, #0
 8014368:	d106      	bne.n	8014378 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801436a:	f107 0310 	add.w	r3, r7, #16
 801436e:	4618      	mov	r0, r3
 8014370:	f000 fff2 	bl	8015358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014374:	2301      	movs	r3, #1
 8014376:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014378:	f001 fcb8 	bl	8015cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801437c:	f000 fd9c 	bl	8014eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014380:	f001 fc84 	bl	8015c8c <vPortEnterCritical>
 8014384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801438a:	b25b      	sxtb	r3, r3
 801438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014390:	d103      	bne.n	801439a <xQueueReceive+0x122>
 8014392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014394:	2200      	movs	r2, #0
 8014396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143a0:	b25b      	sxtb	r3, r3
 80143a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143a6:	d103      	bne.n	80143b0 <xQueueReceive+0x138>
 80143a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143aa:	2200      	movs	r2, #0
 80143ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80143b0:	f001 fc9c 	bl	8015cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80143b4:	1d3a      	adds	r2, r7, #4
 80143b6:	f107 0310 	add.w	r3, r7, #16
 80143ba:	4611      	mov	r1, r2
 80143bc:	4618      	mov	r0, r3
 80143be:	f000 ffe1 	bl	8015384 <xTaskCheckForTimeOut>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d123      	bne.n	8014410 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80143c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ca:	f000 fadd 	bl	8014988 <prvIsQueueEmpty>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d017      	beq.n	8014404 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80143d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d6:	3324      	adds	r3, #36	; 0x24
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	4611      	mov	r1, r2
 80143dc:	4618      	mov	r0, r3
 80143de:	f000 ff35 	bl	801524c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80143e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143e4:	f000 fa7e 	bl	80148e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80143e8:	f000 fd74 	bl	8014ed4 <xTaskResumeAll>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d189      	bne.n	8014306 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80143f2:	4b10      	ldr	r3, [pc, #64]	; (8014434 <xQueueReceive+0x1bc>)
 80143f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	f3bf 8f4f 	dsb	sy
 80143fe:	f3bf 8f6f 	isb	sy
 8014402:	e780      	b.n	8014306 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014406:	f000 fa6d 	bl	80148e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801440a:	f000 fd63 	bl	8014ed4 <xTaskResumeAll>
 801440e:	e77a      	b.n	8014306 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014412:	f000 fa67 	bl	80148e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014416:	f000 fd5d 	bl	8014ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801441c:	f000 fab4 	bl	8014988 <prvIsQueueEmpty>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	f43f af6f 	beq.w	8014306 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801442a:	4618      	mov	r0, r3
 801442c:	3730      	adds	r7, #48	; 0x30
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
 8014432:	bf00      	nop
 8014434:	e000ed04 	.word	0xe000ed04

08014438 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b08e      	sub	sp, #56	; 0x38
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014442:	2300      	movs	r3, #0
 8014444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801444a:	2300      	movs	r3, #0
 801444c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014450:	2b00      	cmp	r3, #0
 8014452:	d10a      	bne.n	801446a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	623b      	str	r3, [r7, #32]
}
 8014466:	bf00      	nop
 8014468:	e7fe      	b.n	8014468 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00a      	beq.n	8014488 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8014472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	61fb      	str	r3, [r7, #28]
}
 8014484:	bf00      	nop
 8014486:	e7fe      	b.n	8014486 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014488:	f001 f8c8 	bl	801561c <xTaskGetSchedulerState>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d102      	bne.n	8014498 <xQueueSemaphoreTake+0x60>
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d101      	bne.n	801449c <xQueueSemaphoreTake+0x64>
 8014498:	2301      	movs	r3, #1
 801449a:	e000      	b.n	801449e <xQueueSemaphoreTake+0x66>
 801449c:	2300      	movs	r3, #0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10a      	bne.n	80144b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80144a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a6:	f383 8811 	msr	BASEPRI, r3
 80144aa:	f3bf 8f6f 	isb	sy
 80144ae:	f3bf 8f4f 	dsb	sy
 80144b2:	61bb      	str	r3, [r7, #24]
}
 80144b4:	bf00      	nop
 80144b6:	e7fe      	b.n	80144b6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80144b8:	f001 fbe8 	bl	8015c8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80144c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d024      	beq.n	8014512 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80144c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ca:	1e5a      	subs	r2, r3, #1
 80144cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d104      	bne.n	80144e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80144d8:	f001 fa6a 	bl	80159b0 <pvTaskIncrementMutexHeldCount>
 80144dc:	4602      	mov	r2, r0
 80144de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00f      	beq.n	801450a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ec:	3310      	adds	r3, #16
 80144ee:	4618      	mov	r0, r3
 80144f0:	f000 fed0 	bl	8015294 <xTaskRemoveFromEventList>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80144fa:	4b54      	ldr	r3, [pc, #336]	; (801464c <xQueueSemaphoreTake+0x214>)
 80144fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014500:	601a      	str	r2, [r3, #0]
 8014502:	f3bf 8f4f 	dsb	sy
 8014506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801450a:	f001 fbef 	bl	8015cec <vPortExitCritical>
				return pdPASS;
 801450e:	2301      	movs	r3, #1
 8014510:	e097      	b.n	8014642 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d111      	bne.n	801453c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00a      	beq.n	8014534 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	617b      	str	r3, [r7, #20]
}
 8014530:	bf00      	nop
 8014532:	e7fe      	b.n	8014532 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014534:	f001 fbda 	bl	8015cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014538:	2300      	movs	r3, #0
 801453a:	e082      	b.n	8014642 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014542:	f107 030c 	add.w	r3, r7, #12
 8014546:	4618      	mov	r0, r3
 8014548:	f000 ff06 	bl	8015358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801454c:	2301      	movs	r3, #1
 801454e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014550:	f001 fbcc 	bl	8015cec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014554:	f000 fcb0 	bl	8014eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014558:	f001 fb98 	bl	8015c8c <vPortEnterCritical>
 801455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014562:	b25b      	sxtb	r3, r3
 8014564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014568:	d103      	bne.n	8014572 <xQueueSemaphoreTake+0x13a>
 801456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456c:	2200      	movs	r2, #0
 801456e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014578:	b25b      	sxtb	r3, r3
 801457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801457e:	d103      	bne.n	8014588 <xQueueSemaphoreTake+0x150>
 8014580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014582:	2200      	movs	r2, #0
 8014584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014588:	f001 fbb0 	bl	8015cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801458c:	463a      	mov	r2, r7
 801458e:	f107 030c 	add.w	r3, r7, #12
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f000 fef5 	bl	8015384 <xTaskCheckForTimeOut>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d132      	bne.n	8014606 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145a2:	f000 f9f1 	bl	8014988 <prvIsQueueEmpty>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d026      	beq.n	80145fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d109      	bne.n	80145c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80145b4:	f001 fb6a 	bl	8015c8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80145b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	4618      	mov	r0, r3
 80145be:	f001 f84b 	bl	8015658 <xTaskPriorityInherit>
 80145c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80145c4:	f001 fb92 	bl	8015cec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ca:	3324      	adds	r3, #36	; 0x24
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	4611      	mov	r1, r2
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 fe3b 	bl	801524c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145d8:	f000 f984 	bl	80148e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145dc:	f000 fc7a 	bl	8014ed4 <xTaskResumeAll>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f47f af68 	bne.w	80144b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80145e8:	4b18      	ldr	r3, [pc, #96]	; (801464c <xQueueSemaphoreTake+0x214>)
 80145ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	f3bf 8f4f 	dsb	sy
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	e75e      	b.n	80144b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80145fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145fc:	f000 f972 	bl	80148e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014600:	f000 fc68 	bl	8014ed4 <xTaskResumeAll>
 8014604:	e758      	b.n	80144b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014608:	f000 f96c 	bl	80148e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801460c:	f000 fc62 	bl	8014ed4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014612:	f000 f9b9 	bl	8014988 <prvIsQueueEmpty>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	f43f af4d 	beq.w	80144b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00d      	beq.n	8014640 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8014624:	f001 fb32 	bl	8015c8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801462a:	f000 f8b4 	bl	8014796 <prvGetDisinheritPriorityAfterTimeout>
 801462e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014636:	4618      	mov	r0, r3
 8014638:	f001 f91a 	bl	8015870 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801463c:	f001 fb56 	bl	8015cec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8014642:	4618      	mov	r0, r3
 8014644:	3738      	adds	r7, #56	; 0x38
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	e000ed04 	.word	0xe000ed04

08014650 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b08e      	sub	sp, #56	; 0x38
 8014654:	af00      	add	r7, sp, #0
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014662:	2b00      	cmp	r3, #0
 8014664:	d10a      	bne.n	801467c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801466a:	f383 8811 	msr	BASEPRI, r3
 801466e:	f3bf 8f6f 	isb	sy
 8014672:	f3bf 8f4f 	dsb	sy
 8014676:	623b      	str	r3, [r7, #32]
}
 8014678:	bf00      	nop
 801467a:	e7fe      	b.n	801467a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d103      	bne.n	801468a <xQueueReceiveFromISR+0x3a>
 8014682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014686:	2b00      	cmp	r3, #0
 8014688:	d101      	bne.n	801468e <xQueueReceiveFromISR+0x3e>
 801468a:	2301      	movs	r3, #1
 801468c:	e000      	b.n	8014690 <xQueueReceiveFromISR+0x40>
 801468e:	2300      	movs	r3, #0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10a      	bne.n	80146aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014698:	f383 8811 	msr	BASEPRI, r3
 801469c:	f3bf 8f6f 	isb	sy
 80146a0:	f3bf 8f4f 	dsb	sy
 80146a4:	61fb      	str	r3, [r7, #28]
}
 80146a6:	bf00      	nop
 80146a8:	e7fe      	b.n	80146a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146aa:	f001 fbb1 	bl	8015e10 <vPortValidateInterruptPriority>
	__asm volatile
 80146ae:	f3ef 8211 	mrs	r2, BASEPRI
 80146b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b6:	f383 8811 	msr	BASEPRI, r3
 80146ba:	f3bf 8f6f 	isb	sy
 80146be:	f3bf 8f4f 	dsb	sy
 80146c2:	61ba      	str	r2, [r7, #24]
 80146c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d02f      	beq.n	8014736 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80146d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146e0:	68b9      	ldr	r1, [r7, #8]
 80146e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146e4:	f000 f8d8 	bl	8014898 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ea:	1e5a      	subs	r2, r3, #1
 80146ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80146f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80146f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146f8:	d112      	bne.n	8014720 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	691b      	ldr	r3, [r3, #16]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d016      	beq.n	8014730 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014704:	3310      	adds	r3, #16
 8014706:	4618      	mov	r0, r3
 8014708:	f000 fdc4 	bl	8015294 <xTaskRemoveFromEventList>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d00e      	beq.n	8014730 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00b      	beq.n	8014730 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2201      	movs	r2, #1
 801471c:	601a      	str	r2, [r3, #0]
 801471e:	e007      	b.n	8014730 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014724:	3301      	adds	r3, #1
 8014726:	b2db      	uxtb	r3, r3
 8014728:	b25a      	sxtb	r2, r3
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014730:	2301      	movs	r3, #1
 8014732:	637b      	str	r3, [r7, #52]	; 0x34
 8014734:	e001      	b.n	801473a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014736:	2300      	movs	r3, #0
 8014738:	637b      	str	r3, [r7, #52]	; 0x34
 801473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	f383 8811 	msr	BASEPRI, r3
}
 8014744:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014748:	4618      	mov	r0, r3
 801474a:	3738      	adds	r7, #56	; 0x38
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d10a      	bne.n	8014778 <vQueueDelete+0x28>
	__asm volatile
 8014762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014766:	f383 8811 	msr	BASEPRI, r3
 801476a:	f3bf 8f6f 	isb	sy
 801476e:	f3bf 8f4f 	dsb	sy
 8014772:	60bb      	str	r3, [r7, #8]
}
 8014774:	bf00      	nop
 8014776:	e7fe      	b.n	8014776 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f000 f933 	bl	80149e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014784:	2b00      	cmp	r3, #0
 8014786:	d102      	bne.n	801478e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8014788:	68f8      	ldr	r0, [r7, #12]
 801478a:	f001 fc43 	bl	8016014 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801478e:	bf00      	nop
 8014790:	3710      	adds	r7, #16
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014796:	b480      	push	{r7}
 8014798:	b085      	sub	sp, #20
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d006      	beq.n	80147b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f1c3 0307 	rsb	r3, r3, #7
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	e001      	b.n	80147b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80147b4:	2300      	movs	r3, #0
 80147b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80147b8:	68fb      	ldr	r3, [r7, #12]
	}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3714      	adds	r7, #20
 80147be:	46bd      	mov	sp, r7
 80147c0:	bc80      	pop	{r7}
 80147c2:	4770      	bx	lr

080147c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80147d0:	2300      	movs	r3, #0
 80147d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10d      	bne.n	80147fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d14d      	bne.n	8014886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	f000 ffb8 	bl	8015764 <xTaskPriorityDisinherit>
 80147f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	605a      	str	r2, [r3, #4]
 80147fc:	e043      	b.n	8014886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d119      	bne.n	8014838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6898      	ldr	r0, [r3, #8]
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480c:	461a      	mov	r2, r3
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	f002 f988 	bl	8016b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	689a      	ldr	r2, [r3, #8]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801481c:	441a      	add	r2, r3
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	689a      	ldr	r2, [r3, #8]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	429a      	cmp	r2, r3
 801482c:	d32b      	bcc.n	8014886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	609a      	str	r2, [r3, #8]
 8014836:	e026      	b.n	8014886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	68d8      	ldr	r0, [r3, #12]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014840:	461a      	mov	r2, r3
 8014842:	68b9      	ldr	r1, [r7, #8]
 8014844:	f002 f96e 	bl	8016b24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	68da      	ldr	r2, [r3, #12]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014850:	425b      	negs	r3, r3
 8014852:	441a      	add	r2, r3
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	68da      	ldr	r2, [r3, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d207      	bcs.n	8014874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	685a      	ldr	r2, [r3, #4]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486c:	425b      	negs	r3, r3
 801486e:	441a      	add	r2, r3
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b02      	cmp	r3, #2
 8014878:	d105      	bne.n	8014886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d002      	beq.n	8014886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	3b01      	subs	r3, #1
 8014884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801488e:	697b      	ldr	r3, [r7, #20]
}
 8014890:	4618      	mov	r0, r3
 8014892:	3718      	adds	r7, #24
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d018      	beq.n	80148dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68da      	ldr	r2, [r3, #12]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148b2:	441a      	add	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68da      	ldr	r2, [r3, #12]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d303      	bcc.n	80148cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	68d9      	ldr	r1, [r3, #12]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148d4:	461a      	mov	r2, r3
 80148d6:	6838      	ldr	r0, [r7, #0]
 80148d8:	f002 f924 	bl	8016b24 <memcpy>
	}
}
 80148dc:	bf00      	nop
 80148de:	3708      	adds	r7, #8
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148ec:	f001 f9ce 	bl	8015c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148f8:	e011      	b.n	801491e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d012      	beq.n	8014928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	3324      	adds	r3, #36	; 0x24
 8014906:	4618      	mov	r0, r3
 8014908:	f000 fcc4 	bl	8015294 <xTaskRemoveFromEventList>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d001      	beq.n	8014916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014912:	f000 fd99 	bl	8015448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014916:	7bfb      	ldrb	r3, [r7, #15]
 8014918:	3b01      	subs	r3, #1
 801491a:	b2db      	uxtb	r3, r3
 801491c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014922:	2b00      	cmp	r3, #0
 8014924:	dce9      	bgt.n	80148fa <prvUnlockQueue+0x16>
 8014926:	e000      	b.n	801492a <prvUnlockQueue+0x46>
					break;
 8014928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	22ff      	movs	r2, #255	; 0xff
 801492e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014932:	f001 f9db 	bl	8015cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014936:	f001 f9a9 	bl	8015c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014942:	e011      	b.n	8014968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	691b      	ldr	r3, [r3, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d012      	beq.n	8014972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3310      	adds	r3, #16
 8014950:	4618      	mov	r0, r3
 8014952:	f000 fc9f 	bl	8015294 <xTaskRemoveFromEventList>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801495c:	f000 fd74 	bl	8015448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014960:	7bbb      	ldrb	r3, [r7, #14]
 8014962:	3b01      	subs	r3, #1
 8014964:	b2db      	uxtb	r3, r3
 8014966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801496c:	2b00      	cmp	r3, #0
 801496e:	dce9      	bgt.n	8014944 <prvUnlockQueue+0x60>
 8014970:	e000      	b.n	8014974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	22ff      	movs	r2, #255	; 0xff
 8014978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801497c:	f001 f9b6 	bl	8015cec <vPortExitCritical>
}
 8014980:	bf00      	nop
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014990:	f001 f97c 	bl	8015c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014998:	2b00      	cmp	r3, #0
 801499a:	d102      	bne.n	80149a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801499c:	2301      	movs	r3, #1
 801499e:	60fb      	str	r3, [r7, #12]
 80149a0:	e001      	b.n	80149a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80149a2:	2300      	movs	r3, #0
 80149a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80149a6:	f001 f9a1 	bl	8015cec <vPortExitCritical>

	return xReturn;
 80149aa:	68fb      	ldr	r3, [r7, #12]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80149bc:	f001 f966 	bl	8015c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d102      	bne.n	80149d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80149cc:	2301      	movs	r3, #1
 80149ce:	60fb      	str	r3, [r7, #12]
 80149d0:	e001      	b.n	80149d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80149d2:	2300      	movs	r3, #0
 80149d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80149d6:	f001 f989 	bl	8015cec <vPortExitCritical>

	return xReturn;
 80149da:	68fb      	ldr	r3, [r7, #12]
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3710      	adds	r7, #16
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80149e4:	b480      	push	{r7}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149ec:	2300      	movs	r3, #0
 80149ee:	60fb      	str	r3, [r7, #12]
 80149f0:	e016      	b.n	8014a20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80149f2:	4a10      	ldr	r2, [pc, #64]	; (8014a34 <vQueueUnregisterQueue+0x50>)
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	00db      	lsls	r3, r3, #3
 80149f8:	4413      	add	r3, r2
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d10b      	bne.n	8014a1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014a02:	4a0c      	ldr	r2, [pc, #48]	; (8014a34 <vQueueUnregisterQueue+0x50>)
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2100      	movs	r1, #0
 8014a08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014a0c:	4a09      	ldr	r2, [pc, #36]	; (8014a34 <vQueueUnregisterQueue+0x50>)
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	4413      	add	r3, r2
 8014a14:	2200      	movs	r2, #0
 8014a16:	605a      	str	r2, [r3, #4]
				break;
 8014a18:	e006      	b.n	8014a28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2b07      	cmp	r3, #7
 8014a24:	d9e5      	bls.n	80149f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014a26:	bf00      	nop
 8014a28:	bf00      	nop
 8014a2a:	3714      	adds	r7, #20
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bc80      	pop	{r7}
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	2000df80 	.word	0x2000df80

08014a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b08e      	sub	sp, #56	; 0x38
 8014a3c:	af04      	add	r7, sp, #16
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d10a      	bne.n	8014a62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a50:	f383 8811 	msr	BASEPRI, r3
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	f3bf 8f4f 	dsb	sy
 8014a5c:	623b      	str	r3, [r7, #32]
}
 8014a5e:	bf00      	nop
 8014a60:	e7fe      	b.n	8014a60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d10a      	bne.n	8014a7e <xTaskCreateStatic+0x46>
	__asm volatile
 8014a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a6c:	f383 8811 	msr	BASEPRI, r3
 8014a70:	f3bf 8f6f 	isb	sy
 8014a74:	f3bf 8f4f 	dsb	sy
 8014a78:	61fb      	str	r3, [r7, #28]
}
 8014a7a:	bf00      	nop
 8014a7c:	e7fe      	b.n	8014a7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a7e:	23b4      	movs	r3, #180	; 0xb4
 8014a80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	2bb4      	cmp	r3, #180	; 0xb4
 8014a86:	d00a      	beq.n	8014a9e <xTaskCreateStatic+0x66>
	__asm volatile
 8014a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a8c:	f383 8811 	msr	BASEPRI, r3
 8014a90:	f3bf 8f6f 	isb	sy
 8014a94:	f3bf 8f4f 	dsb	sy
 8014a98:	61bb      	str	r3, [r7, #24]
}
 8014a9a:	bf00      	nop
 8014a9c:	e7fe      	b.n	8014a9c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d01e      	beq.n	8014ae2 <xTaskCreateStatic+0xaa>
 8014aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d01b      	beq.n	8014ae2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ab2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab6:	2202      	movs	r2, #2
 8014ab8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014abc:	2300      	movs	r3, #0
 8014abe:	9303      	str	r3, [sp, #12]
 8014ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac2:	9302      	str	r3, [sp, #8]
 8014ac4:	f107 0314 	add.w	r3, r7, #20
 8014ac8:	9301      	str	r3, [sp, #4]
 8014aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	68b9      	ldr	r1, [r7, #8]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f000 f851 	bl	8014b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014adc:	f000 f8e4 	bl	8014ca8 <prvAddNewTaskToReadyList>
 8014ae0:	e001      	b.n	8014ae6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014ae6:	697b      	ldr	r3, [r7, #20]
	}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3728      	adds	r7, #40	; 0x28
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b08c      	sub	sp, #48	; 0x30
 8014af4:	af04      	add	r7, sp, #16
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	603b      	str	r3, [r7, #0]
 8014afc:	4613      	mov	r3, r2
 8014afe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b00:	88fb      	ldrh	r3, [r7, #6]
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4618      	mov	r0, r3
 8014b06:	f001 f9c1 	bl	8015e8c <pvPortMalloc>
 8014b0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00e      	beq.n	8014b30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014b12:	20b4      	movs	r0, #180	; 0xb4
 8014b14:	f001 f9ba 	bl	8015e8c <pvPortMalloc>
 8014b18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d003      	beq.n	8014b28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	697a      	ldr	r2, [r7, #20]
 8014b24:	631a      	str	r2, [r3, #48]	; 0x30
 8014b26:	e005      	b.n	8014b34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b28:	6978      	ldr	r0, [r7, #20]
 8014b2a:	f001 fa73 	bl	8016014 <vPortFree>
 8014b2e:	e001      	b.n	8014b34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b30:	2300      	movs	r3, #0
 8014b32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d017      	beq.n	8014b6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014b42:	88fa      	ldrh	r2, [r7, #6]
 8014b44:	2300      	movs	r3, #0
 8014b46:	9303      	str	r3, [sp, #12]
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	9302      	str	r3, [sp, #8]
 8014b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	68b9      	ldr	r1, [r7, #8]
 8014b58:	68f8      	ldr	r0, [r7, #12]
 8014b5a:	f000 f80f 	bl	8014b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b5e:	69f8      	ldr	r0, [r7, #28]
 8014b60:	f000 f8a2 	bl	8014ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b64:	2301      	movs	r3, #1
 8014b66:	61bb      	str	r3, [r7, #24]
 8014b68:	e002      	b.n	8014b70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b70:	69bb      	ldr	r3, [r7, #24]
	}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3720      	adds	r7, #32
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
	...

08014b7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b088      	sub	sp, #32
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	60b9      	str	r1, [r7, #8]
 8014b86:	607a      	str	r2, [r7, #4]
 8014b88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8014b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014b94:	3b01      	subs	r3, #1
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	4413      	add	r3, r2
 8014b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	f023 0307 	bic.w	r3, r3, #7
 8014ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	f003 0307 	and.w	r3, r3, #7
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00a      	beq.n	8014bc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8014bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb2:	f383 8811 	msr	BASEPRI, r3
 8014bb6:	f3bf 8f6f 	isb	sy
 8014bba:	f3bf 8f4f 	dsb	sy
 8014bbe:	617b      	str	r3, [r7, #20]
}
 8014bc0:	bf00      	nop
 8014bc2:	e7fe      	b.n	8014bc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	61fb      	str	r3, [r7, #28]
 8014bc8:	e012      	b.n	8014bf0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	4413      	add	r3, r2
 8014bd0:	7819      	ldrb	r1, [r3, #0]
 8014bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	4413      	add	r3, r2
 8014bd8:	3334      	adds	r3, #52	; 0x34
 8014bda:	460a      	mov	r2, r1
 8014bdc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8014bde:	68ba      	ldr	r2, [r7, #8]
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	4413      	add	r3, r2
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d006      	beq.n	8014bf8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	3301      	adds	r3, #1
 8014bee:	61fb      	str	r3, [r7, #28]
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	2b0f      	cmp	r3, #15
 8014bf4:	d9e9      	bls.n	8014bca <prvInitialiseNewTask+0x4e>
 8014bf6:	e000      	b.n	8014bfa <prvInitialiseNewTask+0x7e>
		{
			break;
 8014bf8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c04:	2b06      	cmp	r3, #6
 8014c06:	d901      	bls.n	8014c0c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c08:	2306      	movs	r3, #6
 8014c0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c20:	3304      	adds	r3, #4
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fe ff37 	bl	8013a96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2a:	3318      	adds	r3, #24
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fe ff32 	bl	8013a96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c3a:	f1c3 0207 	rsb	r2, r3, #7
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c52:	2200      	movs	r2, #0
 8014c54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5a:	334c      	adds	r3, #76	; 0x4c
 8014c5c:	2260      	movs	r2, #96	; 0x60
 8014c5e:	2100      	movs	r1, #0
 8014c60:	4618      	mov	r0, r3
 8014c62:	f001 ff6d 	bl	8016b40 <memset>
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	4a0c      	ldr	r2, [pc, #48]	; (8014c9c <prvInitialiseNewTask+0x120>)
 8014c6a:	651a      	str	r2, [r3, #80]	; 0x50
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6e:	4a0c      	ldr	r2, [pc, #48]	; (8014ca0 <prvInitialiseNewTask+0x124>)
 8014c70:	655a      	str	r2, [r3, #84]	; 0x54
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	4a0b      	ldr	r2, [pc, #44]	; (8014ca4 <prvInitialiseNewTask+0x128>)
 8014c76:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c78:	683a      	ldr	r2, [r7, #0]
 8014c7a:	68f9      	ldr	r1, [r7, #12]
 8014c7c:	69b8      	ldr	r0, [r7, #24]
 8014c7e:	f000 ff11 	bl	8015aa4 <pxPortInitialiseStack>
 8014c82:	4602      	mov	r2, r0
 8014c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8014c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d002      	beq.n	8014c94 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c94:	bf00      	nop
 8014c96:	3720      	adds	r7, #32
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	0801b410 	.word	0x0801b410
 8014ca0:	0801b430 	.word	0x0801b430
 8014ca4:	0801b3f0 	.word	0x0801b3f0

08014ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014cb0:	f000 ffec 	bl	8015c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014cb4:	4b2a      	ldr	r3, [pc, #168]	; (8014d60 <prvAddNewTaskToReadyList+0xb8>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	4a29      	ldr	r2, [pc, #164]	; (8014d60 <prvAddNewTaskToReadyList+0xb8>)
 8014cbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014cbe:	4b29      	ldr	r3, [pc, #164]	; (8014d64 <prvAddNewTaskToReadyList+0xbc>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d109      	bne.n	8014cda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014cc6:	4a27      	ldr	r2, [pc, #156]	; (8014d64 <prvAddNewTaskToReadyList+0xbc>)
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014ccc:	4b24      	ldr	r3, [pc, #144]	; (8014d60 <prvAddNewTaskToReadyList+0xb8>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d110      	bne.n	8014cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014cd4:	f000 fbdc 	bl	8015490 <prvInitialiseTaskLists>
 8014cd8:	e00d      	b.n	8014cf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014cda:	4b23      	ldr	r3, [pc, #140]	; (8014d68 <prvAddNewTaskToReadyList+0xc0>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d109      	bne.n	8014cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014ce2:	4b20      	ldr	r3, [pc, #128]	; (8014d64 <prvAddNewTaskToReadyList+0xbc>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d802      	bhi.n	8014cf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014cf0:	4a1c      	ldr	r2, [pc, #112]	; (8014d64 <prvAddNewTaskToReadyList+0xbc>)
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014cf6:	4b1d      	ldr	r3, [pc, #116]	; (8014d6c <prvAddNewTaskToReadyList+0xc4>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	4a1b      	ldr	r2, [pc, #108]	; (8014d6c <prvAddNewTaskToReadyList+0xc4>)
 8014cfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d04:	2201      	movs	r2, #1
 8014d06:	409a      	lsls	r2, r3
 8014d08:	4b19      	ldr	r3, [pc, #100]	; (8014d70 <prvAddNewTaskToReadyList+0xc8>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4313      	orrs	r3, r2
 8014d0e:	4a18      	ldr	r2, [pc, #96]	; (8014d70 <prvAddNewTaskToReadyList+0xc8>)
 8014d10:	6013      	str	r3, [r2, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d16:	4613      	mov	r3, r2
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	4413      	add	r3, r2
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	4a15      	ldr	r2, [pc, #84]	; (8014d74 <prvAddNewTaskToReadyList+0xcc>)
 8014d20:	441a      	add	r2, r3
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	3304      	adds	r3, #4
 8014d26:	4619      	mov	r1, r3
 8014d28:	4610      	mov	r0, r2
 8014d2a:	f7fe fec0 	bl	8013aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d2e:	f000 ffdd 	bl	8015cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d32:	4b0d      	ldr	r3, [pc, #52]	; (8014d68 <prvAddNewTaskToReadyList+0xc0>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d00e      	beq.n	8014d58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d3a:	4b0a      	ldr	r3, [pc, #40]	; (8014d64 <prvAddNewTaskToReadyList+0xbc>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d207      	bcs.n	8014d58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d48:	4b0b      	ldr	r3, [pc, #44]	; (8014d78 <prvAddNewTaskToReadyList+0xd0>)
 8014d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d4e:	601a      	str	r2, [r3, #0]
 8014d50:	f3bf 8f4f 	dsb	sy
 8014d54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d58:	bf00      	nop
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	20005998 	.word	0x20005998
 8014d64:	20005898 	.word	0x20005898
 8014d68:	200059a4 	.word	0x200059a4
 8014d6c:	200059b4 	.word	0x200059b4
 8014d70:	200059a0 	.word	0x200059a0
 8014d74:	2000589c 	.word	0x2000589c
 8014d78:	e000ed04 	.word	0xe000ed04

08014d7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d84:	2300      	movs	r3, #0
 8014d86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d017      	beq.n	8014dbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d8e:	4b13      	ldr	r3, [pc, #76]	; (8014ddc <vTaskDelay+0x60>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00a      	beq.n	8014dac <vTaskDelay+0x30>
	__asm volatile
 8014d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d9a:	f383 8811 	msr	BASEPRI, r3
 8014d9e:	f3bf 8f6f 	isb	sy
 8014da2:	f3bf 8f4f 	dsb	sy
 8014da6:	60bb      	str	r3, [r7, #8]
}
 8014da8:	bf00      	nop
 8014daa:	e7fe      	b.n	8014daa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014dac:	f000 f884 	bl	8014eb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014db0:	2100      	movs	r1, #0
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f000 fe10 	bl	80159d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014db8:	f000 f88c 	bl	8014ed4 <xTaskResumeAll>
 8014dbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d107      	bne.n	8014dd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014dc4:	4b06      	ldr	r3, [pc, #24]	; (8014de0 <vTaskDelay+0x64>)
 8014dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dca:	601a      	str	r2, [r3, #0]
 8014dcc:	f3bf 8f4f 	dsb	sy
 8014dd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014dd4:	bf00      	nop
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	200059c0 	.word	0x200059c0
 8014de0:	e000ed04 	.word	0xe000ed04

08014de4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08a      	sub	sp, #40	; 0x28
 8014de8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014dea:	2300      	movs	r3, #0
 8014dec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014dee:	2300      	movs	r3, #0
 8014df0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014df2:	463a      	mov	r2, r7
 8014df4:	1d39      	adds	r1, r7, #4
 8014df6:	f107 0308 	add.w	r3, r7, #8
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7ec fb3c 	bl	8001478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014e00:	6839      	ldr	r1, [r7, #0]
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	68ba      	ldr	r2, [r7, #8]
 8014e06:	9202      	str	r2, [sp, #8]
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	2300      	movs	r3, #0
 8014e10:	460a      	mov	r2, r1
 8014e12:	4921      	ldr	r1, [pc, #132]	; (8014e98 <vTaskStartScheduler+0xb4>)
 8014e14:	4821      	ldr	r0, [pc, #132]	; (8014e9c <vTaskStartScheduler+0xb8>)
 8014e16:	f7ff fe0f 	bl	8014a38 <xTaskCreateStatic>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	4a20      	ldr	r2, [pc, #128]	; (8014ea0 <vTaskStartScheduler+0xbc>)
 8014e1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014e20:	4b1f      	ldr	r3, [pc, #124]	; (8014ea0 <vTaskStartScheduler+0xbc>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d002      	beq.n	8014e2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	e001      	b.n	8014e32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d11b      	bne.n	8014e70 <vTaskStartScheduler+0x8c>
	__asm volatile
 8014e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e3c:	f383 8811 	msr	BASEPRI, r3
 8014e40:	f3bf 8f6f 	isb	sy
 8014e44:	f3bf 8f4f 	dsb	sy
 8014e48:	613b      	str	r3, [r7, #16]
}
 8014e4a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014e4c:	4b15      	ldr	r3, [pc, #84]	; (8014ea4 <vTaskStartScheduler+0xc0>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	334c      	adds	r3, #76	; 0x4c
 8014e52:	4a15      	ldr	r2, [pc, #84]	; (8014ea8 <vTaskStartScheduler+0xc4>)
 8014e54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014e56:	4b15      	ldr	r3, [pc, #84]	; (8014eac <vTaskStartScheduler+0xc8>)
 8014e58:	f04f 32ff 	mov.w	r2, #4294967295
 8014e5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014e5e:	4b14      	ldr	r3, [pc, #80]	; (8014eb0 <vTaskStartScheduler+0xcc>)
 8014e60:	2201      	movs	r2, #1
 8014e62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8014e64:	4b13      	ldr	r3, [pc, #76]	; (8014eb4 <vTaskStartScheduler+0xd0>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014e6a:	f000 fe9d 	bl	8015ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014e6e:	e00e      	b.n	8014e8e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e76:	d10a      	bne.n	8014e8e <vTaskStartScheduler+0xaa>
	__asm volatile
 8014e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7c:	f383 8811 	msr	BASEPRI, r3
 8014e80:	f3bf 8f6f 	isb	sy
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	60fb      	str	r3, [r7, #12]
}
 8014e8a:	bf00      	nop
 8014e8c:	e7fe      	b.n	8014e8c <vTaskStartScheduler+0xa8>
}
 8014e8e:	bf00      	nop
 8014e90:	3718      	adds	r7, #24
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	0801b330 	.word	0x0801b330
 8014e9c:	08015461 	.word	0x08015461
 8014ea0:	200059bc 	.word	0x200059bc
 8014ea4:	20005898 	.word	0x20005898
 8014ea8:	20000294 	.word	0x20000294
 8014eac:	200059b8 	.word	0x200059b8
 8014eb0:	200059a4 	.word	0x200059a4
 8014eb4:	2000599c 	.word	0x2000599c

08014eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014eb8:	b480      	push	{r7}
 8014eba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014ebc:	4b04      	ldr	r3, [pc, #16]	; (8014ed0 <vTaskSuspendAll+0x18>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	4a03      	ldr	r2, [pc, #12]	; (8014ed0 <vTaskSuspendAll+0x18>)
 8014ec4:	6013      	str	r3, [r2, #0]
}
 8014ec6:	bf00      	nop
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bc80      	pop	{r7}
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	200059c0 	.word	0x200059c0

08014ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b084      	sub	sp, #16
 8014ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014eda:	2300      	movs	r3, #0
 8014edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014ee2:	4b41      	ldr	r3, [pc, #260]	; (8014fe8 <xTaskResumeAll+0x114>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d10a      	bne.n	8014f00 <xTaskResumeAll+0x2c>
	__asm volatile
 8014eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	603b      	str	r3, [r7, #0]
}
 8014efc:	bf00      	nop
 8014efe:	e7fe      	b.n	8014efe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014f00:	f000 fec4 	bl	8015c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014f04:	4b38      	ldr	r3, [pc, #224]	; (8014fe8 <xTaskResumeAll+0x114>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	4a37      	ldr	r2, [pc, #220]	; (8014fe8 <xTaskResumeAll+0x114>)
 8014f0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f0e:	4b36      	ldr	r3, [pc, #216]	; (8014fe8 <xTaskResumeAll+0x114>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d161      	bne.n	8014fda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014f16:	4b35      	ldr	r3, [pc, #212]	; (8014fec <xTaskResumeAll+0x118>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d05d      	beq.n	8014fda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f1e:	e02e      	b.n	8014f7e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014f20:	4b33      	ldr	r3, [pc, #204]	; (8014ff0 <xTaskResumeAll+0x11c>)
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	3318      	adds	r3, #24
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7fe fe19 	bl	8013b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	3304      	adds	r3, #4
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7fe fe14 	bl	8013b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f40:	2201      	movs	r2, #1
 8014f42:	409a      	lsls	r2, r3
 8014f44:	4b2b      	ldr	r3, [pc, #172]	; (8014ff4 <xTaskResumeAll+0x120>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	4313      	orrs	r3, r2
 8014f4a:	4a2a      	ldr	r2, [pc, #168]	; (8014ff4 <xTaskResumeAll+0x120>)
 8014f4c:	6013      	str	r3, [r2, #0]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f52:	4613      	mov	r3, r2
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	4413      	add	r3, r2
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	4a27      	ldr	r2, [pc, #156]	; (8014ff8 <xTaskResumeAll+0x124>)
 8014f5c:	441a      	add	r2, r3
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3304      	adds	r3, #4
 8014f62:	4619      	mov	r1, r3
 8014f64:	4610      	mov	r0, r2
 8014f66:	f7fe fda2 	bl	8013aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f6e:	4b23      	ldr	r3, [pc, #140]	; (8014ffc <xTaskResumeAll+0x128>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d302      	bcc.n	8014f7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014f78:	4b21      	ldr	r3, [pc, #132]	; (8015000 <xTaskResumeAll+0x12c>)
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f7e:	4b1c      	ldr	r3, [pc, #112]	; (8014ff0 <xTaskResumeAll+0x11c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1cc      	bne.n	8014f20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014f8c:	f000 fb22 	bl	80155d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014f90:	4b1c      	ldr	r3, [pc, #112]	; (8015004 <xTaskResumeAll+0x130>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d010      	beq.n	8014fbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014f9c:	f000 f836 	bl	801500c <xTaskIncrementTick>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d002      	beq.n	8014fac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014fa6:	4b16      	ldr	r3, [pc, #88]	; (8015000 <xTaskResumeAll+0x12c>)
 8014fa8:	2201      	movs	r2, #1
 8014faa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	3b01      	subs	r3, #1
 8014fb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1f1      	bne.n	8014f9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8014fb8:	4b12      	ldr	r3, [pc, #72]	; (8015004 <xTaskResumeAll+0x130>)
 8014fba:	2200      	movs	r2, #0
 8014fbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014fbe:	4b10      	ldr	r3, [pc, #64]	; (8015000 <xTaskResumeAll+0x12c>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d009      	beq.n	8014fda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014fca:	4b0f      	ldr	r3, [pc, #60]	; (8015008 <xTaskResumeAll+0x134>)
 8014fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fd0:	601a      	str	r2, [r3, #0]
 8014fd2:	f3bf 8f4f 	dsb	sy
 8014fd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fda:	f000 fe87 	bl	8015cec <vPortExitCritical>

	return xAlreadyYielded;
 8014fde:	68bb      	ldr	r3, [r7, #8]
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	200059c0 	.word	0x200059c0
 8014fec:	20005998 	.word	0x20005998
 8014ff0:	20005958 	.word	0x20005958
 8014ff4:	200059a0 	.word	0x200059a0
 8014ff8:	2000589c 	.word	0x2000589c
 8014ffc:	20005898 	.word	0x20005898
 8015000:	200059ac 	.word	0x200059ac
 8015004:	200059a8 	.word	0x200059a8
 8015008:	e000ed04 	.word	0xe000ed04

0801500c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b086      	sub	sp, #24
 8015010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015012:	2300      	movs	r3, #0
 8015014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015016:	4b51      	ldr	r3, [pc, #324]	; (801515c <xTaskIncrementTick+0x150>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	f040 808d 	bne.w	801513a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015020:	4b4f      	ldr	r3, [pc, #316]	; (8015160 <xTaskIncrementTick+0x154>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	3301      	adds	r3, #1
 8015026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015028:	4a4d      	ldr	r2, [pc, #308]	; (8015160 <xTaskIncrementTick+0x154>)
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d120      	bne.n	8015076 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015034:	4b4b      	ldr	r3, [pc, #300]	; (8015164 <xTaskIncrementTick+0x158>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d00a      	beq.n	8015054 <xTaskIncrementTick+0x48>
	__asm volatile
 801503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015042:	f383 8811 	msr	BASEPRI, r3
 8015046:	f3bf 8f6f 	isb	sy
 801504a:	f3bf 8f4f 	dsb	sy
 801504e:	603b      	str	r3, [r7, #0]
}
 8015050:	bf00      	nop
 8015052:	e7fe      	b.n	8015052 <xTaskIncrementTick+0x46>
 8015054:	4b43      	ldr	r3, [pc, #268]	; (8015164 <xTaskIncrementTick+0x158>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	60fb      	str	r3, [r7, #12]
 801505a:	4b43      	ldr	r3, [pc, #268]	; (8015168 <xTaskIncrementTick+0x15c>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	4a41      	ldr	r2, [pc, #260]	; (8015164 <xTaskIncrementTick+0x158>)
 8015060:	6013      	str	r3, [r2, #0]
 8015062:	4a41      	ldr	r2, [pc, #260]	; (8015168 <xTaskIncrementTick+0x15c>)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	6013      	str	r3, [r2, #0]
 8015068:	4b40      	ldr	r3, [pc, #256]	; (801516c <xTaskIncrementTick+0x160>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3301      	adds	r3, #1
 801506e:	4a3f      	ldr	r2, [pc, #252]	; (801516c <xTaskIncrementTick+0x160>)
 8015070:	6013      	str	r3, [r2, #0]
 8015072:	f000 faaf 	bl	80155d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015076:	4b3e      	ldr	r3, [pc, #248]	; (8015170 <xTaskIncrementTick+0x164>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	693a      	ldr	r2, [r7, #16]
 801507c:	429a      	cmp	r2, r3
 801507e:	d34d      	bcc.n	801511c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015080:	4b38      	ldr	r3, [pc, #224]	; (8015164 <xTaskIncrementTick+0x158>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d101      	bne.n	801508e <xTaskIncrementTick+0x82>
 801508a:	2301      	movs	r3, #1
 801508c:	e000      	b.n	8015090 <xTaskIncrementTick+0x84>
 801508e:	2300      	movs	r3, #0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d004      	beq.n	801509e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015094:	4b36      	ldr	r3, [pc, #216]	; (8015170 <xTaskIncrementTick+0x164>)
 8015096:	f04f 32ff 	mov.w	r2, #4294967295
 801509a:	601a      	str	r2, [r3, #0]
					break;
 801509c:	e03e      	b.n	801511c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801509e:	4b31      	ldr	r3, [pc, #196]	; (8015164 <xTaskIncrementTick+0x158>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	68db      	ldr	r3, [r3, #12]
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80150ae:	693a      	ldr	r2, [r7, #16]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d203      	bcs.n	80150be <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80150b6:	4a2e      	ldr	r2, [pc, #184]	; (8015170 <xTaskIncrementTick+0x164>)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6013      	str	r3, [r2, #0]
						break;
 80150bc:	e02e      	b.n	801511c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	3304      	adds	r3, #4
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fe fd4e 	bl	8013b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d004      	beq.n	80150da <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	3318      	adds	r3, #24
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7fe fd45 	bl	8013b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150de:	2201      	movs	r2, #1
 80150e0:	409a      	lsls	r2, r3
 80150e2:	4b24      	ldr	r3, [pc, #144]	; (8015174 <xTaskIncrementTick+0x168>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4313      	orrs	r3, r2
 80150e8:	4a22      	ldr	r2, [pc, #136]	; (8015174 <xTaskIncrementTick+0x168>)
 80150ea:	6013      	str	r3, [r2, #0]
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f0:	4613      	mov	r3, r2
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	4413      	add	r3, r2
 80150f6:	009b      	lsls	r3, r3, #2
 80150f8:	4a1f      	ldr	r2, [pc, #124]	; (8015178 <xTaskIncrementTick+0x16c>)
 80150fa:	441a      	add	r2, r3
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	3304      	adds	r3, #4
 8015100:	4619      	mov	r1, r3
 8015102:	4610      	mov	r0, r2
 8015104:	f7fe fcd3 	bl	8013aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801510c:	4b1b      	ldr	r3, [pc, #108]	; (801517c <xTaskIncrementTick+0x170>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015112:	429a      	cmp	r2, r3
 8015114:	d3b4      	bcc.n	8015080 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015116:	2301      	movs	r3, #1
 8015118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801511a:	e7b1      	b.n	8015080 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801511c:	4b17      	ldr	r3, [pc, #92]	; (801517c <xTaskIncrementTick+0x170>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015122:	4915      	ldr	r1, [pc, #84]	; (8015178 <xTaskIncrementTick+0x16c>)
 8015124:	4613      	mov	r3, r2
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	4413      	add	r3, r2
 801512a:	009b      	lsls	r3, r3, #2
 801512c:	440b      	add	r3, r1
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b01      	cmp	r3, #1
 8015132:	d907      	bls.n	8015144 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8015134:	2301      	movs	r3, #1
 8015136:	617b      	str	r3, [r7, #20]
 8015138:	e004      	b.n	8015144 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801513a:	4b11      	ldr	r3, [pc, #68]	; (8015180 <xTaskIncrementTick+0x174>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	3301      	adds	r3, #1
 8015140:	4a0f      	ldr	r2, [pc, #60]	; (8015180 <xTaskIncrementTick+0x174>)
 8015142:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015144:	4b0f      	ldr	r3, [pc, #60]	; (8015184 <xTaskIncrementTick+0x178>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d001      	beq.n	8015150 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 801514c:	2301      	movs	r3, #1
 801514e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015150:	697b      	ldr	r3, [r7, #20]
}
 8015152:	4618      	mov	r0, r3
 8015154:	3718      	adds	r7, #24
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	200059c0 	.word	0x200059c0
 8015160:	2000599c 	.word	0x2000599c
 8015164:	20005950 	.word	0x20005950
 8015168:	20005954 	.word	0x20005954
 801516c:	200059b0 	.word	0x200059b0
 8015170:	200059b8 	.word	0x200059b8
 8015174:	200059a0 	.word	0x200059a0
 8015178:	2000589c 	.word	0x2000589c
 801517c:	20005898 	.word	0x20005898
 8015180:	200059a8 	.word	0x200059a8
 8015184:	200059ac 	.word	0x200059ac

08015188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801518e:	4b29      	ldr	r3, [pc, #164]	; (8015234 <vTaskSwitchContext+0xac>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d003      	beq.n	801519e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015196:	4b28      	ldr	r3, [pc, #160]	; (8015238 <vTaskSwitchContext+0xb0>)
 8015198:	2201      	movs	r2, #1
 801519a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801519c:	e044      	b.n	8015228 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801519e:	4b26      	ldr	r3, [pc, #152]	; (8015238 <vTaskSwitchContext+0xb0>)
 80151a0:	2200      	movs	r2, #0
 80151a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80151a4:	4b25      	ldr	r3, [pc, #148]	; (801523c <vTaskSwitchContext+0xb4>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	fab3 f383 	clz	r3, r3
 80151b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80151b2:	7afb      	ldrb	r3, [r7, #11]
 80151b4:	f1c3 031f 	rsb	r3, r3, #31
 80151b8:	617b      	str	r3, [r7, #20]
 80151ba:	4921      	ldr	r1, [pc, #132]	; (8015240 <vTaskSwitchContext+0xb8>)
 80151bc:	697a      	ldr	r2, [r7, #20]
 80151be:	4613      	mov	r3, r2
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	4413      	add	r3, r2
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	440b      	add	r3, r1
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10a      	bne.n	80151e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80151ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d2:	f383 8811 	msr	BASEPRI, r3
 80151d6:	f3bf 8f6f 	isb	sy
 80151da:	f3bf 8f4f 	dsb	sy
 80151de:	607b      	str	r3, [r7, #4]
}
 80151e0:	bf00      	nop
 80151e2:	e7fe      	b.n	80151e2 <vTaskSwitchContext+0x5a>
 80151e4:	697a      	ldr	r2, [r7, #20]
 80151e6:	4613      	mov	r3, r2
 80151e8:	009b      	lsls	r3, r3, #2
 80151ea:	4413      	add	r3, r2
 80151ec:	009b      	lsls	r3, r3, #2
 80151ee:	4a14      	ldr	r2, [pc, #80]	; (8015240 <vTaskSwitchContext+0xb8>)
 80151f0:	4413      	add	r3, r2
 80151f2:	613b      	str	r3, [r7, #16]
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	685a      	ldr	r2, [r3, #4]
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	605a      	str	r2, [r3, #4]
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	685a      	ldr	r2, [r3, #4]
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	3308      	adds	r3, #8
 8015206:	429a      	cmp	r2, r3
 8015208:	d104      	bne.n	8015214 <vTaskSwitchContext+0x8c>
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	685a      	ldr	r2, [r3, #4]
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	605a      	str	r2, [r3, #4]
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	4a0a      	ldr	r2, [pc, #40]	; (8015244 <vTaskSwitchContext+0xbc>)
 801521c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801521e:	4b09      	ldr	r3, [pc, #36]	; (8015244 <vTaskSwitchContext+0xbc>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	334c      	adds	r3, #76	; 0x4c
 8015224:	4a08      	ldr	r2, [pc, #32]	; (8015248 <vTaskSwitchContext+0xc0>)
 8015226:	6013      	str	r3, [r2, #0]
}
 8015228:	bf00      	nop
 801522a:	371c      	adds	r7, #28
 801522c:	46bd      	mov	sp, r7
 801522e:	bc80      	pop	{r7}
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	200059c0 	.word	0x200059c0
 8015238:	200059ac 	.word	0x200059ac
 801523c:	200059a0 	.word	0x200059a0
 8015240:	2000589c 	.word	0x2000589c
 8015244:	20005898 	.word	0x20005898
 8015248:	20000294 	.word	0x20000294

0801524c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10a      	bne.n	8015272 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015260:	f383 8811 	msr	BASEPRI, r3
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	60fb      	str	r3, [r7, #12]
}
 801526e:	bf00      	nop
 8015270:	e7fe      	b.n	8015270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015272:	4b07      	ldr	r3, [pc, #28]	; (8015290 <vTaskPlaceOnEventList+0x44>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	3318      	adds	r3, #24
 8015278:	4619      	mov	r1, r3
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7fe fc3a 	bl	8013af4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015280:	2101      	movs	r1, #1
 8015282:	6838      	ldr	r0, [r7, #0]
 8015284:	f000 fba8 	bl	80159d8 <prvAddCurrentTaskToDelayedList>
}
 8015288:	bf00      	nop
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	20005898 	.word	0x20005898

08015294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b086      	sub	sp, #24
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	68db      	ldr	r3, [r3, #12]
 80152a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d10a      	bne.n	80152c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	60fb      	str	r3, [r7, #12]
}
 80152bc:	bf00      	nop
 80152be:	e7fe      	b.n	80152be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	3318      	adds	r3, #24
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fe fc4d 	bl	8013b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152ca:	4b1d      	ldr	r3, [pc, #116]	; (8015340 <xTaskRemoveFromEventList+0xac>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d11c      	bne.n	801530c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	3304      	adds	r3, #4
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7fe fc44 	bl	8013b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152e0:	2201      	movs	r2, #1
 80152e2:	409a      	lsls	r2, r3
 80152e4:	4b17      	ldr	r3, [pc, #92]	; (8015344 <xTaskRemoveFromEventList+0xb0>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	4313      	orrs	r3, r2
 80152ea:	4a16      	ldr	r2, [pc, #88]	; (8015344 <xTaskRemoveFromEventList+0xb0>)
 80152ec:	6013      	str	r3, [r2, #0]
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f2:	4613      	mov	r3, r2
 80152f4:	009b      	lsls	r3, r3, #2
 80152f6:	4413      	add	r3, r2
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	4a13      	ldr	r2, [pc, #76]	; (8015348 <xTaskRemoveFromEventList+0xb4>)
 80152fc:	441a      	add	r2, r3
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	3304      	adds	r3, #4
 8015302:	4619      	mov	r1, r3
 8015304:	4610      	mov	r0, r2
 8015306:	f7fe fbd2 	bl	8013aae <vListInsertEnd>
 801530a:	e005      	b.n	8015318 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	3318      	adds	r3, #24
 8015310:	4619      	mov	r1, r3
 8015312:	480e      	ldr	r0, [pc, #56]	; (801534c <xTaskRemoveFromEventList+0xb8>)
 8015314:	f7fe fbcb 	bl	8013aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801531c:	4b0c      	ldr	r3, [pc, #48]	; (8015350 <xTaskRemoveFromEventList+0xbc>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015322:	429a      	cmp	r2, r3
 8015324:	d905      	bls.n	8015332 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015326:	2301      	movs	r3, #1
 8015328:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801532a:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <xTaskRemoveFromEventList+0xc0>)
 801532c:	2201      	movs	r2, #1
 801532e:	601a      	str	r2, [r3, #0]
 8015330:	e001      	b.n	8015336 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8015332:	2300      	movs	r3, #0
 8015334:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8015336:	697b      	ldr	r3, [r7, #20]
}
 8015338:	4618      	mov	r0, r3
 801533a:	3718      	adds	r7, #24
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}
 8015340:	200059c0 	.word	0x200059c0
 8015344:	200059a0 	.word	0x200059a0
 8015348:	2000589c 	.word	0x2000589c
 801534c:	20005958 	.word	0x20005958
 8015350:	20005898 	.word	0x20005898
 8015354:	200059ac 	.word	0x200059ac

08015358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015360:	4b06      	ldr	r3, [pc, #24]	; (801537c <vTaskInternalSetTimeOutState+0x24>)
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015368:	4b05      	ldr	r3, [pc, #20]	; (8015380 <vTaskInternalSetTimeOutState+0x28>)
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	605a      	str	r2, [r3, #4]
}
 8015370:	bf00      	nop
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	bc80      	pop	{r7}
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	200059b0 	.word	0x200059b0
 8015380:	2000599c 	.word	0x2000599c

08015384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b088      	sub	sp, #32
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d10a      	bne.n	80153aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015398:	f383 8811 	msr	BASEPRI, r3
 801539c:	f3bf 8f6f 	isb	sy
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	613b      	str	r3, [r7, #16]
}
 80153a6:	bf00      	nop
 80153a8:	e7fe      	b.n	80153a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d10a      	bne.n	80153c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80153b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b4:	f383 8811 	msr	BASEPRI, r3
 80153b8:	f3bf 8f6f 	isb	sy
 80153bc:	f3bf 8f4f 	dsb	sy
 80153c0:	60fb      	str	r3, [r7, #12]
}
 80153c2:	bf00      	nop
 80153c4:	e7fe      	b.n	80153c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80153c6:	f000 fc61 	bl	8015c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80153ca:	4b1d      	ldr	r3, [pc, #116]	; (8015440 <xTaskCheckForTimeOut+0xbc>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	69ba      	ldr	r2, [r7, #24]
 80153d6:	1ad3      	subs	r3, r2, r3
 80153d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153e2:	d102      	bne.n	80153ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80153e4:	2300      	movs	r3, #0
 80153e6:	61fb      	str	r3, [r7, #28]
 80153e8:	e023      	b.n	8015432 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	4b15      	ldr	r3, [pc, #84]	; (8015444 <xTaskCheckForTimeOut+0xc0>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d007      	beq.n	8015406 <xTaskCheckForTimeOut+0x82>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	69ba      	ldr	r2, [r7, #24]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d302      	bcc.n	8015406 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015400:	2301      	movs	r3, #1
 8015402:	61fb      	str	r3, [r7, #28]
 8015404:	e015      	b.n	8015432 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	697a      	ldr	r2, [r7, #20]
 801540c:	429a      	cmp	r2, r3
 801540e:	d20b      	bcs.n	8015428 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	681a      	ldr	r2, [r3, #0]
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	1ad2      	subs	r2, r2, r3
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7ff ff9b 	bl	8015358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015422:	2300      	movs	r3, #0
 8015424:	61fb      	str	r3, [r7, #28]
 8015426:	e004      	b.n	8015432 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	2200      	movs	r2, #0
 801542c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801542e:	2301      	movs	r3, #1
 8015430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015432:	f000 fc5b 	bl	8015cec <vPortExitCritical>

	return xReturn;
 8015436:	69fb      	ldr	r3, [r7, #28]
}
 8015438:	4618      	mov	r0, r3
 801543a:	3720      	adds	r7, #32
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}
 8015440:	2000599c 	.word	0x2000599c
 8015444:	200059b0 	.word	0x200059b0

08015448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015448:	b480      	push	{r7}
 801544a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801544c:	4b03      	ldr	r3, [pc, #12]	; (801545c <vTaskMissedYield+0x14>)
 801544e:	2201      	movs	r2, #1
 8015450:	601a      	str	r2, [r3, #0]
}
 8015452:	bf00      	nop
 8015454:	46bd      	mov	sp, r7
 8015456:	bc80      	pop	{r7}
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	200059ac 	.word	0x200059ac

08015460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015468:	f000 f852 	bl	8015510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801546c:	4b06      	ldr	r3, [pc, #24]	; (8015488 <prvIdleTask+0x28>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2b01      	cmp	r3, #1
 8015472:	d9f9      	bls.n	8015468 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015474:	4b05      	ldr	r3, [pc, #20]	; (801548c <prvIdleTask+0x2c>)
 8015476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801547a:	601a      	str	r2, [r3, #0]
 801547c:	f3bf 8f4f 	dsb	sy
 8015480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015484:	e7f0      	b.n	8015468 <prvIdleTask+0x8>
 8015486:	bf00      	nop
 8015488:	2000589c 	.word	0x2000589c
 801548c:	e000ed04 	.word	0xe000ed04

08015490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015496:	2300      	movs	r3, #0
 8015498:	607b      	str	r3, [r7, #4]
 801549a:	e00c      	b.n	80154b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	4613      	mov	r3, r2
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	4413      	add	r3, r2
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	4a12      	ldr	r2, [pc, #72]	; (80154f0 <prvInitialiseTaskLists+0x60>)
 80154a8:	4413      	add	r3, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe fad4 	bl	8013a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	3301      	adds	r3, #1
 80154b4:	607b      	str	r3, [r7, #4]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b06      	cmp	r3, #6
 80154ba:	d9ef      	bls.n	801549c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80154bc:	480d      	ldr	r0, [pc, #52]	; (80154f4 <prvInitialiseTaskLists+0x64>)
 80154be:	f7fe facb 	bl	8013a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80154c2:	480d      	ldr	r0, [pc, #52]	; (80154f8 <prvInitialiseTaskLists+0x68>)
 80154c4:	f7fe fac8 	bl	8013a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80154c8:	480c      	ldr	r0, [pc, #48]	; (80154fc <prvInitialiseTaskLists+0x6c>)
 80154ca:	f7fe fac5 	bl	8013a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80154ce:	480c      	ldr	r0, [pc, #48]	; (8015500 <prvInitialiseTaskLists+0x70>)
 80154d0:	f7fe fac2 	bl	8013a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80154d4:	480b      	ldr	r0, [pc, #44]	; (8015504 <prvInitialiseTaskLists+0x74>)
 80154d6:	f7fe fabf 	bl	8013a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80154da:	4b0b      	ldr	r3, [pc, #44]	; (8015508 <prvInitialiseTaskLists+0x78>)
 80154dc:	4a05      	ldr	r2, [pc, #20]	; (80154f4 <prvInitialiseTaskLists+0x64>)
 80154de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80154e0:	4b0a      	ldr	r3, [pc, #40]	; (801550c <prvInitialiseTaskLists+0x7c>)
 80154e2:	4a05      	ldr	r2, [pc, #20]	; (80154f8 <prvInitialiseTaskLists+0x68>)
 80154e4:	601a      	str	r2, [r3, #0]
}
 80154e6:	bf00      	nop
 80154e8:	3708      	adds	r7, #8
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	2000589c 	.word	0x2000589c
 80154f4:	20005928 	.word	0x20005928
 80154f8:	2000593c 	.word	0x2000593c
 80154fc:	20005958 	.word	0x20005958
 8015500:	2000596c 	.word	0x2000596c
 8015504:	20005984 	.word	0x20005984
 8015508:	20005950 	.word	0x20005950
 801550c:	20005954 	.word	0x20005954

08015510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015516:	e019      	b.n	801554c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015518:	f000 fbb8 	bl	8015c8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801551c:	4b10      	ldr	r3, [pc, #64]	; (8015560 <prvCheckTasksWaitingTermination+0x50>)
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	3304      	adds	r3, #4
 8015528:	4618      	mov	r0, r3
 801552a:	f7fe fb1b 	bl	8013b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801552e:	4b0d      	ldr	r3, [pc, #52]	; (8015564 <prvCheckTasksWaitingTermination+0x54>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	3b01      	subs	r3, #1
 8015534:	4a0b      	ldr	r2, [pc, #44]	; (8015564 <prvCheckTasksWaitingTermination+0x54>)
 8015536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015538:	4b0b      	ldr	r3, [pc, #44]	; (8015568 <prvCheckTasksWaitingTermination+0x58>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	3b01      	subs	r3, #1
 801553e:	4a0a      	ldr	r2, [pc, #40]	; (8015568 <prvCheckTasksWaitingTermination+0x58>)
 8015540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015542:	f000 fbd3 	bl	8015cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 f810 	bl	801556c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801554c:	4b06      	ldr	r3, [pc, #24]	; (8015568 <prvCheckTasksWaitingTermination+0x58>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d1e1      	bne.n	8015518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015554:	bf00      	nop
 8015556:	bf00      	nop
 8015558:	3708      	adds	r7, #8
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	2000596c 	.word	0x2000596c
 8015564:	20005998 	.word	0x20005998
 8015568:	20005980 	.word	0x20005980

0801556c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801556c:	b580      	push	{r7, lr}
 801556e:	b084      	sub	sp, #16
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	334c      	adds	r3, #76	; 0x4c
 8015578:	4618      	mov	r0, r3
 801557a:	f002 fa0f 	bl	801799c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8015584:	2b00      	cmp	r3, #0
 8015586:	d108      	bne.n	801559a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801558c:	4618      	mov	r0, r3
 801558e:	f000 fd41 	bl	8016014 <vPortFree>
				vPortFree( pxTCB );
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f000 fd3e 	bl	8016014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015598:	e018      	b.n	80155cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d103      	bne.n	80155ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f000 fd35 	bl	8016014 <vPortFree>
	}
 80155aa:	e00f      	b.n	80155cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80155b2:	2b02      	cmp	r3, #2
 80155b4:	d00a      	beq.n	80155cc <prvDeleteTCB+0x60>
	__asm volatile
 80155b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ba:	f383 8811 	msr	BASEPRI, r3
 80155be:	f3bf 8f6f 	isb	sy
 80155c2:	f3bf 8f4f 	dsb	sy
 80155c6:	60fb      	str	r3, [r7, #12]
}
 80155c8:	bf00      	nop
 80155ca:	e7fe      	b.n	80155ca <prvDeleteTCB+0x5e>
	}
 80155cc:	bf00      	nop
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80155da:	4b0e      	ldr	r3, [pc, #56]	; (8015614 <prvResetNextTaskUnblockTime+0x40>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <prvResetNextTaskUnblockTime+0x14>
 80155e4:	2301      	movs	r3, #1
 80155e6:	e000      	b.n	80155ea <prvResetNextTaskUnblockTime+0x16>
 80155e8:	2300      	movs	r3, #0
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d004      	beq.n	80155f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80155ee:	4b0a      	ldr	r3, [pc, #40]	; (8015618 <prvResetNextTaskUnblockTime+0x44>)
 80155f0:	f04f 32ff 	mov.w	r2, #4294967295
 80155f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80155f6:	e008      	b.n	801560a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80155f8:	4b06      	ldr	r3, [pc, #24]	; (8015614 <prvResetNextTaskUnblockTime+0x40>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	4a04      	ldr	r2, [pc, #16]	; (8015618 <prvResetNextTaskUnblockTime+0x44>)
 8015608:	6013      	str	r3, [r2, #0]
}
 801560a:	bf00      	nop
 801560c:	370c      	adds	r7, #12
 801560e:	46bd      	mov	sp, r7
 8015610:	bc80      	pop	{r7}
 8015612:	4770      	bx	lr
 8015614:	20005950 	.word	0x20005950
 8015618:	200059b8 	.word	0x200059b8

0801561c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015622:	4b0b      	ldr	r3, [pc, #44]	; (8015650 <xTaskGetSchedulerState+0x34>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d102      	bne.n	8015630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801562a:	2301      	movs	r3, #1
 801562c:	607b      	str	r3, [r7, #4]
 801562e:	e008      	b.n	8015642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015630:	4b08      	ldr	r3, [pc, #32]	; (8015654 <xTaskGetSchedulerState+0x38>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d102      	bne.n	801563e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015638:	2302      	movs	r3, #2
 801563a:	607b      	str	r3, [r7, #4]
 801563c:	e001      	b.n	8015642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801563e:	2300      	movs	r3, #0
 8015640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015642:	687b      	ldr	r3, [r7, #4]
	}
 8015644:	4618      	mov	r0, r3
 8015646:	370c      	adds	r7, #12
 8015648:	46bd      	mov	sp, r7
 801564a:	bc80      	pop	{r7}
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop
 8015650:	200059a4 	.word	0x200059a4
 8015654:	200059c0 	.word	0x200059c0

08015658 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015664:	2300      	movs	r3, #0
 8015666:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d06e      	beq.n	801574c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015672:	4b39      	ldr	r3, [pc, #228]	; (8015758 <xTaskPriorityInherit+0x100>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015678:	429a      	cmp	r2, r3
 801567a:	d25e      	bcs.n	801573a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	699b      	ldr	r3, [r3, #24]
 8015680:	2b00      	cmp	r3, #0
 8015682:	db06      	blt.n	8015692 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015684:	4b34      	ldr	r3, [pc, #208]	; (8015758 <xTaskPriorityInherit+0x100>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801568a:	f1c3 0207 	rsb	r2, r3, #7
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	6959      	ldr	r1, [r3, #20]
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801569a:	4613      	mov	r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	4413      	add	r3, r2
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	4a2e      	ldr	r2, [pc, #184]	; (801575c <xTaskPriorityInherit+0x104>)
 80156a4:	4413      	add	r3, r2
 80156a6:	4299      	cmp	r1, r3
 80156a8:	d101      	bne.n	80156ae <xTaskPriorityInherit+0x56>
 80156aa:	2301      	movs	r3, #1
 80156ac:	e000      	b.n	80156b0 <xTaskPriorityInherit+0x58>
 80156ae:	2300      	movs	r3, #0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d03a      	beq.n	801572a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	3304      	adds	r3, #4
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7fe fa53 	bl	8013b64 <uxListRemove>
 80156be:	4603      	mov	r3, r0
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d115      	bne.n	80156f0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156c8:	4924      	ldr	r1, [pc, #144]	; (801575c <xTaskPriorityInherit+0x104>)
 80156ca:	4613      	mov	r3, r2
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	4413      	add	r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	440b      	add	r3, r1
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d10a      	bne.n	80156f0 <xTaskPriorityInherit+0x98>
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156de:	2201      	movs	r2, #1
 80156e0:	fa02 f303 	lsl.w	r3, r2, r3
 80156e4:	43da      	mvns	r2, r3
 80156e6:	4b1e      	ldr	r3, [pc, #120]	; (8015760 <xTaskPriorityInherit+0x108>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4013      	ands	r3, r2
 80156ec:	4a1c      	ldr	r2, [pc, #112]	; (8015760 <xTaskPriorityInherit+0x108>)
 80156ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80156f0:	4b19      	ldr	r3, [pc, #100]	; (8015758 <xTaskPriorityInherit+0x100>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fe:	2201      	movs	r2, #1
 8015700:	409a      	lsls	r2, r3
 8015702:	4b17      	ldr	r3, [pc, #92]	; (8015760 <xTaskPriorityInherit+0x108>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	4313      	orrs	r3, r2
 8015708:	4a15      	ldr	r2, [pc, #84]	; (8015760 <xTaskPriorityInherit+0x108>)
 801570a:	6013      	str	r3, [r2, #0]
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015710:	4613      	mov	r3, r2
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	4413      	add	r3, r2
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	4a10      	ldr	r2, [pc, #64]	; (801575c <xTaskPriorityInherit+0x104>)
 801571a:	441a      	add	r2, r3
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	3304      	adds	r3, #4
 8015720:	4619      	mov	r1, r3
 8015722:	4610      	mov	r0, r2
 8015724:	f7fe f9c3 	bl	8013aae <vListInsertEnd>
 8015728:	e004      	b.n	8015734 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801572a:	4b0b      	ldr	r3, [pc, #44]	; (8015758 <xTaskPriorityInherit+0x100>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015734:	2301      	movs	r3, #1
 8015736:	60fb      	str	r3, [r7, #12]
 8015738:	e008      	b.n	801574c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801573e:	4b06      	ldr	r3, [pc, #24]	; (8015758 <xTaskPriorityInherit+0x100>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015744:	429a      	cmp	r2, r3
 8015746:	d201      	bcs.n	801574c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015748:	2301      	movs	r3, #1
 801574a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801574c:	68fb      	ldr	r3, [r7, #12]
	}
 801574e:	4618      	mov	r0, r3
 8015750:	3710      	adds	r7, #16
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	20005898 	.word	0x20005898
 801575c:	2000589c 	.word	0x2000589c
 8015760:	200059a0 	.word	0x200059a0

08015764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015764:	b580      	push	{r7, lr}
 8015766:	b086      	sub	sp, #24
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015770:	2300      	movs	r3, #0
 8015772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d06e      	beq.n	8015858 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801577a:	4b3a      	ldr	r3, [pc, #232]	; (8015864 <xTaskPriorityDisinherit+0x100>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	693a      	ldr	r2, [r7, #16]
 8015780:	429a      	cmp	r2, r3
 8015782:	d00a      	beq.n	801579a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015788:	f383 8811 	msr	BASEPRI, r3
 801578c:	f3bf 8f6f 	isb	sy
 8015790:	f3bf 8f4f 	dsb	sy
 8015794:	60fb      	str	r3, [r7, #12]
}
 8015796:	bf00      	nop
 8015798:	e7fe      	b.n	8015798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10a      	bne.n	80157b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80157a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	60bb      	str	r3, [r7, #8]
}
 80157b4:	bf00      	nop
 80157b6:	e7fe      	b.n	80157b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157bc:	1e5a      	subs	r2, r3, #1
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d044      	beq.n	8015858 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d140      	bne.n	8015858 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	3304      	adds	r3, #4
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fe f9c2 	bl	8013b64 <uxListRemove>
 80157e0:	4603      	mov	r3, r0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d115      	bne.n	8015812 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157ea:	491f      	ldr	r1, [pc, #124]	; (8015868 <xTaskPriorityDisinherit+0x104>)
 80157ec:	4613      	mov	r3, r2
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	4413      	add	r3, r2
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	440b      	add	r3, r1
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d10a      	bne.n	8015812 <xTaskPriorityDisinherit+0xae>
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015800:	2201      	movs	r2, #1
 8015802:	fa02 f303 	lsl.w	r3, r2, r3
 8015806:	43da      	mvns	r2, r3
 8015808:	4b18      	ldr	r3, [pc, #96]	; (801586c <xTaskPriorityDisinherit+0x108>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	4013      	ands	r3, r2
 801580e:	4a17      	ldr	r2, [pc, #92]	; (801586c <xTaskPriorityDisinherit+0x108>)
 8015810:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015812:	693b      	ldr	r3, [r7, #16]
 8015814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801581e:	f1c3 0207 	rsb	r2, r3, #7
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582a:	2201      	movs	r2, #1
 801582c:	409a      	lsls	r2, r3
 801582e:	4b0f      	ldr	r3, [pc, #60]	; (801586c <xTaskPriorityDisinherit+0x108>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4313      	orrs	r3, r2
 8015834:	4a0d      	ldr	r2, [pc, #52]	; (801586c <xTaskPriorityDisinherit+0x108>)
 8015836:	6013      	str	r3, [r2, #0]
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801583c:	4613      	mov	r3, r2
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4a08      	ldr	r2, [pc, #32]	; (8015868 <xTaskPriorityDisinherit+0x104>)
 8015846:	441a      	add	r2, r3
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	3304      	adds	r3, #4
 801584c:	4619      	mov	r1, r3
 801584e:	4610      	mov	r0, r2
 8015850:	f7fe f92d 	bl	8013aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015854:	2301      	movs	r3, #1
 8015856:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015858:	697b      	ldr	r3, [r7, #20]
	}
 801585a:	4618      	mov	r0, r3
 801585c:	3718      	adds	r7, #24
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	20005898 	.word	0x20005898
 8015868:	2000589c 	.word	0x2000589c
 801586c:	200059a0 	.word	0x200059a0

08015870 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015870:	b580      	push	{r7, lr}
 8015872:	b088      	sub	sp, #32
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801587e:	2301      	movs	r3, #1
 8015880:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	f000 8088 	beq.w	801599a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801588e:	2b00      	cmp	r3, #0
 8015890:	d10a      	bne.n	80158a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015896:	f383 8811 	msr	BASEPRI, r3
 801589a:	f3bf 8f6f 	isb	sy
 801589e:	f3bf 8f4f 	dsb	sy
 80158a2:	60fb      	str	r3, [r7, #12]
}
 80158a4:	bf00      	nop
 80158a6:	e7fe      	b.n	80158a6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158ac:	683a      	ldr	r2, [r7, #0]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d902      	bls.n	80158b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	61fb      	str	r3, [r7, #28]
 80158b6:	e002      	b.n	80158be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c2:	69fa      	ldr	r2, [r7, #28]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d068      	beq.n	801599a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158cc:	697a      	ldr	r2, [r7, #20]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d163      	bne.n	801599a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80158d2:	4b34      	ldr	r3, [pc, #208]	; (80159a4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	69ba      	ldr	r2, [r7, #24]
 80158d8:	429a      	cmp	r2, r3
 80158da:	d10a      	bne.n	80158f2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80158dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e0:	f383 8811 	msr	BASEPRI, r3
 80158e4:	f3bf 8f6f 	isb	sy
 80158e8:	f3bf 8f4f 	dsb	sy
 80158ec:	60bb      	str	r3, [r7, #8]
}
 80158ee:	bf00      	nop
 80158f0:	e7fe      	b.n	80158f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	69fa      	ldr	r2, [r7, #28]
 80158fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80158fe:	69bb      	ldr	r3, [r7, #24]
 8015900:	699b      	ldr	r3, [r3, #24]
 8015902:	2b00      	cmp	r3, #0
 8015904:	db04      	blt.n	8015910 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015906:	69fb      	ldr	r3, [r7, #28]
 8015908:	f1c3 0207 	rsb	r2, r3, #7
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	6959      	ldr	r1, [r3, #20]
 8015914:	693a      	ldr	r2, [r7, #16]
 8015916:	4613      	mov	r3, r2
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	4413      	add	r3, r2
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	4a22      	ldr	r2, [pc, #136]	; (80159a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015920:	4413      	add	r3, r2
 8015922:	4299      	cmp	r1, r3
 8015924:	d101      	bne.n	801592a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8015926:	2301      	movs	r3, #1
 8015928:	e000      	b.n	801592c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 801592a:	2300      	movs	r3, #0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d034      	beq.n	801599a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	3304      	adds	r3, #4
 8015934:	4618      	mov	r0, r3
 8015936:	f7fe f915 	bl	8013b64 <uxListRemove>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d115      	bne.n	801596c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015944:	4918      	ldr	r1, [pc, #96]	; (80159a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015946:	4613      	mov	r3, r2
 8015948:	009b      	lsls	r3, r3, #2
 801594a:	4413      	add	r3, r2
 801594c:	009b      	lsls	r3, r3, #2
 801594e:	440b      	add	r3, r1
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10a      	bne.n	801596c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801595a:	2201      	movs	r2, #1
 801595c:	fa02 f303 	lsl.w	r3, r2, r3
 8015960:	43da      	mvns	r2, r3
 8015962:	4b12      	ldr	r3, [pc, #72]	; (80159ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4013      	ands	r3, r2
 8015968:	4a10      	ldr	r2, [pc, #64]	; (80159ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801596a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801596c:	69bb      	ldr	r3, [r7, #24]
 801596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015970:	2201      	movs	r2, #1
 8015972:	409a      	lsls	r2, r3
 8015974:	4b0d      	ldr	r3, [pc, #52]	; (80159ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	4313      	orrs	r3, r2
 801597a:	4a0c      	ldr	r2, [pc, #48]	; (80159ac <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801597c:	6013      	str	r3, [r2, #0]
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015982:	4613      	mov	r3, r2
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	4413      	add	r3, r2
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	4a07      	ldr	r2, [pc, #28]	; (80159a8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801598c:	441a      	add	r2, r3
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	3304      	adds	r3, #4
 8015992:	4619      	mov	r1, r3
 8015994:	4610      	mov	r0, r2
 8015996:	f7fe f88a 	bl	8013aae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801599a:	bf00      	nop
 801599c:	3720      	adds	r7, #32
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	20005898 	.word	0x20005898
 80159a8:	2000589c 	.word	0x2000589c
 80159ac:	200059a0 	.word	0x200059a0

080159b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80159b0:	b480      	push	{r7}
 80159b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80159b4:	4b07      	ldr	r3, [pc, #28]	; (80159d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d004      	beq.n	80159c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80159bc:	4b05      	ldr	r3, [pc, #20]	; (80159d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80159c2:	3201      	adds	r2, #1
 80159c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80159c6:	4b03      	ldr	r3, [pc, #12]	; (80159d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80159c8:	681b      	ldr	r3, [r3, #0]
	}
 80159ca:	4618      	mov	r0, r3
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bc80      	pop	{r7}
 80159d0:	4770      	bx	lr
 80159d2:	bf00      	nop
 80159d4:	20005898 	.word	0x20005898

080159d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80159e2:	4b29      	ldr	r3, [pc, #164]	; (8015a88 <prvAddCurrentTaskToDelayedList+0xb0>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159e8:	4b28      	ldr	r3, [pc, #160]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3304      	adds	r3, #4
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fe f8b8 	bl	8013b64 <uxListRemove>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10b      	bne.n	8015a12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80159fa:	4b24      	ldr	r3, [pc, #144]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a00:	2201      	movs	r2, #1
 8015a02:	fa02 f303 	lsl.w	r3, r2, r3
 8015a06:	43da      	mvns	r2, r3
 8015a08:	4b21      	ldr	r3, [pc, #132]	; (8015a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	4a20      	ldr	r2, [pc, #128]	; (8015a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a18:	d10a      	bne.n	8015a30 <prvAddCurrentTaskToDelayedList+0x58>
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d007      	beq.n	8015a30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a20:	4b1a      	ldr	r3, [pc, #104]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	3304      	adds	r3, #4
 8015a26:	4619      	mov	r1, r3
 8015a28:	481a      	ldr	r0, [pc, #104]	; (8015a94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015a2a:	f7fe f840 	bl	8013aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015a2e:	e026      	b.n	8015a7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	4413      	add	r3, r2
 8015a36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a38:	4b14      	ldr	r3, [pc, #80]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68ba      	ldr	r2, [r7, #8]
 8015a3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015a40:	68ba      	ldr	r2, [r7, #8]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d209      	bcs.n	8015a5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a48:	4b13      	ldr	r3, [pc, #76]	; (8015a98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	4b0f      	ldr	r3, [pc, #60]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	3304      	adds	r3, #4
 8015a52:	4619      	mov	r1, r3
 8015a54:	4610      	mov	r0, r2
 8015a56:	f7fe f84d 	bl	8013af4 <vListInsert>
}
 8015a5a:	e010      	b.n	8015a7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a5c:	4b0f      	ldr	r3, [pc, #60]	; (8015a9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	3304      	adds	r3, #4
 8015a66:	4619      	mov	r1, r3
 8015a68:	4610      	mov	r0, r2
 8015a6a:	f7fe f843 	bl	8013af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015a6e:	4b0c      	ldr	r3, [pc, #48]	; (8015aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	68ba      	ldr	r2, [r7, #8]
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d202      	bcs.n	8015a7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015a78:	4a09      	ldr	r2, [pc, #36]	; (8015aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	6013      	str	r3, [r2, #0]
}
 8015a7e:	bf00      	nop
 8015a80:	3710      	adds	r7, #16
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	2000599c 	.word	0x2000599c
 8015a8c:	20005898 	.word	0x20005898
 8015a90:	200059a0 	.word	0x200059a0
 8015a94:	20005984 	.word	0x20005984
 8015a98:	20005954 	.word	0x20005954
 8015a9c:	20005950 	.word	0x20005950
 8015aa0:	200059b8 	.word	0x200059b8

08015aa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b085      	sub	sp, #20
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3b04      	subs	r3, #4
 8015ab4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	3b04      	subs	r3, #4
 8015ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	f023 0201 	bic.w	r2, r3, #1
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	3b04      	subs	r3, #4
 8015ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015ad4:	4a08      	ldr	r2, [pc, #32]	; (8015af8 <pxPortInitialiseStack+0x54>)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	3b14      	subs	r3, #20
 8015ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	3b20      	subs	r3, #32
 8015aea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015aec:	68fb      	ldr	r3, [r7, #12]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3714      	adds	r7, #20
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bc80      	pop	{r7}
 8015af6:	4770      	bx	lr
 8015af8:	08015afd 	.word	0x08015afd

08015afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8015b02:	2300      	movs	r3, #0
 8015b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015b06:	4b12      	ldr	r3, [pc, #72]	; (8015b50 <prvTaskExitError+0x54>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b0e:	d00a      	beq.n	8015b26 <prvTaskExitError+0x2a>
	__asm volatile
 8015b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b14:	f383 8811 	msr	BASEPRI, r3
 8015b18:	f3bf 8f6f 	isb	sy
 8015b1c:	f3bf 8f4f 	dsb	sy
 8015b20:	60fb      	str	r3, [r7, #12]
}
 8015b22:	bf00      	nop
 8015b24:	e7fe      	b.n	8015b24 <prvTaskExitError+0x28>
	__asm volatile
 8015b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2a:	f383 8811 	msr	BASEPRI, r3
 8015b2e:	f3bf 8f6f 	isb	sy
 8015b32:	f3bf 8f4f 	dsb	sy
 8015b36:	60bb      	str	r3, [r7, #8]
}
 8015b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b3a:	bf00      	nop
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d0fc      	beq.n	8015b3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b42:	bf00      	nop
 8015b44:	bf00      	nop
 8015b46:	3714      	adds	r7, #20
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bc80      	pop	{r7}
 8015b4c:	4770      	bx	lr
 8015b4e:	bf00      	nop
 8015b50:	20000290 	.word	0x20000290
	...

08015b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015b60:	4b07      	ldr	r3, [pc, #28]	; (8015b80 <pxCurrentTCBConst2>)
 8015b62:	6819      	ldr	r1, [r3, #0]
 8015b64:	6808      	ldr	r0, [r1, #0]
 8015b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015b6a:	f380 8809 	msr	PSP, r0
 8015b6e:	f3bf 8f6f 	isb	sy
 8015b72:	f04f 0000 	mov.w	r0, #0
 8015b76:	f380 8811 	msr	BASEPRI, r0
 8015b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8015b7e:	4770      	bx	lr

08015b80 <pxCurrentTCBConst2>:
 8015b80:	20005898 	.word	0x20005898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b84:	bf00      	nop
 8015b86:	bf00      	nop

08015b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8015b88:	4806      	ldr	r0, [pc, #24]	; (8015ba4 <prvPortStartFirstTask+0x1c>)
 8015b8a:	6800      	ldr	r0, [r0, #0]
 8015b8c:	6800      	ldr	r0, [r0, #0]
 8015b8e:	f380 8808 	msr	MSP, r0
 8015b92:	b662      	cpsie	i
 8015b94:	b661      	cpsie	f
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	f3bf 8f6f 	isb	sy
 8015b9e:	df00      	svc	0
 8015ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015ba2:	bf00      	nop
 8015ba4:	e000ed08 	.word	0xe000ed08

08015ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015bae:	4b32      	ldr	r3, [pc, #200]	; (8015c78 <xPortStartScheduler+0xd0>)
 8015bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	22ff      	movs	r2, #255	; 0xff
 8015bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	b2db      	uxtb	r3, r3
 8015bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015bc8:	78fb      	ldrb	r3, [r7, #3]
 8015bca:	b2db      	uxtb	r3, r3
 8015bcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015bd0:	b2da      	uxtb	r2, r3
 8015bd2:	4b2a      	ldr	r3, [pc, #168]	; (8015c7c <xPortStartScheduler+0xd4>)
 8015bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015bd6:	4b2a      	ldr	r3, [pc, #168]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015bd8:	2207      	movs	r2, #7
 8015bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bdc:	e009      	b.n	8015bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015bde:	4b28      	ldr	r3, [pc, #160]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	3b01      	subs	r3, #1
 8015be4:	4a26      	ldr	r2, [pc, #152]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015be8:	78fb      	ldrb	r3, [r7, #3]
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	005b      	lsls	r3, r3, #1
 8015bee:	b2db      	uxtb	r3, r3
 8015bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bf2:	78fb      	ldrb	r3, [r7, #3]
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bfa:	2b80      	cmp	r3, #128	; 0x80
 8015bfc:	d0ef      	beq.n	8015bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bfe:	4b20      	ldr	r3, [pc, #128]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f1c3 0307 	rsb	r3, r3, #7
 8015c06:	2b04      	cmp	r3, #4
 8015c08:	d00a      	beq.n	8015c20 <xPortStartScheduler+0x78>
	__asm volatile
 8015c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0e:	f383 8811 	msr	BASEPRI, r3
 8015c12:	f3bf 8f6f 	isb	sy
 8015c16:	f3bf 8f4f 	dsb	sy
 8015c1a:	60bb      	str	r3, [r7, #8]
}
 8015c1c:	bf00      	nop
 8015c1e:	e7fe      	b.n	8015c1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015c20:	4b17      	ldr	r3, [pc, #92]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	021b      	lsls	r3, r3, #8
 8015c26:	4a16      	ldr	r2, [pc, #88]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015c28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015c2a:	4b15      	ldr	r3, [pc, #84]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c32:	4a13      	ldr	r2, [pc, #76]	; (8015c80 <xPortStartScheduler+0xd8>)
 8015c34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c3e:	4b11      	ldr	r3, [pc, #68]	; (8015c84 <xPortStartScheduler+0xdc>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	4a10      	ldr	r2, [pc, #64]	; (8015c84 <xPortStartScheduler+0xdc>)
 8015c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c4a:	4b0e      	ldr	r3, [pc, #56]	; (8015c84 <xPortStartScheduler+0xdc>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	4a0d      	ldr	r2, [pc, #52]	; (8015c84 <xPortStartScheduler+0xdc>)
 8015c50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c56:	f000 f8b9 	bl	8015dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c5a:	4b0b      	ldr	r3, [pc, #44]	; (8015c88 <xPortStartScheduler+0xe0>)
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c60:	f7ff ff92 	bl	8015b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c64:	f7ff fa90 	bl	8015188 <vTaskSwitchContext>
	prvTaskExitError();
 8015c68:	f7ff ff48 	bl	8015afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	e000e400 	.word	0xe000e400
 8015c7c:	200059c4 	.word	0x200059c4
 8015c80:	200059c8 	.word	0x200059c8
 8015c84:	e000ed20 	.word	0xe000ed20
 8015c88:	20000290 	.word	0x20000290

08015c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
	__asm volatile
 8015c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c96:	f383 8811 	msr	BASEPRI, r3
 8015c9a:	f3bf 8f6f 	isb	sy
 8015c9e:	f3bf 8f4f 	dsb	sy
 8015ca2:	607b      	str	r3, [r7, #4]
}
 8015ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015ca6:	4b0f      	ldr	r3, [pc, #60]	; (8015ce4 <vPortEnterCritical+0x58>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	3301      	adds	r3, #1
 8015cac:	4a0d      	ldr	r2, [pc, #52]	; (8015ce4 <vPortEnterCritical+0x58>)
 8015cae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015cb0:	4b0c      	ldr	r3, [pc, #48]	; (8015ce4 <vPortEnterCritical+0x58>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d10f      	bne.n	8015cd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015cb8:	4b0b      	ldr	r3, [pc, #44]	; (8015ce8 <vPortEnterCritical+0x5c>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	b2db      	uxtb	r3, r3
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d00a      	beq.n	8015cd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8015cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc6:	f383 8811 	msr	BASEPRI, r3
 8015cca:	f3bf 8f6f 	isb	sy
 8015cce:	f3bf 8f4f 	dsb	sy
 8015cd2:	603b      	str	r3, [r7, #0]
}
 8015cd4:	bf00      	nop
 8015cd6:	e7fe      	b.n	8015cd6 <vPortEnterCritical+0x4a>
	}
}
 8015cd8:	bf00      	nop
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bc80      	pop	{r7}
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	20000290 	.word	0x20000290
 8015ce8:	e000ed04 	.word	0xe000ed04

08015cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cf2:	4b11      	ldr	r3, [pc, #68]	; (8015d38 <vPortExitCritical+0x4c>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d10a      	bne.n	8015d10 <vPortExitCritical+0x24>
	__asm volatile
 8015cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cfe:	f383 8811 	msr	BASEPRI, r3
 8015d02:	f3bf 8f6f 	isb	sy
 8015d06:	f3bf 8f4f 	dsb	sy
 8015d0a:	607b      	str	r3, [r7, #4]
}
 8015d0c:	bf00      	nop
 8015d0e:	e7fe      	b.n	8015d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015d10:	4b09      	ldr	r3, [pc, #36]	; (8015d38 <vPortExitCritical+0x4c>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	3b01      	subs	r3, #1
 8015d16:	4a08      	ldr	r2, [pc, #32]	; (8015d38 <vPortExitCritical+0x4c>)
 8015d18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d1a:	4b07      	ldr	r3, [pc, #28]	; (8015d38 <vPortExitCritical+0x4c>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d105      	bne.n	8015d2e <vPortExitCritical+0x42>
 8015d22:	2300      	movs	r3, #0
 8015d24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	f383 8811 	msr	BASEPRI, r3
}
 8015d2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d2e:	bf00      	nop
 8015d30:	370c      	adds	r7, #12
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bc80      	pop	{r7}
 8015d36:	4770      	bx	lr
 8015d38:	20000290 	.word	0x20000290
 8015d3c:	00000000 	.word	0x00000000

08015d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d40:	f3ef 8009 	mrs	r0, PSP
 8015d44:	f3bf 8f6f 	isb	sy
 8015d48:	4b0d      	ldr	r3, [pc, #52]	; (8015d80 <pxCurrentTCBConst>)
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015d50:	6010      	str	r0, [r2, #0]
 8015d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8015d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d5a:	f380 8811 	msr	BASEPRI, r0
 8015d5e:	f7ff fa13 	bl	8015188 <vTaskSwitchContext>
 8015d62:	f04f 0000 	mov.w	r0, #0
 8015d66:	f380 8811 	msr	BASEPRI, r0
 8015d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015d6e:	6819      	ldr	r1, [r3, #0]
 8015d70:	6808      	ldr	r0, [r1, #0]
 8015d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015d76:	f380 8809 	msr	PSP, r0
 8015d7a:	f3bf 8f6f 	isb	sy
 8015d7e:	4770      	bx	lr

08015d80 <pxCurrentTCBConst>:
 8015d80:	20005898 	.word	0x20005898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d84:	bf00      	nop
 8015d86:	bf00      	nop

08015d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d92:	f383 8811 	msr	BASEPRI, r3
 8015d96:	f3bf 8f6f 	isb	sy
 8015d9a:	f3bf 8f4f 	dsb	sy
 8015d9e:	607b      	str	r3, [r7, #4]
}
 8015da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015da2:	f7ff f933 	bl	801500c <xTaskIncrementTick>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d003      	beq.n	8015db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dac:	4b06      	ldr	r3, [pc, #24]	; (8015dc8 <SysTick_Handler+0x40>)
 8015dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	2300      	movs	r3, #0
 8015db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	f383 8811 	msr	BASEPRI, r3
}
 8015dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dc0:	bf00      	nop
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	e000ed04 	.word	0xe000ed04

08015dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015dcc:	b480      	push	{r7}
 8015dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015dd0:	4b0a      	ldr	r3, [pc, #40]	; (8015dfc <vPortSetupTimerInterrupt+0x30>)
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015dd6:	4b0a      	ldr	r3, [pc, #40]	; (8015e00 <vPortSetupTimerInterrupt+0x34>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ddc:	4b09      	ldr	r3, [pc, #36]	; (8015e04 <vPortSetupTimerInterrupt+0x38>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4a09      	ldr	r2, [pc, #36]	; (8015e08 <vPortSetupTimerInterrupt+0x3c>)
 8015de2:	fba2 2303 	umull	r2, r3, r2, r3
 8015de6:	099b      	lsrs	r3, r3, #6
 8015de8:	4a08      	ldr	r2, [pc, #32]	; (8015e0c <vPortSetupTimerInterrupt+0x40>)
 8015dea:	3b01      	subs	r3, #1
 8015dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dee:	4b03      	ldr	r3, [pc, #12]	; (8015dfc <vPortSetupTimerInterrupt+0x30>)
 8015df0:	2207      	movs	r2, #7
 8015df2:	601a      	str	r2, [r3, #0]
}
 8015df4:	bf00      	nop
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bc80      	pop	{r7}
 8015dfa:	4770      	bx	lr
 8015dfc:	e000e010 	.word	0xe000e010
 8015e00:	e000e018 	.word	0xe000e018
 8015e04:	20000264 	.word	0x20000264
 8015e08:	10624dd3 	.word	0x10624dd3
 8015e0c:	e000e014 	.word	0xe000e014

08015e10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e10:	b480      	push	{r7}
 8015e12:	b085      	sub	sp, #20
 8015e14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e16:	f3ef 8305 	mrs	r3, IPSR
 8015e1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2b0f      	cmp	r3, #15
 8015e20:	d914      	bls.n	8015e4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e22:	4a16      	ldr	r2, [pc, #88]	; (8015e7c <vPortValidateInterruptPriority+0x6c>)
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	4413      	add	r3, r2
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e2c:	4b14      	ldr	r3, [pc, #80]	; (8015e80 <vPortValidateInterruptPriority+0x70>)
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	7afa      	ldrb	r2, [r7, #11]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d20a      	bcs.n	8015e4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3a:	f383 8811 	msr	BASEPRI, r3
 8015e3e:	f3bf 8f6f 	isb	sy
 8015e42:	f3bf 8f4f 	dsb	sy
 8015e46:	607b      	str	r3, [r7, #4]
}
 8015e48:	bf00      	nop
 8015e4a:	e7fe      	b.n	8015e4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e4c:	4b0d      	ldr	r3, [pc, #52]	; (8015e84 <vPortValidateInterruptPriority+0x74>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e54:	4b0c      	ldr	r3, [pc, #48]	; (8015e88 <vPortValidateInterruptPriority+0x78>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d90a      	bls.n	8015e72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e60:	f383 8811 	msr	BASEPRI, r3
 8015e64:	f3bf 8f6f 	isb	sy
 8015e68:	f3bf 8f4f 	dsb	sy
 8015e6c:	603b      	str	r3, [r7, #0]
}
 8015e6e:	bf00      	nop
 8015e70:	e7fe      	b.n	8015e70 <vPortValidateInterruptPriority+0x60>
	}
 8015e72:	bf00      	nop
 8015e74:	3714      	adds	r7, #20
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bc80      	pop	{r7}
 8015e7a:	4770      	bx	lr
 8015e7c:	e000e3f0 	.word	0xe000e3f0
 8015e80:	200059c4 	.word	0x200059c4
 8015e84:	e000ed0c 	.word	0xe000ed0c
 8015e88:	200059c8 	.word	0x200059c8

08015e8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b08a      	sub	sp, #40	; 0x28
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e94:	2300      	movs	r3, #0
 8015e96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e98:	f7ff f80e 	bl	8014eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e9c:	4b58      	ldr	r3, [pc, #352]	; (8016000 <pvPortMalloc+0x174>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d101      	bne.n	8015ea8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ea4:	f000 f910 	bl	80160c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ea8:	4b56      	ldr	r3, [pc, #344]	; (8016004 <pvPortMalloc+0x178>)
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	4013      	ands	r3, r2
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f040 808e 	bne.w	8015fd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d01d      	beq.n	8015ef8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ebc:	2208      	movs	r2, #8
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f003 0307 	and.w	r3, r3, #7
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d014      	beq.n	8015ef8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f023 0307 	bic.w	r3, r3, #7
 8015ed4:	3308      	adds	r3, #8
 8015ed6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f003 0307 	and.w	r3, r3, #7
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00a      	beq.n	8015ef8 <pvPortMalloc+0x6c>
	__asm volatile
 8015ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ee6:	f383 8811 	msr	BASEPRI, r3
 8015eea:	f3bf 8f6f 	isb	sy
 8015eee:	f3bf 8f4f 	dsb	sy
 8015ef2:	617b      	str	r3, [r7, #20]
}
 8015ef4:	bf00      	nop
 8015ef6:	e7fe      	b.n	8015ef6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d069      	beq.n	8015fd2 <pvPortMalloc+0x146>
 8015efe:	4b42      	ldr	r3, [pc, #264]	; (8016008 <pvPortMalloc+0x17c>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d864      	bhi.n	8015fd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f08:	4b40      	ldr	r3, [pc, #256]	; (801600c <pvPortMalloc+0x180>)
 8015f0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f0c:	4b3f      	ldr	r3, [pc, #252]	; (801600c <pvPortMalloc+0x180>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f12:	e004      	b.n	8015f1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d903      	bls.n	8015f30 <pvPortMalloc+0xa4>
 8015f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d1f1      	bne.n	8015f14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f30:	4b33      	ldr	r3, [pc, #204]	; (8016000 <pvPortMalloc+0x174>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d04b      	beq.n	8015fd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f3a:	6a3b      	ldr	r3, [r7, #32]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2208      	movs	r2, #8
 8015f40:	4413      	add	r3, r2
 8015f42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	681a      	ldr	r2, [r3, #0]
 8015f48:	6a3b      	ldr	r3, [r7, #32]
 8015f4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4e:	685a      	ldr	r2, [r3, #4]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	1ad2      	subs	r2, r2, r3
 8015f54:	2308      	movs	r3, #8
 8015f56:	005b      	lsls	r3, r3, #1
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d91f      	bls.n	8015f9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	4413      	add	r3, r2
 8015f62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	f003 0307 	and.w	r3, r3, #7
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00a      	beq.n	8015f84 <pvPortMalloc+0xf8>
	__asm volatile
 8015f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f72:	f383 8811 	msr	BASEPRI, r3
 8015f76:	f3bf 8f6f 	isb	sy
 8015f7a:	f3bf 8f4f 	dsb	sy
 8015f7e:	613b      	str	r3, [r7, #16]
}
 8015f80:	bf00      	nop
 8015f82:	e7fe      	b.n	8015f82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	685a      	ldr	r2, [r3, #4]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	1ad2      	subs	r2, r2, r3
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f96:	69b8      	ldr	r0, [r7, #24]
 8015f98:	f000 f8f8 	bl	801618c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f9c:	4b1a      	ldr	r3, [pc, #104]	; (8016008 <pvPortMalloc+0x17c>)
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	4a18      	ldr	r2, [pc, #96]	; (8016008 <pvPortMalloc+0x17c>)
 8015fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015faa:	4b17      	ldr	r3, [pc, #92]	; (8016008 <pvPortMalloc+0x17c>)
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	4b18      	ldr	r3, [pc, #96]	; (8016010 <pvPortMalloc+0x184>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d203      	bcs.n	8015fbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fb6:	4b14      	ldr	r3, [pc, #80]	; (8016008 <pvPortMalloc+0x17c>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	4a15      	ldr	r2, [pc, #84]	; (8016010 <pvPortMalloc+0x184>)
 8015fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc0:	685a      	ldr	r2, [r3, #4]
 8015fc2:	4b10      	ldr	r3, [pc, #64]	; (8016004 <pvPortMalloc+0x178>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	431a      	orrs	r2, r3
 8015fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	2200      	movs	r2, #0
 8015fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015fd2:	f7fe ff7f 	bl	8014ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	f003 0307 	and.w	r3, r3, #7
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d00a      	beq.n	8015ff6 <pvPortMalloc+0x16a>
	__asm volatile
 8015fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe4:	f383 8811 	msr	BASEPRI, r3
 8015fe8:	f3bf 8f6f 	isb	sy
 8015fec:	f3bf 8f4f 	dsb	sy
 8015ff0:	60fb      	str	r3, [r7, #12]
}
 8015ff2:	bf00      	nop
 8015ff4:	e7fe      	b.n	8015ff4 <pvPortMalloc+0x168>
	return pvReturn;
 8015ff6:	69fb      	ldr	r3, [r7, #28]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3728      	adds	r7, #40	; 0x28
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	200095d4 	.word	0x200095d4
 8016004:	200095e0 	.word	0x200095e0
 8016008:	200095d8 	.word	0x200095d8
 801600c:	200095cc 	.word	0x200095cc
 8016010:	200095dc 	.word	0x200095dc

08016014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d048      	beq.n	80160b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016026:	2308      	movs	r3, #8
 8016028:	425b      	negs	r3, r3
 801602a:	697a      	ldr	r2, [r7, #20]
 801602c:	4413      	add	r3, r2
 801602e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	685a      	ldr	r2, [r3, #4]
 8016038:	4b21      	ldr	r3, [pc, #132]	; (80160c0 <vPortFree+0xac>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	4013      	ands	r3, r2
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10a      	bne.n	8016058 <vPortFree+0x44>
	__asm volatile
 8016042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016046:	f383 8811 	msr	BASEPRI, r3
 801604a:	f3bf 8f6f 	isb	sy
 801604e:	f3bf 8f4f 	dsb	sy
 8016052:	60fb      	str	r3, [r7, #12]
}
 8016054:	bf00      	nop
 8016056:	e7fe      	b.n	8016056 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00a      	beq.n	8016076 <vPortFree+0x62>
	__asm volatile
 8016060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016064:	f383 8811 	msr	BASEPRI, r3
 8016068:	f3bf 8f6f 	isb	sy
 801606c:	f3bf 8f4f 	dsb	sy
 8016070:	60bb      	str	r3, [r7, #8]
}
 8016072:	bf00      	nop
 8016074:	e7fe      	b.n	8016074 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	685a      	ldr	r2, [r3, #4]
 801607a:	4b11      	ldr	r3, [pc, #68]	; (80160c0 <vPortFree+0xac>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4013      	ands	r3, r2
 8016080:	2b00      	cmp	r3, #0
 8016082:	d019      	beq.n	80160b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d115      	bne.n	80160b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	685a      	ldr	r2, [r3, #4]
 8016090:	4b0b      	ldr	r3, [pc, #44]	; (80160c0 <vPortFree+0xac>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	43db      	mvns	r3, r3
 8016096:	401a      	ands	r2, r3
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801609c:	f7fe ff0c 	bl	8014eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	685a      	ldr	r2, [r3, #4]
 80160a4:	4b07      	ldr	r3, [pc, #28]	; (80160c4 <vPortFree+0xb0>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4413      	add	r3, r2
 80160aa:	4a06      	ldr	r2, [pc, #24]	; (80160c4 <vPortFree+0xb0>)
 80160ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160ae:	6938      	ldr	r0, [r7, #16]
 80160b0:	f000 f86c 	bl	801618c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80160b4:	f7fe ff0e 	bl	8014ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160b8:	bf00      	nop
 80160ba:	3718      	adds	r7, #24
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	200095e0 	.word	0x200095e0
 80160c4:	200095d8 	.word	0x200095d8

080160c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80160c8:	b480      	push	{r7}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80160ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80160d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80160d4:	4b27      	ldr	r3, [pc, #156]	; (8016174 <prvHeapInit+0xac>)
 80160d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f003 0307 	and.w	r3, r3, #7
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00c      	beq.n	80160fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	3307      	adds	r3, #7
 80160e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	f023 0307 	bic.w	r3, r3, #7
 80160ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	1ad3      	subs	r3, r2, r3
 80160f6:	4a1f      	ldr	r2, [pc, #124]	; (8016174 <prvHeapInit+0xac>)
 80160f8:	4413      	add	r3, r2
 80160fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016100:	4a1d      	ldr	r2, [pc, #116]	; (8016178 <prvHeapInit+0xb0>)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016106:	4b1c      	ldr	r3, [pc, #112]	; (8016178 <prvHeapInit+0xb0>)
 8016108:	2200      	movs	r2, #0
 801610a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	68ba      	ldr	r2, [r7, #8]
 8016110:	4413      	add	r3, r2
 8016112:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016114:	2208      	movs	r2, #8
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	1a9b      	subs	r3, r3, r2
 801611a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	f023 0307 	bic.w	r3, r3, #7
 8016122:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	4a15      	ldr	r2, [pc, #84]	; (801617c <prvHeapInit+0xb4>)
 8016128:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801612a:	4b14      	ldr	r3, [pc, #80]	; (801617c <prvHeapInit+0xb4>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	2200      	movs	r2, #0
 8016130:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016132:	4b12      	ldr	r3, [pc, #72]	; (801617c <prvHeapInit+0xb4>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	2200      	movs	r2, #0
 8016138:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	1ad2      	subs	r2, r2, r3
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016148:	4b0c      	ldr	r3, [pc, #48]	; (801617c <prvHeapInit+0xb4>)
 801614a:	681a      	ldr	r2, [r3, #0]
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	4a0a      	ldr	r2, [pc, #40]	; (8016180 <prvHeapInit+0xb8>)
 8016156:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	4a09      	ldr	r2, [pc, #36]	; (8016184 <prvHeapInit+0xbc>)
 801615e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016160:	4b09      	ldr	r3, [pc, #36]	; (8016188 <prvHeapInit+0xc0>)
 8016162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016166:	601a      	str	r2, [r3, #0]
}
 8016168:	bf00      	nop
 801616a:	3714      	adds	r7, #20
 801616c:	46bd      	mov	sp, r7
 801616e:	bc80      	pop	{r7}
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	200059cc 	.word	0x200059cc
 8016178:	200095cc 	.word	0x200095cc
 801617c:	200095d4 	.word	0x200095d4
 8016180:	200095dc 	.word	0x200095dc
 8016184:	200095d8 	.word	0x200095d8
 8016188:	200095e0 	.word	0x200095e0

0801618c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801618c:	b480      	push	{r7}
 801618e:	b085      	sub	sp, #20
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016194:	4b27      	ldr	r3, [pc, #156]	; (8016234 <prvInsertBlockIntoFreeList+0xa8>)
 8016196:	60fb      	str	r3, [r7, #12]
 8016198:	e002      	b.n	80161a0 <prvInsertBlockIntoFreeList+0x14>
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	60fb      	str	r3, [r7, #12]
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d8f7      	bhi.n	801619a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	68ba      	ldr	r2, [r7, #8]
 80161b4:	4413      	add	r3, r2
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d108      	bne.n	80161ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	685a      	ldr	r2, [r3, #4]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	441a      	add	r2, r3
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	68ba      	ldr	r2, [r7, #8]
 80161d8:	441a      	add	r2, r3
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d118      	bne.n	8016214 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	4b14      	ldr	r3, [pc, #80]	; (8016238 <prvInsertBlockIntoFreeList+0xac>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d00d      	beq.n	801620a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685a      	ldr	r2, [r3, #4]
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	441a      	add	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	681a      	ldr	r2, [r3, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	601a      	str	r2, [r3, #0]
 8016208:	e008      	b.n	801621c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801620a:	4b0b      	ldr	r3, [pc, #44]	; (8016238 <prvInsertBlockIntoFreeList+0xac>)
 801620c:	681a      	ldr	r2, [r3, #0]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	e003      	b.n	801621c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801621c:	68fa      	ldr	r2, [r7, #12]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	429a      	cmp	r2, r3
 8016222:	d002      	beq.n	801622a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	687a      	ldr	r2, [r7, #4]
 8016228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801622a:	bf00      	nop
 801622c:	3714      	adds	r7, #20
 801622e:	46bd      	mov	sp, r7
 8016230:	bc80      	pop	{r7}
 8016232:	4770      	bx	lr
 8016234:	200095cc 	.word	0x200095cc
 8016238:	200095d4 	.word	0x200095d4

0801623c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8016240:	2201      	movs	r2, #1
 8016242:	490e      	ldr	r1, [pc, #56]	; (801627c <MX_USB_HOST_Init+0x40>)
 8016244:	480e      	ldr	r0, [pc, #56]	; (8016280 <MX_USB_HOST_Init+0x44>)
 8016246:	f7f8 fc93 	bl	800eb70 <USBH_Init>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d001      	beq.n	8016254 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8016250:	f7ee f962 	bl	8004518 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8016254:	490b      	ldr	r1, [pc, #44]	; (8016284 <MX_USB_HOST_Init+0x48>)
 8016256:	480a      	ldr	r0, [pc, #40]	; (8016280 <MX_USB_HOST_Init+0x44>)
 8016258:	f7f8 fd36 	bl	800ecc8 <USBH_RegisterClass>
 801625c:	4603      	mov	r3, r0
 801625e:	2b00      	cmp	r3, #0
 8016260:	d001      	beq.n	8016266 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8016262:	f7ee f959 	bl	8004518 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8016266:	4806      	ldr	r0, [pc, #24]	; (8016280 <MX_USB_HOST_Init+0x44>)
 8016268:	f7f8 fdb8 	bl	800eddc <USBH_Start>
 801626c:	4603      	mov	r3, r0
 801626e:	2b00      	cmp	r3, #0
 8016270:	d001      	beq.n	8016276 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8016272:	f7ee f951 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8016276:	bf00      	nop
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	08016289 	.word	0x08016289
 8016280:	2000dfc0 	.word	0x2000dfc0
 8016284:	20000270 	.word	0x20000270

08016288 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	460b      	mov	r3, r1
 8016292:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8016294:	78fb      	ldrb	r3, [r7, #3]
 8016296:	3b01      	subs	r3, #1
 8016298:	2b04      	cmp	r3, #4
 801629a:	d828      	bhi.n	80162ee <USBH_UserProcess+0x66>
 801629c:	a201      	add	r2, pc, #4	; (adr r2, 80162a4 <USBH_UserProcess+0x1c>)
 801629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162a2:	bf00      	nop
 80162a4:	080162ef 	.word	0x080162ef
 80162a8:	080162cb 	.word	0x080162cb
 80162ac:	080162ef 	.word	0x080162ef
 80162b0:	080162e7 	.word	0x080162e7
 80162b4:	080162b9 	.word	0x080162b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80162b8:	4b0f      	ldr	r3, [pc, #60]	; (80162f8 <USBH_UserProcess+0x70>)
 80162ba:	2203      	movs	r2, #3
 80162bc:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 80162be:	4b0f      	ldr	r3, [pc, #60]	; (80162fc <USBH_UserProcess+0x74>)
 80162c0:	2200      	movs	r2, #0
 80162c2:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 80162c4:	f7ea fe62 	bl	8000f8c <Unmount_USB>
  break;
 80162c8:	e012      	b.n	80162f0 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80162ca:	4b0b      	ldr	r3, [pc, #44]	; (80162f8 <USBH_UserProcess+0x70>)
 80162cc:	2202      	movs	r2, #2
 80162ce:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 80162d0:	f7ea fe48 	bl	8000f64 <Mount_USB>
	Check_USB_Details();
 80162d4:	f7ea ff5e 	bl	8001194 <Check_USB_Details>
	Scan_USB("/");
 80162d8:	4809      	ldr	r0, [pc, #36]	; (8016300 <USBH_UserProcess+0x78>)
 80162da:	f7ea fe69 	bl	8000fb0 <Scan_USB>

  usb_good = 1;
 80162de:	4b07      	ldr	r3, [pc, #28]	; (80162fc <USBH_UserProcess+0x74>)
 80162e0:	2201      	movs	r2, #1
 80162e2:	601a      	str	r2, [r3, #0]

  break;
 80162e4:	e004      	b.n	80162f0 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80162e6:	4b04      	ldr	r3, [pc, #16]	; (80162f8 <USBH_UserProcess+0x70>)
 80162e8:	2201      	movs	r2, #1
 80162ea:	701a      	strb	r2, [r3, #0]
  break;
 80162ec:	e000      	b.n	80162f0 <USBH_UserProcess+0x68>

  default:
  break;
 80162ee:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80162f0:	bf00      	nop
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	200095e4 	.word	0x200095e4
 80162fc:	200095e8 	.word	0x200095e8
 8016300:	0801b338 	.word	0x0801b338

08016304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b08a      	sub	sp, #40	; 0x28
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801630c:	f107 0314 	add.w	r3, r7, #20
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]
 8016314:	605a      	str	r2, [r3, #4]
 8016316:	609a      	str	r2, [r3, #8]
 8016318:	60da      	str	r2, [r3, #12]
 801631a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016324:	d147      	bne.n	80163b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016326:	2300      	movs	r3, #0
 8016328:	613b      	str	r3, [r7, #16]
 801632a:	4b25      	ldr	r3, [pc, #148]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 801632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801632e:	4a24      	ldr	r2, [pc, #144]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016330:	f043 0301 	orr.w	r3, r3, #1
 8016334:	6313      	str	r3, [r2, #48]	; 0x30
 8016336:	4b22      	ldr	r3, [pc, #136]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801633a:	f003 0301 	and.w	r3, r3, #1
 801633e:	613b      	str	r3, [r7, #16]
 8016340:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8016342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016348:	2300      	movs	r3, #0
 801634a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801634c:	2300      	movs	r3, #0
 801634e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016350:	f107 0314 	add.w	r3, r7, #20
 8016354:	4619      	mov	r1, r3
 8016356:	481b      	ldr	r0, [pc, #108]	; (80163c4 <HAL_HCD_MspInit+0xc0>)
 8016358:	f7f1 f9dc 	bl	8007714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801635c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016362:	2302      	movs	r3, #2
 8016364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016366:	2300      	movs	r3, #0
 8016368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801636a:	2303      	movs	r3, #3
 801636c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801636e:	230a      	movs	r3, #10
 8016370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016372:	f107 0314 	add.w	r3, r7, #20
 8016376:	4619      	mov	r1, r3
 8016378:	4812      	ldr	r0, [pc, #72]	; (80163c4 <HAL_HCD_MspInit+0xc0>)
 801637a:	f7f1 f9cb 	bl	8007714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801637e:	4b10      	ldr	r3, [pc, #64]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016382:	4a0f      	ldr	r2, [pc, #60]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016388:	6353      	str	r3, [r2, #52]	; 0x34
 801638a:	2300      	movs	r3, #0
 801638c:	60fb      	str	r3, [r7, #12]
 801638e:	4b0c      	ldr	r3, [pc, #48]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016392:	4a0b      	ldr	r2, [pc, #44]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 8016394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016398:	6453      	str	r3, [r2, #68]	; 0x44
 801639a:	4b09      	ldr	r3, [pc, #36]	; (80163c0 <HAL_HCD_MspInit+0xbc>)
 801639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80163a2:	60fb      	str	r3, [r7, #12]
 80163a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80163a6:	2200      	movs	r2, #0
 80163a8:	2105      	movs	r1, #5
 80163aa:	2043      	movs	r0, #67	; 0x43
 80163ac:	f7f0 fd89 	bl	8006ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80163b0:	2043      	movs	r0, #67	; 0x43
 80163b2:	f7f0 fda2 	bl	8006efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80163b6:	bf00      	nop
 80163b8:	3728      	adds	r7, #40	; 0x28
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	40023800 	.word	0x40023800
 80163c4:	40020000 	.word	0x40020000

080163c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b082      	sub	sp, #8
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7f9 f880 	bl	800f4dc <USBH_LL_IncTimer>
}
 80163dc:	bf00      	nop
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7f9 f8c3 	bl	800f57e <USBH_LL_Connect>
}
 80163f8:	bf00      	nop
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801640e:	4618      	mov	r0, r3
 8016410:	f7f9 f8d8 	bl	800f5c4 <USBH_LL_Disconnect>
}
 8016414:	bf00      	nop
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}

0801641c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	460b      	mov	r3, r1
 8016426:	70fb      	strb	r3, [r7, #3]
 8016428:	4613      	mov	r3, r2
 801642a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8016432:	4618      	mov	r0, r3
 8016434:	f7f9 f90d 	bl	800f652 <USBH_LL_NotifyURBChange>
#endif
}
 8016438:	bf00      	nop
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801644e:	4618      	mov	r0, r3
 8016450:	f7f9 f86e 	bl	800f530 <USBH_LL_PortEnabled>
}
 8016454:	bf00      	nop
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801646a:	4618      	mov	r0, r3
 801646c:	f7f9 f87a 	bl	800f564 <USBH_LL_PortDisabled>
}
 8016470:	bf00      	nop
 8016472:	3708      	adds	r7, #8
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8016486:	2b01      	cmp	r3, #1
 8016488:	d12a      	bne.n	80164e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801648a:	4a18      	ldr	r2, [pc, #96]	; (80164ec <USBH_LL_Init+0x74>)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4a15      	ldr	r2, [pc, #84]	; (80164ec <USBH_LL_Init+0x74>)
 8016496:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801649a:	4b14      	ldr	r3, [pc, #80]	; (80164ec <USBH_LL_Init+0x74>)
 801649c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80164a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80164a2:	4b12      	ldr	r3, [pc, #72]	; (80164ec <USBH_LL_Init+0x74>)
 80164a4:	2208      	movs	r2, #8
 80164a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80164a8:	4b10      	ldr	r3, [pc, #64]	; (80164ec <USBH_LL_Init+0x74>)
 80164aa:	2201      	movs	r2, #1
 80164ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80164ae:	4b0f      	ldr	r3, [pc, #60]	; (80164ec <USBH_LL_Init+0x74>)
 80164b0:	2200      	movs	r2, #0
 80164b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80164b4:	4b0d      	ldr	r3, [pc, #52]	; (80164ec <USBH_LL_Init+0x74>)
 80164b6:	2202      	movs	r2, #2
 80164b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80164ba:	4b0c      	ldr	r3, [pc, #48]	; (80164ec <USBH_LL_Init+0x74>)
 80164bc:	2200      	movs	r2, #0
 80164be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80164c0:	480a      	ldr	r0, [pc, #40]	; (80164ec <USBH_LL_Init+0x74>)
 80164c2:	f7f1 fb0d 	bl	8007ae0 <HAL_HCD_Init>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d001      	beq.n	80164d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80164cc:	f7ee f824 	bl	8004518 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80164d0:	4806      	ldr	r0, [pc, #24]	; (80164ec <USBH_LL_Init+0x74>)
 80164d2:	f7f1 fee7 	bl	80082a4 <HAL_HCD_GetCurrentFrame>
 80164d6:	4603      	mov	r3, r0
 80164d8:	4619      	mov	r1, r3
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7f8 fff0 	bl	800f4c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80164e0:	2300      	movs	r3, #0
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3708      	adds	r7, #8
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	2000e39c 	.word	0x2000e39c

080164f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164f8:	2300      	movs	r3, #0
 80164fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80164fc:	2300      	movs	r3, #0
 80164fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8016506:	4618      	mov	r0, r3
 8016508:	f7f1 fe58 	bl	80081bc <HAL_HCD_Start>
 801650c:	4603      	mov	r3, r0
 801650e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016510:	7bfb      	ldrb	r3, [r7, #15]
 8016512:	4618      	mov	r0, r3
 8016514:	f000 f98a 	bl	801682c <USBH_Get_USB_Status>
 8016518:	4603      	mov	r3, r0
 801651a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801651c:	7bbb      	ldrb	r3, [r7, #14]
}
 801651e:	4618      	mov	r0, r3
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b084      	sub	sp, #16
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801652e:	2300      	movs	r3, #0
 8016530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016532:	2300      	movs	r3, #0
 8016534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801653c:	4618      	mov	r0, r3
 801653e:	f7f1 fe60 	bl	8008202 <HAL_HCD_Stop>
 8016542:	4603      	mov	r3, r0
 8016544:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016546:	7bfb      	ldrb	r3, [r7, #15]
 8016548:	4618      	mov	r0, r3
 801654a:	f000 f96f 	bl	801682c <USBH_Get_USB_Status>
 801654e:	4603      	mov	r3, r0
 8016550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016552:	7bbb      	ldrb	r3, [r7, #14]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3710      	adds	r7, #16
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8016564:	2301      	movs	r3, #1
 8016566:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801656e:	4618      	mov	r0, r3
 8016570:	f7f1 fea6 	bl	80082c0 <HAL_HCD_GetCurrentSpeed>
 8016574:	4603      	mov	r3, r0
 8016576:	2b02      	cmp	r3, #2
 8016578:	d00c      	beq.n	8016594 <USBH_LL_GetSpeed+0x38>
 801657a:	2b02      	cmp	r3, #2
 801657c:	d80d      	bhi.n	801659a <USBH_LL_GetSpeed+0x3e>
 801657e:	2b00      	cmp	r3, #0
 8016580:	d002      	beq.n	8016588 <USBH_LL_GetSpeed+0x2c>
 8016582:	2b01      	cmp	r3, #1
 8016584:	d003      	beq.n	801658e <USBH_LL_GetSpeed+0x32>
 8016586:	e008      	b.n	801659a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8016588:	2300      	movs	r3, #0
 801658a:	73fb      	strb	r3, [r7, #15]
    break;
 801658c:	e008      	b.n	80165a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801658e:	2301      	movs	r3, #1
 8016590:	73fb      	strb	r3, [r7, #15]
    break;
 8016592:	e005      	b.n	80165a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8016594:	2302      	movs	r3, #2
 8016596:	73fb      	strb	r3, [r7, #15]
    break;
 8016598:	e002      	b.n	80165a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801659a:	2301      	movs	r3, #1
 801659c:	73fb      	strb	r3, [r7, #15]
    break;
 801659e:	bf00      	nop
  }
  return  speed;
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b084      	sub	sp, #16
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165b2:	2300      	movs	r3, #0
 80165b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80165b6:	2300      	movs	r3, #0
 80165b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f1 fe3b 	bl	800823c <HAL_HCD_ResetPort>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80165ca:	7bfb      	ldrb	r3, [r7, #15]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f000 f92d 	bl	801682c <USBH_Get_USB_Status>
 80165d2:	4603      	mov	r3, r0
 80165d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3710      	adds	r7, #16
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	460b      	mov	r3, r1
 80165ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80165f2:	78fa      	ldrb	r2, [r7, #3]
 80165f4:	4611      	mov	r1, r2
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7f1 fe41 	bl	800827e <HAL_HCD_HC_GetXferCount>
 80165fc:	4603      	mov	r3, r0
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}

08016606 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016606:	b590      	push	{r4, r7, lr}
 8016608:	b089      	sub	sp, #36	; 0x24
 801660a:	af04      	add	r7, sp, #16
 801660c:	6078      	str	r0, [r7, #4]
 801660e:	4608      	mov	r0, r1
 8016610:	4611      	mov	r1, r2
 8016612:	461a      	mov	r2, r3
 8016614:	4603      	mov	r3, r0
 8016616:	70fb      	strb	r3, [r7, #3]
 8016618:	460b      	mov	r3, r1
 801661a:	70bb      	strb	r3, [r7, #2]
 801661c:	4613      	mov	r3, r2
 801661e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016620:	2300      	movs	r3, #0
 8016622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016624:	2300      	movs	r3, #0
 8016626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801662e:	787c      	ldrb	r4, [r7, #1]
 8016630:	78ba      	ldrb	r2, [r7, #2]
 8016632:	78f9      	ldrb	r1, [r7, #3]
 8016634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016636:	9302      	str	r3, [sp, #8]
 8016638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801663c:	9301      	str	r3, [sp, #4]
 801663e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	4623      	mov	r3, r4
 8016646:	f7f1 faad 	bl	8007ba4 <HAL_HCD_HC_Init>
 801664a:	4603      	mov	r3, r0
 801664c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801664e:	7bfb      	ldrb	r3, [r7, #15]
 8016650:	4618      	mov	r0, r3
 8016652:	f000 f8eb 	bl	801682c <USBH_Get_USB_Status>
 8016656:	4603      	mov	r3, r0
 8016658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801665a:	7bbb      	ldrb	r3, [r7, #14]
}
 801665c:	4618      	mov	r0, r3
 801665e:	3714      	adds	r7, #20
 8016660:	46bd      	mov	sp, r7
 8016662:	bd90      	pop	{r4, r7, pc}

08016664 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	460b      	mov	r3, r1
 801666e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016670:	2300      	movs	r3, #0
 8016672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016674:	2300      	movs	r3, #0
 8016676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	4611      	mov	r1, r2
 8016682:	4618      	mov	r0, r3
 8016684:	f7f1 fb1d 	bl	8007cc2 <HAL_HCD_HC_Halt>
 8016688:	4603      	mov	r3, r0
 801668a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801668c:	7bfb      	ldrb	r3, [r7, #15]
 801668e:	4618      	mov	r0, r3
 8016690:	f000 f8cc 	bl	801682c <USBH_Get_USB_Status>
 8016694:	4603      	mov	r3, r0
 8016696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016698:	7bbb      	ldrb	r3, [r7, #14]
}
 801669a:	4618      	mov	r0, r3
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80166a2:	b590      	push	{r4, r7, lr}
 80166a4:	b089      	sub	sp, #36	; 0x24
 80166a6:	af04      	add	r7, sp, #16
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	4608      	mov	r0, r1
 80166ac:	4611      	mov	r1, r2
 80166ae:	461a      	mov	r2, r3
 80166b0:	4603      	mov	r3, r0
 80166b2:	70fb      	strb	r3, [r7, #3]
 80166b4:	460b      	mov	r3, r1
 80166b6:	70bb      	strb	r3, [r7, #2]
 80166b8:	4613      	mov	r3, r2
 80166ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166bc:	2300      	movs	r3, #0
 80166be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80166c0:	2300      	movs	r3, #0
 80166c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80166ca:	787c      	ldrb	r4, [r7, #1]
 80166cc:	78ba      	ldrb	r2, [r7, #2]
 80166ce:	78f9      	ldrb	r1, [r7, #3]
 80166d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80166d4:	9303      	str	r3, [sp, #12]
 80166d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80166d8:	9302      	str	r3, [sp, #8]
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166dc:	9301      	str	r3, [sp, #4]
 80166de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166e2:	9300      	str	r3, [sp, #0]
 80166e4:	4623      	mov	r3, r4
 80166e6:	f7f1 fb0f 	bl	8007d08 <HAL_HCD_HC_SubmitRequest>
 80166ea:	4603      	mov	r3, r0
 80166ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80166ee:	7bfb      	ldrb	r3, [r7, #15]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f000 f89b 	bl	801682c <USBH_Get_USB_Status>
 80166f6:	4603      	mov	r3, r0
 80166f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3714      	adds	r7, #20
 8016700:	46bd      	mov	sp, r7
 8016702:	bd90      	pop	{r4, r7, pc}

08016704 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	460b      	mov	r3, r1
 801670e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8016716:	78fa      	ldrb	r2, [r7, #3]
 8016718:	4611      	mov	r1, r2
 801671a:	4618      	mov	r0, r3
 801671c:	f7f1 fd9c 	bl	8008258 <HAL_HCD_HC_GetURBState>
 8016720:	4603      	mov	r3, r0
}
 8016722:	4618      	mov	r0, r3
 8016724:	3708      	adds	r7, #8
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801672a:	b580      	push	{r7, lr}
 801672c:	b082      	sub	sp, #8
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	460b      	mov	r3, r1
 8016734:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801673c:	2b01      	cmp	r3, #1
 801673e:	d103      	bne.n	8016748 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8016740:	78fb      	ldrb	r3, [r7, #3]
 8016742:	4618      	mov	r0, r3
 8016744:	f000 f89e 	bl	8016884 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016748:	20c8      	movs	r0, #200	; 0xc8
 801674a:	f7ef fdb1 	bl	80062b0 <HAL_Delay>
  return USBH_OK;
 801674e:	2300      	movs	r3, #0
}
 8016750:	4618      	mov	r0, r3
 8016752:	3708      	adds	r7, #8
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}

08016758 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016758:	b480      	push	{r7}
 801675a:	b085      	sub	sp, #20
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	460b      	mov	r3, r1
 8016762:	70fb      	strb	r3, [r7, #3]
 8016764:	4613      	mov	r3, r2
 8016766:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801676e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8016770:	78fb      	ldrb	r3, [r7, #3]
 8016772:	68fa      	ldr	r2, [r7, #12]
 8016774:	212c      	movs	r1, #44	; 0x2c
 8016776:	fb01 f303 	mul.w	r3, r1, r3
 801677a:	4413      	add	r3, r2
 801677c:	333b      	adds	r3, #59	; 0x3b
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d009      	beq.n	8016798 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016784:	78fb      	ldrb	r3, [r7, #3]
 8016786:	68fa      	ldr	r2, [r7, #12]
 8016788:	212c      	movs	r1, #44	; 0x2c
 801678a:	fb01 f303 	mul.w	r3, r1, r3
 801678e:	4413      	add	r3, r2
 8016790:	3354      	adds	r3, #84	; 0x54
 8016792:	78ba      	ldrb	r2, [r7, #2]
 8016794:	701a      	strb	r2, [r3, #0]
 8016796:	e008      	b.n	80167aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016798:	78fb      	ldrb	r3, [r7, #3]
 801679a:	68fa      	ldr	r2, [r7, #12]
 801679c:	212c      	movs	r1, #44	; 0x2c
 801679e:	fb01 f303 	mul.w	r3, r1, r3
 80167a2:	4413      	add	r3, r2
 80167a4:	3355      	adds	r3, #85	; 0x55
 80167a6:	78ba      	ldrb	r2, [r7, #2]
 80167a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80167aa:	2300      	movs	r3, #0
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3714      	adds	r7, #20
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bc80      	pop	{r7}
 80167b4:	4770      	bx	lr

080167b6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80167b6:	b480      	push	{r7}
 80167b8:	b085      	sub	sp, #20
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	460b      	mov	r3, r1
 80167c0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80167c2:	2300      	movs	r3, #0
 80167c4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80167cc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80167ce:	78fb      	ldrb	r3, [r7, #3]
 80167d0:	68ba      	ldr	r2, [r7, #8]
 80167d2:	212c      	movs	r1, #44	; 0x2c
 80167d4:	fb01 f303 	mul.w	r3, r1, r3
 80167d8:	4413      	add	r3, r2
 80167da:	333b      	adds	r3, #59	; 0x3b
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d009      	beq.n	80167f6 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80167e2:	78fb      	ldrb	r3, [r7, #3]
 80167e4:	68ba      	ldr	r2, [r7, #8]
 80167e6:	212c      	movs	r1, #44	; 0x2c
 80167e8:	fb01 f303 	mul.w	r3, r1, r3
 80167ec:	4413      	add	r3, r2
 80167ee:	3354      	adds	r3, #84	; 0x54
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	73fb      	strb	r3, [r7, #15]
 80167f4:	e008      	b.n	8016808 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80167f6:	78fb      	ldrb	r3, [r7, #3]
 80167f8:	68ba      	ldr	r2, [r7, #8]
 80167fa:	212c      	movs	r1, #44	; 0x2c
 80167fc:	fb01 f303 	mul.w	r3, r1, r3
 8016800:	4413      	add	r3, r2
 8016802:	3355      	adds	r3, #85	; 0x55
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8016808:	7bfb      	ldrb	r3, [r7, #15]
}
 801680a:	4618      	mov	r0, r3
 801680c:	3714      	adds	r7, #20
 801680e:	46bd      	mov	sp, r7
 8016810:	bc80      	pop	{r7}
 8016812:	4770      	bx	lr

08016814 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f7ef fd47 	bl	80062b0 <HAL_Delay>
}
 8016822:	bf00      	nop
 8016824:	3708      	adds	r7, #8
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
	...

0801682c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801682c:	b480      	push	{r7}
 801682e:	b085      	sub	sp, #20
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016836:	2300      	movs	r3, #0
 8016838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801683a:	79fb      	ldrb	r3, [r7, #7]
 801683c:	2b03      	cmp	r3, #3
 801683e:	d817      	bhi.n	8016870 <USBH_Get_USB_Status+0x44>
 8016840:	a201      	add	r2, pc, #4	; (adr r2, 8016848 <USBH_Get_USB_Status+0x1c>)
 8016842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016846:	bf00      	nop
 8016848:	08016859 	.word	0x08016859
 801684c:	0801685f 	.word	0x0801685f
 8016850:	08016865 	.word	0x08016865
 8016854:	0801686b 	.word	0x0801686b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016858:	2300      	movs	r3, #0
 801685a:	73fb      	strb	r3, [r7, #15]
    break;
 801685c:	e00b      	b.n	8016876 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801685e:	2302      	movs	r3, #2
 8016860:	73fb      	strb	r3, [r7, #15]
    break;
 8016862:	e008      	b.n	8016876 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016864:	2301      	movs	r3, #1
 8016866:	73fb      	strb	r3, [r7, #15]
    break;
 8016868:	e005      	b.n	8016876 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801686a:	2302      	movs	r3, #2
 801686c:	73fb      	strb	r3, [r7, #15]
    break;
 801686e:	e002      	b.n	8016876 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016870:	2302      	movs	r3, #2
 8016872:	73fb      	strb	r3, [r7, #15]
    break;
 8016874:	bf00      	nop
  }
  return usb_status;
 8016876:	7bfb      	ldrb	r3, [r7, #15]
}
 8016878:	4618      	mov	r0, r3
 801687a:	3714      	adds	r7, #20
 801687c:	46bd      	mov	sp, r7
 801687e:	bc80      	pop	{r7}
 8016880:	4770      	bx	lr
 8016882:	bf00      	nop

08016884 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801688e:	79fb      	ldrb	r3, [r7, #7]
 8016890:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016892:	79fb      	ldrb	r3, [r7, #7]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d102      	bne.n	801689e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016898:	2300      	movs	r3, #0
 801689a:	73fb      	strb	r3, [r7, #15]
 801689c:	e001      	b.n	80168a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801689e:	2301      	movs	r3, #1
 80168a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 80168a2:	7bfb      	ldrb	r3, [r7, #15]
 80168a4:	461a      	mov	r2, r3
 80168a6:	2104      	movs	r1, #4
 80168a8:	4803      	ldr	r0, [pc, #12]	; (80168b8 <MX_DriverVbusFS+0x34>)
 80168aa:	f7f1 f8e8 	bl	8007a7e <HAL_GPIO_WritePin>
}
 80168ae:	bf00      	nop
 80168b0:	3710      	adds	r7, #16
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}
 80168b6:	bf00      	nop
 80168b8:	40020800 	.word	0x40020800

080168bc <__errno>:
 80168bc:	4b01      	ldr	r3, [pc, #4]	; (80168c4 <__errno+0x8>)
 80168be:	6818      	ldr	r0, [r3, #0]
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	20000294 	.word	0x20000294

080168c8 <std>:
 80168c8:	2300      	movs	r3, #0
 80168ca:	b510      	push	{r4, lr}
 80168cc:	4604      	mov	r4, r0
 80168ce:	e9c0 3300 	strd	r3, r3, [r0]
 80168d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168d6:	6083      	str	r3, [r0, #8]
 80168d8:	8181      	strh	r1, [r0, #12]
 80168da:	6643      	str	r3, [r0, #100]	; 0x64
 80168dc:	81c2      	strh	r2, [r0, #14]
 80168de:	6183      	str	r3, [r0, #24]
 80168e0:	4619      	mov	r1, r3
 80168e2:	2208      	movs	r2, #8
 80168e4:	305c      	adds	r0, #92	; 0x5c
 80168e6:	f000 f92b 	bl	8016b40 <memset>
 80168ea:	4b05      	ldr	r3, [pc, #20]	; (8016900 <std+0x38>)
 80168ec:	6224      	str	r4, [r4, #32]
 80168ee:	6263      	str	r3, [r4, #36]	; 0x24
 80168f0:	4b04      	ldr	r3, [pc, #16]	; (8016904 <std+0x3c>)
 80168f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80168f4:	4b04      	ldr	r3, [pc, #16]	; (8016908 <std+0x40>)
 80168f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80168f8:	4b04      	ldr	r3, [pc, #16]	; (801690c <std+0x44>)
 80168fa:	6323      	str	r3, [r4, #48]	; 0x30
 80168fc:	bd10      	pop	{r4, pc}
 80168fe:	bf00      	nop
 8016900:	08017abd 	.word	0x08017abd
 8016904:	08017adf 	.word	0x08017adf
 8016908:	08017b17 	.word	0x08017b17
 801690c:	08017b3b 	.word	0x08017b3b

08016910 <_cleanup_r>:
 8016910:	4901      	ldr	r1, [pc, #4]	; (8016918 <_cleanup_r+0x8>)
 8016912:	f000 b8af 	b.w	8016a74 <_fwalk_reent>
 8016916:	bf00      	nop
 8016918:	080196d9 	.word	0x080196d9

0801691c <__sfmoreglue>:
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	2568      	movs	r5, #104	; 0x68
 8016920:	1e4a      	subs	r2, r1, #1
 8016922:	4355      	muls	r5, r2
 8016924:	460e      	mov	r6, r1
 8016926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801692a:	f000 f95d 	bl	8016be8 <_malloc_r>
 801692e:	4604      	mov	r4, r0
 8016930:	b140      	cbz	r0, 8016944 <__sfmoreglue+0x28>
 8016932:	2100      	movs	r1, #0
 8016934:	e9c0 1600 	strd	r1, r6, [r0]
 8016938:	300c      	adds	r0, #12
 801693a:	60a0      	str	r0, [r4, #8]
 801693c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016940:	f000 f8fe 	bl	8016b40 <memset>
 8016944:	4620      	mov	r0, r4
 8016946:	bd70      	pop	{r4, r5, r6, pc}

08016948 <__sfp_lock_acquire>:
 8016948:	4801      	ldr	r0, [pc, #4]	; (8016950 <__sfp_lock_acquire+0x8>)
 801694a:	f000 b8d8 	b.w	8016afe <__retarget_lock_acquire_recursive>
 801694e:	bf00      	nop
 8016950:	2000e6a8 	.word	0x2000e6a8

08016954 <__sfp_lock_release>:
 8016954:	4801      	ldr	r0, [pc, #4]	; (801695c <__sfp_lock_release+0x8>)
 8016956:	f000 b8d3 	b.w	8016b00 <__retarget_lock_release_recursive>
 801695a:	bf00      	nop
 801695c:	2000e6a8 	.word	0x2000e6a8

08016960 <__sinit_lock_acquire>:
 8016960:	4801      	ldr	r0, [pc, #4]	; (8016968 <__sinit_lock_acquire+0x8>)
 8016962:	f000 b8cc 	b.w	8016afe <__retarget_lock_acquire_recursive>
 8016966:	bf00      	nop
 8016968:	2000e6a3 	.word	0x2000e6a3

0801696c <__sinit_lock_release>:
 801696c:	4801      	ldr	r0, [pc, #4]	; (8016974 <__sinit_lock_release+0x8>)
 801696e:	f000 b8c7 	b.w	8016b00 <__retarget_lock_release_recursive>
 8016972:	bf00      	nop
 8016974:	2000e6a3 	.word	0x2000e6a3

08016978 <__sinit>:
 8016978:	b510      	push	{r4, lr}
 801697a:	4604      	mov	r4, r0
 801697c:	f7ff fff0 	bl	8016960 <__sinit_lock_acquire>
 8016980:	69a3      	ldr	r3, [r4, #24]
 8016982:	b11b      	cbz	r3, 801698c <__sinit+0x14>
 8016984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016988:	f7ff bff0 	b.w	801696c <__sinit_lock_release>
 801698c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016990:	6523      	str	r3, [r4, #80]	; 0x50
 8016992:	4b13      	ldr	r3, [pc, #76]	; (80169e0 <__sinit+0x68>)
 8016994:	4a13      	ldr	r2, [pc, #76]	; (80169e4 <__sinit+0x6c>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	62a2      	str	r2, [r4, #40]	; 0x28
 801699a:	42a3      	cmp	r3, r4
 801699c:	bf08      	it	eq
 801699e:	2301      	moveq	r3, #1
 80169a0:	4620      	mov	r0, r4
 80169a2:	bf08      	it	eq
 80169a4:	61a3      	streq	r3, [r4, #24]
 80169a6:	f000 f81f 	bl	80169e8 <__sfp>
 80169aa:	6060      	str	r0, [r4, #4]
 80169ac:	4620      	mov	r0, r4
 80169ae:	f000 f81b 	bl	80169e8 <__sfp>
 80169b2:	60a0      	str	r0, [r4, #8]
 80169b4:	4620      	mov	r0, r4
 80169b6:	f000 f817 	bl	80169e8 <__sfp>
 80169ba:	2200      	movs	r2, #0
 80169bc:	2104      	movs	r1, #4
 80169be:	60e0      	str	r0, [r4, #12]
 80169c0:	6860      	ldr	r0, [r4, #4]
 80169c2:	f7ff ff81 	bl	80168c8 <std>
 80169c6:	2201      	movs	r2, #1
 80169c8:	2109      	movs	r1, #9
 80169ca:	68a0      	ldr	r0, [r4, #8]
 80169cc:	f7ff ff7c 	bl	80168c8 <std>
 80169d0:	2202      	movs	r2, #2
 80169d2:	2112      	movs	r1, #18
 80169d4:	68e0      	ldr	r0, [r4, #12]
 80169d6:	f7ff ff77 	bl	80168c8 <std>
 80169da:	2301      	movs	r3, #1
 80169dc:	61a3      	str	r3, [r4, #24]
 80169de:	e7d1      	b.n	8016984 <__sinit+0xc>
 80169e0:	0801b450 	.word	0x0801b450
 80169e4:	08016911 	.word	0x08016911

080169e8 <__sfp>:
 80169e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ea:	4607      	mov	r7, r0
 80169ec:	f7ff ffac 	bl	8016948 <__sfp_lock_acquire>
 80169f0:	4b1e      	ldr	r3, [pc, #120]	; (8016a6c <__sfp+0x84>)
 80169f2:	681e      	ldr	r6, [r3, #0]
 80169f4:	69b3      	ldr	r3, [r6, #24]
 80169f6:	b913      	cbnz	r3, 80169fe <__sfp+0x16>
 80169f8:	4630      	mov	r0, r6
 80169fa:	f7ff ffbd 	bl	8016978 <__sinit>
 80169fe:	3648      	adds	r6, #72	; 0x48
 8016a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	d503      	bpl.n	8016a10 <__sfp+0x28>
 8016a08:	6833      	ldr	r3, [r6, #0]
 8016a0a:	b30b      	cbz	r3, 8016a50 <__sfp+0x68>
 8016a0c:	6836      	ldr	r6, [r6, #0]
 8016a0e:	e7f7      	b.n	8016a00 <__sfp+0x18>
 8016a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a14:	b9d5      	cbnz	r5, 8016a4c <__sfp+0x64>
 8016a16:	4b16      	ldr	r3, [pc, #88]	; (8016a70 <__sfp+0x88>)
 8016a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a1c:	60e3      	str	r3, [r4, #12]
 8016a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8016a20:	f000 f86c 	bl	8016afc <__retarget_lock_init_recursive>
 8016a24:	f7ff ff96 	bl	8016954 <__sfp_lock_release>
 8016a28:	2208      	movs	r2, #8
 8016a2a:	4629      	mov	r1, r5
 8016a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a34:	6025      	str	r5, [r4, #0]
 8016a36:	61a5      	str	r5, [r4, #24]
 8016a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a3c:	f000 f880 	bl	8016b40 <memset>
 8016a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a48:	4620      	mov	r0, r4
 8016a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a4c:	3468      	adds	r4, #104	; 0x68
 8016a4e:	e7d9      	b.n	8016a04 <__sfp+0x1c>
 8016a50:	2104      	movs	r1, #4
 8016a52:	4638      	mov	r0, r7
 8016a54:	f7ff ff62 	bl	801691c <__sfmoreglue>
 8016a58:	4604      	mov	r4, r0
 8016a5a:	6030      	str	r0, [r6, #0]
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d1d5      	bne.n	8016a0c <__sfp+0x24>
 8016a60:	f7ff ff78 	bl	8016954 <__sfp_lock_release>
 8016a64:	230c      	movs	r3, #12
 8016a66:	603b      	str	r3, [r7, #0]
 8016a68:	e7ee      	b.n	8016a48 <__sfp+0x60>
 8016a6a:	bf00      	nop
 8016a6c:	0801b450 	.word	0x0801b450
 8016a70:	ffff0001 	.word	0xffff0001

08016a74 <_fwalk_reent>:
 8016a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a78:	4606      	mov	r6, r0
 8016a7a:	4688      	mov	r8, r1
 8016a7c:	2700      	movs	r7, #0
 8016a7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a86:	f1b9 0901 	subs.w	r9, r9, #1
 8016a8a:	d505      	bpl.n	8016a98 <_fwalk_reent+0x24>
 8016a8c:	6824      	ldr	r4, [r4, #0]
 8016a8e:	2c00      	cmp	r4, #0
 8016a90:	d1f7      	bne.n	8016a82 <_fwalk_reent+0xe>
 8016a92:	4638      	mov	r0, r7
 8016a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a98:	89ab      	ldrh	r3, [r5, #12]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d907      	bls.n	8016aae <_fwalk_reent+0x3a>
 8016a9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	d003      	beq.n	8016aae <_fwalk_reent+0x3a>
 8016aa6:	4629      	mov	r1, r5
 8016aa8:	4630      	mov	r0, r6
 8016aaa:	47c0      	blx	r8
 8016aac:	4307      	orrs	r7, r0
 8016aae:	3568      	adds	r5, #104	; 0x68
 8016ab0:	e7e9      	b.n	8016a86 <_fwalk_reent+0x12>
	...

08016ab4 <__libc_init_array>:
 8016ab4:	b570      	push	{r4, r5, r6, lr}
 8016ab6:	2600      	movs	r6, #0
 8016ab8:	4d0c      	ldr	r5, [pc, #48]	; (8016aec <__libc_init_array+0x38>)
 8016aba:	4c0d      	ldr	r4, [pc, #52]	; (8016af0 <__libc_init_array+0x3c>)
 8016abc:	1b64      	subs	r4, r4, r5
 8016abe:	10a4      	asrs	r4, r4, #2
 8016ac0:	42a6      	cmp	r6, r4
 8016ac2:	d109      	bne.n	8016ad8 <__libc_init_array+0x24>
 8016ac4:	f004 fba8 	bl	801b218 <_init>
 8016ac8:	2600      	movs	r6, #0
 8016aca:	4d0a      	ldr	r5, [pc, #40]	; (8016af4 <__libc_init_array+0x40>)
 8016acc:	4c0a      	ldr	r4, [pc, #40]	; (8016af8 <__libc_init_array+0x44>)
 8016ace:	1b64      	subs	r4, r4, r5
 8016ad0:	10a4      	asrs	r4, r4, #2
 8016ad2:	42a6      	cmp	r6, r4
 8016ad4:	d105      	bne.n	8016ae2 <__libc_init_array+0x2e>
 8016ad6:	bd70      	pop	{r4, r5, r6, pc}
 8016ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016adc:	4798      	blx	r3
 8016ade:	3601      	adds	r6, #1
 8016ae0:	e7ee      	b.n	8016ac0 <__libc_init_array+0xc>
 8016ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ae6:	4798      	blx	r3
 8016ae8:	3601      	adds	r6, #1
 8016aea:	e7f2      	b.n	8016ad2 <__libc_init_array+0x1e>
 8016aec:	0801b8ac 	.word	0x0801b8ac
 8016af0:	0801b8ac 	.word	0x0801b8ac
 8016af4:	0801b8ac 	.word	0x0801b8ac
 8016af8:	0801b8b0 	.word	0x0801b8b0

08016afc <__retarget_lock_init_recursive>:
 8016afc:	4770      	bx	lr

08016afe <__retarget_lock_acquire_recursive>:
 8016afe:	4770      	bx	lr

08016b00 <__retarget_lock_release_recursive>:
 8016b00:	4770      	bx	lr
	...

08016b04 <malloc>:
 8016b04:	4b02      	ldr	r3, [pc, #8]	; (8016b10 <malloc+0xc>)
 8016b06:	4601      	mov	r1, r0
 8016b08:	6818      	ldr	r0, [r3, #0]
 8016b0a:	f000 b86d 	b.w	8016be8 <_malloc_r>
 8016b0e:	bf00      	nop
 8016b10:	20000294 	.word	0x20000294

08016b14 <free>:
 8016b14:	4b02      	ldr	r3, [pc, #8]	; (8016b20 <free+0xc>)
 8016b16:	4601      	mov	r1, r0
 8016b18:	6818      	ldr	r0, [r3, #0]
 8016b1a:	f000 b819 	b.w	8016b50 <_free_r>
 8016b1e:	bf00      	nop
 8016b20:	20000294 	.word	0x20000294

08016b24 <memcpy>:
 8016b24:	440a      	add	r2, r1
 8016b26:	4291      	cmp	r1, r2
 8016b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b2c:	d100      	bne.n	8016b30 <memcpy+0xc>
 8016b2e:	4770      	bx	lr
 8016b30:	b510      	push	{r4, lr}
 8016b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b36:	4291      	cmp	r1, r2
 8016b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b3c:	d1f9      	bne.n	8016b32 <memcpy+0xe>
 8016b3e:	bd10      	pop	{r4, pc}

08016b40 <memset>:
 8016b40:	4603      	mov	r3, r0
 8016b42:	4402      	add	r2, r0
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d100      	bne.n	8016b4a <memset+0xa>
 8016b48:	4770      	bx	lr
 8016b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8016b4e:	e7f9      	b.n	8016b44 <memset+0x4>

08016b50 <_free_r>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	4605      	mov	r5, r0
 8016b54:	2900      	cmp	r1, #0
 8016b56:	d043      	beq.n	8016be0 <_free_r+0x90>
 8016b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b5c:	1f0c      	subs	r4, r1, #4
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	bfb8      	it	lt
 8016b62:	18e4      	addlt	r4, r4, r3
 8016b64:	f003 f990 	bl	8019e88 <__malloc_lock>
 8016b68:	4a1e      	ldr	r2, [pc, #120]	; (8016be4 <_free_r+0x94>)
 8016b6a:	6813      	ldr	r3, [r2, #0]
 8016b6c:	4610      	mov	r0, r2
 8016b6e:	b933      	cbnz	r3, 8016b7e <_free_r+0x2e>
 8016b70:	6063      	str	r3, [r4, #4]
 8016b72:	6014      	str	r4, [r2, #0]
 8016b74:	4628      	mov	r0, r5
 8016b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b7a:	f003 b98b 	b.w	8019e94 <__malloc_unlock>
 8016b7e:	42a3      	cmp	r3, r4
 8016b80:	d90a      	bls.n	8016b98 <_free_r+0x48>
 8016b82:	6821      	ldr	r1, [r4, #0]
 8016b84:	1862      	adds	r2, r4, r1
 8016b86:	4293      	cmp	r3, r2
 8016b88:	bf01      	itttt	eq
 8016b8a:	681a      	ldreq	r2, [r3, #0]
 8016b8c:	685b      	ldreq	r3, [r3, #4]
 8016b8e:	1852      	addeq	r2, r2, r1
 8016b90:	6022      	streq	r2, [r4, #0]
 8016b92:	6063      	str	r3, [r4, #4]
 8016b94:	6004      	str	r4, [r0, #0]
 8016b96:	e7ed      	b.n	8016b74 <_free_r+0x24>
 8016b98:	461a      	mov	r2, r3
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	b10b      	cbz	r3, 8016ba2 <_free_r+0x52>
 8016b9e:	42a3      	cmp	r3, r4
 8016ba0:	d9fa      	bls.n	8016b98 <_free_r+0x48>
 8016ba2:	6811      	ldr	r1, [r2, #0]
 8016ba4:	1850      	adds	r0, r2, r1
 8016ba6:	42a0      	cmp	r0, r4
 8016ba8:	d10b      	bne.n	8016bc2 <_free_r+0x72>
 8016baa:	6820      	ldr	r0, [r4, #0]
 8016bac:	4401      	add	r1, r0
 8016bae:	1850      	adds	r0, r2, r1
 8016bb0:	4283      	cmp	r3, r0
 8016bb2:	6011      	str	r1, [r2, #0]
 8016bb4:	d1de      	bne.n	8016b74 <_free_r+0x24>
 8016bb6:	6818      	ldr	r0, [r3, #0]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	4401      	add	r1, r0
 8016bbc:	6011      	str	r1, [r2, #0]
 8016bbe:	6053      	str	r3, [r2, #4]
 8016bc0:	e7d8      	b.n	8016b74 <_free_r+0x24>
 8016bc2:	d902      	bls.n	8016bca <_free_r+0x7a>
 8016bc4:	230c      	movs	r3, #12
 8016bc6:	602b      	str	r3, [r5, #0]
 8016bc8:	e7d4      	b.n	8016b74 <_free_r+0x24>
 8016bca:	6820      	ldr	r0, [r4, #0]
 8016bcc:	1821      	adds	r1, r4, r0
 8016bce:	428b      	cmp	r3, r1
 8016bd0:	bf01      	itttt	eq
 8016bd2:	6819      	ldreq	r1, [r3, #0]
 8016bd4:	685b      	ldreq	r3, [r3, #4]
 8016bd6:	1809      	addeq	r1, r1, r0
 8016bd8:	6021      	streq	r1, [r4, #0]
 8016bda:	6063      	str	r3, [r4, #4]
 8016bdc:	6054      	str	r4, [r2, #4]
 8016bde:	e7c9      	b.n	8016b74 <_free_r+0x24>
 8016be0:	bd38      	pop	{r3, r4, r5, pc}
 8016be2:	bf00      	nop
 8016be4:	200095ec 	.word	0x200095ec

08016be8 <_malloc_r>:
 8016be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bea:	1ccd      	adds	r5, r1, #3
 8016bec:	f025 0503 	bic.w	r5, r5, #3
 8016bf0:	3508      	adds	r5, #8
 8016bf2:	2d0c      	cmp	r5, #12
 8016bf4:	bf38      	it	cc
 8016bf6:	250c      	movcc	r5, #12
 8016bf8:	2d00      	cmp	r5, #0
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	db01      	blt.n	8016c02 <_malloc_r+0x1a>
 8016bfe:	42a9      	cmp	r1, r5
 8016c00:	d903      	bls.n	8016c0a <_malloc_r+0x22>
 8016c02:	230c      	movs	r3, #12
 8016c04:	6033      	str	r3, [r6, #0]
 8016c06:	2000      	movs	r0, #0
 8016c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c0a:	f003 f93d 	bl	8019e88 <__malloc_lock>
 8016c0e:	4921      	ldr	r1, [pc, #132]	; (8016c94 <_malloc_r+0xac>)
 8016c10:	680a      	ldr	r2, [r1, #0]
 8016c12:	4614      	mov	r4, r2
 8016c14:	b99c      	cbnz	r4, 8016c3e <_malloc_r+0x56>
 8016c16:	4f20      	ldr	r7, [pc, #128]	; (8016c98 <_malloc_r+0xb0>)
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	b923      	cbnz	r3, 8016c26 <_malloc_r+0x3e>
 8016c1c:	4621      	mov	r1, r4
 8016c1e:	4630      	mov	r0, r6
 8016c20:	f000 ff18 	bl	8017a54 <_sbrk_r>
 8016c24:	6038      	str	r0, [r7, #0]
 8016c26:	4629      	mov	r1, r5
 8016c28:	4630      	mov	r0, r6
 8016c2a:	f000 ff13 	bl	8017a54 <_sbrk_r>
 8016c2e:	1c43      	adds	r3, r0, #1
 8016c30:	d123      	bne.n	8016c7a <_malloc_r+0x92>
 8016c32:	230c      	movs	r3, #12
 8016c34:	4630      	mov	r0, r6
 8016c36:	6033      	str	r3, [r6, #0]
 8016c38:	f003 f92c 	bl	8019e94 <__malloc_unlock>
 8016c3c:	e7e3      	b.n	8016c06 <_malloc_r+0x1e>
 8016c3e:	6823      	ldr	r3, [r4, #0]
 8016c40:	1b5b      	subs	r3, r3, r5
 8016c42:	d417      	bmi.n	8016c74 <_malloc_r+0x8c>
 8016c44:	2b0b      	cmp	r3, #11
 8016c46:	d903      	bls.n	8016c50 <_malloc_r+0x68>
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	441c      	add	r4, r3
 8016c4c:	6025      	str	r5, [r4, #0]
 8016c4e:	e004      	b.n	8016c5a <_malloc_r+0x72>
 8016c50:	6863      	ldr	r3, [r4, #4]
 8016c52:	42a2      	cmp	r2, r4
 8016c54:	bf0c      	ite	eq
 8016c56:	600b      	streq	r3, [r1, #0]
 8016c58:	6053      	strne	r3, [r2, #4]
 8016c5a:	4630      	mov	r0, r6
 8016c5c:	f003 f91a 	bl	8019e94 <__malloc_unlock>
 8016c60:	f104 000b 	add.w	r0, r4, #11
 8016c64:	1d23      	adds	r3, r4, #4
 8016c66:	f020 0007 	bic.w	r0, r0, #7
 8016c6a:	1ac2      	subs	r2, r0, r3
 8016c6c:	d0cc      	beq.n	8016c08 <_malloc_r+0x20>
 8016c6e:	1a1b      	subs	r3, r3, r0
 8016c70:	50a3      	str	r3, [r4, r2]
 8016c72:	e7c9      	b.n	8016c08 <_malloc_r+0x20>
 8016c74:	4622      	mov	r2, r4
 8016c76:	6864      	ldr	r4, [r4, #4]
 8016c78:	e7cc      	b.n	8016c14 <_malloc_r+0x2c>
 8016c7a:	1cc4      	adds	r4, r0, #3
 8016c7c:	f024 0403 	bic.w	r4, r4, #3
 8016c80:	42a0      	cmp	r0, r4
 8016c82:	d0e3      	beq.n	8016c4c <_malloc_r+0x64>
 8016c84:	1a21      	subs	r1, r4, r0
 8016c86:	4630      	mov	r0, r6
 8016c88:	f000 fee4 	bl	8017a54 <_sbrk_r>
 8016c8c:	3001      	adds	r0, #1
 8016c8e:	d1dd      	bne.n	8016c4c <_malloc_r+0x64>
 8016c90:	e7cf      	b.n	8016c32 <_malloc_r+0x4a>
 8016c92:	bf00      	nop
 8016c94:	200095ec 	.word	0x200095ec
 8016c98:	200095f0 	.word	0x200095f0

08016c9c <__cvt>:
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ca2:	461f      	mov	r7, r3
 8016ca4:	bfbb      	ittet	lt
 8016ca6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8016caa:	461f      	movlt	r7, r3
 8016cac:	2300      	movge	r3, #0
 8016cae:	232d      	movlt	r3, #45	; 0x2d
 8016cb0:	b088      	sub	sp, #32
 8016cb2:	4614      	mov	r4, r2
 8016cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016cb8:	7013      	strb	r3, [r2, #0]
 8016cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8016cc0:	f023 0820 	bic.w	r8, r3, #32
 8016cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016cc8:	d005      	beq.n	8016cd6 <__cvt+0x3a>
 8016cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016cce:	d100      	bne.n	8016cd2 <__cvt+0x36>
 8016cd0:	3501      	adds	r5, #1
 8016cd2:	2302      	movs	r3, #2
 8016cd4:	e000      	b.n	8016cd8 <__cvt+0x3c>
 8016cd6:	2303      	movs	r3, #3
 8016cd8:	aa07      	add	r2, sp, #28
 8016cda:	9204      	str	r2, [sp, #16]
 8016cdc:	aa06      	add	r2, sp, #24
 8016cde:	e9cd a202 	strd	sl, r2, [sp, #8]
 8016ce2:	e9cd 3500 	strd	r3, r5, [sp]
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	463b      	mov	r3, r7
 8016cea:	f001 fe81 	bl	80189f0 <_dtoa_r>
 8016cee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016cf2:	4606      	mov	r6, r0
 8016cf4:	d102      	bne.n	8016cfc <__cvt+0x60>
 8016cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cf8:	07db      	lsls	r3, r3, #31
 8016cfa:	d522      	bpl.n	8016d42 <__cvt+0xa6>
 8016cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016d00:	eb06 0905 	add.w	r9, r6, r5
 8016d04:	d110      	bne.n	8016d28 <__cvt+0x8c>
 8016d06:	7833      	ldrb	r3, [r6, #0]
 8016d08:	2b30      	cmp	r3, #48	; 0x30
 8016d0a:	d10a      	bne.n	8016d22 <__cvt+0x86>
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	2300      	movs	r3, #0
 8016d10:	4620      	mov	r0, r4
 8016d12:	4639      	mov	r1, r7
 8016d14:	f7e9 fe92 	bl	8000a3c <__aeabi_dcmpeq>
 8016d18:	b918      	cbnz	r0, 8016d22 <__cvt+0x86>
 8016d1a:	f1c5 0501 	rsb	r5, r5, #1
 8016d1e:	f8ca 5000 	str.w	r5, [sl]
 8016d22:	f8da 3000 	ldr.w	r3, [sl]
 8016d26:	4499      	add	r9, r3
 8016d28:	2200      	movs	r2, #0
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	4639      	mov	r1, r7
 8016d30:	f7e9 fe84 	bl	8000a3c <__aeabi_dcmpeq>
 8016d34:	b108      	cbz	r0, 8016d3a <__cvt+0x9e>
 8016d36:	f8cd 901c 	str.w	r9, [sp, #28]
 8016d3a:	2230      	movs	r2, #48	; 0x30
 8016d3c:	9b07      	ldr	r3, [sp, #28]
 8016d3e:	454b      	cmp	r3, r9
 8016d40:	d307      	bcc.n	8016d52 <__cvt+0xb6>
 8016d42:	4630      	mov	r0, r6
 8016d44:	9b07      	ldr	r3, [sp, #28]
 8016d46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016d48:	1b9b      	subs	r3, r3, r6
 8016d4a:	6013      	str	r3, [r2, #0]
 8016d4c:	b008      	add	sp, #32
 8016d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d52:	1c59      	adds	r1, r3, #1
 8016d54:	9107      	str	r1, [sp, #28]
 8016d56:	701a      	strb	r2, [r3, #0]
 8016d58:	e7f0      	b.n	8016d3c <__cvt+0xa0>

08016d5a <__exponent>:
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d5e:	2900      	cmp	r1, #0
 8016d60:	f803 2b02 	strb.w	r2, [r3], #2
 8016d64:	bfb6      	itet	lt
 8016d66:	222d      	movlt	r2, #45	; 0x2d
 8016d68:	222b      	movge	r2, #43	; 0x2b
 8016d6a:	4249      	neglt	r1, r1
 8016d6c:	2909      	cmp	r1, #9
 8016d6e:	7042      	strb	r2, [r0, #1]
 8016d70:	dd2b      	ble.n	8016dca <__exponent+0x70>
 8016d72:	f10d 0407 	add.w	r4, sp, #7
 8016d76:	46a4      	mov	ip, r4
 8016d78:	270a      	movs	r7, #10
 8016d7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8016d7e:	460a      	mov	r2, r1
 8016d80:	46a6      	mov	lr, r4
 8016d82:	fb07 1516 	mls	r5, r7, r6, r1
 8016d86:	2a63      	cmp	r2, #99	; 0x63
 8016d88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8016d8c:	4631      	mov	r1, r6
 8016d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016d96:	dcf0      	bgt.n	8016d7a <__exponent+0x20>
 8016d98:	3130      	adds	r1, #48	; 0x30
 8016d9a:	f1ae 0502 	sub.w	r5, lr, #2
 8016d9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016da2:	4629      	mov	r1, r5
 8016da4:	1c44      	adds	r4, r0, #1
 8016da6:	4561      	cmp	r1, ip
 8016da8:	d30a      	bcc.n	8016dc0 <__exponent+0x66>
 8016daa:	f10d 0209 	add.w	r2, sp, #9
 8016dae:	eba2 020e 	sub.w	r2, r2, lr
 8016db2:	4565      	cmp	r5, ip
 8016db4:	bf88      	it	hi
 8016db6:	2200      	movhi	r2, #0
 8016db8:	4413      	add	r3, r2
 8016dba:	1a18      	subs	r0, r3, r0
 8016dbc:	b003      	add	sp, #12
 8016dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016dc4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016dc8:	e7ed      	b.n	8016da6 <__exponent+0x4c>
 8016dca:	2330      	movs	r3, #48	; 0x30
 8016dcc:	3130      	adds	r1, #48	; 0x30
 8016dce:	7083      	strb	r3, [r0, #2]
 8016dd0:	70c1      	strb	r1, [r0, #3]
 8016dd2:	1d03      	adds	r3, r0, #4
 8016dd4:	e7f1      	b.n	8016dba <__exponent+0x60>
	...

08016dd8 <_printf_float>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	b091      	sub	sp, #68	; 0x44
 8016dde:	460c      	mov	r4, r1
 8016de0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016de4:	4616      	mov	r6, r2
 8016de6:	461f      	mov	r7, r3
 8016de8:	4605      	mov	r5, r0
 8016dea:	f003 f817 	bl	8019e1c <_localeconv_r>
 8016dee:	6803      	ldr	r3, [r0, #0]
 8016df0:	4618      	mov	r0, r3
 8016df2:	9309      	str	r3, [sp, #36]	; 0x24
 8016df4:	f7e9 f9f6 	bl	80001e4 <strlen>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8016dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8016e00:	900a      	str	r0, [sp, #40]	; 0x28
 8016e02:	3307      	adds	r3, #7
 8016e04:	f023 0307 	bic.w	r3, r3, #7
 8016e08:	f103 0208 	add.w	r2, r3, #8
 8016e0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016e10:	f8d4 b000 	ldr.w	fp, [r4]
 8016e14:	f8c8 2000 	str.w	r2, [r8]
 8016e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016e20:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8016e24:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8016e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e2e:	4640      	mov	r0, r8
 8016e30:	4b9c      	ldr	r3, [pc, #624]	; (80170a4 <_printf_float+0x2cc>)
 8016e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e34:	f7e9 fe34 	bl	8000aa0 <__aeabi_dcmpun>
 8016e38:	bb70      	cbnz	r0, 8016e98 <_printf_float+0xc0>
 8016e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e3e:	4640      	mov	r0, r8
 8016e40:	4b98      	ldr	r3, [pc, #608]	; (80170a4 <_printf_float+0x2cc>)
 8016e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e44:	f7e9 fe0e 	bl	8000a64 <__aeabi_dcmple>
 8016e48:	bb30      	cbnz	r0, 8016e98 <_printf_float+0xc0>
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	4640      	mov	r0, r8
 8016e50:	4651      	mov	r1, sl
 8016e52:	f7e9 fdfd 	bl	8000a50 <__aeabi_dcmplt>
 8016e56:	b110      	cbz	r0, 8016e5e <_printf_float+0x86>
 8016e58:	232d      	movs	r3, #45	; 0x2d
 8016e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e5e:	4b92      	ldr	r3, [pc, #584]	; (80170a8 <_printf_float+0x2d0>)
 8016e60:	4892      	ldr	r0, [pc, #584]	; (80170ac <_printf_float+0x2d4>)
 8016e62:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016e66:	bf94      	ite	ls
 8016e68:	4698      	movls	r8, r3
 8016e6a:	4680      	movhi	r8, r0
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	f04f 0a00 	mov.w	sl, #0
 8016e72:	6123      	str	r3, [r4, #16]
 8016e74:	f02b 0304 	bic.w	r3, fp, #4
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	4633      	mov	r3, r6
 8016e7c:	4621      	mov	r1, r4
 8016e7e:	4628      	mov	r0, r5
 8016e80:	9700      	str	r7, [sp, #0]
 8016e82:	aa0f      	add	r2, sp, #60	; 0x3c
 8016e84:	f000 f9d4 	bl	8017230 <_printf_common>
 8016e88:	3001      	adds	r0, #1
 8016e8a:	f040 8090 	bne.w	8016fae <_printf_float+0x1d6>
 8016e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016e92:	b011      	add	sp, #68	; 0x44
 8016e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e98:	4642      	mov	r2, r8
 8016e9a:	4653      	mov	r3, sl
 8016e9c:	4640      	mov	r0, r8
 8016e9e:	4651      	mov	r1, sl
 8016ea0:	f7e9 fdfe 	bl	8000aa0 <__aeabi_dcmpun>
 8016ea4:	b148      	cbz	r0, 8016eba <_printf_float+0xe2>
 8016ea6:	f1ba 0f00 	cmp.w	sl, #0
 8016eaa:	bfb8      	it	lt
 8016eac:	232d      	movlt	r3, #45	; 0x2d
 8016eae:	4880      	ldr	r0, [pc, #512]	; (80170b0 <_printf_float+0x2d8>)
 8016eb0:	bfb8      	it	lt
 8016eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016eb6:	4b7f      	ldr	r3, [pc, #508]	; (80170b4 <_printf_float+0x2dc>)
 8016eb8:	e7d3      	b.n	8016e62 <_printf_float+0x8a>
 8016eba:	6863      	ldr	r3, [r4, #4]
 8016ebc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016ec0:	1c5a      	adds	r2, r3, #1
 8016ec2:	d142      	bne.n	8016f4a <_printf_float+0x172>
 8016ec4:	2306      	movs	r3, #6
 8016ec6:	6063      	str	r3, [r4, #4]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	9206      	str	r2, [sp, #24]
 8016ecc:	aa0e      	add	r2, sp, #56	; 0x38
 8016ece:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8016ed2:	aa0d      	add	r2, sp, #52	; 0x34
 8016ed4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8016ed8:	9203      	str	r2, [sp, #12]
 8016eda:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8016ede:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016ee2:	6023      	str	r3, [r4, #0]
 8016ee4:	6863      	ldr	r3, [r4, #4]
 8016ee6:	4642      	mov	r2, r8
 8016ee8:	9300      	str	r3, [sp, #0]
 8016eea:	4628      	mov	r0, r5
 8016eec:	4653      	mov	r3, sl
 8016eee:	910b      	str	r1, [sp, #44]	; 0x2c
 8016ef0:	f7ff fed4 	bl	8016c9c <__cvt>
 8016ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ef6:	4680      	mov	r8, r0
 8016ef8:	2947      	cmp	r1, #71	; 0x47
 8016efa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016efc:	d108      	bne.n	8016f10 <_printf_float+0x138>
 8016efe:	1cc8      	adds	r0, r1, #3
 8016f00:	db02      	blt.n	8016f08 <_printf_float+0x130>
 8016f02:	6863      	ldr	r3, [r4, #4]
 8016f04:	4299      	cmp	r1, r3
 8016f06:	dd40      	ble.n	8016f8a <_printf_float+0x1b2>
 8016f08:	f1a9 0902 	sub.w	r9, r9, #2
 8016f0c:	fa5f f989 	uxtb.w	r9, r9
 8016f10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016f14:	d81f      	bhi.n	8016f56 <_printf_float+0x17e>
 8016f16:	464a      	mov	r2, r9
 8016f18:	3901      	subs	r1, #1
 8016f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f1e:	910d      	str	r1, [sp, #52]	; 0x34
 8016f20:	f7ff ff1b 	bl	8016d5a <__exponent>
 8016f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f26:	4682      	mov	sl, r0
 8016f28:	1813      	adds	r3, r2, r0
 8016f2a:	2a01      	cmp	r2, #1
 8016f2c:	6123      	str	r3, [r4, #16]
 8016f2e:	dc02      	bgt.n	8016f36 <_printf_float+0x15e>
 8016f30:	6822      	ldr	r2, [r4, #0]
 8016f32:	07d2      	lsls	r2, r2, #31
 8016f34:	d501      	bpl.n	8016f3a <_printf_float+0x162>
 8016f36:	3301      	adds	r3, #1
 8016f38:	6123      	str	r3, [r4, #16]
 8016f3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d09b      	beq.n	8016e7a <_printf_float+0xa2>
 8016f42:	232d      	movs	r3, #45	; 0x2d
 8016f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f48:	e797      	b.n	8016e7a <_printf_float+0xa2>
 8016f4a:	2947      	cmp	r1, #71	; 0x47
 8016f4c:	d1bc      	bne.n	8016ec8 <_printf_float+0xf0>
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1ba      	bne.n	8016ec8 <_printf_float+0xf0>
 8016f52:	2301      	movs	r3, #1
 8016f54:	e7b7      	b.n	8016ec6 <_printf_float+0xee>
 8016f56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016f5a:	d118      	bne.n	8016f8e <_printf_float+0x1b6>
 8016f5c:	2900      	cmp	r1, #0
 8016f5e:	6863      	ldr	r3, [r4, #4]
 8016f60:	dd0b      	ble.n	8016f7a <_printf_float+0x1a2>
 8016f62:	6121      	str	r1, [r4, #16]
 8016f64:	b913      	cbnz	r3, 8016f6c <_printf_float+0x194>
 8016f66:	6822      	ldr	r2, [r4, #0]
 8016f68:	07d0      	lsls	r0, r2, #31
 8016f6a:	d502      	bpl.n	8016f72 <_printf_float+0x19a>
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	440b      	add	r3, r1
 8016f70:	6123      	str	r3, [r4, #16]
 8016f72:	f04f 0a00 	mov.w	sl, #0
 8016f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8016f78:	e7df      	b.n	8016f3a <_printf_float+0x162>
 8016f7a:	b913      	cbnz	r3, 8016f82 <_printf_float+0x1aa>
 8016f7c:	6822      	ldr	r2, [r4, #0]
 8016f7e:	07d2      	lsls	r2, r2, #31
 8016f80:	d501      	bpl.n	8016f86 <_printf_float+0x1ae>
 8016f82:	3302      	adds	r3, #2
 8016f84:	e7f4      	b.n	8016f70 <_printf_float+0x198>
 8016f86:	2301      	movs	r3, #1
 8016f88:	e7f2      	b.n	8016f70 <_printf_float+0x198>
 8016f8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f90:	4299      	cmp	r1, r3
 8016f92:	db05      	blt.n	8016fa0 <_printf_float+0x1c8>
 8016f94:	6823      	ldr	r3, [r4, #0]
 8016f96:	6121      	str	r1, [r4, #16]
 8016f98:	07d8      	lsls	r0, r3, #31
 8016f9a:	d5ea      	bpl.n	8016f72 <_printf_float+0x19a>
 8016f9c:	1c4b      	adds	r3, r1, #1
 8016f9e:	e7e7      	b.n	8016f70 <_printf_float+0x198>
 8016fa0:	2900      	cmp	r1, #0
 8016fa2:	bfcc      	ite	gt
 8016fa4:	2201      	movgt	r2, #1
 8016fa6:	f1c1 0202 	rsble	r2, r1, #2
 8016faa:	4413      	add	r3, r2
 8016fac:	e7e0      	b.n	8016f70 <_printf_float+0x198>
 8016fae:	6823      	ldr	r3, [r4, #0]
 8016fb0:	055a      	lsls	r2, r3, #21
 8016fb2:	d407      	bmi.n	8016fc4 <_printf_float+0x1ec>
 8016fb4:	6923      	ldr	r3, [r4, #16]
 8016fb6:	4642      	mov	r2, r8
 8016fb8:	4631      	mov	r1, r6
 8016fba:	4628      	mov	r0, r5
 8016fbc:	47b8      	blx	r7
 8016fbe:	3001      	adds	r0, #1
 8016fc0:	d12b      	bne.n	801701a <_printf_float+0x242>
 8016fc2:	e764      	b.n	8016e8e <_printf_float+0xb6>
 8016fc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016fc8:	f240 80dd 	bls.w	8017186 <_printf_float+0x3ae>
 8016fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	f7e9 fd32 	bl	8000a3c <__aeabi_dcmpeq>
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d033      	beq.n	8017044 <_printf_float+0x26c>
 8016fdc:	2301      	movs	r3, #1
 8016fde:	4631      	mov	r1, r6
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	4a35      	ldr	r2, [pc, #212]	; (80170b8 <_printf_float+0x2e0>)
 8016fe4:	47b8      	blx	r7
 8016fe6:	3001      	adds	r0, #1
 8016fe8:	f43f af51 	beq.w	8016e8e <_printf_float+0xb6>
 8016fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	db02      	blt.n	8016ffa <_printf_float+0x222>
 8016ff4:	6823      	ldr	r3, [r4, #0]
 8016ff6:	07d8      	lsls	r0, r3, #31
 8016ff8:	d50f      	bpl.n	801701a <_printf_float+0x242>
 8016ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ffe:	4631      	mov	r1, r6
 8017000:	4628      	mov	r0, r5
 8017002:	47b8      	blx	r7
 8017004:	3001      	adds	r0, #1
 8017006:	f43f af42 	beq.w	8016e8e <_printf_float+0xb6>
 801700a:	f04f 0800 	mov.w	r8, #0
 801700e:	f104 091a 	add.w	r9, r4, #26
 8017012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017014:	3b01      	subs	r3, #1
 8017016:	4543      	cmp	r3, r8
 8017018:	dc09      	bgt.n	801702e <_printf_float+0x256>
 801701a:	6823      	ldr	r3, [r4, #0]
 801701c:	079b      	lsls	r3, r3, #30
 801701e:	f100 8102 	bmi.w	8017226 <_printf_float+0x44e>
 8017022:	68e0      	ldr	r0, [r4, #12]
 8017024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017026:	4298      	cmp	r0, r3
 8017028:	bfb8      	it	lt
 801702a:	4618      	movlt	r0, r3
 801702c:	e731      	b.n	8016e92 <_printf_float+0xba>
 801702e:	2301      	movs	r3, #1
 8017030:	464a      	mov	r2, r9
 8017032:	4631      	mov	r1, r6
 8017034:	4628      	mov	r0, r5
 8017036:	47b8      	blx	r7
 8017038:	3001      	adds	r0, #1
 801703a:	f43f af28 	beq.w	8016e8e <_printf_float+0xb6>
 801703e:	f108 0801 	add.w	r8, r8, #1
 8017042:	e7e6      	b.n	8017012 <_printf_float+0x23a>
 8017044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017046:	2b00      	cmp	r3, #0
 8017048:	dc38      	bgt.n	80170bc <_printf_float+0x2e4>
 801704a:	2301      	movs	r3, #1
 801704c:	4631      	mov	r1, r6
 801704e:	4628      	mov	r0, r5
 8017050:	4a19      	ldr	r2, [pc, #100]	; (80170b8 <_printf_float+0x2e0>)
 8017052:	47b8      	blx	r7
 8017054:	3001      	adds	r0, #1
 8017056:	f43f af1a 	beq.w	8016e8e <_printf_float+0xb6>
 801705a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801705e:	4313      	orrs	r3, r2
 8017060:	d102      	bne.n	8017068 <_printf_float+0x290>
 8017062:	6823      	ldr	r3, [r4, #0]
 8017064:	07d9      	lsls	r1, r3, #31
 8017066:	d5d8      	bpl.n	801701a <_printf_float+0x242>
 8017068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801706c:	4631      	mov	r1, r6
 801706e:	4628      	mov	r0, r5
 8017070:	47b8      	blx	r7
 8017072:	3001      	adds	r0, #1
 8017074:	f43f af0b 	beq.w	8016e8e <_printf_float+0xb6>
 8017078:	f04f 0900 	mov.w	r9, #0
 801707c:	f104 0a1a 	add.w	sl, r4, #26
 8017080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017082:	425b      	negs	r3, r3
 8017084:	454b      	cmp	r3, r9
 8017086:	dc01      	bgt.n	801708c <_printf_float+0x2b4>
 8017088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801708a:	e794      	b.n	8016fb6 <_printf_float+0x1de>
 801708c:	2301      	movs	r3, #1
 801708e:	4652      	mov	r2, sl
 8017090:	4631      	mov	r1, r6
 8017092:	4628      	mov	r0, r5
 8017094:	47b8      	blx	r7
 8017096:	3001      	adds	r0, #1
 8017098:	f43f aef9 	beq.w	8016e8e <_printf_float+0xb6>
 801709c:	f109 0901 	add.w	r9, r9, #1
 80170a0:	e7ee      	b.n	8017080 <_printf_float+0x2a8>
 80170a2:	bf00      	nop
 80170a4:	7fefffff 	.word	0x7fefffff
 80170a8:	0801b454 	.word	0x0801b454
 80170ac:	0801b458 	.word	0x0801b458
 80170b0:	0801b460 	.word	0x0801b460
 80170b4:	0801b45c 	.word	0x0801b45c
 80170b8:	0801b464 	.word	0x0801b464
 80170bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170c0:	429a      	cmp	r2, r3
 80170c2:	bfa8      	it	ge
 80170c4:	461a      	movge	r2, r3
 80170c6:	2a00      	cmp	r2, #0
 80170c8:	4691      	mov	r9, r2
 80170ca:	dc37      	bgt.n	801713c <_printf_float+0x364>
 80170cc:	f04f 0b00 	mov.w	fp, #0
 80170d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80170d4:	f104 021a 	add.w	r2, r4, #26
 80170d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80170dc:	ebaa 0309 	sub.w	r3, sl, r9
 80170e0:	455b      	cmp	r3, fp
 80170e2:	dc33      	bgt.n	801714c <_printf_float+0x374>
 80170e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80170e8:	429a      	cmp	r2, r3
 80170ea:	db3b      	blt.n	8017164 <_printf_float+0x38c>
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	07da      	lsls	r2, r3, #31
 80170f0:	d438      	bmi.n	8017164 <_printf_float+0x38c>
 80170f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80170f6:	eba2 030a 	sub.w	r3, r2, sl
 80170fa:	eba2 0901 	sub.w	r9, r2, r1
 80170fe:	4599      	cmp	r9, r3
 8017100:	bfa8      	it	ge
 8017102:	4699      	movge	r9, r3
 8017104:	f1b9 0f00 	cmp.w	r9, #0
 8017108:	dc34      	bgt.n	8017174 <_printf_float+0x39c>
 801710a:	f04f 0800 	mov.w	r8, #0
 801710e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017112:	f104 0a1a 	add.w	sl, r4, #26
 8017116:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801711a:	1a9b      	subs	r3, r3, r2
 801711c:	eba3 0309 	sub.w	r3, r3, r9
 8017120:	4543      	cmp	r3, r8
 8017122:	f77f af7a 	ble.w	801701a <_printf_float+0x242>
 8017126:	2301      	movs	r3, #1
 8017128:	4652      	mov	r2, sl
 801712a:	4631      	mov	r1, r6
 801712c:	4628      	mov	r0, r5
 801712e:	47b8      	blx	r7
 8017130:	3001      	adds	r0, #1
 8017132:	f43f aeac 	beq.w	8016e8e <_printf_float+0xb6>
 8017136:	f108 0801 	add.w	r8, r8, #1
 801713a:	e7ec      	b.n	8017116 <_printf_float+0x33e>
 801713c:	4613      	mov	r3, r2
 801713e:	4631      	mov	r1, r6
 8017140:	4642      	mov	r2, r8
 8017142:	4628      	mov	r0, r5
 8017144:	47b8      	blx	r7
 8017146:	3001      	adds	r0, #1
 8017148:	d1c0      	bne.n	80170cc <_printf_float+0x2f4>
 801714a:	e6a0      	b.n	8016e8e <_printf_float+0xb6>
 801714c:	2301      	movs	r3, #1
 801714e:	4631      	mov	r1, r6
 8017150:	4628      	mov	r0, r5
 8017152:	920b      	str	r2, [sp, #44]	; 0x2c
 8017154:	47b8      	blx	r7
 8017156:	3001      	adds	r0, #1
 8017158:	f43f ae99 	beq.w	8016e8e <_printf_float+0xb6>
 801715c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801715e:	f10b 0b01 	add.w	fp, fp, #1
 8017162:	e7b9      	b.n	80170d8 <_printf_float+0x300>
 8017164:	4631      	mov	r1, r6
 8017166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801716a:	4628      	mov	r0, r5
 801716c:	47b8      	blx	r7
 801716e:	3001      	adds	r0, #1
 8017170:	d1bf      	bne.n	80170f2 <_printf_float+0x31a>
 8017172:	e68c      	b.n	8016e8e <_printf_float+0xb6>
 8017174:	464b      	mov	r3, r9
 8017176:	4631      	mov	r1, r6
 8017178:	4628      	mov	r0, r5
 801717a:	eb08 020a 	add.w	r2, r8, sl
 801717e:	47b8      	blx	r7
 8017180:	3001      	adds	r0, #1
 8017182:	d1c2      	bne.n	801710a <_printf_float+0x332>
 8017184:	e683      	b.n	8016e8e <_printf_float+0xb6>
 8017186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017188:	2a01      	cmp	r2, #1
 801718a:	dc01      	bgt.n	8017190 <_printf_float+0x3b8>
 801718c:	07db      	lsls	r3, r3, #31
 801718e:	d537      	bpl.n	8017200 <_printf_float+0x428>
 8017190:	2301      	movs	r3, #1
 8017192:	4642      	mov	r2, r8
 8017194:	4631      	mov	r1, r6
 8017196:	4628      	mov	r0, r5
 8017198:	47b8      	blx	r7
 801719a:	3001      	adds	r0, #1
 801719c:	f43f ae77 	beq.w	8016e8e <_printf_float+0xb6>
 80171a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80171a4:	4631      	mov	r1, r6
 80171a6:	4628      	mov	r0, r5
 80171a8:	47b8      	blx	r7
 80171aa:	3001      	adds	r0, #1
 80171ac:	f43f ae6f 	beq.w	8016e8e <_printf_float+0xb6>
 80171b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80171b4:	2200      	movs	r2, #0
 80171b6:	2300      	movs	r3, #0
 80171b8:	f7e9 fc40 	bl	8000a3c <__aeabi_dcmpeq>
 80171bc:	b9d8      	cbnz	r0, 80171f6 <_printf_float+0x41e>
 80171be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171c0:	f108 0201 	add.w	r2, r8, #1
 80171c4:	3b01      	subs	r3, #1
 80171c6:	4631      	mov	r1, r6
 80171c8:	4628      	mov	r0, r5
 80171ca:	47b8      	blx	r7
 80171cc:	3001      	adds	r0, #1
 80171ce:	d10e      	bne.n	80171ee <_printf_float+0x416>
 80171d0:	e65d      	b.n	8016e8e <_printf_float+0xb6>
 80171d2:	2301      	movs	r3, #1
 80171d4:	464a      	mov	r2, r9
 80171d6:	4631      	mov	r1, r6
 80171d8:	4628      	mov	r0, r5
 80171da:	47b8      	blx	r7
 80171dc:	3001      	adds	r0, #1
 80171de:	f43f ae56 	beq.w	8016e8e <_printf_float+0xb6>
 80171e2:	f108 0801 	add.w	r8, r8, #1
 80171e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171e8:	3b01      	subs	r3, #1
 80171ea:	4543      	cmp	r3, r8
 80171ec:	dcf1      	bgt.n	80171d2 <_printf_float+0x3fa>
 80171ee:	4653      	mov	r3, sl
 80171f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80171f4:	e6e0      	b.n	8016fb8 <_printf_float+0x1e0>
 80171f6:	f04f 0800 	mov.w	r8, #0
 80171fa:	f104 091a 	add.w	r9, r4, #26
 80171fe:	e7f2      	b.n	80171e6 <_printf_float+0x40e>
 8017200:	2301      	movs	r3, #1
 8017202:	4642      	mov	r2, r8
 8017204:	e7df      	b.n	80171c6 <_printf_float+0x3ee>
 8017206:	2301      	movs	r3, #1
 8017208:	464a      	mov	r2, r9
 801720a:	4631      	mov	r1, r6
 801720c:	4628      	mov	r0, r5
 801720e:	47b8      	blx	r7
 8017210:	3001      	adds	r0, #1
 8017212:	f43f ae3c 	beq.w	8016e8e <_printf_float+0xb6>
 8017216:	f108 0801 	add.w	r8, r8, #1
 801721a:	68e3      	ldr	r3, [r4, #12]
 801721c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801721e:	1a5b      	subs	r3, r3, r1
 8017220:	4543      	cmp	r3, r8
 8017222:	dcf0      	bgt.n	8017206 <_printf_float+0x42e>
 8017224:	e6fd      	b.n	8017022 <_printf_float+0x24a>
 8017226:	f04f 0800 	mov.w	r8, #0
 801722a:	f104 0919 	add.w	r9, r4, #25
 801722e:	e7f4      	b.n	801721a <_printf_float+0x442>

08017230 <_printf_common>:
 8017230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017234:	4616      	mov	r6, r2
 8017236:	4699      	mov	r9, r3
 8017238:	688a      	ldr	r2, [r1, #8]
 801723a:	690b      	ldr	r3, [r1, #16]
 801723c:	4607      	mov	r7, r0
 801723e:	4293      	cmp	r3, r2
 8017240:	bfb8      	it	lt
 8017242:	4613      	movlt	r3, r2
 8017244:	6033      	str	r3, [r6, #0]
 8017246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801724a:	460c      	mov	r4, r1
 801724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017250:	b10a      	cbz	r2, 8017256 <_printf_common+0x26>
 8017252:	3301      	adds	r3, #1
 8017254:	6033      	str	r3, [r6, #0]
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	0699      	lsls	r1, r3, #26
 801725a:	bf42      	ittt	mi
 801725c:	6833      	ldrmi	r3, [r6, #0]
 801725e:	3302      	addmi	r3, #2
 8017260:	6033      	strmi	r3, [r6, #0]
 8017262:	6825      	ldr	r5, [r4, #0]
 8017264:	f015 0506 	ands.w	r5, r5, #6
 8017268:	d106      	bne.n	8017278 <_printf_common+0x48>
 801726a:	f104 0a19 	add.w	sl, r4, #25
 801726e:	68e3      	ldr	r3, [r4, #12]
 8017270:	6832      	ldr	r2, [r6, #0]
 8017272:	1a9b      	subs	r3, r3, r2
 8017274:	42ab      	cmp	r3, r5
 8017276:	dc28      	bgt.n	80172ca <_printf_common+0x9a>
 8017278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801727c:	1e13      	subs	r3, r2, #0
 801727e:	6822      	ldr	r2, [r4, #0]
 8017280:	bf18      	it	ne
 8017282:	2301      	movne	r3, #1
 8017284:	0692      	lsls	r2, r2, #26
 8017286:	d42d      	bmi.n	80172e4 <_printf_common+0xb4>
 8017288:	4649      	mov	r1, r9
 801728a:	4638      	mov	r0, r7
 801728c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017290:	47c0      	blx	r8
 8017292:	3001      	adds	r0, #1
 8017294:	d020      	beq.n	80172d8 <_printf_common+0xa8>
 8017296:	6823      	ldr	r3, [r4, #0]
 8017298:	68e5      	ldr	r5, [r4, #12]
 801729a:	f003 0306 	and.w	r3, r3, #6
 801729e:	2b04      	cmp	r3, #4
 80172a0:	bf18      	it	ne
 80172a2:	2500      	movne	r5, #0
 80172a4:	6832      	ldr	r2, [r6, #0]
 80172a6:	f04f 0600 	mov.w	r6, #0
 80172aa:	68a3      	ldr	r3, [r4, #8]
 80172ac:	bf08      	it	eq
 80172ae:	1aad      	subeq	r5, r5, r2
 80172b0:	6922      	ldr	r2, [r4, #16]
 80172b2:	bf08      	it	eq
 80172b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172b8:	4293      	cmp	r3, r2
 80172ba:	bfc4      	itt	gt
 80172bc:	1a9b      	subgt	r3, r3, r2
 80172be:	18ed      	addgt	r5, r5, r3
 80172c0:	341a      	adds	r4, #26
 80172c2:	42b5      	cmp	r5, r6
 80172c4:	d11a      	bne.n	80172fc <_printf_common+0xcc>
 80172c6:	2000      	movs	r0, #0
 80172c8:	e008      	b.n	80172dc <_printf_common+0xac>
 80172ca:	2301      	movs	r3, #1
 80172cc:	4652      	mov	r2, sl
 80172ce:	4649      	mov	r1, r9
 80172d0:	4638      	mov	r0, r7
 80172d2:	47c0      	blx	r8
 80172d4:	3001      	adds	r0, #1
 80172d6:	d103      	bne.n	80172e0 <_printf_common+0xb0>
 80172d8:	f04f 30ff 	mov.w	r0, #4294967295
 80172dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172e0:	3501      	adds	r5, #1
 80172e2:	e7c4      	b.n	801726e <_printf_common+0x3e>
 80172e4:	2030      	movs	r0, #48	; 0x30
 80172e6:	18e1      	adds	r1, r4, r3
 80172e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172ec:	1c5a      	adds	r2, r3, #1
 80172ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80172f2:	4422      	add	r2, r4
 80172f4:	3302      	adds	r3, #2
 80172f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80172fa:	e7c5      	b.n	8017288 <_printf_common+0x58>
 80172fc:	2301      	movs	r3, #1
 80172fe:	4622      	mov	r2, r4
 8017300:	4649      	mov	r1, r9
 8017302:	4638      	mov	r0, r7
 8017304:	47c0      	blx	r8
 8017306:	3001      	adds	r0, #1
 8017308:	d0e6      	beq.n	80172d8 <_printf_common+0xa8>
 801730a:	3601      	adds	r6, #1
 801730c:	e7d9      	b.n	80172c2 <_printf_common+0x92>
	...

08017310 <_printf_i>:
 8017310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017314:	460c      	mov	r4, r1
 8017316:	7e27      	ldrb	r7, [r4, #24]
 8017318:	4691      	mov	r9, r2
 801731a:	2f78      	cmp	r7, #120	; 0x78
 801731c:	4680      	mov	r8, r0
 801731e:	469a      	mov	sl, r3
 8017320:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017326:	d807      	bhi.n	8017338 <_printf_i+0x28>
 8017328:	2f62      	cmp	r7, #98	; 0x62
 801732a:	d80a      	bhi.n	8017342 <_printf_i+0x32>
 801732c:	2f00      	cmp	r7, #0
 801732e:	f000 80d9 	beq.w	80174e4 <_printf_i+0x1d4>
 8017332:	2f58      	cmp	r7, #88	; 0x58
 8017334:	f000 80a4 	beq.w	8017480 <_printf_i+0x170>
 8017338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801733c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017340:	e03a      	b.n	80173b8 <_printf_i+0xa8>
 8017342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017346:	2b15      	cmp	r3, #21
 8017348:	d8f6      	bhi.n	8017338 <_printf_i+0x28>
 801734a:	a001      	add	r0, pc, #4	; (adr r0, 8017350 <_printf_i+0x40>)
 801734c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017350:	080173a9 	.word	0x080173a9
 8017354:	080173bd 	.word	0x080173bd
 8017358:	08017339 	.word	0x08017339
 801735c:	08017339 	.word	0x08017339
 8017360:	08017339 	.word	0x08017339
 8017364:	08017339 	.word	0x08017339
 8017368:	080173bd 	.word	0x080173bd
 801736c:	08017339 	.word	0x08017339
 8017370:	08017339 	.word	0x08017339
 8017374:	08017339 	.word	0x08017339
 8017378:	08017339 	.word	0x08017339
 801737c:	080174cb 	.word	0x080174cb
 8017380:	080173ed 	.word	0x080173ed
 8017384:	080174ad 	.word	0x080174ad
 8017388:	08017339 	.word	0x08017339
 801738c:	08017339 	.word	0x08017339
 8017390:	080174ed 	.word	0x080174ed
 8017394:	08017339 	.word	0x08017339
 8017398:	080173ed 	.word	0x080173ed
 801739c:	08017339 	.word	0x08017339
 80173a0:	08017339 	.word	0x08017339
 80173a4:	080174b5 	.word	0x080174b5
 80173a8:	680b      	ldr	r3, [r1, #0]
 80173aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80173ae:	1d1a      	adds	r2, r3, #4
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	600a      	str	r2, [r1, #0]
 80173b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173b8:	2301      	movs	r3, #1
 80173ba:	e0a4      	b.n	8017506 <_printf_i+0x1f6>
 80173bc:	6825      	ldr	r5, [r4, #0]
 80173be:	6808      	ldr	r0, [r1, #0]
 80173c0:	062e      	lsls	r6, r5, #24
 80173c2:	f100 0304 	add.w	r3, r0, #4
 80173c6:	d50a      	bpl.n	80173de <_printf_i+0xce>
 80173c8:	6805      	ldr	r5, [r0, #0]
 80173ca:	600b      	str	r3, [r1, #0]
 80173cc:	2d00      	cmp	r5, #0
 80173ce:	da03      	bge.n	80173d8 <_printf_i+0xc8>
 80173d0:	232d      	movs	r3, #45	; 0x2d
 80173d2:	426d      	negs	r5, r5
 80173d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173d8:	230a      	movs	r3, #10
 80173da:	485e      	ldr	r0, [pc, #376]	; (8017554 <_printf_i+0x244>)
 80173dc:	e019      	b.n	8017412 <_printf_i+0x102>
 80173de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80173e2:	6805      	ldr	r5, [r0, #0]
 80173e4:	600b      	str	r3, [r1, #0]
 80173e6:	bf18      	it	ne
 80173e8:	b22d      	sxthne	r5, r5
 80173ea:	e7ef      	b.n	80173cc <_printf_i+0xbc>
 80173ec:	680b      	ldr	r3, [r1, #0]
 80173ee:	6825      	ldr	r5, [r4, #0]
 80173f0:	1d18      	adds	r0, r3, #4
 80173f2:	6008      	str	r0, [r1, #0]
 80173f4:	0628      	lsls	r0, r5, #24
 80173f6:	d501      	bpl.n	80173fc <_printf_i+0xec>
 80173f8:	681d      	ldr	r5, [r3, #0]
 80173fa:	e002      	b.n	8017402 <_printf_i+0xf2>
 80173fc:	0669      	lsls	r1, r5, #25
 80173fe:	d5fb      	bpl.n	80173f8 <_printf_i+0xe8>
 8017400:	881d      	ldrh	r5, [r3, #0]
 8017402:	2f6f      	cmp	r7, #111	; 0x6f
 8017404:	bf0c      	ite	eq
 8017406:	2308      	moveq	r3, #8
 8017408:	230a      	movne	r3, #10
 801740a:	4852      	ldr	r0, [pc, #328]	; (8017554 <_printf_i+0x244>)
 801740c:	2100      	movs	r1, #0
 801740e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017412:	6866      	ldr	r6, [r4, #4]
 8017414:	2e00      	cmp	r6, #0
 8017416:	bfa8      	it	ge
 8017418:	6821      	ldrge	r1, [r4, #0]
 801741a:	60a6      	str	r6, [r4, #8]
 801741c:	bfa4      	itt	ge
 801741e:	f021 0104 	bicge.w	r1, r1, #4
 8017422:	6021      	strge	r1, [r4, #0]
 8017424:	b90d      	cbnz	r5, 801742a <_printf_i+0x11a>
 8017426:	2e00      	cmp	r6, #0
 8017428:	d04d      	beq.n	80174c6 <_printf_i+0x1b6>
 801742a:	4616      	mov	r6, r2
 801742c:	fbb5 f1f3 	udiv	r1, r5, r3
 8017430:	fb03 5711 	mls	r7, r3, r1, r5
 8017434:	5dc7      	ldrb	r7, [r0, r7]
 8017436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801743a:	462f      	mov	r7, r5
 801743c:	42bb      	cmp	r3, r7
 801743e:	460d      	mov	r5, r1
 8017440:	d9f4      	bls.n	801742c <_printf_i+0x11c>
 8017442:	2b08      	cmp	r3, #8
 8017444:	d10b      	bne.n	801745e <_printf_i+0x14e>
 8017446:	6823      	ldr	r3, [r4, #0]
 8017448:	07df      	lsls	r7, r3, #31
 801744a:	d508      	bpl.n	801745e <_printf_i+0x14e>
 801744c:	6923      	ldr	r3, [r4, #16]
 801744e:	6861      	ldr	r1, [r4, #4]
 8017450:	4299      	cmp	r1, r3
 8017452:	bfde      	ittt	le
 8017454:	2330      	movle	r3, #48	; 0x30
 8017456:	f806 3c01 	strble.w	r3, [r6, #-1]
 801745a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801745e:	1b92      	subs	r2, r2, r6
 8017460:	6122      	str	r2, [r4, #16]
 8017462:	464b      	mov	r3, r9
 8017464:	4621      	mov	r1, r4
 8017466:	4640      	mov	r0, r8
 8017468:	f8cd a000 	str.w	sl, [sp]
 801746c:	aa03      	add	r2, sp, #12
 801746e:	f7ff fedf 	bl	8017230 <_printf_common>
 8017472:	3001      	adds	r0, #1
 8017474:	d14c      	bne.n	8017510 <_printf_i+0x200>
 8017476:	f04f 30ff 	mov.w	r0, #4294967295
 801747a:	b004      	add	sp, #16
 801747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017480:	4834      	ldr	r0, [pc, #208]	; (8017554 <_printf_i+0x244>)
 8017482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017486:	680e      	ldr	r6, [r1, #0]
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	f856 5b04 	ldr.w	r5, [r6], #4
 801748e:	061f      	lsls	r7, r3, #24
 8017490:	600e      	str	r6, [r1, #0]
 8017492:	d514      	bpl.n	80174be <_printf_i+0x1ae>
 8017494:	07d9      	lsls	r1, r3, #31
 8017496:	bf44      	itt	mi
 8017498:	f043 0320 	orrmi.w	r3, r3, #32
 801749c:	6023      	strmi	r3, [r4, #0]
 801749e:	b91d      	cbnz	r5, 80174a8 <_printf_i+0x198>
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	f023 0320 	bic.w	r3, r3, #32
 80174a6:	6023      	str	r3, [r4, #0]
 80174a8:	2310      	movs	r3, #16
 80174aa:	e7af      	b.n	801740c <_printf_i+0xfc>
 80174ac:	6823      	ldr	r3, [r4, #0]
 80174ae:	f043 0320 	orr.w	r3, r3, #32
 80174b2:	6023      	str	r3, [r4, #0]
 80174b4:	2378      	movs	r3, #120	; 0x78
 80174b6:	4828      	ldr	r0, [pc, #160]	; (8017558 <_printf_i+0x248>)
 80174b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80174bc:	e7e3      	b.n	8017486 <_printf_i+0x176>
 80174be:	065e      	lsls	r6, r3, #25
 80174c0:	bf48      	it	mi
 80174c2:	b2ad      	uxthmi	r5, r5
 80174c4:	e7e6      	b.n	8017494 <_printf_i+0x184>
 80174c6:	4616      	mov	r6, r2
 80174c8:	e7bb      	b.n	8017442 <_printf_i+0x132>
 80174ca:	680b      	ldr	r3, [r1, #0]
 80174cc:	6826      	ldr	r6, [r4, #0]
 80174ce:	1d1d      	adds	r5, r3, #4
 80174d0:	6960      	ldr	r0, [r4, #20]
 80174d2:	600d      	str	r5, [r1, #0]
 80174d4:	0635      	lsls	r5, r6, #24
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	d501      	bpl.n	80174de <_printf_i+0x1ce>
 80174da:	6018      	str	r0, [r3, #0]
 80174dc:	e002      	b.n	80174e4 <_printf_i+0x1d4>
 80174de:	0671      	lsls	r1, r6, #25
 80174e0:	d5fb      	bpl.n	80174da <_printf_i+0x1ca>
 80174e2:	8018      	strh	r0, [r3, #0]
 80174e4:	2300      	movs	r3, #0
 80174e6:	4616      	mov	r6, r2
 80174e8:	6123      	str	r3, [r4, #16]
 80174ea:	e7ba      	b.n	8017462 <_printf_i+0x152>
 80174ec:	680b      	ldr	r3, [r1, #0]
 80174ee:	1d1a      	adds	r2, r3, #4
 80174f0:	600a      	str	r2, [r1, #0]
 80174f2:	681e      	ldr	r6, [r3, #0]
 80174f4:	2100      	movs	r1, #0
 80174f6:	4630      	mov	r0, r6
 80174f8:	6862      	ldr	r2, [r4, #4]
 80174fa:	f002 fcb7 	bl	8019e6c <memchr>
 80174fe:	b108      	cbz	r0, 8017504 <_printf_i+0x1f4>
 8017500:	1b80      	subs	r0, r0, r6
 8017502:	6060      	str	r0, [r4, #4]
 8017504:	6863      	ldr	r3, [r4, #4]
 8017506:	6123      	str	r3, [r4, #16]
 8017508:	2300      	movs	r3, #0
 801750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801750e:	e7a8      	b.n	8017462 <_printf_i+0x152>
 8017510:	4632      	mov	r2, r6
 8017512:	4649      	mov	r1, r9
 8017514:	4640      	mov	r0, r8
 8017516:	6923      	ldr	r3, [r4, #16]
 8017518:	47d0      	blx	sl
 801751a:	3001      	adds	r0, #1
 801751c:	d0ab      	beq.n	8017476 <_printf_i+0x166>
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	079b      	lsls	r3, r3, #30
 8017522:	d413      	bmi.n	801754c <_printf_i+0x23c>
 8017524:	68e0      	ldr	r0, [r4, #12]
 8017526:	9b03      	ldr	r3, [sp, #12]
 8017528:	4298      	cmp	r0, r3
 801752a:	bfb8      	it	lt
 801752c:	4618      	movlt	r0, r3
 801752e:	e7a4      	b.n	801747a <_printf_i+0x16a>
 8017530:	2301      	movs	r3, #1
 8017532:	4632      	mov	r2, r6
 8017534:	4649      	mov	r1, r9
 8017536:	4640      	mov	r0, r8
 8017538:	47d0      	blx	sl
 801753a:	3001      	adds	r0, #1
 801753c:	d09b      	beq.n	8017476 <_printf_i+0x166>
 801753e:	3501      	adds	r5, #1
 8017540:	68e3      	ldr	r3, [r4, #12]
 8017542:	9903      	ldr	r1, [sp, #12]
 8017544:	1a5b      	subs	r3, r3, r1
 8017546:	42ab      	cmp	r3, r5
 8017548:	dcf2      	bgt.n	8017530 <_printf_i+0x220>
 801754a:	e7eb      	b.n	8017524 <_printf_i+0x214>
 801754c:	2500      	movs	r5, #0
 801754e:	f104 0619 	add.w	r6, r4, #25
 8017552:	e7f5      	b.n	8017540 <_printf_i+0x230>
 8017554:	0801b466 	.word	0x0801b466
 8017558:	0801b477 	.word	0x0801b477

0801755c <_scanf_float>:
 801755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017560:	b087      	sub	sp, #28
 8017562:	9303      	str	r3, [sp, #12]
 8017564:	688b      	ldr	r3, [r1, #8]
 8017566:	4617      	mov	r7, r2
 8017568:	1e5a      	subs	r2, r3, #1
 801756a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801756e:	bf85      	ittet	hi
 8017570:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017574:	195b      	addhi	r3, r3, r5
 8017576:	2300      	movls	r3, #0
 8017578:	9302      	strhi	r3, [sp, #8]
 801757a:	bf88      	it	hi
 801757c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017580:	468b      	mov	fp, r1
 8017582:	f04f 0500 	mov.w	r5, #0
 8017586:	bf8c      	ite	hi
 8017588:	608b      	strhi	r3, [r1, #8]
 801758a:	9302      	strls	r3, [sp, #8]
 801758c:	680b      	ldr	r3, [r1, #0]
 801758e:	4680      	mov	r8, r0
 8017590:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017594:	f84b 3b1c 	str.w	r3, [fp], #28
 8017598:	460c      	mov	r4, r1
 801759a:	465e      	mov	r6, fp
 801759c:	46aa      	mov	sl, r5
 801759e:	46a9      	mov	r9, r5
 80175a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80175a4:	9501      	str	r5, [sp, #4]
 80175a6:	68a2      	ldr	r2, [r4, #8]
 80175a8:	b152      	cbz	r2, 80175c0 <_scanf_float+0x64>
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	2b4e      	cmp	r3, #78	; 0x4e
 80175b0:	d864      	bhi.n	801767c <_scanf_float+0x120>
 80175b2:	2b40      	cmp	r3, #64	; 0x40
 80175b4:	d83c      	bhi.n	8017630 <_scanf_float+0xd4>
 80175b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80175ba:	b2c8      	uxtb	r0, r1
 80175bc:	280e      	cmp	r0, #14
 80175be:	d93a      	bls.n	8017636 <_scanf_float+0xda>
 80175c0:	f1b9 0f00 	cmp.w	r9, #0
 80175c4:	d003      	beq.n	80175ce <_scanf_float+0x72>
 80175c6:	6823      	ldr	r3, [r4, #0]
 80175c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175d2:	f1ba 0f01 	cmp.w	sl, #1
 80175d6:	f200 8113 	bhi.w	8017800 <_scanf_float+0x2a4>
 80175da:	455e      	cmp	r6, fp
 80175dc:	f200 8105 	bhi.w	80177ea <_scanf_float+0x28e>
 80175e0:	2501      	movs	r5, #1
 80175e2:	4628      	mov	r0, r5
 80175e4:	b007      	add	sp, #28
 80175e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80175ee:	2a0d      	cmp	r2, #13
 80175f0:	d8e6      	bhi.n	80175c0 <_scanf_float+0x64>
 80175f2:	a101      	add	r1, pc, #4	; (adr r1, 80175f8 <_scanf_float+0x9c>)
 80175f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80175f8:	08017737 	.word	0x08017737
 80175fc:	080175c1 	.word	0x080175c1
 8017600:	080175c1 	.word	0x080175c1
 8017604:	080175c1 	.word	0x080175c1
 8017608:	08017797 	.word	0x08017797
 801760c:	0801776f 	.word	0x0801776f
 8017610:	080175c1 	.word	0x080175c1
 8017614:	080175c1 	.word	0x080175c1
 8017618:	08017745 	.word	0x08017745
 801761c:	080175c1 	.word	0x080175c1
 8017620:	080175c1 	.word	0x080175c1
 8017624:	080175c1 	.word	0x080175c1
 8017628:	080175c1 	.word	0x080175c1
 801762c:	080176fd 	.word	0x080176fd
 8017630:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017634:	e7db      	b.n	80175ee <_scanf_float+0x92>
 8017636:	290e      	cmp	r1, #14
 8017638:	d8c2      	bhi.n	80175c0 <_scanf_float+0x64>
 801763a:	a001      	add	r0, pc, #4	; (adr r0, 8017640 <_scanf_float+0xe4>)
 801763c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017640:	080176ef 	.word	0x080176ef
 8017644:	080175c1 	.word	0x080175c1
 8017648:	080176ef 	.word	0x080176ef
 801764c:	08017783 	.word	0x08017783
 8017650:	080175c1 	.word	0x080175c1
 8017654:	0801769d 	.word	0x0801769d
 8017658:	080176d9 	.word	0x080176d9
 801765c:	080176d9 	.word	0x080176d9
 8017660:	080176d9 	.word	0x080176d9
 8017664:	080176d9 	.word	0x080176d9
 8017668:	080176d9 	.word	0x080176d9
 801766c:	080176d9 	.word	0x080176d9
 8017670:	080176d9 	.word	0x080176d9
 8017674:	080176d9 	.word	0x080176d9
 8017678:	080176d9 	.word	0x080176d9
 801767c:	2b6e      	cmp	r3, #110	; 0x6e
 801767e:	d809      	bhi.n	8017694 <_scanf_float+0x138>
 8017680:	2b60      	cmp	r3, #96	; 0x60
 8017682:	d8b2      	bhi.n	80175ea <_scanf_float+0x8e>
 8017684:	2b54      	cmp	r3, #84	; 0x54
 8017686:	d077      	beq.n	8017778 <_scanf_float+0x21c>
 8017688:	2b59      	cmp	r3, #89	; 0x59
 801768a:	d199      	bne.n	80175c0 <_scanf_float+0x64>
 801768c:	2d07      	cmp	r5, #7
 801768e:	d197      	bne.n	80175c0 <_scanf_float+0x64>
 8017690:	2508      	movs	r5, #8
 8017692:	e029      	b.n	80176e8 <_scanf_float+0x18c>
 8017694:	2b74      	cmp	r3, #116	; 0x74
 8017696:	d06f      	beq.n	8017778 <_scanf_float+0x21c>
 8017698:	2b79      	cmp	r3, #121	; 0x79
 801769a:	e7f6      	b.n	801768a <_scanf_float+0x12e>
 801769c:	6821      	ldr	r1, [r4, #0]
 801769e:	05c8      	lsls	r0, r1, #23
 80176a0:	d51a      	bpl.n	80176d8 <_scanf_float+0x17c>
 80176a2:	9b02      	ldr	r3, [sp, #8]
 80176a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80176a8:	6021      	str	r1, [r4, #0]
 80176aa:	f109 0901 	add.w	r9, r9, #1
 80176ae:	b11b      	cbz	r3, 80176b8 <_scanf_float+0x15c>
 80176b0:	3b01      	subs	r3, #1
 80176b2:	3201      	adds	r2, #1
 80176b4:	9302      	str	r3, [sp, #8]
 80176b6:	60a2      	str	r2, [r4, #8]
 80176b8:	68a3      	ldr	r3, [r4, #8]
 80176ba:	3b01      	subs	r3, #1
 80176bc:	60a3      	str	r3, [r4, #8]
 80176be:	6923      	ldr	r3, [r4, #16]
 80176c0:	3301      	adds	r3, #1
 80176c2:	6123      	str	r3, [r4, #16]
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	3b01      	subs	r3, #1
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	607b      	str	r3, [r7, #4]
 80176cc:	f340 8084 	ble.w	80177d8 <_scanf_float+0x27c>
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	3301      	adds	r3, #1
 80176d4:	603b      	str	r3, [r7, #0]
 80176d6:	e766      	b.n	80175a6 <_scanf_float+0x4a>
 80176d8:	eb1a 0f05 	cmn.w	sl, r5
 80176dc:	f47f af70 	bne.w	80175c0 <_scanf_float+0x64>
 80176e0:	6822      	ldr	r2, [r4, #0]
 80176e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80176e6:	6022      	str	r2, [r4, #0]
 80176e8:	f806 3b01 	strb.w	r3, [r6], #1
 80176ec:	e7e4      	b.n	80176b8 <_scanf_float+0x15c>
 80176ee:	6822      	ldr	r2, [r4, #0]
 80176f0:	0610      	lsls	r0, r2, #24
 80176f2:	f57f af65 	bpl.w	80175c0 <_scanf_float+0x64>
 80176f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80176fa:	e7f4      	b.n	80176e6 <_scanf_float+0x18a>
 80176fc:	f1ba 0f00 	cmp.w	sl, #0
 8017700:	d10e      	bne.n	8017720 <_scanf_float+0x1c4>
 8017702:	f1b9 0f00 	cmp.w	r9, #0
 8017706:	d10e      	bne.n	8017726 <_scanf_float+0x1ca>
 8017708:	6822      	ldr	r2, [r4, #0]
 801770a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801770e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017712:	d108      	bne.n	8017726 <_scanf_float+0x1ca>
 8017714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017718:	f04f 0a01 	mov.w	sl, #1
 801771c:	6022      	str	r2, [r4, #0]
 801771e:	e7e3      	b.n	80176e8 <_scanf_float+0x18c>
 8017720:	f1ba 0f02 	cmp.w	sl, #2
 8017724:	d055      	beq.n	80177d2 <_scanf_float+0x276>
 8017726:	2d01      	cmp	r5, #1
 8017728:	d002      	beq.n	8017730 <_scanf_float+0x1d4>
 801772a:	2d04      	cmp	r5, #4
 801772c:	f47f af48 	bne.w	80175c0 <_scanf_float+0x64>
 8017730:	3501      	adds	r5, #1
 8017732:	b2ed      	uxtb	r5, r5
 8017734:	e7d8      	b.n	80176e8 <_scanf_float+0x18c>
 8017736:	f1ba 0f01 	cmp.w	sl, #1
 801773a:	f47f af41 	bne.w	80175c0 <_scanf_float+0x64>
 801773e:	f04f 0a02 	mov.w	sl, #2
 8017742:	e7d1      	b.n	80176e8 <_scanf_float+0x18c>
 8017744:	b97d      	cbnz	r5, 8017766 <_scanf_float+0x20a>
 8017746:	f1b9 0f00 	cmp.w	r9, #0
 801774a:	f47f af3c 	bne.w	80175c6 <_scanf_float+0x6a>
 801774e:	6822      	ldr	r2, [r4, #0]
 8017750:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017754:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017758:	f47f af39 	bne.w	80175ce <_scanf_float+0x72>
 801775c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017760:	2501      	movs	r5, #1
 8017762:	6022      	str	r2, [r4, #0]
 8017764:	e7c0      	b.n	80176e8 <_scanf_float+0x18c>
 8017766:	2d03      	cmp	r5, #3
 8017768:	d0e2      	beq.n	8017730 <_scanf_float+0x1d4>
 801776a:	2d05      	cmp	r5, #5
 801776c:	e7de      	b.n	801772c <_scanf_float+0x1d0>
 801776e:	2d02      	cmp	r5, #2
 8017770:	f47f af26 	bne.w	80175c0 <_scanf_float+0x64>
 8017774:	2503      	movs	r5, #3
 8017776:	e7b7      	b.n	80176e8 <_scanf_float+0x18c>
 8017778:	2d06      	cmp	r5, #6
 801777a:	f47f af21 	bne.w	80175c0 <_scanf_float+0x64>
 801777e:	2507      	movs	r5, #7
 8017780:	e7b2      	b.n	80176e8 <_scanf_float+0x18c>
 8017782:	6822      	ldr	r2, [r4, #0]
 8017784:	0591      	lsls	r1, r2, #22
 8017786:	f57f af1b 	bpl.w	80175c0 <_scanf_float+0x64>
 801778a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801778e:	6022      	str	r2, [r4, #0]
 8017790:	f8cd 9004 	str.w	r9, [sp, #4]
 8017794:	e7a8      	b.n	80176e8 <_scanf_float+0x18c>
 8017796:	6822      	ldr	r2, [r4, #0]
 8017798:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801779c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80177a0:	d006      	beq.n	80177b0 <_scanf_float+0x254>
 80177a2:	0550      	lsls	r0, r2, #21
 80177a4:	f57f af0c 	bpl.w	80175c0 <_scanf_float+0x64>
 80177a8:	f1b9 0f00 	cmp.w	r9, #0
 80177ac:	f43f af0f 	beq.w	80175ce <_scanf_float+0x72>
 80177b0:	0591      	lsls	r1, r2, #22
 80177b2:	bf58      	it	pl
 80177b4:	9901      	ldrpl	r1, [sp, #4]
 80177b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80177ba:	bf58      	it	pl
 80177bc:	eba9 0101 	subpl.w	r1, r9, r1
 80177c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80177c4:	f04f 0900 	mov.w	r9, #0
 80177c8:	bf58      	it	pl
 80177ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80177ce:	6022      	str	r2, [r4, #0]
 80177d0:	e78a      	b.n	80176e8 <_scanf_float+0x18c>
 80177d2:	f04f 0a03 	mov.w	sl, #3
 80177d6:	e787      	b.n	80176e8 <_scanf_float+0x18c>
 80177d8:	4639      	mov	r1, r7
 80177da:	4640      	mov	r0, r8
 80177dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80177e0:	4798      	blx	r3
 80177e2:	2800      	cmp	r0, #0
 80177e4:	f43f aedf 	beq.w	80175a6 <_scanf_float+0x4a>
 80177e8:	e6ea      	b.n	80175c0 <_scanf_float+0x64>
 80177ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80177ee:	463a      	mov	r2, r7
 80177f0:	4640      	mov	r0, r8
 80177f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80177f6:	4798      	blx	r3
 80177f8:	6923      	ldr	r3, [r4, #16]
 80177fa:	3b01      	subs	r3, #1
 80177fc:	6123      	str	r3, [r4, #16]
 80177fe:	e6ec      	b.n	80175da <_scanf_float+0x7e>
 8017800:	1e6b      	subs	r3, r5, #1
 8017802:	2b06      	cmp	r3, #6
 8017804:	d825      	bhi.n	8017852 <_scanf_float+0x2f6>
 8017806:	2d02      	cmp	r5, #2
 8017808:	d836      	bhi.n	8017878 <_scanf_float+0x31c>
 801780a:	455e      	cmp	r6, fp
 801780c:	f67f aee8 	bls.w	80175e0 <_scanf_float+0x84>
 8017810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017814:	463a      	mov	r2, r7
 8017816:	4640      	mov	r0, r8
 8017818:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801781c:	4798      	blx	r3
 801781e:	6923      	ldr	r3, [r4, #16]
 8017820:	3b01      	subs	r3, #1
 8017822:	6123      	str	r3, [r4, #16]
 8017824:	e7f1      	b.n	801780a <_scanf_float+0x2ae>
 8017826:	9802      	ldr	r0, [sp, #8]
 8017828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801782c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017830:	463a      	mov	r2, r7
 8017832:	9002      	str	r0, [sp, #8]
 8017834:	4640      	mov	r0, r8
 8017836:	4798      	blx	r3
 8017838:	6923      	ldr	r3, [r4, #16]
 801783a:	3b01      	subs	r3, #1
 801783c:	6123      	str	r3, [r4, #16]
 801783e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017842:	fa5f fa8a 	uxtb.w	sl, sl
 8017846:	f1ba 0f02 	cmp.w	sl, #2
 801784a:	d1ec      	bne.n	8017826 <_scanf_float+0x2ca>
 801784c:	3d03      	subs	r5, #3
 801784e:	b2ed      	uxtb	r5, r5
 8017850:	1b76      	subs	r6, r6, r5
 8017852:	6823      	ldr	r3, [r4, #0]
 8017854:	05da      	lsls	r2, r3, #23
 8017856:	d52f      	bpl.n	80178b8 <_scanf_float+0x35c>
 8017858:	055b      	lsls	r3, r3, #21
 801785a:	d510      	bpl.n	801787e <_scanf_float+0x322>
 801785c:	455e      	cmp	r6, fp
 801785e:	f67f aebf 	bls.w	80175e0 <_scanf_float+0x84>
 8017862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017866:	463a      	mov	r2, r7
 8017868:	4640      	mov	r0, r8
 801786a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801786e:	4798      	blx	r3
 8017870:	6923      	ldr	r3, [r4, #16]
 8017872:	3b01      	subs	r3, #1
 8017874:	6123      	str	r3, [r4, #16]
 8017876:	e7f1      	b.n	801785c <_scanf_float+0x300>
 8017878:	46aa      	mov	sl, r5
 801787a:	9602      	str	r6, [sp, #8]
 801787c:	e7df      	b.n	801783e <_scanf_float+0x2e2>
 801787e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017882:	6923      	ldr	r3, [r4, #16]
 8017884:	2965      	cmp	r1, #101	; 0x65
 8017886:	f103 33ff 	add.w	r3, r3, #4294967295
 801788a:	f106 35ff 	add.w	r5, r6, #4294967295
 801788e:	6123      	str	r3, [r4, #16]
 8017890:	d00c      	beq.n	80178ac <_scanf_float+0x350>
 8017892:	2945      	cmp	r1, #69	; 0x45
 8017894:	d00a      	beq.n	80178ac <_scanf_float+0x350>
 8017896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801789a:	463a      	mov	r2, r7
 801789c:	4640      	mov	r0, r8
 801789e:	4798      	blx	r3
 80178a0:	6923      	ldr	r3, [r4, #16]
 80178a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80178a6:	3b01      	subs	r3, #1
 80178a8:	1eb5      	subs	r5, r6, #2
 80178aa:	6123      	str	r3, [r4, #16]
 80178ac:	463a      	mov	r2, r7
 80178ae:	4640      	mov	r0, r8
 80178b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80178b4:	4798      	blx	r3
 80178b6:	462e      	mov	r6, r5
 80178b8:	6825      	ldr	r5, [r4, #0]
 80178ba:	f015 0510 	ands.w	r5, r5, #16
 80178be:	d159      	bne.n	8017974 <_scanf_float+0x418>
 80178c0:	7035      	strb	r5, [r6, #0]
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80178c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178cc:	d11c      	bne.n	8017908 <_scanf_float+0x3ac>
 80178ce:	9b01      	ldr	r3, [sp, #4]
 80178d0:	454b      	cmp	r3, r9
 80178d2:	eba3 0209 	sub.w	r2, r3, r9
 80178d6:	d124      	bne.n	8017922 <_scanf_float+0x3c6>
 80178d8:	2200      	movs	r2, #0
 80178da:	4659      	mov	r1, fp
 80178dc:	4640      	mov	r0, r8
 80178de:	f000 ff47 	bl	8018770 <_strtod_r>
 80178e2:	f8d4 c000 	ldr.w	ip, [r4]
 80178e6:	9b03      	ldr	r3, [sp, #12]
 80178e8:	f01c 0f02 	tst.w	ip, #2
 80178ec:	4606      	mov	r6, r0
 80178ee:	460f      	mov	r7, r1
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	d021      	beq.n	8017938 <_scanf_float+0x3dc>
 80178f4:	9903      	ldr	r1, [sp, #12]
 80178f6:	1d1a      	adds	r2, r3, #4
 80178f8:	600a      	str	r2, [r1, #0]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	e9c3 6700 	strd	r6, r7, [r3]
 8017900:	68e3      	ldr	r3, [r4, #12]
 8017902:	3301      	adds	r3, #1
 8017904:	60e3      	str	r3, [r4, #12]
 8017906:	e66c      	b.n	80175e2 <_scanf_float+0x86>
 8017908:	9b04      	ldr	r3, [sp, #16]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d0e4      	beq.n	80178d8 <_scanf_float+0x37c>
 801790e:	9905      	ldr	r1, [sp, #20]
 8017910:	230a      	movs	r3, #10
 8017912:	462a      	mov	r2, r5
 8017914:	4640      	mov	r0, r8
 8017916:	3101      	adds	r1, #1
 8017918:	f000 ffb6 	bl	8018888 <_strtol_r>
 801791c:	9b04      	ldr	r3, [sp, #16]
 801791e:	9e05      	ldr	r6, [sp, #20]
 8017920:	1ac2      	subs	r2, r0, r3
 8017922:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017926:	429e      	cmp	r6, r3
 8017928:	bf28      	it	cs
 801792a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801792e:	4630      	mov	r0, r6
 8017930:	4911      	ldr	r1, [pc, #68]	; (8017978 <_scanf_float+0x41c>)
 8017932:	f000 f8a3 	bl	8017a7c <siprintf>
 8017936:	e7cf      	b.n	80178d8 <_scanf_float+0x37c>
 8017938:	f01c 0f04 	tst.w	ip, #4
 801793c:	f103 0e04 	add.w	lr, r3, #4
 8017940:	d003      	beq.n	801794a <_scanf_float+0x3ee>
 8017942:	9903      	ldr	r1, [sp, #12]
 8017944:	f8c1 e000 	str.w	lr, [r1]
 8017948:	e7d7      	b.n	80178fa <_scanf_float+0x39e>
 801794a:	9a03      	ldr	r2, [sp, #12]
 801794c:	f8c2 e000 	str.w	lr, [r2]
 8017950:	f8d3 8000 	ldr.w	r8, [r3]
 8017954:	4602      	mov	r2, r0
 8017956:	460b      	mov	r3, r1
 8017958:	f7e9 f8a2 	bl	8000aa0 <__aeabi_dcmpun>
 801795c:	b128      	cbz	r0, 801796a <_scanf_float+0x40e>
 801795e:	4807      	ldr	r0, [pc, #28]	; (801797c <_scanf_float+0x420>)
 8017960:	f000 f888 	bl	8017a74 <nanf>
 8017964:	f8c8 0000 	str.w	r0, [r8]
 8017968:	e7ca      	b.n	8017900 <_scanf_float+0x3a4>
 801796a:	4630      	mov	r0, r6
 801796c:	4639      	mov	r1, r7
 801796e:	f7e9 f8f5 	bl	8000b5c <__aeabi_d2f>
 8017972:	e7f7      	b.n	8017964 <_scanf_float+0x408>
 8017974:	2500      	movs	r5, #0
 8017976:	e634      	b.n	80175e2 <_scanf_float+0x86>
 8017978:	0801b488 	.word	0x0801b488
 801797c:	0801b8a0 	.word	0x0801b8a0

08017980 <cleanup_glue>:
 8017980:	b538      	push	{r3, r4, r5, lr}
 8017982:	460c      	mov	r4, r1
 8017984:	6809      	ldr	r1, [r1, #0]
 8017986:	4605      	mov	r5, r0
 8017988:	b109      	cbz	r1, 801798e <cleanup_glue+0xe>
 801798a:	f7ff fff9 	bl	8017980 <cleanup_glue>
 801798e:	4621      	mov	r1, r4
 8017990:	4628      	mov	r0, r5
 8017992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017996:	f7ff b8db 	b.w	8016b50 <_free_r>
	...

0801799c <_reclaim_reent>:
 801799c:	4b2c      	ldr	r3, [pc, #176]	; (8017a50 <_reclaim_reent+0xb4>)
 801799e:	b570      	push	{r4, r5, r6, lr}
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	4604      	mov	r4, r0
 80179a4:	4283      	cmp	r3, r0
 80179a6:	d051      	beq.n	8017a4c <_reclaim_reent+0xb0>
 80179a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80179aa:	b143      	cbz	r3, 80179be <_reclaim_reent+0x22>
 80179ac:	68db      	ldr	r3, [r3, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d14a      	bne.n	8017a48 <_reclaim_reent+0xac>
 80179b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80179b4:	6819      	ldr	r1, [r3, #0]
 80179b6:	b111      	cbz	r1, 80179be <_reclaim_reent+0x22>
 80179b8:	4620      	mov	r0, r4
 80179ba:	f7ff f8c9 	bl	8016b50 <_free_r>
 80179be:	6961      	ldr	r1, [r4, #20]
 80179c0:	b111      	cbz	r1, 80179c8 <_reclaim_reent+0x2c>
 80179c2:	4620      	mov	r0, r4
 80179c4:	f7ff f8c4 	bl	8016b50 <_free_r>
 80179c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80179ca:	b111      	cbz	r1, 80179d2 <_reclaim_reent+0x36>
 80179cc:	4620      	mov	r0, r4
 80179ce:	f7ff f8bf 	bl	8016b50 <_free_r>
 80179d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80179d4:	b111      	cbz	r1, 80179dc <_reclaim_reent+0x40>
 80179d6:	4620      	mov	r0, r4
 80179d8:	f7ff f8ba 	bl	8016b50 <_free_r>
 80179dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80179de:	b111      	cbz	r1, 80179e6 <_reclaim_reent+0x4a>
 80179e0:	4620      	mov	r0, r4
 80179e2:	f7ff f8b5 	bl	8016b50 <_free_r>
 80179e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80179e8:	b111      	cbz	r1, 80179f0 <_reclaim_reent+0x54>
 80179ea:	4620      	mov	r0, r4
 80179ec:	f7ff f8b0 	bl	8016b50 <_free_r>
 80179f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80179f2:	b111      	cbz	r1, 80179fa <_reclaim_reent+0x5e>
 80179f4:	4620      	mov	r0, r4
 80179f6:	f7ff f8ab 	bl	8016b50 <_free_r>
 80179fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80179fc:	b111      	cbz	r1, 8017a04 <_reclaim_reent+0x68>
 80179fe:	4620      	mov	r0, r4
 8017a00:	f7ff f8a6 	bl	8016b50 <_free_r>
 8017a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a06:	b111      	cbz	r1, 8017a0e <_reclaim_reent+0x72>
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f7ff f8a1 	bl	8016b50 <_free_r>
 8017a0e:	69a3      	ldr	r3, [r4, #24]
 8017a10:	b1e3      	cbz	r3, 8017a4c <_reclaim_reent+0xb0>
 8017a12:	4620      	mov	r0, r4
 8017a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a16:	4798      	blx	r3
 8017a18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017a1a:	b1b9      	cbz	r1, 8017a4c <_reclaim_reent+0xb0>
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a22:	f7ff bfad 	b.w	8017980 <cleanup_glue>
 8017a26:	5949      	ldr	r1, [r1, r5]
 8017a28:	b941      	cbnz	r1, 8017a3c <_reclaim_reent+0xa0>
 8017a2a:	3504      	adds	r5, #4
 8017a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a2e:	2d80      	cmp	r5, #128	; 0x80
 8017a30:	68d9      	ldr	r1, [r3, #12]
 8017a32:	d1f8      	bne.n	8017a26 <_reclaim_reent+0x8a>
 8017a34:	4620      	mov	r0, r4
 8017a36:	f7ff f88b 	bl	8016b50 <_free_r>
 8017a3a:	e7ba      	b.n	80179b2 <_reclaim_reent+0x16>
 8017a3c:	680e      	ldr	r6, [r1, #0]
 8017a3e:	4620      	mov	r0, r4
 8017a40:	f7ff f886 	bl	8016b50 <_free_r>
 8017a44:	4631      	mov	r1, r6
 8017a46:	e7ef      	b.n	8017a28 <_reclaim_reent+0x8c>
 8017a48:	2500      	movs	r5, #0
 8017a4a:	e7ef      	b.n	8017a2c <_reclaim_reent+0x90>
 8017a4c:	bd70      	pop	{r4, r5, r6, pc}
 8017a4e:	bf00      	nop
 8017a50:	20000294 	.word	0x20000294

08017a54 <_sbrk_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	2300      	movs	r3, #0
 8017a58:	4d05      	ldr	r5, [pc, #20]	; (8017a70 <_sbrk_r+0x1c>)
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	4608      	mov	r0, r1
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	f7ee fa3a 	bl	8005ed8 <_sbrk>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_sbrk_r+0x1a>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_sbrk_r+0x1a>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	2000e6ac 	.word	0x2000e6ac

08017a74 <nanf>:
 8017a74:	4800      	ldr	r0, [pc, #0]	; (8017a78 <nanf+0x4>)
 8017a76:	4770      	bx	lr
 8017a78:	7fc00000 	.word	0x7fc00000

08017a7c <siprintf>:
 8017a7c:	b40e      	push	{r1, r2, r3}
 8017a7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a82:	b500      	push	{lr}
 8017a84:	b09c      	sub	sp, #112	; 0x70
 8017a86:	ab1d      	add	r3, sp, #116	; 0x74
 8017a88:	9002      	str	r0, [sp, #8]
 8017a8a:	9006      	str	r0, [sp, #24]
 8017a8c:	9107      	str	r1, [sp, #28]
 8017a8e:	9104      	str	r1, [sp, #16]
 8017a90:	4808      	ldr	r0, [pc, #32]	; (8017ab4 <siprintf+0x38>)
 8017a92:	4909      	ldr	r1, [pc, #36]	; (8017ab8 <siprintf+0x3c>)
 8017a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a98:	9105      	str	r1, [sp, #20]
 8017a9a:	6800      	ldr	r0, [r0, #0]
 8017a9c:	a902      	add	r1, sp, #8
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	f002 ff20 	bl	801a8e4 <_svfiprintf_r>
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	9b02      	ldr	r3, [sp, #8]
 8017aa8:	701a      	strb	r2, [r3, #0]
 8017aaa:	b01c      	add	sp, #112	; 0x70
 8017aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ab0:	b003      	add	sp, #12
 8017ab2:	4770      	bx	lr
 8017ab4:	20000294 	.word	0x20000294
 8017ab8:	ffff0208 	.word	0xffff0208

08017abc <__sread>:
 8017abc:	b510      	push	{r4, lr}
 8017abe:	460c      	mov	r4, r1
 8017ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ac4:	f003 f80e 	bl	801aae4 <_read_r>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	bfab      	itete	ge
 8017acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017ace:	89a3      	ldrhlt	r3, [r4, #12]
 8017ad0:	181b      	addge	r3, r3, r0
 8017ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ad6:	bfac      	ite	ge
 8017ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017ada:	81a3      	strhlt	r3, [r4, #12]
 8017adc:	bd10      	pop	{r4, pc}

08017ade <__swrite>:
 8017ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae2:	461f      	mov	r7, r3
 8017ae4:	898b      	ldrh	r3, [r1, #12]
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	05db      	lsls	r3, r3, #23
 8017aea:	460c      	mov	r4, r1
 8017aec:	4616      	mov	r6, r2
 8017aee:	d505      	bpl.n	8017afc <__swrite+0x1e>
 8017af0:	2302      	movs	r3, #2
 8017af2:	2200      	movs	r2, #0
 8017af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017af8:	f002 f994 	bl	8019e24 <_lseek_r>
 8017afc:	89a3      	ldrh	r3, [r4, #12]
 8017afe:	4632      	mov	r2, r6
 8017b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b04:	81a3      	strh	r3, [r4, #12]
 8017b06:	4628      	mov	r0, r5
 8017b08:	463b      	mov	r3, r7
 8017b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b12:	f000 bebb 	b.w	801888c <_write_r>

08017b16 <__sseek>:
 8017b16:	b510      	push	{r4, lr}
 8017b18:	460c      	mov	r4, r1
 8017b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b1e:	f002 f981 	bl	8019e24 <_lseek_r>
 8017b22:	1c43      	adds	r3, r0, #1
 8017b24:	89a3      	ldrh	r3, [r4, #12]
 8017b26:	bf15      	itete	ne
 8017b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b32:	81a3      	strheq	r3, [r4, #12]
 8017b34:	bf18      	it	ne
 8017b36:	81a3      	strhne	r3, [r4, #12]
 8017b38:	bd10      	pop	{r4, pc}

08017b3a <__sclose>:
 8017b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3e:	f000 beb7 	b.w	80188b0 <_close_r>

08017b42 <sulp>:
 8017b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b46:	460f      	mov	r7, r1
 8017b48:	4690      	mov	r8, r2
 8017b4a:	f002 fd19 	bl	801a580 <__ulp>
 8017b4e:	4604      	mov	r4, r0
 8017b50:	460d      	mov	r5, r1
 8017b52:	f1b8 0f00 	cmp.w	r8, #0
 8017b56:	d011      	beq.n	8017b7c <sulp+0x3a>
 8017b58:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8017b5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	dd0b      	ble.n	8017b7c <sulp+0x3a>
 8017b64:	2400      	movs	r4, #0
 8017b66:	051b      	lsls	r3, r3, #20
 8017b68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017b6c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017b70:	4622      	mov	r2, r4
 8017b72:	462b      	mov	r3, r5
 8017b74:	f7e8 fcfa 	bl	800056c <__aeabi_dmul>
 8017b78:	4604      	mov	r4, r0
 8017b7a:	460d      	mov	r5, r1
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	4629      	mov	r1, r5
 8017b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b84:	0000      	movs	r0, r0
	...

08017b88 <_strtod_l>:
 8017b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b8c:	469b      	mov	fp, r3
 8017b8e:	2300      	movs	r3, #0
 8017b90:	b0a1      	sub	sp, #132	; 0x84
 8017b92:	931c      	str	r3, [sp, #112]	; 0x70
 8017b94:	4ba1      	ldr	r3, [pc, #644]	; (8017e1c <_strtod_l+0x294>)
 8017b96:	4682      	mov	sl, r0
 8017b98:	681f      	ldr	r7, [r3, #0]
 8017b9a:	460e      	mov	r6, r1
 8017b9c:	4638      	mov	r0, r7
 8017b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8017ba0:	f7e8 fb20 	bl	80001e4 <strlen>
 8017ba4:	f04f 0800 	mov.w	r8, #0
 8017ba8:	4604      	mov	r4, r0
 8017baa:	f04f 0900 	mov.w	r9, #0
 8017bae:	961b      	str	r6, [sp, #108]	; 0x6c
 8017bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bb2:	781a      	ldrb	r2, [r3, #0]
 8017bb4:	2a2b      	cmp	r2, #43	; 0x2b
 8017bb6:	d04c      	beq.n	8017c52 <_strtod_l+0xca>
 8017bb8:	d83a      	bhi.n	8017c30 <_strtod_l+0xa8>
 8017bba:	2a0d      	cmp	r2, #13
 8017bbc:	d833      	bhi.n	8017c26 <_strtod_l+0x9e>
 8017bbe:	2a08      	cmp	r2, #8
 8017bc0:	d833      	bhi.n	8017c2a <_strtod_l+0xa2>
 8017bc2:	2a00      	cmp	r2, #0
 8017bc4:	d03d      	beq.n	8017c42 <_strtod_l+0xba>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8017bca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017bcc:	782b      	ldrb	r3, [r5, #0]
 8017bce:	2b30      	cmp	r3, #48	; 0x30
 8017bd0:	f040 80af 	bne.w	8017d32 <_strtod_l+0x1aa>
 8017bd4:	786b      	ldrb	r3, [r5, #1]
 8017bd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017bda:	2b58      	cmp	r3, #88	; 0x58
 8017bdc:	d16c      	bne.n	8017cb8 <_strtod_l+0x130>
 8017bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017be0:	4650      	mov	r0, sl
 8017be2:	9301      	str	r3, [sp, #4]
 8017be4:	ab1c      	add	r3, sp, #112	; 0x70
 8017be6:	9300      	str	r3, [sp, #0]
 8017be8:	4a8d      	ldr	r2, [pc, #564]	; (8017e20 <_strtod_l+0x298>)
 8017bea:	f8cd b008 	str.w	fp, [sp, #8]
 8017bee:	ab1d      	add	r3, sp, #116	; 0x74
 8017bf0:	a91b      	add	r1, sp, #108	; 0x6c
 8017bf2:	f001 fe15 	bl	8019820 <__gethex>
 8017bf6:	f010 0607 	ands.w	r6, r0, #7
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	d005      	beq.n	8017c0a <_strtod_l+0x82>
 8017bfe:	2e06      	cmp	r6, #6
 8017c00:	d129      	bne.n	8017c56 <_strtod_l+0xce>
 8017c02:	2300      	movs	r3, #0
 8017c04:	3501      	adds	r5, #1
 8017c06:	951b      	str	r5, [sp, #108]	; 0x6c
 8017c08:	930c      	str	r3, [sp, #48]	; 0x30
 8017c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f040 8596 	bne.w	801873e <_strtod_l+0xbb6>
 8017c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c14:	b1d3      	cbz	r3, 8017c4c <_strtod_l+0xc4>
 8017c16:	4642      	mov	r2, r8
 8017c18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017c1c:	4610      	mov	r0, r2
 8017c1e:	4619      	mov	r1, r3
 8017c20:	b021      	add	sp, #132	; 0x84
 8017c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c26:	2a20      	cmp	r2, #32
 8017c28:	d1cd      	bne.n	8017bc6 <_strtod_l+0x3e>
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8017c2e:	e7bf      	b.n	8017bb0 <_strtod_l+0x28>
 8017c30:	2a2d      	cmp	r2, #45	; 0x2d
 8017c32:	d1c8      	bne.n	8017bc6 <_strtod_l+0x3e>
 8017c34:	2201      	movs	r2, #1
 8017c36:	920c      	str	r2, [sp, #48]	; 0x30
 8017c38:	1c5a      	adds	r2, r3, #1
 8017c3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8017c3c:	785b      	ldrb	r3, [r3, #1]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1c3      	bne.n	8017bca <_strtod_l+0x42>
 8017c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c44:	961b      	str	r6, [sp, #108]	; 0x6c
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	f040 8577 	bne.w	801873a <_strtod_l+0xbb2>
 8017c4c:	4642      	mov	r2, r8
 8017c4e:	464b      	mov	r3, r9
 8017c50:	e7e4      	b.n	8017c1c <_strtod_l+0x94>
 8017c52:	2200      	movs	r2, #0
 8017c54:	e7ef      	b.n	8017c36 <_strtod_l+0xae>
 8017c56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017c58:	b13a      	cbz	r2, 8017c6a <_strtod_l+0xe2>
 8017c5a:	2135      	movs	r1, #53	; 0x35
 8017c5c:	a81e      	add	r0, sp, #120	; 0x78
 8017c5e:	f002 fd93 	bl	801a788 <__copybits>
 8017c62:	4650      	mov	r0, sl
 8017c64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017c66:	f002 f95b 	bl	8019f20 <_Bfree>
 8017c6a:	3e01      	subs	r6, #1
 8017c6c:	2e05      	cmp	r6, #5
 8017c6e:	d807      	bhi.n	8017c80 <_strtod_l+0xf8>
 8017c70:	e8df f006 	tbb	[pc, r6]
 8017c74:	1d180b0e 	.word	0x1d180b0e
 8017c78:	030e      	.short	0x030e
 8017c7a:	f04f 0900 	mov.w	r9, #0
 8017c7e:	46c8      	mov	r8, r9
 8017c80:	0721      	lsls	r1, r4, #28
 8017c82:	d5c2      	bpl.n	8017c0a <_strtod_l+0x82>
 8017c84:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017c88:	e7bf      	b.n	8017c0a <_strtod_l+0x82>
 8017c8a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8017c8e:	e7f7      	b.n	8017c80 <_strtod_l+0xf8>
 8017c90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017c92:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8017c96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017c9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017ca2:	e7ed      	b.n	8017c80 <_strtod_l+0xf8>
 8017ca4:	f04f 0800 	mov.w	r8, #0
 8017ca8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017e24 <_strtod_l+0x29c>
 8017cac:	e7e8      	b.n	8017c80 <_strtod_l+0xf8>
 8017cae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017cb2:	f04f 38ff 	mov.w	r8, #4294967295
 8017cb6:	e7e3      	b.n	8017c80 <_strtod_l+0xf8>
 8017cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017cba:	1c5a      	adds	r2, r3, #1
 8017cbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8017cbe:	785b      	ldrb	r3, [r3, #1]
 8017cc0:	2b30      	cmp	r3, #48	; 0x30
 8017cc2:	d0f9      	beq.n	8017cb8 <_strtod_l+0x130>
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d0a0      	beq.n	8017c0a <_strtod_l+0x82>
 8017cc8:	2301      	movs	r3, #1
 8017cca:	9307      	str	r3, [sp, #28]
 8017ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017cce:	220a      	movs	r2, #10
 8017cd0:	9308      	str	r3, [sp, #32]
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	469b      	mov	fp, r3
 8017cd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017cda:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017cdc:	7805      	ldrb	r5, [r0, #0]
 8017cde:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8017ce2:	b2d9      	uxtb	r1, r3
 8017ce4:	2909      	cmp	r1, #9
 8017ce6:	d926      	bls.n	8017d36 <_strtod_l+0x1ae>
 8017ce8:	4622      	mov	r2, r4
 8017cea:	4639      	mov	r1, r7
 8017cec:	f002 ff12 	bl	801ab14 <strncmp>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d032      	beq.n	8017d5a <_strtod_l+0x1d2>
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	462b      	mov	r3, r5
 8017cf8:	465c      	mov	r4, fp
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	9004      	str	r0, [sp, #16]
 8017cfe:	2b65      	cmp	r3, #101	; 0x65
 8017d00:	d001      	beq.n	8017d06 <_strtod_l+0x17e>
 8017d02:	2b45      	cmp	r3, #69	; 0x45
 8017d04:	d113      	bne.n	8017d2e <_strtod_l+0x1a6>
 8017d06:	b91c      	cbnz	r4, 8017d10 <_strtod_l+0x188>
 8017d08:	9b07      	ldr	r3, [sp, #28]
 8017d0a:	4303      	orrs	r3, r0
 8017d0c:	d099      	beq.n	8017c42 <_strtod_l+0xba>
 8017d0e:	2400      	movs	r4, #0
 8017d10:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017d12:	1c73      	adds	r3, r6, #1
 8017d14:	931b      	str	r3, [sp, #108]	; 0x6c
 8017d16:	7873      	ldrb	r3, [r6, #1]
 8017d18:	2b2b      	cmp	r3, #43	; 0x2b
 8017d1a:	d078      	beq.n	8017e0e <_strtod_l+0x286>
 8017d1c:	2b2d      	cmp	r3, #45	; 0x2d
 8017d1e:	d07b      	beq.n	8017e18 <_strtod_l+0x290>
 8017d20:	2700      	movs	r7, #0
 8017d22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017d26:	2909      	cmp	r1, #9
 8017d28:	f240 8082 	bls.w	8017e30 <_strtod_l+0x2a8>
 8017d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8017d2e:	2500      	movs	r5, #0
 8017d30:	e09e      	b.n	8017e70 <_strtod_l+0x2e8>
 8017d32:	2300      	movs	r3, #0
 8017d34:	e7c9      	b.n	8017cca <_strtod_l+0x142>
 8017d36:	f1bb 0f08 	cmp.w	fp, #8
 8017d3a:	bfd5      	itete	le
 8017d3c:	9906      	ldrle	r1, [sp, #24]
 8017d3e:	9905      	ldrgt	r1, [sp, #20]
 8017d40:	fb02 3301 	mlale	r3, r2, r1, r3
 8017d44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017d48:	f100 0001 	add.w	r0, r0, #1
 8017d4c:	bfd4      	ite	le
 8017d4e:	9306      	strle	r3, [sp, #24]
 8017d50:	9305      	strgt	r3, [sp, #20]
 8017d52:	f10b 0b01 	add.w	fp, fp, #1
 8017d56:	901b      	str	r0, [sp, #108]	; 0x6c
 8017d58:	e7bf      	b.n	8017cda <_strtod_l+0x152>
 8017d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d5c:	191a      	adds	r2, r3, r4
 8017d5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8017d60:	5d1b      	ldrb	r3, [r3, r4]
 8017d62:	f1bb 0f00 	cmp.w	fp, #0
 8017d66:	d036      	beq.n	8017dd6 <_strtod_l+0x24e>
 8017d68:	465c      	mov	r4, fp
 8017d6a:	9004      	str	r0, [sp, #16]
 8017d6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017d70:	2a09      	cmp	r2, #9
 8017d72:	d912      	bls.n	8017d9a <_strtod_l+0x212>
 8017d74:	2201      	movs	r2, #1
 8017d76:	e7c2      	b.n	8017cfe <_strtod_l+0x176>
 8017d78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d7a:	3001      	adds	r0, #1
 8017d7c:	1c5a      	adds	r2, r3, #1
 8017d7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8017d80:	785b      	ldrb	r3, [r3, #1]
 8017d82:	2b30      	cmp	r3, #48	; 0x30
 8017d84:	d0f8      	beq.n	8017d78 <_strtod_l+0x1f0>
 8017d86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017d8a:	2a08      	cmp	r2, #8
 8017d8c:	f200 84dc 	bhi.w	8018748 <_strtod_l+0xbc0>
 8017d90:	9004      	str	r0, [sp, #16]
 8017d92:	2000      	movs	r0, #0
 8017d94:	4604      	mov	r4, r0
 8017d96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017d98:	9208      	str	r2, [sp, #32]
 8017d9a:	3b30      	subs	r3, #48	; 0x30
 8017d9c:	f100 0201 	add.w	r2, r0, #1
 8017da0:	d013      	beq.n	8017dca <_strtod_l+0x242>
 8017da2:	9904      	ldr	r1, [sp, #16]
 8017da4:	1905      	adds	r5, r0, r4
 8017da6:	4411      	add	r1, r2
 8017da8:	9104      	str	r1, [sp, #16]
 8017daa:	4622      	mov	r2, r4
 8017dac:	210a      	movs	r1, #10
 8017dae:	42aa      	cmp	r2, r5
 8017db0:	d113      	bne.n	8017dda <_strtod_l+0x252>
 8017db2:	1822      	adds	r2, r4, r0
 8017db4:	2a08      	cmp	r2, #8
 8017db6:	f104 0401 	add.w	r4, r4, #1
 8017dba:	4404      	add	r4, r0
 8017dbc:	dc1b      	bgt.n	8017df6 <_strtod_l+0x26e>
 8017dbe:	220a      	movs	r2, #10
 8017dc0:	9906      	ldr	r1, [sp, #24]
 8017dc2:	fb02 3301 	mla	r3, r2, r1, r3
 8017dc6:	9306      	str	r3, [sp, #24]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017dcc:	4610      	mov	r0, r2
 8017dce:	1c59      	adds	r1, r3, #1
 8017dd0:	911b      	str	r1, [sp, #108]	; 0x6c
 8017dd2:	785b      	ldrb	r3, [r3, #1]
 8017dd4:	e7ca      	b.n	8017d6c <_strtod_l+0x1e4>
 8017dd6:	4658      	mov	r0, fp
 8017dd8:	e7d3      	b.n	8017d82 <_strtod_l+0x1fa>
 8017dda:	2a08      	cmp	r2, #8
 8017ddc:	dc04      	bgt.n	8017de8 <_strtod_l+0x260>
 8017dde:	9f06      	ldr	r7, [sp, #24]
 8017de0:	434f      	muls	r7, r1
 8017de2:	9706      	str	r7, [sp, #24]
 8017de4:	3201      	adds	r2, #1
 8017de6:	e7e2      	b.n	8017dae <_strtod_l+0x226>
 8017de8:	1c57      	adds	r7, r2, #1
 8017dea:	2f10      	cmp	r7, #16
 8017dec:	bfde      	ittt	le
 8017dee:	9f05      	ldrle	r7, [sp, #20]
 8017df0:	434f      	mulle	r7, r1
 8017df2:	9705      	strle	r7, [sp, #20]
 8017df4:	e7f6      	b.n	8017de4 <_strtod_l+0x25c>
 8017df6:	2c10      	cmp	r4, #16
 8017df8:	bfdf      	itttt	le
 8017dfa:	220a      	movle	r2, #10
 8017dfc:	9905      	ldrle	r1, [sp, #20]
 8017dfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8017e02:	9305      	strle	r3, [sp, #20]
 8017e04:	e7e0      	b.n	8017dc8 <_strtod_l+0x240>
 8017e06:	2300      	movs	r3, #0
 8017e08:	2201      	movs	r2, #1
 8017e0a:	9304      	str	r3, [sp, #16]
 8017e0c:	e77c      	b.n	8017d08 <_strtod_l+0x180>
 8017e0e:	2700      	movs	r7, #0
 8017e10:	1cb3      	adds	r3, r6, #2
 8017e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8017e14:	78b3      	ldrb	r3, [r6, #2]
 8017e16:	e784      	b.n	8017d22 <_strtod_l+0x19a>
 8017e18:	2701      	movs	r7, #1
 8017e1a:	e7f9      	b.n	8017e10 <_strtod_l+0x288>
 8017e1c:	0801b6e0 	.word	0x0801b6e0
 8017e20:	0801b490 	.word	0x0801b490
 8017e24:	7ff00000 	.word	0x7ff00000
 8017e28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e2a:	1c59      	adds	r1, r3, #1
 8017e2c:	911b      	str	r1, [sp, #108]	; 0x6c
 8017e2e:	785b      	ldrb	r3, [r3, #1]
 8017e30:	2b30      	cmp	r3, #48	; 0x30
 8017e32:	d0f9      	beq.n	8017e28 <_strtod_l+0x2a0>
 8017e34:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017e38:	2908      	cmp	r1, #8
 8017e3a:	f63f af78 	bhi.w	8017d2e <_strtod_l+0x1a6>
 8017e3e:	f04f 0e0a 	mov.w	lr, #10
 8017e42:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8017e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e48:	9309      	str	r3, [sp, #36]	; 0x24
 8017e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e4c:	1c59      	adds	r1, r3, #1
 8017e4e:	911b      	str	r1, [sp, #108]	; 0x6c
 8017e50:	785b      	ldrb	r3, [r3, #1]
 8017e52:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8017e56:	2d09      	cmp	r5, #9
 8017e58:	d935      	bls.n	8017ec6 <_strtod_l+0x33e>
 8017e5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017e5c:	1b49      	subs	r1, r1, r5
 8017e5e:	2908      	cmp	r1, #8
 8017e60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017e64:	dc02      	bgt.n	8017e6c <_strtod_l+0x2e4>
 8017e66:	4565      	cmp	r5, ip
 8017e68:	bfa8      	it	ge
 8017e6a:	4665      	movge	r5, ip
 8017e6c:	b107      	cbz	r7, 8017e70 <_strtod_l+0x2e8>
 8017e6e:	426d      	negs	r5, r5
 8017e70:	2c00      	cmp	r4, #0
 8017e72:	d14c      	bne.n	8017f0e <_strtod_l+0x386>
 8017e74:	9907      	ldr	r1, [sp, #28]
 8017e76:	4301      	orrs	r1, r0
 8017e78:	f47f aec7 	bne.w	8017c0a <_strtod_l+0x82>
 8017e7c:	2a00      	cmp	r2, #0
 8017e7e:	f47f aee0 	bne.w	8017c42 <_strtod_l+0xba>
 8017e82:	2b69      	cmp	r3, #105	; 0x69
 8017e84:	d026      	beq.n	8017ed4 <_strtod_l+0x34c>
 8017e86:	dc23      	bgt.n	8017ed0 <_strtod_l+0x348>
 8017e88:	2b49      	cmp	r3, #73	; 0x49
 8017e8a:	d023      	beq.n	8017ed4 <_strtod_l+0x34c>
 8017e8c:	2b4e      	cmp	r3, #78	; 0x4e
 8017e8e:	f47f aed8 	bne.w	8017c42 <_strtod_l+0xba>
 8017e92:	499c      	ldr	r1, [pc, #624]	; (8018104 <_strtod_l+0x57c>)
 8017e94:	a81b      	add	r0, sp, #108	; 0x6c
 8017e96:	f001 ff11 	bl	8019cbc <__match>
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	f43f aed1 	beq.w	8017c42 <_strtod_l+0xba>
 8017ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b28      	cmp	r3, #40	; 0x28
 8017ea6:	d12c      	bne.n	8017f02 <_strtod_l+0x37a>
 8017ea8:	4997      	ldr	r1, [pc, #604]	; (8018108 <_strtod_l+0x580>)
 8017eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8017eac:	a81b      	add	r0, sp, #108	; 0x6c
 8017eae:	f001 ff19 	bl	8019ce4 <__hexnan>
 8017eb2:	2805      	cmp	r0, #5
 8017eb4:	d125      	bne.n	8017f02 <_strtod_l+0x37a>
 8017eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017eb8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8017ebc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017ec0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017ec4:	e6a1      	b.n	8017c0a <_strtod_l+0x82>
 8017ec6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8017eca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8017ece:	e7bc      	b.n	8017e4a <_strtod_l+0x2c2>
 8017ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8017ed2:	e7dc      	b.n	8017e8e <_strtod_l+0x306>
 8017ed4:	498d      	ldr	r1, [pc, #564]	; (801810c <_strtod_l+0x584>)
 8017ed6:	a81b      	add	r0, sp, #108	; 0x6c
 8017ed8:	f001 fef0 	bl	8019cbc <__match>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	f43f aeb0 	beq.w	8017c42 <_strtod_l+0xba>
 8017ee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ee4:	498a      	ldr	r1, [pc, #552]	; (8018110 <_strtod_l+0x588>)
 8017ee6:	3b01      	subs	r3, #1
 8017ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8017eea:	931b      	str	r3, [sp, #108]	; 0x6c
 8017eec:	f001 fee6 	bl	8019cbc <__match>
 8017ef0:	b910      	cbnz	r0, 8017ef8 <_strtod_l+0x370>
 8017ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ef8:	f04f 0800 	mov.w	r8, #0
 8017efc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8018120 <_strtod_l+0x598>
 8017f00:	e683      	b.n	8017c0a <_strtod_l+0x82>
 8017f02:	4884      	ldr	r0, [pc, #528]	; (8018114 <_strtod_l+0x58c>)
 8017f04:	f002 fe00 	bl	801ab08 <nan>
 8017f08:	4680      	mov	r8, r0
 8017f0a:	4689      	mov	r9, r1
 8017f0c:	e67d      	b.n	8017c0a <_strtod_l+0x82>
 8017f0e:	9b04      	ldr	r3, [sp, #16]
 8017f10:	f1bb 0f00 	cmp.w	fp, #0
 8017f14:	bf08      	it	eq
 8017f16:	46a3      	moveq	fp, r4
 8017f18:	1aeb      	subs	r3, r5, r3
 8017f1a:	2c10      	cmp	r4, #16
 8017f1c:	9806      	ldr	r0, [sp, #24]
 8017f1e:	4626      	mov	r6, r4
 8017f20:	9307      	str	r3, [sp, #28]
 8017f22:	bfa8      	it	ge
 8017f24:	2610      	movge	r6, #16
 8017f26:	f7e8 faa7 	bl	8000478 <__aeabi_ui2d>
 8017f2a:	2c09      	cmp	r4, #9
 8017f2c:	4680      	mov	r8, r0
 8017f2e:	4689      	mov	r9, r1
 8017f30:	dd13      	ble.n	8017f5a <_strtod_l+0x3d2>
 8017f32:	4b79      	ldr	r3, [pc, #484]	; (8018118 <_strtod_l+0x590>)
 8017f34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017f38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017f3c:	f7e8 fb16 	bl	800056c <__aeabi_dmul>
 8017f40:	4680      	mov	r8, r0
 8017f42:	9805      	ldr	r0, [sp, #20]
 8017f44:	4689      	mov	r9, r1
 8017f46:	f7e8 fa97 	bl	8000478 <__aeabi_ui2d>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	4640      	mov	r0, r8
 8017f50:	4649      	mov	r1, r9
 8017f52:	f7e8 f955 	bl	8000200 <__adddf3>
 8017f56:	4680      	mov	r8, r0
 8017f58:	4689      	mov	r9, r1
 8017f5a:	2c0f      	cmp	r4, #15
 8017f5c:	dc36      	bgt.n	8017fcc <_strtod_l+0x444>
 8017f5e:	9b07      	ldr	r3, [sp, #28]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	f43f ae52 	beq.w	8017c0a <_strtod_l+0x82>
 8017f66:	dd22      	ble.n	8017fae <_strtod_l+0x426>
 8017f68:	2b16      	cmp	r3, #22
 8017f6a:	dc09      	bgt.n	8017f80 <_strtod_l+0x3f8>
 8017f6c:	4c6a      	ldr	r4, [pc, #424]	; (8018118 <_strtod_l+0x590>)
 8017f6e:	4642      	mov	r2, r8
 8017f70:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8017f74:	464b      	mov	r3, r9
 8017f76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8017f7a:	f7e8 faf7 	bl	800056c <__aeabi_dmul>
 8017f7e:	e7c3      	b.n	8017f08 <_strtod_l+0x380>
 8017f80:	9a07      	ldr	r2, [sp, #28]
 8017f82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017f86:	4293      	cmp	r3, r2
 8017f88:	db20      	blt.n	8017fcc <_strtod_l+0x444>
 8017f8a:	4d63      	ldr	r5, [pc, #396]	; (8018118 <_strtod_l+0x590>)
 8017f8c:	f1c4 040f 	rsb	r4, r4, #15
 8017f90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017f94:	4642      	mov	r2, r8
 8017f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f9a:	464b      	mov	r3, r9
 8017f9c:	f7e8 fae6 	bl	800056c <__aeabi_dmul>
 8017fa0:	9b07      	ldr	r3, [sp, #28]
 8017fa2:	1b1c      	subs	r4, r3, r4
 8017fa4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017fac:	e7e5      	b.n	8017f7a <_strtod_l+0x3f2>
 8017fae:	9b07      	ldr	r3, [sp, #28]
 8017fb0:	3316      	adds	r3, #22
 8017fb2:	db0b      	blt.n	8017fcc <_strtod_l+0x444>
 8017fb4:	9b04      	ldr	r3, [sp, #16]
 8017fb6:	4a58      	ldr	r2, [pc, #352]	; (8018118 <_strtod_l+0x590>)
 8017fb8:	1b5d      	subs	r5, r3, r5
 8017fba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8017fbe:	4640      	mov	r0, r8
 8017fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017fc4:	4649      	mov	r1, r9
 8017fc6:	f7e8 fbfb 	bl	80007c0 <__aeabi_ddiv>
 8017fca:	e79d      	b.n	8017f08 <_strtod_l+0x380>
 8017fcc:	9b07      	ldr	r3, [sp, #28]
 8017fce:	1ba6      	subs	r6, r4, r6
 8017fd0:	441e      	add	r6, r3
 8017fd2:	2e00      	cmp	r6, #0
 8017fd4:	dd71      	ble.n	80180ba <_strtod_l+0x532>
 8017fd6:	f016 030f 	ands.w	r3, r6, #15
 8017fda:	d00a      	beq.n	8017ff2 <_strtod_l+0x46a>
 8017fdc:	494e      	ldr	r1, [pc, #312]	; (8018118 <_strtod_l+0x590>)
 8017fde:	4642      	mov	r2, r8
 8017fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017fe8:	464b      	mov	r3, r9
 8017fea:	f7e8 fabf 	bl	800056c <__aeabi_dmul>
 8017fee:	4680      	mov	r8, r0
 8017ff0:	4689      	mov	r9, r1
 8017ff2:	f036 060f 	bics.w	r6, r6, #15
 8017ff6:	d050      	beq.n	801809a <_strtod_l+0x512>
 8017ff8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8017ffc:	dd27      	ble.n	801804e <_strtod_l+0x4c6>
 8017ffe:	f04f 0b00 	mov.w	fp, #0
 8018002:	f8cd b010 	str.w	fp, [sp, #16]
 8018006:	f8cd b020 	str.w	fp, [sp, #32]
 801800a:	f8cd b018 	str.w	fp, [sp, #24]
 801800e:	2322      	movs	r3, #34	; 0x22
 8018010:	f04f 0800 	mov.w	r8, #0
 8018014:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018120 <_strtod_l+0x598>
 8018018:	f8ca 3000 	str.w	r3, [sl]
 801801c:	9b08      	ldr	r3, [sp, #32]
 801801e:	2b00      	cmp	r3, #0
 8018020:	f43f adf3 	beq.w	8017c0a <_strtod_l+0x82>
 8018024:	4650      	mov	r0, sl
 8018026:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018028:	f001 ff7a 	bl	8019f20 <_Bfree>
 801802c:	4650      	mov	r0, sl
 801802e:	9906      	ldr	r1, [sp, #24]
 8018030:	f001 ff76 	bl	8019f20 <_Bfree>
 8018034:	4650      	mov	r0, sl
 8018036:	9904      	ldr	r1, [sp, #16]
 8018038:	f001 ff72 	bl	8019f20 <_Bfree>
 801803c:	4650      	mov	r0, sl
 801803e:	9908      	ldr	r1, [sp, #32]
 8018040:	f001 ff6e 	bl	8019f20 <_Bfree>
 8018044:	4659      	mov	r1, fp
 8018046:	4650      	mov	r0, sl
 8018048:	f001 ff6a 	bl	8019f20 <_Bfree>
 801804c:	e5dd      	b.n	8017c0a <_strtod_l+0x82>
 801804e:	2300      	movs	r3, #0
 8018050:	4640      	mov	r0, r8
 8018052:	4649      	mov	r1, r9
 8018054:	461f      	mov	r7, r3
 8018056:	1136      	asrs	r6, r6, #4
 8018058:	2e01      	cmp	r6, #1
 801805a:	dc21      	bgt.n	80180a0 <_strtod_l+0x518>
 801805c:	b10b      	cbz	r3, 8018062 <_strtod_l+0x4da>
 801805e:	4680      	mov	r8, r0
 8018060:	4689      	mov	r9, r1
 8018062:	4b2e      	ldr	r3, [pc, #184]	; (801811c <_strtod_l+0x594>)
 8018064:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018068:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801806c:	4642      	mov	r2, r8
 801806e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018072:	464b      	mov	r3, r9
 8018074:	f7e8 fa7a 	bl	800056c <__aeabi_dmul>
 8018078:	4b29      	ldr	r3, [pc, #164]	; (8018120 <_strtod_l+0x598>)
 801807a:	460a      	mov	r2, r1
 801807c:	400b      	ands	r3, r1
 801807e:	4929      	ldr	r1, [pc, #164]	; (8018124 <_strtod_l+0x59c>)
 8018080:	4680      	mov	r8, r0
 8018082:	428b      	cmp	r3, r1
 8018084:	d8bb      	bhi.n	8017ffe <_strtod_l+0x476>
 8018086:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801808a:	428b      	cmp	r3, r1
 801808c:	bf86      	itte	hi
 801808e:	f04f 38ff 	movhi.w	r8, #4294967295
 8018092:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8018128 <_strtod_l+0x5a0>
 8018096:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801809a:	2300      	movs	r3, #0
 801809c:	9305      	str	r3, [sp, #20]
 801809e:	e07e      	b.n	801819e <_strtod_l+0x616>
 80180a0:	07f2      	lsls	r2, r6, #31
 80180a2:	d507      	bpl.n	80180b4 <_strtod_l+0x52c>
 80180a4:	4b1d      	ldr	r3, [pc, #116]	; (801811c <_strtod_l+0x594>)
 80180a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80180aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ae:	f7e8 fa5d 	bl	800056c <__aeabi_dmul>
 80180b2:	2301      	movs	r3, #1
 80180b4:	3701      	adds	r7, #1
 80180b6:	1076      	asrs	r6, r6, #1
 80180b8:	e7ce      	b.n	8018058 <_strtod_l+0x4d0>
 80180ba:	d0ee      	beq.n	801809a <_strtod_l+0x512>
 80180bc:	4276      	negs	r6, r6
 80180be:	f016 020f 	ands.w	r2, r6, #15
 80180c2:	d00a      	beq.n	80180da <_strtod_l+0x552>
 80180c4:	4b14      	ldr	r3, [pc, #80]	; (8018118 <_strtod_l+0x590>)
 80180c6:	4640      	mov	r0, r8
 80180c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80180cc:	4649      	mov	r1, r9
 80180ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d2:	f7e8 fb75 	bl	80007c0 <__aeabi_ddiv>
 80180d6:	4680      	mov	r8, r0
 80180d8:	4689      	mov	r9, r1
 80180da:	1136      	asrs	r6, r6, #4
 80180dc:	d0dd      	beq.n	801809a <_strtod_l+0x512>
 80180de:	2e1f      	cmp	r6, #31
 80180e0:	dd24      	ble.n	801812c <_strtod_l+0x5a4>
 80180e2:	f04f 0b00 	mov.w	fp, #0
 80180e6:	f8cd b010 	str.w	fp, [sp, #16]
 80180ea:	f8cd b020 	str.w	fp, [sp, #32]
 80180ee:	f8cd b018 	str.w	fp, [sp, #24]
 80180f2:	2322      	movs	r3, #34	; 0x22
 80180f4:	f04f 0800 	mov.w	r8, #0
 80180f8:	f04f 0900 	mov.w	r9, #0
 80180fc:	f8ca 3000 	str.w	r3, [sl]
 8018100:	e78c      	b.n	801801c <_strtod_l+0x494>
 8018102:	bf00      	nop
 8018104:	0801b461 	.word	0x0801b461
 8018108:	0801b4a4 	.word	0x0801b4a4
 801810c:	0801b459 	.word	0x0801b459
 8018110:	0801b5e4 	.word	0x0801b5e4
 8018114:	0801b8a0 	.word	0x0801b8a0
 8018118:	0801b780 	.word	0x0801b780
 801811c:	0801b758 	.word	0x0801b758
 8018120:	7ff00000 	.word	0x7ff00000
 8018124:	7ca00000 	.word	0x7ca00000
 8018128:	7fefffff 	.word	0x7fefffff
 801812c:	f016 0310 	ands.w	r3, r6, #16
 8018130:	bf18      	it	ne
 8018132:	236a      	movne	r3, #106	; 0x6a
 8018134:	4640      	mov	r0, r8
 8018136:	9305      	str	r3, [sp, #20]
 8018138:	4649      	mov	r1, r9
 801813a:	2300      	movs	r3, #0
 801813c:	4fb2      	ldr	r7, [pc, #712]	; (8018408 <_strtod_l+0x880>)
 801813e:	07f2      	lsls	r2, r6, #31
 8018140:	d504      	bpl.n	801814c <_strtod_l+0x5c4>
 8018142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018146:	f7e8 fa11 	bl	800056c <__aeabi_dmul>
 801814a:	2301      	movs	r3, #1
 801814c:	1076      	asrs	r6, r6, #1
 801814e:	f107 0708 	add.w	r7, r7, #8
 8018152:	d1f4      	bne.n	801813e <_strtod_l+0x5b6>
 8018154:	b10b      	cbz	r3, 801815a <_strtod_l+0x5d2>
 8018156:	4680      	mov	r8, r0
 8018158:	4689      	mov	r9, r1
 801815a:	9b05      	ldr	r3, [sp, #20]
 801815c:	b1bb      	cbz	r3, 801818e <_strtod_l+0x606>
 801815e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8018162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018166:	2b00      	cmp	r3, #0
 8018168:	4649      	mov	r1, r9
 801816a:	dd10      	ble.n	801818e <_strtod_l+0x606>
 801816c:	2b1f      	cmp	r3, #31
 801816e:	f340 812b 	ble.w	80183c8 <_strtod_l+0x840>
 8018172:	2b34      	cmp	r3, #52	; 0x34
 8018174:	bfd8      	it	le
 8018176:	f04f 32ff 	movle.w	r2, #4294967295
 801817a:	f04f 0800 	mov.w	r8, #0
 801817e:	bfcf      	iteee	gt
 8018180:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018184:	3b20      	suble	r3, #32
 8018186:	fa02 f303 	lslle.w	r3, r2, r3
 801818a:	ea03 0901 	andle.w	r9, r3, r1
 801818e:	2200      	movs	r2, #0
 8018190:	2300      	movs	r3, #0
 8018192:	4640      	mov	r0, r8
 8018194:	4649      	mov	r1, r9
 8018196:	f7e8 fc51 	bl	8000a3c <__aeabi_dcmpeq>
 801819a:	2800      	cmp	r0, #0
 801819c:	d1a1      	bne.n	80180e2 <_strtod_l+0x55a>
 801819e:	9b06      	ldr	r3, [sp, #24]
 80181a0:	465a      	mov	r2, fp
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	4650      	mov	r0, sl
 80181a6:	4623      	mov	r3, r4
 80181a8:	9908      	ldr	r1, [sp, #32]
 80181aa:	f001 ff25 	bl	8019ff8 <__s2b>
 80181ae:	9008      	str	r0, [sp, #32]
 80181b0:	2800      	cmp	r0, #0
 80181b2:	f43f af24 	beq.w	8017ffe <_strtod_l+0x476>
 80181b6:	9b04      	ldr	r3, [sp, #16]
 80181b8:	f04f 0b00 	mov.w	fp, #0
 80181bc:	1b5d      	subs	r5, r3, r5
 80181be:	9b07      	ldr	r3, [sp, #28]
 80181c0:	f8cd b010 	str.w	fp, [sp, #16]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	bfb4      	ite	lt
 80181c8:	462b      	movlt	r3, r5
 80181ca:	2300      	movge	r3, #0
 80181cc:	930e      	str	r3, [sp, #56]	; 0x38
 80181ce:	9b07      	ldr	r3, [sp, #28]
 80181d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181d4:	9316      	str	r3, [sp, #88]	; 0x58
 80181d6:	9b08      	ldr	r3, [sp, #32]
 80181d8:	4650      	mov	r0, sl
 80181da:	6859      	ldr	r1, [r3, #4]
 80181dc:	f001 fe60 	bl	8019ea0 <_Balloc>
 80181e0:	9006      	str	r0, [sp, #24]
 80181e2:	2800      	cmp	r0, #0
 80181e4:	f43f af13 	beq.w	801800e <_strtod_l+0x486>
 80181e8:	9b08      	ldr	r3, [sp, #32]
 80181ea:	300c      	adds	r0, #12
 80181ec:	691a      	ldr	r2, [r3, #16]
 80181ee:	f103 010c 	add.w	r1, r3, #12
 80181f2:	3202      	adds	r2, #2
 80181f4:	0092      	lsls	r2, r2, #2
 80181f6:	f7fe fc95 	bl	8016b24 <memcpy>
 80181fa:	ab1e      	add	r3, sp, #120	; 0x78
 80181fc:	9301      	str	r3, [sp, #4]
 80181fe:	ab1d      	add	r3, sp, #116	; 0x74
 8018200:	9300      	str	r3, [sp, #0]
 8018202:	4642      	mov	r2, r8
 8018204:	464b      	mov	r3, r9
 8018206:	4650      	mov	r0, sl
 8018208:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801820c:	f002 fa32 	bl	801a674 <__d2b>
 8018210:	901c      	str	r0, [sp, #112]	; 0x70
 8018212:	2800      	cmp	r0, #0
 8018214:	f43f aefb 	beq.w	801800e <_strtod_l+0x486>
 8018218:	2101      	movs	r1, #1
 801821a:	4650      	mov	r0, sl
 801821c:	f001 ff84 	bl	801a128 <__i2b>
 8018220:	4603      	mov	r3, r0
 8018222:	9004      	str	r0, [sp, #16]
 8018224:	2800      	cmp	r0, #0
 8018226:	f43f aef2 	beq.w	801800e <_strtod_l+0x486>
 801822a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801822c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801822e:	2d00      	cmp	r5, #0
 8018230:	bfab      	itete	ge
 8018232:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8018234:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8018236:	18ee      	addge	r6, r5, r3
 8018238:	1b5c      	sublt	r4, r3, r5
 801823a:	9b05      	ldr	r3, [sp, #20]
 801823c:	bfa8      	it	ge
 801823e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8018240:	eba5 0503 	sub.w	r5, r5, r3
 8018244:	4415      	add	r5, r2
 8018246:	4b71      	ldr	r3, [pc, #452]	; (801840c <_strtod_l+0x884>)
 8018248:	f105 35ff 	add.w	r5, r5, #4294967295
 801824c:	bfb8      	it	lt
 801824e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8018250:	429d      	cmp	r5, r3
 8018252:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018256:	f280 80c9 	bge.w	80183ec <_strtod_l+0x864>
 801825a:	1b5b      	subs	r3, r3, r5
 801825c:	2b1f      	cmp	r3, #31
 801825e:	f04f 0701 	mov.w	r7, #1
 8018262:	eba2 0203 	sub.w	r2, r2, r3
 8018266:	f300 80b6 	bgt.w	80183d6 <_strtod_l+0x84e>
 801826a:	2500      	movs	r5, #0
 801826c:	fa07 f303 	lsl.w	r3, r7, r3
 8018270:	930f      	str	r3, [sp, #60]	; 0x3c
 8018272:	18b7      	adds	r7, r6, r2
 8018274:	9b05      	ldr	r3, [sp, #20]
 8018276:	42be      	cmp	r6, r7
 8018278:	4414      	add	r4, r2
 801827a:	441c      	add	r4, r3
 801827c:	4633      	mov	r3, r6
 801827e:	bfa8      	it	ge
 8018280:	463b      	movge	r3, r7
 8018282:	42a3      	cmp	r3, r4
 8018284:	bfa8      	it	ge
 8018286:	4623      	movge	r3, r4
 8018288:	2b00      	cmp	r3, #0
 801828a:	bfc2      	ittt	gt
 801828c:	1aff      	subgt	r7, r7, r3
 801828e:	1ae4      	subgt	r4, r4, r3
 8018290:	1af6      	subgt	r6, r6, r3
 8018292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018294:	2b00      	cmp	r3, #0
 8018296:	dd17      	ble.n	80182c8 <_strtod_l+0x740>
 8018298:	461a      	mov	r2, r3
 801829a:	4650      	mov	r0, sl
 801829c:	9904      	ldr	r1, [sp, #16]
 801829e:	f001 fffd 	bl	801a29c <__pow5mult>
 80182a2:	9004      	str	r0, [sp, #16]
 80182a4:	2800      	cmp	r0, #0
 80182a6:	f43f aeb2 	beq.w	801800e <_strtod_l+0x486>
 80182aa:	4601      	mov	r1, r0
 80182ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80182ae:	4650      	mov	r0, sl
 80182b0:	f001 ff50 	bl	801a154 <__multiply>
 80182b4:	9009      	str	r0, [sp, #36]	; 0x24
 80182b6:	2800      	cmp	r0, #0
 80182b8:	f43f aea9 	beq.w	801800e <_strtod_l+0x486>
 80182bc:	4650      	mov	r0, sl
 80182be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80182c0:	f001 fe2e 	bl	8019f20 <_Bfree>
 80182c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c6:	931c      	str	r3, [sp, #112]	; 0x70
 80182c8:	2f00      	cmp	r7, #0
 80182ca:	f300 8093 	bgt.w	80183f4 <_strtod_l+0x86c>
 80182ce:	9b07      	ldr	r3, [sp, #28]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	dd08      	ble.n	80182e6 <_strtod_l+0x75e>
 80182d4:	4650      	mov	r0, sl
 80182d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80182d8:	9906      	ldr	r1, [sp, #24]
 80182da:	f001 ffdf 	bl	801a29c <__pow5mult>
 80182de:	9006      	str	r0, [sp, #24]
 80182e0:	2800      	cmp	r0, #0
 80182e2:	f43f ae94 	beq.w	801800e <_strtod_l+0x486>
 80182e6:	2c00      	cmp	r4, #0
 80182e8:	dd08      	ble.n	80182fc <_strtod_l+0x774>
 80182ea:	4622      	mov	r2, r4
 80182ec:	4650      	mov	r0, sl
 80182ee:	9906      	ldr	r1, [sp, #24]
 80182f0:	f002 f82e 	bl	801a350 <__lshift>
 80182f4:	9006      	str	r0, [sp, #24]
 80182f6:	2800      	cmp	r0, #0
 80182f8:	f43f ae89 	beq.w	801800e <_strtod_l+0x486>
 80182fc:	2e00      	cmp	r6, #0
 80182fe:	dd08      	ble.n	8018312 <_strtod_l+0x78a>
 8018300:	4632      	mov	r2, r6
 8018302:	4650      	mov	r0, sl
 8018304:	9904      	ldr	r1, [sp, #16]
 8018306:	f002 f823 	bl	801a350 <__lshift>
 801830a:	9004      	str	r0, [sp, #16]
 801830c:	2800      	cmp	r0, #0
 801830e:	f43f ae7e 	beq.w	801800e <_strtod_l+0x486>
 8018312:	4650      	mov	r0, sl
 8018314:	9a06      	ldr	r2, [sp, #24]
 8018316:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018318:	f002 f8a2 	bl	801a460 <__mdiff>
 801831c:	4683      	mov	fp, r0
 801831e:	2800      	cmp	r0, #0
 8018320:	f43f ae75 	beq.w	801800e <_strtod_l+0x486>
 8018324:	2400      	movs	r4, #0
 8018326:	68c3      	ldr	r3, [r0, #12]
 8018328:	9904      	ldr	r1, [sp, #16]
 801832a:	60c4      	str	r4, [r0, #12]
 801832c:	930d      	str	r3, [sp, #52]	; 0x34
 801832e:	f002 f87b 	bl	801a428 <__mcmp>
 8018332:	42a0      	cmp	r0, r4
 8018334:	da70      	bge.n	8018418 <_strtod_l+0x890>
 8018336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018338:	ea53 0308 	orrs.w	r3, r3, r8
 801833c:	f040 8096 	bne.w	801846c <_strtod_l+0x8e4>
 8018340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018344:	2b00      	cmp	r3, #0
 8018346:	f040 8091 	bne.w	801846c <_strtod_l+0x8e4>
 801834a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801834e:	0d1b      	lsrs	r3, r3, #20
 8018350:	051b      	lsls	r3, r3, #20
 8018352:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018356:	f240 8089 	bls.w	801846c <_strtod_l+0x8e4>
 801835a:	f8db 3014 	ldr.w	r3, [fp, #20]
 801835e:	b923      	cbnz	r3, 801836a <_strtod_l+0x7e2>
 8018360:	f8db 3010 	ldr.w	r3, [fp, #16]
 8018364:	2b01      	cmp	r3, #1
 8018366:	f340 8081 	ble.w	801846c <_strtod_l+0x8e4>
 801836a:	4659      	mov	r1, fp
 801836c:	2201      	movs	r2, #1
 801836e:	4650      	mov	r0, sl
 8018370:	f001 ffee 	bl	801a350 <__lshift>
 8018374:	9904      	ldr	r1, [sp, #16]
 8018376:	4683      	mov	fp, r0
 8018378:	f002 f856 	bl	801a428 <__mcmp>
 801837c:	2800      	cmp	r0, #0
 801837e:	dd75      	ble.n	801846c <_strtod_l+0x8e4>
 8018380:	9905      	ldr	r1, [sp, #20]
 8018382:	464b      	mov	r3, r9
 8018384:	4a22      	ldr	r2, [pc, #136]	; (8018410 <_strtod_l+0x888>)
 8018386:	2900      	cmp	r1, #0
 8018388:	f000 8091 	beq.w	80184ae <_strtod_l+0x926>
 801838c:	ea02 0109 	and.w	r1, r2, r9
 8018390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018394:	f300 808b 	bgt.w	80184ae <_strtod_l+0x926>
 8018398:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801839c:	f77f aea9 	ble.w	80180f2 <_strtod_l+0x56a>
 80183a0:	2300      	movs	r3, #0
 80183a2:	4a1c      	ldr	r2, [pc, #112]	; (8018414 <_strtod_l+0x88c>)
 80183a4:	4640      	mov	r0, r8
 80183a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80183aa:	4649      	mov	r1, r9
 80183ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80183b0:	f7e8 f8dc 	bl	800056c <__aeabi_dmul>
 80183b4:	460b      	mov	r3, r1
 80183b6:	4303      	orrs	r3, r0
 80183b8:	bf08      	it	eq
 80183ba:	2322      	moveq	r3, #34	; 0x22
 80183bc:	4680      	mov	r8, r0
 80183be:	4689      	mov	r9, r1
 80183c0:	bf08      	it	eq
 80183c2:	f8ca 3000 	streq.w	r3, [sl]
 80183c6:	e62d      	b.n	8018024 <_strtod_l+0x49c>
 80183c8:	f04f 32ff 	mov.w	r2, #4294967295
 80183cc:	fa02 f303 	lsl.w	r3, r2, r3
 80183d0:	ea03 0808 	and.w	r8, r3, r8
 80183d4:	e6db      	b.n	801818e <_strtod_l+0x606>
 80183d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80183da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80183de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80183e2:	35e2      	adds	r5, #226	; 0xe2
 80183e4:	fa07 f505 	lsl.w	r5, r7, r5
 80183e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80183ea:	e742      	b.n	8018272 <_strtod_l+0x6ea>
 80183ec:	2301      	movs	r3, #1
 80183ee:	2500      	movs	r5, #0
 80183f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80183f2:	e73e      	b.n	8018272 <_strtod_l+0x6ea>
 80183f4:	463a      	mov	r2, r7
 80183f6:	4650      	mov	r0, sl
 80183f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80183fa:	f001 ffa9 	bl	801a350 <__lshift>
 80183fe:	901c      	str	r0, [sp, #112]	; 0x70
 8018400:	2800      	cmp	r0, #0
 8018402:	f47f af64 	bne.w	80182ce <_strtod_l+0x746>
 8018406:	e602      	b.n	801800e <_strtod_l+0x486>
 8018408:	0801b4b8 	.word	0x0801b4b8
 801840c:	fffffc02 	.word	0xfffffc02
 8018410:	7ff00000 	.word	0x7ff00000
 8018414:	39500000 	.word	0x39500000
 8018418:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801841c:	d166      	bne.n	80184ec <_strtod_l+0x964>
 801841e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018424:	b35a      	cbz	r2, 801847e <_strtod_l+0x8f6>
 8018426:	4a9c      	ldr	r2, [pc, #624]	; (8018698 <_strtod_l+0xb10>)
 8018428:	4293      	cmp	r3, r2
 801842a:	d12c      	bne.n	8018486 <_strtod_l+0x8fe>
 801842c:	9b05      	ldr	r3, [sp, #20]
 801842e:	4640      	mov	r0, r8
 8018430:	b303      	cbz	r3, 8018474 <_strtod_l+0x8ec>
 8018432:	464b      	mov	r3, r9
 8018434:	4a99      	ldr	r2, [pc, #612]	; (801869c <_strtod_l+0xb14>)
 8018436:	f04f 31ff 	mov.w	r1, #4294967295
 801843a:	401a      	ands	r2, r3
 801843c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018440:	d81b      	bhi.n	801847a <_strtod_l+0x8f2>
 8018442:	0d12      	lsrs	r2, r2, #20
 8018444:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018448:	fa01 f303 	lsl.w	r3, r1, r3
 801844c:	4298      	cmp	r0, r3
 801844e:	d11a      	bne.n	8018486 <_strtod_l+0x8fe>
 8018450:	4b93      	ldr	r3, [pc, #588]	; (80186a0 <_strtod_l+0xb18>)
 8018452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018454:	429a      	cmp	r2, r3
 8018456:	d102      	bne.n	801845e <_strtod_l+0x8d6>
 8018458:	3001      	adds	r0, #1
 801845a:	f43f add8 	beq.w	801800e <_strtod_l+0x486>
 801845e:	f04f 0800 	mov.w	r8, #0
 8018462:	4b8e      	ldr	r3, [pc, #568]	; (801869c <_strtod_l+0xb14>)
 8018464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018466:	401a      	ands	r2, r3
 8018468:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 801846c:	9b05      	ldr	r3, [sp, #20]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d196      	bne.n	80183a0 <_strtod_l+0x818>
 8018472:	e5d7      	b.n	8018024 <_strtod_l+0x49c>
 8018474:	f04f 33ff 	mov.w	r3, #4294967295
 8018478:	e7e8      	b.n	801844c <_strtod_l+0x8c4>
 801847a:	460b      	mov	r3, r1
 801847c:	e7e6      	b.n	801844c <_strtod_l+0x8c4>
 801847e:	ea53 0308 	orrs.w	r3, r3, r8
 8018482:	f43f af7d 	beq.w	8018380 <_strtod_l+0x7f8>
 8018486:	b1e5      	cbz	r5, 80184c2 <_strtod_l+0x93a>
 8018488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801848a:	421d      	tst	r5, r3
 801848c:	d0ee      	beq.n	801846c <_strtod_l+0x8e4>
 801848e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018490:	4640      	mov	r0, r8
 8018492:	4649      	mov	r1, r9
 8018494:	9a05      	ldr	r2, [sp, #20]
 8018496:	b1c3      	cbz	r3, 80184ca <_strtod_l+0x942>
 8018498:	f7ff fb53 	bl	8017b42 <sulp>
 801849c:	4602      	mov	r2, r0
 801849e:	460b      	mov	r3, r1
 80184a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80184a4:	f7e7 feac 	bl	8000200 <__adddf3>
 80184a8:	4680      	mov	r8, r0
 80184aa:	4689      	mov	r9, r1
 80184ac:	e7de      	b.n	801846c <_strtod_l+0x8e4>
 80184ae:	4013      	ands	r3, r2
 80184b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80184b4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80184b8:	f04f 38ff 	mov.w	r8, #4294967295
 80184bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80184c0:	e7d4      	b.n	801846c <_strtod_l+0x8e4>
 80184c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184c4:	ea13 0f08 	tst.w	r3, r8
 80184c8:	e7e0      	b.n	801848c <_strtod_l+0x904>
 80184ca:	f7ff fb3a 	bl	8017b42 <sulp>
 80184ce:	4602      	mov	r2, r0
 80184d0:	460b      	mov	r3, r1
 80184d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80184d6:	f7e7 fe91 	bl	80001fc <__aeabi_dsub>
 80184da:	2200      	movs	r2, #0
 80184dc:	2300      	movs	r3, #0
 80184de:	4680      	mov	r8, r0
 80184e0:	4689      	mov	r9, r1
 80184e2:	f7e8 faab 	bl	8000a3c <__aeabi_dcmpeq>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d0c0      	beq.n	801846c <_strtod_l+0x8e4>
 80184ea:	e602      	b.n	80180f2 <_strtod_l+0x56a>
 80184ec:	4658      	mov	r0, fp
 80184ee:	9904      	ldr	r1, [sp, #16]
 80184f0:	f002 f91c 	bl	801a72c <__ratio>
 80184f4:	2200      	movs	r2, #0
 80184f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80184fa:	4606      	mov	r6, r0
 80184fc:	460f      	mov	r7, r1
 80184fe:	f7e8 fab1 	bl	8000a64 <__aeabi_dcmple>
 8018502:	2800      	cmp	r0, #0
 8018504:	d075      	beq.n	80185f2 <_strtod_l+0xa6a>
 8018506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018508:	2b00      	cmp	r3, #0
 801850a:	d047      	beq.n	801859c <_strtod_l+0xa14>
 801850c:	2600      	movs	r6, #0
 801850e:	4f65      	ldr	r7, [pc, #404]	; (80186a4 <_strtod_l+0xb1c>)
 8018510:	4d64      	ldr	r5, [pc, #400]	; (80186a4 <_strtod_l+0xb1c>)
 8018512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018518:	0d1b      	lsrs	r3, r3, #20
 801851a:	051b      	lsls	r3, r3, #20
 801851c:	930f      	str	r3, [sp, #60]	; 0x3c
 801851e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018520:	4b61      	ldr	r3, [pc, #388]	; (80186a8 <_strtod_l+0xb20>)
 8018522:	429a      	cmp	r2, r3
 8018524:	f040 80c8 	bne.w	80186b8 <_strtod_l+0xb30>
 8018528:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801852c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8018530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018532:	4640      	mov	r0, r8
 8018534:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8018538:	4649      	mov	r1, r9
 801853a:	f002 f821 	bl	801a580 <__ulp>
 801853e:	4602      	mov	r2, r0
 8018540:	460b      	mov	r3, r1
 8018542:	4630      	mov	r0, r6
 8018544:	4639      	mov	r1, r7
 8018546:	f7e8 f811 	bl	800056c <__aeabi_dmul>
 801854a:	4642      	mov	r2, r8
 801854c:	464b      	mov	r3, r9
 801854e:	f7e7 fe57 	bl	8000200 <__adddf3>
 8018552:	460b      	mov	r3, r1
 8018554:	4951      	ldr	r1, [pc, #324]	; (801869c <_strtod_l+0xb14>)
 8018556:	4a55      	ldr	r2, [pc, #340]	; (80186ac <_strtod_l+0xb24>)
 8018558:	4019      	ands	r1, r3
 801855a:	4291      	cmp	r1, r2
 801855c:	4680      	mov	r8, r0
 801855e:	d95e      	bls.n	801861e <_strtod_l+0xa96>
 8018560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018562:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018566:	4293      	cmp	r3, r2
 8018568:	d103      	bne.n	8018572 <_strtod_l+0x9ea>
 801856a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801856c:	3301      	adds	r3, #1
 801856e:	f43f ad4e 	beq.w	801800e <_strtod_l+0x486>
 8018572:	f04f 38ff 	mov.w	r8, #4294967295
 8018576:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80186a0 <_strtod_l+0xb18>
 801857a:	4650      	mov	r0, sl
 801857c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801857e:	f001 fccf 	bl	8019f20 <_Bfree>
 8018582:	4650      	mov	r0, sl
 8018584:	9906      	ldr	r1, [sp, #24]
 8018586:	f001 fccb 	bl	8019f20 <_Bfree>
 801858a:	4650      	mov	r0, sl
 801858c:	9904      	ldr	r1, [sp, #16]
 801858e:	f001 fcc7 	bl	8019f20 <_Bfree>
 8018592:	4659      	mov	r1, fp
 8018594:	4650      	mov	r0, sl
 8018596:	f001 fcc3 	bl	8019f20 <_Bfree>
 801859a:	e61c      	b.n	80181d6 <_strtod_l+0x64e>
 801859c:	f1b8 0f00 	cmp.w	r8, #0
 80185a0:	d119      	bne.n	80185d6 <_strtod_l+0xa4e>
 80185a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80185a8:	b9e3      	cbnz	r3, 80185e4 <_strtod_l+0xa5c>
 80185aa:	2200      	movs	r2, #0
 80185ac:	4630      	mov	r0, r6
 80185ae:	4639      	mov	r1, r7
 80185b0:	4b3c      	ldr	r3, [pc, #240]	; (80186a4 <_strtod_l+0xb1c>)
 80185b2:	f7e8 fa4d 	bl	8000a50 <__aeabi_dcmplt>
 80185b6:	b9c8      	cbnz	r0, 80185ec <_strtod_l+0xa64>
 80185b8:	2200      	movs	r2, #0
 80185ba:	4630      	mov	r0, r6
 80185bc:	4639      	mov	r1, r7
 80185be:	4b3c      	ldr	r3, [pc, #240]	; (80186b0 <_strtod_l+0xb28>)
 80185c0:	f7e7 ffd4 	bl	800056c <__aeabi_dmul>
 80185c4:	4604      	mov	r4, r0
 80185c6:	460d      	mov	r5, r1
 80185c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80185cc:	9418      	str	r4, [sp, #96]	; 0x60
 80185ce:	9319      	str	r3, [sp, #100]	; 0x64
 80185d0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80185d4:	e79d      	b.n	8018512 <_strtod_l+0x98a>
 80185d6:	f1b8 0f01 	cmp.w	r8, #1
 80185da:	d103      	bne.n	80185e4 <_strtod_l+0xa5c>
 80185dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f43f ad87 	beq.w	80180f2 <_strtod_l+0x56a>
 80185e4:	2600      	movs	r6, #0
 80185e6:	2400      	movs	r4, #0
 80185e8:	4f32      	ldr	r7, [pc, #200]	; (80186b4 <_strtod_l+0xb2c>)
 80185ea:	e791      	b.n	8018510 <_strtod_l+0x988>
 80185ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80185ee:	4d30      	ldr	r5, [pc, #192]	; (80186b0 <_strtod_l+0xb28>)
 80185f0:	e7ea      	b.n	80185c8 <_strtod_l+0xa40>
 80185f2:	4b2f      	ldr	r3, [pc, #188]	; (80186b0 <_strtod_l+0xb28>)
 80185f4:	2200      	movs	r2, #0
 80185f6:	4630      	mov	r0, r6
 80185f8:	4639      	mov	r1, r7
 80185fa:	f7e7 ffb7 	bl	800056c <__aeabi_dmul>
 80185fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018600:	4604      	mov	r4, r0
 8018602:	460d      	mov	r5, r1
 8018604:	b933      	cbnz	r3, 8018614 <_strtod_l+0xa8c>
 8018606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801860a:	9010      	str	r0, [sp, #64]	; 0x40
 801860c:	9311      	str	r3, [sp, #68]	; 0x44
 801860e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8018612:	e77e      	b.n	8018512 <_strtod_l+0x98a>
 8018614:	4602      	mov	r2, r0
 8018616:	460b      	mov	r3, r1
 8018618:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801861c:	e7f7      	b.n	801860e <_strtod_l+0xa86>
 801861e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018622:	9b05      	ldr	r3, [sp, #20]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d1a8      	bne.n	801857a <_strtod_l+0x9f2>
 8018628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801862c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801862e:	0d1b      	lsrs	r3, r3, #20
 8018630:	051b      	lsls	r3, r3, #20
 8018632:	429a      	cmp	r2, r3
 8018634:	d1a1      	bne.n	801857a <_strtod_l+0x9f2>
 8018636:	4620      	mov	r0, r4
 8018638:	4629      	mov	r1, r5
 801863a:	f7e8 faf7 	bl	8000c2c <__aeabi_d2lz>
 801863e:	f7e7 ff67 	bl	8000510 <__aeabi_l2d>
 8018642:	4602      	mov	r2, r0
 8018644:	460b      	mov	r3, r1
 8018646:	4620      	mov	r0, r4
 8018648:	4629      	mov	r1, r5
 801864a:	f7e7 fdd7 	bl	80001fc <__aeabi_dsub>
 801864e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018654:	ea43 0308 	orr.w	r3, r3, r8
 8018658:	4313      	orrs	r3, r2
 801865a:	4604      	mov	r4, r0
 801865c:	460d      	mov	r5, r1
 801865e:	d066      	beq.n	801872e <_strtod_l+0xba6>
 8018660:	a309      	add	r3, pc, #36	; (adr r3, 8018688 <_strtod_l+0xb00>)
 8018662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018666:	f7e8 f9f3 	bl	8000a50 <__aeabi_dcmplt>
 801866a:	2800      	cmp	r0, #0
 801866c:	f47f acda 	bne.w	8018024 <_strtod_l+0x49c>
 8018670:	a307      	add	r3, pc, #28	; (adr r3, 8018690 <_strtod_l+0xb08>)
 8018672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018676:	4620      	mov	r0, r4
 8018678:	4629      	mov	r1, r5
 801867a:	f7e8 fa07 	bl	8000a8c <__aeabi_dcmpgt>
 801867e:	2800      	cmp	r0, #0
 8018680:	f43f af7b 	beq.w	801857a <_strtod_l+0x9f2>
 8018684:	e4ce      	b.n	8018024 <_strtod_l+0x49c>
 8018686:	bf00      	nop
 8018688:	94a03595 	.word	0x94a03595
 801868c:	3fdfffff 	.word	0x3fdfffff
 8018690:	35afe535 	.word	0x35afe535
 8018694:	3fe00000 	.word	0x3fe00000
 8018698:	000fffff 	.word	0x000fffff
 801869c:	7ff00000 	.word	0x7ff00000
 80186a0:	7fefffff 	.word	0x7fefffff
 80186a4:	3ff00000 	.word	0x3ff00000
 80186a8:	7fe00000 	.word	0x7fe00000
 80186ac:	7c9fffff 	.word	0x7c9fffff
 80186b0:	3fe00000 	.word	0x3fe00000
 80186b4:	bff00000 	.word	0xbff00000
 80186b8:	9b05      	ldr	r3, [sp, #20]
 80186ba:	b313      	cbz	r3, 8018702 <_strtod_l+0xb7a>
 80186bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80186c2:	d81e      	bhi.n	8018702 <_strtod_l+0xb7a>
 80186c4:	a326      	add	r3, pc, #152	; (adr r3, 8018760 <_strtod_l+0xbd8>)
 80186c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ca:	4620      	mov	r0, r4
 80186cc:	4629      	mov	r1, r5
 80186ce:	f7e8 f9c9 	bl	8000a64 <__aeabi_dcmple>
 80186d2:	b190      	cbz	r0, 80186fa <_strtod_l+0xb72>
 80186d4:	4629      	mov	r1, r5
 80186d6:	4620      	mov	r0, r4
 80186d8:	f7e8 fa20 	bl	8000b1c <__aeabi_d2uiz>
 80186dc:	2801      	cmp	r0, #1
 80186de:	bf38      	it	cc
 80186e0:	2001      	movcc	r0, #1
 80186e2:	f7e7 fec9 	bl	8000478 <__aeabi_ui2d>
 80186e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186e8:	4604      	mov	r4, r0
 80186ea:	460d      	mov	r5, r1
 80186ec:	b9d3      	cbnz	r3, 8018724 <_strtod_l+0xb9c>
 80186ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186f2:	9012      	str	r0, [sp, #72]	; 0x48
 80186f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80186f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80186fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8018700:	1a9f      	subs	r7, r3, r2
 8018702:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018706:	f001 ff3b 	bl	801a580 <__ulp>
 801870a:	4602      	mov	r2, r0
 801870c:	460b      	mov	r3, r1
 801870e:	4630      	mov	r0, r6
 8018710:	4639      	mov	r1, r7
 8018712:	f7e7 ff2b 	bl	800056c <__aeabi_dmul>
 8018716:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801871a:	f7e7 fd71 	bl	8000200 <__adddf3>
 801871e:	4680      	mov	r8, r0
 8018720:	4689      	mov	r9, r1
 8018722:	e77e      	b.n	8018622 <_strtod_l+0xa9a>
 8018724:	4602      	mov	r2, r0
 8018726:	460b      	mov	r3, r1
 8018728:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801872c:	e7e3      	b.n	80186f6 <_strtod_l+0xb6e>
 801872e:	a30e      	add	r3, pc, #56	; (adr r3, 8018768 <_strtod_l+0xbe0>)
 8018730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018734:	f7e8 f98c 	bl	8000a50 <__aeabi_dcmplt>
 8018738:	e7a1      	b.n	801867e <_strtod_l+0xaf6>
 801873a:	2300      	movs	r3, #0
 801873c:	930c      	str	r3, [sp, #48]	; 0x30
 801873e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018742:	6013      	str	r3, [r2, #0]
 8018744:	f7ff ba65 	b.w	8017c12 <_strtod_l+0x8a>
 8018748:	2b65      	cmp	r3, #101	; 0x65
 801874a:	f43f ab5c 	beq.w	8017e06 <_strtod_l+0x27e>
 801874e:	2b45      	cmp	r3, #69	; 0x45
 8018750:	f43f ab59 	beq.w	8017e06 <_strtod_l+0x27e>
 8018754:	2201      	movs	r2, #1
 8018756:	f7ff bb8d 	b.w	8017e74 <_strtod_l+0x2ec>
 801875a:	bf00      	nop
 801875c:	f3af 8000 	nop.w
 8018760:	ffc00000 	.word	0xffc00000
 8018764:	41dfffff 	.word	0x41dfffff
 8018768:	94a03595 	.word	0x94a03595
 801876c:	3fcfffff 	.word	0x3fcfffff

08018770 <_strtod_r>:
 8018770:	4b01      	ldr	r3, [pc, #4]	; (8018778 <_strtod_r+0x8>)
 8018772:	f7ff ba09 	b.w	8017b88 <_strtod_l>
 8018776:	bf00      	nop
 8018778:	200002fc 	.word	0x200002fc

0801877c <_strtol_l.isra.0>:
 801877c:	2b01      	cmp	r3, #1
 801877e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018782:	4686      	mov	lr, r0
 8018784:	d001      	beq.n	801878a <_strtol_l.isra.0+0xe>
 8018786:	2b24      	cmp	r3, #36	; 0x24
 8018788:	d906      	bls.n	8018798 <_strtol_l.isra.0+0x1c>
 801878a:	f7fe f897 	bl	80168bc <__errno>
 801878e:	2316      	movs	r3, #22
 8018790:	6003      	str	r3, [r0, #0]
 8018792:	2000      	movs	r0, #0
 8018794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018798:	468c      	mov	ip, r1
 801879a:	4e3a      	ldr	r6, [pc, #232]	; (8018884 <_strtol_l.isra.0+0x108>)
 801879c:	4660      	mov	r0, ip
 801879e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80187a2:	5da5      	ldrb	r5, [r4, r6]
 80187a4:	f015 0508 	ands.w	r5, r5, #8
 80187a8:	d1f8      	bne.n	801879c <_strtol_l.isra.0+0x20>
 80187aa:	2c2d      	cmp	r4, #45	; 0x2d
 80187ac:	d133      	bne.n	8018816 <_strtol_l.isra.0+0x9a>
 80187ae:	f04f 0801 	mov.w	r8, #1
 80187b2:	f89c 4000 	ldrb.w	r4, [ip]
 80187b6:	f100 0c02 	add.w	ip, r0, #2
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d05d      	beq.n	801887a <_strtol_l.isra.0+0xfe>
 80187be:	2b10      	cmp	r3, #16
 80187c0:	d10c      	bne.n	80187dc <_strtol_l.isra.0+0x60>
 80187c2:	2c30      	cmp	r4, #48	; 0x30
 80187c4:	d10a      	bne.n	80187dc <_strtol_l.isra.0+0x60>
 80187c6:	f89c 0000 	ldrb.w	r0, [ip]
 80187ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80187ce:	2858      	cmp	r0, #88	; 0x58
 80187d0:	d14e      	bne.n	8018870 <_strtol_l.isra.0+0xf4>
 80187d2:	2310      	movs	r3, #16
 80187d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80187d8:	f10c 0c02 	add.w	ip, ip, #2
 80187dc:	2500      	movs	r5, #0
 80187de:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80187e2:	3f01      	subs	r7, #1
 80187e4:	fbb7 f9f3 	udiv	r9, r7, r3
 80187e8:	4628      	mov	r0, r5
 80187ea:	fb03 7a19 	mls	sl, r3, r9, r7
 80187ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80187f2:	2e09      	cmp	r6, #9
 80187f4:	d818      	bhi.n	8018828 <_strtol_l.isra.0+0xac>
 80187f6:	4634      	mov	r4, r6
 80187f8:	42a3      	cmp	r3, r4
 80187fa:	dd24      	ble.n	8018846 <_strtol_l.isra.0+0xca>
 80187fc:	2d00      	cmp	r5, #0
 80187fe:	db1f      	blt.n	8018840 <_strtol_l.isra.0+0xc4>
 8018800:	4581      	cmp	r9, r0
 8018802:	d31d      	bcc.n	8018840 <_strtol_l.isra.0+0xc4>
 8018804:	d101      	bne.n	801880a <_strtol_l.isra.0+0x8e>
 8018806:	45a2      	cmp	sl, r4
 8018808:	db1a      	blt.n	8018840 <_strtol_l.isra.0+0xc4>
 801880a:	2501      	movs	r5, #1
 801880c:	fb00 4003 	mla	r0, r0, r3, r4
 8018810:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018814:	e7eb      	b.n	80187ee <_strtol_l.isra.0+0x72>
 8018816:	2c2b      	cmp	r4, #43	; 0x2b
 8018818:	bf08      	it	eq
 801881a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801881e:	46a8      	mov	r8, r5
 8018820:	bf08      	it	eq
 8018822:	f100 0c02 	addeq.w	ip, r0, #2
 8018826:	e7c8      	b.n	80187ba <_strtol_l.isra.0+0x3e>
 8018828:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801882c:	2e19      	cmp	r6, #25
 801882e:	d801      	bhi.n	8018834 <_strtol_l.isra.0+0xb8>
 8018830:	3c37      	subs	r4, #55	; 0x37
 8018832:	e7e1      	b.n	80187f8 <_strtol_l.isra.0+0x7c>
 8018834:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8018838:	2e19      	cmp	r6, #25
 801883a:	d804      	bhi.n	8018846 <_strtol_l.isra.0+0xca>
 801883c:	3c57      	subs	r4, #87	; 0x57
 801883e:	e7db      	b.n	80187f8 <_strtol_l.isra.0+0x7c>
 8018840:	f04f 35ff 	mov.w	r5, #4294967295
 8018844:	e7e4      	b.n	8018810 <_strtol_l.isra.0+0x94>
 8018846:	2d00      	cmp	r5, #0
 8018848:	da08      	bge.n	801885c <_strtol_l.isra.0+0xe0>
 801884a:	2322      	movs	r3, #34	; 0x22
 801884c:	4638      	mov	r0, r7
 801884e:	f8ce 3000 	str.w	r3, [lr]
 8018852:	2a00      	cmp	r2, #0
 8018854:	d09e      	beq.n	8018794 <_strtol_l.isra.0+0x18>
 8018856:	f10c 31ff 	add.w	r1, ip, #4294967295
 801885a:	e007      	b.n	801886c <_strtol_l.isra.0+0xf0>
 801885c:	f1b8 0f00 	cmp.w	r8, #0
 8018860:	d000      	beq.n	8018864 <_strtol_l.isra.0+0xe8>
 8018862:	4240      	negs	r0, r0
 8018864:	2a00      	cmp	r2, #0
 8018866:	d095      	beq.n	8018794 <_strtol_l.isra.0+0x18>
 8018868:	2d00      	cmp	r5, #0
 801886a:	d1f4      	bne.n	8018856 <_strtol_l.isra.0+0xda>
 801886c:	6011      	str	r1, [r2, #0]
 801886e:	e791      	b.n	8018794 <_strtol_l.isra.0+0x18>
 8018870:	2430      	movs	r4, #48	; 0x30
 8018872:	2b00      	cmp	r3, #0
 8018874:	d1b2      	bne.n	80187dc <_strtol_l.isra.0+0x60>
 8018876:	2308      	movs	r3, #8
 8018878:	e7b0      	b.n	80187dc <_strtol_l.isra.0+0x60>
 801887a:	2c30      	cmp	r4, #48	; 0x30
 801887c:	d0a3      	beq.n	80187c6 <_strtol_l.isra.0+0x4a>
 801887e:	230a      	movs	r3, #10
 8018880:	e7ac      	b.n	80187dc <_strtol_l.isra.0+0x60>
 8018882:	bf00      	nop
 8018884:	0801b4e1 	.word	0x0801b4e1

08018888 <_strtol_r>:
 8018888:	f7ff bf78 	b.w	801877c <_strtol_l.isra.0>

0801888c <_write_r>:
 801888c:	b538      	push	{r3, r4, r5, lr}
 801888e:	4604      	mov	r4, r0
 8018890:	4608      	mov	r0, r1
 8018892:	4611      	mov	r1, r2
 8018894:	2200      	movs	r2, #0
 8018896:	4d05      	ldr	r5, [pc, #20]	; (80188ac <_write_r+0x20>)
 8018898:	602a      	str	r2, [r5, #0]
 801889a:	461a      	mov	r2, r3
 801889c:	f7ed fad0 	bl	8005e40 <_write>
 80188a0:	1c43      	adds	r3, r0, #1
 80188a2:	d102      	bne.n	80188aa <_write_r+0x1e>
 80188a4:	682b      	ldr	r3, [r5, #0]
 80188a6:	b103      	cbz	r3, 80188aa <_write_r+0x1e>
 80188a8:	6023      	str	r3, [r4, #0]
 80188aa:	bd38      	pop	{r3, r4, r5, pc}
 80188ac:	2000e6ac 	.word	0x2000e6ac

080188b0 <_close_r>:
 80188b0:	b538      	push	{r3, r4, r5, lr}
 80188b2:	2300      	movs	r3, #0
 80188b4:	4d05      	ldr	r5, [pc, #20]	; (80188cc <_close_r+0x1c>)
 80188b6:	4604      	mov	r4, r0
 80188b8:	4608      	mov	r0, r1
 80188ba:	602b      	str	r3, [r5, #0]
 80188bc:	f7ed fadc 	bl	8005e78 <_close>
 80188c0:	1c43      	adds	r3, r0, #1
 80188c2:	d102      	bne.n	80188ca <_close_r+0x1a>
 80188c4:	682b      	ldr	r3, [r5, #0]
 80188c6:	b103      	cbz	r3, 80188ca <_close_r+0x1a>
 80188c8:	6023      	str	r3, [r4, #0]
 80188ca:	bd38      	pop	{r3, r4, r5, pc}
 80188cc:	2000e6ac 	.word	0x2000e6ac

080188d0 <quorem>:
 80188d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	6903      	ldr	r3, [r0, #16]
 80188d6:	690c      	ldr	r4, [r1, #16]
 80188d8:	4607      	mov	r7, r0
 80188da:	42a3      	cmp	r3, r4
 80188dc:	f2c0 8083 	blt.w	80189e6 <quorem+0x116>
 80188e0:	3c01      	subs	r4, #1
 80188e2:	f100 0514 	add.w	r5, r0, #20
 80188e6:	f101 0814 	add.w	r8, r1, #20
 80188ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188ee:	9301      	str	r3, [sp, #4]
 80188f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80188f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80188f8:	3301      	adds	r3, #1
 80188fa:	429a      	cmp	r2, r3
 80188fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8018900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018908:	d332      	bcc.n	8018970 <quorem+0xa0>
 801890a:	f04f 0e00 	mov.w	lr, #0
 801890e:	4640      	mov	r0, r8
 8018910:	46ac      	mov	ip, r5
 8018912:	46f2      	mov	sl, lr
 8018914:	f850 2b04 	ldr.w	r2, [r0], #4
 8018918:	b293      	uxth	r3, r2
 801891a:	fb06 e303 	mla	r3, r6, r3, lr
 801891e:	0c12      	lsrs	r2, r2, #16
 8018920:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018924:	fb06 e202 	mla	r2, r6, r2, lr
 8018928:	b29b      	uxth	r3, r3
 801892a:	ebaa 0303 	sub.w	r3, sl, r3
 801892e:	f8dc a000 	ldr.w	sl, [ip]
 8018932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018936:	fa1f fa8a 	uxth.w	sl, sl
 801893a:	4453      	add	r3, sl
 801893c:	fa1f fa82 	uxth.w	sl, r2
 8018940:	f8dc 2000 	ldr.w	r2, [ip]
 8018944:	4581      	cmp	r9, r0
 8018946:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801894a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801894e:	b29b      	uxth	r3, r3
 8018950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018954:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018958:	f84c 3b04 	str.w	r3, [ip], #4
 801895c:	d2da      	bcs.n	8018914 <quorem+0x44>
 801895e:	f855 300b 	ldr.w	r3, [r5, fp]
 8018962:	b92b      	cbnz	r3, 8018970 <quorem+0xa0>
 8018964:	9b01      	ldr	r3, [sp, #4]
 8018966:	3b04      	subs	r3, #4
 8018968:	429d      	cmp	r5, r3
 801896a:	461a      	mov	r2, r3
 801896c:	d32f      	bcc.n	80189ce <quorem+0xfe>
 801896e:	613c      	str	r4, [r7, #16]
 8018970:	4638      	mov	r0, r7
 8018972:	f001 fd59 	bl	801a428 <__mcmp>
 8018976:	2800      	cmp	r0, #0
 8018978:	db25      	blt.n	80189c6 <quorem+0xf6>
 801897a:	4628      	mov	r0, r5
 801897c:	f04f 0c00 	mov.w	ip, #0
 8018980:	3601      	adds	r6, #1
 8018982:	f858 1b04 	ldr.w	r1, [r8], #4
 8018986:	f8d0 e000 	ldr.w	lr, [r0]
 801898a:	b28b      	uxth	r3, r1
 801898c:	ebac 0303 	sub.w	r3, ip, r3
 8018990:	fa1f f28e 	uxth.w	r2, lr
 8018994:	4413      	add	r3, r2
 8018996:	0c0a      	lsrs	r2, r1, #16
 8018998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801899c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189a6:	45c1      	cmp	r9, r8
 80189a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80189ac:	f840 3b04 	str.w	r3, [r0], #4
 80189b0:	d2e7      	bcs.n	8018982 <quorem+0xb2>
 80189b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80189b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80189ba:	b922      	cbnz	r2, 80189c6 <quorem+0xf6>
 80189bc:	3b04      	subs	r3, #4
 80189be:	429d      	cmp	r5, r3
 80189c0:	461a      	mov	r2, r3
 80189c2:	d30a      	bcc.n	80189da <quorem+0x10a>
 80189c4:	613c      	str	r4, [r7, #16]
 80189c6:	4630      	mov	r0, r6
 80189c8:	b003      	add	sp, #12
 80189ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ce:	6812      	ldr	r2, [r2, #0]
 80189d0:	3b04      	subs	r3, #4
 80189d2:	2a00      	cmp	r2, #0
 80189d4:	d1cb      	bne.n	801896e <quorem+0x9e>
 80189d6:	3c01      	subs	r4, #1
 80189d8:	e7c6      	b.n	8018968 <quorem+0x98>
 80189da:	6812      	ldr	r2, [r2, #0]
 80189dc:	3b04      	subs	r3, #4
 80189de:	2a00      	cmp	r2, #0
 80189e0:	d1f0      	bne.n	80189c4 <quorem+0xf4>
 80189e2:	3c01      	subs	r4, #1
 80189e4:	e7eb      	b.n	80189be <quorem+0xee>
 80189e6:	2000      	movs	r0, #0
 80189e8:	e7ee      	b.n	80189c8 <quorem+0xf8>
 80189ea:	0000      	movs	r0, r0
 80189ec:	0000      	movs	r0, r0
	...

080189f0 <_dtoa_r>:
 80189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f4:	4616      	mov	r6, r2
 80189f6:	461f      	mov	r7, r3
 80189f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80189fa:	b099      	sub	sp, #100	; 0x64
 80189fc:	4605      	mov	r5, r0
 80189fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018a02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8018a06:	b974      	cbnz	r4, 8018a26 <_dtoa_r+0x36>
 8018a08:	2010      	movs	r0, #16
 8018a0a:	f7fe f87b 	bl	8016b04 <malloc>
 8018a0e:	4602      	mov	r2, r0
 8018a10:	6268      	str	r0, [r5, #36]	; 0x24
 8018a12:	b920      	cbnz	r0, 8018a1e <_dtoa_r+0x2e>
 8018a14:	21ea      	movs	r1, #234	; 0xea
 8018a16:	4bae      	ldr	r3, [pc, #696]	; (8018cd0 <_dtoa_r+0x2e0>)
 8018a18:	48ae      	ldr	r0, [pc, #696]	; (8018cd4 <_dtoa_r+0x2e4>)
 8018a1a:	f002 f89b 	bl	801ab54 <__assert_func>
 8018a1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a22:	6004      	str	r4, [r0, #0]
 8018a24:	60c4      	str	r4, [r0, #12]
 8018a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018a28:	6819      	ldr	r1, [r3, #0]
 8018a2a:	b151      	cbz	r1, 8018a42 <_dtoa_r+0x52>
 8018a2c:	685a      	ldr	r2, [r3, #4]
 8018a2e:	2301      	movs	r3, #1
 8018a30:	4093      	lsls	r3, r2
 8018a32:	604a      	str	r2, [r1, #4]
 8018a34:	608b      	str	r3, [r1, #8]
 8018a36:	4628      	mov	r0, r5
 8018a38:	f001 fa72 	bl	8019f20 <_Bfree>
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018a40:	601a      	str	r2, [r3, #0]
 8018a42:	1e3b      	subs	r3, r7, #0
 8018a44:	bfaf      	iteee	ge
 8018a46:	2300      	movge	r3, #0
 8018a48:	2201      	movlt	r2, #1
 8018a4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018a4e:	9305      	strlt	r3, [sp, #20]
 8018a50:	bfa8      	it	ge
 8018a52:	f8c8 3000 	strge.w	r3, [r8]
 8018a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018a5a:	4b9f      	ldr	r3, [pc, #636]	; (8018cd8 <_dtoa_r+0x2e8>)
 8018a5c:	bfb8      	it	lt
 8018a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8018a62:	ea33 0309 	bics.w	r3, r3, r9
 8018a66:	d119      	bne.n	8018a9c <_dtoa_r+0xac>
 8018a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8018a6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018a6e:	6013      	str	r3, [r2, #0]
 8018a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a74:	4333      	orrs	r3, r6
 8018a76:	f000 8580 	beq.w	801957a <_dtoa_r+0xb8a>
 8018a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018a7c:	b953      	cbnz	r3, 8018a94 <_dtoa_r+0xa4>
 8018a7e:	4b97      	ldr	r3, [pc, #604]	; (8018cdc <_dtoa_r+0x2ec>)
 8018a80:	e022      	b.n	8018ac8 <_dtoa_r+0xd8>
 8018a82:	4b97      	ldr	r3, [pc, #604]	; (8018ce0 <_dtoa_r+0x2f0>)
 8018a84:	9308      	str	r3, [sp, #32]
 8018a86:	3308      	adds	r3, #8
 8018a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018a8a:	6013      	str	r3, [r2, #0]
 8018a8c:	9808      	ldr	r0, [sp, #32]
 8018a8e:	b019      	add	sp, #100	; 0x64
 8018a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a94:	4b91      	ldr	r3, [pc, #580]	; (8018cdc <_dtoa_r+0x2ec>)
 8018a96:	9308      	str	r3, [sp, #32]
 8018a98:	3303      	adds	r3, #3
 8018a9a:	e7f5      	b.n	8018a88 <_dtoa_r+0x98>
 8018a9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018aa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8018aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	2300      	movs	r3, #0
 8018aac:	f7e7 ffc6 	bl	8000a3c <__aeabi_dcmpeq>
 8018ab0:	4680      	mov	r8, r0
 8018ab2:	b158      	cbz	r0, 8018acc <_dtoa_r+0xdc>
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018ab8:	6013      	str	r3, [r2, #0]
 8018aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	f000 8559 	beq.w	8019574 <_dtoa_r+0xb84>
 8018ac2:	4888      	ldr	r0, [pc, #544]	; (8018ce4 <_dtoa_r+0x2f4>)
 8018ac4:	6018      	str	r0, [r3, #0]
 8018ac6:	1e43      	subs	r3, r0, #1
 8018ac8:	9308      	str	r3, [sp, #32]
 8018aca:	e7df      	b.n	8018a8c <_dtoa_r+0x9c>
 8018acc:	ab16      	add	r3, sp, #88	; 0x58
 8018ace:	9301      	str	r3, [sp, #4]
 8018ad0:	ab17      	add	r3, sp, #92	; 0x5c
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018ada:	f001 fdcb 	bl	801a674 <__d2b>
 8018ade:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018ae2:	4682      	mov	sl, r0
 8018ae4:	2c00      	cmp	r4, #0
 8018ae6:	d07e      	beq.n	8018be6 <_dtoa_r+0x1f6>
 8018ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018aee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8018af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018af6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8018afa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018afe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8018b02:	2200      	movs	r2, #0
 8018b04:	4b78      	ldr	r3, [pc, #480]	; (8018ce8 <_dtoa_r+0x2f8>)
 8018b06:	f7e7 fb79 	bl	80001fc <__aeabi_dsub>
 8018b0a:	a36b      	add	r3, pc, #428	; (adr r3, 8018cb8 <_dtoa_r+0x2c8>)
 8018b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b10:	f7e7 fd2c 	bl	800056c <__aeabi_dmul>
 8018b14:	a36a      	add	r3, pc, #424	; (adr r3, 8018cc0 <_dtoa_r+0x2d0>)
 8018b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b1a:	f7e7 fb71 	bl	8000200 <__adddf3>
 8018b1e:	4606      	mov	r6, r0
 8018b20:	4620      	mov	r0, r4
 8018b22:	460f      	mov	r7, r1
 8018b24:	f7e7 fcb8 	bl	8000498 <__aeabi_i2d>
 8018b28:	a367      	add	r3, pc, #412	; (adr r3, 8018cc8 <_dtoa_r+0x2d8>)
 8018b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b2e:	f7e7 fd1d 	bl	800056c <__aeabi_dmul>
 8018b32:	4602      	mov	r2, r0
 8018b34:	460b      	mov	r3, r1
 8018b36:	4630      	mov	r0, r6
 8018b38:	4639      	mov	r1, r7
 8018b3a:	f7e7 fb61 	bl	8000200 <__adddf3>
 8018b3e:	4606      	mov	r6, r0
 8018b40:	460f      	mov	r7, r1
 8018b42:	f7e7 ffc3 	bl	8000acc <__aeabi_d2iz>
 8018b46:	2200      	movs	r2, #0
 8018b48:	4681      	mov	r9, r0
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	4630      	mov	r0, r6
 8018b4e:	4639      	mov	r1, r7
 8018b50:	f7e7 ff7e 	bl	8000a50 <__aeabi_dcmplt>
 8018b54:	b148      	cbz	r0, 8018b6a <_dtoa_r+0x17a>
 8018b56:	4648      	mov	r0, r9
 8018b58:	f7e7 fc9e 	bl	8000498 <__aeabi_i2d>
 8018b5c:	4632      	mov	r2, r6
 8018b5e:	463b      	mov	r3, r7
 8018b60:	f7e7 ff6c 	bl	8000a3c <__aeabi_dcmpeq>
 8018b64:	b908      	cbnz	r0, 8018b6a <_dtoa_r+0x17a>
 8018b66:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b6a:	f1b9 0f16 	cmp.w	r9, #22
 8018b6e:	d857      	bhi.n	8018c20 <_dtoa_r+0x230>
 8018b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018b74:	4b5d      	ldr	r3, [pc, #372]	; (8018cec <_dtoa_r+0x2fc>)
 8018b76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b7e:	f7e7 ff67 	bl	8000a50 <__aeabi_dcmplt>
 8018b82:	2800      	cmp	r0, #0
 8018b84:	d04e      	beq.n	8018c24 <_dtoa_r+0x234>
 8018b86:	2300      	movs	r3, #0
 8018b88:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018b90:	1b1c      	subs	r4, r3, r4
 8018b92:	1e63      	subs	r3, r4, #1
 8018b94:	9309      	str	r3, [sp, #36]	; 0x24
 8018b96:	bf49      	itett	mi
 8018b98:	f1c4 0301 	rsbmi	r3, r4, #1
 8018b9c:	2300      	movpl	r3, #0
 8018b9e:	9306      	strmi	r3, [sp, #24]
 8018ba0:	2300      	movmi	r3, #0
 8018ba2:	bf54      	ite	pl
 8018ba4:	9306      	strpl	r3, [sp, #24]
 8018ba6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8018ba8:	f1b9 0f00 	cmp.w	r9, #0
 8018bac:	db3c      	blt.n	8018c28 <_dtoa_r+0x238>
 8018bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018bb4:	444b      	add	r3, r9
 8018bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8018bb8:	2300      	movs	r3, #0
 8018bba:	930a      	str	r3, [sp, #40]	; 0x28
 8018bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018bbe:	2b09      	cmp	r3, #9
 8018bc0:	d86c      	bhi.n	8018c9c <_dtoa_r+0x2ac>
 8018bc2:	2b05      	cmp	r3, #5
 8018bc4:	bfc4      	itt	gt
 8018bc6:	3b04      	subgt	r3, #4
 8018bc8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8018bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018bcc:	bfc8      	it	gt
 8018bce:	2400      	movgt	r4, #0
 8018bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8018bd4:	bfd8      	it	le
 8018bd6:	2401      	movle	r4, #1
 8018bd8:	2b03      	cmp	r3, #3
 8018bda:	f200 808b 	bhi.w	8018cf4 <_dtoa_r+0x304>
 8018bde:	e8df f003 	tbb	[pc, r3]
 8018be2:	4f2d      	.short	0x4f2d
 8018be4:	5b4d      	.short	0x5b4d
 8018be6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8018bea:	441c      	add	r4, r3
 8018bec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8018bf0:	2b20      	cmp	r3, #32
 8018bf2:	bfc3      	ittte	gt
 8018bf4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018bf8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8018bfc:	fa09 f303 	lslgt.w	r3, r9, r3
 8018c00:	f1c3 0320 	rsble	r3, r3, #32
 8018c04:	bfc6      	itte	gt
 8018c06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018c0a:	4318      	orrgt	r0, r3
 8018c0c:	fa06 f003 	lslle.w	r0, r6, r3
 8018c10:	f7e7 fc32 	bl	8000478 <__aeabi_ui2d>
 8018c14:	2301      	movs	r3, #1
 8018c16:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018c1a:	3c01      	subs	r4, #1
 8018c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c1e:	e770      	b.n	8018b02 <_dtoa_r+0x112>
 8018c20:	2301      	movs	r3, #1
 8018c22:	e7b3      	b.n	8018b8c <_dtoa_r+0x19c>
 8018c24:	900f      	str	r0, [sp, #60]	; 0x3c
 8018c26:	e7b2      	b.n	8018b8e <_dtoa_r+0x19e>
 8018c28:	9b06      	ldr	r3, [sp, #24]
 8018c2a:	eba3 0309 	sub.w	r3, r3, r9
 8018c2e:	9306      	str	r3, [sp, #24]
 8018c30:	f1c9 0300 	rsb	r3, r9, #0
 8018c34:	930a      	str	r3, [sp, #40]	; 0x28
 8018c36:	2300      	movs	r3, #0
 8018c38:	930e      	str	r3, [sp, #56]	; 0x38
 8018c3a:	e7bf      	b.n	8018bbc <_dtoa_r+0x1cc>
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	dc59      	bgt.n	8018cfa <_dtoa_r+0x30a>
 8018c46:	f04f 0b01 	mov.w	fp, #1
 8018c4a:	465b      	mov	r3, fp
 8018c4c:	f8cd b008 	str.w	fp, [sp, #8]
 8018c50:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018c54:	2200      	movs	r2, #0
 8018c56:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8018c58:	6042      	str	r2, [r0, #4]
 8018c5a:	2204      	movs	r2, #4
 8018c5c:	f102 0614 	add.w	r6, r2, #20
 8018c60:	429e      	cmp	r6, r3
 8018c62:	6841      	ldr	r1, [r0, #4]
 8018c64:	d94f      	bls.n	8018d06 <_dtoa_r+0x316>
 8018c66:	4628      	mov	r0, r5
 8018c68:	f001 f91a 	bl	8019ea0 <_Balloc>
 8018c6c:	9008      	str	r0, [sp, #32]
 8018c6e:	2800      	cmp	r0, #0
 8018c70:	d14d      	bne.n	8018d0e <_dtoa_r+0x31e>
 8018c72:	4602      	mov	r2, r0
 8018c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018c78:	4b1d      	ldr	r3, [pc, #116]	; (8018cf0 <_dtoa_r+0x300>)
 8018c7a:	e6cd      	b.n	8018a18 <_dtoa_r+0x28>
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	e7de      	b.n	8018c3e <_dtoa_r+0x24e>
 8018c80:	2300      	movs	r3, #0
 8018c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c86:	eb09 0b03 	add.w	fp, r9, r3
 8018c8a:	f10b 0301 	add.w	r3, fp, #1
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	9302      	str	r3, [sp, #8]
 8018c92:	bfb8      	it	lt
 8018c94:	2301      	movlt	r3, #1
 8018c96:	e7dd      	b.n	8018c54 <_dtoa_r+0x264>
 8018c98:	2301      	movs	r3, #1
 8018c9a:	e7f2      	b.n	8018c82 <_dtoa_r+0x292>
 8018c9c:	2401      	movs	r4, #1
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	940b      	str	r4, [sp, #44]	; 0x2c
 8018ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8018ca4:	f04f 3bff 	mov.w	fp, #4294967295
 8018ca8:	2200      	movs	r2, #0
 8018caa:	2312      	movs	r3, #18
 8018cac:	f8cd b008 	str.w	fp, [sp, #8]
 8018cb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8018cb2:	e7cf      	b.n	8018c54 <_dtoa_r+0x264>
 8018cb4:	f3af 8000 	nop.w
 8018cb8:	636f4361 	.word	0x636f4361
 8018cbc:	3fd287a7 	.word	0x3fd287a7
 8018cc0:	8b60c8b3 	.word	0x8b60c8b3
 8018cc4:	3fc68a28 	.word	0x3fc68a28
 8018cc8:	509f79fb 	.word	0x509f79fb
 8018ccc:	3fd34413 	.word	0x3fd34413
 8018cd0:	0801b5ee 	.word	0x0801b5ee
 8018cd4:	0801b605 	.word	0x0801b605
 8018cd8:	7ff00000 	.word	0x7ff00000
 8018cdc:	0801b5ea 	.word	0x0801b5ea
 8018ce0:	0801b5e1 	.word	0x0801b5e1
 8018ce4:	0801b465 	.word	0x0801b465
 8018ce8:	3ff80000 	.word	0x3ff80000
 8018cec:	0801b780 	.word	0x0801b780
 8018cf0:	0801b664 	.word	0x0801b664
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cf8:	e7d4      	b.n	8018ca4 <_dtoa_r+0x2b4>
 8018cfa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8018cfe:	465b      	mov	r3, fp
 8018d00:	f8cd b008 	str.w	fp, [sp, #8]
 8018d04:	e7a6      	b.n	8018c54 <_dtoa_r+0x264>
 8018d06:	3101      	adds	r1, #1
 8018d08:	6041      	str	r1, [r0, #4]
 8018d0a:	0052      	lsls	r2, r2, #1
 8018d0c:	e7a6      	b.n	8018c5c <_dtoa_r+0x26c>
 8018d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018d10:	9a08      	ldr	r2, [sp, #32]
 8018d12:	601a      	str	r2, [r3, #0]
 8018d14:	9b02      	ldr	r3, [sp, #8]
 8018d16:	2b0e      	cmp	r3, #14
 8018d18:	f200 80a8 	bhi.w	8018e6c <_dtoa_r+0x47c>
 8018d1c:	2c00      	cmp	r4, #0
 8018d1e:	f000 80a5 	beq.w	8018e6c <_dtoa_r+0x47c>
 8018d22:	f1b9 0f00 	cmp.w	r9, #0
 8018d26:	dd34      	ble.n	8018d92 <_dtoa_r+0x3a2>
 8018d28:	4a9a      	ldr	r2, [pc, #616]	; (8018f94 <_dtoa_r+0x5a4>)
 8018d2a:	f009 030f 	and.w	r3, r9, #15
 8018d2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018d32:	f419 7f80 	tst.w	r9, #256	; 0x100
 8018d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8018d3e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8018d42:	d016      	beq.n	8018d72 <_dtoa_r+0x382>
 8018d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018d48:	4b93      	ldr	r3, [pc, #588]	; (8018f98 <_dtoa_r+0x5a8>)
 8018d4a:	2703      	movs	r7, #3
 8018d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018d50:	f7e7 fd36 	bl	80007c0 <__aeabi_ddiv>
 8018d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d58:	f004 040f 	and.w	r4, r4, #15
 8018d5c:	4e8e      	ldr	r6, [pc, #568]	; (8018f98 <_dtoa_r+0x5a8>)
 8018d5e:	b954      	cbnz	r4, 8018d76 <_dtoa_r+0x386>
 8018d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d68:	f7e7 fd2a 	bl	80007c0 <__aeabi_ddiv>
 8018d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d70:	e029      	b.n	8018dc6 <_dtoa_r+0x3d6>
 8018d72:	2702      	movs	r7, #2
 8018d74:	e7f2      	b.n	8018d5c <_dtoa_r+0x36c>
 8018d76:	07e1      	lsls	r1, r4, #31
 8018d78:	d508      	bpl.n	8018d8c <_dtoa_r+0x39c>
 8018d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018d82:	f7e7 fbf3 	bl	800056c <__aeabi_dmul>
 8018d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018d8a:	3701      	adds	r7, #1
 8018d8c:	1064      	asrs	r4, r4, #1
 8018d8e:	3608      	adds	r6, #8
 8018d90:	e7e5      	b.n	8018d5e <_dtoa_r+0x36e>
 8018d92:	f000 80a5 	beq.w	8018ee0 <_dtoa_r+0x4f0>
 8018d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018d9a:	f1c9 0400 	rsb	r4, r9, #0
 8018d9e:	4b7d      	ldr	r3, [pc, #500]	; (8018f94 <_dtoa_r+0x5a4>)
 8018da0:	f004 020f 	and.w	r2, r4, #15
 8018da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dac:	f7e7 fbde 	bl	800056c <__aeabi_dmul>
 8018db0:	2702      	movs	r7, #2
 8018db2:	2300      	movs	r3, #0
 8018db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018db8:	4e77      	ldr	r6, [pc, #476]	; (8018f98 <_dtoa_r+0x5a8>)
 8018dba:	1124      	asrs	r4, r4, #4
 8018dbc:	2c00      	cmp	r4, #0
 8018dbe:	f040 8084 	bne.w	8018eca <_dtoa_r+0x4da>
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d1d2      	bne.n	8018d6c <_dtoa_r+0x37c>
 8018dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	f000 808b 	beq.w	8018ee4 <_dtoa_r+0x4f4>
 8018dce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8018dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018dda:	2200      	movs	r2, #0
 8018ddc:	4b6f      	ldr	r3, [pc, #444]	; (8018f9c <_dtoa_r+0x5ac>)
 8018dde:	f7e7 fe37 	bl	8000a50 <__aeabi_dcmplt>
 8018de2:	2800      	cmp	r0, #0
 8018de4:	d07e      	beq.n	8018ee4 <_dtoa_r+0x4f4>
 8018de6:	9b02      	ldr	r3, [sp, #8]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d07b      	beq.n	8018ee4 <_dtoa_r+0x4f4>
 8018dec:	f1bb 0f00 	cmp.w	fp, #0
 8018df0:	dd38      	ble.n	8018e64 <_dtoa_r+0x474>
 8018df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018df6:	2200      	movs	r2, #0
 8018df8:	4b69      	ldr	r3, [pc, #420]	; (8018fa0 <_dtoa_r+0x5b0>)
 8018dfa:	f7e7 fbb7 	bl	800056c <__aeabi_dmul>
 8018dfe:	465c      	mov	r4, fp
 8018e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e04:	f109 38ff 	add.w	r8, r9, #4294967295
 8018e08:	3701      	adds	r7, #1
 8018e0a:	4638      	mov	r0, r7
 8018e0c:	f7e7 fb44 	bl	8000498 <__aeabi_i2d>
 8018e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e14:	f7e7 fbaa 	bl	800056c <__aeabi_dmul>
 8018e18:	2200      	movs	r2, #0
 8018e1a:	4b62      	ldr	r3, [pc, #392]	; (8018fa4 <_dtoa_r+0x5b4>)
 8018e1c:	f7e7 f9f0 	bl	8000200 <__adddf3>
 8018e20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018e28:	9611      	str	r6, [sp, #68]	; 0x44
 8018e2a:	2c00      	cmp	r4, #0
 8018e2c:	d15d      	bne.n	8018eea <_dtoa_r+0x4fa>
 8018e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e32:	2200      	movs	r2, #0
 8018e34:	4b5c      	ldr	r3, [pc, #368]	; (8018fa8 <_dtoa_r+0x5b8>)
 8018e36:	f7e7 f9e1 	bl	80001fc <__aeabi_dsub>
 8018e3a:	4602      	mov	r2, r0
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018e42:	4633      	mov	r3, r6
 8018e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e46:	f7e7 fe21 	bl	8000a8c <__aeabi_dcmpgt>
 8018e4a:	2800      	cmp	r0, #0
 8018e4c:	f040 829e 	bne.w	801938c <_dtoa_r+0x99c>
 8018e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018e5a:	f7e7 fdf9 	bl	8000a50 <__aeabi_dcmplt>
 8018e5e:	2800      	cmp	r0, #0
 8018e60:	f040 8292 	bne.w	8019388 <_dtoa_r+0x998>
 8018e64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8018e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8018e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	f2c0 8153 	blt.w	801911a <_dtoa_r+0x72a>
 8018e74:	f1b9 0f0e 	cmp.w	r9, #14
 8018e78:	f300 814f 	bgt.w	801911a <_dtoa_r+0x72a>
 8018e7c:	4b45      	ldr	r3, [pc, #276]	; (8018f94 <_dtoa_r+0x5a4>)
 8018e7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018e86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8018e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	f280 80db 	bge.w	8019048 <_dtoa_r+0x658>
 8018e92:	9b02      	ldr	r3, [sp, #8]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	f300 80d7 	bgt.w	8019048 <_dtoa_r+0x658>
 8018e9a:	f040 8274 	bne.w	8019386 <_dtoa_r+0x996>
 8018e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	4b40      	ldr	r3, [pc, #256]	; (8018fa8 <_dtoa_r+0x5b8>)
 8018ea6:	f7e7 fb61 	bl	800056c <__aeabi_dmul>
 8018eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018eae:	f7e7 fde3 	bl	8000a78 <__aeabi_dcmpge>
 8018eb2:	9c02      	ldr	r4, [sp, #8]
 8018eb4:	4626      	mov	r6, r4
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	f040 824a 	bne.w	8019350 <_dtoa_r+0x960>
 8018ebc:	2331      	movs	r3, #49	; 0x31
 8018ebe:	9f08      	ldr	r7, [sp, #32]
 8018ec0:	f109 0901 	add.w	r9, r9, #1
 8018ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8018ec8:	e246      	b.n	8019358 <_dtoa_r+0x968>
 8018eca:	07e2      	lsls	r2, r4, #31
 8018ecc:	d505      	bpl.n	8018eda <_dtoa_r+0x4ea>
 8018ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018ed2:	f7e7 fb4b 	bl	800056c <__aeabi_dmul>
 8018ed6:	2301      	movs	r3, #1
 8018ed8:	3701      	adds	r7, #1
 8018eda:	1064      	asrs	r4, r4, #1
 8018edc:	3608      	adds	r6, #8
 8018ede:	e76d      	b.n	8018dbc <_dtoa_r+0x3cc>
 8018ee0:	2702      	movs	r7, #2
 8018ee2:	e770      	b.n	8018dc6 <_dtoa_r+0x3d6>
 8018ee4:	46c8      	mov	r8, r9
 8018ee6:	9c02      	ldr	r4, [sp, #8]
 8018ee8:	e78f      	b.n	8018e0a <_dtoa_r+0x41a>
 8018eea:	9908      	ldr	r1, [sp, #32]
 8018eec:	4b29      	ldr	r3, [pc, #164]	; (8018f94 <_dtoa_r+0x5a4>)
 8018eee:	4421      	add	r1, r4
 8018ef0:	9112      	str	r1, [sp, #72]	; 0x48
 8018ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8018efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018f00:	2900      	cmp	r1, #0
 8018f02:	d055      	beq.n	8018fb0 <_dtoa_r+0x5c0>
 8018f04:	2000      	movs	r0, #0
 8018f06:	4929      	ldr	r1, [pc, #164]	; (8018fac <_dtoa_r+0x5bc>)
 8018f08:	f7e7 fc5a 	bl	80007c0 <__aeabi_ddiv>
 8018f0c:	463b      	mov	r3, r7
 8018f0e:	4632      	mov	r2, r6
 8018f10:	f7e7 f974 	bl	80001fc <__aeabi_dsub>
 8018f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018f18:	9f08      	ldr	r7, [sp, #32]
 8018f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f1e:	f7e7 fdd5 	bl	8000acc <__aeabi_d2iz>
 8018f22:	4604      	mov	r4, r0
 8018f24:	f7e7 fab8 	bl	8000498 <__aeabi_i2d>
 8018f28:	4602      	mov	r2, r0
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f30:	f7e7 f964 	bl	80001fc <__aeabi_dsub>
 8018f34:	4602      	mov	r2, r0
 8018f36:	460b      	mov	r3, r1
 8018f38:	3430      	adds	r4, #48	; 0x30
 8018f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018f42:	f807 4b01 	strb.w	r4, [r7], #1
 8018f46:	f7e7 fd83 	bl	8000a50 <__aeabi_dcmplt>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d174      	bne.n	8019038 <_dtoa_r+0x648>
 8018f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018f52:	2000      	movs	r0, #0
 8018f54:	4911      	ldr	r1, [pc, #68]	; (8018f9c <_dtoa_r+0x5ac>)
 8018f56:	f7e7 f951 	bl	80001fc <__aeabi_dsub>
 8018f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018f5e:	f7e7 fd77 	bl	8000a50 <__aeabi_dcmplt>
 8018f62:	2800      	cmp	r0, #0
 8018f64:	f040 80b6 	bne.w	80190d4 <_dtoa_r+0x6e4>
 8018f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f6a:	429f      	cmp	r7, r3
 8018f6c:	f43f af7a 	beq.w	8018e64 <_dtoa_r+0x474>
 8018f70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018f74:	2200      	movs	r2, #0
 8018f76:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <_dtoa_r+0x5b0>)
 8018f78:	f7e7 faf8 	bl	800056c <__aeabi_dmul>
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f86:	4b06      	ldr	r3, [pc, #24]	; (8018fa0 <_dtoa_r+0x5b0>)
 8018f88:	f7e7 faf0 	bl	800056c <__aeabi_dmul>
 8018f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018f90:	e7c3      	b.n	8018f1a <_dtoa_r+0x52a>
 8018f92:	bf00      	nop
 8018f94:	0801b780 	.word	0x0801b780
 8018f98:	0801b758 	.word	0x0801b758
 8018f9c:	3ff00000 	.word	0x3ff00000
 8018fa0:	40240000 	.word	0x40240000
 8018fa4:	401c0000 	.word	0x401c0000
 8018fa8:	40140000 	.word	0x40140000
 8018fac:	3fe00000 	.word	0x3fe00000
 8018fb0:	4630      	mov	r0, r6
 8018fb2:	4639      	mov	r1, r7
 8018fb4:	f7e7 fada 	bl	800056c <__aeabi_dmul>
 8018fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018fbe:	9c08      	ldr	r4, [sp, #32]
 8018fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8018fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018fc6:	f7e7 fd81 	bl	8000acc <__aeabi_d2iz>
 8018fca:	9015      	str	r0, [sp, #84]	; 0x54
 8018fcc:	f7e7 fa64 	bl	8000498 <__aeabi_i2d>
 8018fd0:	4602      	mov	r2, r0
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018fd8:	f7e7 f910 	bl	80001fc <__aeabi_dsub>
 8018fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fde:	4606      	mov	r6, r0
 8018fe0:	3330      	adds	r3, #48	; 0x30
 8018fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8018fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018fe8:	460f      	mov	r7, r1
 8018fea:	429c      	cmp	r4, r3
 8018fec:	f04f 0200 	mov.w	r2, #0
 8018ff0:	d124      	bne.n	801903c <_dtoa_r+0x64c>
 8018ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018ff6:	4bb3      	ldr	r3, [pc, #716]	; (80192c4 <_dtoa_r+0x8d4>)
 8018ff8:	f7e7 f902 	bl	8000200 <__adddf3>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	460b      	mov	r3, r1
 8019000:	4630      	mov	r0, r6
 8019002:	4639      	mov	r1, r7
 8019004:	f7e7 fd42 	bl	8000a8c <__aeabi_dcmpgt>
 8019008:	2800      	cmp	r0, #0
 801900a:	d162      	bne.n	80190d2 <_dtoa_r+0x6e2>
 801900c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019010:	2000      	movs	r0, #0
 8019012:	49ac      	ldr	r1, [pc, #688]	; (80192c4 <_dtoa_r+0x8d4>)
 8019014:	f7e7 f8f2 	bl	80001fc <__aeabi_dsub>
 8019018:	4602      	mov	r2, r0
 801901a:	460b      	mov	r3, r1
 801901c:	4630      	mov	r0, r6
 801901e:	4639      	mov	r1, r7
 8019020:	f7e7 fd16 	bl	8000a50 <__aeabi_dcmplt>
 8019024:	2800      	cmp	r0, #0
 8019026:	f43f af1d 	beq.w	8018e64 <_dtoa_r+0x474>
 801902a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801902c:	1e7b      	subs	r3, r7, #1
 801902e:	9314      	str	r3, [sp, #80]	; 0x50
 8019030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8019034:	2b30      	cmp	r3, #48	; 0x30
 8019036:	d0f8      	beq.n	801902a <_dtoa_r+0x63a>
 8019038:	46c1      	mov	r9, r8
 801903a:	e03a      	b.n	80190b2 <_dtoa_r+0x6c2>
 801903c:	4ba2      	ldr	r3, [pc, #648]	; (80192c8 <_dtoa_r+0x8d8>)
 801903e:	f7e7 fa95 	bl	800056c <__aeabi_dmul>
 8019042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019046:	e7bc      	b.n	8018fc2 <_dtoa_r+0x5d2>
 8019048:	9f08      	ldr	r7, [sp, #32]
 801904a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801904e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019052:	f7e7 fbb5 	bl	80007c0 <__aeabi_ddiv>
 8019056:	f7e7 fd39 	bl	8000acc <__aeabi_d2iz>
 801905a:	4604      	mov	r4, r0
 801905c:	f7e7 fa1c 	bl	8000498 <__aeabi_i2d>
 8019060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019064:	f7e7 fa82 	bl	800056c <__aeabi_dmul>
 8019068:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801906c:	460b      	mov	r3, r1
 801906e:	4602      	mov	r2, r0
 8019070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019074:	f7e7 f8c2 	bl	80001fc <__aeabi_dsub>
 8019078:	f807 6b01 	strb.w	r6, [r7], #1
 801907c:	9e08      	ldr	r6, [sp, #32]
 801907e:	9b02      	ldr	r3, [sp, #8]
 8019080:	1bbe      	subs	r6, r7, r6
 8019082:	42b3      	cmp	r3, r6
 8019084:	d13a      	bne.n	80190fc <_dtoa_r+0x70c>
 8019086:	4602      	mov	r2, r0
 8019088:	460b      	mov	r3, r1
 801908a:	f7e7 f8b9 	bl	8000200 <__adddf3>
 801908e:	4602      	mov	r2, r0
 8019090:	460b      	mov	r3, r1
 8019092:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801909a:	f7e7 fcf7 	bl	8000a8c <__aeabi_dcmpgt>
 801909e:	bb58      	cbnz	r0, 80190f8 <_dtoa_r+0x708>
 80190a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190a8:	f7e7 fcc8 	bl	8000a3c <__aeabi_dcmpeq>
 80190ac:	b108      	cbz	r0, 80190b2 <_dtoa_r+0x6c2>
 80190ae:	07e1      	lsls	r1, r4, #31
 80190b0:	d422      	bmi.n	80190f8 <_dtoa_r+0x708>
 80190b2:	4628      	mov	r0, r5
 80190b4:	4651      	mov	r1, sl
 80190b6:	f000 ff33 	bl	8019f20 <_Bfree>
 80190ba:	2300      	movs	r3, #0
 80190bc:	703b      	strb	r3, [r7, #0]
 80190be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80190c0:	f109 0001 	add.w	r0, r9, #1
 80190c4:	6018      	str	r0, [r3, #0]
 80190c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	f43f acdf 	beq.w	8018a8c <_dtoa_r+0x9c>
 80190ce:	601f      	str	r7, [r3, #0]
 80190d0:	e4dc      	b.n	8018a8c <_dtoa_r+0x9c>
 80190d2:	4627      	mov	r7, r4
 80190d4:	463b      	mov	r3, r7
 80190d6:	461f      	mov	r7, r3
 80190d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190dc:	2a39      	cmp	r2, #57	; 0x39
 80190de:	d107      	bne.n	80190f0 <_dtoa_r+0x700>
 80190e0:	9a08      	ldr	r2, [sp, #32]
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d1f7      	bne.n	80190d6 <_dtoa_r+0x6e6>
 80190e6:	2230      	movs	r2, #48	; 0x30
 80190e8:	9908      	ldr	r1, [sp, #32]
 80190ea:	f108 0801 	add.w	r8, r8, #1
 80190ee:	700a      	strb	r2, [r1, #0]
 80190f0:	781a      	ldrb	r2, [r3, #0]
 80190f2:	3201      	adds	r2, #1
 80190f4:	701a      	strb	r2, [r3, #0]
 80190f6:	e79f      	b.n	8019038 <_dtoa_r+0x648>
 80190f8:	46c8      	mov	r8, r9
 80190fa:	e7eb      	b.n	80190d4 <_dtoa_r+0x6e4>
 80190fc:	2200      	movs	r2, #0
 80190fe:	4b72      	ldr	r3, [pc, #456]	; (80192c8 <_dtoa_r+0x8d8>)
 8019100:	f7e7 fa34 	bl	800056c <__aeabi_dmul>
 8019104:	4602      	mov	r2, r0
 8019106:	460b      	mov	r3, r1
 8019108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801910c:	2200      	movs	r2, #0
 801910e:	2300      	movs	r3, #0
 8019110:	f7e7 fc94 	bl	8000a3c <__aeabi_dcmpeq>
 8019114:	2800      	cmp	r0, #0
 8019116:	d098      	beq.n	801904a <_dtoa_r+0x65a>
 8019118:	e7cb      	b.n	80190b2 <_dtoa_r+0x6c2>
 801911a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801911c:	2a00      	cmp	r2, #0
 801911e:	f000 80cd 	beq.w	80192bc <_dtoa_r+0x8cc>
 8019122:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019124:	2a01      	cmp	r2, #1
 8019126:	f300 80af 	bgt.w	8019288 <_dtoa_r+0x898>
 801912a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801912c:	2a00      	cmp	r2, #0
 801912e:	f000 80a7 	beq.w	8019280 <_dtoa_r+0x890>
 8019132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019138:	9f06      	ldr	r7, [sp, #24]
 801913a:	9a06      	ldr	r2, [sp, #24]
 801913c:	2101      	movs	r1, #1
 801913e:	441a      	add	r2, r3
 8019140:	9206      	str	r2, [sp, #24]
 8019142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019144:	4628      	mov	r0, r5
 8019146:	441a      	add	r2, r3
 8019148:	9209      	str	r2, [sp, #36]	; 0x24
 801914a:	f000 ffed 	bl	801a128 <__i2b>
 801914e:	4606      	mov	r6, r0
 8019150:	2f00      	cmp	r7, #0
 8019152:	dd0c      	ble.n	801916e <_dtoa_r+0x77e>
 8019154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019156:	2b00      	cmp	r3, #0
 8019158:	dd09      	ble.n	801916e <_dtoa_r+0x77e>
 801915a:	42bb      	cmp	r3, r7
 801915c:	bfa8      	it	ge
 801915e:	463b      	movge	r3, r7
 8019160:	9a06      	ldr	r2, [sp, #24]
 8019162:	1aff      	subs	r7, r7, r3
 8019164:	1ad2      	subs	r2, r2, r3
 8019166:	9206      	str	r2, [sp, #24]
 8019168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801916a:	1ad3      	subs	r3, r2, r3
 801916c:	9309      	str	r3, [sp, #36]	; 0x24
 801916e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019170:	b1f3      	cbz	r3, 80191b0 <_dtoa_r+0x7c0>
 8019172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019174:	2b00      	cmp	r3, #0
 8019176:	f000 80a9 	beq.w	80192cc <_dtoa_r+0x8dc>
 801917a:	2c00      	cmp	r4, #0
 801917c:	dd10      	ble.n	80191a0 <_dtoa_r+0x7b0>
 801917e:	4631      	mov	r1, r6
 8019180:	4622      	mov	r2, r4
 8019182:	4628      	mov	r0, r5
 8019184:	f001 f88a 	bl	801a29c <__pow5mult>
 8019188:	4652      	mov	r2, sl
 801918a:	4601      	mov	r1, r0
 801918c:	4606      	mov	r6, r0
 801918e:	4628      	mov	r0, r5
 8019190:	f000 ffe0 	bl	801a154 <__multiply>
 8019194:	4680      	mov	r8, r0
 8019196:	4651      	mov	r1, sl
 8019198:	4628      	mov	r0, r5
 801919a:	f000 fec1 	bl	8019f20 <_Bfree>
 801919e:	46c2      	mov	sl, r8
 80191a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191a2:	1b1a      	subs	r2, r3, r4
 80191a4:	d004      	beq.n	80191b0 <_dtoa_r+0x7c0>
 80191a6:	4651      	mov	r1, sl
 80191a8:	4628      	mov	r0, r5
 80191aa:	f001 f877 	bl	801a29c <__pow5mult>
 80191ae:	4682      	mov	sl, r0
 80191b0:	2101      	movs	r1, #1
 80191b2:	4628      	mov	r0, r5
 80191b4:	f000 ffb8 	bl	801a128 <__i2b>
 80191b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191ba:	4604      	mov	r4, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	f340 8087 	ble.w	80192d0 <_dtoa_r+0x8e0>
 80191c2:	461a      	mov	r2, r3
 80191c4:	4601      	mov	r1, r0
 80191c6:	4628      	mov	r0, r5
 80191c8:	f001 f868 	bl	801a29c <__pow5mult>
 80191cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80191ce:	4604      	mov	r4, r0
 80191d0:	2b01      	cmp	r3, #1
 80191d2:	f340 8080 	ble.w	80192d6 <_dtoa_r+0x8e6>
 80191d6:	f04f 0800 	mov.w	r8, #0
 80191da:	6923      	ldr	r3, [r4, #16]
 80191dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80191e0:	6918      	ldr	r0, [r3, #16]
 80191e2:	f000 ff53 	bl	801a08c <__hi0bits>
 80191e6:	f1c0 0020 	rsb	r0, r0, #32
 80191ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191ec:	4418      	add	r0, r3
 80191ee:	f010 001f 	ands.w	r0, r0, #31
 80191f2:	f000 8092 	beq.w	801931a <_dtoa_r+0x92a>
 80191f6:	f1c0 0320 	rsb	r3, r0, #32
 80191fa:	2b04      	cmp	r3, #4
 80191fc:	f340 808a 	ble.w	8019314 <_dtoa_r+0x924>
 8019200:	f1c0 001c 	rsb	r0, r0, #28
 8019204:	9b06      	ldr	r3, [sp, #24]
 8019206:	4407      	add	r7, r0
 8019208:	4403      	add	r3, r0
 801920a:	9306      	str	r3, [sp, #24]
 801920c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801920e:	4403      	add	r3, r0
 8019210:	9309      	str	r3, [sp, #36]	; 0x24
 8019212:	9b06      	ldr	r3, [sp, #24]
 8019214:	2b00      	cmp	r3, #0
 8019216:	dd05      	ble.n	8019224 <_dtoa_r+0x834>
 8019218:	4651      	mov	r1, sl
 801921a:	461a      	mov	r2, r3
 801921c:	4628      	mov	r0, r5
 801921e:	f001 f897 	bl	801a350 <__lshift>
 8019222:	4682      	mov	sl, r0
 8019224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019226:	2b00      	cmp	r3, #0
 8019228:	dd05      	ble.n	8019236 <_dtoa_r+0x846>
 801922a:	4621      	mov	r1, r4
 801922c:	461a      	mov	r2, r3
 801922e:	4628      	mov	r0, r5
 8019230:	f001 f88e 	bl	801a350 <__lshift>
 8019234:	4604      	mov	r4, r0
 8019236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019238:	2b00      	cmp	r3, #0
 801923a:	d070      	beq.n	801931e <_dtoa_r+0x92e>
 801923c:	4621      	mov	r1, r4
 801923e:	4650      	mov	r0, sl
 8019240:	f001 f8f2 	bl	801a428 <__mcmp>
 8019244:	2800      	cmp	r0, #0
 8019246:	da6a      	bge.n	801931e <_dtoa_r+0x92e>
 8019248:	2300      	movs	r3, #0
 801924a:	4651      	mov	r1, sl
 801924c:	220a      	movs	r2, #10
 801924e:	4628      	mov	r0, r5
 8019250:	f000 fe88 	bl	8019f64 <__multadd>
 8019254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019256:	4682      	mov	sl, r0
 8019258:	f109 39ff 	add.w	r9, r9, #4294967295
 801925c:	2b00      	cmp	r3, #0
 801925e:	f000 8193 	beq.w	8019588 <_dtoa_r+0xb98>
 8019262:	4631      	mov	r1, r6
 8019264:	2300      	movs	r3, #0
 8019266:	220a      	movs	r2, #10
 8019268:	4628      	mov	r0, r5
 801926a:	f000 fe7b 	bl	8019f64 <__multadd>
 801926e:	f1bb 0f00 	cmp.w	fp, #0
 8019272:	4606      	mov	r6, r0
 8019274:	f300 8093 	bgt.w	801939e <_dtoa_r+0x9ae>
 8019278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801927a:	2b02      	cmp	r3, #2
 801927c:	dc57      	bgt.n	801932e <_dtoa_r+0x93e>
 801927e:	e08e      	b.n	801939e <_dtoa_r+0x9ae>
 8019280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019282:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019286:	e756      	b.n	8019136 <_dtoa_r+0x746>
 8019288:	9b02      	ldr	r3, [sp, #8]
 801928a:	1e5c      	subs	r4, r3, #1
 801928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801928e:	42a3      	cmp	r3, r4
 8019290:	bfb7      	itett	lt
 8019292:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8019294:	1b1c      	subge	r4, r3, r4
 8019296:	1ae2      	sublt	r2, r4, r3
 8019298:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801929a:	bfbe      	ittt	lt
 801929c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801929e:	189b      	addlt	r3, r3, r2
 80192a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80192a2:	9b02      	ldr	r3, [sp, #8]
 80192a4:	bfb8      	it	lt
 80192a6:	2400      	movlt	r4, #0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	bfbb      	ittet	lt
 80192ac:	9b06      	ldrlt	r3, [sp, #24]
 80192ae:	9a02      	ldrlt	r2, [sp, #8]
 80192b0:	9f06      	ldrge	r7, [sp, #24]
 80192b2:	1a9f      	sublt	r7, r3, r2
 80192b4:	bfac      	ite	ge
 80192b6:	9b02      	ldrge	r3, [sp, #8]
 80192b8:	2300      	movlt	r3, #0
 80192ba:	e73e      	b.n	801913a <_dtoa_r+0x74a>
 80192bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80192be:	9f06      	ldr	r7, [sp, #24]
 80192c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80192c2:	e745      	b.n	8019150 <_dtoa_r+0x760>
 80192c4:	3fe00000 	.word	0x3fe00000
 80192c8:	40240000 	.word	0x40240000
 80192cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192ce:	e76a      	b.n	80191a6 <_dtoa_r+0x7b6>
 80192d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80192d2:	2b01      	cmp	r3, #1
 80192d4:	dc19      	bgt.n	801930a <_dtoa_r+0x91a>
 80192d6:	9b04      	ldr	r3, [sp, #16]
 80192d8:	b9bb      	cbnz	r3, 801930a <_dtoa_r+0x91a>
 80192da:	9b05      	ldr	r3, [sp, #20]
 80192dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80192e0:	b99b      	cbnz	r3, 801930a <_dtoa_r+0x91a>
 80192e2:	9b05      	ldr	r3, [sp, #20]
 80192e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80192e8:	0d1b      	lsrs	r3, r3, #20
 80192ea:	051b      	lsls	r3, r3, #20
 80192ec:	b183      	cbz	r3, 8019310 <_dtoa_r+0x920>
 80192ee:	f04f 0801 	mov.w	r8, #1
 80192f2:	9b06      	ldr	r3, [sp, #24]
 80192f4:	3301      	adds	r3, #1
 80192f6:	9306      	str	r3, [sp, #24]
 80192f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192fa:	3301      	adds	r3, #1
 80192fc:	9309      	str	r3, [sp, #36]	; 0x24
 80192fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019300:	2b00      	cmp	r3, #0
 8019302:	f47f af6a 	bne.w	80191da <_dtoa_r+0x7ea>
 8019306:	2001      	movs	r0, #1
 8019308:	e76f      	b.n	80191ea <_dtoa_r+0x7fa>
 801930a:	f04f 0800 	mov.w	r8, #0
 801930e:	e7f6      	b.n	80192fe <_dtoa_r+0x90e>
 8019310:	4698      	mov	r8, r3
 8019312:	e7f4      	b.n	80192fe <_dtoa_r+0x90e>
 8019314:	f43f af7d 	beq.w	8019212 <_dtoa_r+0x822>
 8019318:	4618      	mov	r0, r3
 801931a:	301c      	adds	r0, #28
 801931c:	e772      	b.n	8019204 <_dtoa_r+0x814>
 801931e:	9b02      	ldr	r3, [sp, #8]
 8019320:	2b00      	cmp	r3, #0
 8019322:	dc36      	bgt.n	8019392 <_dtoa_r+0x9a2>
 8019324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019326:	2b02      	cmp	r3, #2
 8019328:	dd33      	ble.n	8019392 <_dtoa_r+0x9a2>
 801932a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801932e:	f1bb 0f00 	cmp.w	fp, #0
 8019332:	d10d      	bne.n	8019350 <_dtoa_r+0x960>
 8019334:	4621      	mov	r1, r4
 8019336:	465b      	mov	r3, fp
 8019338:	2205      	movs	r2, #5
 801933a:	4628      	mov	r0, r5
 801933c:	f000 fe12 	bl	8019f64 <__multadd>
 8019340:	4601      	mov	r1, r0
 8019342:	4604      	mov	r4, r0
 8019344:	4650      	mov	r0, sl
 8019346:	f001 f86f 	bl	801a428 <__mcmp>
 801934a:	2800      	cmp	r0, #0
 801934c:	f73f adb6 	bgt.w	8018ebc <_dtoa_r+0x4cc>
 8019350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019352:	9f08      	ldr	r7, [sp, #32]
 8019354:	ea6f 0903 	mvn.w	r9, r3
 8019358:	f04f 0800 	mov.w	r8, #0
 801935c:	4621      	mov	r1, r4
 801935e:	4628      	mov	r0, r5
 8019360:	f000 fdde 	bl	8019f20 <_Bfree>
 8019364:	2e00      	cmp	r6, #0
 8019366:	f43f aea4 	beq.w	80190b2 <_dtoa_r+0x6c2>
 801936a:	f1b8 0f00 	cmp.w	r8, #0
 801936e:	d005      	beq.n	801937c <_dtoa_r+0x98c>
 8019370:	45b0      	cmp	r8, r6
 8019372:	d003      	beq.n	801937c <_dtoa_r+0x98c>
 8019374:	4641      	mov	r1, r8
 8019376:	4628      	mov	r0, r5
 8019378:	f000 fdd2 	bl	8019f20 <_Bfree>
 801937c:	4631      	mov	r1, r6
 801937e:	4628      	mov	r0, r5
 8019380:	f000 fdce 	bl	8019f20 <_Bfree>
 8019384:	e695      	b.n	80190b2 <_dtoa_r+0x6c2>
 8019386:	2400      	movs	r4, #0
 8019388:	4626      	mov	r6, r4
 801938a:	e7e1      	b.n	8019350 <_dtoa_r+0x960>
 801938c:	46c1      	mov	r9, r8
 801938e:	4626      	mov	r6, r4
 8019390:	e594      	b.n	8018ebc <_dtoa_r+0x4cc>
 8019392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019394:	f8dd b008 	ldr.w	fp, [sp, #8]
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 80fc 	beq.w	8019596 <_dtoa_r+0xba6>
 801939e:	2f00      	cmp	r7, #0
 80193a0:	dd05      	ble.n	80193ae <_dtoa_r+0x9be>
 80193a2:	4631      	mov	r1, r6
 80193a4:	463a      	mov	r2, r7
 80193a6:	4628      	mov	r0, r5
 80193a8:	f000 ffd2 	bl	801a350 <__lshift>
 80193ac:	4606      	mov	r6, r0
 80193ae:	f1b8 0f00 	cmp.w	r8, #0
 80193b2:	d05c      	beq.n	801946e <_dtoa_r+0xa7e>
 80193b4:	4628      	mov	r0, r5
 80193b6:	6871      	ldr	r1, [r6, #4]
 80193b8:	f000 fd72 	bl	8019ea0 <_Balloc>
 80193bc:	4607      	mov	r7, r0
 80193be:	b928      	cbnz	r0, 80193cc <_dtoa_r+0x9dc>
 80193c0:	4602      	mov	r2, r0
 80193c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80193c6:	4b7e      	ldr	r3, [pc, #504]	; (80195c0 <_dtoa_r+0xbd0>)
 80193c8:	f7ff bb26 	b.w	8018a18 <_dtoa_r+0x28>
 80193cc:	6932      	ldr	r2, [r6, #16]
 80193ce:	f106 010c 	add.w	r1, r6, #12
 80193d2:	3202      	adds	r2, #2
 80193d4:	0092      	lsls	r2, r2, #2
 80193d6:	300c      	adds	r0, #12
 80193d8:	f7fd fba4 	bl	8016b24 <memcpy>
 80193dc:	2201      	movs	r2, #1
 80193de:	4639      	mov	r1, r7
 80193e0:	4628      	mov	r0, r5
 80193e2:	f000 ffb5 	bl	801a350 <__lshift>
 80193e6:	46b0      	mov	r8, r6
 80193e8:	4606      	mov	r6, r0
 80193ea:	9b08      	ldr	r3, [sp, #32]
 80193ec:	3301      	adds	r3, #1
 80193ee:	9302      	str	r3, [sp, #8]
 80193f0:	9b08      	ldr	r3, [sp, #32]
 80193f2:	445b      	add	r3, fp
 80193f4:	930a      	str	r3, [sp, #40]	; 0x28
 80193f6:	9b04      	ldr	r3, [sp, #16]
 80193f8:	f003 0301 	and.w	r3, r3, #1
 80193fc:	9309      	str	r3, [sp, #36]	; 0x24
 80193fe:	9b02      	ldr	r3, [sp, #8]
 8019400:	4621      	mov	r1, r4
 8019402:	4650      	mov	r0, sl
 8019404:	f103 3bff 	add.w	fp, r3, #4294967295
 8019408:	f7ff fa62 	bl	80188d0 <quorem>
 801940c:	4603      	mov	r3, r0
 801940e:	4641      	mov	r1, r8
 8019410:	3330      	adds	r3, #48	; 0x30
 8019412:	9004      	str	r0, [sp, #16]
 8019414:	4650      	mov	r0, sl
 8019416:	930b      	str	r3, [sp, #44]	; 0x2c
 8019418:	f001 f806 	bl	801a428 <__mcmp>
 801941c:	4632      	mov	r2, r6
 801941e:	9006      	str	r0, [sp, #24]
 8019420:	4621      	mov	r1, r4
 8019422:	4628      	mov	r0, r5
 8019424:	f001 f81c 	bl	801a460 <__mdiff>
 8019428:	68c2      	ldr	r2, [r0, #12]
 801942a:	4607      	mov	r7, r0
 801942c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801942e:	bb02      	cbnz	r2, 8019472 <_dtoa_r+0xa82>
 8019430:	4601      	mov	r1, r0
 8019432:	4650      	mov	r0, sl
 8019434:	f000 fff8 	bl	801a428 <__mcmp>
 8019438:	4602      	mov	r2, r0
 801943a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801943c:	4639      	mov	r1, r7
 801943e:	4628      	mov	r0, r5
 8019440:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8019444:	f000 fd6c 	bl	8019f20 <_Bfree>
 8019448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801944a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801944c:	9f02      	ldr	r7, [sp, #8]
 801944e:	ea43 0102 	orr.w	r1, r3, r2
 8019452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019454:	430b      	orrs	r3, r1
 8019456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019458:	d10d      	bne.n	8019476 <_dtoa_r+0xa86>
 801945a:	2b39      	cmp	r3, #57	; 0x39
 801945c:	d027      	beq.n	80194ae <_dtoa_r+0xabe>
 801945e:	9a06      	ldr	r2, [sp, #24]
 8019460:	2a00      	cmp	r2, #0
 8019462:	dd01      	ble.n	8019468 <_dtoa_r+0xa78>
 8019464:	9b04      	ldr	r3, [sp, #16]
 8019466:	3331      	adds	r3, #49	; 0x31
 8019468:	f88b 3000 	strb.w	r3, [fp]
 801946c:	e776      	b.n	801935c <_dtoa_r+0x96c>
 801946e:	4630      	mov	r0, r6
 8019470:	e7b9      	b.n	80193e6 <_dtoa_r+0x9f6>
 8019472:	2201      	movs	r2, #1
 8019474:	e7e2      	b.n	801943c <_dtoa_r+0xa4c>
 8019476:	9906      	ldr	r1, [sp, #24]
 8019478:	2900      	cmp	r1, #0
 801947a:	db04      	blt.n	8019486 <_dtoa_r+0xa96>
 801947c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801947e:	4301      	orrs	r1, r0
 8019480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019482:	4301      	orrs	r1, r0
 8019484:	d120      	bne.n	80194c8 <_dtoa_r+0xad8>
 8019486:	2a00      	cmp	r2, #0
 8019488:	ddee      	ble.n	8019468 <_dtoa_r+0xa78>
 801948a:	4651      	mov	r1, sl
 801948c:	2201      	movs	r2, #1
 801948e:	4628      	mov	r0, r5
 8019490:	9302      	str	r3, [sp, #8]
 8019492:	f000 ff5d 	bl	801a350 <__lshift>
 8019496:	4621      	mov	r1, r4
 8019498:	4682      	mov	sl, r0
 801949a:	f000 ffc5 	bl	801a428 <__mcmp>
 801949e:	2800      	cmp	r0, #0
 80194a0:	9b02      	ldr	r3, [sp, #8]
 80194a2:	dc02      	bgt.n	80194aa <_dtoa_r+0xaba>
 80194a4:	d1e0      	bne.n	8019468 <_dtoa_r+0xa78>
 80194a6:	07da      	lsls	r2, r3, #31
 80194a8:	d5de      	bpl.n	8019468 <_dtoa_r+0xa78>
 80194aa:	2b39      	cmp	r3, #57	; 0x39
 80194ac:	d1da      	bne.n	8019464 <_dtoa_r+0xa74>
 80194ae:	2339      	movs	r3, #57	; 0x39
 80194b0:	f88b 3000 	strb.w	r3, [fp]
 80194b4:	463b      	mov	r3, r7
 80194b6:	461f      	mov	r7, r3
 80194b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80194bc:	3b01      	subs	r3, #1
 80194be:	2a39      	cmp	r2, #57	; 0x39
 80194c0:	d050      	beq.n	8019564 <_dtoa_r+0xb74>
 80194c2:	3201      	adds	r2, #1
 80194c4:	701a      	strb	r2, [r3, #0]
 80194c6:	e749      	b.n	801935c <_dtoa_r+0x96c>
 80194c8:	2a00      	cmp	r2, #0
 80194ca:	dd03      	ble.n	80194d4 <_dtoa_r+0xae4>
 80194cc:	2b39      	cmp	r3, #57	; 0x39
 80194ce:	d0ee      	beq.n	80194ae <_dtoa_r+0xabe>
 80194d0:	3301      	adds	r3, #1
 80194d2:	e7c9      	b.n	8019468 <_dtoa_r+0xa78>
 80194d4:	9a02      	ldr	r2, [sp, #8]
 80194d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80194d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80194dc:	428a      	cmp	r2, r1
 80194de:	d02a      	beq.n	8019536 <_dtoa_r+0xb46>
 80194e0:	4651      	mov	r1, sl
 80194e2:	2300      	movs	r3, #0
 80194e4:	220a      	movs	r2, #10
 80194e6:	4628      	mov	r0, r5
 80194e8:	f000 fd3c 	bl	8019f64 <__multadd>
 80194ec:	45b0      	cmp	r8, r6
 80194ee:	4682      	mov	sl, r0
 80194f0:	f04f 0300 	mov.w	r3, #0
 80194f4:	f04f 020a 	mov.w	r2, #10
 80194f8:	4641      	mov	r1, r8
 80194fa:	4628      	mov	r0, r5
 80194fc:	d107      	bne.n	801950e <_dtoa_r+0xb1e>
 80194fe:	f000 fd31 	bl	8019f64 <__multadd>
 8019502:	4680      	mov	r8, r0
 8019504:	4606      	mov	r6, r0
 8019506:	9b02      	ldr	r3, [sp, #8]
 8019508:	3301      	adds	r3, #1
 801950a:	9302      	str	r3, [sp, #8]
 801950c:	e777      	b.n	80193fe <_dtoa_r+0xa0e>
 801950e:	f000 fd29 	bl	8019f64 <__multadd>
 8019512:	4631      	mov	r1, r6
 8019514:	4680      	mov	r8, r0
 8019516:	2300      	movs	r3, #0
 8019518:	220a      	movs	r2, #10
 801951a:	4628      	mov	r0, r5
 801951c:	f000 fd22 	bl	8019f64 <__multadd>
 8019520:	4606      	mov	r6, r0
 8019522:	e7f0      	b.n	8019506 <_dtoa_r+0xb16>
 8019524:	f1bb 0f00 	cmp.w	fp, #0
 8019528:	bfcc      	ite	gt
 801952a:	465f      	movgt	r7, fp
 801952c:	2701      	movle	r7, #1
 801952e:	f04f 0800 	mov.w	r8, #0
 8019532:	9a08      	ldr	r2, [sp, #32]
 8019534:	4417      	add	r7, r2
 8019536:	4651      	mov	r1, sl
 8019538:	2201      	movs	r2, #1
 801953a:	4628      	mov	r0, r5
 801953c:	9302      	str	r3, [sp, #8]
 801953e:	f000 ff07 	bl	801a350 <__lshift>
 8019542:	4621      	mov	r1, r4
 8019544:	4682      	mov	sl, r0
 8019546:	f000 ff6f 	bl	801a428 <__mcmp>
 801954a:	2800      	cmp	r0, #0
 801954c:	dcb2      	bgt.n	80194b4 <_dtoa_r+0xac4>
 801954e:	d102      	bne.n	8019556 <_dtoa_r+0xb66>
 8019550:	9b02      	ldr	r3, [sp, #8]
 8019552:	07db      	lsls	r3, r3, #31
 8019554:	d4ae      	bmi.n	80194b4 <_dtoa_r+0xac4>
 8019556:	463b      	mov	r3, r7
 8019558:	461f      	mov	r7, r3
 801955a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801955e:	2a30      	cmp	r2, #48	; 0x30
 8019560:	d0fa      	beq.n	8019558 <_dtoa_r+0xb68>
 8019562:	e6fb      	b.n	801935c <_dtoa_r+0x96c>
 8019564:	9a08      	ldr	r2, [sp, #32]
 8019566:	429a      	cmp	r2, r3
 8019568:	d1a5      	bne.n	80194b6 <_dtoa_r+0xac6>
 801956a:	2331      	movs	r3, #49	; 0x31
 801956c:	f109 0901 	add.w	r9, r9, #1
 8019570:	7013      	strb	r3, [r2, #0]
 8019572:	e6f3      	b.n	801935c <_dtoa_r+0x96c>
 8019574:	4b13      	ldr	r3, [pc, #76]	; (80195c4 <_dtoa_r+0xbd4>)
 8019576:	f7ff baa7 	b.w	8018ac8 <_dtoa_r+0xd8>
 801957a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801957c:	2b00      	cmp	r3, #0
 801957e:	f47f aa80 	bne.w	8018a82 <_dtoa_r+0x92>
 8019582:	4b11      	ldr	r3, [pc, #68]	; (80195c8 <_dtoa_r+0xbd8>)
 8019584:	f7ff baa0 	b.w	8018ac8 <_dtoa_r+0xd8>
 8019588:	f1bb 0f00 	cmp.w	fp, #0
 801958c:	dc03      	bgt.n	8019596 <_dtoa_r+0xba6>
 801958e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019590:	2b02      	cmp	r3, #2
 8019592:	f73f aecc 	bgt.w	801932e <_dtoa_r+0x93e>
 8019596:	9f08      	ldr	r7, [sp, #32]
 8019598:	4621      	mov	r1, r4
 801959a:	4650      	mov	r0, sl
 801959c:	f7ff f998 	bl	80188d0 <quorem>
 80195a0:	9a08      	ldr	r2, [sp, #32]
 80195a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80195a6:	f807 3b01 	strb.w	r3, [r7], #1
 80195aa:	1aba      	subs	r2, r7, r2
 80195ac:	4593      	cmp	fp, r2
 80195ae:	ddb9      	ble.n	8019524 <_dtoa_r+0xb34>
 80195b0:	4651      	mov	r1, sl
 80195b2:	2300      	movs	r3, #0
 80195b4:	220a      	movs	r2, #10
 80195b6:	4628      	mov	r0, r5
 80195b8:	f000 fcd4 	bl	8019f64 <__multadd>
 80195bc:	4682      	mov	sl, r0
 80195be:	e7eb      	b.n	8019598 <_dtoa_r+0xba8>
 80195c0:	0801b664 	.word	0x0801b664
 80195c4:	0801b464 	.word	0x0801b464
 80195c8:	0801b5e1 	.word	0x0801b5e1

080195cc <__sflush_r>:
 80195cc:	898a      	ldrh	r2, [r1, #12]
 80195ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195d2:	4605      	mov	r5, r0
 80195d4:	0710      	lsls	r0, r2, #28
 80195d6:	460c      	mov	r4, r1
 80195d8:	d458      	bmi.n	801968c <__sflush_r+0xc0>
 80195da:	684b      	ldr	r3, [r1, #4]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	dc05      	bgt.n	80195ec <__sflush_r+0x20>
 80195e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	dc02      	bgt.n	80195ec <__sflush_r+0x20>
 80195e6:	2000      	movs	r0, #0
 80195e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195ee:	2e00      	cmp	r6, #0
 80195f0:	d0f9      	beq.n	80195e6 <__sflush_r+0x1a>
 80195f2:	2300      	movs	r3, #0
 80195f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80195f8:	682f      	ldr	r7, [r5, #0]
 80195fa:	602b      	str	r3, [r5, #0]
 80195fc:	d032      	beq.n	8019664 <__sflush_r+0x98>
 80195fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019600:	89a3      	ldrh	r3, [r4, #12]
 8019602:	075a      	lsls	r2, r3, #29
 8019604:	d505      	bpl.n	8019612 <__sflush_r+0x46>
 8019606:	6863      	ldr	r3, [r4, #4]
 8019608:	1ac0      	subs	r0, r0, r3
 801960a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801960c:	b10b      	cbz	r3, 8019612 <__sflush_r+0x46>
 801960e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019610:	1ac0      	subs	r0, r0, r3
 8019612:	2300      	movs	r3, #0
 8019614:	4602      	mov	r2, r0
 8019616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019618:	4628      	mov	r0, r5
 801961a:	6a21      	ldr	r1, [r4, #32]
 801961c:	47b0      	blx	r6
 801961e:	1c43      	adds	r3, r0, #1
 8019620:	89a3      	ldrh	r3, [r4, #12]
 8019622:	d106      	bne.n	8019632 <__sflush_r+0x66>
 8019624:	6829      	ldr	r1, [r5, #0]
 8019626:	291d      	cmp	r1, #29
 8019628:	d82c      	bhi.n	8019684 <__sflush_r+0xb8>
 801962a:	4a2a      	ldr	r2, [pc, #168]	; (80196d4 <__sflush_r+0x108>)
 801962c:	40ca      	lsrs	r2, r1
 801962e:	07d6      	lsls	r6, r2, #31
 8019630:	d528      	bpl.n	8019684 <__sflush_r+0xb8>
 8019632:	2200      	movs	r2, #0
 8019634:	6062      	str	r2, [r4, #4]
 8019636:	6922      	ldr	r2, [r4, #16]
 8019638:	04d9      	lsls	r1, r3, #19
 801963a:	6022      	str	r2, [r4, #0]
 801963c:	d504      	bpl.n	8019648 <__sflush_r+0x7c>
 801963e:	1c42      	adds	r2, r0, #1
 8019640:	d101      	bne.n	8019646 <__sflush_r+0x7a>
 8019642:	682b      	ldr	r3, [r5, #0]
 8019644:	b903      	cbnz	r3, 8019648 <__sflush_r+0x7c>
 8019646:	6560      	str	r0, [r4, #84]	; 0x54
 8019648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801964a:	602f      	str	r7, [r5, #0]
 801964c:	2900      	cmp	r1, #0
 801964e:	d0ca      	beq.n	80195e6 <__sflush_r+0x1a>
 8019650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019654:	4299      	cmp	r1, r3
 8019656:	d002      	beq.n	801965e <__sflush_r+0x92>
 8019658:	4628      	mov	r0, r5
 801965a:	f7fd fa79 	bl	8016b50 <_free_r>
 801965e:	2000      	movs	r0, #0
 8019660:	6360      	str	r0, [r4, #52]	; 0x34
 8019662:	e7c1      	b.n	80195e8 <__sflush_r+0x1c>
 8019664:	6a21      	ldr	r1, [r4, #32]
 8019666:	2301      	movs	r3, #1
 8019668:	4628      	mov	r0, r5
 801966a:	47b0      	blx	r6
 801966c:	1c41      	adds	r1, r0, #1
 801966e:	d1c7      	bne.n	8019600 <__sflush_r+0x34>
 8019670:	682b      	ldr	r3, [r5, #0]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d0c4      	beq.n	8019600 <__sflush_r+0x34>
 8019676:	2b1d      	cmp	r3, #29
 8019678:	d001      	beq.n	801967e <__sflush_r+0xb2>
 801967a:	2b16      	cmp	r3, #22
 801967c:	d101      	bne.n	8019682 <__sflush_r+0xb6>
 801967e:	602f      	str	r7, [r5, #0]
 8019680:	e7b1      	b.n	80195e6 <__sflush_r+0x1a>
 8019682:	89a3      	ldrh	r3, [r4, #12]
 8019684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019688:	81a3      	strh	r3, [r4, #12]
 801968a:	e7ad      	b.n	80195e8 <__sflush_r+0x1c>
 801968c:	690f      	ldr	r7, [r1, #16]
 801968e:	2f00      	cmp	r7, #0
 8019690:	d0a9      	beq.n	80195e6 <__sflush_r+0x1a>
 8019692:	0793      	lsls	r3, r2, #30
 8019694:	bf18      	it	ne
 8019696:	2300      	movne	r3, #0
 8019698:	680e      	ldr	r6, [r1, #0]
 801969a:	bf08      	it	eq
 801969c:	694b      	ldreq	r3, [r1, #20]
 801969e:	eba6 0807 	sub.w	r8, r6, r7
 80196a2:	600f      	str	r7, [r1, #0]
 80196a4:	608b      	str	r3, [r1, #8]
 80196a6:	f1b8 0f00 	cmp.w	r8, #0
 80196aa:	dd9c      	ble.n	80195e6 <__sflush_r+0x1a>
 80196ac:	4643      	mov	r3, r8
 80196ae:	463a      	mov	r2, r7
 80196b0:	4628      	mov	r0, r5
 80196b2:	6a21      	ldr	r1, [r4, #32]
 80196b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80196b6:	47b0      	blx	r6
 80196b8:	2800      	cmp	r0, #0
 80196ba:	dc06      	bgt.n	80196ca <__sflush_r+0xfe>
 80196bc:	89a3      	ldrh	r3, [r4, #12]
 80196be:	f04f 30ff 	mov.w	r0, #4294967295
 80196c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196c6:	81a3      	strh	r3, [r4, #12]
 80196c8:	e78e      	b.n	80195e8 <__sflush_r+0x1c>
 80196ca:	4407      	add	r7, r0
 80196cc:	eba8 0800 	sub.w	r8, r8, r0
 80196d0:	e7e9      	b.n	80196a6 <__sflush_r+0xda>
 80196d2:	bf00      	nop
 80196d4:	20400001 	.word	0x20400001

080196d8 <_fflush_r>:
 80196d8:	b538      	push	{r3, r4, r5, lr}
 80196da:	690b      	ldr	r3, [r1, #16]
 80196dc:	4605      	mov	r5, r0
 80196de:	460c      	mov	r4, r1
 80196e0:	b913      	cbnz	r3, 80196e8 <_fflush_r+0x10>
 80196e2:	2500      	movs	r5, #0
 80196e4:	4628      	mov	r0, r5
 80196e6:	bd38      	pop	{r3, r4, r5, pc}
 80196e8:	b118      	cbz	r0, 80196f2 <_fflush_r+0x1a>
 80196ea:	6983      	ldr	r3, [r0, #24]
 80196ec:	b90b      	cbnz	r3, 80196f2 <_fflush_r+0x1a>
 80196ee:	f7fd f943 	bl	8016978 <__sinit>
 80196f2:	4b14      	ldr	r3, [pc, #80]	; (8019744 <_fflush_r+0x6c>)
 80196f4:	429c      	cmp	r4, r3
 80196f6:	d11b      	bne.n	8019730 <_fflush_r+0x58>
 80196f8:	686c      	ldr	r4, [r5, #4]
 80196fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d0ef      	beq.n	80196e2 <_fflush_r+0xa>
 8019702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019704:	07d0      	lsls	r0, r2, #31
 8019706:	d404      	bmi.n	8019712 <_fflush_r+0x3a>
 8019708:	0599      	lsls	r1, r3, #22
 801970a:	d402      	bmi.n	8019712 <_fflush_r+0x3a>
 801970c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801970e:	f7fd f9f6 	bl	8016afe <__retarget_lock_acquire_recursive>
 8019712:	4628      	mov	r0, r5
 8019714:	4621      	mov	r1, r4
 8019716:	f7ff ff59 	bl	80195cc <__sflush_r>
 801971a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801971c:	4605      	mov	r5, r0
 801971e:	07da      	lsls	r2, r3, #31
 8019720:	d4e0      	bmi.n	80196e4 <_fflush_r+0xc>
 8019722:	89a3      	ldrh	r3, [r4, #12]
 8019724:	059b      	lsls	r3, r3, #22
 8019726:	d4dd      	bmi.n	80196e4 <_fflush_r+0xc>
 8019728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801972a:	f7fd f9e9 	bl	8016b00 <__retarget_lock_release_recursive>
 801972e:	e7d9      	b.n	80196e4 <_fflush_r+0xc>
 8019730:	4b05      	ldr	r3, [pc, #20]	; (8019748 <_fflush_r+0x70>)
 8019732:	429c      	cmp	r4, r3
 8019734:	d101      	bne.n	801973a <_fflush_r+0x62>
 8019736:	68ac      	ldr	r4, [r5, #8]
 8019738:	e7df      	b.n	80196fa <_fflush_r+0x22>
 801973a:	4b04      	ldr	r3, [pc, #16]	; (801974c <_fflush_r+0x74>)
 801973c:	429c      	cmp	r4, r3
 801973e:	bf08      	it	eq
 8019740:	68ec      	ldreq	r4, [r5, #12]
 8019742:	e7da      	b.n	80196fa <_fflush_r+0x22>
 8019744:	0801b410 	.word	0x0801b410
 8019748:	0801b430 	.word	0x0801b430
 801974c:	0801b3f0 	.word	0x0801b3f0

08019750 <rshift>:
 8019750:	6903      	ldr	r3, [r0, #16]
 8019752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019756:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801975a:	f100 0414 	add.w	r4, r0, #20
 801975e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019762:	dd46      	ble.n	80197f2 <rshift+0xa2>
 8019764:	f011 011f 	ands.w	r1, r1, #31
 8019768:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801976c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019770:	d10c      	bne.n	801978c <rshift+0x3c>
 8019772:	4629      	mov	r1, r5
 8019774:	f100 0710 	add.w	r7, r0, #16
 8019778:	42b1      	cmp	r1, r6
 801977a:	d335      	bcc.n	80197e8 <rshift+0x98>
 801977c:	1a9b      	subs	r3, r3, r2
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	1eea      	subs	r2, r5, #3
 8019782:	4296      	cmp	r6, r2
 8019784:	bf38      	it	cc
 8019786:	2300      	movcc	r3, #0
 8019788:	4423      	add	r3, r4
 801978a:	e015      	b.n	80197b8 <rshift+0x68>
 801978c:	46a1      	mov	r9, r4
 801978e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019792:	f1c1 0820 	rsb	r8, r1, #32
 8019796:	40cf      	lsrs	r7, r1
 8019798:	f105 0e04 	add.w	lr, r5, #4
 801979c:	4576      	cmp	r6, lr
 801979e:	46f4      	mov	ip, lr
 80197a0:	d816      	bhi.n	80197d0 <rshift+0x80>
 80197a2:	1a9b      	subs	r3, r3, r2
 80197a4:	009a      	lsls	r2, r3, #2
 80197a6:	3a04      	subs	r2, #4
 80197a8:	3501      	adds	r5, #1
 80197aa:	42ae      	cmp	r6, r5
 80197ac:	bf38      	it	cc
 80197ae:	2200      	movcc	r2, #0
 80197b0:	18a3      	adds	r3, r4, r2
 80197b2:	50a7      	str	r7, [r4, r2]
 80197b4:	b107      	cbz	r7, 80197b8 <rshift+0x68>
 80197b6:	3304      	adds	r3, #4
 80197b8:	42a3      	cmp	r3, r4
 80197ba:	eba3 0204 	sub.w	r2, r3, r4
 80197be:	bf08      	it	eq
 80197c0:	2300      	moveq	r3, #0
 80197c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80197c6:	6102      	str	r2, [r0, #16]
 80197c8:	bf08      	it	eq
 80197ca:	6143      	streq	r3, [r0, #20]
 80197cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197d0:	f8dc c000 	ldr.w	ip, [ip]
 80197d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80197d8:	ea4c 0707 	orr.w	r7, ip, r7
 80197dc:	f849 7b04 	str.w	r7, [r9], #4
 80197e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80197e4:	40cf      	lsrs	r7, r1
 80197e6:	e7d9      	b.n	801979c <rshift+0x4c>
 80197e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80197ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80197f0:	e7c2      	b.n	8019778 <rshift+0x28>
 80197f2:	4623      	mov	r3, r4
 80197f4:	e7e0      	b.n	80197b8 <rshift+0x68>

080197f6 <__hexdig_fun>:
 80197f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80197fa:	2b09      	cmp	r3, #9
 80197fc:	d802      	bhi.n	8019804 <__hexdig_fun+0xe>
 80197fe:	3820      	subs	r0, #32
 8019800:	b2c0      	uxtb	r0, r0
 8019802:	4770      	bx	lr
 8019804:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019808:	2b05      	cmp	r3, #5
 801980a:	d801      	bhi.n	8019810 <__hexdig_fun+0x1a>
 801980c:	3847      	subs	r0, #71	; 0x47
 801980e:	e7f7      	b.n	8019800 <__hexdig_fun+0xa>
 8019810:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019814:	2b05      	cmp	r3, #5
 8019816:	d801      	bhi.n	801981c <__hexdig_fun+0x26>
 8019818:	3827      	subs	r0, #39	; 0x27
 801981a:	e7f1      	b.n	8019800 <__hexdig_fun+0xa>
 801981c:	2000      	movs	r0, #0
 801981e:	4770      	bx	lr

08019820 <__gethex>:
 8019820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	b08b      	sub	sp, #44	; 0x2c
 8019826:	9306      	str	r3, [sp, #24]
 8019828:	4bb9      	ldr	r3, [pc, #740]	; (8019b10 <__gethex+0x2f0>)
 801982a:	9002      	str	r0, [sp, #8]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	468b      	mov	fp, r1
 8019830:	4618      	mov	r0, r3
 8019832:	4690      	mov	r8, r2
 8019834:	9303      	str	r3, [sp, #12]
 8019836:	f7e6 fcd5 	bl	80001e4 <strlen>
 801983a:	4682      	mov	sl, r0
 801983c:	9b03      	ldr	r3, [sp, #12]
 801983e:	f8db 2000 	ldr.w	r2, [fp]
 8019842:	4403      	add	r3, r0
 8019844:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019848:	9307      	str	r3, [sp, #28]
 801984a:	1c93      	adds	r3, r2, #2
 801984c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019850:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019854:	32fe      	adds	r2, #254	; 0xfe
 8019856:	18d1      	adds	r1, r2, r3
 8019858:	461f      	mov	r7, r3
 801985a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801985e:	9101      	str	r1, [sp, #4]
 8019860:	2830      	cmp	r0, #48	; 0x30
 8019862:	d0f8      	beq.n	8019856 <__gethex+0x36>
 8019864:	f7ff ffc7 	bl	80197f6 <__hexdig_fun>
 8019868:	4604      	mov	r4, r0
 801986a:	2800      	cmp	r0, #0
 801986c:	d13a      	bne.n	80198e4 <__gethex+0xc4>
 801986e:	4652      	mov	r2, sl
 8019870:	4638      	mov	r0, r7
 8019872:	9903      	ldr	r1, [sp, #12]
 8019874:	f001 f94e 	bl	801ab14 <strncmp>
 8019878:	4605      	mov	r5, r0
 801987a:	2800      	cmp	r0, #0
 801987c:	d166      	bne.n	801994c <__gethex+0x12c>
 801987e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019882:	eb07 060a 	add.w	r6, r7, sl
 8019886:	f7ff ffb6 	bl	80197f6 <__hexdig_fun>
 801988a:	2800      	cmp	r0, #0
 801988c:	d060      	beq.n	8019950 <__gethex+0x130>
 801988e:	4633      	mov	r3, r6
 8019890:	7818      	ldrb	r0, [r3, #0]
 8019892:	461f      	mov	r7, r3
 8019894:	2830      	cmp	r0, #48	; 0x30
 8019896:	f103 0301 	add.w	r3, r3, #1
 801989a:	d0f9      	beq.n	8019890 <__gethex+0x70>
 801989c:	f7ff ffab 	bl	80197f6 <__hexdig_fun>
 80198a0:	2301      	movs	r3, #1
 80198a2:	fab0 f480 	clz	r4, r0
 80198a6:	4635      	mov	r5, r6
 80198a8:	0964      	lsrs	r4, r4, #5
 80198aa:	9301      	str	r3, [sp, #4]
 80198ac:	463a      	mov	r2, r7
 80198ae:	4616      	mov	r6, r2
 80198b0:	7830      	ldrb	r0, [r6, #0]
 80198b2:	3201      	adds	r2, #1
 80198b4:	f7ff ff9f 	bl	80197f6 <__hexdig_fun>
 80198b8:	2800      	cmp	r0, #0
 80198ba:	d1f8      	bne.n	80198ae <__gethex+0x8e>
 80198bc:	4652      	mov	r2, sl
 80198be:	4630      	mov	r0, r6
 80198c0:	9903      	ldr	r1, [sp, #12]
 80198c2:	f001 f927 	bl	801ab14 <strncmp>
 80198c6:	b980      	cbnz	r0, 80198ea <__gethex+0xca>
 80198c8:	b94d      	cbnz	r5, 80198de <__gethex+0xbe>
 80198ca:	eb06 050a 	add.w	r5, r6, sl
 80198ce:	462a      	mov	r2, r5
 80198d0:	4616      	mov	r6, r2
 80198d2:	7830      	ldrb	r0, [r6, #0]
 80198d4:	3201      	adds	r2, #1
 80198d6:	f7ff ff8e 	bl	80197f6 <__hexdig_fun>
 80198da:	2800      	cmp	r0, #0
 80198dc:	d1f8      	bne.n	80198d0 <__gethex+0xb0>
 80198de:	1bad      	subs	r5, r5, r6
 80198e0:	00ad      	lsls	r5, r5, #2
 80198e2:	e004      	b.n	80198ee <__gethex+0xce>
 80198e4:	2400      	movs	r4, #0
 80198e6:	4625      	mov	r5, r4
 80198e8:	e7e0      	b.n	80198ac <__gethex+0x8c>
 80198ea:	2d00      	cmp	r5, #0
 80198ec:	d1f7      	bne.n	80198de <__gethex+0xbe>
 80198ee:	7833      	ldrb	r3, [r6, #0]
 80198f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80198f4:	2b50      	cmp	r3, #80	; 0x50
 80198f6:	d139      	bne.n	801996c <__gethex+0x14c>
 80198f8:	7873      	ldrb	r3, [r6, #1]
 80198fa:	2b2b      	cmp	r3, #43	; 0x2b
 80198fc:	d02a      	beq.n	8019954 <__gethex+0x134>
 80198fe:	2b2d      	cmp	r3, #45	; 0x2d
 8019900:	d02c      	beq.n	801995c <__gethex+0x13c>
 8019902:	f04f 0900 	mov.w	r9, #0
 8019906:	1c71      	adds	r1, r6, #1
 8019908:	7808      	ldrb	r0, [r1, #0]
 801990a:	f7ff ff74 	bl	80197f6 <__hexdig_fun>
 801990e:	1e43      	subs	r3, r0, #1
 8019910:	b2db      	uxtb	r3, r3
 8019912:	2b18      	cmp	r3, #24
 8019914:	d82a      	bhi.n	801996c <__gethex+0x14c>
 8019916:	f1a0 0210 	sub.w	r2, r0, #16
 801991a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801991e:	f7ff ff6a 	bl	80197f6 <__hexdig_fun>
 8019922:	1e43      	subs	r3, r0, #1
 8019924:	b2db      	uxtb	r3, r3
 8019926:	2b18      	cmp	r3, #24
 8019928:	d91b      	bls.n	8019962 <__gethex+0x142>
 801992a:	f1b9 0f00 	cmp.w	r9, #0
 801992e:	d000      	beq.n	8019932 <__gethex+0x112>
 8019930:	4252      	negs	r2, r2
 8019932:	4415      	add	r5, r2
 8019934:	f8cb 1000 	str.w	r1, [fp]
 8019938:	b1d4      	cbz	r4, 8019970 <__gethex+0x150>
 801993a:	9b01      	ldr	r3, [sp, #4]
 801993c:	2b00      	cmp	r3, #0
 801993e:	bf14      	ite	ne
 8019940:	2700      	movne	r7, #0
 8019942:	2706      	moveq	r7, #6
 8019944:	4638      	mov	r0, r7
 8019946:	b00b      	add	sp, #44	; 0x2c
 8019948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801994c:	463e      	mov	r6, r7
 801994e:	4625      	mov	r5, r4
 8019950:	2401      	movs	r4, #1
 8019952:	e7cc      	b.n	80198ee <__gethex+0xce>
 8019954:	f04f 0900 	mov.w	r9, #0
 8019958:	1cb1      	adds	r1, r6, #2
 801995a:	e7d5      	b.n	8019908 <__gethex+0xe8>
 801995c:	f04f 0901 	mov.w	r9, #1
 8019960:	e7fa      	b.n	8019958 <__gethex+0x138>
 8019962:	230a      	movs	r3, #10
 8019964:	fb03 0202 	mla	r2, r3, r2, r0
 8019968:	3a10      	subs	r2, #16
 801996a:	e7d6      	b.n	801991a <__gethex+0xfa>
 801996c:	4631      	mov	r1, r6
 801996e:	e7e1      	b.n	8019934 <__gethex+0x114>
 8019970:	4621      	mov	r1, r4
 8019972:	1bf3      	subs	r3, r6, r7
 8019974:	3b01      	subs	r3, #1
 8019976:	2b07      	cmp	r3, #7
 8019978:	dc0a      	bgt.n	8019990 <__gethex+0x170>
 801997a:	9802      	ldr	r0, [sp, #8]
 801997c:	f000 fa90 	bl	8019ea0 <_Balloc>
 8019980:	4604      	mov	r4, r0
 8019982:	b940      	cbnz	r0, 8019996 <__gethex+0x176>
 8019984:	4602      	mov	r2, r0
 8019986:	21de      	movs	r1, #222	; 0xde
 8019988:	4b62      	ldr	r3, [pc, #392]	; (8019b14 <__gethex+0x2f4>)
 801998a:	4863      	ldr	r0, [pc, #396]	; (8019b18 <__gethex+0x2f8>)
 801998c:	f001 f8e2 	bl	801ab54 <__assert_func>
 8019990:	3101      	adds	r1, #1
 8019992:	105b      	asrs	r3, r3, #1
 8019994:	e7ef      	b.n	8019976 <__gethex+0x156>
 8019996:	f04f 0b00 	mov.w	fp, #0
 801999a:	f100 0914 	add.w	r9, r0, #20
 801999e:	f1ca 0301 	rsb	r3, sl, #1
 80199a2:	f8cd 9010 	str.w	r9, [sp, #16]
 80199a6:	f8cd b004 	str.w	fp, [sp, #4]
 80199aa:	9308      	str	r3, [sp, #32]
 80199ac:	42b7      	cmp	r7, r6
 80199ae:	d33f      	bcc.n	8019a30 <__gethex+0x210>
 80199b0:	9f04      	ldr	r7, [sp, #16]
 80199b2:	9b01      	ldr	r3, [sp, #4]
 80199b4:	f847 3b04 	str.w	r3, [r7], #4
 80199b8:	eba7 0709 	sub.w	r7, r7, r9
 80199bc:	10bf      	asrs	r7, r7, #2
 80199be:	6127      	str	r7, [r4, #16]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f000 fb63 	bl	801a08c <__hi0bits>
 80199c6:	017f      	lsls	r7, r7, #5
 80199c8:	f8d8 6000 	ldr.w	r6, [r8]
 80199cc:	1a3f      	subs	r7, r7, r0
 80199ce:	42b7      	cmp	r7, r6
 80199d0:	dd62      	ble.n	8019a98 <__gethex+0x278>
 80199d2:	1bbf      	subs	r7, r7, r6
 80199d4:	4639      	mov	r1, r7
 80199d6:	4620      	mov	r0, r4
 80199d8:	f000 fef9 	bl	801a7ce <__any_on>
 80199dc:	4682      	mov	sl, r0
 80199de:	b1a8      	cbz	r0, 8019a0c <__gethex+0x1ec>
 80199e0:	f04f 0a01 	mov.w	sl, #1
 80199e4:	1e7b      	subs	r3, r7, #1
 80199e6:	1159      	asrs	r1, r3, #5
 80199e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80199ec:	f003 021f 	and.w	r2, r3, #31
 80199f0:	fa0a f202 	lsl.w	r2, sl, r2
 80199f4:	420a      	tst	r2, r1
 80199f6:	d009      	beq.n	8019a0c <__gethex+0x1ec>
 80199f8:	4553      	cmp	r3, sl
 80199fa:	dd05      	ble.n	8019a08 <__gethex+0x1e8>
 80199fc:	4620      	mov	r0, r4
 80199fe:	1eb9      	subs	r1, r7, #2
 8019a00:	f000 fee5 	bl	801a7ce <__any_on>
 8019a04:	2800      	cmp	r0, #0
 8019a06:	d144      	bne.n	8019a92 <__gethex+0x272>
 8019a08:	f04f 0a02 	mov.w	sl, #2
 8019a0c:	4639      	mov	r1, r7
 8019a0e:	4620      	mov	r0, r4
 8019a10:	f7ff fe9e 	bl	8019750 <rshift>
 8019a14:	443d      	add	r5, r7
 8019a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019a1a:	42ab      	cmp	r3, r5
 8019a1c:	da4a      	bge.n	8019ab4 <__gethex+0x294>
 8019a1e:	4621      	mov	r1, r4
 8019a20:	9802      	ldr	r0, [sp, #8]
 8019a22:	f000 fa7d 	bl	8019f20 <_Bfree>
 8019a26:	2300      	movs	r3, #0
 8019a28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a2a:	27a3      	movs	r7, #163	; 0xa3
 8019a2c:	6013      	str	r3, [r2, #0]
 8019a2e:	e789      	b.n	8019944 <__gethex+0x124>
 8019a30:	1e73      	subs	r3, r6, #1
 8019a32:	9a07      	ldr	r2, [sp, #28]
 8019a34:	9305      	str	r3, [sp, #20]
 8019a36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a3a:	4293      	cmp	r3, r2
 8019a3c:	d019      	beq.n	8019a72 <__gethex+0x252>
 8019a3e:	f1bb 0f20 	cmp.w	fp, #32
 8019a42:	d107      	bne.n	8019a54 <__gethex+0x234>
 8019a44:	9b04      	ldr	r3, [sp, #16]
 8019a46:	9a01      	ldr	r2, [sp, #4]
 8019a48:	f843 2b04 	str.w	r2, [r3], #4
 8019a4c:	9304      	str	r3, [sp, #16]
 8019a4e:	2300      	movs	r3, #0
 8019a50:	469b      	mov	fp, r3
 8019a52:	9301      	str	r3, [sp, #4]
 8019a54:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019a58:	f7ff fecd 	bl	80197f6 <__hexdig_fun>
 8019a5c:	9b01      	ldr	r3, [sp, #4]
 8019a5e:	f000 000f 	and.w	r0, r0, #15
 8019a62:	fa00 f00b 	lsl.w	r0, r0, fp
 8019a66:	4303      	orrs	r3, r0
 8019a68:	9301      	str	r3, [sp, #4]
 8019a6a:	f10b 0b04 	add.w	fp, fp, #4
 8019a6e:	9b05      	ldr	r3, [sp, #20]
 8019a70:	e00d      	b.n	8019a8e <__gethex+0x26e>
 8019a72:	9b05      	ldr	r3, [sp, #20]
 8019a74:	9a08      	ldr	r2, [sp, #32]
 8019a76:	4413      	add	r3, r2
 8019a78:	42bb      	cmp	r3, r7
 8019a7a:	d3e0      	bcc.n	8019a3e <__gethex+0x21e>
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	4652      	mov	r2, sl
 8019a80:	9903      	ldr	r1, [sp, #12]
 8019a82:	9309      	str	r3, [sp, #36]	; 0x24
 8019a84:	f001 f846 	bl	801ab14 <strncmp>
 8019a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	d1d7      	bne.n	8019a3e <__gethex+0x21e>
 8019a8e:	461e      	mov	r6, r3
 8019a90:	e78c      	b.n	80199ac <__gethex+0x18c>
 8019a92:	f04f 0a03 	mov.w	sl, #3
 8019a96:	e7b9      	b.n	8019a0c <__gethex+0x1ec>
 8019a98:	da09      	bge.n	8019aae <__gethex+0x28e>
 8019a9a:	1bf7      	subs	r7, r6, r7
 8019a9c:	4621      	mov	r1, r4
 8019a9e:	463a      	mov	r2, r7
 8019aa0:	9802      	ldr	r0, [sp, #8]
 8019aa2:	f000 fc55 	bl	801a350 <__lshift>
 8019aa6:	4604      	mov	r4, r0
 8019aa8:	1bed      	subs	r5, r5, r7
 8019aaa:	f100 0914 	add.w	r9, r0, #20
 8019aae:	f04f 0a00 	mov.w	sl, #0
 8019ab2:	e7b0      	b.n	8019a16 <__gethex+0x1f6>
 8019ab4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019ab8:	42a8      	cmp	r0, r5
 8019aba:	dd71      	ble.n	8019ba0 <__gethex+0x380>
 8019abc:	1b45      	subs	r5, r0, r5
 8019abe:	42ae      	cmp	r6, r5
 8019ac0:	dc34      	bgt.n	8019b2c <__gethex+0x30c>
 8019ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ac6:	2b02      	cmp	r3, #2
 8019ac8:	d028      	beq.n	8019b1c <__gethex+0x2fc>
 8019aca:	2b03      	cmp	r3, #3
 8019acc:	d02a      	beq.n	8019b24 <__gethex+0x304>
 8019ace:	2b01      	cmp	r3, #1
 8019ad0:	d115      	bne.n	8019afe <__gethex+0x2de>
 8019ad2:	42ae      	cmp	r6, r5
 8019ad4:	d113      	bne.n	8019afe <__gethex+0x2de>
 8019ad6:	2e01      	cmp	r6, #1
 8019ad8:	d10b      	bne.n	8019af2 <__gethex+0x2d2>
 8019ada:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019ade:	9a06      	ldr	r2, [sp, #24]
 8019ae0:	2762      	movs	r7, #98	; 0x62
 8019ae2:	6013      	str	r3, [r2, #0]
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	6123      	str	r3, [r4, #16]
 8019ae8:	f8c9 3000 	str.w	r3, [r9]
 8019aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019aee:	601c      	str	r4, [r3, #0]
 8019af0:	e728      	b.n	8019944 <__gethex+0x124>
 8019af2:	4620      	mov	r0, r4
 8019af4:	1e71      	subs	r1, r6, #1
 8019af6:	f000 fe6a 	bl	801a7ce <__any_on>
 8019afa:	2800      	cmp	r0, #0
 8019afc:	d1ed      	bne.n	8019ada <__gethex+0x2ba>
 8019afe:	4621      	mov	r1, r4
 8019b00:	9802      	ldr	r0, [sp, #8]
 8019b02:	f000 fa0d 	bl	8019f20 <_Bfree>
 8019b06:	2300      	movs	r3, #0
 8019b08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b0a:	2750      	movs	r7, #80	; 0x50
 8019b0c:	6013      	str	r3, [r2, #0]
 8019b0e:	e719      	b.n	8019944 <__gethex+0x124>
 8019b10:	0801b6e0 	.word	0x0801b6e0
 8019b14:	0801b664 	.word	0x0801b664
 8019b18:	0801b675 	.word	0x0801b675
 8019b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d1ed      	bne.n	8019afe <__gethex+0x2de>
 8019b22:	e7da      	b.n	8019ada <__gethex+0x2ba>
 8019b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d1d7      	bne.n	8019ada <__gethex+0x2ba>
 8019b2a:	e7e8      	b.n	8019afe <__gethex+0x2de>
 8019b2c:	1e6f      	subs	r7, r5, #1
 8019b2e:	f1ba 0f00 	cmp.w	sl, #0
 8019b32:	d132      	bne.n	8019b9a <__gethex+0x37a>
 8019b34:	b127      	cbz	r7, 8019b40 <__gethex+0x320>
 8019b36:	4639      	mov	r1, r7
 8019b38:	4620      	mov	r0, r4
 8019b3a:	f000 fe48 	bl	801a7ce <__any_on>
 8019b3e:	4682      	mov	sl, r0
 8019b40:	2101      	movs	r1, #1
 8019b42:	117b      	asrs	r3, r7, #5
 8019b44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019b48:	f007 071f 	and.w	r7, r7, #31
 8019b4c:	fa01 f707 	lsl.w	r7, r1, r7
 8019b50:	421f      	tst	r7, r3
 8019b52:	f04f 0702 	mov.w	r7, #2
 8019b56:	4629      	mov	r1, r5
 8019b58:	4620      	mov	r0, r4
 8019b5a:	bf18      	it	ne
 8019b5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8019b60:	1b76      	subs	r6, r6, r5
 8019b62:	f7ff fdf5 	bl	8019750 <rshift>
 8019b66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019b6a:	f1ba 0f00 	cmp.w	sl, #0
 8019b6e:	d048      	beq.n	8019c02 <__gethex+0x3e2>
 8019b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019b74:	2b02      	cmp	r3, #2
 8019b76:	d015      	beq.n	8019ba4 <__gethex+0x384>
 8019b78:	2b03      	cmp	r3, #3
 8019b7a:	d017      	beq.n	8019bac <__gethex+0x38c>
 8019b7c:	2b01      	cmp	r3, #1
 8019b7e:	d109      	bne.n	8019b94 <__gethex+0x374>
 8019b80:	f01a 0f02 	tst.w	sl, #2
 8019b84:	d006      	beq.n	8019b94 <__gethex+0x374>
 8019b86:	f8d9 0000 	ldr.w	r0, [r9]
 8019b8a:	ea4a 0a00 	orr.w	sl, sl, r0
 8019b8e:	f01a 0f01 	tst.w	sl, #1
 8019b92:	d10e      	bne.n	8019bb2 <__gethex+0x392>
 8019b94:	f047 0710 	orr.w	r7, r7, #16
 8019b98:	e033      	b.n	8019c02 <__gethex+0x3e2>
 8019b9a:	f04f 0a01 	mov.w	sl, #1
 8019b9e:	e7cf      	b.n	8019b40 <__gethex+0x320>
 8019ba0:	2701      	movs	r7, #1
 8019ba2:	e7e2      	b.n	8019b6a <__gethex+0x34a>
 8019ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ba6:	f1c3 0301 	rsb	r3, r3, #1
 8019baa:	9315      	str	r3, [sp, #84]	; 0x54
 8019bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d0f0      	beq.n	8019b94 <__gethex+0x374>
 8019bb2:	f04f 0c00 	mov.w	ip, #0
 8019bb6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019bba:	f104 0314 	add.w	r3, r4, #20
 8019bbe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019bc2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019bd0:	d01c      	beq.n	8019c0c <__gethex+0x3ec>
 8019bd2:	3201      	adds	r2, #1
 8019bd4:	6002      	str	r2, [r0, #0]
 8019bd6:	2f02      	cmp	r7, #2
 8019bd8:	f104 0314 	add.w	r3, r4, #20
 8019bdc:	d13d      	bne.n	8019c5a <__gethex+0x43a>
 8019bde:	f8d8 2000 	ldr.w	r2, [r8]
 8019be2:	3a01      	subs	r2, #1
 8019be4:	42b2      	cmp	r2, r6
 8019be6:	d10a      	bne.n	8019bfe <__gethex+0x3de>
 8019be8:	2201      	movs	r2, #1
 8019bea:	1171      	asrs	r1, r6, #5
 8019bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019bf0:	f006 061f 	and.w	r6, r6, #31
 8019bf4:	fa02 f606 	lsl.w	r6, r2, r6
 8019bf8:	421e      	tst	r6, r3
 8019bfa:	bf18      	it	ne
 8019bfc:	4617      	movne	r7, r2
 8019bfe:	f047 0720 	orr.w	r7, r7, #32
 8019c02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019c04:	601c      	str	r4, [r3, #0]
 8019c06:	9b06      	ldr	r3, [sp, #24]
 8019c08:	601d      	str	r5, [r3, #0]
 8019c0a:	e69b      	b.n	8019944 <__gethex+0x124>
 8019c0c:	4299      	cmp	r1, r3
 8019c0e:	f843 cc04 	str.w	ip, [r3, #-4]
 8019c12:	d8d8      	bhi.n	8019bc6 <__gethex+0x3a6>
 8019c14:	68a3      	ldr	r3, [r4, #8]
 8019c16:	459b      	cmp	fp, r3
 8019c18:	db17      	blt.n	8019c4a <__gethex+0x42a>
 8019c1a:	6861      	ldr	r1, [r4, #4]
 8019c1c:	9802      	ldr	r0, [sp, #8]
 8019c1e:	3101      	adds	r1, #1
 8019c20:	f000 f93e 	bl	8019ea0 <_Balloc>
 8019c24:	4681      	mov	r9, r0
 8019c26:	b918      	cbnz	r0, 8019c30 <__gethex+0x410>
 8019c28:	4602      	mov	r2, r0
 8019c2a:	2184      	movs	r1, #132	; 0x84
 8019c2c:	4b19      	ldr	r3, [pc, #100]	; (8019c94 <__gethex+0x474>)
 8019c2e:	e6ac      	b.n	801998a <__gethex+0x16a>
 8019c30:	6922      	ldr	r2, [r4, #16]
 8019c32:	f104 010c 	add.w	r1, r4, #12
 8019c36:	3202      	adds	r2, #2
 8019c38:	0092      	lsls	r2, r2, #2
 8019c3a:	300c      	adds	r0, #12
 8019c3c:	f7fc ff72 	bl	8016b24 <memcpy>
 8019c40:	4621      	mov	r1, r4
 8019c42:	9802      	ldr	r0, [sp, #8]
 8019c44:	f000 f96c 	bl	8019f20 <_Bfree>
 8019c48:	464c      	mov	r4, r9
 8019c4a:	6923      	ldr	r3, [r4, #16]
 8019c4c:	1c5a      	adds	r2, r3, #1
 8019c4e:	6122      	str	r2, [r4, #16]
 8019c50:	2201      	movs	r2, #1
 8019c52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019c56:	615a      	str	r2, [r3, #20]
 8019c58:	e7bd      	b.n	8019bd6 <__gethex+0x3b6>
 8019c5a:	6922      	ldr	r2, [r4, #16]
 8019c5c:	455a      	cmp	r2, fp
 8019c5e:	dd0b      	ble.n	8019c78 <__gethex+0x458>
 8019c60:	2101      	movs	r1, #1
 8019c62:	4620      	mov	r0, r4
 8019c64:	f7ff fd74 	bl	8019750 <rshift>
 8019c68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c6c:	3501      	adds	r5, #1
 8019c6e:	42ab      	cmp	r3, r5
 8019c70:	f6ff aed5 	blt.w	8019a1e <__gethex+0x1fe>
 8019c74:	2701      	movs	r7, #1
 8019c76:	e7c2      	b.n	8019bfe <__gethex+0x3de>
 8019c78:	f016 061f 	ands.w	r6, r6, #31
 8019c7c:	d0fa      	beq.n	8019c74 <__gethex+0x454>
 8019c7e:	449a      	add	sl, r3
 8019c80:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019c84:	f000 fa02 	bl	801a08c <__hi0bits>
 8019c88:	f1c6 0620 	rsb	r6, r6, #32
 8019c8c:	42b0      	cmp	r0, r6
 8019c8e:	dbe7      	blt.n	8019c60 <__gethex+0x440>
 8019c90:	e7f0      	b.n	8019c74 <__gethex+0x454>
 8019c92:	bf00      	nop
 8019c94:	0801b664 	.word	0x0801b664

08019c98 <L_shift>:
 8019c98:	f1c2 0208 	rsb	r2, r2, #8
 8019c9c:	0092      	lsls	r2, r2, #2
 8019c9e:	b570      	push	{r4, r5, r6, lr}
 8019ca0:	f1c2 0620 	rsb	r6, r2, #32
 8019ca4:	6843      	ldr	r3, [r0, #4]
 8019ca6:	6804      	ldr	r4, [r0, #0]
 8019ca8:	fa03 f506 	lsl.w	r5, r3, r6
 8019cac:	432c      	orrs	r4, r5
 8019cae:	40d3      	lsrs	r3, r2
 8019cb0:	6004      	str	r4, [r0, #0]
 8019cb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8019cb6:	4288      	cmp	r0, r1
 8019cb8:	d3f4      	bcc.n	8019ca4 <L_shift+0xc>
 8019cba:	bd70      	pop	{r4, r5, r6, pc}

08019cbc <__match>:
 8019cbc:	b530      	push	{r4, r5, lr}
 8019cbe:	6803      	ldr	r3, [r0, #0]
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019cc6:	b914      	cbnz	r4, 8019cce <__match+0x12>
 8019cc8:	6003      	str	r3, [r0, #0]
 8019cca:	2001      	movs	r0, #1
 8019ccc:	bd30      	pop	{r4, r5, pc}
 8019cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019cd6:	2d19      	cmp	r5, #25
 8019cd8:	bf98      	it	ls
 8019cda:	3220      	addls	r2, #32
 8019cdc:	42a2      	cmp	r2, r4
 8019cde:	d0f0      	beq.n	8019cc2 <__match+0x6>
 8019ce0:	2000      	movs	r0, #0
 8019ce2:	e7f3      	b.n	8019ccc <__match+0x10>

08019ce4 <__hexnan>:
 8019ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce8:	2500      	movs	r5, #0
 8019cea:	680b      	ldr	r3, [r1, #0]
 8019cec:	4682      	mov	sl, r0
 8019cee:	115e      	asrs	r6, r3, #5
 8019cf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019cf4:	f013 031f 	ands.w	r3, r3, #31
 8019cf8:	bf18      	it	ne
 8019cfa:	3604      	addne	r6, #4
 8019cfc:	1f37      	subs	r7, r6, #4
 8019cfe:	4690      	mov	r8, r2
 8019d00:	46b9      	mov	r9, r7
 8019d02:	463c      	mov	r4, r7
 8019d04:	46ab      	mov	fp, r5
 8019d06:	b087      	sub	sp, #28
 8019d08:	6801      	ldr	r1, [r0, #0]
 8019d0a:	9301      	str	r3, [sp, #4]
 8019d0c:	f846 5c04 	str.w	r5, [r6, #-4]
 8019d10:	9502      	str	r5, [sp, #8]
 8019d12:	784a      	ldrb	r2, [r1, #1]
 8019d14:	1c4b      	adds	r3, r1, #1
 8019d16:	9303      	str	r3, [sp, #12]
 8019d18:	b342      	cbz	r2, 8019d6c <__hexnan+0x88>
 8019d1a:	4610      	mov	r0, r2
 8019d1c:	9105      	str	r1, [sp, #20]
 8019d1e:	9204      	str	r2, [sp, #16]
 8019d20:	f7ff fd69 	bl	80197f6 <__hexdig_fun>
 8019d24:	2800      	cmp	r0, #0
 8019d26:	d14f      	bne.n	8019dc8 <__hexnan+0xe4>
 8019d28:	9a04      	ldr	r2, [sp, #16]
 8019d2a:	9905      	ldr	r1, [sp, #20]
 8019d2c:	2a20      	cmp	r2, #32
 8019d2e:	d818      	bhi.n	8019d62 <__hexnan+0x7e>
 8019d30:	9b02      	ldr	r3, [sp, #8]
 8019d32:	459b      	cmp	fp, r3
 8019d34:	dd13      	ble.n	8019d5e <__hexnan+0x7a>
 8019d36:	454c      	cmp	r4, r9
 8019d38:	d206      	bcs.n	8019d48 <__hexnan+0x64>
 8019d3a:	2d07      	cmp	r5, #7
 8019d3c:	dc04      	bgt.n	8019d48 <__hexnan+0x64>
 8019d3e:	462a      	mov	r2, r5
 8019d40:	4649      	mov	r1, r9
 8019d42:	4620      	mov	r0, r4
 8019d44:	f7ff ffa8 	bl	8019c98 <L_shift>
 8019d48:	4544      	cmp	r4, r8
 8019d4a:	d950      	bls.n	8019dee <__hexnan+0x10a>
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	f1a4 0904 	sub.w	r9, r4, #4
 8019d52:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d56:	461d      	mov	r5, r3
 8019d58:	464c      	mov	r4, r9
 8019d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8019d5e:	9903      	ldr	r1, [sp, #12]
 8019d60:	e7d7      	b.n	8019d12 <__hexnan+0x2e>
 8019d62:	2a29      	cmp	r2, #41	; 0x29
 8019d64:	d156      	bne.n	8019e14 <__hexnan+0x130>
 8019d66:	3102      	adds	r1, #2
 8019d68:	f8ca 1000 	str.w	r1, [sl]
 8019d6c:	f1bb 0f00 	cmp.w	fp, #0
 8019d70:	d050      	beq.n	8019e14 <__hexnan+0x130>
 8019d72:	454c      	cmp	r4, r9
 8019d74:	d206      	bcs.n	8019d84 <__hexnan+0xa0>
 8019d76:	2d07      	cmp	r5, #7
 8019d78:	dc04      	bgt.n	8019d84 <__hexnan+0xa0>
 8019d7a:	462a      	mov	r2, r5
 8019d7c:	4649      	mov	r1, r9
 8019d7e:	4620      	mov	r0, r4
 8019d80:	f7ff ff8a 	bl	8019c98 <L_shift>
 8019d84:	4544      	cmp	r4, r8
 8019d86:	d934      	bls.n	8019df2 <__hexnan+0x10e>
 8019d88:	4623      	mov	r3, r4
 8019d8a:	f1a8 0204 	sub.w	r2, r8, #4
 8019d8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019d92:	429f      	cmp	r7, r3
 8019d94:	f842 1f04 	str.w	r1, [r2, #4]!
 8019d98:	d2f9      	bcs.n	8019d8e <__hexnan+0xaa>
 8019d9a:	1b3b      	subs	r3, r7, r4
 8019d9c:	f023 0303 	bic.w	r3, r3, #3
 8019da0:	3304      	adds	r3, #4
 8019da2:	3401      	adds	r4, #1
 8019da4:	3e03      	subs	r6, #3
 8019da6:	42b4      	cmp	r4, r6
 8019da8:	bf88      	it	hi
 8019daa:	2304      	movhi	r3, #4
 8019dac:	2200      	movs	r2, #0
 8019dae:	4443      	add	r3, r8
 8019db0:	f843 2b04 	str.w	r2, [r3], #4
 8019db4:	429f      	cmp	r7, r3
 8019db6:	d2fb      	bcs.n	8019db0 <__hexnan+0xcc>
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	b91b      	cbnz	r3, 8019dc4 <__hexnan+0xe0>
 8019dbc:	4547      	cmp	r7, r8
 8019dbe:	d127      	bne.n	8019e10 <__hexnan+0x12c>
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	603b      	str	r3, [r7, #0]
 8019dc4:	2005      	movs	r0, #5
 8019dc6:	e026      	b.n	8019e16 <__hexnan+0x132>
 8019dc8:	3501      	adds	r5, #1
 8019dca:	2d08      	cmp	r5, #8
 8019dcc:	f10b 0b01 	add.w	fp, fp, #1
 8019dd0:	dd06      	ble.n	8019de0 <__hexnan+0xfc>
 8019dd2:	4544      	cmp	r4, r8
 8019dd4:	d9c3      	bls.n	8019d5e <__hexnan+0x7a>
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	2501      	movs	r5, #1
 8019dda:	f844 3c04 	str.w	r3, [r4, #-4]
 8019dde:	3c04      	subs	r4, #4
 8019de0:	6822      	ldr	r2, [r4, #0]
 8019de2:	f000 000f 	and.w	r0, r0, #15
 8019de6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019dea:	6022      	str	r2, [r4, #0]
 8019dec:	e7b7      	b.n	8019d5e <__hexnan+0x7a>
 8019dee:	2508      	movs	r5, #8
 8019df0:	e7b5      	b.n	8019d5e <__hexnan+0x7a>
 8019df2:	9b01      	ldr	r3, [sp, #4]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d0df      	beq.n	8019db8 <__hexnan+0xd4>
 8019df8:	f04f 32ff 	mov.w	r2, #4294967295
 8019dfc:	f1c3 0320 	rsb	r3, r3, #32
 8019e00:	fa22 f303 	lsr.w	r3, r2, r3
 8019e04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019e08:	401a      	ands	r2, r3
 8019e0a:	f846 2c04 	str.w	r2, [r6, #-4]
 8019e0e:	e7d3      	b.n	8019db8 <__hexnan+0xd4>
 8019e10:	3f04      	subs	r7, #4
 8019e12:	e7d1      	b.n	8019db8 <__hexnan+0xd4>
 8019e14:	2004      	movs	r0, #4
 8019e16:	b007      	add	sp, #28
 8019e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e1c <_localeconv_r>:
 8019e1c:	4800      	ldr	r0, [pc, #0]	; (8019e20 <_localeconv_r+0x4>)
 8019e1e:	4770      	bx	lr
 8019e20:	200003ec 	.word	0x200003ec

08019e24 <_lseek_r>:
 8019e24:	b538      	push	{r3, r4, r5, lr}
 8019e26:	4604      	mov	r4, r0
 8019e28:	4608      	mov	r0, r1
 8019e2a:	4611      	mov	r1, r2
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	4d05      	ldr	r5, [pc, #20]	; (8019e44 <_lseek_r+0x20>)
 8019e30:	602a      	str	r2, [r5, #0]
 8019e32:	461a      	mov	r2, r3
 8019e34:	f7ec f844 	bl	8005ec0 <_lseek>
 8019e38:	1c43      	adds	r3, r0, #1
 8019e3a:	d102      	bne.n	8019e42 <_lseek_r+0x1e>
 8019e3c:	682b      	ldr	r3, [r5, #0]
 8019e3e:	b103      	cbz	r3, 8019e42 <_lseek_r+0x1e>
 8019e40:	6023      	str	r3, [r4, #0]
 8019e42:	bd38      	pop	{r3, r4, r5, pc}
 8019e44:	2000e6ac 	.word	0x2000e6ac

08019e48 <__ascii_mbtowc>:
 8019e48:	b082      	sub	sp, #8
 8019e4a:	b901      	cbnz	r1, 8019e4e <__ascii_mbtowc+0x6>
 8019e4c:	a901      	add	r1, sp, #4
 8019e4e:	b142      	cbz	r2, 8019e62 <__ascii_mbtowc+0x1a>
 8019e50:	b14b      	cbz	r3, 8019e66 <__ascii_mbtowc+0x1e>
 8019e52:	7813      	ldrb	r3, [r2, #0]
 8019e54:	600b      	str	r3, [r1, #0]
 8019e56:	7812      	ldrb	r2, [r2, #0]
 8019e58:	1e10      	subs	r0, r2, #0
 8019e5a:	bf18      	it	ne
 8019e5c:	2001      	movne	r0, #1
 8019e5e:	b002      	add	sp, #8
 8019e60:	4770      	bx	lr
 8019e62:	4610      	mov	r0, r2
 8019e64:	e7fb      	b.n	8019e5e <__ascii_mbtowc+0x16>
 8019e66:	f06f 0001 	mvn.w	r0, #1
 8019e6a:	e7f8      	b.n	8019e5e <__ascii_mbtowc+0x16>

08019e6c <memchr>:
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	b510      	push	{r4, lr}
 8019e70:	b2c9      	uxtb	r1, r1
 8019e72:	4402      	add	r2, r0
 8019e74:	4293      	cmp	r3, r2
 8019e76:	4618      	mov	r0, r3
 8019e78:	d101      	bne.n	8019e7e <memchr+0x12>
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	e003      	b.n	8019e86 <memchr+0x1a>
 8019e7e:	7804      	ldrb	r4, [r0, #0]
 8019e80:	3301      	adds	r3, #1
 8019e82:	428c      	cmp	r4, r1
 8019e84:	d1f6      	bne.n	8019e74 <memchr+0x8>
 8019e86:	bd10      	pop	{r4, pc}

08019e88 <__malloc_lock>:
 8019e88:	4801      	ldr	r0, [pc, #4]	; (8019e90 <__malloc_lock+0x8>)
 8019e8a:	f7fc be38 	b.w	8016afe <__retarget_lock_acquire_recursive>
 8019e8e:	bf00      	nop
 8019e90:	2000e6a4 	.word	0x2000e6a4

08019e94 <__malloc_unlock>:
 8019e94:	4801      	ldr	r0, [pc, #4]	; (8019e9c <__malloc_unlock+0x8>)
 8019e96:	f7fc be33 	b.w	8016b00 <__retarget_lock_release_recursive>
 8019e9a:	bf00      	nop
 8019e9c:	2000e6a4 	.word	0x2000e6a4

08019ea0 <_Balloc>:
 8019ea0:	b570      	push	{r4, r5, r6, lr}
 8019ea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019ea4:	4604      	mov	r4, r0
 8019ea6:	460d      	mov	r5, r1
 8019ea8:	b976      	cbnz	r6, 8019ec8 <_Balloc+0x28>
 8019eaa:	2010      	movs	r0, #16
 8019eac:	f7fc fe2a 	bl	8016b04 <malloc>
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	6260      	str	r0, [r4, #36]	; 0x24
 8019eb4:	b920      	cbnz	r0, 8019ec0 <_Balloc+0x20>
 8019eb6:	2166      	movs	r1, #102	; 0x66
 8019eb8:	4b17      	ldr	r3, [pc, #92]	; (8019f18 <_Balloc+0x78>)
 8019eba:	4818      	ldr	r0, [pc, #96]	; (8019f1c <_Balloc+0x7c>)
 8019ebc:	f000 fe4a 	bl	801ab54 <__assert_func>
 8019ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ec4:	6006      	str	r6, [r0, #0]
 8019ec6:	60c6      	str	r6, [r0, #12]
 8019ec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019eca:	68f3      	ldr	r3, [r6, #12]
 8019ecc:	b183      	cbz	r3, 8019ef0 <_Balloc+0x50>
 8019ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ed0:	68db      	ldr	r3, [r3, #12]
 8019ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019ed6:	b9b8      	cbnz	r0, 8019f08 <_Balloc+0x68>
 8019ed8:	2101      	movs	r1, #1
 8019eda:	fa01 f605 	lsl.w	r6, r1, r5
 8019ede:	1d72      	adds	r2, r6, #5
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	0092      	lsls	r2, r2, #2
 8019ee4:	f000 fc94 	bl	801a810 <_calloc_r>
 8019ee8:	b160      	cbz	r0, 8019f04 <_Balloc+0x64>
 8019eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019eee:	e00e      	b.n	8019f0e <_Balloc+0x6e>
 8019ef0:	2221      	movs	r2, #33	; 0x21
 8019ef2:	2104      	movs	r1, #4
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f000 fc8b 	bl	801a810 <_calloc_r>
 8019efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019efc:	60f0      	str	r0, [r6, #12]
 8019efe:	68db      	ldr	r3, [r3, #12]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d1e4      	bne.n	8019ece <_Balloc+0x2e>
 8019f04:	2000      	movs	r0, #0
 8019f06:	bd70      	pop	{r4, r5, r6, pc}
 8019f08:	6802      	ldr	r2, [r0, #0]
 8019f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019f0e:	2300      	movs	r3, #0
 8019f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019f14:	e7f7      	b.n	8019f06 <_Balloc+0x66>
 8019f16:	bf00      	nop
 8019f18:	0801b5ee 	.word	0x0801b5ee
 8019f1c:	0801b6f4 	.word	0x0801b6f4

08019f20 <_Bfree>:
 8019f20:	b570      	push	{r4, r5, r6, lr}
 8019f22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019f24:	4605      	mov	r5, r0
 8019f26:	460c      	mov	r4, r1
 8019f28:	b976      	cbnz	r6, 8019f48 <_Bfree+0x28>
 8019f2a:	2010      	movs	r0, #16
 8019f2c:	f7fc fdea 	bl	8016b04 <malloc>
 8019f30:	4602      	mov	r2, r0
 8019f32:	6268      	str	r0, [r5, #36]	; 0x24
 8019f34:	b920      	cbnz	r0, 8019f40 <_Bfree+0x20>
 8019f36:	218a      	movs	r1, #138	; 0x8a
 8019f38:	4b08      	ldr	r3, [pc, #32]	; (8019f5c <_Bfree+0x3c>)
 8019f3a:	4809      	ldr	r0, [pc, #36]	; (8019f60 <_Bfree+0x40>)
 8019f3c:	f000 fe0a 	bl	801ab54 <__assert_func>
 8019f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019f44:	6006      	str	r6, [r0, #0]
 8019f46:	60c6      	str	r6, [r0, #12]
 8019f48:	b13c      	cbz	r4, 8019f5a <_Bfree+0x3a>
 8019f4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019f4c:	6862      	ldr	r2, [r4, #4]
 8019f4e:	68db      	ldr	r3, [r3, #12]
 8019f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019f54:	6021      	str	r1, [r4, #0]
 8019f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019f5a:	bd70      	pop	{r4, r5, r6, pc}
 8019f5c:	0801b5ee 	.word	0x0801b5ee
 8019f60:	0801b6f4 	.word	0x0801b6f4

08019f64 <__multadd>:
 8019f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f68:	4698      	mov	r8, r3
 8019f6a:	460c      	mov	r4, r1
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	690e      	ldr	r6, [r1, #16]
 8019f70:	4607      	mov	r7, r0
 8019f72:	f101 0014 	add.w	r0, r1, #20
 8019f76:	6805      	ldr	r5, [r0, #0]
 8019f78:	3301      	adds	r3, #1
 8019f7a:	b2a9      	uxth	r1, r5
 8019f7c:	fb02 8101 	mla	r1, r2, r1, r8
 8019f80:	0c2d      	lsrs	r5, r5, #16
 8019f82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019f86:	fb02 c505 	mla	r5, r2, r5, ip
 8019f8a:	b289      	uxth	r1, r1
 8019f8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019f90:	429e      	cmp	r6, r3
 8019f92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019f96:	f840 1b04 	str.w	r1, [r0], #4
 8019f9a:	dcec      	bgt.n	8019f76 <__multadd+0x12>
 8019f9c:	f1b8 0f00 	cmp.w	r8, #0
 8019fa0:	d022      	beq.n	8019fe8 <__multadd+0x84>
 8019fa2:	68a3      	ldr	r3, [r4, #8]
 8019fa4:	42b3      	cmp	r3, r6
 8019fa6:	dc19      	bgt.n	8019fdc <__multadd+0x78>
 8019fa8:	6861      	ldr	r1, [r4, #4]
 8019faa:	4638      	mov	r0, r7
 8019fac:	3101      	adds	r1, #1
 8019fae:	f7ff ff77 	bl	8019ea0 <_Balloc>
 8019fb2:	4605      	mov	r5, r0
 8019fb4:	b928      	cbnz	r0, 8019fc2 <__multadd+0x5e>
 8019fb6:	4602      	mov	r2, r0
 8019fb8:	21b5      	movs	r1, #181	; 0xb5
 8019fba:	4b0d      	ldr	r3, [pc, #52]	; (8019ff0 <__multadd+0x8c>)
 8019fbc:	480d      	ldr	r0, [pc, #52]	; (8019ff4 <__multadd+0x90>)
 8019fbe:	f000 fdc9 	bl	801ab54 <__assert_func>
 8019fc2:	6922      	ldr	r2, [r4, #16]
 8019fc4:	f104 010c 	add.w	r1, r4, #12
 8019fc8:	3202      	adds	r2, #2
 8019fca:	0092      	lsls	r2, r2, #2
 8019fcc:	300c      	adds	r0, #12
 8019fce:	f7fc fda9 	bl	8016b24 <memcpy>
 8019fd2:	4621      	mov	r1, r4
 8019fd4:	4638      	mov	r0, r7
 8019fd6:	f7ff ffa3 	bl	8019f20 <_Bfree>
 8019fda:	462c      	mov	r4, r5
 8019fdc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019fe0:	3601      	adds	r6, #1
 8019fe2:	f8c3 8014 	str.w	r8, [r3, #20]
 8019fe6:	6126      	str	r6, [r4, #16]
 8019fe8:	4620      	mov	r0, r4
 8019fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fee:	bf00      	nop
 8019ff0:	0801b664 	.word	0x0801b664
 8019ff4:	0801b6f4 	.word	0x0801b6f4

08019ff8 <__s2b>:
 8019ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ffc:	4615      	mov	r5, r2
 8019ffe:	2209      	movs	r2, #9
 801a000:	461f      	mov	r7, r3
 801a002:	3308      	adds	r3, #8
 801a004:	460c      	mov	r4, r1
 801a006:	fb93 f3f2 	sdiv	r3, r3, r2
 801a00a:	4606      	mov	r6, r0
 801a00c:	2201      	movs	r2, #1
 801a00e:	2100      	movs	r1, #0
 801a010:	429a      	cmp	r2, r3
 801a012:	db09      	blt.n	801a028 <__s2b+0x30>
 801a014:	4630      	mov	r0, r6
 801a016:	f7ff ff43 	bl	8019ea0 <_Balloc>
 801a01a:	b940      	cbnz	r0, 801a02e <__s2b+0x36>
 801a01c:	4602      	mov	r2, r0
 801a01e:	21ce      	movs	r1, #206	; 0xce
 801a020:	4b18      	ldr	r3, [pc, #96]	; (801a084 <__s2b+0x8c>)
 801a022:	4819      	ldr	r0, [pc, #100]	; (801a088 <__s2b+0x90>)
 801a024:	f000 fd96 	bl	801ab54 <__assert_func>
 801a028:	0052      	lsls	r2, r2, #1
 801a02a:	3101      	adds	r1, #1
 801a02c:	e7f0      	b.n	801a010 <__s2b+0x18>
 801a02e:	9b08      	ldr	r3, [sp, #32]
 801a030:	2d09      	cmp	r5, #9
 801a032:	6143      	str	r3, [r0, #20]
 801a034:	f04f 0301 	mov.w	r3, #1
 801a038:	6103      	str	r3, [r0, #16]
 801a03a:	dd16      	ble.n	801a06a <__s2b+0x72>
 801a03c:	f104 0909 	add.w	r9, r4, #9
 801a040:	46c8      	mov	r8, r9
 801a042:	442c      	add	r4, r5
 801a044:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a048:	4601      	mov	r1, r0
 801a04a:	220a      	movs	r2, #10
 801a04c:	4630      	mov	r0, r6
 801a04e:	3b30      	subs	r3, #48	; 0x30
 801a050:	f7ff ff88 	bl	8019f64 <__multadd>
 801a054:	45a0      	cmp	r8, r4
 801a056:	d1f5      	bne.n	801a044 <__s2b+0x4c>
 801a058:	f1a5 0408 	sub.w	r4, r5, #8
 801a05c:	444c      	add	r4, r9
 801a05e:	1b2d      	subs	r5, r5, r4
 801a060:	1963      	adds	r3, r4, r5
 801a062:	42bb      	cmp	r3, r7
 801a064:	db04      	blt.n	801a070 <__s2b+0x78>
 801a066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a06a:	2509      	movs	r5, #9
 801a06c:	340a      	adds	r4, #10
 801a06e:	e7f6      	b.n	801a05e <__s2b+0x66>
 801a070:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a074:	4601      	mov	r1, r0
 801a076:	220a      	movs	r2, #10
 801a078:	4630      	mov	r0, r6
 801a07a:	3b30      	subs	r3, #48	; 0x30
 801a07c:	f7ff ff72 	bl	8019f64 <__multadd>
 801a080:	e7ee      	b.n	801a060 <__s2b+0x68>
 801a082:	bf00      	nop
 801a084:	0801b664 	.word	0x0801b664
 801a088:	0801b6f4 	.word	0x0801b6f4

0801a08c <__hi0bits>:
 801a08c:	0c02      	lsrs	r2, r0, #16
 801a08e:	0412      	lsls	r2, r2, #16
 801a090:	4603      	mov	r3, r0
 801a092:	b9ca      	cbnz	r2, 801a0c8 <__hi0bits+0x3c>
 801a094:	0403      	lsls	r3, r0, #16
 801a096:	2010      	movs	r0, #16
 801a098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a09c:	bf04      	itt	eq
 801a09e:	021b      	lsleq	r3, r3, #8
 801a0a0:	3008      	addeq	r0, #8
 801a0a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a0a6:	bf04      	itt	eq
 801a0a8:	011b      	lsleq	r3, r3, #4
 801a0aa:	3004      	addeq	r0, #4
 801a0ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a0b0:	bf04      	itt	eq
 801a0b2:	009b      	lsleq	r3, r3, #2
 801a0b4:	3002      	addeq	r0, #2
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	db05      	blt.n	801a0c6 <__hi0bits+0x3a>
 801a0ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801a0be:	f100 0001 	add.w	r0, r0, #1
 801a0c2:	bf08      	it	eq
 801a0c4:	2020      	moveq	r0, #32
 801a0c6:	4770      	bx	lr
 801a0c8:	2000      	movs	r0, #0
 801a0ca:	e7e5      	b.n	801a098 <__hi0bits+0xc>

0801a0cc <__lo0bits>:
 801a0cc:	6803      	ldr	r3, [r0, #0]
 801a0ce:	4602      	mov	r2, r0
 801a0d0:	f013 0007 	ands.w	r0, r3, #7
 801a0d4:	d00b      	beq.n	801a0ee <__lo0bits+0x22>
 801a0d6:	07d9      	lsls	r1, r3, #31
 801a0d8:	d422      	bmi.n	801a120 <__lo0bits+0x54>
 801a0da:	0798      	lsls	r0, r3, #30
 801a0dc:	bf49      	itett	mi
 801a0de:	085b      	lsrmi	r3, r3, #1
 801a0e0:	089b      	lsrpl	r3, r3, #2
 801a0e2:	2001      	movmi	r0, #1
 801a0e4:	6013      	strmi	r3, [r2, #0]
 801a0e6:	bf5c      	itt	pl
 801a0e8:	2002      	movpl	r0, #2
 801a0ea:	6013      	strpl	r3, [r2, #0]
 801a0ec:	4770      	bx	lr
 801a0ee:	b299      	uxth	r1, r3
 801a0f0:	b909      	cbnz	r1, 801a0f6 <__lo0bits+0x2a>
 801a0f2:	2010      	movs	r0, #16
 801a0f4:	0c1b      	lsrs	r3, r3, #16
 801a0f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a0fa:	bf04      	itt	eq
 801a0fc:	0a1b      	lsreq	r3, r3, #8
 801a0fe:	3008      	addeq	r0, #8
 801a100:	0719      	lsls	r1, r3, #28
 801a102:	bf04      	itt	eq
 801a104:	091b      	lsreq	r3, r3, #4
 801a106:	3004      	addeq	r0, #4
 801a108:	0799      	lsls	r1, r3, #30
 801a10a:	bf04      	itt	eq
 801a10c:	089b      	lsreq	r3, r3, #2
 801a10e:	3002      	addeq	r0, #2
 801a110:	07d9      	lsls	r1, r3, #31
 801a112:	d403      	bmi.n	801a11c <__lo0bits+0x50>
 801a114:	085b      	lsrs	r3, r3, #1
 801a116:	f100 0001 	add.w	r0, r0, #1
 801a11a:	d003      	beq.n	801a124 <__lo0bits+0x58>
 801a11c:	6013      	str	r3, [r2, #0]
 801a11e:	4770      	bx	lr
 801a120:	2000      	movs	r0, #0
 801a122:	4770      	bx	lr
 801a124:	2020      	movs	r0, #32
 801a126:	4770      	bx	lr

0801a128 <__i2b>:
 801a128:	b510      	push	{r4, lr}
 801a12a:	460c      	mov	r4, r1
 801a12c:	2101      	movs	r1, #1
 801a12e:	f7ff feb7 	bl	8019ea0 <_Balloc>
 801a132:	4602      	mov	r2, r0
 801a134:	b928      	cbnz	r0, 801a142 <__i2b+0x1a>
 801a136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a13a:	4b04      	ldr	r3, [pc, #16]	; (801a14c <__i2b+0x24>)
 801a13c:	4804      	ldr	r0, [pc, #16]	; (801a150 <__i2b+0x28>)
 801a13e:	f000 fd09 	bl	801ab54 <__assert_func>
 801a142:	2301      	movs	r3, #1
 801a144:	6144      	str	r4, [r0, #20]
 801a146:	6103      	str	r3, [r0, #16]
 801a148:	bd10      	pop	{r4, pc}
 801a14a:	bf00      	nop
 801a14c:	0801b664 	.word	0x0801b664
 801a150:	0801b6f4 	.word	0x0801b6f4

0801a154 <__multiply>:
 801a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a158:	4614      	mov	r4, r2
 801a15a:	690a      	ldr	r2, [r1, #16]
 801a15c:	6923      	ldr	r3, [r4, #16]
 801a15e:	460d      	mov	r5, r1
 801a160:	429a      	cmp	r2, r3
 801a162:	bfbe      	ittt	lt
 801a164:	460b      	movlt	r3, r1
 801a166:	4625      	movlt	r5, r4
 801a168:	461c      	movlt	r4, r3
 801a16a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a16e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a172:	68ab      	ldr	r3, [r5, #8]
 801a174:	6869      	ldr	r1, [r5, #4]
 801a176:	eb0a 0709 	add.w	r7, sl, r9
 801a17a:	42bb      	cmp	r3, r7
 801a17c:	b085      	sub	sp, #20
 801a17e:	bfb8      	it	lt
 801a180:	3101      	addlt	r1, #1
 801a182:	f7ff fe8d 	bl	8019ea0 <_Balloc>
 801a186:	b930      	cbnz	r0, 801a196 <__multiply+0x42>
 801a188:	4602      	mov	r2, r0
 801a18a:	f240 115d 	movw	r1, #349	; 0x15d
 801a18e:	4b41      	ldr	r3, [pc, #260]	; (801a294 <__multiply+0x140>)
 801a190:	4841      	ldr	r0, [pc, #260]	; (801a298 <__multiply+0x144>)
 801a192:	f000 fcdf 	bl	801ab54 <__assert_func>
 801a196:	f100 0614 	add.w	r6, r0, #20
 801a19a:	4633      	mov	r3, r6
 801a19c:	2200      	movs	r2, #0
 801a19e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a1a2:	4543      	cmp	r3, r8
 801a1a4:	d31e      	bcc.n	801a1e4 <__multiply+0x90>
 801a1a6:	f105 0c14 	add.w	ip, r5, #20
 801a1aa:	f104 0314 	add.w	r3, r4, #20
 801a1ae:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a1b2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a1b6:	9202      	str	r2, [sp, #8]
 801a1b8:	ebac 0205 	sub.w	r2, ip, r5
 801a1bc:	3a15      	subs	r2, #21
 801a1be:	f022 0203 	bic.w	r2, r2, #3
 801a1c2:	3204      	adds	r2, #4
 801a1c4:	f105 0115 	add.w	r1, r5, #21
 801a1c8:	458c      	cmp	ip, r1
 801a1ca:	bf38      	it	cc
 801a1cc:	2204      	movcc	r2, #4
 801a1ce:	9201      	str	r2, [sp, #4]
 801a1d0:	9a02      	ldr	r2, [sp, #8]
 801a1d2:	9303      	str	r3, [sp, #12]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d808      	bhi.n	801a1ea <__multiply+0x96>
 801a1d8:	2f00      	cmp	r7, #0
 801a1da:	dc55      	bgt.n	801a288 <__multiply+0x134>
 801a1dc:	6107      	str	r7, [r0, #16]
 801a1de:	b005      	add	sp, #20
 801a1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e4:	f843 2b04 	str.w	r2, [r3], #4
 801a1e8:	e7db      	b.n	801a1a2 <__multiply+0x4e>
 801a1ea:	f8b3 a000 	ldrh.w	sl, [r3]
 801a1ee:	f1ba 0f00 	cmp.w	sl, #0
 801a1f2:	d020      	beq.n	801a236 <__multiply+0xe2>
 801a1f4:	46b1      	mov	r9, r6
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	f105 0e14 	add.w	lr, r5, #20
 801a1fc:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a200:	f8d9 b000 	ldr.w	fp, [r9]
 801a204:	b2a1      	uxth	r1, r4
 801a206:	fa1f fb8b 	uxth.w	fp, fp
 801a20a:	fb0a b101 	mla	r1, sl, r1, fp
 801a20e:	4411      	add	r1, r2
 801a210:	f8d9 2000 	ldr.w	r2, [r9]
 801a214:	0c24      	lsrs	r4, r4, #16
 801a216:	0c12      	lsrs	r2, r2, #16
 801a218:	fb0a 2404 	mla	r4, sl, r4, r2
 801a21c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a220:	b289      	uxth	r1, r1
 801a222:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a226:	45f4      	cmp	ip, lr
 801a228:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a22c:	f849 1b04 	str.w	r1, [r9], #4
 801a230:	d8e4      	bhi.n	801a1fc <__multiply+0xa8>
 801a232:	9901      	ldr	r1, [sp, #4]
 801a234:	5072      	str	r2, [r6, r1]
 801a236:	9a03      	ldr	r2, [sp, #12]
 801a238:	3304      	adds	r3, #4
 801a23a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a23e:	f1b9 0f00 	cmp.w	r9, #0
 801a242:	d01f      	beq.n	801a284 <__multiply+0x130>
 801a244:	46b6      	mov	lr, r6
 801a246:	f04f 0a00 	mov.w	sl, #0
 801a24a:	6834      	ldr	r4, [r6, #0]
 801a24c:	f105 0114 	add.w	r1, r5, #20
 801a250:	880a      	ldrh	r2, [r1, #0]
 801a252:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a256:	b2a4      	uxth	r4, r4
 801a258:	fb09 b202 	mla	r2, r9, r2, fp
 801a25c:	4492      	add	sl, r2
 801a25e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a262:	f84e 4b04 	str.w	r4, [lr], #4
 801a266:	f851 4b04 	ldr.w	r4, [r1], #4
 801a26a:	f8be 2000 	ldrh.w	r2, [lr]
 801a26e:	0c24      	lsrs	r4, r4, #16
 801a270:	fb09 2404 	mla	r4, r9, r4, r2
 801a274:	458c      	cmp	ip, r1
 801a276:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a27a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a27e:	d8e7      	bhi.n	801a250 <__multiply+0xfc>
 801a280:	9a01      	ldr	r2, [sp, #4]
 801a282:	50b4      	str	r4, [r6, r2]
 801a284:	3604      	adds	r6, #4
 801a286:	e7a3      	b.n	801a1d0 <__multiply+0x7c>
 801a288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d1a5      	bne.n	801a1dc <__multiply+0x88>
 801a290:	3f01      	subs	r7, #1
 801a292:	e7a1      	b.n	801a1d8 <__multiply+0x84>
 801a294:	0801b664 	.word	0x0801b664
 801a298:	0801b6f4 	.word	0x0801b6f4

0801a29c <__pow5mult>:
 801a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2a0:	4615      	mov	r5, r2
 801a2a2:	f012 0203 	ands.w	r2, r2, #3
 801a2a6:	4606      	mov	r6, r0
 801a2a8:	460f      	mov	r7, r1
 801a2aa:	d007      	beq.n	801a2bc <__pow5mult+0x20>
 801a2ac:	4c25      	ldr	r4, [pc, #148]	; (801a344 <__pow5mult+0xa8>)
 801a2ae:	3a01      	subs	r2, #1
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a2b6:	f7ff fe55 	bl	8019f64 <__multadd>
 801a2ba:	4607      	mov	r7, r0
 801a2bc:	10ad      	asrs	r5, r5, #2
 801a2be:	d03d      	beq.n	801a33c <__pow5mult+0xa0>
 801a2c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a2c2:	b97c      	cbnz	r4, 801a2e4 <__pow5mult+0x48>
 801a2c4:	2010      	movs	r0, #16
 801a2c6:	f7fc fc1d 	bl	8016b04 <malloc>
 801a2ca:	4602      	mov	r2, r0
 801a2cc:	6270      	str	r0, [r6, #36]	; 0x24
 801a2ce:	b928      	cbnz	r0, 801a2dc <__pow5mult+0x40>
 801a2d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a2d4:	4b1c      	ldr	r3, [pc, #112]	; (801a348 <__pow5mult+0xac>)
 801a2d6:	481d      	ldr	r0, [pc, #116]	; (801a34c <__pow5mult+0xb0>)
 801a2d8:	f000 fc3c 	bl	801ab54 <__assert_func>
 801a2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a2e0:	6004      	str	r4, [r0, #0]
 801a2e2:	60c4      	str	r4, [r0, #12]
 801a2e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a2ec:	b94c      	cbnz	r4, 801a302 <__pow5mult+0x66>
 801a2ee:	f240 2171 	movw	r1, #625	; 0x271
 801a2f2:	4630      	mov	r0, r6
 801a2f4:	f7ff ff18 	bl	801a128 <__i2b>
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	f8c8 0008 	str.w	r0, [r8, #8]
 801a300:	6003      	str	r3, [r0, #0]
 801a302:	f04f 0900 	mov.w	r9, #0
 801a306:	07eb      	lsls	r3, r5, #31
 801a308:	d50a      	bpl.n	801a320 <__pow5mult+0x84>
 801a30a:	4639      	mov	r1, r7
 801a30c:	4622      	mov	r2, r4
 801a30e:	4630      	mov	r0, r6
 801a310:	f7ff ff20 	bl	801a154 <__multiply>
 801a314:	4680      	mov	r8, r0
 801a316:	4639      	mov	r1, r7
 801a318:	4630      	mov	r0, r6
 801a31a:	f7ff fe01 	bl	8019f20 <_Bfree>
 801a31e:	4647      	mov	r7, r8
 801a320:	106d      	asrs	r5, r5, #1
 801a322:	d00b      	beq.n	801a33c <__pow5mult+0xa0>
 801a324:	6820      	ldr	r0, [r4, #0]
 801a326:	b938      	cbnz	r0, 801a338 <__pow5mult+0x9c>
 801a328:	4622      	mov	r2, r4
 801a32a:	4621      	mov	r1, r4
 801a32c:	4630      	mov	r0, r6
 801a32e:	f7ff ff11 	bl	801a154 <__multiply>
 801a332:	6020      	str	r0, [r4, #0]
 801a334:	f8c0 9000 	str.w	r9, [r0]
 801a338:	4604      	mov	r4, r0
 801a33a:	e7e4      	b.n	801a306 <__pow5mult+0x6a>
 801a33c:	4638      	mov	r0, r7
 801a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a342:	bf00      	nop
 801a344:	0801b848 	.word	0x0801b848
 801a348:	0801b5ee 	.word	0x0801b5ee
 801a34c:	0801b6f4 	.word	0x0801b6f4

0801a350 <__lshift>:
 801a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a354:	460c      	mov	r4, r1
 801a356:	4607      	mov	r7, r0
 801a358:	4691      	mov	r9, r2
 801a35a:	6923      	ldr	r3, [r4, #16]
 801a35c:	6849      	ldr	r1, [r1, #4]
 801a35e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a362:	68a3      	ldr	r3, [r4, #8]
 801a364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a368:	f108 0601 	add.w	r6, r8, #1
 801a36c:	42b3      	cmp	r3, r6
 801a36e:	db0b      	blt.n	801a388 <__lshift+0x38>
 801a370:	4638      	mov	r0, r7
 801a372:	f7ff fd95 	bl	8019ea0 <_Balloc>
 801a376:	4605      	mov	r5, r0
 801a378:	b948      	cbnz	r0, 801a38e <__lshift+0x3e>
 801a37a:	4602      	mov	r2, r0
 801a37c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a380:	4b27      	ldr	r3, [pc, #156]	; (801a420 <__lshift+0xd0>)
 801a382:	4828      	ldr	r0, [pc, #160]	; (801a424 <__lshift+0xd4>)
 801a384:	f000 fbe6 	bl	801ab54 <__assert_func>
 801a388:	3101      	adds	r1, #1
 801a38a:	005b      	lsls	r3, r3, #1
 801a38c:	e7ee      	b.n	801a36c <__lshift+0x1c>
 801a38e:	2300      	movs	r3, #0
 801a390:	f100 0114 	add.w	r1, r0, #20
 801a394:	f100 0210 	add.w	r2, r0, #16
 801a398:	4618      	mov	r0, r3
 801a39a:	4553      	cmp	r3, sl
 801a39c:	db33      	blt.n	801a406 <__lshift+0xb6>
 801a39e:	6920      	ldr	r0, [r4, #16]
 801a3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a3a4:	f104 0314 	add.w	r3, r4, #20
 801a3a8:	f019 091f 	ands.w	r9, r9, #31
 801a3ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a3b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a3b4:	d02b      	beq.n	801a40e <__lshift+0xbe>
 801a3b6:	468a      	mov	sl, r1
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	f1c9 0e20 	rsb	lr, r9, #32
 801a3be:	6818      	ldr	r0, [r3, #0]
 801a3c0:	fa00 f009 	lsl.w	r0, r0, r9
 801a3c4:	4302      	orrs	r2, r0
 801a3c6:	f84a 2b04 	str.w	r2, [sl], #4
 801a3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3ce:	459c      	cmp	ip, r3
 801a3d0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a3d4:	d8f3      	bhi.n	801a3be <__lshift+0x6e>
 801a3d6:	ebac 0304 	sub.w	r3, ip, r4
 801a3da:	3b15      	subs	r3, #21
 801a3dc:	f023 0303 	bic.w	r3, r3, #3
 801a3e0:	3304      	adds	r3, #4
 801a3e2:	f104 0015 	add.w	r0, r4, #21
 801a3e6:	4584      	cmp	ip, r0
 801a3e8:	bf38      	it	cc
 801a3ea:	2304      	movcc	r3, #4
 801a3ec:	50ca      	str	r2, [r1, r3]
 801a3ee:	b10a      	cbz	r2, 801a3f4 <__lshift+0xa4>
 801a3f0:	f108 0602 	add.w	r6, r8, #2
 801a3f4:	3e01      	subs	r6, #1
 801a3f6:	4638      	mov	r0, r7
 801a3f8:	4621      	mov	r1, r4
 801a3fa:	612e      	str	r6, [r5, #16]
 801a3fc:	f7ff fd90 	bl	8019f20 <_Bfree>
 801a400:	4628      	mov	r0, r5
 801a402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a406:	f842 0f04 	str.w	r0, [r2, #4]!
 801a40a:	3301      	adds	r3, #1
 801a40c:	e7c5      	b.n	801a39a <__lshift+0x4a>
 801a40e:	3904      	subs	r1, #4
 801a410:	f853 2b04 	ldr.w	r2, [r3], #4
 801a414:	459c      	cmp	ip, r3
 801a416:	f841 2f04 	str.w	r2, [r1, #4]!
 801a41a:	d8f9      	bhi.n	801a410 <__lshift+0xc0>
 801a41c:	e7ea      	b.n	801a3f4 <__lshift+0xa4>
 801a41e:	bf00      	nop
 801a420:	0801b664 	.word	0x0801b664
 801a424:	0801b6f4 	.word	0x0801b6f4

0801a428 <__mcmp>:
 801a428:	4603      	mov	r3, r0
 801a42a:	690a      	ldr	r2, [r1, #16]
 801a42c:	6900      	ldr	r0, [r0, #16]
 801a42e:	b530      	push	{r4, r5, lr}
 801a430:	1a80      	subs	r0, r0, r2
 801a432:	d10d      	bne.n	801a450 <__mcmp+0x28>
 801a434:	3314      	adds	r3, #20
 801a436:	3114      	adds	r1, #20
 801a438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a43c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a448:	4295      	cmp	r5, r2
 801a44a:	d002      	beq.n	801a452 <__mcmp+0x2a>
 801a44c:	d304      	bcc.n	801a458 <__mcmp+0x30>
 801a44e:	2001      	movs	r0, #1
 801a450:	bd30      	pop	{r4, r5, pc}
 801a452:	42a3      	cmp	r3, r4
 801a454:	d3f4      	bcc.n	801a440 <__mcmp+0x18>
 801a456:	e7fb      	b.n	801a450 <__mcmp+0x28>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	e7f8      	b.n	801a450 <__mcmp+0x28>
	...

0801a460 <__mdiff>:
 801a460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a464:	460c      	mov	r4, r1
 801a466:	4606      	mov	r6, r0
 801a468:	4611      	mov	r1, r2
 801a46a:	4620      	mov	r0, r4
 801a46c:	4692      	mov	sl, r2
 801a46e:	f7ff ffdb 	bl	801a428 <__mcmp>
 801a472:	1e05      	subs	r5, r0, #0
 801a474:	d111      	bne.n	801a49a <__mdiff+0x3a>
 801a476:	4629      	mov	r1, r5
 801a478:	4630      	mov	r0, r6
 801a47a:	f7ff fd11 	bl	8019ea0 <_Balloc>
 801a47e:	4602      	mov	r2, r0
 801a480:	b928      	cbnz	r0, 801a48e <__mdiff+0x2e>
 801a482:	f240 2132 	movw	r1, #562	; 0x232
 801a486:	4b3c      	ldr	r3, [pc, #240]	; (801a578 <__mdiff+0x118>)
 801a488:	483c      	ldr	r0, [pc, #240]	; (801a57c <__mdiff+0x11c>)
 801a48a:	f000 fb63 	bl	801ab54 <__assert_func>
 801a48e:	2301      	movs	r3, #1
 801a490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a494:	4610      	mov	r0, r2
 801a496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49a:	bfa4      	itt	ge
 801a49c:	4653      	movge	r3, sl
 801a49e:	46a2      	movge	sl, r4
 801a4a0:	4630      	mov	r0, r6
 801a4a2:	f8da 1004 	ldr.w	r1, [sl, #4]
 801a4a6:	bfa6      	itte	ge
 801a4a8:	461c      	movge	r4, r3
 801a4aa:	2500      	movge	r5, #0
 801a4ac:	2501      	movlt	r5, #1
 801a4ae:	f7ff fcf7 	bl	8019ea0 <_Balloc>
 801a4b2:	4602      	mov	r2, r0
 801a4b4:	b918      	cbnz	r0, 801a4be <__mdiff+0x5e>
 801a4b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a4ba:	4b2f      	ldr	r3, [pc, #188]	; (801a578 <__mdiff+0x118>)
 801a4bc:	e7e4      	b.n	801a488 <__mdiff+0x28>
 801a4be:	f100 0814 	add.w	r8, r0, #20
 801a4c2:	f8da 7010 	ldr.w	r7, [sl, #16]
 801a4c6:	60c5      	str	r5, [r0, #12]
 801a4c8:	f04f 0c00 	mov.w	ip, #0
 801a4cc:	f10a 0514 	add.w	r5, sl, #20
 801a4d0:	f10a 0010 	add.w	r0, sl, #16
 801a4d4:	46c2      	mov	sl, r8
 801a4d6:	6926      	ldr	r6, [r4, #16]
 801a4d8:	f104 0914 	add.w	r9, r4, #20
 801a4dc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801a4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a4e4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 801a4e8:	f859 3b04 	ldr.w	r3, [r9], #4
 801a4ec:	fa1f f18b 	uxth.w	r1, fp
 801a4f0:	4461      	add	r1, ip
 801a4f2:	fa1f fc83 	uxth.w	ip, r3
 801a4f6:	0c1b      	lsrs	r3, r3, #16
 801a4f8:	eba1 010c 	sub.w	r1, r1, ip
 801a4fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a500:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a504:	b289      	uxth	r1, r1
 801a506:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a50a:	454e      	cmp	r6, r9
 801a50c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a510:	f84a 3b04 	str.w	r3, [sl], #4
 801a514:	d8e6      	bhi.n	801a4e4 <__mdiff+0x84>
 801a516:	1b33      	subs	r3, r6, r4
 801a518:	3b15      	subs	r3, #21
 801a51a:	f023 0303 	bic.w	r3, r3, #3
 801a51e:	3415      	adds	r4, #21
 801a520:	3304      	adds	r3, #4
 801a522:	42a6      	cmp	r6, r4
 801a524:	bf38      	it	cc
 801a526:	2304      	movcc	r3, #4
 801a528:	441d      	add	r5, r3
 801a52a:	4443      	add	r3, r8
 801a52c:	461e      	mov	r6, r3
 801a52e:	462c      	mov	r4, r5
 801a530:	4574      	cmp	r4, lr
 801a532:	d30e      	bcc.n	801a552 <__mdiff+0xf2>
 801a534:	f10e 0103 	add.w	r1, lr, #3
 801a538:	1b49      	subs	r1, r1, r5
 801a53a:	f021 0103 	bic.w	r1, r1, #3
 801a53e:	3d03      	subs	r5, #3
 801a540:	45ae      	cmp	lr, r5
 801a542:	bf38      	it	cc
 801a544:	2100      	movcc	r1, #0
 801a546:	4419      	add	r1, r3
 801a548:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801a54c:	b18b      	cbz	r3, 801a572 <__mdiff+0x112>
 801a54e:	6117      	str	r7, [r2, #16]
 801a550:	e7a0      	b.n	801a494 <__mdiff+0x34>
 801a552:	f854 8b04 	ldr.w	r8, [r4], #4
 801a556:	fa1f f188 	uxth.w	r1, r8
 801a55a:	4461      	add	r1, ip
 801a55c:	1408      	asrs	r0, r1, #16
 801a55e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801a562:	b289      	uxth	r1, r1
 801a564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a56c:	f846 1b04 	str.w	r1, [r6], #4
 801a570:	e7de      	b.n	801a530 <__mdiff+0xd0>
 801a572:	3f01      	subs	r7, #1
 801a574:	e7e8      	b.n	801a548 <__mdiff+0xe8>
 801a576:	bf00      	nop
 801a578:	0801b664 	.word	0x0801b664
 801a57c:	0801b6f4 	.word	0x0801b6f4

0801a580 <__ulp>:
 801a580:	4b11      	ldr	r3, [pc, #68]	; (801a5c8 <__ulp+0x48>)
 801a582:	400b      	ands	r3, r1
 801a584:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a588:	2b00      	cmp	r3, #0
 801a58a:	dd02      	ble.n	801a592 <__ulp+0x12>
 801a58c:	2000      	movs	r0, #0
 801a58e:	4619      	mov	r1, r3
 801a590:	4770      	bx	lr
 801a592:	425b      	negs	r3, r3
 801a594:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a598:	f04f 0000 	mov.w	r0, #0
 801a59c:	f04f 0100 	mov.w	r1, #0
 801a5a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a5a4:	da04      	bge.n	801a5b0 <__ulp+0x30>
 801a5a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a5aa:	fa43 f102 	asr.w	r1, r3, r2
 801a5ae:	4770      	bx	lr
 801a5b0:	f1a2 0314 	sub.w	r3, r2, #20
 801a5b4:	2b1e      	cmp	r3, #30
 801a5b6:	bfd6      	itet	le
 801a5b8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a5bc:	2301      	movgt	r3, #1
 801a5be:	fa22 f303 	lsrle.w	r3, r2, r3
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	4770      	bx	lr
 801a5c6:	bf00      	nop
 801a5c8:	7ff00000 	.word	0x7ff00000

0801a5cc <__b2d>:
 801a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5d0:	6907      	ldr	r7, [r0, #16]
 801a5d2:	f100 0914 	add.w	r9, r0, #20
 801a5d6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801a5da:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801a5de:	f1a7 0804 	sub.w	r8, r7, #4
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	f7ff fd52 	bl	801a08c <__hi0bits>
 801a5e8:	f1c0 0320 	rsb	r3, r0, #32
 801a5ec:	280a      	cmp	r0, #10
 801a5ee:	600b      	str	r3, [r1, #0]
 801a5f0:	491f      	ldr	r1, [pc, #124]	; (801a670 <__b2d+0xa4>)
 801a5f2:	dc17      	bgt.n	801a624 <__b2d+0x58>
 801a5f4:	45c1      	cmp	r9, r8
 801a5f6:	bf28      	it	cs
 801a5f8:	2200      	movcs	r2, #0
 801a5fa:	f1c0 0c0b 	rsb	ip, r0, #11
 801a5fe:	fa26 f30c 	lsr.w	r3, r6, ip
 801a602:	bf38      	it	cc
 801a604:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801a608:	ea43 0501 	orr.w	r5, r3, r1
 801a60c:	f100 0315 	add.w	r3, r0, #21
 801a610:	fa06 f303 	lsl.w	r3, r6, r3
 801a614:	fa22 f20c 	lsr.w	r2, r2, ip
 801a618:	ea43 0402 	orr.w	r4, r3, r2
 801a61c:	4620      	mov	r0, r4
 801a61e:	4629      	mov	r1, r5
 801a620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a624:	45c1      	cmp	r9, r8
 801a626:	bf2e      	itee	cs
 801a628:	2200      	movcs	r2, #0
 801a62a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801a62e:	f1a7 0808 	subcc.w	r8, r7, #8
 801a632:	f1b0 030b 	subs.w	r3, r0, #11
 801a636:	d016      	beq.n	801a666 <__b2d+0x9a>
 801a638:	f1c3 0720 	rsb	r7, r3, #32
 801a63c:	fa22 f107 	lsr.w	r1, r2, r7
 801a640:	45c8      	cmp	r8, r9
 801a642:	fa06 f603 	lsl.w	r6, r6, r3
 801a646:	ea46 0601 	orr.w	r6, r6, r1
 801a64a:	bf94      	ite	ls
 801a64c:	2100      	movls	r1, #0
 801a64e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801a652:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801a656:	fa02 f003 	lsl.w	r0, r2, r3
 801a65a:	40f9      	lsrs	r1, r7
 801a65c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a660:	ea40 0401 	orr.w	r4, r0, r1
 801a664:	e7da      	b.n	801a61c <__b2d+0x50>
 801a666:	4614      	mov	r4, r2
 801a668:	ea46 0501 	orr.w	r5, r6, r1
 801a66c:	e7d6      	b.n	801a61c <__b2d+0x50>
 801a66e:	bf00      	nop
 801a670:	3ff00000 	.word	0x3ff00000

0801a674 <__d2b>:
 801a674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a678:	2101      	movs	r1, #1
 801a67a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801a67e:	4690      	mov	r8, r2
 801a680:	461d      	mov	r5, r3
 801a682:	f7ff fc0d 	bl	8019ea0 <_Balloc>
 801a686:	4604      	mov	r4, r0
 801a688:	b930      	cbnz	r0, 801a698 <__d2b+0x24>
 801a68a:	4602      	mov	r2, r0
 801a68c:	f240 310a 	movw	r1, #778	; 0x30a
 801a690:	4b24      	ldr	r3, [pc, #144]	; (801a724 <__d2b+0xb0>)
 801a692:	4825      	ldr	r0, [pc, #148]	; (801a728 <__d2b+0xb4>)
 801a694:	f000 fa5e 	bl	801ab54 <__assert_func>
 801a698:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801a69c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801a6a0:	bb2d      	cbnz	r5, 801a6ee <__d2b+0x7a>
 801a6a2:	9301      	str	r3, [sp, #4]
 801a6a4:	f1b8 0300 	subs.w	r3, r8, #0
 801a6a8:	d026      	beq.n	801a6f8 <__d2b+0x84>
 801a6aa:	4668      	mov	r0, sp
 801a6ac:	9300      	str	r3, [sp, #0]
 801a6ae:	f7ff fd0d 	bl	801a0cc <__lo0bits>
 801a6b2:	9900      	ldr	r1, [sp, #0]
 801a6b4:	b1f0      	cbz	r0, 801a6f4 <__d2b+0x80>
 801a6b6:	9a01      	ldr	r2, [sp, #4]
 801a6b8:	f1c0 0320 	rsb	r3, r0, #32
 801a6bc:	fa02 f303 	lsl.w	r3, r2, r3
 801a6c0:	430b      	orrs	r3, r1
 801a6c2:	40c2      	lsrs	r2, r0
 801a6c4:	6163      	str	r3, [r4, #20]
 801a6c6:	9201      	str	r2, [sp, #4]
 801a6c8:	9b01      	ldr	r3, [sp, #4]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	bf14      	ite	ne
 801a6ce:	2102      	movne	r1, #2
 801a6d0:	2101      	moveq	r1, #1
 801a6d2:	61a3      	str	r3, [r4, #24]
 801a6d4:	6121      	str	r1, [r4, #16]
 801a6d6:	b1c5      	cbz	r5, 801a70a <__d2b+0x96>
 801a6d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a6dc:	4405      	add	r5, r0
 801a6de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a6e2:	603d      	str	r5, [r7, #0]
 801a6e4:	6030      	str	r0, [r6, #0]
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	b002      	add	sp, #8
 801a6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a6f2:	e7d6      	b.n	801a6a2 <__d2b+0x2e>
 801a6f4:	6161      	str	r1, [r4, #20]
 801a6f6:	e7e7      	b.n	801a6c8 <__d2b+0x54>
 801a6f8:	a801      	add	r0, sp, #4
 801a6fa:	f7ff fce7 	bl	801a0cc <__lo0bits>
 801a6fe:	2101      	movs	r1, #1
 801a700:	9b01      	ldr	r3, [sp, #4]
 801a702:	6121      	str	r1, [r4, #16]
 801a704:	6163      	str	r3, [r4, #20]
 801a706:	3020      	adds	r0, #32
 801a708:	e7e5      	b.n	801a6d6 <__d2b+0x62>
 801a70a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801a70e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a712:	6038      	str	r0, [r7, #0]
 801a714:	6918      	ldr	r0, [r3, #16]
 801a716:	f7ff fcb9 	bl	801a08c <__hi0bits>
 801a71a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801a71e:	6031      	str	r1, [r6, #0]
 801a720:	e7e1      	b.n	801a6e6 <__d2b+0x72>
 801a722:	bf00      	nop
 801a724:	0801b664 	.word	0x0801b664
 801a728:	0801b6f4 	.word	0x0801b6f4

0801a72c <__ratio>:
 801a72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a730:	4688      	mov	r8, r1
 801a732:	4669      	mov	r1, sp
 801a734:	4681      	mov	r9, r0
 801a736:	f7ff ff49 	bl	801a5cc <__b2d>
 801a73a:	460f      	mov	r7, r1
 801a73c:	4604      	mov	r4, r0
 801a73e:	460d      	mov	r5, r1
 801a740:	4640      	mov	r0, r8
 801a742:	a901      	add	r1, sp, #4
 801a744:	f7ff ff42 	bl	801a5cc <__b2d>
 801a748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a74c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a750:	468b      	mov	fp, r1
 801a752:	eba3 0c02 	sub.w	ip, r3, r2
 801a756:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a75a:	1a9b      	subs	r3, r3, r2
 801a75c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a760:	2b00      	cmp	r3, #0
 801a762:	bfd5      	itete	le
 801a764:	460a      	movle	r2, r1
 801a766:	462a      	movgt	r2, r5
 801a768:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a76c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a770:	bfd8      	it	le
 801a772:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a776:	465b      	mov	r3, fp
 801a778:	4602      	mov	r2, r0
 801a77a:	4639      	mov	r1, r7
 801a77c:	4620      	mov	r0, r4
 801a77e:	f7e6 f81f 	bl	80007c0 <__aeabi_ddiv>
 801a782:	b003      	add	sp, #12
 801a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a788 <__copybits>:
 801a788:	3901      	subs	r1, #1
 801a78a:	b570      	push	{r4, r5, r6, lr}
 801a78c:	1149      	asrs	r1, r1, #5
 801a78e:	6914      	ldr	r4, [r2, #16]
 801a790:	3101      	adds	r1, #1
 801a792:	f102 0314 	add.w	r3, r2, #20
 801a796:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a79a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a79e:	1f05      	subs	r5, r0, #4
 801a7a0:	42a3      	cmp	r3, r4
 801a7a2:	d30c      	bcc.n	801a7be <__copybits+0x36>
 801a7a4:	1aa3      	subs	r3, r4, r2
 801a7a6:	3b11      	subs	r3, #17
 801a7a8:	f023 0303 	bic.w	r3, r3, #3
 801a7ac:	3211      	adds	r2, #17
 801a7ae:	42a2      	cmp	r2, r4
 801a7b0:	bf88      	it	hi
 801a7b2:	2300      	movhi	r3, #0
 801a7b4:	4418      	add	r0, r3
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	4288      	cmp	r0, r1
 801a7ba:	d305      	bcc.n	801a7c8 <__copybits+0x40>
 801a7bc:	bd70      	pop	{r4, r5, r6, pc}
 801a7be:	f853 6b04 	ldr.w	r6, [r3], #4
 801a7c2:	f845 6f04 	str.w	r6, [r5, #4]!
 801a7c6:	e7eb      	b.n	801a7a0 <__copybits+0x18>
 801a7c8:	f840 3b04 	str.w	r3, [r0], #4
 801a7cc:	e7f4      	b.n	801a7b8 <__copybits+0x30>

0801a7ce <__any_on>:
 801a7ce:	f100 0214 	add.w	r2, r0, #20
 801a7d2:	6900      	ldr	r0, [r0, #16]
 801a7d4:	114b      	asrs	r3, r1, #5
 801a7d6:	4298      	cmp	r0, r3
 801a7d8:	b510      	push	{r4, lr}
 801a7da:	db11      	blt.n	801a800 <__any_on+0x32>
 801a7dc:	dd0a      	ble.n	801a7f4 <__any_on+0x26>
 801a7de:	f011 011f 	ands.w	r1, r1, #31
 801a7e2:	d007      	beq.n	801a7f4 <__any_on+0x26>
 801a7e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a7e8:	fa24 f001 	lsr.w	r0, r4, r1
 801a7ec:	fa00 f101 	lsl.w	r1, r0, r1
 801a7f0:	428c      	cmp	r4, r1
 801a7f2:	d10b      	bne.n	801a80c <__any_on+0x3e>
 801a7f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	d803      	bhi.n	801a804 <__any_on+0x36>
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	bd10      	pop	{r4, pc}
 801a800:	4603      	mov	r3, r0
 801a802:	e7f7      	b.n	801a7f4 <__any_on+0x26>
 801a804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a808:	2900      	cmp	r1, #0
 801a80a:	d0f5      	beq.n	801a7f8 <__any_on+0x2a>
 801a80c:	2001      	movs	r0, #1
 801a80e:	e7f6      	b.n	801a7fe <__any_on+0x30>

0801a810 <_calloc_r>:
 801a810:	b538      	push	{r3, r4, r5, lr}
 801a812:	fb02 f501 	mul.w	r5, r2, r1
 801a816:	4629      	mov	r1, r5
 801a818:	f7fc f9e6 	bl	8016be8 <_malloc_r>
 801a81c:	4604      	mov	r4, r0
 801a81e:	b118      	cbz	r0, 801a828 <_calloc_r+0x18>
 801a820:	462a      	mov	r2, r5
 801a822:	2100      	movs	r1, #0
 801a824:	f7fc f98c 	bl	8016b40 <memset>
 801a828:	4620      	mov	r0, r4
 801a82a:	bd38      	pop	{r3, r4, r5, pc}

0801a82c <__ssputs_r>:
 801a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a830:	688e      	ldr	r6, [r1, #8]
 801a832:	4682      	mov	sl, r0
 801a834:	429e      	cmp	r6, r3
 801a836:	460c      	mov	r4, r1
 801a838:	4690      	mov	r8, r2
 801a83a:	461f      	mov	r7, r3
 801a83c:	d838      	bhi.n	801a8b0 <__ssputs_r+0x84>
 801a83e:	898a      	ldrh	r2, [r1, #12]
 801a840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a844:	d032      	beq.n	801a8ac <__ssputs_r+0x80>
 801a846:	6825      	ldr	r5, [r4, #0]
 801a848:	6909      	ldr	r1, [r1, #16]
 801a84a:	3301      	adds	r3, #1
 801a84c:	eba5 0901 	sub.w	r9, r5, r1
 801a850:	6965      	ldr	r5, [r4, #20]
 801a852:	444b      	add	r3, r9
 801a854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a85c:	106d      	asrs	r5, r5, #1
 801a85e:	429d      	cmp	r5, r3
 801a860:	bf38      	it	cc
 801a862:	461d      	movcc	r5, r3
 801a864:	0553      	lsls	r3, r2, #21
 801a866:	d531      	bpl.n	801a8cc <__ssputs_r+0xa0>
 801a868:	4629      	mov	r1, r5
 801a86a:	f7fc f9bd 	bl	8016be8 <_malloc_r>
 801a86e:	4606      	mov	r6, r0
 801a870:	b950      	cbnz	r0, 801a888 <__ssputs_r+0x5c>
 801a872:	230c      	movs	r3, #12
 801a874:	f04f 30ff 	mov.w	r0, #4294967295
 801a878:	f8ca 3000 	str.w	r3, [sl]
 801a87c:	89a3      	ldrh	r3, [r4, #12]
 801a87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a882:	81a3      	strh	r3, [r4, #12]
 801a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a888:	464a      	mov	r2, r9
 801a88a:	6921      	ldr	r1, [r4, #16]
 801a88c:	f7fc f94a 	bl	8016b24 <memcpy>
 801a890:	89a3      	ldrh	r3, [r4, #12]
 801a892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a89a:	81a3      	strh	r3, [r4, #12]
 801a89c:	6126      	str	r6, [r4, #16]
 801a89e:	444e      	add	r6, r9
 801a8a0:	6026      	str	r6, [r4, #0]
 801a8a2:	463e      	mov	r6, r7
 801a8a4:	6165      	str	r5, [r4, #20]
 801a8a6:	eba5 0509 	sub.w	r5, r5, r9
 801a8aa:	60a5      	str	r5, [r4, #8]
 801a8ac:	42be      	cmp	r6, r7
 801a8ae:	d900      	bls.n	801a8b2 <__ssputs_r+0x86>
 801a8b0:	463e      	mov	r6, r7
 801a8b2:	4632      	mov	r2, r6
 801a8b4:	4641      	mov	r1, r8
 801a8b6:	6820      	ldr	r0, [r4, #0]
 801a8b8:	f000 f97c 	bl	801abb4 <memmove>
 801a8bc:	68a3      	ldr	r3, [r4, #8]
 801a8be:	6822      	ldr	r2, [r4, #0]
 801a8c0:	1b9b      	subs	r3, r3, r6
 801a8c2:	4432      	add	r2, r6
 801a8c4:	2000      	movs	r0, #0
 801a8c6:	60a3      	str	r3, [r4, #8]
 801a8c8:	6022      	str	r2, [r4, #0]
 801a8ca:	e7db      	b.n	801a884 <__ssputs_r+0x58>
 801a8cc:	462a      	mov	r2, r5
 801a8ce:	f000 f98b 	bl	801abe8 <_realloc_r>
 801a8d2:	4606      	mov	r6, r0
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	d1e1      	bne.n	801a89c <__ssputs_r+0x70>
 801a8d8:	4650      	mov	r0, sl
 801a8da:	6921      	ldr	r1, [r4, #16]
 801a8dc:	f7fc f938 	bl	8016b50 <_free_r>
 801a8e0:	e7c7      	b.n	801a872 <__ssputs_r+0x46>
	...

0801a8e4 <_svfiprintf_r>:
 801a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e8:	4698      	mov	r8, r3
 801a8ea:	898b      	ldrh	r3, [r1, #12]
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	061b      	lsls	r3, r3, #24
 801a8f0:	460d      	mov	r5, r1
 801a8f2:	4614      	mov	r4, r2
 801a8f4:	b09d      	sub	sp, #116	; 0x74
 801a8f6:	d50e      	bpl.n	801a916 <_svfiprintf_r+0x32>
 801a8f8:	690b      	ldr	r3, [r1, #16]
 801a8fa:	b963      	cbnz	r3, 801a916 <_svfiprintf_r+0x32>
 801a8fc:	2140      	movs	r1, #64	; 0x40
 801a8fe:	f7fc f973 	bl	8016be8 <_malloc_r>
 801a902:	6028      	str	r0, [r5, #0]
 801a904:	6128      	str	r0, [r5, #16]
 801a906:	b920      	cbnz	r0, 801a912 <_svfiprintf_r+0x2e>
 801a908:	230c      	movs	r3, #12
 801a90a:	603b      	str	r3, [r7, #0]
 801a90c:	f04f 30ff 	mov.w	r0, #4294967295
 801a910:	e0d1      	b.n	801aab6 <_svfiprintf_r+0x1d2>
 801a912:	2340      	movs	r3, #64	; 0x40
 801a914:	616b      	str	r3, [r5, #20]
 801a916:	2300      	movs	r3, #0
 801a918:	9309      	str	r3, [sp, #36]	; 0x24
 801a91a:	2320      	movs	r3, #32
 801a91c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a920:	2330      	movs	r3, #48	; 0x30
 801a922:	f04f 0901 	mov.w	r9, #1
 801a926:	f8cd 800c 	str.w	r8, [sp, #12]
 801a92a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aad0 <_svfiprintf_r+0x1ec>
 801a92e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a932:	4623      	mov	r3, r4
 801a934:	469a      	mov	sl, r3
 801a936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a93a:	b10a      	cbz	r2, 801a940 <_svfiprintf_r+0x5c>
 801a93c:	2a25      	cmp	r2, #37	; 0x25
 801a93e:	d1f9      	bne.n	801a934 <_svfiprintf_r+0x50>
 801a940:	ebba 0b04 	subs.w	fp, sl, r4
 801a944:	d00b      	beq.n	801a95e <_svfiprintf_r+0x7a>
 801a946:	465b      	mov	r3, fp
 801a948:	4622      	mov	r2, r4
 801a94a:	4629      	mov	r1, r5
 801a94c:	4638      	mov	r0, r7
 801a94e:	f7ff ff6d 	bl	801a82c <__ssputs_r>
 801a952:	3001      	adds	r0, #1
 801a954:	f000 80aa 	beq.w	801aaac <_svfiprintf_r+0x1c8>
 801a958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a95a:	445a      	add	r2, fp
 801a95c:	9209      	str	r2, [sp, #36]	; 0x24
 801a95e:	f89a 3000 	ldrb.w	r3, [sl]
 801a962:	2b00      	cmp	r3, #0
 801a964:	f000 80a2 	beq.w	801aaac <_svfiprintf_r+0x1c8>
 801a968:	2300      	movs	r3, #0
 801a96a:	f04f 32ff 	mov.w	r2, #4294967295
 801a96e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a972:	f10a 0a01 	add.w	sl, sl, #1
 801a976:	9304      	str	r3, [sp, #16]
 801a978:	9307      	str	r3, [sp, #28]
 801a97a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a97e:	931a      	str	r3, [sp, #104]	; 0x68
 801a980:	4654      	mov	r4, sl
 801a982:	2205      	movs	r2, #5
 801a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a988:	4851      	ldr	r0, [pc, #324]	; (801aad0 <_svfiprintf_r+0x1ec>)
 801a98a:	f7ff fa6f 	bl	8019e6c <memchr>
 801a98e:	9a04      	ldr	r2, [sp, #16]
 801a990:	b9d8      	cbnz	r0, 801a9ca <_svfiprintf_r+0xe6>
 801a992:	06d0      	lsls	r0, r2, #27
 801a994:	bf44      	itt	mi
 801a996:	2320      	movmi	r3, #32
 801a998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a99c:	0711      	lsls	r1, r2, #28
 801a99e:	bf44      	itt	mi
 801a9a0:	232b      	movmi	r3, #43	; 0x2b
 801a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9aa:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ac:	d015      	beq.n	801a9da <_svfiprintf_r+0xf6>
 801a9ae:	4654      	mov	r4, sl
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	f04f 0c0a 	mov.w	ip, #10
 801a9b6:	9a07      	ldr	r2, [sp, #28]
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9be:	3b30      	subs	r3, #48	; 0x30
 801a9c0:	2b09      	cmp	r3, #9
 801a9c2:	d94e      	bls.n	801aa62 <_svfiprintf_r+0x17e>
 801a9c4:	b1b0      	cbz	r0, 801a9f4 <_svfiprintf_r+0x110>
 801a9c6:	9207      	str	r2, [sp, #28]
 801a9c8:	e014      	b.n	801a9f4 <_svfiprintf_r+0x110>
 801a9ca:	eba0 0308 	sub.w	r3, r0, r8
 801a9ce:	fa09 f303 	lsl.w	r3, r9, r3
 801a9d2:	4313      	orrs	r3, r2
 801a9d4:	46a2      	mov	sl, r4
 801a9d6:	9304      	str	r3, [sp, #16]
 801a9d8:	e7d2      	b.n	801a980 <_svfiprintf_r+0x9c>
 801a9da:	9b03      	ldr	r3, [sp, #12]
 801a9dc:	1d19      	adds	r1, r3, #4
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	9103      	str	r1, [sp, #12]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	bfbb      	ittet	lt
 801a9e6:	425b      	neglt	r3, r3
 801a9e8:	f042 0202 	orrlt.w	r2, r2, #2
 801a9ec:	9307      	strge	r3, [sp, #28]
 801a9ee:	9307      	strlt	r3, [sp, #28]
 801a9f0:	bfb8      	it	lt
 801a9f2:	9204      	strlt	r2, [sp, #16]
 801a9f4:	7823      	ldrb	r3, [r4, #0]
 801a9f6:	2b2e      	cmp	r3, #46	; 0x2e
 801a9f8:	d10c      	bne.n	801aa14 <_svfiprintf_r+0x130>
 801a9fa:	7863      	ldrb	r3, [r4, #1]
 801a9fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fe:	d135      	bne.n	801aa6c <_svfiprintf_r+0x188>
 801aa00:	9b03      	ldr	r3, [sp, #12]
 801aa02:	3402      	adds	r4, #2
 801aa04:	1d1a      	adds	r2, r3, #4
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	9203      	str	r2, [sp, #12]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	bfb8      	it	lt
 801aa0e:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa12:	9305      	str	r3, [sp, #20]
 801aa14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aae0 <_svfiprintf_r+0x1fc>
 801aa18:	2203      	movs	r2, #3
 801aa1a:	4650      	mov	r0, sl
 801aa1c:	7821      	ldrb	r1, [r4, #0]
 801aa1e:	f7ff fa25 	bl	8019e6c <memchr>
 801aa22:	b140      	cbz	r0, 801aa36 <_svfiprintf_r+0x152>
 801aa24:	2340      	movs	r3, #64	; 0x40
 801aa26:	eba0 000a 	sub.w	r0, r0, sl
 801aa2a:	fa03 f000 	lsl.w	r0, r3, r0
 801aa2e:	9b04      	ldr	r3, [sp, #16]
 801aa30:	3401      	adds	r4, #1
 801aa32:	4303      	orrs	r3, r0
 801aa34:	9304      	str	r3, [sp, #16]
 801aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa3a:	2206      	movs	r2, #6
 801aa3c:	4825      	ldr	r0, [pc, #148]	; (801aad4 <_svfiprintf_r+0x1f0>)
 801aa3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa42:	f7ff fa13 	bl	8019e6c <memchr>
 801aa46:	2800      	cmp	r0, #0
 801aa48:	d038      	beq.n	801aabc <_svfiprintf_r+0x1d8>
 801aa4a:	4b23      	ldr	r3, [pc, #140]	; (801aad8 <_svfiprintf_r+0x1f4>)
 801aa4c:	bb1b      	cbnz	r3, 801aa96 <_svfiprintf_r+0x1b2>
 801aa4e:	9b03      	ldr	r3, [sp, #12]
 801aa50:	3307      	adds	r3, #7
 801aa52:	f023 0307 	bic.w	r3, r3, #7
 801aa56:	3308      	adds	r3, #8
 801aa58:	9303      	str	r3, [sp, #12]
 801aa5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa5c:	4433      	add	r3, r6
 801aa5e:	9309      	str	r3, [sp, #36]	; 0x24
 801aa60:	e767      	b.n	801a932 <_svfiprintf_r+0x4e>
 801aa62:	460c      	mov	r4, r1
 801aa64:	2001      	movs	r0, #1
 801aa66:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa6a:	e7a5      	b.n	801a9b8 <_svfiprintf_r+0xd4>
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	f04f 0c0a 	mov.w	ip, #10
 801aa72:	4619      	mov	r1, r3
 801aa74:	3401      	adds	r4, #1
 801aa76:	9305      	str	r3, [sp, #20]
 801aa78:	4620      	mov	r0, r4
 801aa7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa7e:	3a30      	subs	r2, #48	; 0x30
 801aa80:	2a09      	cmp	r2, #9
 801aa82:	d903      	bls.n	801aa8c <_svfiprintf_r+0x1a8>
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d0c5      	beq.n	801aa14 <_svfiprintf_r+0x130>
 801aa88:	9105      	str	r1, [sp, #20]
 801aa8a:	e7c3      	b.n	801aa14 <_svfiprintf_r+0x130>
 801aa8c:	4604      	mov	r4, r0
 801aa8e:	2301      	movs	r3, #1
 801aa90:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa94:	e7f0      	b.n	801aa78 <_svfiprintf_r+0x194>
 801aa96:	ab03      	add	r3, sp, #12
 801aa98:	9300      	str	r3, [sp, #0]
 801aa9a:	462a      	mov	r2, r5
 801aa9c:	4638      	mov	r0, r7
 801aa9e:	4b0f      	ldr	r3, [pc, #60]	; (801aadc <_svfiprintf_r+0x1f8>)
 801aaa0:	a904      	add	r1, sp, #16
 801aaa2:	f7fc f999 	bl	8016dd8 <_printf_float>
 801aaa6:	1c42      	adds	r2, r0, #1
 801aaa8:	4606      	mov	r6, r0
 801aaaa:	d1d6      	bne.n	801aa5a <_svfiprintf_r+0x176>
 801aaac:	89ab      	ldrh	r3, [r5, #12]
 801aaae:	065b      	lsls	r3, r3, #25
 801aab0:	f53f af2c 	bmi.w	801a90c <_svfiprintf_r+0x28>
 801aab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aab6:	b01d      	add	sp, #116	; 0x74
 801aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabc:	ab03      	add	r3, sp, #12
 801aabe:	9300      	str	r3, [sp, #0]
 801aac0:	462a      	mov	r2, r5
 801aac2:	4638      	mov	r0, r7
 801aac4:	4b05      	ldr	r3, [pc, #20]	; (801aadc <_svfiprintf_r+0x1f8>)
 801aac6:	a904      	add	r1, sp, #16
 801aac8:	f7fc fc22 	bl	8017310 <_printf_i>
 801aacc:	e7eb      	b.n	801aaa6 <_svfiprintf_r+0x1c2>
 801aace:	bf00      	nop
 801aad0:	0801b854 	.word	0x0801b854
 801aad4:	0801b85e 	.word	0x0801b85e
 801aad8:	08016dd9 	.word	0x08016dd9
 801aadc:	0801a82d 	.word	0x0801a82d
 801aae0:	0801b85a 	.word	0x0801b85a

0801aae4 <_read_r>:
 801aae4:	b538      	push	{r3, r4, r5, lr}
 801aae6:	4604      	mov	r4, r0
 801aae8:	4608      	mov	r0, r1
 801aaea:	4611      	mov	r1, r2
 801aaec:	2200      	movs	r2, #0
 801aaee:	4d05      	ldr	r5, [pc, #20]	; (801ab04 <_read_r+0x20>)
 801aaf0:	602a      	str	r2, [r5, #0]
 801aaf2:	461a      	mov	r2, r3
 801aaf4:	f7eb f987 	bl	8005e06 <_read>
 801aaf8:	1c43      	adds	r3, r0, #1
 801aafa:	d102      	bne.n	801ab02 <_read_r+0x1e>
 801aafc:	682b      	ldr	r3, [r5, #0]
 801aafe:	b103      	cbz	r3, 801ab02 <_read_r+0x1e>
 801ab00:	6023      	str	r3, [r4, #0]
 801ab02:	bd38      	pop	{r3, r4, r5, pc}
 801ab04:	2000e6ac 	.word	0x2000e6ac

0801ab08 <nan>:
 801ab08:	2000      	movs	r0, #0
 801ab0a:	4901      	ldr	r1, [pc, #4]	; (801ab10 <nan+0x8>)
 801ab0c:	4770      	bx	lr
 801ab0e:	bf00      	nop
 801ab10:	7ff80000 	.word	0x7ff80000

0801ab14 <strncmp>:
 801ab14:	b510      	push	{r4, lr}
 801ab16:	b16a      	cbz	r2, 801ab34 <strncmp+0x20>
 801ab18:	3901      	subs	r1, #1
 801ab1a:	1884      	adds	r4, r0, r2
 801ab1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ab20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d103      	bne.n	801ab30 <strncmp+0x1c>
 801ab28:	42a0      	cmp	r0, r4
 801ab2a:	d001      	beq.n	801ab30 <strncmp+0x1c>
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d1f5      	bne.n	801ab1c <strncmp+0x8>
 801ab30:	1a98      	subs	r0, r3, r2
 801ab32:	bd10      	pop	{r4, pc}
 801ab34:	4610      	mov	r0, r2
 801ab36:	e7fc      	b.n	801ab32 <strncmp+0x1e>

0801ab38 <__ascii_wctomb>:
 801ab38:	4603      	mov	r3, r0
 801ab3a:	4608      	mov	r0, r1
 801ab3c:	b141      	cbz	r1, 801ab50 <__ascii_wctomb+0x18>
 801ab3e:	2aff      	cmp	r2, #255	; 0xff
 801ab40:	d904      	bls.n	801ab4c <__ascii_wctomb+0x14>
 801ab42:	228a      	movs	r2, #138	; 0x8a
 801ab44:	f04f 30ff 	mov.w	r0, #4294967295
 801ab48:	601a      	str	r2, [r3, #0]
 801ab4a:	4770      	bx	lr
 801ab4c:	2001      	movs	r0, #1
 801ab4e:	700a      	strb	r2, [r1, #0]
 801ab50:	4770      	bx	lr
	...

0801ab54 <__assert_func>:
 801ab54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab56:	4614      	mov	r4, r2
 801ab58:	461a      	mov	r2, r3
 801ab5a:	4b09      	ldr	r3, [pc, #36]	; (801ab80 <__assert_func+0x2c>)
 801ab5c:	4605      	mov	r5, r0
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	68d8      	ldr	r0, [r3, #12]
 801ab62:	b14c      	cbz	r4, 801ab78 <__assert_func+0x24>
 801ab64:	4b07      	ldr	r3, [pc, #28]	; (801ab84 <__assert_func+0x30>)
 801ab66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab6a:	9100      	str	r1, [sp, #0]
 801ab6c:	462b      	mov	r3, r5
 801ab6e:	4906      	ldr	r1, [pc, #24]	; (801ab88 <__assert_func+0x34>)
 801ab70:	f000 f80e 	bl	801ab90 <fiprintf>
 801ab74:	f000 fa76 	bl	801b064 <abort>
 801ab78:	4b04      	ldr	r3, [pc, #16]	; (801ab8c <__assert_func+0x38>)
 801ab7a:	461c      	mov	r4, r3
 801ab7c:	e7f3      	b.n	801ab66 <__assert_func+0x12>
 801ab7e:	bf00      	nop
 801ab80:	20000294 	.word	0x20000294
 801ab84:	0801b865 	.word	0x0801b865
 801ab88:	0801b872 	.word	0x0801b872
 801ab8c:	0801b8a0 	.word	0x0801b8a0

0801ab90 <fiprintf>:
 801ab90:	b40e      	push	{r1, r2, r3}
 801ab92:	b503      	push	{r0, r1, lr}
 801ab94:	4601      	mov	r1, r0
 801ab96:	ab03      	add	r3, sp, #12
 801ab98:	4805      	ldr	r0, [pc, #20]	; (801abb0 <fiprintf+0x20>)
 801ab9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab9e:	6800      	ldr	r0, [r0, #0]
 801aba0:	9301      	str	r3, [sp, #4]
 801aba2:	f000 f86f 	bl	801ac84 <_vfiprintf_r>
 801aba6:	b002      	add	sp, #8
 801aba8:	f85d eb04 	ldr.w	lr, [sp], #4
 801abac:	b003      	add	sp, #12
 801abae:	4770      	bx	lr
 801abb0:	20000294 	.word	0x20000294

0801abb4 <memmove>:
 801abb4:	4288      	cmp	r0, r1
 801abb6:	b510      	push	{r4, lr}
 801abb8:	eb01 0402 	add.w	r4, r1, r2
 801abbc:	d902      	bls.n	801abc4 <memmove+0x10>
 801abbe:	4284      	cmp	r4, r0
 801abc0:	4623      	mov	r3, r4
 801abc2:	d807      	bhi.n	801abd4 <memmove+0x20>
 801abc4:	1e43      	subs	r3, r0, #1
 801abc6:	42a1      	cmp	r1, r4
 801abc8:	d008      	beq.n	801abdc <memmove+0x28>
 801abca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801abce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801abd2:	e7f8      	b.n	801abc6 <memmove+0x12>
 801abd4:	4601      	mov	r1, r0
 801abd6:	4402      	add	r2, r0
 801abd8:	428a      	cmp	r2, r1
 801abda:	d100      	bne.n	801abde <memmove+0x2a>
 801abdc:	bd10      	pop	{r4, pc}
 801abde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801abe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801abe6:	e7f7      	b.n	801abd8 <memmove+0x24>

0801abe8 <_realloc_r>:
 801abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abea:	4607      	mov	r7, r0
 801abec:	4614      	mov	r4, r2
 801abee:	460e      	mov	r6, r1
 801abf0:	b921      	cbnz	r1, 801abfc <_realloc_r+0x14>
 801abf2:	4611      	mov	r1, r2
 801abf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801abf8:	f7fb bff6 	b.w	8016be8 <_malloc_r>
 801abfc:	b922      	cbnz	r2, 801ac08 <_realloc_r+0x20>
 801abfe:	f7fb ffa7 	bl	8016b50 <_free_r>
 801ac02:	4625      	mov	r5, r4
 801ac04:	4628      	mov	r0, r5
 801ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac08:	f000 fa98 	bl	801b13c <_malloc_usable_size_r>
 801ac0c:	42a0      	cmp	r0, r4
 801ac0e:	d20f      	bcs.n	801ac30 <_realloc_r+0x48>
 801ac10:	4621      	mov	r1, r4
 801ac12:	4638      	mov	r0, r7
 801ac14:	f7fb ffe8 	bl	8016be8 <_malloc_r>
 801ac18:	4605      	mov	r5, r0
 801ac1a:	2800      	cmp	r0, #0
 801ac1c:	d0f2      	beq.n	801ac04 <_realloc_r+0x1c>
 801ac1e:	4631      	mov	r1, r6
 801ac20:	4622      	mov	r2, r4
 801ac22:	f7fb ff7f 	bl	8016b24 <memcpy>
 801ac26:	4631      	mov	r1, r6
 801ac28:	4638      	mov	r0, r7
 801ac2a:	f7fb ff91 	bl	8016b50 <_free_r>
 801ac2e:	e7e9      	b.n	801ac04 <_realloc_r+0x1c>
 801ac30:	4635      	mov	r5, r6
 801ac32:	e7e7      	b.n	801ac04 <_realloc_r+0x1c>

0801ac34 <__sfputc_r>:
 801ac34:	6893      	ldr	r3, [r2, #8]
 801ac36:	b410      	push	{r4}
 801ac38:	3b01      	subs	r3, #1
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	6093      	str	r3, [r2, #8]
 801ac3e:	da07      	bge.n	801ac50 <__sfputc_r+0x1c>
 801ac40:	6994      	ldr	r4, [r2, #24]
 801ac42:	42a3      	cmp	r3, r4
 801ac44:	db01      	blt.n	801ac4a <__sfputc_r+0x16>
 801ac46:	290a      	cmp	r1, #10
 801ac48:	d102      	bne.n	801ac50 <__sfputc_r+0x1c>
 801ac4a:	bc10      	pop	{r4}
 801ac4c:	f000 b94a 	b.w	801aee4 <__swbuf_r>
 801ac50:	6813      	ldr	r3, [r2, #0]
 801ac52:	1c58      	adds	r0, r3, #1
 801ac54:	6010      	str	r0, [r2, #0]
 801ac56:	7019      	strb	r1, [r3, #0]
 801ac58:	4608      	mov	r0, r1
 801ac5a:	bc10      	pop	{r4}
 801ac5c:	4770      	bx	lr

0801ac5e <__sfputs_r>:
 801ac5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac60:	4606      	mov	r6, r0
 801ac62:	460f      	mov	r7, r1
 801ac64:	4614      	mov	r4, r2
 801ac66:	18d5      	adds	r5, r2, r3
 801ac68:	42ac      	cmp	r4, r5
 801ac6a:	d101      	bne.n	801ac70 <__sfputs_r+0x12>
 801ac6c:	2000      	movs	r0, #0
 801ac6e:	e007      	b.n	801ac80 <__sfputs_r+0x22>
 801ac70:	463a      	mov	r2, r7
 801ac72:	4630      	mov	r0, r6
 801ac74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac78:	f7ff ffdc 	bl	801ac34 <__sfputc_r>
 801ac7c:	1c43      	adds	r3, r0, #1
 801ac7e:	d1f3      	bne.n	801ac68 <__sfputs_r+0xa>
 801ac80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ac84 <_vfiprintf_r>:
 801ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac88:	460d      	mov	r5, r1
 801ac8a:	4614      	mov	r4, r2
 801ac8c:	4698      	mov	r8, r3
 801ac8e:	4606      	mov	r6, r0
 801ac90:	b09d      	sub	sp, #116	; 0x74
 801ac92:	b118      	cbz	r0, 801ac9c <_vfiprintf_r+0x18>
 801ac94:	6983      	ldr	r3, [r0, #24]
 801ac96:	b90b      	cbnz	r3, 801ac9c <_vfiprintf_r+0x18>
 801ac98:	f7fb fe6e 	bl	8016978 <__sinit>
 801ac9c:	4b89      	ldr	r3, [pc, #548]	; (801aec4 <_vfiprintf_r+0x240>)
 801ac9e:	429d      	cmp	r5, r3
 801aca0:	d11b      	bne.n	801acda <_vfiprintf_r+0x56>
 801aca2:	6875      	ldr	r5, [r6, #4]
 801aca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aca6:	07d9      	lsls	r1, r3, #31
 801aca8:	d405      	bmi.n	801acb6 <_vfiprintf_r+0x32>
 801acaa:	89ab      	ldrh	r3, [r5, #12]
 801acac:	059a      	lsls	r2, r3, #22
 801acae:	d402      	bmi.n	801acb6 <_vfiprintf_r+0x32>
 801acb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acb2:	f7fb ff24 	bl	8016afe <__retarget_lock_acquire_recursive>
 801acb6:	89ab      	ldrh	r3, [r5, #12]
 801acb8:	071b      	lsls	r3, r3, #28
 801acba:	d501      	bpl.n	801acc0 <_vfiprintf_r+0x3c>
 801acbc:	692b      	ldr	r3, [r5, #16]
 801acbe:	b9eb      	cbnz	r3, 801acfc <_vfiprintf_r+0x78>
 801acc0:	4629      	mov	r1, r5
 801acc2:	4630      	mov	r0, r6
 801acc4:	f000 f960 	bl	801af88 <__swsetup_r>
 801acc8:	b1c0      	cbz	r0, 801acfc <_vfiprintf_r+0x78>
 801acca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801accc:	07dc      	lsls	r4, r3, #31
 801acce:	d50e      	bpl.n	801acee <_vfiprintf_r+0x6a>
 801acd0:	f04f 30ff 	mov.w	r0, #4294967295
 801acd4:	b01d      	add	sp, #116	; 0x74
 801acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acda:	4b7b      	ldr	r3, [pc, #492]	; (801aec8 <_vfiprintf_r+0x244>)
 801acdc:	429d      	cmp	r5, r3
 801acde:	d101      	bne.n	801ace4 <_vfiprintf_r+0x60>
 801ace0:	68b5      	ldr	r5, [r6, #8]
 801ace2:	e7df      	b.n	801aca4 <_vfiprintf_r+0x20>
 801ace4:	4b79      	ldr	r3, [pc, #484]	; (801aecc <_vfiprintf_r+0x248>)
 801ace6:	429d      	cmp	r5, r3
 801ace8:	bf08      	it	eq
 801acea:	68f5      	ldreq	r5, [r6, #12]
 801acec:	e7da      	b.n	801aca4 <_vfiprintf_r+0x20>
 801acee:	89ab      	ldrh	r3, [r5, #12]
 801acf0:	0598      	lsls	r0, r3, #22
 801acf2:	d4ed      	bmi.n	801acd0 <_vfiprintf_r+0x4c>
 801acf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acf6:	f7fb ff03 	bl	8016b00 <__retarget_lock_release_recursive>
 801acfa:	e7e9      	b.n	801acd0 <_vfiprintf_r+0x4c>
 801acfc:	2300      	movs	r3, #0
 801acfe:	9309      	str	r3, [sp, #36]	; 0x24
 801ad00:	2320      	movs	r3, #32
 801ad02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad06:	2330      	movs	r3, #48	; 0x30
 801ad08:	f04f 0901 	mov.w	r9, #1
 801ad0c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801aed0 <_vfiprintf_r+0x24c>
 801ad14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad18:	4623      	mov	r3, r4
 801ad1a:	469a      	mov	sl, r3
 801ad1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad20:	b10a      	cbz	r2, 801ad26 <_vfiprintf_r+0xa2>
 801ad22:	2a25      	cmp	r2, #37	; 0x25
 801ad24:	d1f9      	bne.n	801ad1a <_vfiprintf_r+0x96>
 801ad26:	ebba 0b04 	subs.w	fp, sl, r4
 801ad2a:	d00b      	beq.n	801ad44 <_vfiprintf_r+0xc0>
 801ad2c:	465b      	mov	r3, fp
 801ad2e:	4622      	mov	r2, r4
 801ad30:	4629      	mov	r1, r5
 801ad32:	4630      	mov	r0, r6
 801ad34:	f7ff ff93 	bl	801ac5e <__sfputs_r>
 801ad38:	3001      	adds	r0, #1
 801ad3a:	f000 80aa 	beq.w	801ae92 <_vfiprintf_r+0x20e>
 801ad3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad40:	445a      	add	r2, fp
 801ad42:	9209      	str	r2, [sp, #36]	; 0x24
 801ad44:	f89a 3000 	ldrb.w	r3, [sl]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	f000 80a2 	beq.w	801ae92 <_vfiprintf_r+0x20e>
 801ad4e:	2300      	movs	r3, #0
 801ad50:	f04f 32ff 	mov.w	r2, #4294967295
 801ad54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad58:	f10a 0a01 	add.w	sl, sl, #1
 801ad5c:	9304      	str	r3, [sp, #16]
 801ad5e:	9307      	str	r3, [sp, #28]
 801ad60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad64:	931a      	str	r3, [sp, #104]	; 0x68
 801ad66:	4654      	mov	r4, sl
 801ad68:	2205      	movs	r2, #5
 801ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad6e:	4858      	ldr	r0, [pc, #352]	; (801aed0 <_vfiprintf_r+0x24c>)
 801ad70:	f7ff f87c 	bl	8019e6c <memchr>
 801ad74:	9a04      	ldr	r2, [sp, #16]
 801ad76:	b9d8      	cbnz	r0, 801adb0 <_vfiprintf_r+0x12c>
 801ad78:	06d1      	lsls	r1, r2, #27
 801ad7a:	bf44      	itt	mi
 801ad7c:	2320      	movmi	r3, #32
 801ad7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad82:	0713      	lsls	r3, r2, #28
 801ad84:	bf44      	itt	mi
 801ad86:	232b      	movmi	r3, #43	; 0x2b
 801ad88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad8c:	f89a 3000 	ldrb.w	r3, [sl]
 801ad90:	2b2a      	cmp	r3, #42	; 0x2a
 801ad92:	d015      	beq.n	801adc0 <_vfiprintf_r+0x13c>
 801ad94:	4654      	mov	r4, sl
 801ad96:	2000      	movs	r0, #0
 801ad98:	f04f 0c0a 	mov.w	ip, #10
 801ad9c:	9a07      	ldr	r2, [sp, #28]
 801ad9e:	4621      	mov	r1, r4
 801ada0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ada4:	3b30      	subs	r3, #48	; 0x30
 801ada6:	2b09      	cmp	r3, #9
 801ada8:	d94e      	bls.n	801ae48 <_vfiprintf_r+0x1c4>
 801adaa:	b1b0      	cbz	r0, 801adda <_vfiprintf_r+0x156>
 801adac:	9207      	str	r2, [sp, #28]
 801adae:	e014      	b.n	801adda <_vfiprintf_r+0x156>
 801adb0:	eba0 0308 	sub.w	r3, r0, r8
 801adb4:	fa09 f303 	lsl.w	r3, r9, r3
 801adb8:	4313      	orrs	r3, r2
 801adba:	46a2      	mov	sl, r4
 801adbc:	9304      	str	r3, [sp, #16]
 801adbe:	e7d2      	b.n	801ad66 <_vfiprintf_r+0xe2>
 801adc0:	9b03      	ldr	r3, [sp, #12]
 801adc2:	1d19      	adds	r1, r3, #4
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	9103      	str	r1, [sp, #12]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	bfbb      	ittet	lt
 801adcc:	425b      	neglt	r3, r3
 801adce:	f042 0202 	orrlt.w	r2, r2, #2
 801add2:	9307      	strge	r3, [sp, #28]
 801add4:	9307      	strlt	r3, [sp, #28]
 801add6:	bfb8      	it	lt
 801add8:	9204      	strlt	r2, [sp, #16]
 801adda:	7823      	ldrb	r3, [r4, #0]
 801addc:	2b2e      	cmp	r3, #46	; 0x2e
 801adde:	d10c      	bne.n	801adfa <_vfiprintf_r+0x176>
 801ade0:	7863      	ldrb	r3, [r4, #1]
 801ade2:	2b2a      	cmp	r3, #42	; 0x2a
 801ade4:	d135      	bne.n	801ae52 <_vfiprintf_r+0x1ce>
 801ade6:	9b03      	ldr	r3, [sp, #12]
 801ade8:	3402      	adds	r4, #2
 801adea:	1d1a      	adds	r2, r3, #4
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	9203      	str	r2, [sp, #12]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	bfb8      	it	lt
 801adf4:	f04f 33ff 	movlt.w	r3, #4294967295
 801adf8:	9305      	str	r3, [sp, #20]
 801adfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aee0 <_vfiprintf_r+0x25c>
 801adfe:	2203      	movs	r2, #3
 801ae00:	4650      	mov	r0, sl
 801ae02:	7821      	ldrb	r1, [r4, #0]
 801ae04:	f7ff f832 	bl	8019e6c <memchr>
 801ae08:	b140      	cbz	r0, 801ae1c <_vfiprintf_r+0x198>
 801ae0a:	2340      	movs	r3, #64	; 0x40
 801ae0c:	eba0 000a 	sub.w	r0, r0, sl
 801ae10:	fa03 f000 	lsl.w	r0, r3, r0
 801ae14:	9b04      	ldr	r3, [sp, #16]
 801ae16:	3401      	adds	r4, #1
 801ae18:	4303      	orrs	r3, r0
 801ae1a:	9304      	str	r3, [sp, #16]
 801ae1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae20:	2206      	movs	r2, #6
 801ae22:	482c      	ldr	r0, [pc, #176]	; (801aed4 <_vfiprintf_r+0x250>)
 801ae24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae28:	f7ff f820 	bl	8019e6c <memchr>
 801ae2c:	2800      	cmp	r0, #0
 801ae2e:	d03f      	beq.n	801aeb0 <_vfiprintf_r+0x22c>
 801ae30:	4b29      	ldr	r3, [pc, #164]	; (801aed8 <_vfiprintf_r+0x254>)
 801ae32:	bb1b      	cbnz	r3, 801ae7c <_vfiprintf_r+0x1f8>
 801ae34:	9b03      	ldr	r3, [sp, #12]
 801ae36:	3307      	adds	r3, #7
 801ae38:	f023 0307 	bic.w	r3, r3, #7
 801ae3c:	3308      	adds	r3, #8
 801ae3e:	9303      	str	r3, [sp, #12]
 801ae40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae42:	443b      	add	r3, r7
 801ae44:	9309      	str	r3, [sp, #36]	; 0x24
 801ae46:	e767      	b.n	801ad18 <_vfiprintf_r+0x94>
 801ae48:	460c      	mov	r4, r1
 801ae4a:	2001      	movs	r0, #1
 801ae4c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae50:	e7a5      	b.n	801ad9e <_vfiprintf_r+0x11a>
 801ae52:	2300      	movs	r3, #0
 801ae54:	f04f 0c0a 	mov.w	ip, #10
 801ae58:	4619      	mov	r1, r3
 801ae5a:	3401      	adds	r4, #1
 801ae5c:	9305      	str	r3, [sp, #20]
 801ae5e:	4620      	mov	r0, r4
 801ae60:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae64:	3a30      	subs	r2, #48	; 0x30
 801ae66:	2a09      	cmp	r2, #9
 801ae68:	d903      	bls.n	801ae72 <_vfiprintf_r+0x1ee>
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d0c5      	beq.n	801adfa <_vfiprintf_r+0x176>
 801ae6e:	9105      	str	r1, [sp, #20]
 801ae70:	e7c3      	b.n	801adfa <_vfiprintf_r+0x176>
 801ae72:	4604      	mov	r4, r0
 801ae74:	2301      	movs	r3, #1
 801ae76:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae7a:	e7f0      	b.n	801ae5e <_vfiprintf_r+0x1da>
 801ae7c:	ab03      	add	r3, sp, #12
 801ae7e:	9300      	str	r3, [sp, #0]
 801ae80:	462a      	mov	r2, r5
 801ae82:	4630      	mov	r0, r6
 801ae84:	4b15      	ldr	r3, [pc, #84]	; (801aedc <_vfiprintf_r+0x258>)
 801ae86:	a904      	add	r1, sp, #16
 801ae88:	f7fb ffa6 	bl	8016dd8 <_printf_float>
 801ae8c:	4607      	mov	r7, r0
 801ae8e:	1c78      	adds	r0, r7, #1
 801ae90:	d1d6      	bne.n	801ae40 <_vfiprintf_r+0x1bc>
 801ae92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae94:	07d9      	lsls	r1, r3, #31
 801ae96:	d405      	bmi.n	801aea4 <_vfiprintf_r+0x220>
 801ae98:	89ab      	ldrh	r3, [r5, #12]
 801ae9a:	059a      	lsls	r2, r3, #22
 801ae9c:	d402      	bmi.n	801aea4 <_vfiprintf_r+0x220>
 801ae9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aea0:	f7fb fe2e 	bl	8016b00 <__retarget_lock_release_recursive>
 801aea4:	89ab      	ldrh	r3, [r5, #12]
 801aea6:	065b      	lsls	r3, r3, #25
 801aea8:	f53f af12 	bmi.w	801acd0 <_vfiprintf_r+0x4c>
 801aeac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aeae:	e711      	b.n	801acd4 <_vfiprintf_r+0x50>
 801aeb0:	ab03      	add	r3, sp, #12
 801aeb2:	9300      	str	r3, [sp, #0]
 801aeb4:	462a      	mov	r2, r5
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	4b08      	ldr	r3, [pc, #32]	; (801aedc <_vfiprintf_r+0x258>)
 801aeba:	a904      	add	r1, sp, #16
 801aebc:	f7fc fa28 	bl	8017310 <_printf_i>
 801aec0:	e7e4      	b.n	801ae8c <_vfiprintf_r+0x208>
 801aec2:	bf00      	nop
 801aec4:	0801b410 	.word	0x0801b410
 801aec8:	0801b430 	.word	0x0801b430
 801aecc:	0801b3f0 	.word	0x0801b3f0
 801aed0:	0801b854 	.word	0x0801b854
 801aed4:	0801b85e 	.word	0x0801b85e
 801aed8:	08016dd9 	.word	0x08016dd9
 801aedc:	0801ac5f 	.word	0x0801ac5f
 801aee0:	0801b85a 	.word	0x0801b85a

0801aee4 <__swbuf_r>:
 801aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aee6:	460e      	mov	r6, r1
 801aee8:	4614      	mov	r4, r2
 801aeea:	4605      	mov	r5, r0
 801aeec:	b118      	cbz	r0, 801aef6 <__swbuf_r+0x12>
 801aeee:	6983      	ldr	r3, [r0, #24]
 801aef0:	b90b      	cbnz	r3, 801aef6 <__swbuf_r+0x12>
 801aef2:	f7fb fd41 	bl	8016978 <__sinit>
 801aef6:	4b21      	ldr	r3, [pc, #132]	; (801af7c <__swbuf_r+0x98>)
 801aef8:	429c      	cmp	r4, r3
 801aefa:	d12b      	bne.n	801af54 <__swbuf_r+0x70>
 801aefc:	686c      	ldr	r4, [r5, #4]
 801aefe:	69a3      	ldr	r3, [r4, #24]
 801af00:	60a3      	str	r3, [r4, #8]
 801af02:	89a3      	ldrh	r3, [r4, #12]
 801af04:	071a      	lsls	r2, r3, #28
 801af06:	d52f      	bpl.n	801af68 <__swbuf_r+0x84>
 801af08:	6923      	ldr	r3, [r4, #16]
 801af0a:	b36b      	cbz	r3, 801af68 <__swbuf_r+0x84>
 801af0c:	6923      	ldr	r3, [r4, #16]
 801af0e:	6820      	ldr	r0, [r4, #0]
 801af10:	b2f6      	uxtb	r6, r6
 801af12:	1ac0      	subs	r0, r0, r3
 801af14:	6963      	ldr	r3, [r4, #20]
 801af16:	4637      	mov	r7, r6
 801af18:	4283      	cmp	r3, r0
 801af1a:	dc04      	bgt.n	801af26 <__swbuf_r+0x42>
 801af1c:	4621      	mov	r1, r4
 801af1e:	4628      	mov	r0, r5
 801af20:	f7fe fbda 	bl	80196d8 <_fflush_r>
 801af24:	bb30      	cbnz	r0, 801af74 <__swbuf_r+0x90>
 801af26:	68a3      	ldr	r3, [r4, #8]
 801af28:	3001      	adds	r0, #1
 801af2a:	3b01      	subs	r3, #1
 801af2c:	60a3      	str	r3, [r4, #8]
 801af2e:	6823      	ldr	r3, [r4, #0]
 801af30:	1c5a      	adds	r2, r3, #1
 801af32:	6022      	str	r2, [r4, #0]
 801af34:	701e      	strb	r6, [r3, #0]
 801af36:	6963      	ldr	r3, [r4, #20]
 801af38:	4283      	cmp	r3, r0
 801af3a:	d004      	beq.n	801af46 <__swbuf_r+0x62>
 801af3c:	89a3      	ldrh	r3, [r4, #12]
 801af3e:	07db      	lsls	r3, r3, #31
 801af40:	d506      	bpl.n	801af50 <__swbuf_r+0x6c>
 801af42:	2e0a      	cmp	r6, #10
 801af44:	d104      	bne.n	801af50 <__swbuf_r+0x6c>
 801af46:	4621      	mov	r1, r4
 801af48:	4628      	mov	r0, r5
 801af4a:	f7fe fbc5 	bl	80196d8 <_fflush_r>
 801af4e:	b988      	cbnz	r0, 801af74 <__swbuf_r+0x90>
 801af50:	4638      	mov	r0, r7
 801af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af54:	4b0a      	ldr	r3, [pc, #40]	; (801af80 <__swbuf_r+0x9c>)
 801af56:	429c      	cmp	r4, r3
 801af58:	d101      	bne.n	801af5e <__swbuf_r+0x7a>
 801af5a:	68ac      	ldr	r4, [r5, #8]
 801af5c:	e7cf      	b.n	801aefe <__swbuf_r+0x1a>
 801af5e:	4b09      	ldr	r3, [pc, #36]	; (801af84 <__swbuf_r+0xa0>)
 801af60:	429c      	cmp	r4, r3
 801af62:	bf08      	it	eq
 801af64:	68ec      	ldreq	r4, [r5, #12]
 801af66:	e7ca      	b.n	801aefe <__swbuf_r+0x1a>
 801af68:	4621      	mov	r1, r4
 801af6a:	4628      	mov	r0, r5
 801af6c:	f000 f80c 	bl	801af88 <__swsetup_r>
 801af70:	2800      	cmp	r0, #0
 801af72:	d0cb      	beq.n	801af0c <__swbuf_r+0x28>
 801af74:	f04f 37ff 	mov.w	r7, #4294967295
 801af78:	e7ea      	b.n	801af50 <__swbuf_r+0x6c>
 801af7a:	bf00      	nop
 801af7c:	0801b410 	.word	0x0801b410
 801af80:	0801b430 	.word	0x0801b430
 801af84:	0801b3f0 	.word	0x0801b3f0

0801af88 <__swsetup_r>:
 801af88:	4b32      	ldr	r3, [pc, #200]	; (801b054 <__swsetup_r+0xcc>)
 801af8a:	b570      	push	{r4, r5, r6, lr}
 801af8c:	681d      	ldr	r5, [r3, #0]
 801af8e:	4606      	mov	r6, r0
 801af90:	460c      	mov	r4, r1
 801af92:	b125      	cbz	r5, 801af9e <__swsetup_r+0x16>
 801af94:	69ab      	ldr	r3, [r5, #24]
 801af96:	b913      	cbnz	r3, 801af9e <__swsetup_r+0x16>
 801af98:	4628      	mov	r0, r5
 801af9a:	f7fb fced 	bl	8016978 <__sinit>
 801af9e:	4b2e      	ldr	r3, [pc, #184]	; (801b058 <__swsetup_r+0xd0>)
 801afa0:	429c      	cmp	r4, r3
 801afa2:	d10f      	bne.n	801afc4 <__swsetup_r+0x3c>
 801afa4:	686c      	ldr	r4, [r5, #4]
 801afa6:	89a3      	ldrh	r3, [r4, #12]
 801afa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afac:	0719      	lsls	r1, r3, #28
 801afae:	d42c      	bmi.n	801b00a <__swsetup_r+0x82>
 801afb0:	06dd      	lsls	r5, r3, #27
 801afb2:	d411      	bmi.n	801afd8 <__swsetup_r+0x50>
 801afb4:	2309      	movs	r3, #9
 801afb6:	6033      	str	r3, [r6, #0]
 801afb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afbc:	f04f 30ff 	mov.w	r0, #4294967295
 801afc0:	81a3      	strh	r3, [r4, #12]
 801afc2:	e03e      	b.n	801b042 <__swsetup_r+0xba>
 801afc4:	4b25      	ldr	r3, [pc, #148]	; (801b05c <__swsetup_r+0xd4>)
 801afc6:	429c      	cmp	r4, r3
 801afc8:	d101      	bne.n	801afce <__swsetup_r+0x46>
 801afca:	68ac      	ldr	r4, [r5, #8]
 801afcc:	e7eb      	b.n	801afa6 <__swsetup_r+0x1e>
 801afce:	4b24      	ldr	r3, [pc, #144]	; (801b060 <__swsetup_r+0xd8>)
 801afd0:	429c      	cmp	r4, r3
 801afd2:	bf08      	it	eq
 801afd4:	68ec      	ldreq	r4, [r5, #12]
 801afd6:	e7e6      	b.n	801afa6 <__swsetup_r+0x1e>
 801afd8:	0758      	lsls	r0, r3, #29
 801afda:	d512      	bpl.n	801b002 <__swsetup_r+0x7a>
 801afdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afde:	b141      	cbz	r1, 801aff2 <__swsetup_r+0x6a>
 801afe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afe4:	4299      	cmp	r1, r3
 801afe6:	d002      	beq.n	801afee <__swsetup_r+0x66>
 801afe8:	4630      	mov	r0, r6
 801afea:	f7fb fdb1 	bl	8016b50 <_free_r>
 801afee:	2300      	movs	r3, #0
 801aff0:	6363      	str	r3, [r4, #52]	; 0x34
 801aff2:	89a3      	ldrh	r3, [r4, #12]
 801aff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aff8:	81a3      	strh	r3, [r4, #12]
 801affa:	2300      	movs	r3, #0
 801affc:	6063      	str	r3, [r4, #4]
 801affe:	6923      	ldr	r3, [r4, #16]
 801b000:	6023      	str	r3, [r4, #0]
 801b002:	89a3      	ldrh	r3, [r4, #12]
 801b004:	f043 0308 	orr.w	r3, r3, #8
 801b008:	81a3      	strh	r3, [r4, #12]
 801b00a:	6923      	ldr	r3, [r4, #16]
 801b00c:	b94b      	cbnz	r3, 801b022 <__swsetup_r+0x9a>
 801b00e:	89a3      	ldrh	r3, [r4, #12]
 801b010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b018:	d003      	beq.n	801b022 <__swsetup_r+0x9a>
 801b01a:	4621      	mov	r1, r4
 801b01c:	4630      	mov	r0, r6
 801b01e:	f000 f84d 	bl	801b0bc <__smakebuf_r>
 801b022:	89a0      	ldrh	r0, [r4, #12]
 801b024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b028:	f010 0301 	ands.w	r3, r0, #1
 801b02c:	d00a      	beq.n	801b044 <__swsetup_r+0xbc>
 801b02e:	2300      	movs	r3, #0
 801b030:	60a3      	str	r3, [r4, #8]
 801b032:	6963      	ldr	r3, [r4, #20]
 801b034:	425b      	negs	r3, r3
 801b036:	61a3      	str	r3, [r4, #24]
 801b038:	6923      	ldr	r3, [r4, #16]
 801b03a:	b943      	cbnz	r3, 801b04e <__swsetup_r+0xc6>
 801b03c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b040:	d1ba      	bne.n	801afb8 <__swsetup_r+0x30>
 801b042:	bd70      	pop	{r4, r5, r6, pc}
 801b044:	0781      	lsls	r1, r0, #30
 801b046:	bf58      	it	pl
 801b048:	6963      	ldrpl	r3, [r4, #20]
 801b04a:	60a3      	str	r3, [r4, #8]
 801b04c:	e7f4      	b.n	801b038 <__swsetup_r+0xb0>
 801b04e:	2000      	movs	r0, #0
 801b050:	e7f7      	b.n	801b042 <__swsetup_r+0xba>
 801b052:	bf00      	nop
 801b054:	20000294 	.word	0x20000294
 801b058:	0801b410 	.word	0x0801b410
 801b05c:	0801b430 	.word	0x0801b430
 801b060:	0801b3f0 	.word	0x0801b3f0

0801b064 <abort>:
 801b064:	2006      	movs	r0, #6
 801b066:	b508      	push	{r3, lr}
 801b068:	f000 f898 	bl	801b19c <raise>
 801b06c:	2001      	movs	r0, #1
 801b06e:	f7ea fec0 	bl	8005df2 <_exit>

0801b072 <__swhatbuf_r>:
 801b072:	b570      	push	{r4, r5, r6, lr}
 801b074:	460e      	mov	r6, r1
 801b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b07a:	4614      	mov	r4, r2
 801b07c:	2900      	cmp	r1, #0
 801b07e:	461d      	mov	r5, r3
 801b080:	b096      	sub	sp, #88	; 0x58
 801b082:	da07      	bge.n	801b094 <__swhatbuf_r+0x22>
 801b084:	2300      	movs	r3, #0
 801b086:	602b      	str	r3, [r5, #0]
 801b088:	89b3      	ldrh	r3, [r6, #12]
 801b08a:	061a      	lsls	r2, r3, #24
 801b08c:	d410      	bmi.n	801b0b0 <__swhatbuf_r+0x3e>
 801b08e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b092:	e00e      	b.n	801b0b2 <__swhatbuf_r+0x40>
 801b094:	466a      	mov	r2, sp
 801b096:	f000 f89d 	bl	801b1d4 <_fstat_r>
 801b09a:	2800      	cmp	r0, #0
 801b09c:	dbf2      	blt.n	801b084 <__swhatbuf_r+0x12>
 801b09e:	9a01      	ldr	r2, [sp, #4]
 801b0a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b0a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b0a8:	425a      	negs	r2, r3
 801b0aa:	415a      	adcs	r2, r3
 801b0ac:	602a      	str	r2, [r5, #0]
 801b0ae:	e7ee      	b.n	801b08e <__swhatbuf_r+0x1c>
 801b0b0:	2340      	movs	r3, #64	; 0x40
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	6023      	str	r3, [r4, #0]
 801b0b6:	b016      	add	sp, #88	; 0x58
 801b0b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b0bc <__smakebuf_r>:
 801b0bc:	898b      	ldrh	r3, [r1, #12]
 801b0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b0c0:	079d      	lsls	r5, r3, #30
 801b0c2:	4606      	mov	r6, r0
 801b0c4:	460c      	mov	r4, r1
 801b0c6:	d507      	bpl.n	801b0d8 <__smakebuf_r+0x1c>
 801b0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b0cc:	6023      	str	r3, [r4, #0]
 801b0ce:	6123      	str	r3, [r4, #16]
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	6163      	str	r3, [r4, #20]
 801b0d4:	b002      	add	sp, #8
 801b0d6:	bd70      	pop	{r4, r5, r6, pc}
 801b0d8:	466a      	mov	r2, sp
 801b0da:	ab01      	add	r3, sp, #4
 801b0dc:	f7ff ffc9 	bl	801b072 <__swhatbuf_r>
 801b0e0:	9900      	ldr	r1, [sp, #0]
 801b0e2:	4605      	mov	r5, r0
 801b0e4:	4630      	mov	r0, r6
 801b0e6:	f7fb fd7f 	bl	8016be8 <_malloc_r>
 801b0ea:	b948      	cbnz	r0, 801b100 <__smakebuf_r+0x44>
 801b0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0f0:	059a      	lsls	r2, r3, #22
 801b0f2:	d4ef      	bmi.n	801b0d4 <__smakebuf_r+0x18>
 801b0f4:	f023 0303 	bic.w	r3, r3, #3
 801b0f8:	f043 0302 	orr.w	r3, r3, #2
 801b0fc:	81a3      	strh	r3, [r4, #12]
 801b0fe:	e7e3      	b.n	801b0c8 <__smakebuf_r+0xc>
 801b100:	4b0d      	ldr	r3, [pc, #52]	; (801b138 <__smakebuf_r+0x7c>)
 801b102:	62b3      	str	r3, [r6, #40]	; 0x28
 801b104:	89a3      	ldrh	r3, [r4, #12]
 801b106:	6020      	str	r0, [r4, #0]
 801b108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b10c:	81a3      	strh	r3, [r4, #12]
 801b10e:	9b00      	ldr	r3, [sp, #0]
 801b110:	6120      	str	r0, [r4, #16]
 801b112:	6163      	str	r3, [r4, #20]
 801b114:	9b01      	ldr	r3, [sp, #4]
 801b116:	b15b      	cbz	r3, 801b130 <__smakebuf_r+0x74>
 801b118:	4630      	mov	r0, r6
 801b11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b11e:	f000 f86b 	bl	801b1f8 <_isatty_r>
 801b122:	b128      	cbz	r0, 801b130 <__smakebuf_r+0x74>
 801b124:	89a3      	ldrh	r3, [r4, #12]
 801b126:	f023 0303 	bic.w	r3, r3, #3
 801b12a:	f043 0301 	orr.w	r3, r3, #1
 801b12e:	81a3      	strh	r3, [r4, #12]
 801b130:	89a0      	ldrh	r0, [r4, #12]
 801b132:	4305      	orrs	r5, r0
 801b134:	81a5      	strh	r5, [r4, #12]
 801b136:	e7cd      	b.n	801b0d4 <__smakebuf_r+0x18>
 801b138:	08016911 	.word	0x08016911

0801b13c <_malloc_usable_size_r>:
 801b13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b140:	1f18      	subs	r0, r3, #4
 801b142:	2b00      	cmp	r3, #0
 801b144:	bfbc      	itt	lt
 801b146:	580b      	ldrlt	r3, [r1, r0]
 801b148:	18c0      	addlt	r0, r0, r3
 801b14a:	4770      	bx	lr

0801b14c <_raise_r>:
 801b14c:	291f      	cmp	r1, #31
 801b14e:	b538      	push	{r3, r4, r5, lr}
 801b150:	4604      	mov	r4, r0
 801b152:	460d      	mov	r5, r1
 801b154:	d904      	bls.n	801b160 <_raise_r+0x14>
 801b156:	2316      	movs	r3, #22
 801b158:	6003      	str	r3, [r0, #0]
 801b15a:	f04f 30ff 	mov.w	r0, #4294967295
 801b15e:	bd38      	pop	{r3, r4, r5, pc}
 801b160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b162:	b112      	cbz	r2, 801b16a <_raise_r+0x1e>
 801b164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b168:	b94b      	cbnz	r3, 801b17e <_raise_r+0x32>
 801b16a:	4620      	mov	r0, r4
 801b16c:	f000 f830 	bl	801b1d0 <_getpid_r>
 801b170:	462a      	mov	r2, r5
 801b172:	4601      	mov	r1, r0
 801b174:	4620      	mov	r0, r4
 801b176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b17a:	f000 b817 	b.w	801b1ac <_kill_r>
 801b17e:	2b01      	cmp	r3, #1
 801b180:	d00a      	beq.n	801b198 <_raise_r+0x4c>
 801b182:	1c59      	adds	r1, r3, #1
 801b184:	d103      	bne.n	801b18e <_raise_r+0x42>
 801b186:	2316      	movs	r3, #22
 801b188:	6003      	str	r3, [r0, #0]
 801b18a:	2001      	movs	r0, #1
 801b18c:	e7e7      	b.n	801b15e <_raise_r+0x12>
 801b18e:	2400      	movs	r4, #0
 801b190:	4628      	mov	r0, r5
 801b192:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b196:	4798      	blx	r3
 801b198:	2000      	movs	r0, #0
 801b19a:	e7e0      	b.n	801b15e <_raise_r+0x12>

0801b19c <raise>:
 801b19c:	4b02      	ldr	r3, [pc, #8]	; (801b1a8 <raise+0xc>)
 801b19e:	4601      	mov	r1, r0
 801b1a0:	6818      	ldr	r0, [r3, #0]
 801b1a2:	f7ff bfd3 	b.w	801b14c <_raise_r>
 801b1a6:	bf00      	nop
 801b1a8:	20000294 	.word	0x20000294

0801b1ac <_kill_r>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	4d06      	ldr	r5, [pc, #24]	; (801b1cc <_kill_r+0x20>)
 801b1b2:	4604      	mov	r4, r0
 801b1b4:	4608      	mov	r0, r1
 801b1b6:	4611      	mov	r1, r2
 801b1b8:	602b      	str	r3, [r5, #0]
 801b1ba:	f7ea fe0a 	bl	8005dd2 <_kill>
 801b1be:	1c43      	adds	r3, r0, #1
 801b1c0:	d102      	bne.n	801b1c8 <_kill_r+0x1c>
 801b1c2:	682b      	ldr	r3, [r5, #0]
 801b1c4:	b103      	cbz	r3, 801b1c8 <_kill_r+0x1c>
 801b1c6:	6023      	str	r3, [r4, #0]
 801b1c8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ca:	bf00      	nop
 801b1cc:	2000e6ac 	.word	0x2000e6ac

0801b1d0 <_getpid_r>:
 801b1d0:	f7ea bdf8 	b.w	8005dc4 <_getpid>

0801b1d4 <_fstat_r>:
 801b1d4:	b538      	push	{r3, r4, r5, lr}
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	4d06      	ldr	r5, [pc, #24]	; (801b1f4 <_fstat_r+0x20>)
 801b1da:	4604      	mov	r4, r0
 801b1dc:	4608      	mov	r0, r1
 801b1de:	4611      	mov	r1, r2
 801b1e0:	602b      	str	r3, [r5, #0]
 801b1e2:	f7ea fe54 	bl	8005e8e <_fstat>
 801b1e6:	1c43      	adds	r3, r0, #1
 801b1e8:	d102      	bne.n	801b1f0 <_fstat_r+0x1c>
 801b1ea:	682b      	ldr	r3, [r5, #0]
 801b1ec:	b103      	cbz	r3, 801b1f0 <_fstat_r+0x1c>
 801b1ee:	6023      	str	r3, [r4, #0]
 801b1f0:	bd38      	pop	{r3, r4, r5, pc}
 801b1f2:	bf00      	nop
 801b1f4:	2000e6ac 	.word	0x2000e6ac

0801b1f8 <_isatty_r>:
 801b1f8:	b538      	push	{r3, r4, r5, lr}
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	4d05      	ldr	r5, [pc, #20]	; (801b214 <_isatty_r+0x1c>)
 801b1fe:	4604      	mov	r4, r0
 801b200:	4608      	mov	r0, r1
 801b202:	602b      	str	r3, [r5, #0]
 801b204:	f7ea fe52 	bl	8005eac <_isatty>
 801b208:	1c43      	adds	r3, r0, #1
 801b20a:	d102      	bne.n	801b212 <_isatty_r+0x1a>
 801b20c:	682b      	ldr	r3, [r5, #0]
 801b20e:	b103      	cbz	r3, 801b212 <_isatty_r+0x1a>
 801b210:	6023      	str	r3, [r4, #0]
 801b212:	bd38      	pop	{r3, r4, r5, pc}
 801b214:	2000e6ac 	.word	0x2000e6ac

0801b218 <_init>:
 801b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b21a:	bf00      	nop
 801b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b21e:	bc08      	pop	{r3}
 801b220:	469e      	mov	lr, r3
 801b222:	4770      	bx	lr

0801b224 <_fini>:
 801b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b226:	bf00      	nop
 801b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b22a:	bc08      	pop	{r3}
 801b22c:	469e      	mov	lr, r3
 801b22e:	4770      	bx	lr
