
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003680  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003814  08003814  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800381c  0800381c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000018  0800383c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800383c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa87  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198e  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2b6  00000000  00000000  0002d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9cc  00000000  00000000  0004cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c101c  00000000  00000000  00058552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011956e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d54  00000000  00000000  001195c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000018 	.word	0x20000018
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080037ec 	.word	0x080037ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000001c 	.word	0x2000001c
 80001c0:	080037ec 	.word	0x080037ec

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	; 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000432:	2afd      	cmp	r2, #253	; 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	; 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	; 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	; 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__aeabi_f2uiz>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	d20e      	bcs.n	80006a2 <__aeabi_f2uiz+0x22>
 8000684:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000688:	d30b      	bcc.n	80006a2 <__aeabi_f2uiz+0x22>
 800068a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800068e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000692:	d409      	bmi.n	80006a8 <__aeabi_f2uiz+0x28>
 8000694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800069c:	fa23 f002 	lsr.w	r0, r3, r2
 80006a0:	4770      	bx	lr
 80006a2:	f04f 0000 	mov.w	r0, #0
 80006a6:	4770      	bx	lr
 80006a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006ac:	d101      	bne.n	80006b2 <__aeabi_f2uiz+0x32>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	d102      	bne.n	80006b8 <__aeabi_f2uiz+0x38>
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	4770      	bx	lr
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <__aeabi_uldivmod>:
 80006c0:	b953      	cbnz	r3, 80006d8 <__aeabi_uldivmod+0x18>
 80006c2:	b94a      	cbnz	r2, 80006d8 <__aeabi_uldivmod+0x18>
 80006c4:	2900      	cmp	r1, #0
 80006c6:	bf08      	it	eq
 80006c8:	2800      	cmpeq	r0, #0
 80006ca:	bf1c      	itt	ne
 80006cc:	f04f 31ff 	movne.w	r1, #4294967295
 80006d0:	f04f 30ff 	movne.w	r0, #4294967295
 80006d4:	f000 b96e 	b.w	80009b4 <__aeabi_idiv0>
 80006d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e0:	f000 f806 	bl	80006f0 <__udivmoddi4>
 80006e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr

080006f0 <__udivmoddi4>:
 80006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f4:	9e08      	ldr	r6, [sp, #32]
 80006f6:	460d      	mov	r5, r1
 80006f8:	4604      	mov	r4, r0
 80006fa:	468e      	mov	lr, r1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 8083 	bne.w	8000808 <__udivmoddi4+0x118>
 8000702:	428a      	cmp	r2, r1
 8000704:	4617      	mov	r7, r2
 8000706:	d947      	bls.n	8000798 <__udivmoddi4+0xa8>
 8000708:	fab2 f382 	clz	r3, r2
 800070c:	b14b      	cbz	r3, 8000722 <__udivmoddi4+0x32>
 800070e:	f1c3 0120 	rsb	r1, r3, #32
 8000712:	fa05 fe03 	lsl.w	lr, r5, r3
 8000716:	fa20 f101 	lsr.w	r1, r0, r1
 800071a:	409f      	lsls	r7, r3
 800071c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000720:	409c      	lsls	r4, r3
 8000722:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000726:	fbbe fcf8 	udiv	ip, lr, r8
 800072a:	fa1f f987 	uxth.w	r9, r7
 800072e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000732:	fb0c f009 	mul.w	r0, ip, r9
 8000736:	0c21      	lsrs	r1, r4, #16
 8000738:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800073c:	4290      	cmp	r0, r2
 800073e:	d90a      	bls.n	8000756 <__udivmoddi4+0x66>
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000746:	f080 8118 	bcs.w	800097a <__udivmoddi4+0x28a>
 800074a:	4290      	cmp	r0, r2
 800074c:	f240 8115 	bls.w	800097a <__udivmoddi4+0x28a>
 8000750:	f1ac 0c02 	sub.w	ip, ip, #2
 8000754:	443a      	add	r2, r7
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	fbb2 f0f8 	udiv	r0, r2, r8
 800075c:	fb08 2210 	mls	r2, r8, r0, r2
 8000760:	fb00 f109 	mul.w	r1, r0, r9
 8000764:	b2a4      	uxth	r4, r4
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	42a1      	cmp	r1, r4
 800076c:	d909      	bls.n	8000782 <__udivmoddi4+0x92>
 800076e:	193c      	adds	r4, r7, r4
 8000770:	f100 32ff 	add.w	r2, r0, #4294967295
 8000774:	f080 8103 	bcs.w	800097e <__udivmoddi4+0x28e>
 8000778:	42a1      	cmp	r1, r4
 800077a:	f240 8100 	bls.w	800097e <__udivmoddi4+0x28e>
 800077e:	3802      	subs	r0, #2
 8000780:	443c      	add	r4, r7
 8000782:	1a64      	subs	r4, r4, r1
 8000784:	2100      	movs	r1, #0
 8000786:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078a:	b11e      	cbz	r6, 8000794 <__udivmoddi4+0xa4>
 800078c:	2200      	movs	r2, #0
 800078e:	40dc      	lsrs	r4, r3
 8000790:	e9c6 4200 	strd	r4, r2, [r6]
 8000794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000798:	b902      	cbnz	r2, 800079c <__udivmoddi4+0xac>
 800079a:	deff      	udf	#255	; 0xff
 800079c:	fab2 f382 	clz	r3, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14f      	bne.n	8000844 <__udivmoddi4+0x154>
 80007a4:	1a8d      	subs	r5, r1, r2
 80007a6:	2101      	movs	r1, #1
 80007a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80007ac:	fa1f f882 	uxth.w	r8, r2
 80007b0:	fbb5 fcfe 	udiv	ip, r5, lr
 80007b4:	fb0e 551c 	mls	r5, lr, ip, r5
 80007b8:	fb08 f00c 	mul.w	r0, r8, ip
 80007bc:	0c22      	lsrs	r2, r4, #16
 80007be:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d907      	bls.n	80007d6 <__udivmoddi4+0xe6>
 80007c6:	197d      	adds	r5, r7, r5
 80007c8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80007cc:	d202      	bcs.n	80007d4 <__udivmoddi4+0xe4>
 80007ce:	42a8      	cmp	r0, r5
 80007d0:	f200 80e9 	bhi.w	80009a6 <__udivmoddi4+0x2b6>
 80007d4:	4694      	mov	ip, r2
 80007d6:	1a2d      	subs	r5, r5, r0
 80007d8:	fbb5 f0fe 	udiv	r0, r5, lr
 80007dc:	fb0e 5510 	mls	r5, lr, r0, r5
 80007e0:	fb08 f800 	mul.w	r8, r8, r0
 80007e4:	b2a4      	uxth	r4, r4
 80007e6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007ea:	45a0      	cmp	r8, r4
 80007ec:	d907      	bls.n	80007fe <__udivmoddi4+0x10e>
 80007ee:	193c      	adds	r4, r7, r4
 80007f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007f4:	d202      	bcs.n	80007fc <__udivmoddi4+0x10c>
 80007f6:	45a0      	cmp	r8, r4
 80007f8:	f200 80d9 	bhi.w	80009ae <__udivmoddi4+0x2be>
 80007fc:	4610      	mov	r0, r2
 80007fe:	eba4 0408 	sub.w	r4, r4, r8
 8000802:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000806:	e7c0      	b.n	800078a <__udivmoddi4+0x9a>
 8000808:	428b      	cmp	r3, r1
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x12e>
 800080c:	2e00      	cmp	r6, #0
 800080e:	f000 80b1 	beq.w	8000974 <__udivmoddi4+0x284>
 8000812:	2100      	movs	r1, #0
 8000814:	e9c6 0500 	strd	r0, r5, [r6]
 8000818:	4608      	mov	r0, r1
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	fab3 f183 	clz	r1, r3
 8000822:	2900      	cmp	r1, #0
 8000824:	d14b      	bne.n	80008be <__udivmoddi4+0x1ce>
 8000826:	42ab      	cmp	r3, r5
 8000828:	d302      	bcc.n	8000830 <__udivmoddi4+0x140>
 800082a:	4282      	cmp	r2, r0
 800082c:	f200 80b9 	bhi.w	80009a2 <__udivmoddi4+0x2b2>
 8000830:	1a84      	subs	r4, r0, r2
 8000832:	eb65 0303 	sbc.w	r3, r5, r3
 8000836:	2001      	movs	r0, #1
 8000838:	469e      	mov	lr, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d0aa      	beq.n	8000794 <__udivmoddi4+0xa4>
 800083e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000842:	e7a7      	b.n	8000794 <__udivmoddi4+0xa4>
 8000844:	409f      	lsls	r7, r3
 8000846:	f1c3 0220 	rsb	r2, r3, #32
 800084a:	40d1      	lsrs	r1, r2
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fbb1 f0fe 	udiv	r0, r1, lr
 8000854:	fa1f f887 	uxth.w	r8, r7
 8000858:	fb0e 1110 	mls	r1, lr, r0, r1
 800085c:	fa24 f202 	lsr.w	r2, r4, r2
 8000860:	409d      	lsls	r5, r3
 8000862:	fb00 fc08 	mul.w	ip, r0, r8
 8000866:	432a      	orrs	r2, r5
 8000868:	0c15      	lsrs	r5, r2, #16
 800086a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800086e:	45ac      	cmp	ip, r5
 8000870:	fa04 f403 	lsl.w	r4, r4, r3
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0x19a>
 8000876:	197d      	adds	r5, r7, r5
 8000878:	f100 31ff 	add.w	r1, r0, #4294967295
 800087c:	f080 808f 	bcs.w	800099e <__udivmoddi4+0x2ae>
 8000880:	45ac      	cmp	ip, r5
 8000882:	f240 808c 	bls.w	800099e <__udivmoddi4+0x2ae>
 8000886:	3802      	subs	r0, #2
 8000888:	443d      	add	r5, r7
 800088a:	eba5 050c 	sub.w	r5, r5, ip
 800088e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000892:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000896:	fb01 f908 	mul.w	r9, r1, r8
 800089a:	b295      	uxth	r5, r2
 800089c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80008a0:	45a9      	cmp	r9, r5
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x1c4>
 80008a4:	197d      	adds	r5, r7, r5
 80008a6:	f101 32ff 	add.w	r2, r1, #4294967295
 80008aa:	d274      	bcs.n	8000996 <__udivmoddi4+0x2a6>
 80008ac:	45a9      	cmp	r9, r5
 80008ae:	d972      	bls.n	8000996 <__udivmoddi4+0x2a6>
 80008b0:	3902      	subs	r1, #2
 80008b2:	443d      	add	r5, r7
 80008b4:	eba5 0509 	sub.w	r5, r5, r9
 80008b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008bc:	e778      	b.n	80007b0 <__udivmoddi4+0xc0>
 80008be:	f1c1 0720 	rsb	r7, r1, #32
 80008c2:	408b      	lsls	r3, r1
 80008c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80008c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80008cc:	fa25 f407 	lsr.w	r4, r5, r7
 80008d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d4:	fbb4 f9fe 	udiv	r9, r4, lr
 80008d8:	fa1f f88c 	uxth.w	r8, ip
 80008dc:	fb0e 4419 	mls	r4, lr, r9, r4
 80008e0:	fa20 f307 	lsr.w	r3, r0, r7
 80008e4:	fb09 fa08 	mul.w	sl, r9, r8
 80008e8:	408d      	lsls	r5, r1
 80008ea:	431d      	orrs	r5, r3
 80008ec:	0c2b      	lsrs	r3, r5, #16
 80008ee:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80008f2:	45a2      	cmp	sl, r4
 80008f4:	fa02 f201 	lsl.w	r2, r2, r1
 80008f8:	fa00 f301 	lsl.w	r3, r0, r1
 80008fc:	d909      	bls.n	8000912 <__udivmoddi4+0x222>
 80008fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000902:	f109 30ff 	add.w	r0, r9, #4294967295
 8000906:	d248      	bcs.n	800099a <__udivmoddi4+0x2aa>
 8000908:	45a2      	cmp	sl, r4
 800090a:	d946      	bls.n	800099a <__udivmoddi4+0x2aa>
 800090c:	f1a9 0902 	sub.w	r9, r9, #2
 8000910:	4464      	add	r4, ip
 8000912:	eba4 040a 	sub.w	r4, r4, sl
 8000916:	fbb4 f0fe 	udiv	r0, r4, lr
 800091a:	fb0e 4410 	mls	r4, lr, r0, r4
 800091e:	fb00 fa08 	mul.w	sl, r0, r8
 8000922:	b2ad      	uxth	r5, r5
 8000924:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000928:	45a2      	cmp	sl, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x24e>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f100 35ff 	add.w	r5, r0, #4294967295
 8000934:	d22d      	bcs.n	8000992 <__udivmoddi4+0x2a2>
 8000936:	45a2      	cmp	sl, r4
 8000938:	d92b      	bls.n	8000992 <__udivmoddi4+0x2a2>
 800093a:	3802      	subs	r0, #2
 800093c:	4464      	add	r4, ip
 800093e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000942:	fba0 8902 	umull	r8, r9, r0, r2
 8000946:	eba4 040a 	sub.w	r4, r4, sl
 800094a:	454c      	cmp	r4, r9
 800094c:	46c6      	mov	lr, r8
 800094e:	464d      	mov	r5, r9
 8000950:	d319      	bcc.n	8000986 <__udivmoddi4+0x296>
 8000952:	d016      	beq.n	8000982 <__udivmoddi4+0x292>
 8000954:	b15e      	cbz	r6, 800096e <__udivmoddi4+0x27e>
 8000956:	ebb3 020e 	subs.w	r2, r3, lr
 800095a:	eb64 0405 	sbc.w	r4, r4, r5
 800095e:	fa04 f707 	lsl.w	r7, r4, r7
 8000962:	fa22 f301 	lsr.w	r3, r2, r1
 8000966:	431f      	orrs	r7, r3
 8000968:	40cc      	lsrs	r4, r1
 800096a:	e9c6 7400 	strd	r7, r4, [r6]
 800096e:	2100      	movs	r1, #0
 8000970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000974:	4631      	mov	r1, r6
 8000976:	4630      	mov	r0, r6
 8000978:	e70c      	b.n	8000794 <__udivmoddi4+0xa4>
 800097a:	468c      	mov	ip, r1
 800097c:	e6eb      	b.n	8000756 <__udivmoddi4+0x66>
 800097e:	4610      	mov	r0, r2
 8000980:	e6ff      	b.n	8000782 <__udivmoddi4+0x92>
 8000982:	4543      	cmp	r3, r8
 8000984:	d2e6      	bcs.n	8000954 <__udivmoddi4+0x264>
 8000986:	ebb8 0e02 	subs.w	lr, r8, r2
 800098a:	eb69 050c 	sbc.w	r5, r9, ip
 800098e:	3801      	subs	r0, #1
 8000990:	e7e0      	b.n	8000954 <__udivmoddi4+0x264>
 8000992:	4628      	mov	r0, r5
 8000994:	e7d3      	b.n	800093e <__udivmoddi4+0x24e>
 8000996:	4611      	mov	r1, r2
 8000998:	e78c      	b.n	80008b4 <__udivmoddi4+0x1c4>
 800099a:	4681      	mov	r9, r0
 800099c:	e7b9      	b.n	8000912 <__udivmoddi4+0x222>
 800099e:	4608      	mov	r0, r1
 80009a0:	e773      	b.n	800088a <__udivmoddi4+0x19a>
 80009a2:	4608      	mov	r0, r1
 80009a4:	e749      	b.n	800083a <__udivmoddi4+0x14a>
 80009a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80009aa:	443d      	add	r5, r7
 80009ac:	e713      	b.n	80007d6 <__udivmoddi4+0xe6>
 80009ae:	3802      	subs	r0, #2
 80009b0:	443c      	add	r4, r7
 80009b2:	e724      	b.n	80007fe <__udivmoddi4+0x10e>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <fanOn>:

float system_fan_sp = 3.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn(TIM_HandleTypeDef sys,TIM_HandleTypeDef plant,TIM_HandleTypeDef heat_cool)
{
 80009b8:	b084      	sub	sp, #16
 80009ba:	b598      	push	{r3, r4, r7, lr}
 80009bc:	af00      	add	r7, sp, #0
 80009be:	f107 0410 	add.w	r4, r7, #16
 80009c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   HAL_TIM_PWM_Start(&heat_cool, TIM_CHANNEL_1);	// start heater cooler fan control
 80009c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 f8b9 	bl	8002b44 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;								// sets the PWM frequency of 25Mhz
 80009d2:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <fanOn+0xec>)
 80009d4:	f640 323f 	movw	r2, #2879	; 0xb3f
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;			// sets the fan speed
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <fanOn+0xec>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fca6 	bl	8000330 <__aeabi_ui2f>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <fanOn+0xf0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4610      	mov	r0, r2
 80009ee:	f7ff fdab 	bl	8000548 <__aeabi_fdiv>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4c2b      	ldr	r4, [pc, #172]	; (8000aa4 <fanOn+0xec>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe42 	bl	8000680 <__aeabi_f2uiz>
 80009fc:	4603      	mov	r3, r0
 80009fe:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <fanOn+0xec>)
 8000a02:	f245 0214 	movw	r2, #20500	; 0x5014
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&sys, TIM_CHANNEL_1);			// start system fan control
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f107 0010 	add.w	r0, r7, #16
 8000a0e:	f002 f899 	bl	8002b44 <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <fanOn+0xf4>)
 8000a14:	f240 529f 	movw	r2, #1439	; 0x59f
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/system_fan_sp;				// sets the fan speed
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <fanOn+0xf4>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc86 	bl	8000330 <__aeabi_ui2f>
 8000a24:	4602      	mov	r2, r0
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <fanOn+0xf8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f7ff fd8b 	bl	8000548 <__aeabi_fdiv>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4c1d      	ldr	r4, [pc, #116]	; (8000aac <fanOn+0xf4>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe22 	bl	8000680 <__aeabi_f2uiz>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <fanOn+0xf4>)
 8000a42:	f245 0214 	movw	r2, #20500	; 0x5014
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <fanOn+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28

   HAL_TIM_PWM_Start(&plant, TIM_CHANNEL_1);		// start plant fan control
 8000a4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 f875 	bl	8002b44 <HAL_TIM_PWM_Start>
   TIM3->ARR = 1439;								// sets the PWM frequency of 25Mhz
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <fanOn+0xf4>)
 8000a5c:	f240 529f 	movw	r2, #1439	; 0x59f
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM3->CCR1 = (TIM3->ARR)/plant_fan_sp;				// sets the fan speed
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <fanOn+0xf4>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fc62 	bl	8000330 <__aeabi_ui2f>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <fanOn+0xfc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4610      	mov	r0, r2
 8000a76:	f7ff fd67 	bl	8000548 <__aeabi_fdiv>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <fanOn+0xf4>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdfe 	bl	8000680 <__aeabi_f2uiz>
 8000a84:	4603      	mov	r3, r0
 8000a86:	6363      	str	r3, [r4, #52]	; 0x34
   TIM3->CNT = 20500;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <fanOn+0xf4>)
 8000a8a:	f245 0214 	movw	r2, #20500	; 0x5014
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
   TIM1->PSC = 0;
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <fanOn+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8000a9e:	b004      	add	sp, #16
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	40000400 	.word	0x40000400
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	b0b7      	sub	sp, #220	; 0xdc
 8000abc:	af32      	add	r7, sp, #200	; 0xc8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fdcf 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f845 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fb2d 	bl	8001124 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aca:	f000 f889 	bl	8000be0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ace:	f000 f8d9 	bl	8000c84 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000ad2:	f000 f929 	bl	8000d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ad6:	f000 f9c7 	bl	8000e68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ada:	f000 fa11 	bl	8000f00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ade:	f000 fa85 	bl	8000fec <MX_TIM4_Init>
  MX_TIM10_Init();
 8000ae2:	f000 fad1 	bl	8001088 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


   //HAL_TIM_Base_Start(&htim4);

   HAL_TIM_Base_Start(&htim4);
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <main+0x84>)
 8000ae8:	f001 ff6e 	bl	80029c8 <HAL_TIM_Base_Start>
   int  runOnce = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
   double miliLiters = 30;
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <main+0x88>)
 8000af6:	e9c7 2300 	strd	r2, r3, [r7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fanOn(htim3,htim10,htim1); // turn fan control on (sys_fan,plant_fan,heat_cool_fan)
 8000afa:	4e12      	ldr	r6, [pc, #72]	; (8000b44 <main+0x8c>)
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <main+0x90>)
 8000afe:	ab20      	add	r3, sp, #128	; 0x80
 8000b00:	4611      	mov	r1, r2
 8000b02:	2248      	movs	r2, #72	; 0x48
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fe5b 	bl	80037c0 <memcpy>
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <main+0x94>)
 8000b0c:	ab0e      	add	r3, sp, #56	; 0x38
 8000b0e:	4611      	mov	r1, r2
 8000b10:	2248      	movs	r2, #72	; 0x48
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fe54 	bl	80037c0 <memcpy>
 8000b18:	466d      	mov	r5, sp
 8000b1a:	f106 0410 	add.w	r4, r6, #16
 8000b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b36:	f7ff ff3f 	bl	80009b8 <fanOn>
  {
 8000b3a:	e7de      	b.n	8000afa <main+0x42>
 8000b3c:	20000034 	.word	0x20000034
 8000b40:	403e0000 	.word	0x403e0000
 8000b44:	2000010c 	.word	0x2000010c
 8000b48:	200001b0 	.word	0x200001b0
 8000b4c:	200000c4 	.word	0x200000c4

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b092      	sub	sp, #72	; 0x48
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fe3c 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b82:	2300      	movs	r3, #0
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b86:	2308      	movs	r3, #8
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b8a:	23d8      	movs	r3, #216	; 0xd8
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b92:	2304      	movs	r3, #4
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fad2 	bl	8002144 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000ba6:	f000 fb61 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fd0c 	bl	80025e4 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000bd2:	f000 fb4b 	bl	800126c <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3748      	adds	r7, #72	; 0x48
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <MX_ADC1_Init+0x9c>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <MX_ADC1_Init+0xa0>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c42:	f000 fd7b 	bl	800173c <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fb0e 	bl	800126c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c50:	230f      	movs	r3, #15
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c62:	f000 fdaf 	bl	80017c4 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c6c:	f000 fafe 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000154 	.word	0x20000154
 8000c7c:	40012000 	.word	0x40012000
 8000c80:	0f000001 	.word	0x0f000001

08000c84 <MX_ADC2_Init>:
  * @param None
  * @retval None
  */

static void MX_ADC2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000c98:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <MX_ADC2_Init+0x9c>)
 8000c9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MX_ADC2_Init+0xa0>)
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000ce6:	f000 fd29 	bl	800173c <HAL_ADC_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000cf0:	f000 fabc 	bl	800126c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_ADC2_Init+0x98>)
 8000d06:	f000 fd5d 	bl	80017c4 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000d10:	f000 faac 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000007c 	.word	0x2000007c
 8000d20:	40012100 	.word	0x40012100
 8000d24:	0f000001 	.word	0x0f000001

08000d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b096      	sub	sp, #88	; 0x58
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 fd3b 	bl	80037dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d68:	4a3e      	ldr	r2, [pc, #248]	; (8000e64 <MX_TIM1_Init+0x13c>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d6c:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d8c:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d92:	4833      	ldr	r0, [pc, #204]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000d94:	f001 fdc8 	bl	8002928 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d9e:	f000 fa65 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dac:	4619      	mov	r1, r3
 8000dae:	482c      	ldr	r0, [pc, #176]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000db0:	f002 f84e 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dba:	f000 fa57 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000dc0:	f001 fe68 	bl	8002a94 <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dca:	f000 fa4f 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4820      	ldr	r0, [pc, #128]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000dde:	f002 fbff 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000de8:	f000 fa40 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4813      	ldr	r0, [pc, #76]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000e12:	f001 ff5f 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e1c:	f000 fa26 	bl	800126c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000e44:	f002 fc46 	bl	80036d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e4e:	f000 fa0d 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM1_Init+0x138>)
 8000e54:	f000 fb22 	bl	800149c <HAL_TIM_MspPostInit>

}
 8000e58:	bf00      	nop
 8000e5a:	3758      	adds	r7, #88	; 0x58
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200001b0 	.word	0x200001b0
 8000e64:	40010000 	.word	0x40010000

08000e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e8e:	2223      	movs	r2, #35	; 0x23
 8000e90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_TIM2_Init+0x94>)
 8000eae:	f001 fd3b 	bl	8002928 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eb8:	f000 f9d8 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM2_Init+0x94>)
 8000eca:	f001 ffc1 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f000 f9ca 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ee6:	f002 fb7b 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ef0:	f000 f9bc 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <MX_TIM3_Init+0xe8>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f56:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f58:	f001 fce6 	bl	8002928 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f62:	f000 f983 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f74:	f001 ff6c 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f7e:	f000 f975 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000f84:	f001 fd86 	bl	8002a94 <HAL_TIM_PWM_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f8e:	f000 f96d 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000fa2:	f002 fb1d 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fac:	f000 f95e 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000fc8:	f001 fe84 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fd2:	f000 f94b 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <MX_TIM3_Init+0xe4>)
 8000fd8:	f000 fa60 	bl	800149c <HAL_TIM_MspPostInit>

}
 8000fdc:	bf00      	nop
 8000fde:	3738      	adds	r7, #56	; 0x38
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000010c 	.word	0x2000010c
 8000fe8:	40000400 	.word	0x40000400

08000fec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_TIM4_Init+0x94>)
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_TIM4_Init+0x98>)
 800100c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM4_Init+0x94>)
 8001010:	2223      	movs	r2, #35	; 0x23
 8001012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM4_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM4_Init+0x94>)
 800101c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_TIM4_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM4_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_TIM4_Init+0x94>)
 8001030:	f001 fc7a 	bl	8002928 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800103a:	f000 f917 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM4_Init+0x94>)
 800104c:	f001 ff00 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 f909 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM4_Init+0x94>)
 8001068:	f002 faba 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001072:	f000 f8fb 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000034 	.word	0x20000034
 8001084:	40000800 	.word	0x40000800

08001088 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_TIM10_Init+0x94>)
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <MX_TIM10_Init+0x98>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_TIM10_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_TIM10_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_TIM10_Init+0x94>)
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_TIM10_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_TIM10_Init+0x94>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <MX_TIM10_Init+0x94>)
 80010c8:	f001 fc2e 	bl	8002928 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010d2:	f000 f8cb 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <MX_TIM10_Init+0x94>)
 80010d8:	f001 fcdc 	bl	8002a94 <HAL_TIM_PWM_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010e2:	f000 f8c3 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM10_Init+0x94>)
 80010fe:	f001 fde9 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001108:	f000 f8b0 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM10_Init+0x94>)
 800110e:	f000 f9c5 	bl	800149c <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000c4 	.word	0x200000c4
 8001120:	40014400 	.word	0x40014400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <MX_GPIO_Init+0x13c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <MX_GPIO_Init+0x13c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0320 	and.w	r3, r3, #32
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a39      	ldr	r2, [pc, #228]	; (8001260 <MX_GPIO_Init+0x13c>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a32      	ldr	r2, [pc, #200]	; (8001260 <MX_GPIO_Init+0x13c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_GPIO_Init+0x13c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_GPIO_Init+0x13c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <MX_GPIO_Init+0x13c>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_GPIO_Init+0x13c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	211c      	movs	r1, #28
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <MX_GPIO_Init+0x140>)
 80011cc:	f000 ffa2 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_enable_Pin|ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80011d6:	4823      	ldr	r0, [pc, #140]	; (8001264 <MX_GPIO_Init+0x140>)
 80011d8:	f000 ff9c 	bl	8002114 <HAL_GPIO_WritePin>
                          |grow_light_Pin|water_pump_enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2101      	movs	r1, #1
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <MX_GPIO_Init+0x144>)
 80011e2:	f000 ff97 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80011e6:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80011ea:	617b      	str	r3, [r7, #20]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4819      	ldr	r0, [pc, #100]	; (8001264 <MX_GPIO_Init+0x140>)
 8001200:	f000 fdea 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_GPIO_Init+0x144>)
 800121c:	f000 fddc 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin;
 8001220:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <MX_GPIO_Init+0x140>)
 800123a:	f000 fdcd 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0x140>)
 8001252:	f000 fdc1 	bl	8001dd8 <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40020000 	.word	0x40020000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x48>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x48>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x48>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_MspInit+0x48>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_MspInit+0x48>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_MspInit+0x48>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <HAL_ADC_MspInit+0xd8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d128      	bne.n	8001338 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a2c      	ldr	r2, [pc, #176]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = nutrient_level_Pin;
 800131e:	2320      	movs	r3, #32
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(nutrient_level_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <HAL_ADC_MspInit+0xe0>)
 8001332:	f000 fd51 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001336:	e02c      	b.n	8001392 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_ADC_MspInit+0xe4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d127      	bne.n	8001392 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_ADC_MspInit+0xdc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = water_ph_Pin;
 800137a:	2310      	movs	r3, #16
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(water_ph_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <HAL_ADC_MspInit+0xe8>)
 800138e:	f000 fd23 	bl	8001dd8 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40012000 	.word	0x40012000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40012100 	.word	0x40012100
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_TIM_Base_MspInit+0xd8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a30      	ldr	r2, [pc, #192]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013de:	e04e      	b.n	800147e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d10e      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]
}
 8001406:	e03a      	b.n	800147e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_TIM_Base_MspInit+0xe0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10e      	bne.n	8001430 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
}
 800142e:	e026      	b.n	800147e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_TIM_Base_MspInit+0xe4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10e      	bne.n	8001458 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
}
 8001456:	e012      	b.n	800147e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_TIM_Base_MspInit+0xe8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10d      	bne.n	800147e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_TIM_Base_MspInit+0xdc>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40010000 	.word	0x40010000
 800148c:	40023800 	.word	0x40023800
 8001490:	40000400 	.word	0x40000400
 8001494:	40000800 	.word	0x40000800
 8001498:	40014400 	.word	0x40014400

0800149c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a36      	ldr	r2, [pc, #216]	; (8001594 <HAL_TIM_MspPostInit+0xf8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11f      	bne.n	80014fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin;
 80014da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(heat_cool_fan_speed_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4829      	ldr	r0, [pc, #164]	; (800159c <HAL_TIM_MspPostInit+0x100>)
 80014f8:	f000 fc6e 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80014fc:	e046      	b.n	800158c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_TIM_MspPostInit+0x104>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d11e      	bne.n	8001546 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = system_fan_speed_Pin;
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001534:	2302      	movs	r3, #2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(system_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4819      	ldr	r0, [pc, #100]	; (80015a4 <HAL_TIM_MspPostInit+0x108>)
 8001540:	f000 fc4a 	bl	8001dd8 <HAL_GPIO_Init>
}
 8001544:	e022      	b.n	800158c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM10)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_TIM_MspPostInit+0x10c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d11d      	bne.n	800158c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_TIM_MspPostInit+0xfc>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 800156c:	2340      	movs	r3, #64	; 0x40
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800157c:	2303      	movs	r3, #3
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_TIM_MspPostInit+0x110>)
 8001588:	f000 fc26 	bl	8001dd8 <HAL_GPIO_Init>
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40010000 	.word	0x40010000
 8001598:	40023800 	.word	0x40023800
 800159c:	40021000 	.word	0x40021000
 80015a0:	40000400 	.word	0x40000400
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40014400 	.word	0x40014400
 80015ac:	40021400 	.word	0x40021400

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f885 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}

080015fe <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
	...

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	; (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001636:	f7ff ffe2 	bl	80015fe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f002 f89d 	bl	8003778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fa3b 	bl	8000ab8 <main>
  bx  lr
 8001642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001644:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001650:	08003824 	.word	0x08003824
  ldr r2, =_sbss
 8001654:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001658:	20000244 	.word	0x20000244

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 fb71 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fdf0 	bl	8001278 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fb7b 	bl	8001dbe <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 fb51 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000014 	.word	0x20000014
 8001700:	20000010 	.word	0x20000010

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000014 	.word	0x20000014
 8001724:	20000240 	.word	0x20000240

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000240 	.word	0x20000240

0800173c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e033      	b.n	80017ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fdb2 	bl	80012c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001782:	f023 0302 	bic.w	r3, r3, #2
 8001786:	f043 0202 	orr.w	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f938 	bl	8001a04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
 80017aa:	e001      	b.n	80017b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1c>
 80017dc:	2302      	movs	r3, #2
 80017de:	e103      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x224>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d925      	bls.n	800183c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	4603      	mov	r3, r0
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4403      	add	r3, r0
 800182e:	3b1e      	subs	r3, #30
 8001830:	409a      	lsls	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e022      	b.n	8001882 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	2207      	movs	r2, #7
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6919      	ldr	r1, [r3, #16]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	4603      	mov	r3, r0
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b06      	cmp	r3, #6
 8001888:	d824      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b05      	subs	r3, #5
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b05      	subs	r3, #5
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
 80018d2:	e04c      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d824      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b23      	subs	r3, #35	; 0x23
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b23      	subs	r3, #35	; 0x23
 8001918:	fa00 f203 	lsl.w	r2, r0, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	e023      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b41      	subs	r3, #65	; 0x41
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b41      	subs	r3, #65	; 0x41
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_ADC_ConfigChannel+0x230>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d109      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1c8>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b12      	cmp	r3, #18
 800197e:	d105      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_ADC_ConfigChannel+0x234>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_ADC_ConfigChannel+0x234>)
 8001986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_ADC_ConfigChannel+0x230>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d123      	bne.n	80019de <HAL_ADC_ConfigChannel+0x21a>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d003      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x1e2>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b11      	cmp	r3, #17
 80019a4:	d11b      	bne.n	80019de <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_ADC_ConfigChannel+0x234>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_ADC_ConfigChannel+0x234>)
 80019ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d111      	bne.n	80019de <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_ADC_ConfigChannel+0x238>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_ADC_ConfigChannel+0x23c>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9a      	lsrs	r2, r3, #18
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40012300 	.word	0x40012300
 80019fc:	2000000c 	.word	0x2000000c
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a0c:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <ADC_Init+0x204>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <ADC_Init+0x204>)
 8001a12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a18:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <ADC_Init+0x204>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4979      	ldr	r1, [pc, #484]	; (8001c08 <ADC_Init+0x204>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	021a      	lsls	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <ADC_Init+0x208>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6899      	ldr	r1, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	e00f      	b.n	8001afe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0202 	bic.w	r2, r2, #2
 8001b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	005a      	lsls	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d027      	beq.n	8001b7c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	3b01      	subs	r3, #1
 8001b52:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001b56:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	fa92 f2a2 	rbit	r2, r2
 8001b5e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	fa03 f102 	lsl.w	r1, r3, r2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e007      	b.n	8001b8c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	051a      	lsls	r2, r3, #20
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bce:	025a      	lsls	r2, r3, #9
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	029a      	lsls	r2, r3, #10
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40012300 	.word	0x40012300
 8001c0c:	0f000001 	.word	0x0f000001

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff90 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff49 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff5e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff90 	bl	8001cc8 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5f 	bl	8001c74 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffb0 	bl	8001d2c <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e16f      	b.n	80020c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8161 	beq.w	80020c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_GPIO_Init+0x40>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d130      	bne.n	8001e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 0201 	and.w	r2, r3, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d017      	beq.n	8001eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d123      	bne.n	8001f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0203 	and.w	r2, r3, #3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80bb 	beq.w	80020c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_GPIO_Init+0x30c>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	4a63      	ldr	r2, [pc, #396]	; (80020e4 <HAL_GPIO_Init+0x30c>)
 8001f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_GPIO_Init+0x30c>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f68:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <HAL_GPIO_Init+0x310>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x314>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d031      	beq.n	8001ff8 <HAL_GPIO_Init+0x220>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_GPIO_Init+0x318>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02b      	beq.n	8001ff4 <HAL_GPIO_Init+0x21c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a55      	ldr	r2, [pc, #340]	; (80020f4 <HAL_GPIO_Init+0x31c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d025      	beq.n	8001ff0 <HAL_GPIO_Init+0x218>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_GPIO_Init+0x320>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01f      	beq.n	8001fec <HAL_GPIO_Init+0x214>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d019      	beq.n	8001fe8 <HAL_GPIO_Init+0x210>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_GPIO_Init+0x328>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_GPIO_Init+0x20c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x208>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a50      	ldr	r2, [pc, #320]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	; (800210c <HAL_GPIO_Init+0x334>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x200>
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	e010      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fd8:	2309      	movs	r3, #9
 8001fda:	e00e      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fdc:	2307      	movs	r3, #7
 8001fde:	e00c      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fe0:	2306      	movs	r3, #6
 8001fe2:	e00a      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	e008      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e004      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_GPIO_Init+0x222>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	4093      	lsls	r3, r2
 8002004:	461a      	mov	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800200c:	4936      	ldr	r1, [pc, #216]	; (80020e8 <HAL_GPIO_Init+0x310>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_GPIO_Init+0x338>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_GPIO_Init+0x338>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_GPIO_Init+0x338>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_GPIO_Init+0x338>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_GPIO_Init+0x338>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_GPIO_Init+0x338>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_GPIO_Init+0x338>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_GPIO_Init+0x338>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f ae88 	bne.w	8001de8 <HAL_GPIO_Init+0x10>
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40013800 	.word	0x40013800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	40021400 	.word	0x40021400
 8002104:	40021800 	.word	0x40021800
 8002108:	40021c00 	.word	0x40021c00
 800210c:	40022000 	.word	0x40022000
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e237      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d050      	beq.n	8002204 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002162:	4ba3      	ldr	r3, [pc, #652]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d00c      	beq.n	8002188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4ba0      	ldr	r3, [pc, #640]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b9d      	ldr	r3, [pc, #628]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b99      	ldr	r3, [pc, #612]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d036      	beq.n	8002202 <HAL_RCC_OscConfig+0xbe>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d132      	bne.n	8002202 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e212      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4b93      	ldr	r3, [pc, #588]	; (80023f4 <HAL_RCC_OscConfig+0x2b0>)
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d013      	beq.n	80021da <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fab9 	bl	8001728 <HAL_GetTick>
 80021b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ba:	f7ff fab5 	bl	8001728 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1fc      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x76>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff faa5 	bl	8001728 <HAL_GetTick>
 80021de:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e2:	f7ff faa1 	bl	8001728 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1e8      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f4:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x9e>
 8002200:	e000      	b.n	8002204 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d077      	beq.n	8002300 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002210:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00b      	beq.n	8002234 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002224:	2b08      	cmp	r3, #8
 8002226:	d126      	bne.n	8002276 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002228:	4b71      	ldr	r3, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d120      	bne.n	8002276 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002234:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e1bc      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	21f8      	movs	r1, #248	; 0xf8
 800225a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	fa91 f1a1 	rbit	r1, r1
 8002262:	6179      	str	r1, [r7, #20]
  return result;
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	fab1 f181 	clz	r1, r1
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	408b      	lsls	r3, r1
 800226e:	4960      	ldr	r1, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002274:	e044      	b.n	8002300 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227e:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x2b4>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fa50 	bl	8001728 <HAL_GetTick>
 8002288:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff fa4c 	bl	8001728 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e193      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	21f8      	movs	r1, #248	; 0xf8
 80022b8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6939      	ldr	r1, [r7, #16]
 80022bc:	fa91 f1a1 	rbit	r1, r1
 80022c0:	60f9      	str	r1, [r7, #12]
  return result;
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	fab1 f181 	clz	r1, r1
 80022c8:	b2c9      	uxtb	r1, r1
 80022ca:	408b      	lsls	r3, r1
 80022cc:	4948      	ldr	r1, [pc, #288]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
 80022d2:	e015      	b.n	8002300 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <HAL_RCC_OscConfig+0x2b4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fa25 	bl	8001728 <HAL_GetTick>
 80022de:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fa21 	bl	8001728 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e168      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d030      	beq.n	800236e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d016      	beq.n	8002342 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_RCC_OscConfig+0x2b8>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7ff fa05 	bl	8001728 <HAL_GetTick>
 800231e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff fa01 	bl	8001728 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e148      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x1de>
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_OscConfig+0x2b8>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff f9ee 	bl	8001728 <HAL_GetTick>
 800234c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff f9ea 	bl	8001728 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e131      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8088 	beq.w	800248c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d110      	bne.n	80023b0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_RCC_OscConfig+0x2bc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a12      	ldr	r2, [pc, #72]	; (8002400 <HAL_RCC_OscConfig+0x2bc>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCC_OscConfig+0x2bc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d123      	bne.n	8002410 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_RCC_OscConfig+0x2bc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_OscConfig+0x2bc>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f9a8 	bl	8001728 <HAL_GetTick>
 80023d8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7ff f9a4 	bl	8001728 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0eb      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40023802 	.word	0x40023802
 80023f8:	42470000 	.word	0x42470000
 80023fc:	42470e80 	.word	0x42470e80
 8002400:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x48c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0e5      	beq.n	80023dc <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <HAL_RCC_OscConfig+0x490>)
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff f981 	bl	8001728 <HAL_GetTick>
 8002426:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff f97d 	bl	8001728 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0c2      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x2e6>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff f96b 	bl	8001728 <HAL_GetTick>
 8002452:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff f967 	bl	8001728 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0ac      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8097 	beq.w	80025c4 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002496:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d061      	beq.n	8002566 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d146      	bne.n	8002538 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_RCC_OscConfig+0x498>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f93a 	bl	8001728 <HAL_GetTick>
 80024b4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff f936 	bl	8001728 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e07d      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x49c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	69d1      	ldr	r1, [r2, #28]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a12      	ldr	r2, [r2, #32]
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ec:	0192      	lsls	r2, r2, #6
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024f4:	0612      	lsls	r2, r2, #24
 80024f6:	4311      	orrs	r1, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024fc:	0852      	lsrs	r2, r2, #1
 80024fe:	3a01      	subs	r2, #1
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	430a      	orrs	r2, r1
 8002504:	4934      	ldr	r1, [pc, #208]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_OscConfig+0x498>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff f90a 	bl	8001728 <HAL_GetTick>
 8002514:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff f906 	bl	8001728 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04d      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x3d4>
 8002536:	e045      	b.n	80025c4 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_OscConfig+0x498>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7ff f8f3 	bl	8001728 <HAL_GetTick>
 8002542:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7ff f8ef 	bl	8001728 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e036      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x402>
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e029      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_OscConfig+0x494>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	429a      	cmp	r2, r3
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d115      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000
 80025d4:	40023870 	.word	0x40023870
 80025d8:	40023800 	.word	0x40023800
 80025dc:	42470060 	.word	0x42470060
 80025e0:	f0bc8000 	.word	0xf0bc8000

080025e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d2      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d90c      	bls.n	8002620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0be      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a5b      	ldr	r2, [pc, #364]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002650:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4950      	ldr	r1, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d040      	beq.n	80026fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d115      	bne.n	80026ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e085      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b44      	ldr	r3, [pc, #272]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e079      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e071      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026cc:	f7ff f82c 	bl	8001728 <HAL_GetTick>
 80026d0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7ff f828 	bl	8001728 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e059      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e03c      	b.n	800279e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4913      	ldr	r1, [pc, #76]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002762:	f000 f82b 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002766:	4601      	mov	r1, r0
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	22f0      	movs	r2, #240	; 0xf0
 8002772:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	60fa      	str	r2, [r7, #12]
  return result;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	40d3      	lsrs	r3, r2
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	fa21 f303 	lsr.w	r3, r1, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff84 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08003804 	.word	0x08003804
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	20000010 	.word	0x20000010

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c2:	2100      	movs	r1, #0
 80027c4:	6079      	str	r1, [r7, #4]
 80027c6:	2100      	movs	r1, #0
 80027c8:	60f9      	str	r1, [r7, #12]
 80027ca:	2100      	movs	r1, #0
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ce:	2100      	movs	r1, #0
 80027d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d2:	4952      	ldr	r1, [pc, #328]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 80027d4:	6889      	ldr	r1, [r1, #8]
 80027d6:	f001 010c 	and.w	r1, r1, #12
 80027da:	2908      	cmp	r1, #8
 80027dc:	d00d      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x3e>
 80027de:	2908      	cmp	r1, #8
 80027e0:	f200 8094 	bhi.w	800290c <HAL_RCC_GetSysClockFreq+0x150>
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d002      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x32>
 80027e8:	2904      	cmp	r1, #4
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x38>
 80027ec:	e08e      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_GetSysClockFreq+0x164>)
 80027f0:	60bb      	str	r3, [r7, #8]
       break;
 80027f2:	e08e      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_RCC_GetSysClockFreq+0x168>)
 80027f6:	60bb      	str	r3, [r7, #8]
      break;
 80027f8:	e08b      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fa:	4948      	ldr	r1, [pc, #288]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 80027fc:	6849      	ldr	r1, [r1, #4]
 80027fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002802:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002804:	4945      	ldr	r1, [pc, #276]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 8002806:	6849      	ldr	r1, [r1, #4]
 8002808:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800280c:	2900      	cmp	r1, #0
 800280e:	d024      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4942      	ldr	r1, [pc, #264]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 8002812:	6849      	ldr	r1, [r1, #4]
 8002814:	0989      	lsrs	r1, r1, #6
 8002816:	4608      	mov	r0, r1
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002820:	f04f 0500 	mov.w	r5, #0
 8002824:	ea00 0204 	and.w	r2, r0, r4
 8002828:	ea01 0305 	and.w	r3, r1, r5
 800282c:	493d      	ldr	r1, [pc, #244]	; (8002924 <HAL_RCC_GetSysClockFreq+0x168>)
 800282e:	fb01 f003 	mul.w	r0, r1, r3
 8002832:	2100      	movs	r1, #0
 8002834:	fb01 f102 	mul.w	r1, r1, r2
 8002838:	1844      	adds	r4, r0, r1
 800283a:	493a      	ldr	r1, [pc, #232]	; (8002924 <HAL_RCC_GetSysClockFreq+0x168>)
 800283c:	fba2 0101 	umull	r0, r1, r2, r1
 8002840:	1863      	adds	r3, r4, r1
 8002842:	4619      	mov	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f7fd ff38 	bl	80006c0 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e04a      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	099b      	lsrs	r3, r3, #6
 8002860:	461a      	mov	r2, r3
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f240 10ff 	movw	r0, #511	; 0x1ff
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	ea02 0400 	and.w	r4, r2, r0
 8002872:	ea03 0501 	and.w	r5, r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	014b      	lsls	r3, r1, #5
 8002884:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002888:	0142      	lsls	r2, r0, #5
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	1b00      	subs	r0, r0, r4
 8002890:	eb61 0105 	sbc.w	r1, r1, r5
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	018b      	lsls	r3, r1, #6
 800289e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028a2:	0182      	lsls	r2, r0, #6
 80028a4:	1a12      	subs	r2, r2, r0
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	00d9      	lsls	r1, r3, #3
 80028b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028b8:	00d0      	lsls	r0, r2, #3
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	1912      	adds	r2, r2, r4
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	0299      	lsls	r1, r3, #10
 80028ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028d2:	0290      	lsls	r0, r2, #10
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	461a      	mov	r2, r3
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	f7fd feec 	bl	80006c0 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4613      	mov	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_RCC_GetSysClockFreq+0x160>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	3301      	adds	r3, #1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	60bb      	str	r3, [r7, #8]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_RCC_GetSysClockFreq+0x164>)
 800290e:	60bb      	str	r3, [r7, #8]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	68bb      	ldr	r3, [r7, #8]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	00f42400 	.word	0x00f42400
 8002924:	017d7840 	.word	0x017d7840

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e041      	b.n	80029be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fd2e 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 fb36 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d001      	beq.n	80029e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e046      	b.n	8002a6e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <HAL_TIM_Base_Start+0xb0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d01d      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <HAL_TIM_Base_Start+0xb4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_TIM_Base_Start+0xb8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_TIM_Base_Start+0xbc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_TIM_Base_Start+0xc0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_Base_Start+0xc4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_Base_Start+0x70>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_TIM_Base_Start+0xc8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d010      	beq.n	8002a6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40010400 	.word	0x40010400
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40001800 	.word	0x40001800

08002a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f839 	bl	8002b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fa80 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start+0x24>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e022      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d109      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x3e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e015      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x58>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e008      	b.n	8002bae <HAL_TIM_PWM_Start+0x6a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07c      	b.n	8002cb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x82>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x92>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xa2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Start+0xaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fcce 	bl	8003598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <HAL_TIM_PWM_Start+0x174>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIM_PWM_Start+0xcc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_TIM_PWM_Start+0x178>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIM_PWM_Start+0xd0>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_TIM_PWM_Start+0xd2>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_TIM_PWM_Start+0x174>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d01d      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_TIM_PWM_Start+0x17c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d018      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_TIM_PWM_Start+0x180>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_TIM_PWM_Start+0x184>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_TIM_PWM_Start+0x178>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d009      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_TIM_PWM_Start+0x188>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIM_PWM_Start+0x136>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <HAL_TIM_PWM_Start+0x18c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d010      	beq.n	8002cae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9c:	e007      	b.n	8002cae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40010400 	.word	0x40010400
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40001800 	.word	0x40001800

08002cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0ac      	b.n	8002e48 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	f200 809f 	bhi.w	8002e3c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002e3d 	.word	0x08002e3d
 8002d0c:	08002e3d 	.word	0x08002e3d
 8002d10:	08002e3d 	.word	0x08002e3d
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002e3d 	.word	0x08002e3d
 8002d1c:	08002e3d 	.word	0x08002e3d
 8002d20:	08002e3d 	.word	0x08002e3d
 8002d24:	08002dbb 	.word	0x08002dbb
 8002d28:	08002e3d 	.word	0x08002e3d
 8002d2c:	08002e3d 	.word	0x08002e3d
 8002d30:	08002e3d 	.word	0x08002e3d
 8002d34:	08002dfb 	.word	0x08002dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f9e8 	bl	8003114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0208 	orr.w	r2, r2, #8
 8002d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	619a      	str	r2, [r3, #24]
      break;
 8002d76:	e062      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fa38 	bl	80031f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6999      	ldr	r1, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	021a      	lsls	r2, r3, #8
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	619a      	str	r2, [r3, #24]
      break;
 8002db8:	e041      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fa8b 	bl	80032dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0208 	orr.w	r2, r2, #8
 8002dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0204 	bic.w	r2, r2, #4
 8002de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	61da      	str	r2, [r3, #28]
      break;
 8002df8:	e021      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fadf 	bl	80033c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69d9      	ldr	r1, [r3, #28]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	61da      	str	r2, [r3, #28]
      break;
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_ConfigClockSource+0x18>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0b3      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x180>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d03e      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xd0>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	f200 8087 	bhi.w	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	f000 8085 	beq.w	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d87f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d01a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xa2>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d87b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d050      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x116>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d877      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d03c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xf6>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d873      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d058      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x136>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d86f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d064      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x156>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d060      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x156>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d867      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x156>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d05a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ef0:	e062      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f000 fb2a 	bl	800355a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e04e      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f000 fb13 	bl	800355a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
      break;
 8002f44:	e03b      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa8a 	bl	800346c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2150      	movs	r1, #80	; 0x50
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fae1 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e02b      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 faa8 	bl	80034c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2160      	movs	r1, #96	; 0x60
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fad1 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e01b      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fa6a 	bl	800346c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fac1 	bl	8003526 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e00b      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fab8 	bl	8003526 <TIM_ITRx_SetConfig>
        break;
 8002fb6:	e002      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <TIM_Base_SetConfig+0x110>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d00f      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3c      	ldr	r2, [pc, #240]	; (80030ec <TIM_Base_SetConfig+0x114>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <TIM_Base_SetConfig+0x118>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <TIM_Base_SetConfig+0x11c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <TIM_Base_SetConfig+0x120>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2e      	ldr	r2, [pc, #184]	; (80030e8 <TIM_Base_SetConfig+0x110>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d027      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <TIM_Base_SetConfig+0x114>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d023      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <TIM_Base_SetConfig+0x118>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <TIM_Base_SetConfig+0x11c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <TIM_Base_SetConfig+0x120>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d017      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a27      	ldr	r2, [pc, #156]	; (80030fc <TIM_Base_SetConfig+0x124>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <TIM_Base_SetConfig+0x128>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00f      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a25      	ldr	r2, [pc, #148]	; (8003104 <TIM_Base_SetConfig+0x12c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a24      	ldr	r2, [pc, #144]	; (8003108 <TIM_Base_SetConfig+0x130>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a23      	ldr	r2, [pc, #140]	; (800310c <TIM_Base_SetConfig+0x134>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <TIM_Base_SetConfig+0x138>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <TIM_Base_SetConfig+0x110>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0xf8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <TIM_Base_SetConfig+0x120>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d103      	bne.n	80030d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	615a      	str	r2, [r3, #20]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40010400 	.word	0x40010400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800
 8003108:	40001800 	.word	0x40001800
 800310c:	40001c00 	.word	0x40001c00
 8003110:	40002000 	.word	0x40002000

08003114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0201 	bic.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 0302 	bic.w	r3, r3, #2
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a20      	ldr	r2, [pc, #128]	; (80031ec <TIM_OC1_SetConfig+0xd8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC1_SetConfig+0x64>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <TIM_OC1_SetConfig+0xdc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10c      	bne.n	8003192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0308 	bic.w	r3, r3, #8
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <TIM_OC1_SetConfig+0xd8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_OC1_SetConfig+0x8e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <TIM_OC1_SetConfig+0xdc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400

080031f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0210 	bic.w	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0320 	bic.w	r3, r3, #32
 800323e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <TIM_OC2_SetConfig+0xe0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC2_SetConfig+0x68>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <TIM_OC2_SetConfig+0xe4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10d      	bne.n	8003278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <TIM_OC2_SetConfig+0xe0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC2_SetConfig+0x94>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <TIM_OC2_SetConfig+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d113      	bne.n	80032b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800328e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010400 	.word	0x40010400

080032dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a21      	ldr	r2, [pc, #132]	; (80033bc <TIM_OC3_SetConfig+0xe0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_OC3_SetConfig+0x66>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <TIM_OC3_SetConfig+0xe4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10d      	bne.n	800335e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <TIM_OC3_SetConfig+0xe0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <TIM_OC3_SetConfig+0x92>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <TIM_OC3_SetConfig+0xe4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d113      	bne.n	8003396 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	621a      	str	r2, [r3, #32]
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400

080033c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800340e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	031b      	lsls	r3, r3, #12
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <TIM_OC4_SetConfig+0xa0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_OC4_SetConfig+0x68>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <TIM_OC4_SetConfig+0xa4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d109      	bne.n	8003440 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400

0800346c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 030a 	bic.w	r3, r3, #10
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f023 0210 	bic.w	r2, r3, #16
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	031b      	lsls	r3, r3, #12
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003504:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 0307 	orr.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003574:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	021a      	lsls	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	431a      	orrs	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4313      	orrs	r3, r2
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	609a      	str	r2, [r3, #8]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e05a      	b.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d01d      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d018      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800

080036d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e03d      	b.n	800376c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <__libc_init_array>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	2600      	movs	r6, #0
 800377c:	4d0c      	ldr	r5, [pc, #48]	; (80037b0 <__libc_init_array+0x38>)
 800377e:	4c0d      	ldr	r4, [pc, #52]	; (80037b4 <__libc_init_array+0x3c>)
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	42a6      	cmp	r6, r4
 8003786:	d109      	bne.n	800379c <__libc_init_array+0x24>
 8003788:	f000 f830 	bl	80037ec <_init>
 800378c:	2600      	movs	r6, #0
 800378e:	4d0a      	ldr	r5, [pc, #40]	; (80037b8 <__libc_init_array+0x40>)
 8003790:	4c0a      	ldr	r4, [pc, #40]	; (80037bc <__libc_init_array+0x44>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	42a6      	cmp	r6, r4
 8003798:	d105      	bne.n	80037a6 <__libc_init_array+0x2e>
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a0:	4798      	blx	r3
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7ee      	b.n	8003784 <__libc_init_array+0xc>
 80037a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037aa:	4798      	blx	r3
 80037ac:	3601      	adds	r6, #1
 80037ae:	e7f2      	b.n	8003796 <__libc_init_array+0x1e>
 80037b0:	0800381c 	.word	0x0800381c
 80037b4:	0800381c 	.word	0x0800381c
 80037b8:	0800381c 	.word	0x0800381c
 80037bc:	08003820 	.word	0x08003820

080037c0 <memcpy>:
 80037c0:	440a      	add	r2, r1
 80037c2:	4291      	cmp	r1, r2
 80037c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c8:	d100      	bne.n	80037cc <memcpy+0xc>
 80037ca:	4770      	bx	lr
 80037cc:	b510      	push	{r4, lr}
 80037ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d2:	4291      	cmp	r1, r2
 80037d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d8:	d1f9      	bne.n	80037ce <memcpy+0xe>
 80037da:	bd10      	pop	{r4, pc}

080037dc <memset>:
 80037dc:	4603      	mov	r3, r0
 80037de:	4402      	add	r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
