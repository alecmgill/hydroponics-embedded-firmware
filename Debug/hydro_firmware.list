
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001622c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  080163b8  080163b8  000263b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ef4  08016ef4  0003041c  2**0
                  CONTENTS
  4 .ARM          00000008  08016ef4  08016ef4  00026ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016efc  08016efc  0003041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016efc  08016efc  00026efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f00  08016f00  00026f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000041c  20000000  08016f04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e5c  20000420  08017320  00030420  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  2000827c  08017320  0003827c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003041c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bd74  00000000  00000000  00030445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007636  00000000  00000000  0007c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  000837f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00085250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ddb  00000000  00000000  000869b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a7b  00000000  00000000  000b0793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21f1  00000000  00000000  000da20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ac3ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080e8  00000000  00000000  001ac454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000420 	.word	0x20000420
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801639c 	.word	0x0801639c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000424 	.word	0x20000424
 80001c4:	0801639c 	.word	0x0801639c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__gesf2>:
 80010b0:	f04f 3cff 	mov.w	ip, #4294967295
 80010b4:	e006      	b.n	80010c4 <__cmpsf2+0x4>
 80010b6:	bf00      	nop

080010b8 <__lesf2>:
 80010b8:	f04f 0c01 	mov.w	ip, #1
 80010bc:	e002      	b.n	80010c4 <__cmpsf2+0x4>
 80010be:	bf00      	nop

080010c0 <__cmpsf2>:
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	bf18      	it	ne
 80010d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010da:	d011      	beq.n	8001100 <__cmpsf2+0x40>
 80010dc:	b001      	add	sp, #4
 80010de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e2:	bf18      	it	ne
 80010e4:	ea90 0f01 	teqne	r0, r1
 80010e8:	bf58      	it	pl
 80010ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ee:	bf88      	it	hi
 80010f0:	17c8      	asrhi	r0, r1, #31
 80010f2:	bf38      	it	cc
 80010f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f8:	bf18      	it	ne
 80010fa:	f040 0001 	orrne.w	r0, r0, #1
 80010fe:	4770      	bx	lr
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__cmpsf2+0x4c>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d105      	bne.n	8001118 <__cmpsf2+0x58>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d1e4      	bne.n	80010dc <__cmpsf2+0x1c>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d0e1      	beq.n	80010dc <__cmpsf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cfrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4661      	mov	r1, ip
 8001126:	e7ff      	b.n	8001128 <__aeabi_cfcmpeq>

08001128 <__aeabi_cfcmpeq>:
 8001128:	b50f      	push	{r0, r1, r2, r3, lr}
 800112a:	f7ff ffc9 	bl	80010c0 <__cmpsf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	bf48      	it	mi
 8001132:	f110 0f00 	cmnmi.w	r0, #0
 8001136:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001138 <__aeabi_fcmpeq>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff fff4 	bl	8001128 <__aeabi_cfcmpeq>
 8001140:	bf0c      	ite	eq
 8001142:	2001      	moveq	r0, #1
 8001144:	2000      	movne	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmplt>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffea 	bl	8001128 <__aeabi_cfcmpeq>
 8001154:	bf34      	ite	cc
 8001156:	2001      	movcc	r0, #1
 8001158:	2000      	movcs	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmple>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffe0 	bl	8001128 <__aeabi_cfcmpeq>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpge>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffd2 	bl	8001120 <__aeabi_cfrcmple>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpgt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffc8 	bl	8001120 <__aeabi_cfrcmple>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_f2iz>:
 800119c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a4:	d30f      	bcc.n	80011c6 <__aeabi_f2iz+0x2a>
 80011a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ae:	d90d      	bls.n	80011cc <__aeabi_f2iz+0x30>
 80011b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011bc:	fa23 f002 	lsr.w	r0, r3, r2
 80011c0:	bf18      	it	ne
 80011c2:	4240      	negne	r0, r0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0000 	mov.w	r0, #0
 80011ca:	4770      	bx	lr
 80011cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011d0:	d101      	bne.n	80011d6 <__aeabi_f2iz+0x3a>
 80011d2:	0242      	lsls	r2, r0, #9
 80011d4:	d105      	bne.n	80011e2 <__aeabi_f2iz+0x46>
 80011d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011da:	bf08      	it	eq
 80011dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011e0:	4770      	bx	lr
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	4770      	bx	lr

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__aeabi_uldivmod>:
 8001228:	b953      	cbnz	r3, 8001240 <__aeabi_uldivmod+0x18>
 800122a:	b94a      	cbnz	r2, 8001240 <__aeabi_uldivmod+0x18>
 800122c:	2900      	cmp	r1, #0
 800122e:	bf08      	it	eq
 8001230:	2800      	cmpeq	r0, #0
 8001232:	bf1c      	itt	ne
 8001234:	f04f 31ff 	movne.w	r1, #4294967295
 8001238:	f04f 30ff 	movne.w	r0, #4294967295
 800123c:	f000 b9a6 	b.w	800158c <__aeabi_idiv0>
 8001240:	f1ad 0c08 	sub.w	ip, sp, #8
 8001244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001248:	f000 f83e 	bl	80012c8 <__udivmoddi4>
 800124c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr

08001258 <__aeabi_d2lz>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	460c      	mov	r4, r1
 800125c:	4605      	mov	r5, r0
 800125e:	4621      	mov	r1, r4
 8001260:	4628      	mov	r0, r5
 8001262:	2200      	movs	r2, #0
 8001264:	2300      	movs	r3, #0
 8001266:	f7ff fbef 	bl	8000a48 <__aeabi_dcmplt>
 800126a:	b928      	cbnz	r0, 8001278 <__aeabi_d2lz+0x20>
 800126c:	4628      	mov	r0, r5
 800126e:	4621      	mov	r1, r4
 8001270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001274:	f000 b80a 	b.w	800128c <__aeabi_d2ulz>
 8001278:	4628      	mov	r0, r5
 800127a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800127e:	f000 f805 	bl	800128c <__aeabi_d2ulz>
 8001282:	4240      	negs	r0, r0
 8001284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop

0800128c <__aeabi_d2ulz>:
 800128c:	b5d0      	push	{r4, r6, r7, lr}
 800128e:	2200      	movs	r2, #0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <__aeabi_d2ulz+0x34>)
 8001292:	4606      	mov	r6, r0
 8001294:	460f      	mov	r7, r1
 8001296:	f7ff f965 	bl	8000564 <__aeabi_dmul>
 800129a:	f7ff fc3b 	bl	8000b14 <__aeabi_d2uiz>
 800129e:	4604      	mov	r4, r0
 80012a0:	f7ff f8e6 	bl	8000470 <__aeabi_ui2d>
 80012a4:	2200      	movs	r2, #0
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <__aeabi_d2ulz+0x38>)
 80012a8:	f7ff f95c 	bl	8000564 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4630      	mov	r0, r6
 80012b2:	4639      	mov	r1, r7
 80012b4:	f7fe ff9e 	bl	80001f4 <__aeabi_dsub>
 80012b8:	f7ff fc2c 	bl	8000b14 <__aeabi_d2uiz>
 80012bc:	4621      	mov	r1, r4
 80012be:	bdd0      	pop	{r4, r6, r7, pc}
 80012c0:	3df00000 	.word	0x3df00000
 80012c4:	41f00000 	.word	0x41f00000

080012c8 <__udivmoddi4>:
 80012c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012cc:	9e08      	ldr	r6, [sp, #32]
 80012ce:	460d      	mov	r5, r1
 80012d0:	4604      	mov	r4, r0
 80012d2:	468e      	mov	lr, r1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f040 8083 	bne.w	80013e0 <__udivmoddi4+0x118>
 80012da:	428a      	cmp	r2, r1
 80012dc:	4617      	mov	r7, r2
 80012de:	d947      	bls.n	8001370 <__udivmoddi4+0xa8>
 80012e0:	fab2 f382 	clz	r3, r2
 80012e4:	b14b      	cbz	r3, 80012fa <__udivmoddi4+0x32>
 80012e6:	f1c3 0120 	rsb	r1, r3, #32
 80012ea:	fa05 fe03 	lsl.w	lr, r5, r3
 80012ee:	fa20 f101 	lsr.w	r1, r0, r1
 80012f2:	409f      	lsls	r7, r3
 80012f4:	ea41 0e0e 	orr.w	lr, r1, lr
 80012f8:	409c      	lsls	r4, r3
 80012fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012fe:	fbbe fcf8 	udiv	ip, lr, r8
 8001302:	fa1f f987 	uxth.w	r9, r7
 8001306:	fb08 e21c 	mls	r2, r8, ip, lr
 800130a:	fb0c f009 	mul.w	r0, ip, r9
 800130e:	0c21      	lsrs	r1, r4, #16
 8001310:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001314:	4290      	cmp	r0, r2
 8001316:	d90a      	bls.n	800132e <__udivmoddi4+0x66>
 8001318:	18ba      	adds	r2, r7, r2
 800131a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800131e:	f080 8118 	bcs.w	8001552 <__udivmoddi4+0x28a>
 8001322:	4290      	cmp	r0, r2
 8001324:	f240 8115 	bls.w	8001552 <__udivmoddi4+0x28a>
 8001328:	f1ac 0c02 	sub.w	ip, ip, #2
 800132c:	443a      	add	r2, r7
 800132e:	1a12      	subs	r2, r2, r0
 8001330:	fbb2 f0f8 	udiv	r0, r2, r8
 8001334:	fb08 2210 	mls	r2, r8, r0, r2
 8001338:	fb00 f109 	mul.w	r1, r0, r9
 800133c:	b2a4      	uxth	r4, r4
 800133e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001342:	42a1      	cmp	r1, r4
 8001344:	d909      	bls.n	800135a <__udivmoddi4+0x92>
 8001346:	193c      	adds	r4, r7, r4
 8001348:	f100 32ff 	add.w	r2, r0, #4294967295
 800134c:	f080 8103 	bcs.w	8001556 <__udivmoddi4+0x28e>
 8001350:	42a1      	cmp	r1, r4
 8001352:	f240 8100 	bls.w	8001556 <__udivmoddi4+0x28e>
 8001356:	3802      	subs	r0, #2
 8001358:	443c      	add	r4, r7
 800135a:	1a64      	subs	r4, r4, r1
 800135c:	2100      	movs	r1, #0
 800135e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001362:	b11e      	cbz	r6, 800136c <__udivmoddi4+0xa4>
 8001364:	2200      	movs	r2, #0
 8001366:	40dc      	lsrs	r4, r3
 8001368:	e9c6 4200 	strd	r4, r2, [r6]
 800136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001370:	b902      	cbnz	r2, 8001374 <__udivmoddi4+0xac>
 8001372:	deff      	udf	#255	; 0xff
 8001374:	fab2 f382 	clz	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d14f      	bne.n	800141c <__udivmoddi4+0x154>
 800137c:	1a8d      	subs	r5, r1, r2
 800137e:	2101      	movs	r1, #1
 8001380:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001384:	fa1f f882 	uxth.w	r8, r2
 8001388:	fbb5 fcfe 	udiv	ip, r5, lr
 800138c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001390:	fb08 f00c 	mul.w	r0, r8, ip
 8001394:	0c22      	lsrs	r2, r4, #16
 8001396:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800139a:	42a8      	cmp	r0, r5
 800139c:	d907      	bls.n	80013ae <__udivmoddi4+0xe6>
 800139e:	197d      	adds	r5, r7, r5
 80013a0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80013a4:	d202      	bcs.n	80013ac <__udivmoddi4+0xe4>
 80013a6:	42a8      	cmp	r0, r5
 80013a8:	f200 80e9 	bhi.w	800157e <__udivmoddi4+0x2b6>
 80013ac:	4694      	mov	ip, r2
 80013ae:	1a2d      	subs	r5, r5, r0
 80013b0:	fbb5 f0fe 	udiv	r0, r5, lr
 80013b4:	fb0e 5510 	mls	r5, lr, r0, r5
 80013b8:	fb08 f800 	mul.w	r8, r8, r0
 80013bc:	b2a4      	uxth	r4, r4
 80013be:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013c2:	45a0      	cmp	r8, r4
 80013c4:	d907      	bls.n	80013d6 <__udivmoddi4+0x10e>
 80013c6:	193c      	adds	r4, r7, r4
 80013c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80013cc:	d202      	bcs.n	80013d4 <__udivmoddi4+0x10c>
 80013ce:	45a0      	cmp	r8, r4
 80013d0:	f200 80d9 	bhi.w	8001586 <__udivmoddi4+0x2be>
 80013d4:	4610      	mov	r0, r2
 80013d6:	eba4 0408 	sub.w	r4, r4, r8
 80013da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80013de:	e7c0      	b.n	8001362 <__udivmoddi4+0x9a>
 80013e0:	428b      	cmp	r3, r1
 80013e2:	d908      	bls.n	80013f6 <__udivmoddi4+0x12e>
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	f000 80b1 	beq.w	800154c <__udivmoddi4+0x284>
 80013ea:	2100      	movs	r1, #0
 80013ec:	e9c6 0500 	strd	r0, r5, [r6]
 80013f0:	4608      	mov	r0, r1
 80013f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f6:	fab3 f183 	clz	r1, r3
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d14b      	bne.n	8001496 <__udivmoddi4+0x1ce>
 80013fe:	42ab      	cmp	r3, r5
 8001400:	d302      	bcc.n	8001408 <__udivmoddi4+0x140>
 8001402:	4282      	cmp	r2, r0
 8001404:	f200 80b9 	bhi.w	800157a <__udivmoddi4+0x2b2>
 8001408:	1a84      	subs	r4, r0, r2
 800140a:	eb65 0303 	sbc.w	r3, r5, r3
 800140e:	2001      	movs	r0, #1
 8001410:	469e      	mov	lr, r3
 8001412:	2e00      	cmp	r6, #0
 8001414:	d0aa      	beq.n	800136c <__udivmoddi4+0xa4>
 8001416:	e9c6 4e00 	strd	r4, lr, [r6]
 800141a:	e7a7      	b.n	800136c <__udivmoddi4+0xa4>
 800141c:	409f      	lsls	r7, r3
 800141e:	f1c3 0220 	rsb	r2, r3, #32
 8001422:	40d1      	lsrs	r1, r2
 8001424:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001428:	fbb1 f0fe 	udiv	r0, r1, lr
 800142c:	fa1f f887 	uxth.w	r8, r7
 8001430:	fb0e 1110 	mls	r1, lr, r0, r1
 8001434:	fa24 f202 	lsr.w	r2, r4, r2
 8001438:	409d      	lsls	r5, r3
 800143a:	fb00 fc08 	mul.w	ip, r0, r8
 800143e:	432a      	orrs	r2, r5
 8001440:	0c15      	lsrs	r5, r2, #16
 8001442:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001446:	45ac      	cmp	ip, r5
 8001448:	fa04 f403 	lsl.w	r4, r4, r3
 800144c:	d909      	bls.n	8001462 <__udivmoddi4+0x19a>
 800144e:	197d      	adds	r5, r7, r5
 8001450:	f100 31ff 	add.w	r1, r0, #4294967295
 8001454:	f080 808f 	bcs.w	8001576 <__udivmoddi4+0x2ae>
 8001458:	45ac      	cmp	ip, r5
 800145a:	f240 808c 	bls.w	8001576 <__udivmoddi4+0x2ae>
 800145e:	3802      	subs	r0, #2
 8001460:	443d      	add	r5, r7
 8001462:	eba5 050c 	sub.w	r5, r5, ip
 8001466:	fbb5 f1fe 	udiv	r1, r5, lr
 800146a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800146e:	fb01 f908 	mul.w	r9, r1, r8
 8001472:	b295      	uxth	r5, r2
 8001474:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001478:	45a9      	cmp	r9, r5
 800147a:	d907      	bls.n	800148c <__udivmoddi4+0x1c4>
 800147c:	197d      	adds	r5, r7, r5
 800147e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001482:	d274      	bcs.n	800156e <__udivmoddi4+0x2a6>
 8001484:	45a9      	cmp	r9, r5
 8001486:	d972      	bls.n	800156e <__udivmoddi4+0x2a6>
 8001488:	3902      	subs	r1, #2
 800148a:	443d      	add	r5, r7
 800148c:	eba5 0509 	sub.w	r5, r5, r9
 8001490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001494:	e778      	b.n	8001388 <__udivmoddi4+0xc0>
 8001496:	f1c1 0720 	rsb	r7, r1, #32
 800149a:	408b      	lsls	r3, r1
 800149c:	fa22 fc07 	lsr.w	ip, r2, r7
 80014a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80014a4:	fa25 f407 	lsr.w	r4, r5, r7
 80014a8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80014ac:	fbb4 f9fe 	udiv	r9, r4, lr
 80014b0:	fa1f f88c 	uxth.w	r8, ip
 80014b4:	fb0e 4419 	mls	r4, lr, r9, r4
 80014b8:	fa20 f307 	lsr.w	r3, r0, r7
 80014bc:	fb09 fa08 	mul.w	sl, r9, r8
 80014c0:	408d      	lsls	r5, r1
 80014c2:	431d      	orrs	r5, r3
 80014c4:	0c2b      	lsrs	r3, r5, #16
 80014c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80014ca:	45a2      	cmp	sl, r4
 80014cc:	fa02 f201 	lsl.w	r2, r2, r1
 80014d0:	fa00 f301 	lsl.w	r3, r0, r1
 80014d4:	d909      	bls.n	80014ea <__udivmoddi4+0x222>
 80014d6:	eb1c 0404 	adds.w	r4, ip, r4
 80014da:	f109 30ff 	add.w	r0, r9, #4294967295
 80014de:	d248      	bcs.n	8001572 <__udivmoddi4+0x2aa>
 80014e0:	45a2      	cmp	sl, r4
 80014e2:	d946      	bls.n	8001572 <__udivmoddi4+0x2aa>
 80014e4:	f1a9 0902 	sub.w	r9, r9, #2
 80014e8:	4464      	add	r4, ip
 80014ea:	eba4 040a 	sub.w	r4, r4, sl
 80014ee:	fbb4 f0fe 	udiv	r0, r4, lr
 80014f2:	fb0e 4410 	mls	r4, lr, r0, r4
 80014f6:	fb00 fa08 	mul.w	sl, r0, r8
 80014fa:	b2ad      	uxth	r5, r5
 80014fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001500:	45a2      	cmp	sl, r4
 8001502:	d908      	bls.n	8001516 <__udivmoddi4+0x24e>
 8001504:	eb1c 0404 	adds.w	r4, ip, r4
 8001508:	f100 35ff 	add.w	r5, r0, #4294967295
 800150c:	d22d      	bcs.n	800156a <__udivmoddi4+0x2a2>
 800150e:	45a2      	cmp	sl, r4
 8001510:	d92b      	bls.n	800156a <__udivmoddi4+0x2a2>
 8001512:	3802      	subs	r0, #2
 8001514:	4464      	add	r4, ip
 8001516:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800151a:	fba0 8902 	umull	r8, r9, r0, r2
 800151e:	eba4 040a 	sub.w	r4, r4, sl
 8001522:	454c      	cmp	r4, r9
 8001524:	46c6      	mov	lr, r8
 8001526:	464d      	mov	r5, r9
 8001528:	d319      	bcc.n	800155e <__udivmoddi4+0x296>
 800152a:	d016      	beq.n	800155a <__udivmoddi4+0x292>
 800152c:	b15e      	cbz	r6, 8001546 <__udivmoddi4+0x27e>
 800152e:	ebb3 020e 	subs.w	r2, r3, lr
 8001532:	eb64 0405 	sbc.w	r4, r4, r5
 8001536:	fa04 f707 	lsl.w	r7, r4, r7
 800153a:	fa22 f301 	lsr.w	r3, r2, r1
 800153e:	431f      	orrs	r7, r3
 8001540:	40cc      	lsrs	r4, r1
 8001542:	e9c6 7400 	strd	r7, r4, [r6]
 8001546:	2100      	movs	r1, #0
 8001548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800154c:	4631      	mov	r1, r6
 800154e:	4630      	mov	r0, r6
 8001550:	e70c      	b.n	800136c <__udivmoddi4+0xa4>
 8001552:	468c      	mov	ip, r1
 8001554:	e6eb      	b.n	800132e <__udivmoddi4+0x66>
 8001556:	4610      	mov	r0, r2
 8001558:	e6ff      	b.n	800135a <__udivmoddi4+0x92>
 800155a:	4543      	cmp	r3, r8
 800155c:	d2e6      	bcs.n	800152c <__udivmoddi4+0x264>
 800155e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001562:	eb69 050c 	sbc.w	r5, r9, ip
 8001566:	3801      	subs	r0, #1
 8001568:	e7e0      	b.n	800152c <__udivmoddi4+0x264>
 800156a:	4628      	mov	r0, r5
 800156c:	e7d3      	b.n	8001516 <__udivmoddi4+0x24e>
 800156e:	4611      	mov	r1, r2
 8001570:	e78c      	b.n	800148c <__udivmoddi4+0x1c4>
 8001572:	4681      	mov	r9, r0
 8001574:	e7b9      	b.n	80014ea <__udivmoddi4+0x222>
 8001576:	4608      	mov	r0, r1
 8001578:	e773      	b.n	8001462 <__udivmoddi4+0x19a>
 800157a:	4608      	mov	r0, r1
 800157c:	e749      	b.n	8001412 <__udivmoddi4+0x14a>
 800157e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001582:	443d      	add	r5, r7
 8001584:	e713      	b.n	80013ae <__udivmoddi4+0xe6>
 8001586:	3802      	subs	r0, #2
 8001588:	443c      	add	r4, r7
 800158a:	e724      	b.n	80013d6 <__udivmoddi4+0x10e>

0800158c <__aeabi_idiv0>:
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <get_ADC_values>:
#include "main.h"
#include "ADC_driver.h"
#include "sensors.h"

float get_ADC_values(int pH_or_nutrients) // 1 = nutrients 0 = pH
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	//if(pH_or_nutrients == 0)
	//{
		HAL_ADC_Start(&hadc2);
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <get_ADC_values+0x30>)
 800159a:	f003 fad9 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 800159e:	2164      	movs	r1, #100	; 0x64
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <get_ADC_values+0x30>)
 80015a2:	f003 fb85 	bl	8004cb0 <HAL_ADC_PollForConversion>
		return HAL_ADC_GetValue(&hadc2);//Read value
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <get_ADC_values+0x30>)
 80015a8:	f003 fc06 	bl	8004db8 <HAL_ADC_GetValue>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbd6 	bl	8000d60 <__aeabi_ui2f>
 80015b4:	4603      	mov	r3, r0
	{
		HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, 100);
		return HAL_ADC_GetValue(&hadc);//Read value
	}*/
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000588c 	.word	0x2000588c

080015c4 <Mount_USB>:




void Mount_USB (void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <Mount_USB+0x1c>)
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <Mount_USB+0x20>)
 80015ce:	f00e fbcf 	bl	800fd70 <f_mount>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <Mount_USB+0x24>)
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20005b34 	.word	0x20005b34
 80015e4:	20006b64 	.word	0x20006b64
 80015e8:	2000581c 	.word	0x2000581c

080015ec <Unmount_USB>:
void Unmount_USB (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <Unmount_USB+0x1c>)
 80015f4:	2000      	movs	r0, #0
 80015f6:	f00e fbbb 	bl	800fd70 <f_mount>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <Unmount_USB+0x20>)
 8001600:	701a      	strb	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20005b34 	.word	0x20005b34
 800160c:	2000581c 	.word	0x2000581c

08001610 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	3b14      	subs	r3, #20
 8001620:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8001622:	2014      	movs	r0, #20
 8001624:	f010 fa82 	bl	8011b2c <malloc>
 8001628:	4603      	mov	r3, r0
 800162a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800162e:	f102 0214 	add.w	r2, r2, #20
 8001632:	6013      	str	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	3b10      	subs	r3, #16
 800163a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800163e:	f102 0214 	add.w	r2, r2, #20
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f00f fa93 	bl	8010b70 <f_opendir>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <Scan_USB+0x108>)
 8001650:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <Scan_USB+0x108>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d14e      	bne.n	80016f8 <Scan_USB+0xe8>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	3b10      	subs	r3, #16
 8001660:	492e      	ldr	r1, [pc, #184]	; (800171c <Scan_USB+0x10c>)
 8001662:	4618      	mov	r0, r3
 8001664:	f00f fb50 	bl	8010d08 <f_readdir>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <Scan_USB+0x108>)
 800166e:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <Scan_USB+0x108>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d139      	bne.n	80016ec <Scan_USB+0xdc>
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <Scan_USB+0x10c>)
 800167a:	7a5b      	ldrb	r3, [r3, #9]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d035      	beq.n	80016ec <Scan_USB+0xdc>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <Scan_USB+0x10c>)
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0e6      	beq.n	800165a <Scan_USB+0x4a>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800168c:	4924      	ldr	r1, [pc, #144]	; (8001720 <Scan_USB+0x110>)
 800168e:	4825      	ldr	r0, [pc, #148]	; (8001724 <Scan_USB+0x114>)
 8001690:	f7fe fd9a 	bl	80001c8 <strcmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <Scan_USB+0xd2>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800169a:	4921      	ldr	r1, [pc, #132]	; (8001720 <Scan_USB+0x110>)
 800169c:	4822      	ldr	r0, [pc, #136]	; (8001728 <Scan_USB+0x118>)
 800169e:	f7fe fd93 	bl	80001c8 <strcmp>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01e      	beq.n	80016e6 <Scan_USB+0xd6>
                fresult = Scan_USB(path);                     /* Enter the directory */
 80016a8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016ac:	f103 0314 	add.w	r3, r3, #20
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f7ff ffad 	bl	8001610 <Scan_USB>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <Scan_USB+0x108>)
 80016bc:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <Scan_USB+0x108>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d111      	bne.n	80016ea <Scan_USB+0xda>
                path[i] = 0;
 80016c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016ca:	f103 0314 	add.w	r3, r3, #20
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016d4:	f103 0310 	add.w	r3, r3, #16
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e7bb      	b.n	800165a <Scan_USB+0x4a>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80016e2:	bf00      	nop
 80016e4:	e7b9      	b.n	800165a <Scan_USB+0x4a>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80016e6:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80016e8:	e7b7      	b.n	800165a <Scan_USB+0x4a>
                if (fresult != FR_OK) break;
 80016ea:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	3b10      	subs	r3, #16
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00f fade 	bl	8010cb4 <f_closedir>
    }
    free(path);
 80016f8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80016fc:	f103 0314 	add.w	r3, r3, #20
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f010 fa1b 	bl	8011b3c <free>
    return fresult;
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <Scan_USB+0x108>)
 8001708:	781b      	ldrb	r3, [r3, #0]
}
 800170a:	4618      	mov	r0, r3
 800170c:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000581c 	.word	0x2000581c
 800171c:	20005820 	.word	0x20005820
 8001720:	20005829 	.word	0x20005829
 8001724:	080163b8 	.word	0x080163b8
 8001728:	080163c4 	.word	0x080163c4

0800172c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8001736:	491c      	ldr	r1, [pc, #112]	; (80017a8 <Write_File+0x7c>)
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f00f fb39 	bl	8010db0 <f_stat>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <Write_File+0x80>)
 8001744:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Write_File+0x80>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <Write_File+0x28>
	{
	    return fresult;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <Write_File+0x80>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	e025      	b.n	80017a0 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8001754:	2202      	movs	r2, #2
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4815      	ldr	r0, [pc, #84]	; (80017b0 <Write_File+0x84>)
 800175a:	f00e fb53 	bl	800fe04 <f_open>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <Write_File+0x80>)
 8001764:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <Write_File+0x80>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <Write_File+0x48>
	    {
	        return fresult;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <Write_File+0x80>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	e015      	b.n	80017a0 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f7fe fd31 	bl	80001dc <strlen>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <Write_File+0x88>)
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <Write_File+0x84>)
 8001782:	f00e fe79 	bl	8010478 <f_write>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <Write_File+0x80>)
 800178c:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <Write_File+0x84>)
 8001790:	f00f f9c3 	bl	8010b1a <f_close>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <Write_File+0x80>)
 800179a:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <Write_File+0x80>)
 800179e:	781b      	ldrb	r3, [r3, #0]
	}
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20005820 	.word	0x20005820
 80017ac:	2000581c 	.word	0x2000581c
 80017b0:	20005b38 	.word	0x20005b38
 80017b4:	20005818 	.word	0x20005818

080017b8 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 80017c0:	4915      	ldr	r1, [pc, #84]	; (8001818 <Create_File+0x60>)
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f00f faf4 	bl	8010db0 <f_stat>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <Create_File+0x64>)
 80017ce:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <Create_File+0x64>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <Create_File+0x26>
	{
	    return fresult;
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <Create_File+0x64>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	e018      	b.n	8001810 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80017de:	220b      	movs	r2, #11
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	480f      	ldr	r0, [pc, #60]	; (8001820 <Create_File+0x68>)
 80017e4:	f00e fb0e 	bl	800fe04 <f_open>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <Create_File+0x64>)
 80017ee:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <Create_File+0x64>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <Create_File+0x46>
		{

		    return fresult;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <Create_File+0x64>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	e008      	b.n	8001810 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 80017fe:	4808      	ldr	r0, [pc, #32]	; (8001820 <Create_File+0x68>)
 8001800:	f00f f98b 	bl	8010b1a <f_close>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <Create_File+0x64>)
 800180a:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <Create_File+0x64>)
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20005820 	.word	0x20005820
 800181c:	2000581c 	.word	0x2000581c
 8001820:	20005b38 	.word	0x20005b38

08001824 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <Check_USB_Details+0x8c>)
 800182a:	4922      	ldr	r1, [pc, #136]	; (80018b4 <Check_USB_Details+0x90>)
 800182c:	4822      	ldr	r0, [pc, #136]	; (80018b8 <Check_USB_Details+0x94>)
 800182e:	f00f fb33 	bl	8010e98 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <Check_USB_Details+0x8c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	3314      	adds	r3, #20
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1e9a      	subs	r2, r3, #2
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <Check_USB_Details+0x8c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	3302      	adds	r3, #2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	fb03 f302 	mul.w	r3, r3, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe0d 	bl	8000470 <__aeabi_ui2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <Check_USB_Details+0x98>)
 800185c:	f7fe fe82 	bl	8000564 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f954 	bl	8000b14 <__aeabi_d2uiz>
 800186c:	4603      	mov	r3, r0
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <Check_USB_Details+0x9c>)
 8001870:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <Check_USB_Details+0x8c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	3302      	adds	r3, #2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <Check_USB_Details+0x90>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fb03 f302 	mul.w	r3, r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fdf1 	bl	8000470 <__aeabi_ui2d>
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <Check_USB_Details+0x98>)
 8001894:	f7fe fe66 	bl	8000564 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f938 	bl	8000b14 <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <Check_USB_Details+0xa0>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20005810 	.word	0x20005810
 80018b4:	20005808 	.word	0x20005808
 80018b8:	080163e8 	.word	0x080163e8
 80018bc:	3fe00000 	.word	0x3fe00000
 80018c0:	20005840 	.word	0x20005840
 80018c4:	20005814 	.word	0x20005814

080018c8 <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 80018cc:	2200      	movs	r2, #0
 80018ce:	4905      	ldr	r1, [pc, #20]	; (80018e4 <getTime+0x1c>)
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <getTime+0x20>)
 80018d2:	f006 fb2f 	bl	8007f34 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 80018d6:	2200      	movs	r2, #0
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <getTime+0x24>)
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <getTime+0x20>)
 80018dc:	f006 fc1c 	bl	8008118 <HAL_RTC_GetDate>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200054f0 	.word	0x200054f0
 80018e8:	2000591c 	.word	0x2000591c
 80018ec:	200054fc 	.word	0x200054fc

080018f0 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	4603      	mov	r3, r0
 8001904:	71bb      	strb	r3, [r7, #6]
 8001906:	460b      	mov	r3, r1
 8001908:	717b      	strb	r3, [r7, #5]
 800190a:	4613      	mov	r3, r2
 800190c:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <setTimeDate+0x84>)
 8001910:	793b      	ldrb	r3, [r7, #4]
 8001912:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <setTimeDate+0x84>)
 8001916:	7e3b      	ldrb	r3, [r7, #24]
 8001918:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <setTimeDate+0x84>)
 800191c:	7f3b      	ldrb	r3, [r7, #28]
 800191e:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <setTimeDate+0x84>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <setTimeDate+0x84>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 800192c:	2201      	movs	r2, #1
 800192e:	4911      	ldr	r1, [pc, #68]	; (8001974 <setTimeDate+0x84>)
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <setTimeDate+0x88>)
 8001932:	f006 fa49 	bl	8007dc8 <HAL_RTC_SetTime>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <setTimeDate+0x50>
 800193c:	f001 ff12 	bl	8003764 <Error_Handler>

	sDate.WeekDay = 0x01;
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <setTimeDate+0x8c>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <setTimeDate+0x8c>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <setTimeDate+0x8c>)
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <setTimeDate+0x8c>)
 8001954:	797b      	ldrb	r3, [r7, #5]
 8001956:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001958:	2201      	movs	r2, #1
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <setTimeDate+0x8c>)
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <setTimeDate+0x88>)
 800195e:	f006 fb3b 	bl	8007fd8 <HAL_RTC_SetDate>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <setTimeDate+0x7c>
 8001968:	f001 fefc 	bl	8003764 <Error_Handler>
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}
 8001974:	200054f0 	.word	0x200054f0
 8001978:	2000591c 	.word	0x2000591c
 800197c:	200054fc 	.word	0x200054fc

08001980 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 8001980:	b4b0      	push	{r4, r5, r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	466b      	mov	r3, sp
 800198c:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 800198e:	683c      	ldr	r4, [r7, #0]
 8001990:	1e63      	subs	r3, r4, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	4623      	mov	r3, r4
 8001996:	4618      	mov	r0, r3
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	014b      	lsls	r3, r1, #5
 80019a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019aa:	0142      	lsls	r2, r0, #5
 80019ac:	4623      	mov	r3, r4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	014b      	lsls	r3, r1, #5
 80019be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c2:	0142      	lsls	r2, r0, #5
 80019c4:	4623      	mov	r3, r4
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	3307      	adds	r3, #7
 80019ca:	08db      	lsrs	r3, r3, #3
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	ebad 0d03 	sub.w	sp, sp, r3
 80019d2:	466b      	mov	r3, sp
 80019d4:	3303      	adds	r3, #3
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
      for (char i = 0; i<iFilterLen; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	74fb      	strb	r3, [r7, #19]
 80019e0:	e00b      	b.n	80019fa <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 80019e2:	7cfb      	ldrb	r3, [r7, #19]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	7cfa      	ldrb	r2, [r7, #19]
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (char i = 0; i<iFilterLen; i++)
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	3301      	adds	r3, #1
 80019f8:	74fb      	strb	r3, [r7, #19]
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dcef      	bgt.n	80019e2 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e02e      	b.n	8001a66 <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e021      	b.n	8001a52 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1c59      	adds	r1, r3, #1
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dd13      	ble.n	8001a4c <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	69f9      	ldr	r1, [r7, #28]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbd6      	blt.n	8001a0e <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbcb      	blt.n	8001a08 <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dd0a      	ble.n	8001a90 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	0fda      	lsrs	r2, r3, #31
 8001a80:	4413      	add	r3, r2
 8001a82:	105b      	asrs	r3, r3, #1
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e014      	b.n	8001aba <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	0fda      	lsrs	r2, r3, #31
 8001a94:	4413      	add	r3, r2
 8001a96:	105b      	asrs	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	0fd9      	lsrs	r1, r3, #31
 8001aa4:	440b      	add	r3, r1
 8001aa6:	105b      	asrs	r3, r3, #1
 8001aa8:	1e59      	subs	r1, r3, #1
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	0fda      	lsrs	r2, r3, #31
 8001ab4:	4413      	add	r3, r2
 8001ab6:	105b      	asrs	r3, r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
      return bTemp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	46ad      	mov	sp, r5
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bcb0      	pop	{r4, r5, r7}
 8001ac6:	4770      	bx	lr

08001ac8 <getFiveSamples>:
double nutrientMax = 5000;
double ph_calibration_dose = 1.0;
double nutrient_calibration_dose = 1.0;

void getFiveSamples()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	water_temp = 0;
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <getFiveSamples+0xe0>)
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
	TDS = 0;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <getFiveSamples+0xe4>)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
	pH = 0;
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <getFiveSamples+0xe8>)
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
	for(int fiveSamples = 0; fiveSamples<5;fiveSamples++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e037      	b.n	8001b5c <getFiveSamples+0x94>
	{
		water_temp	  += readWaterTemp();			// get sensor data so we can tell if its time to do pH up or pH down
 8001aec:	f002 f9e0 	bl	8003eb0 <readWaterTemp>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <getFiveSamples+0xe0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fcdb 	bl	80004b4 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fb77 	bl	80001f8 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <getFiveSamples+0xe0>)
 8001b1a:	6013      	str	r3, [r2, #0]
		TDS 		  += readWaterTDS();
 8001b1c:	f002 fa34 	bl	8003f88 <readWaterTDS>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <getFiveSamples+0xe4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f7ff f869 	bl	8000c00 <__addsf3>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <getFiveSamples+0xe4>)
 8001b34:	601a      	str	r2, [r3, #0]
		pH 		 	  += readPH();
 8001b36:	f002 fb5b 	bl	80041f0 <readPH>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <getFiveSamples+0xe8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7ff f85c 	bl	8000c00 <__addsf3>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <getFiveSamples+0xe8>)
 8001b4e:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8001b50:	2064      	movs	r0, #100	; 0x64
 8001b52:	f002 ff95 	bl	8004a80 <HAL_Delay>
	for(int fiveSamples = 0; fiveSamples<5;fiveSamples++)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	ddc4      	ble.n	8001aec <getFiveSamples+0x24>
	}
	water_temp	  = water_temp/5;			// get sensor data so we can tell if its time to do pH up or pH down
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <getFiveSamples+0xe0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <getFiveSamples+0xec>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fa05 	bl	8000f78 <__aeabi_fdiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <getFiveSamples+0xe0>)
 8001b74:	601a      	str	r2, [r3, #0]
	TDS 		  = TDS/5;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <getFiveSamples+0xe4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <getFiveSamples+0xec>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f9fb 	bl	8000f78 <__aeabi_fdiv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <getFiveSamples+0xe4>)
 8001b88:	601a      	str	r2, [r3, #0]
	pH 		 	  = pH/5;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <getFiveSamples+0xe8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <getFiveSamples+0xec>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f9f1 	bl	8000f78 <__aeabi_fdiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <getFiveSamples+0xe8>)
 8001b9c:	601a      	str	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200054cc 	.word	0x200054cc
 8001bac:	200054d0 	.word	0x200054d0
 8001bb0:	200054d4 	.word	0x200054d4
 8001bb4:	40a00000 	.word	0x40a00000

08001bb8 <saveInitialState>:

void saveInitialState()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	getFiveSamples();
 8001bbe:	f7ff ff83 	bl	8001ac8 <getFiveSamples>
	sprintf(converted_char, "%.2f", TDS);
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <saveInitialState+0x88>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc74 	bl	80004b4 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	491c      	ldr	r1, [pc, #112]	; (8001c44 <saveInitialState+0x8c>)
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <saveInitialState+0x90>)
 8001bd4:	f010 fefc 	bl	80129d0 <siprintf>
	for(int e = 0; e<6;e++) // transfer the 6 chars to the initial TDS and pH variables
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	e00b      	b.n	8001bf6 <saveInitialState+0x3e>
	{
		initialTDS[e] = converted_char[e];
 8001bde:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <saveInitialState+0x90>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	7819      	ldrb	r1, [r3, #0]
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <saveInitialState+0x94>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	460a      	mov	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
	for(int e = 0; e<6;e++) // transfer the 6 chars to the initial TDS and pH variables
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	ddf0      	ble.n	8001bde <saveInitialState+0x26>
	}
	sprintf(converted_char, "%.2f", pH);
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <saveInitialState+0x98>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc57 	bl	80004b4 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	490e      	ldr	r1, [pc, #56]	; (8001c44 <saveInitialState+0x8c>)
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <saveInitialState+0x90>)
 8001c0e:	f010 fedf 	bl	80129d0 <siprintf>
	for(int i = 0; i<6;i++) // transfer the 6 chars to the initial TDS and pH variables
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	e00b      	b.n	8001c30 <saveInitialState+0x78>
	{
		initialPH[i] = converted_char[i];
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <saveInitialState+0x90>)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	7819      	ldrb	r1, [r3, #0]
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <saveInitialState+0x9c>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	460a      	mov	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<6;i++) // transfer the 6 chars to the initial TDS and pH variables
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	ddf0      	ble.n	8001c18 <saveInitialState+0x60>
	}

}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200054d0 	.word	0x200054d0
 8001c44:	080163ec 	.word	0x080163ec
 8001c48:	20005284 	.word	0x20005284
 8001c4c:	2000043c 	.word	0x2000043c
 8001c50:	200054d4 	.word	0x200054d4
 8001c54:	2000044c 	.word	0x2000044c

08001c58 <saveStateAfterNutrient>:


float totalTimeSeconds = 0;
void saveStateAfterNutrient(float totalSeconds)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	TDS = 0;
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
	pH = 0;
 8001c68:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
	for(int d = 0; d<5;d++) // get 5 samples of the initial sensor data
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e01c      	b.n	8001cb0 <saveStateAfterNutrient+0x58>
	{
		TDS  = TDS+readWaterTDS(); // get sensor data
 8001c76:	f002 f987 	bl	8003f88 <readWaterTDS>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7fe ffbc 	bl	8000c00 <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001c8e:	601a      	str	r2, [r3, #0]
		pH 	= pH+readPH();
 8001c90:	f002 faae 	bl	80041f0 <readPH>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7fe ffaf 	bl	8000c00 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001ca8:	601a      	str	r2, [r3, #0]
	for(int d = 0; d<5;d++) // get 5 samples of the initial sensor data
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	dddf      	ble.n	8001c76 <saveStateAfterNutrient+0x1e>
	}
	TDS = TDS/5;
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4938      	ldr	r1, [pc, #224]	; (8001d9c <saveStateAfterNutrient+0x144>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f95b 	bl	8000f78 <__aeabi_fdiv>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001cc8:	601a      	str	r2, [r3, #0]
	pH = pH/5;
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4933      	ldr	r1, [pc, #204]	; (8001d9c <saveStateAfterNutrient+0x144>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f951 	bl	8000f78 <__aeabi_fdiv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001cdc:	601a      	str	r2, [r3, #0]
	sprintf(converted_char, "%.2f", TDS);
 8001cde:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <saveStateAfterNutrient+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbe6 	bl	80004b4 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	492c      	ldr	r1, [pc, #176]	; (8001da0 <saveStateAfterNutrient+0x148>)
 8001cee:	482d      	ldr	r0, [pc, #180]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001cf0:	f010 fe6e 	bl	80129d0 <siprintf>
	for(int e = 0; e<6;e++) // transfer the 6 chars to the initial TDS and pH variables
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e00b      	b.n	8001d12 <saveStateAfterNutrient+0xba>
	{
		postNutrientTDS[e] = converted_char[e];
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	7819      	ldrb	r1, [r3, #0]
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <saveStateAfterNutrient+0x150>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	460a      	mov	r2, r1
 8001d0a:	701a      	strb	r2, [r3, #0]
	for(int e = 0; e<6;e++) // transfer the 6 chars to the initial TDS and pH variables
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	ddf0      	ble.n	8001cfa <saveStateAfterNutrient+0xa2>
	}
	sprintf(converted_char, "%.2f", pH);
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <saveStateAfterNutrient+0x140>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbc9 	bl	80004b4 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	491e      	ldr	r1, [pc, #120]	; (8001da0 <saveStateAfterNutrient+0x148>)
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001d2a:	f010 fe51 	bl	80129d0 <siprintf>
	for(int i = 0; i<6;i++) // transfer the 6 chars to the initial TDS and pH variables
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e00b      	b.n	8001d4c <saveStateAfterNutrient+0xf4>
	{
		postNutrientPH[i] = converted_char[i];
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	7819      	ldrb	r1, [r3, #0]
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <saveStateAfterNutrient+0x154>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	460a      	mov	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<6;i++) // transfer the 6 chars to the initial TDS and pH variables
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	ddf0      	ble.n	8001d34 <saveStateAfterNutrient+0xdc>
	}

	sprintf(converted_char, "%.2f", totalSeconds);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe fbae 	bl	80004b4 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4910      	ldr	r1, [pc, #64]	; (8001da0 <saveStateAfterNutrient+0x148>)
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001d60:	f010 fe36 	bl	80129d0 <siprintf>
	for(int f = 0; f<6;f++) // transfer the 6 chars to the initial TDS and pH variables
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	e00b      	b.n	8001d82 <saveStateAfterNutrient+0x12a>
	{
		timeToEqualize[f] = converted_char[f];
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <saveStateAfterNutrient+0x14c>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4413      	add	r3, r2
 8001d70:	7819      	ldrb	r1, [r3, #0]
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <saveStateAfterNutrient+0x158>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4413      	add	r3, r2
 8001d78:	460a      	mov	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
	for(int f = 0; f<6;f++) // transfer the 6 chars to the initial TDS and pH variables
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	ddf0      	ble.n	8001d6a <saveStateAfterNutrient+0x112>
	}

}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200054d0 	.word	0x200054d0
 8001d98:	200054d4 	.word	0x200054d4
 8001d9c:	40a00000 	.word	0x40a00000
 8001da0:	080163ec 	.word	0x080163ec
 8001da4:	20005284 	.word	0x20005284
 8001da8:	20000444 	.word	0x20000444
 8001dac:	20000454 	.word	0x20000454
 8001db0:	2000045c 	.word	0x2000045c
 8001db4:	00000000 	.word	0x00000000

08001db8 <isStabalized>:
float prevLargestPH = 0;
float prevLargestTDS = 0;

int writeHeader = 0;
int isStabalized() // will take a few samples of the waters pH and TDS to determine if the solution has stabilized. If stabilized returns one else 0
{	getTime();// get the current system time sets global variables sTime and sDate in RTC_driver.c
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	f7ff fd83 	bl	80018c8 <getTime>

	//startTimeMinutes = sTime.Minutes;
	startTimeSeconds =  sTime.Seconds+(sTime.Minutes*60);
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <isStabalized+0x180>)
 8001dc4:	789b      	ldrb	r3, [r3, #2]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <isStabalized+0x180>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ffc5 	bl	8000d68 <__aeabi_i2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <isStabalized+0x184>)
 8001de2:	6013      	str	r3, [r2, #0]
	//endTimeMinutes = 0;
	endTimeSeconds = 0;
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <isStabalized+0x188>)
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

	for(int samples = 0; samples<30; samples++)	// sample TDS and PH every second for 30 times
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e014      	b.n	8001e1c <isStabalized+0x64>
	{
		sampleArrayTDS[samples] = readWaterTDS();
 8001df2:	f002 f8c9 	bl	8003f88 <readWaterTDS>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4952      	ldr	r1, [pc, #328]	; (8001f44 <isStabalized+0x18c>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sampleArrayPH[samples] = readPH();
 8001e00:	f002 f9f6 	bl	80041f0 <readPH>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4950      	ldr	r1, [pc, #320]	; (8001f48 <isStabalized+0x190>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_Delay(1000);
 8001e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e12:	f002 fe35 	bl	8004a80 <HAL_Delay>
	for(int samples = 0; samples<30; samples++)	// sample TDS and PH every second for 30 times
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b1d      	cmp	r3, #29
 8001e20:	dde7      	ble.n	8001df2 <isStabalized+0x3a>
	}
	float smallestValueTDS = 10000; // set smallest values to value much higher than expected
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <isStabalized+0x194>)
 8001e24:	613b      	str	r3, [r7, #16]
	largestValueTDS = 0;			// set largest to the smallest possible value these steps ensure we catch error cases
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <isStabalized+0x198>)
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
	smallestValuePH = 100;
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <isStabalized+0x19c>)
 8001e30:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <isStabalized+0x1a0>)
 8001e32:	601a      	str	r2, [r3, #0]
    largestValuePH = 0;
 8001e34:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <isStabalized+0x1a4>)
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i<30;i++) // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e04b      	b.n	8001eda <isStabalized+0x122>
	{
		if(sampleArrayTDS[i]>largestValueTDS) largestValueTDS = sampleArrayTDS[i];
 8001e42:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <isStabalized+0x18c>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	4a41      	ldr	r2, [pc, #260]	; (8001f50 <isStabalized+0x198>)
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f999 	bl	8001188 <__aeabi_fcmpgt>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <isStabalized+0xb0>
 8001e5c:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <isStabalized+0x18c>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <isStabalized+0x198>)
 8001e66:	6013      	str	r3, [r2, #0]

		if(sampleArrayTDS[i]<smallestValueTDS) smallestValueTDS = sampleArrayTDS[i];
 8001e68:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <isStabalized+0x18c>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6938      	ldr	r0, [r7, #16]
 8001e74:	f7ff f988 	bl	8001188 <__aeabi_fcmpgt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <isStabalized+0xd0>
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <isStabalized+0x18c>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]

		if(sampleArrayPH[i]>largestValuePH) largestValuePH = sampleArrayPH[i];
 8001e88:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <isStabalized+0x190>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <isStabalized+0x1a4>)
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f976 	bl	8001188 <__aeabi_fcmpgt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <isStabalized+0xf6>
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <isStabalized+0x190>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <isStabalized+0x1a4>)
 8001eac:	6013      	str	r3, [r2, #0]

		if(sampleArrayPH[i]<smallestValuePH) smallestValuePH = sampleArrayPH[i];
 8001eae:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <isStabalized+0x190>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <isStabalized+0x19c>)
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f945 	bl	800114c <__aeabi_fcmplt>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <isStabalized+0x11c>
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <isStabalized+0x190>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <isStabalized+0x19c>)
 8001ed2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<30;i++) // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b1d      	cmp	r3, #29
 8001ede:	ddb0      	ble.n	8001e42 <isStabalized+0x8a>

	}
	float TdsRange = largestValueTDS - smallestValueTDS;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <isStabalized+0x198>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fe88 	bl	8000bfc <__aeabi_fsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60bb      	str	r3, [r7, #8]
	float PhRange = largestValuePH - smallestValuePH;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <isStabalized+0x1a4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <isStabalized+0x19c>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe7e 	bl	8000bfc <__aeabi_fsub>
 8001f00:	4603      	mov	r3, r0
 8001f02:	607b      	str	r3, [r7, #4]


	if(TdsRange > 15.0 || PhRange > 0.05)
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <isStabalized+0x1a8>)
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	f7ff f93e 	bl	8001188 <__aeabi_fcmpgt>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <isStabalized+0x170>
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe face 	bl	80004b4 <__aeabi_f2d>
 8001f18:	a305      	add	r3, pc, #20	; (adr r3, 8001f30 <isStabalized+0x178>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fdb1 	bl	8000a84 <__aeabi_dcmpgt>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01d      	beq.n	8001f64 <isStabalized+0x1ac>
	{
		isStabalized();
 8001f28:	f7ff ff46 	bl	8001db8 <isStabalized>
 8001f2c:	e0b2      	b.n	8002094 <isStabalized+0x2dc>
 8001f2e:	bf00      	nop
 8001f30:	9999999a 	.word	0x9999999a
 8001f34:	3fa99999 	.word	0x3fa99999
 8001f38:	200054f0 	.word	0x200054f0
 8001f3c:	20005488 	.word	0x20005488
 8001f40:	2000548c 	.word	0x2000548c
 8001f44:	20005394 	.word	0x20005394
 8001f48:	2000540c 	.word	0x2000540c
 8001f4c:	461c4000 	.word	0x461c4000
 8001f50:	20005490 	.word	0x20005490
 8001f54:	20000028 	.word	0x20000028
 8001f58:	42c80000 	.word	0x42c80000
 8001f5c:	20005494 	.word	0x20005494
 8001f60:	41700000 	.word	0x41700000
	}
	else if(TdsRange <= 15.0 && PhRange <= 0.05) // we are stabilized however, the system could still be changing so we need to check how many times we re-sampled the water if its > 1 check until its 1
 8001f64:	4952      	ldr	r1, [pc, #328]	; (80020b0 <isStabalized+0x2f8>)
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f7ff f8fa 	bl	8001160 <__aeabi_fcmple>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8090 	beq.w	8002094 <isStabalized+0x2dc>
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fa9d 	bl	80004b4 <__aeabi_f2d>
 8001f7a:	a349      	add	r3, pc, #292	; (adr r3, 80020a0 <isStabalized+0x2e8>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fd6c 	bl	8000a5c <__aeabi_dcmple>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8084 	beq.w	8002094 <isStabalized+0x2dc>
	{
		getTime();
 8001f8c:	f7ff fc9c 	bl	80018c8 <getTime>
		//endTimeMinutes = sTime.Minutes;
		endTimeSeconds = sTime.Seconds+(sTime.Minutes*60);
 8001f90:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <isStabalized+0x2fc>)
 8001f92:	789b      	ldrb	r3, [r3, #2]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <isStabalized+0x2fc>)
 8001f98:	785b      	ldrb	r3, [r3, #1]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fede 	bl	8000d68 <__aeabi_i2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a42      	ldr	r2, [pc, #264]	; (80020b8 <isStabalized+0x300>)
 8001fb0:	6013      	str	r3, [r2, #0]
		//totalTimeMinutes = endTimeMinutes-startTimeMinutes;
		totalTimeSeconds = endTimeSeconds-startTimeSeconds;
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <isStabalized+0x300>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a41      	ldr	r2, [pc, #260]	; (80020bc <isStabalized+0x304>)
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe1d 	bl	8000bfc <__aeabi_fsub>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <isStabalized+0x308>)
 8001fc8:	601a      	str	r2, [r3, #0]
		totalRuns = (totalTimeSeconds/36);
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <isStabalized+0x308>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	493d      	ldr	r1, [pc, #244]	; (80020c4 <isStabalized+0x30c>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe ffd1 	bl	8000f78 <__aeabi_fdiv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <isStabalized+0x310>)
 8001fdc:	601a      	str	r2, [r3, #0]

		if(prevLargestTDS != 0 && abs(largestValueTDS-prevLargestTDS)>2.0 && prevLargestPH != 0 && abs(largestValuePH-prevLargestPH)>0.2) isStabalized();// if we have run again, check to see if the values changed from last run if so run again if not continue
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <isStabalized+0x314>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f8a6 	bl	8001138 <__aeabi_fcmpeq>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d12f      	bne.n	8002052 <isStabalized+0x29a>
 8001ff2:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <isStabalized+0x318>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a35      	ldr	r2, [pc, #212]	; (80020cc <isStabalized+0x314>)
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fdfd 	bl	8000bfc <__aeabi_fsub>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f8c9 	bl	800119c <__aeabi_f2iz>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bfb8      	it	lt
 8002010:	425b      	neglt	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	dd1d      	ble.n	8002052 <isStabalized+0x29a>
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <isStabalized+0x31c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f88a 	bl	8001138 <__aeabi_fcmpeq>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d113      	bne.n	8002052 <isStabalized+0x29a>
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <isStabalized+0x320>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <isStabalized+0x31c>)
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fde1 	bl	8000bfc <__aeabi_fsub>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f8ad 	bl	800119c <__aeabi_f2iz>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bfb8      	it	lt
 8002048:	425b      	neglt	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	dd01      	ble.n	8002052 <isStabalized+0x29a>
 800204e:	f7ff feb3 	bl	8001db8 <isStabalized>
		prevLargestTDS = largestValueTDS;
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <isStabalized+0x318>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <isStabalized+0x314>)
 8002058:	6013      	str	r3, [r2, #0]
		prevLargestPH = largestValuePH;
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <isStabalized+0x320>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <isStabalized+0x31c>)
 8002060:	6013      	str	r3, [r2, #0]
		if(totalRuns <= 1.3 )
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <isStabalized+0x310>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa24 	bl	80004b4 <__aeabi_f2d>
 800206c:	a30e      	add	r3, pc, #56	; (adr r3, 80020a8 <isStabalized+0x2f0>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fcf3 	bl	8000a5c <__aeabi_dcmple>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <isStabalized+0x2d8>
		{
			largestValueTDS = 0;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <isStabalized+0x318>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
			prevLargestPH = 0;
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <isStabalized+0x31c>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
			return 1;  // system is stabilized return its good
 800208c:	2301      	movs	r3, #1
 800208e:	e002      	b.n	8002096 <isStabalized+0x2de>
		}
		else isStabalized(); 			// system just experienced alot of change so check to see if its actually stabilized i.e. run again
 8002090:	f7ff fe92 	bl	8001db8 <isStabalized>

	}
	return 0;
 8002094:	2300      	movs	r3, #0

}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	9999999a 	.word	0x9999999a
 80020a4:	3fa99999 	.word	0x3fa99999
 80020a8:	cccccccd 	.word	0xcccccccd
 80020ac:	3ff4cccc 	.word	0x3ff4cccc
 80020b0:	41700000 	.word	0x41700000
 80020b4:	200054f0 	.word	0x200054f0
 80020b8:	2000548c 	.word	0x2000548c
 80020bc:	20005488 	.word	0x20005488
 80020c0:	20005388 	.word	0x20005388
 80020c4:	42100000 	.word	0x42100000
 80020c8:	20005484 	.word	0x20005484
 80020cc:	2000549c 	.word	0x2000549c
 80020d0:	20005490 	.word	0x20005490
 80020d4:	20005498 	.word	0x20005498
 80020d8:	20005494 	.word	0x20005494

080020dc <waitForWaterToStabilize>:
int initialRun = 1;
float minimumSecDuration = 36; // this holds the number of seconds to get the data.
int stabilityValue = 0;

float waitForWaterToStabilize() // Returns the total time in seconds
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	getTime();
 80020e0:	f7ff fbf2 	bl	80018c8 <getTime>
	startEqTimeSec = sTime.Seconds + sTime.Minutes*60;
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <waitForWaterToStabilize+0x90>)
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <waitForWaterToStabilize+0x90>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fe34 	bl	8000d68 <__aeabi_i2f>
 8002100:	4603      	mov	r3, r0
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <waitForWaterToStabilize+0x94>)
 8002104:	6013      	str	r3, [r2, #0]
	if(stabilityValue != 1)
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <waitForWaterToStabilize+0x98>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <waitForWaterToStabilize+0x42>
	{	stabilityValue = 0;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <waitForWaterToStabilize+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
		stabilityValue = isStabalized();
 8002114:	f7ff fe50 	bl	8001db8 <isStabalized>
 8002118:	4603      	mov	r3, r0
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <waitForWaterToStabilize+0x98>)
 800211c:	6013      	str	r3, [r2, #0]
	}
	getTime();
 800211e:	f7ff fbd3 	bl	80018c8 <getTime>

	endEqTimeSec = sTime.Seconds + sTime.Minutes*60;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <waitForWaterToStabilize+0x90>)
 8002124:	789b      	ldrb	r3, [r3, #2]
 8002126:	4619      	mov	r1, r3
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <waitForWaterToStabilize+0x90>)
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	461a      	mov	r2, r3
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fe15 	bl	8000d68 <__aeabi_i2f>
 800213e:	4603      	mov	r3, r0
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <waitForWaterToStabilize+0x9c>)
 8002142:	6013      	str	r3, [r2, #0]
	stabilityValue = 0;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <waitForWaterToStabilize+0x98>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
	// data_array_length can range between 10-10,000
	totalTimeSeconds = endEqTimeSec-startEqTimeSec;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <waitForWaterToStabilize+0x9c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <waitForWaterToStabilize+0x94>)
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fd51 	bl	8000bfc <__aeabi_fsub>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <waitForWaterToStabilize+0xa0>)
 8002160:	601a      	str	r2, [r3, #0]

	return (totalTimeSeconds);
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <waitForWaterToStabilize+0xa0>)
 8002164:	681b      	ldr	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200054f0 	.word	0x200054f0
 8002170:	20005390 	.word	0x20005390
 8002174:	200054a4 	.word	0x200054a4
 8002178:	2000538c 	.word	0x2000538c
 800217c:	20005388 	.word	0x20005388

08002180 <set_init_water_ph>:

void set_init_water_ph()
{
 8002180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002184:	af00      	add	r7, sp, #0
	if((pH-minPh)<(maxPh-pH) && (pH-minPh) > 0.5) // if we are closer to minimum set point dose pH-Down until we reach the minimum set point
 8002186:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <set_init_water_ph+0x184>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f992 	bl	80004b4 <__aeabi_f2d>
 8002190:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <set_init_water_ph+0x188>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe f82d 	bl	80001f4 <__aeabi_dsub>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4690      	mov	r8, r2
 80021a0:	4699      	mov	r9, r3
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <set_init_water_ph+0x18c>)
 80021a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <set_init_water_ph+0x184>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f981 	bl	80004b4 <__aeabi_f2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe f81b 	bl	80001f4 <__aeabi_dsub>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe fc3f 	bl	8000a48 <__aeabi_dcmplt>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d035      	beq.n	800223c <set_init_water_ph+0xbc>
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <set_init_water_ph+0x184>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f96d 	bl	80004b4 <__aeabi_f2d>
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <set_init_water_ph+0x188>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe f808 	bl	80001f4 <__aeabi_dsub>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b47      	ldr	r3, [pc, #284]	; (8002310 <set_init_water_ph+0x190>)
 80021f2:	f7fe fc47 	bl	8000a84 <__aeabi_dcmpgt>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01f      	beq.n	800223c <set_init_water_ph+0xbc>
	{
		while (pH>minPh)
 80021fc:	e010      	b.n	8002220 <set_init_water_ph+0xa0>
		{
			doseWater(ph_calibration_dose, 0, 0);
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <set_init_water_ph+0x194>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fca4 	bl	8000b54 <__aeabi_d2f>
 800220c:	4603      	mov	r3, r0
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f001 faa9 	bl	800376e <doseWater>
			waitForWaterToStabilize();
 800221c:	f7ff ff5e 	bl	80020dc <waitForWaterToStabilize>
		while (pH>minPh)
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <set_init_water_ph+0x184>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f945 	bl	80004b4 <__aeabi_f2d>
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <set_init_water_ph+0x188>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe fc28 	bl	8000a84 <__aeabi_dcmpgt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1e1      	bne.n	80021fe <set_init_water_ph+0x7e>
	if((pH-minPh)<(maxPh-pH) && (pH-minPh) > 0.5) // if we are closer to minimum set point dose pH-Down until we reach the minimum set point
 800223a:	e05f      	b.n	80022fc <set_init_water_ph+0x17c>
		}
	}
	else if((pH-minPh)>(maxPh-pH) && (maxPh-pH) > 0.5)
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <set_init_water_ph+0x184>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f937 	bl	80004b4 <__aeabi_f2d>
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <set_init_water_ph+0x188>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fd ffd2 	bl	80001f4 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4690      	mov	r8, r2
 8002256:	4699      	mov	r9, r3
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <set_init_water_ph+0x18c>)
 800225a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <set_init_water_ph+0x184>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f926 	bl	80004b4 <__aeabi_f2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fd ffc0 	bl	80001f4 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4640      	mov	r0, r8
 800227a:	4649      	mov	r1, r9
 800227c:	f7fe fc02 	bl	8000a84 <__aeabi_dcmpgt>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d100      	bne.n	8002288 <set_init_water_ph+0x108>
			doseWater(0, ph_calibration_dose, 0);	// else dose with pH-up
			waitForWaterToStabilize();//
		}
	}

}
 8002286:	e039      	b.n	80022fc <set_init_water_ph+0x17c>
	else if((pH-minPh)>(maxPh-pH) && (maxPh-pH) > 0.5)
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <set_init_water_ph+0x18c>)
 800228a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <set_init_water_ph+0x184>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f90e 	bl	80004b4 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4620      	mov	r0, r4
 800229e:	4629      	mov	r1, r5
 80022a0:	f7fd ffa8 	bl	80001f4 <__aeabi_dsub>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <set_init_water_ph+0x190>)
 80022b2:	f7fe fbe7 	bl	8000a84 <__aeabi_dcmpgt>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <set_init_water_ph+0x160>
}
 80022bc:	e01e      	b.n	80022fc <set_init_water_ph+0x17c>
			doseWater(0, ph_calibration_dose, 0);	// else dose with pH-up
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <set_init_water_ph+0x194>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fc44 	bl	8000b54 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 0000 	mov.w	r0, #0
 80022d8:	f001 fa49 	bl	800376e <doseWater>
			waitForWaterToStabilize();//
 80022dc:	f7ff fefe 	bl	80020dc <waitForWaterToStabilize>
		while (pH<maxPh)
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <set_init_water_ph+0x184>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8e5 	bl	80004b4 <__aeabi_f2d>
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <set_init_water_ph+0x18c>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe fbaa 	bl	8000a48 <__aeabi_dcmplt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e1      	bne.n	80022be <set_init_water_ph+0x13e>
}
 80022fa:	e7ff      	b.n	80022fc <set_init_water_ph+0x17c>
 80022fc:	bf00      	nop
 80022fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002302:	bf00      	nop
 8002304:	200054d4 	.word	0x200054d4
 8002308:	20000008 	.word	0x20000008
 800230c:	20000010 	.word	0x20000010
 8002310:	3fe00000 	.word	0x3fe00000
 8002314:	20000018 	.word	0x20000018

08002318 <calibrateSys>:

void calibrateSys()
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0

	if(whatToSave == 0) getFiveSamples();	// get initial sensor data
 800231e:	4b9a      	ldr	r3, [pc, #616]	; (8002588 <calibrateSys+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <calibrateSys+0x12>
 8002326:	f7ff fbcf 	bl	8001ac8 <getFiveSamples>

	if(initialRun == 1)
 800232a:	4b98      	ldr	r3, [pc, #608]	; (800258c <calibrateSys+0x274>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d11f      	bne.n	8002372 <calibrateSys+0x5a>
	{
		set_init_water_ph();		// add ph-up/ph-down if the water pH is out of our calibration bounds
 8002332:	f7ff ff25 	bl	8002180 <set_init_water_ph>
		saveInitialState();			 // save initial state
 8002336:	f7ff fc3f 	bl	8001bb8 <saveInitialState>
		doseWater(0, 0, nutrient_calibration_dose);		// add nutrient here and wait for it to equalize step the pump motors (pHDown,pHup,nutrient_dose)
 800233a:	4b95      	ldr	r3, [pc, #596]	; (8002590 <calibrateSys+0x278>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc06 	bl	8000b54 <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f001 fa0b 	bl	800376e <doseWater>
		totalTimeSeconds = waitForWaterToStabilize();	// Returns the total time in seconds
 8002358:	f7ff fec0 	bl	80020dc <waitForWaterToStabilize>
 800235c:	4603      	mov	r3, r0
 800235e:	4a8d      	ldr	r2, [pc, #564]	; (8002594 <calibrateSys+0x27c>)
 8002360:	6013      	str	r3, [r2, #0]
		saveStateAfterNutrient(totalTimeSeconds);
 8002362:	4b8c      	ldr	r3, [pc, #560]	; (8002594 <calibrateSys+0x27c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fc76 	bl	8001c58 <saveStateAfterNutrient>
		initialRun = 0;
 800236c:	4b87      	ldr	r3, [pc, #540]	; (800258c <calibrateSys+0x274>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
	}

	if((beenWritten == 2 || beenWritten == 1) && write_times < 2) // if we just wrote a file and have not completed collecting data for all files reset buffers/vars
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <calibrateSys+0x280>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d003      	beq.n	8002382 <calibrateSys+0x6a>
 800237a:	4b87      	ldr	r3, [pc, #540]	; (8002598 <calibrateSys+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d165      	bne.n	800244e <calibrateSys+0x136>
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <calibrateSys+0x284>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	dc61      	bgt.n	800244e <calibrateSys+0x136>
	{
		doseWater(0, 0, nutrient_calibration_dose);		// add nutrient here and wait for it to equalize step the pump motors (pHDown,pHup,nutrient_dose)
 800238a:	4b81      	ldr	r3, [pc, #516]	; (8002590 <calibrateSys+0x278>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fbde 	bl	8000b54 <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	f04f 0000 	mov.w	r0, #0
 80023a4:	f001 f9e3 	bl	800376e <doseWater>
		totalTimeSeconds = waitForWaterToStabilize();	// Returns the total time in seconds
 80023a8:	f7ff fe98 	bl	80020dc <waitForWaterToStabilize>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <calibrateSys+0x27c>)
 80023b0:	6013      	str	r3, [r2, #0]
		saveStateAfterNutrient(totalTimeSeconds);
 80023b2:	4b78      	ldr	r3, [pc, #480]	; (8002594 <calibrateSys+0x27c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fc4e 	bl	8001c58 <saveStateAfterNutrient>
		for(int i = 0; i<10000; i++) // if we wrote a file reset the dataBuffer and data array to allow multiple files to be written
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e040      	b.n	8002444 <calibrateSys+0x12c>
		{
			dataBuffer[i-1] = '\0';
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4a76      	ldr	r2, [pc, #472]	; (80025a0 <calibrateSys+0x288>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	54d1      	strb	r1, [r2, r3]
			calibration_data_array[i] = '\0';
 80023cc:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <calibrateSys+0x28c>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
			if(i<(44))secondlineWriteBuf[i] = '\0';   // append to beginning time to equilize, ph after 5ml ph up, TDS adter 5ml ph-up
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b2b      	cmp	r3, #43	; 0x2b
 80023da:	dc04      	bgt.n	80023e6 <calibrateSys+0xce>
 80023dc:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <calibrateSys+0x290>)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
			if(i<(44))thirdlineWriteBuf[i]  = '\0';
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b2b      	cmp	r3, #43	; 0x2b
 80023ea:	dc04      	bgt.n	80023f6 <calibrateSys+0xde>
 80023ec:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <calibrateSys+0x294>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
			if(i<(44))fourthlineWriteBuf[i] = '\0';
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b2b      	cmp	r3, #43	; 0x2b
 80023fa:	dc04      	bgt.n	8002406 <calibrateSys+0xee>
 80023fc:	4a6c      	ldr	r2, [pc, #432]	; (80025b0 <calibrateSys+0x298>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
			if(i<(44))fifthlineWriteBuf[i] =  '\0';
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b2b      	cmp	r3, #43	; 0x2b
 800240a:	dc04      	bgt.n	8002416 <calibrateSys+0xfe>
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <calibrateSys+0x29c>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
			if(i<(44))sixthlineWriteBuf[i] =  '\0';
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b2b      	cmp	r3, #43	; 0x2b
 800241a:	dc04      	bgt.n	8002426 <calibrateSys+0x10e>
 800241c:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <calibrateSys+0x2a0>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]

			if(i == 1)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d108      	bne.n	800243e <calibrateSys+0x126>
			{
				writeHeader = 0;	// reset the write header var so we can output multiple files
 800242c:	4b63      	ldr	r3, [pc, #396]	; (80025bc <calibrateSys+0x2a4>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
				whatToSave = 0;
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <calibrateSys+0x270>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
				initialRun = 0;
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <calibrateSys+0x274>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i<10000; i++) // if we wrote a file reset the dataBuffer and data array to allow multiple files to be written
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f242 720f 	movw	r2, #9999	; 0x270f
 800244a:	4293      	cmp	r3, r2
 800244c:	ddb9      	ble.n	80023c2 <calibrateSys+0xaa>
		}
	}



	int end = 0;	// find the end of the databuffer so we can append
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
	for(int j = 0; j<data_array_length && whatToSave == 0;j++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e00b      	b.n	8002470 <calibrateSys+0x158>
	{
		if(dataBuffer[j] == '\0')
 8002458:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <calibrateSys+0x288>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <calibrateSys+0x152>
		{
			end = j;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	61bb      	str	r3, [r7, #24]
			break;
 8002468:	e00b      	b.n	8002482 <calibrateSys+0x16a>
	for(int j = 0; j<data_array_length && whatToSave == 0;j++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <calibrateSys+0x2a8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	da03      	bge.n	8002482 <calibrateSys+0x16a>
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <calibrateSys+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ea      	beq.n	8002458 <calibrateSys+0x140>
		}
	}

	int a = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
	//collectedData = 0;

// POSSIBLE REASON FOR POBLEM IS THAT WE ARE RUNNING OUT OF BUFFER SPACE?
	if(end<data_array_length && pH<=(minPh+.20) && (beenWritten == 0 || beenWritten == 2) && whatToSave == 0) // do pH-up calibration if the pH is less than or equal to 4.0 and we haven't already saved pH-up dose until we reached a pH of 9.0
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <calibrateSys+0x2a8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	429a      	cmp	r2, r3
 800248e:	f280 813b 	bge.w	8002708 <calibrateSys+0x3f0>
 8002492:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <calibrateSys+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f80c 	bl	80004b4 <__aeabi_f2d>
 800249c:	4604      	mov	r4, r0
 800249e:	460d      	mov	r5, r1
 80024a0:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <calibrateSys+0x2b0>)
 80024a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a6:	a336      	add	r3, pc, #216	; (adr r3, 8002580 <calibrateSys+0x268>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fd fea4 	bl	80001f8 <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f7fe fad0 	bl	8000a5c <__aeabi_dcmple>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8122 	beq.w	8002708 <calibrateSys+0x3f0>
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <calibrateSys+0x280>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <calibrateSys+0x1be>
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <calibrateSys+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f040 8119 	bne.w	8002708 <calibrateSys+0x3f0>
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <calibrateSys+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8114 	bne.w	8002708 <calibrateSys+0x3f0>
	{
		for(int k = end;(k < (data_array_length-27)) && (whatToSave == 0) && (pH<maxPh) ;k++)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e0f5      	b.n	80026d2 <calibrateSys+0x3ba>
		{
			doseWater(0, ph_calibration_dose, 0);		// step the pump motors (pHDown,pHup,nutrient_dose)
 80024e6:	4b39      	ldr	r3, [pc, #228]	; (80025cc <calibrateSys+0x2b4>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb30 	bl	8000b54 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f001 f935 	bl	800376e <doseWater>
			float timeSeconds = waitForWaterToStabilize();// Returns the total time in seconds// convert sensor float type to char array and add to buffer (water_temp, ph after, TDS after, time to equilize)
 8002504:	f7ff fdea 	bl	80020dc <waitForWaterToStabilize>
 8002508:	6078      	str	r0, [r7, #4]

			getFiveSamples();			// get sensor data
 800250a:	f7ff fadd 	bl	8001ac8 <getFiveSamples>

			sprintf(converted_char, "%.2f", water_temp);
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <calibrateSys+0x2b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ffce 	bl	80004b4 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	492d      	ldr	r1, [pc, #180]	; (80025d4 <calibrateSys+0x2bc>)
 800251e:	482e      	ldr	r0, [pc, #184]	; (80025d8 <calibrateSys+0x2c0>)
 8002520:	f010 fa56 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00e      	b.n	8002548 <calibrateSys+0x230>
			{
				dataBuffer[k] = converted_char[a];
 800252a:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <calibrateSys+0x2c0>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	7819      	ldrb	r1, [r3, #0]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <calibrateSys+0x288>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	460a      	mov	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
				k++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3301      	adds	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
			for(a = 0; a < (sizeof converted_char);a++)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3301      	adds	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d9ed      	bls.n	800252a <calibrateSys+0x212>
			}
			dataBuffer[k] = ',';
 800254e:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <calibrateSys+0x288>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	222c      	movs	r2, #44	; 0x2c
 8002556:	701a      	strb	r2, [r3, #0]
			k++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]

			sprintf(converted_char, "%.2f", pH);
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <calibrateSys+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ffa6 	bl	80004b4 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4919      	ldr	r1, [pc, #100]	; (80025d4 <calibrateSys+0x2bc>)
 800256e:	481a      	ldr	r0, [pc, #104]	; (80025d8 <calibrateSys+0x2c0>)
 8002570:	f010 fa2e 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e03f      	b.n	80025fa <calibrateSys+0x2e2>
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	9999999a 	.word	0x9999999a
 8002584:	3fc99999 	.word	0x3fc99999
 8002588:	20005384 	.word	0x20005384
 800258c:	2000002c 	.word	0x2000002c
 8002590:	20000020 	.word	0x20000020
 8002594:	20005388 	.word	0x20005388
 8002598:	20005290 	.word	0x20005290
 800259c:	2000528c 	.word	0x2000528c
 80025a0:	20002b74 	.word	0x20002b74
 80025a4:	20000464 	.word	0x20000464
 80025a8:	20005294 	.word	0x20005294
 80025ac:	200052c4 	.word	0x200052c4
 80025b0:	200052f4 	.word	0x200052f4
 80025b4:	20005324 	.word	0x20005324
 80025b8:	20005354 	.word	0x20005354
 80025bc:	200054a0 	.word	0x200054a0
 80025c0:	20000000 	.word	0x20000000
 80025c4:	200054d4 	.word	0x200054d4
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000018 	.word	0x20000018
 80025d0:	200054cc 	.word	0x200054cc
 80025d4:	080163ec 	.word	0x080163ec
 80025d8:	20005284 	.word	0x20005284
			{
				dataBuffer[k] = converted_char[a];
 80025dc:	4a9e      	ldr	r2, [pc, #632]	; (8002858 <calibrateSys+0x540>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	7819      	ldrb	r1, [r3, #0]
 80025e4:	4a9d      	ldr	r2, [pc, #628]	; (800285c <calibrateSys+0x544>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	460a      	mov	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
				k++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
			for(a = 0; a < (sizeof converted_char);a++)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	3301      	adds	r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d9ed      	bls.n	80025dc <calibrateSys+0x2c4>
			}
			dataBuffer[k] = ',';
 8002600:	4a96      	ldr	r2, [pc, #600]	; (800285c <calibrateSys+0x544>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	222c      	movs	r2, #44	; 0x2c
 8002608:	701a      	strb	r2, [r3, #0]
			k++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3301      	adds	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]

			sprintf(converted_char, "%.2f", TDS);
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <calibrateSys+0x548>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff4d 	bl	80004b4 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4991      	ldr	r1, [pc, #580]	; (8002864 <calibrateSys+0x54c>)
 8002620:	488d      	ldr	r0, [pc, #564]	; (8002858 <calibrateSys+0x540>)
 8002622:	f010 f9d5 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e00e      	b.n	800264a <calibrateSys+0x332>
			{
				dataBuffer[k] = converted_char[a];
 800262c:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <calibrateSys+0x540>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	7819      	ldrb	r1, [r3, #0]
 8002634:	4a89      	ldr	r2, [pc, #548]	; (800285c <calibrateSys+0x544>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	460a      	mov	r2, r1
 800263c:	701a      	strb	r2, [r3, #0]
				k++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
			for(a = 0; a < (sizeof converted_char);a++)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	3301      	adds	r3, #1
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d9ed      	bls.n	800262c <calibrateSys+0x314>
			}
			dataBuffer[k] = ',';
 8002650:	4a82      	ldr	r2, [pc, #520]	; (800285c <calibrateSys+0x544>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	222c      	movs	r2, #44	; 0x2c
 8002658:	701a      	strb	r2, [r3, #0]
			k++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]

			sprintf(converted_char, "%.2f", timeSeconds);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fd ff27 	bl	80004b4 <__aeabi_f2d>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	497e      	ldr	r1, [pc, #504]	; (8002864 <calibrateSys+0x54c>)
 800266c:	487a      	ldr	r0, [pc, #488]	; (8002858 <calibrateSys+0x540>)
 800266e:	f010 f9af 	bl	80129d0 <siprintf>

			for(a = 0; a < (sizeof converted_char);a++)
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00e      	b.n	8002696 <calibrateSys+0x37e>
			{
				dataBuffer[k] = converted_char[a];
 8002678:	4a77      	ldr	r2, [pc, #476]	; (8002858 <calibrateSys+0x540>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	7819      	ldrb	r1, [r3, #0]
 8002680:	4a76      	ldr	r2, [pc, #472]	; (800285c <calibrateSys+0x544>)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	460a      	mov	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
				k++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
			for(a = 0; a < (sizeof converted_char);a++)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	3301      	adds	r3, #1
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d9ed      	bls.n	8002678 <calibrateSys+0x360>
			}
			dataBuffer[k] = ',';
 800269c:	4a6f      	ldr	r2, [pc, #444]	; (800285c <calibrateSys+0x544>)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	222c      	movs	r2, #44	; 0x2c
 80026a4:	701a      	strb	r2, [r3, #0]
			k++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
			if(pH>=maxPh)
 80026ac:	4b6e      	ldr	r3, [pc, #440]	; (8002868 <calibrateSys+0x550>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd feff 	bl	80004b4 <__aeabi_f2d>
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <calibrateSys+0x554>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fe f9d8 	bl	8000a70 <__aeabi_dcmpge>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <calibrateSys+0x3b4>
			{
				whatToSave = 1;
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <calibrateSys+0x558>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
		for(int k = end;(k < (data_array_length-27)) && (whatToSave == 0) && (pH<maxPh) ;k++)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b68      	ldr	r3, [pc, #416]	; (8002874 <calibrateSys+0x55c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3b1b      	subs	r3, #27
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	429a      	cmp	r2, r3
 80026dc:	f280 813e 	bge.w	800295c <calibrateSys+0x644>
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <calibrateSys+0x558>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 8139 	bne.w	800295c <calibrateSys+0x644>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <calibrateSys+0x550>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd fee0 	bl	80004b4 <__aeabi_f2d>
 80026f4:	4b5d      	ldr	r3, [pc, #372]	; (800286c <calibrateSys+0x554>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fe f9a5 	bl	8000a48 <__aeabi_dcmplt>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f aef0 	bne.w	80024e6 <calibrateSys+0x1ce>
 8002706:	e129      	b.n	800295c <calibrateSys+0x644>
			}
		}


	}
	else if(end<data_array_length && pH>=(maxPh-.20) && (beenWritten == 0 || beenWritten == 1) && whatToSave == 0) // do pH-down calibration if the pH is greater than 4.0 and end at pH 4.0 and we wrote the first file or we didnt write the first file
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <calibrateSys+0x55c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	f280 8125 	bge.w	800295e <calibrateSys+0x646>
 8002714:	4b54      	ldr	r3, [pc, #336]	; (8002868 <calibrateSys+0x550>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fecb 	bl	80004b4 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <calibrateSys+0x554>)
 8002724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002728:	a349      	add	r3, pc, #292	; (adr r3, 8002850 <calibrateSys+0x538>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd fd61 	bl	80001f4 <__aeabi_dsub>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fe f999 	bl	8000a70 <__aeabi_dcmpge>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 810c 	beq.w	800295e <calibrateSys+0x646>
 8002746:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <calibrateSys+0x560>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <calibrateSys+0x440>
 800274e:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <calibrateSys+0x560>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 8103 	bne.w	800295e <calibrateSys+0x646>
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <calibrateSys+0x558>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 80fe 	bne.w	800295e <calibrateSys+0x646>
	{
		for(int k = end;(k < (data_array_length-27)) &&  whatToSave == 0 && (pH>(minPh)) ;k++)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	e0e0      	b.n	800292a <calibrateSys+0x612>
		{
 			doseWater(ph_calibration_dose, 0, 0);		// step the pump motors (pHDown,pHup,nutrient_dose)
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <calibrateSys+0x564>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f9ef 	bl	8000b54 <__aeabi_d2f>
 8002776:	4603      	mov	r3, r0
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0100 	mov.w	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fff4 	bl	800376e <doseWater>
			float timeSeconds = waitForWaterToStabilize();// Returns the total time in seconds// convert sensor float type to char array and add to buffer (water_temp, ph after, TDS after, time to equilize)
 8002786:	f7ff fca9 	bl	80020dc <waitForWaterToStabilize>
 800278a:	6038      	str	r0, [r7, #0]

			getFiveSamples();		// get sensor data
 800278c:	f7ff f99c 	bl	8001ac8 <getFiveSamples>

			sprintf(converted_char, "%.2f", water_temp);					// converts input float to converted_char array (method level)
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <calibrateSys+0x568>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fe8d 	bl	80004b4 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4931      	ldr	r1, [pc, #196]	; (8002864 <calibrateSys+0x54c>)
 80027a0:	482d      	ldr	r0, [pc, #180]	; (8002858 <calibrateSys+0x540>)
 80027a2:	f010 f915 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e00e      	b.n	80027ca <calibrateSys+0x4b2>
			{
				dataBuffer[k] = converted_char[a];
 80027ac:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <calibrateSys+0x540>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	7819      	ldrb	r1, [r3, #0]
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <calibrateSys+0x544>)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4413      	add	r3, r2
 80027ba:	460a      	mov	r2, r1
 80027bc:	701a      	strb	r2, [r3, #0]
				k++;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
			for(a = 0; a < (sizeof converted_char);a++)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3301      	adds	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d9ed      	bls.n	80027ac <calibrateSys+0x494>
			}
			dataBuffer[k] = ',';
 80027d0:	4a22      	ldr	r2, [pc, #136]	; (800285c <calibrateSys+0x544>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4413      	add	r3, r2
 80027d6:	222c      	movs	r2, #44	; 0x2c
 80027d8:	701a      	strb	r2, [r3, #0]
			k++;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]

			sprintf(converted_char, "%.2f", pH);
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <calibrateSys+0x550>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fe65 	bl	80004b4 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	491d      	ldr	r1, [pc, #116]	; (8002864 <calibrateSys+0x54c>)
 80027f0:	4819      	ldr	r0, [pc, #100]	; (8002858 <calibrateSys+0x540>)
 80027f2:	f010 f8ed 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e00e      	b.n	800281a <calibrateSys+0x502>
			{
				dataBuffer[k] = converted_char[a];
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <calibrateSys+0x540>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	7819      	ldrb	r1, [r3, #0]
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <calibrateSys+0x544>)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	460a      	mov	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
				k++;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
			for(a = 0; a < (sizeof converted_char);a++)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3301      	adds	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d9ed      	bls.n	80027fc <calibrateSys+0x4e4>
			}
			dataBuffer[k] = ',';
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <calibrateSys+0x544>)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4413      	add	r3, r2
 8002826:	222c      	movs	r2, #44	; 0x2c
 8002828:	701a      	strb	r2, [r3, #0]
			k++;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]

			sprintf(converted_char, "%.2f", TDS);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <calibrateSys+0x548>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe3d 	bl	80004b4 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4909      	ldr	r1, [pc, #36]	; (8002864 <calibrateSys+0x54c>)
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <calibrateSys+0x540>)
 8002842:	f010 f8c5 	bl	80129d0 <siprintf>
			for(a = 0; a < (sizeof converted_char);a++)
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	e02a      	b.n	80028a2 <calibrateSys+0x58a>
 800284c:	f3af 8000 	nop.w
 8002850:	9999999a 	.word	0x9999999a
 8002854:	3fc99999 	.word	0x3fc99999
 8002858:	20005284 	.word	0x20005284
 800285c:	20002b74 	.word	0x20002b74
 8002860:	200054d0 	.word	0x200054d0
 8002864:	080163ec 	.word	0x080163ec
 8002868:	200054d4 	.word	0x200054d4
 800286c:	20000010 	.word	0x20000010
 8002870:	20005384 	.word	0x20005384
 8002874:	20000000 	.word	0x20000000
 8002878:	20005290 	.word	0x20005290
 800287c:	20000018 	.word	0x20000018
 8002880:	200054cc 	.word	0x200054cc
			{
				dataBuffer[k] = converted_char[a];
 8002884:	4a40      	ldr	r2, [pc, #256]	; (8002988 <calibrateSys+0x670>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	7819      	ldrb	r1, [r3, #0]
 800288c:	4a3f      	ldr	r2, [pc, #252]	; (800298c <calibrateSys+0x674>)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4413      	add	r3, r2
 8002892:	460a      	mov	r2, r1
 8002894:	701a      	strb	r2, [r3, #0]
				k++;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3301      	adds	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
			for(a = 0; a < (sizeof converted_char);a++)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	3301      	adds	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d9ed      	bls.n	8002884 <calibrateSys+0x56c>
			}
			dataBuffer[k] = ',';
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <calibrateSys+0x674>)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	222c      	movs	r2, #44	; 0x2c
 80028b0:	701a      	strb	r2, [r3, #0]
			k++;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]


			sprintf(converted_char, "%.2f", timeSeconds);
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7fd fdfb 	bl	80004b4 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4933      	ldr	r1, [pc, #204]	; (8002990 <calibrateSys+0x678>)
 80028c4:	4830      	ldr	r0, [pc, #192]	; (8002988 <calibrateSys+0x670>)
 80028c6:	f010 f883 	bl	80129d0 <siprintf>

			for(a = 0; a < (sizeof converted_char);a++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e00e      	b.n	80028ee <calibrateSys+0x5d6>
			{
				dataBuffer[k] = converted_char[a];
 80028d0:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <calibrateSys+0x670>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	7819      	ldrb	r1, [r3, #0]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	; (800298c <calibrateSys+0x674>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	460a      	mov	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
				k++;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
			for(a = 0; a < (sizeof converted_char);a++)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3301      	adds	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d9ed      	bls.n	80028d0 <calibrateSys+0x5b8>
			}
			dataBuffer[k] = ',';
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <calibrateSys+0x674>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	222c      	movs	r2, #44	; 0x2c
 80028fc:	701a      	strb	r2, [r3, #0]
			k++;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
			if(pH<=minPh )
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <calibrateSys+0x67c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fdd3 	bl	80004b4 <__aeabi_f2d>
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <calibrateSys+0x680>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fe f8a2 	bl	8000a5c <__aeabi_dcmple>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <calibrateSys+0x60c>
			{
				whatToSave = 2;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <calibrateSys+0x684>)
 8002920:	2202      	movs	r2, #2
 8002922:	601a      	str	r2, [r3, #0]
		for(int k = end;(k < (data_array_length-27)) &&  whatToSave == 0 && (pH>(minPh)) ;k++)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3301      	adds	r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <calibrateSys+0x688>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b1b      	subs	r3, #27
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	da13      	bge.n	800295e <calibrateSys+0x646>
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <calibrateSys+0x684>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <calibrateSys+0x646>
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <calibrateSys+0x67c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fdb6 	bl	80004b4 <__aeabi_f2d>
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <calibrateSys+0x680>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fe f899 	bl	8000a84 <__aeabi_dcmpgt>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af07 	bne.w	8002768 <calibrateSys+0x450>
 800295a:	e000      	b.n	800295e <calibrateSys+0x646>
		for(int k = end;(k < (data_array_length-27)) && (whatToSave == 0) && (pH<maxPh) ;k++)
 800295c:	bf00      	nop

		//if(pH>maxPh)
		//doseWater(5.0, 0, 0);		// step the pump motors (pHDown,pHup,nutrient_dose)


	if(usb_good == 1 && (whatToSave < 3) && (whatToSave != 0))
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <calibrateSys+0x68c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10c      	bne.n	8002980 <calibrateSys+0x668>
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <calibrateSys+0x684>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	dc08      	bgt.n	8002980 <calibrateSys+0x668>
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <calibrateSys+0x684>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <calibrateSys+0x668>
	{
		writeCalibrationData(whatToSave);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <calibrateSys+0x684>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f814 	bl	80029a8 <writeCalibrationData>

	}
}
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bdb0      	pop	{r4, r5, r7, pc}
 8002988:	20005284 	.word	0x20005284
 800298c:	20002b74 	.word	0x20002b74
 8002990:	080163ec 	.word	0x080163ec
 8002994:	200054d4 	.word	0x200054d4
 8002998:	20000008 	.word	0x20000008
 800299c:	20005384 	.word	0x20005384
 80029a0:	20000000 	.word	0x20000000
 80029a4:	200057fc 	.word	0x200057fc

080029a8 <writeCalibrationData>:
int dataValueReady = 0;
int beenAppended = 0;


void writeCalibrationData(int file) // file refers to the document to be written (pH-down characteristcs=0, pH-up=1)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

	int j =0; // indexes for concating float to char array
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
	int k = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
	lineNumber = 0;
 80029b8:	4b91      	ldr	r3, [pc, #580]	; (8002c00 <writeCalibrationData+0x258>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
	if(write_times < 2)
 80029be:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <writeCalibrationData+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f300 81e6 	bgt.w	8002d94 <writeCalibrationData+0x3ec>
		// NOTE: Following code was created because strcat() would somewhat randomly concat to the beginning or end
		// We need to add the initial water parameters to their respective strings
		// find the end of the array we want to place our merge val
		// append the initial TDS to the end of the second line

		for(int i = 0; i<44; i++) // copy over the text that will be appended so not to edit original
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e02f      	b.n	8002a2e <writeCalibrationData+0x86>
		{
			secondlineWriteBuf[i] = secondline[i];   // append to beginning time to equilize, ph after 5ml ph up, TDS adter 5ml ph-up
 80029ce:	4a8e      	ldr	r2, [pc, #568]	; (8002c08 <writeCalibrationData+0x260>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	7819      	ldrb	r1, [r3, #0]
 80029d6:	4a8d      	ldr	r2, [pc, #564]	; (8002c0c <writeCalibrationData+0x264>)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	460a      	mov	r2, r1
 80029de:	701a      	strb	r2, [r3, #0]
			thirdlineWriteBuf[i]  = thirdline[i];
 80029e0:	4a8b      	ldr	r2, [pc, #556]	; (8002c10 <writeCalibrationData+0x268>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	7819      	ldrb	r1, [r3, #0]
 80029e8:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <writeCalibrationData+0x26c>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	460a      	mov	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
			fourthlineWriteBuf[i] = fourthline[i];
 80029f2:	4a89      	ldr	r2, [pc, #548]	; (8002c18 <writeCalibrationData+0x270>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	4a88      	ldr	r2, [pc, #544]	; (8002c1c <writeCalibrationData+0x274>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	460a      	mov	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]
			fifthlineWriteBuf[i] =  fifthline[i];
 8002a04:	4a86      	ldr	r2, [pc, #536]	; (8002c20 <writeCalibrationData+0x278>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	7819      	ldrb	r1, [r3, #0]
 8002a0c:	4a85      	ldr	r2, [pc, #532]	; (8002c24 <writeCalibrationData+0x27c>)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	460a      	mov	r2, r1
 8002a14:	701a      	strb	r2, [r3, #0]
			sixthlineWriteBuf[i] =  sixthline[i];
 8002a16:	4a84      	ldr	r2, [pc, #528]	; (8002c28 <writeCalibrationData+0x280>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	7819      	ldrb	r1, [r3, #0]
 8002a1e:	4a83      	ldr	r2, [pc, #524]	; (8002c2c <writeCalibrationData+0x284>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	460a      	mov	r2, r1
 8002a26:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<44; i++) // copy over the text that will be appended so not to edit original
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b2b      	cmp	r3, #43	; 0x2b
 8002a32:	ddcc      	ble.n	80029ce <writeCalibrationData+0x26>
		}

		if(lineNumber == 0 && writeHeader == 0)
 8002a34:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <writeCalibrationData+0x258>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d122      	bne.n	8002a82 <writeCalibrationData+0xda>
 8002a3c:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <writeCalibrationData+0x288>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11e      	bne.n	8002a82 <writeCalibrationData+0xda>
		{
			strcat(calibration_data_array,quote);
 8002a44:	497b      	ldr	r1, [pc, #492]	; (8002c34 <writeCalibrationData+0x28c>)
 8002a46:	487c      	ldr	r0, [pc, #496]	; (8002c38 <writeCalibrationData+0x290>)
 8002a48:	f00f ffe2 	bl	8012a10 <strcat>
			strcat(calibration_data_array,title);
 8002a4c:	497b      	ldr	r1, [pc, #492]	; (8002c3c <writeCalibrationData+0x294>)
 8002a4e:	487a      	ldr	r0, [pc, #488]	; (8002c38 <writeCalibrationData+0x290>)
 8002a50:	f00f ffde 	bl	8012a10 <strcat>
			strcat(calibration_data_array,quote);
 8002a54:	4977      	ldr	r1, [pc, #476]	; (8002c34 <writeCalibrationData+0x28c>)
 8002a56:	4878      	ldr	r0, [pc, #480]	; (8002c38 <writeCalibrationData+0x290>)
 8002a58:	f00f ffda 	bl	8012a10 <strcat>
			strcat(calibration_data_array,four_commas);
 8002a5c:	4978      	ldr	r1, [pc, #480]	; (8002c40 <writeCalibrationData+0x298>)
 8002a5e:	4876      	ldr	r0, [pc, #472]	; (8002c38 <writeCalibrationData+0x290>)
 8002a60:	f00f ffd6 	bl	8012a10 <strcat>
			strcat(calibration_data_array,newLine);
 8002a64:	4977      	ldr	r1, [pc, #476]	; (8002c44 <writeCalibrationData+0x29c>)
 8002a66:	4874      	ldr	r0, [pc, #464]	; (8002c38 <writeCalibrationData+0x290>)
 8002a68:	f00f ffd2 	bl	8012a10 <strcat>
			strcat(calibration_data_array,firstline);
 8002a6c:	4976      	ldr	r1, [pc, #472]	; (8002c48 <writeCalibrationData+0x2a0>)
 8002a6e:	4872      	ldr	r0, [pc, #456]	; (8002c38 <writeCalibrationData+0x290>)
 8002a70:	f00f ffce 	bl	8012a10 <strcat>
			strcat(calibration_data_array,newLine);
 8002a74:	4973      	ldr	r1, [pc, #460]	; (8002c44 <writeCalibrationData+0x29c>)
 8002a76:	4870      	ldr	r0, [pc, #448]	; (8002c38 <writeCalibrationData+0x290>)
 8002a78:	f00f ffca 	bl	8012a10 <strcat>
			writeHeader = 1;
 8002a7c:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <writeCalibrationData+0x288>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
		}


		for( j = 0; j<44;j++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e02f      	b.n	8002ae8 <writeCalibrationData+0x140>
		{
			if(secondlineWriteBuf[j] != '\0')lastValTwo = j;
 8002a88:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <writeCalibrationData+0x264>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <writeCalibrationData+0xf2>
 8002a94:	4a6d      	ldr	r2, [pc, #436]	; (8002c4c <writeCalibrationData+0x2a4>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6013      	str	r3, [r2, #0]

			if(thirdlineWriteBuf[j] != '\0')lastValThree = j;
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <writeCalibrationData+0x26c>)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <writeCalibrationData+0x104>
 8002aa6:	4a6a      	ldr	r2, [pc, #424]	; (8002c50 <writeCalibrationData+0x2a8>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	6013      	str	r3, [r2, #0]

			if(fourthlineWriteBuf[j] != '\0') lastValFour = j;
 8002aac:	4a5b      	ldr	r2, [pc, #364]	; (8002c1c <writeCalibrationData+0x274>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <writeCalibrationData+0x116>
 8002ab8:	4a66      	ldr	r2, [pc, #408]	; (8002c54 <writeCalibrationData+0x2ac>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6013      	str	r3, [r2, #0]

			if(fifthlineWriteBuf[j] != '\0')lastValFive = j;
 8002abe:	4a59      	ldr	r2, [pc, #356]	; (8002c24 <writeCalibrationData+0x27c>)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <writeCalibrationData+0x128>
 8002aca:	4a63      	ldr	r2, [pc, #396]	; (8002c58 <writeCalibrationData+0x2b0>)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	6013      	str	r3, [r2, #0]

			if(sixthlineWriteBuf[j] != '\0') lastValSix = j;
 8002ad0:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <writeCalibrationData+0x284>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <writeCalibrationData+0x13a>
 8002adc:	4a5f      	ldr	r2, [pc, #380]	; (8002c5c <writeCalibrationData+0x2b4>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6013      	str	r3, [r2, #0]
		for( j = 0; j<44;j++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b2b      	cmp	r3, #43	; 0x2b
 8002aec:	ddcc      	ble.n	8002a88 <writeCalibrationData+0xe0>
		}
		for(k = 1; k<7;k++)	// write the initialTDS at the end of the array
 8002aee:	2301      	movs	r3, #1
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e034      	b.n	8002b5e <writeCalibrationData+0x1b6>
		{
			secondlineWriteBuf[lastValTwo+k] = initialTDS[k-1];
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <writeCalibrationData+0x2a4>)
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	440b      	add	r3, r1
 8002b00:	4957      	ldr	r1, [pc, #348]	; (8002c60 <writeCalibrationData+0x2b8>)
 8002b02:	5c89      	ldrb	r1, [r1, r2]
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <writeCalibrationData+0x264>)
 8002b06:	54d1      	strb	r1, [r2, r3]
			thirdlineWriteBuf[lastValThree+k] = postNutrientTDS[k-1];
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <writeCalibrationData+0x2a8>)
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	440b      	add	r3, r1
 8002b14:	4953      	ldr	r1, [pc, #332]	; (8002c64 <writeCalibrationData+0x2bc>)
 8002b16:	5c89      	ldrb	r1, [r1, r2]
 8002b18:	4a3e      	ldr	r2, [pc, #248]	; (8002c14 <writeCalibrationData+0x26c>)
 8002b1a:	54d1      	strb	r1, [r2, r3]
			fourthlineWriteBuf[lastValFour+k] = initialPH[k-1];
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <writeCalibrationData+0x2ac>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	440b      	add	r3, r1
 8002b28:	494f      	ldr	r1, [pc, #316]	; (8002c68 <writeCalibrationData+0x2c0>)
 8002b2a:	5c89      	ldrb	r1, [r1, r2]
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <writeCalibrationData+0x274>)
 8002b2e:	54d1      	strb	r1, [r2, r3]
			fifthlineWriteBuf[lastValFive+k] = postNutrientPH[k-1];
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1e5a      	subs	r2, r3, #1
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <writeCalibrationData+0x2b0>)
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	440b      	add	r3, r1
 8002b3c:	494b      	ldr	r1, [pc, #300]	; (8002c6c <writeCalibrationData+0x2c4>)
 8002b3e:	5c89      	ldrb	r1, [r1, r2]
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <writeCalibrationData+0x27c>)
 8002b42:	54d1      	strb	r1, [r2, r3]
			sixthlineWriteBuf[lastValSix+k] = timeToEqualize[k-1];
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1e5a      	subs	r2, r3, #1
 8002b48:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <writeCalibrationData+0x2b4>)
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	440b      	add	r3, r1
 8002b50:	4947      	ldr	r1, [pc, #284]	; (8002c70 <writeCalibrationData+0x2c8>)
 8002b52:	5c89      	ldrb	r1, [r1, r2]
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <writeCalibrationData+0x284>)
 8002b56:	54d1      	strb	r1, [r2, r3]
		for(k = 1; k<7;k++)	// write the initialTDS at the end of the array
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	ddc7      	ble.n	8002af4 <writeCalibrationData+0x14c>
		}

		for( j = 0; j<data_array_length; j++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e0da      	b.n	8002d20 <writeCalibrationData+0x378>
		{
			singleChar[0] = dataBuffer[j];
 8002b6a:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <writeCalibrationData+0x2cc>)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <writeCalibrationData+0x2d0>)
 8002b74:	701a      	strb	r2, [r3, #0]
			strncat(calibration_data_array,singleChar,1);	// add the data one char at a time
 8002b76:	2201      	movs	r2, #1
 8002b78:	493f      	ldr	r1, [pc, #252]	; (8002c78 <writeCalibrationData+0x2d0>)
 8002b7a:	482f      	ldr	r0, [pc, #188]	; (8002c38 <writeCalibrationData+0x290>)
 8002b7c:	f00f ff57 	bl	8012a2e <strncat>

			if(singleChar[0] == ',')	// every 3 commas is a new line
 8002b80:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <writeCalibrationData+0x2d0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b2c      	cmp	r3, #44	; 0x2c
 8002b86:	d104      	bne.n	8002b92 <writeCalibrationData+0x1ea>
			{
				dataValueReady++;
 8002b88:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <writeCalibrationData+0x2d4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <writeCalibrationData+0x2d4>)
 8002b90:	6013      	str	r3, [r2, #0]
			}
			if(dataValueReady == 4)			// every 4 data points append to char array string
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <writeCalibrationData+0x2d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d10a      	bne.n	8002bb0 <writeCalibrationData+0x208>
			{
				dataValueReady = 0;
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <writeCalibrationData+0x2d4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
				lineNumber++;
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <writeCalibrationData+0x258>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <writeCalibrationData+0x258>)
 8002ba8:	6013      	str	r3, [r2, #0]
				beenAppended = 0;
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <writeCalibrationData+0x2d8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
			}
			if(lineNumber == 1 && beenAppended == 0)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <writeCalibrationData+0x258>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10f      	bne.n	8002bd8 <writeCalibrationData+0x230>
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <writeCalibrationData+0x2d8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <writeCalibrationData+0x230>
			{
				strcat(calibration_data_array,secondlineWriteBuf);
 8002bc0:	4912      	ldr	r1, [pc, #72]	; (8002c0c <writeCalibrationData+0x264>)
 8002bc2:	481d      	ldr	r0, [pc, #116]	; (8002c38 <writeCalibrationData+0x290>)
 8002bc4:	f00f ff24 	bl	8012a10 <strcat>
				strcat(calibration_data_array,newLine);
 8002bc8:	491e      	ldr	r1, [pc, #120]	; (8002c44 <writeCalibrationData+0x29c>)
 8002bca:	481b      	ldr	r0, [pc, #108]	; (8002c38 <writeCalibrationData+0x290>)
 8002bcc:	f00f ff20 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <writeCalibrationData+0x2d8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e0a0      	b.n	8002d1a <writeCalibrationData+0x372>
			}
			else if(lineNumber == 2 && beenAppended == 0)
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <writeCalibrationData+0x258>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d151      	bne.n	8002c84 <writeCalibrationData+0x2dc>
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <writeCalibrationData+0x2d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d14d      	bne.n	8002c84 <writeCalibrationData+0x2dc>
			{
				strcat(calibration_data_array,thirdlineWriteBuf);
 8002be8:	490a      	ldr	r1, [pc, #40]	; (8002c14 <writeCalibrationData+0x26c>)
 8002bea:	4813      	ldr	r0, [pc, #76]	; (8002c38 <writeCalibrationData+0x290>)
 8002bec:	f00f ff10 	bl	8012a10 <strcat>
				strcat(calibration_data_array,newLine);
 8002bf0:	4914      	ldr	r1, [pc, #80]	; (8002c44 <writeCalibrationData+0x29c>)
 8002bf2:	4811      	ldr	r0, [pc, #68]	; (8002c38 <writeCalibrationData+0x290>)
 8002bf4:	f00f ff0c 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <writeCalibrationData+0x2d8>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e08c      	b.n	8002d1a <writeCalibrationData+0x372>
 8002c00:	200054bc 	.word	0x200054bc
 8002c04:	2000528c 	.word	0x2000528c
 8002c08:	20000100 	.word	0x20000100
 8002c0c:	20005294 	.word	0x20005294
 8002c10:	20000130 	.word	0x20000130
 8002c14:	200052c4 	.word	0x200052c4
 8002c18:	20000160 	.word	0x20000160
 8002c1c:	200052f4 	.word	0x200052f4
 8002c20:	20000190 	.word	0x20000190
 8002c24:	20005324 	.word	0x20005324
 8002c28:	200001c0 	.word	0x200001c0
 8002c2c:	20005354 	.word	0x20005354
 8002c30:	200054a0 	.word	0x200054a0
 8002c34:	2000003c 	.word	0x2000003c
 8002c38:	20000464 	.word	0x20000464
 8002c3c:	20000040 	.word	0x20000040
 8002c40:	20000034 	.word	0x20000034
 8002c44:	20000030 	.word	0x20000030
 8002c48:	200000b8 	.word	0x200000b8
 8002c4c:	200054a8 	.word	0x200054a8
 8002c50:	200054ac 	.word	0x200054ac
 8002c54:	200054b0 	.word	0x200054b0
 8002c58:	200054b4 	.word	0x200054b4
 8002c5c:	200054b8 	.word	0x200054b8
 8002c60:	2000043c 	.word	0x2000043c
 8002c64:	20000444 	.word	0x20000444
 8002c68:	2000044c 	.word	0x2000044c
 8002c6c:	20000454 	.word	0x20000454
 8002c70:	2000045c 	.word	0x2000045c
 8002c74:	20002b74 	.word	0x20002b74
 8002c78:	200054c0 	.word	0x200054c0
 8002c7c:	200054c4 	.word	0x200054c4
 8002c80:	200054c8 	.word	0x200054c8
			}
			else if(lineNumber == 3 && beenAppended == 0)
 8002c84:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <writeCalibrationData+0x3f4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10f      	bne.n	8002cac <writeCalibrationData+0x304>
 8002c8c:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <writeCalibrationData+0x304>
			{
				strcat(calibration_data_array,fourthlineWriteBuf);
 8002c94:	4943      	ldr	r1, [pc, #268]	; (8002da4 <writeCalibrationData+0x3fc>)
 8002c96:	4844      	ldr	r0, [pc, #272]	; (8002da8 <writeCalibrationData+0x400>)
 8002c98:	f00f feba 	bl	8012a10 <strcat>
				strcat(calibration_data_array,newLine);
 8002c9c:	4943      	ldr	r1, [pc, #268]	; (8002dac <writeCalibrationData+0x404>)
 8002c9e:	4842      	ldr	r0, [pc, #264]	; (8002da8 <writeCalibrationData+0x400>)
 8002ca0:	f00f feb6 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e036      	b.n	8002d1a <writeCalibrationData+0x372>
			}
			else if(lineNumber == 4 && beenAppended == 0)
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <writeCalibrationData+0x3f4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d10f      	bne.n	8002cd4 <writeCalibrationData+0x32c>
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <writeCalibrationData+0x32c>
			{
				//strcat(calibration_data_array,newLine);
				strcat(calibration_data_array,fifthlineWriteBuf);
 8002cbc:	493c      	ldr	r1, [pc, #240]	; (8002db0 <writeCalibrationData+0x408>)
 8002cbe:	483a      	ldr	r0, [pc, #232]	; (8002da8 <writeCalibrationData+0x400>)
 8002cc0:	f00f fea6 	bl	8012a10 <strcat>
				strcat(calibration_data_array,newLine);
 8002cc4:	4939      	ldr	r1, [pc, #228]	; (8002dac <writeCalibrationData+0x404>)
 8002cc6:	4838      	ldr	r0, [pc, #224]	; (8002da8 <writeCalibrationData+0x400>)
 8002cc8:	f00f fea2 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e022      	b.n	8002d1a <writeCalibrationData+0x372>
			}
			else if(lineNumber == 5 && beenAppended == 0)
 8002cd4:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <writeCalibrationData+0x3f4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d10f      	bne.n	8002cfc <writeCalibrationData+0x354>
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <writeCalibrationData+0x354>
			{
				strcat(calibration_data_array,sixthlineWriteBuf);
 8002ce4:	4933      	ldr	r1, [pc, #204]	; (8002db4 <writeCalibrationData+0x40c>)
 8002ce6:	4830      	ldr	r0, [pc, #192]	; (8002da8 <writeCalibrationData+0x400>)
 8002ce8:	f00f fe92 	bl	8012a10 <strcat>
				strcat(calibration_data_array,newLine);
 8002cec:	492f      	ldr	r1, [pc, #188]	; (8002dac <writeCalibrationData+0x404>)
 8002cee:	482e      	ldr	r0, [pc, #184]	; (8002da8 <writeCalibrationData+0x400>)
 8002cf0:	f00f fe8e 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00e      	b.n	8002d1a <writeCalibrationData+0x372>
			}
			else if(lineNumber >5 && beenAppended == 0)
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <writeCalibrationData+0x3f4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	dd0a      	ble.n	8002d1a <writeCalibrationData+0x372>
 8002d04:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <writeCalibrationData+0x372>
			{
				strcat(calibration_data_array,newLine);
 8002d0c:	4927      	ldr	r1, [pc, #156]	; (8002dac <writeCalibrationData+0x404>)
 8002d0e:	4826      	ldr	r0, [pc, #152]	; (8002da8 <writeCalibrationData+0x400>)
 8002d10:	f00f fe7e 	bl	8012a10 <strcat>
				beenAppended = 1;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <writeCalibrationData+0x3f8>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
		for( j = 0; j<data_array_length; j++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <writeCalibrationData+0x410>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f6ff af1f 	blt.w	8002b6a <writeCalibrationData+0x1c2>
			}

		}

			if(file == 1 && write_times < 2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d113      	bne.n	8002d5a <writeCalibrationData+0x3b2>
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <writeCalibrationData+0x414>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	dc0f      	bgt.n	8002d5a <writeCalibrationData+0x3b2>
			{
				Write_File("/TDS_PH_UP_Calibration_data.csv",calibration_data_array); // write the data to pH-up data.
 8002d3a:	491b      	ldr	r1, [pc, #108]	; (8002da8 <writeCalibrationData+0x400>)
 8002d3c:	4820      	ldr	r0, [pc, #128]	; (8002dc0 <writeCalibrationData+0x418>)
 8002d3e:	f7fe fcf5 	bl	800172c <Write_File>
				beenWritten = 1;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <writeCalibrationData+0x41c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
				write_times++;
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <writeCalibrationData+0x414>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <writeCalibrationData+0x414>)
 8002d50:	6013      	str	r3, [r2, #0]
				whatToSave = 0;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <writeCalibrationData+0x420>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e015      	b.n	8002d86 <writeCalibrationData+0x3de>
			}
			else if(file == 2 && write_times < 2)	// if we wrote the last file unmount the USB
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d112      	bne.n	8002d86 <writeCalibrationData+0x3de>
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <writeCalibrationData+0x414>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	dc0e      	bgt.n	8002d86 <writeCalibrationData+0x3de>
			{
				beenWritten = 2;
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <writeCalibrationData+0x41c>)
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	601a      	str	r2, [r3, #0]
				Write_File("/TDS_PH_Down_Calibration_data.csv",calibration_data_array); // write the data to pH-up data.
 8002d6e:	490e      	ldr	r1, [pc, #56]	; (8002da8 <writeCalibrationData+0x400>)
 8002d70:	4816      	ldr	r0, [pc, #88]	; (8002dcc <writeCalibrationData+0x424>)
 8002d72:	f7fe fcdb 	bl	800172c <Write_File>
				write_times++;
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <writeCalibrationData+0x414>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <writeCalibrationData+0x414>)
 8002d7e:	6013      	str	r3, [r2, #0]
				whatToSave = 0;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <writeCalibrationData+0x420>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
			}

			if(write_times > 2) Unmount_USB();
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <writeCalibrationData+0x414>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	dd03      	ble.n	8002d96 <writeCalibrationData+0x3ee>
 8002d8e:	f7fe fc2d 	bl	80015ec <Unmount_USB>
 8002d92:	e000      	b.n	8002d96 <writeCalibrationData+0x3ee>

		}
		else return;
 8002d94:	bf00      	nop



}
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200054bc 	.word	0x200054bc
 8002da0:	200054c8 	.word	0x200054c8
 8002da4:	200052f4 	.word	0x200052f4
 8002da8:	20000464 	.word	0x20000464
 8002dac:	20000030 	.word	0x20000030
 8002db0:	20005324 	.word	0x20005324
 8002db4:	20005354 	.word	0x20005354
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	2000528c 	.word	0x2000528c
 8002dc0:	080163f4 	.word	0x080163f4
 8002dc4:	20005290 	.word	0x20005290
 8002dc8:	20005384 	.word	0x20005384
 8002dcc:	08016414 	.word	0x08016414

08002dd0 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 8002dd0:	b598      	push	{r3, r4, r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	482f      	ldr	r0, [pc, #188]	; (8002e94 <fanOn+0xc4>)
 8002dd8:	f005 fd22 	bl	8008820 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <fanOn+0xc8>)
 8002dde:	f640 323f 	movw	r2, #2879	; 0xb3f
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <fanOn+0xc8>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ffb9 	bl	8000d60 <__aeabi_ui2f>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <fanOn+0xcc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fe f8be 	bl	8000f78 <__aeabi_fdiv>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4c26      	ldr	r4, [pc, #152]	; (8002e98 <fanOn+0xc8>)
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe f9f1 	bl	80011e8 <__aeabi_f2uiz>
 8002e06:	4603      	mov	r3, r0
 8002e08:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <fanOn+0xc8>)
 8002e0c:	f245 0214 	movw	r2, #20500	; 0x5014
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8002e12:	2108      	movs	r1, #8
 8002e14:	481f      	ldr	r0, [pc, #124]	; (8002e94 <fanOn+0xc4>)
 8002e16:	f005 fd03 	bl	8008820 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <fanOn+0xc8>)
 8002e1c:	f640 323f 	movw	r2, #2879	; 0xb3f
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <fanOn+0xc8>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd ff9a 	bl	8000d60 <__aeabi_ui2f>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <fanOn+0xd0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7fe f89f 	bl	8000f78 <__aeabi_fdiv>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4c16      	ldr	r4, [pc, #88]	; (8002e98 <fanOn+0xc8>)
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f9d2 	bl	80011e8 <__aeabi_f2uiz>
 8002e44:	4603      	mov	r3, r0
 8002e46:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <fanOn+0xc8>)
 8002e4a:	f245 0214 	movw	r2, #20500	; 0x5014
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8002e50:	2100      	movs	r1, #0
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <fanOn+0xd4>)
 8002e54:	f005 fce4 	bl	8008820 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <fanOn+0xd8>)
 8002e5a:	f640 323f 	movw	r2, #2879	; 0xb3f
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <fanOn+0xd8>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd ff7b 	bl	8000d60 <__aeabi_ui2f>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <fanOn+0xdc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7fe f880 	bl	8000f78 <__aeabi_fdiv>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4c0b      	ldr	r4, [pc, #44]	; (8002ea8 <fanOn+0xd8>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe f9b3 	bl	80011e8 <__aeabi_f2uiz>
 8002e82:	4603      	mov	r3, r0
 8002e84:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <fanOn+0xd8>)
 8002e88:	f245 0214 	movw	r2, #20500	; 0x5014
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e8e:	bf00      	nop
 8002e90:	bd98      	pop	{r3, r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20005950 	.word	0x20005950
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	200001f8 	.word	0x200001f8
 8002ea0:	200001f0 	.word	0x200001f0
 8002ea4:	200058d4 	.word	0x200058d4
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	200001f4 	.word	0x200001f4

08002eb0 <systemControl>:

extern void calibrateSys();


void systemControl()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af02      	add	r7, sp, #8
	if(runOnce == 1)// && write_times == 2)
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <systemControl+0x4c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d114      	bne.n	8002ee8 <systemControl+0x38>
	{
		runOnce = 0;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <systemControl+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
		fanOn();
 8002ec4:	f7ff ff84 	bl	8002dd0 <fanOn>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2309      	movs	r3, #9
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2222      	movs	r2, #34	; 0x22
 8002ed4:	2108      	movs	r1, #8
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f7fe fd0a 	bl	80018f0 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8002edc:	230a      	movs	r3, #10
 8002ede:	2213      	movs	r2, #19
 8002ee0:	2109      	movs	r1, #9
 8002ee2:	2013      	movs	r0, #19
 8002ee4:	f000 f80e 	bl	8002f04 <setLightCyle>
	}
/*water_temp	  = readWaterTemp();			// get sensor data
		TDS 		  = readWaterTDS();
		pH 		 	  = readPH();*/
	//checkLightCycle();						    // check if its time to turn lights on or off
	if(write_times != 2)calibrateSys();
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <systemControl+0x50>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d001      	beq.n	8002ef4 <systemControl+0x44>
 8002ef0:	f7ff fa12 	bl	8002318 <calibrateSys>




}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200001fc 	.word	0x200001fc
 8002f00:	2000528c 	.word	0x2000528c

08002f04 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8002f04:	b490      	push	{r4, r7}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	4603      	mov	r3, r0
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	717b      	strb	r3, [r7, #5]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <setLightCyle+0x40>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <setLightCyle+0x40>)
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <setLightCyle+0x44>)
 8002f30:	797b      	ldrb	r3, [r7, #5]
 8002f32:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <setLightCyle+0x44>)
 8002f36:	793b      	ldrb	r3, [r7, #4]
 8002f38:	7053      	strb	r3, [r2, #1]
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc90      	pop	{r4, r7}
 8002f42:	4770      	bx	lr
 8002f44:	200054d8 	.word	0x200054d8
 8002f48:	200054e4 	.word	0x200054e4

08002f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f50:	f001 fd28 	bl	80049a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f54:	f000 f819 	bl	8002f8a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f58:	f000 fb3e 	bl	80035d8 <MX_GPIO_Init>
  MX_ADC2_Init();
 8002f5c:	f000 f876 	bl	800304c <MX_ADC2_Init>
  MX_TIM1_Init();
 8002f60:	f000 f96c 	bl	800323c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f64:	f000 fa16 	bl	8003394 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002f68:	f000 fa60 	bl	800342c <MX_TIM4_Init>
  MX_TIM10_Init();
 8002f6c:	f000 faac 	bl	80034c8 <MX_TIM10_Init>
  MX_RTC_Init();
 8002f70:	f000 f8d2 	bl	8003118 <MX_RTC_Init>
  MX_TIM12_Init();
 8002f74:	f000 faf6 	bl	8003564 <MX_TIM12_Init>
  MX_FATFS_Init();
 8002f78:	f007 fa08 	bl	800a38c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8002f7c:	f00e fa5c 	bl	8011438 <MX_USB_HOST_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
  {

	  MX_USB_HOST_Process();
 8002f80:	f00e fa80 	bl	8011484 <MX_USB_HOST_Process>
	  systemControl();
 8002f84:	f7ff ff94 	bl	8002eb0 <systemControl>
	  MX_USB_HOST_Process();
 8002f88:	e7fa      	b.n	8002f80 <main+0x34>

08002f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b096      	sub	sp, #88	; 0x58
 8002f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f94:	2230      	movs	r2, #48	; 0x30
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f00e fde5 	bl	8011b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fae:	463b      	mov	r3, r7
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002fd8:	23d8      	movs	r3, #216	; 0xd8
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002fdc:	2306      	movs	r3, #6
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002fe0:	2309      	movs	r3, #9
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 f971 	bl	80072d0 <HAL_RCC_OscConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002ff4:	f000 fbb6 	bl	8003764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003008:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fbaa 	bl	8007770 <HAL_RCC_ClockConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003022:	f000 fb9f 	bl	8003764 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003026:	2304      	movs	r3, #4
 8003028:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800302a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800302e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fd48 	bl	8007ac8 <HAL_RCCEx_PeriphCLKConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800303e:	f000 fb91 	bl	8003764 <Error_Handler>
  }
}
 8003042:	bf00      	nop
 8003044:	3758      	adds	r7, #88	; 0x58
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003052:	463b      	mov	r3, r7
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <MX_ADC2_Init+0xc0>)
 8003060:	2201      	movs	r2, #1
 8003062:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <MX_ADC2_Init+0xc0>)
 8003066:	4a2a      	ldr	r2, [pc, #168]	; (8003110 <MX_ADC2_Init+0xc4>)
 8003068:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <MX_ADC2_Init+0xc0>)
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <MX_ADC2_Init+0xc0>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <MX_ADC2_Init+0xc0>)
 8003078:	2201      	movs	r2, #1
 800307a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <MX_ADC2_Init+0xc0>)
 800307e:	2200      	movs	r2, #0
 8003080:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <MX_ADC2_Init+0xc0>)
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <MX_ADC2_Init+0xc0>)
 800308c:	2201      	movs	r2, #1
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <MX_ADC2_Init+0xc0>)
 8003092:	2200      	movs	r2, #0
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <MX_ADC2_Init+0xc0>)
 8003098:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <MX_ADC2_Init+0xc8>)
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <MX_ADC2_Init+0xc0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <MX_ADC2_Init+0xc0>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <MX_ADC2_Init+0xc0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <MX_ADC2_Init+0xc0>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80030b6:	4815      	ldr	r0, [pc, #84]	; (800310c <MX_ADC2_Init+0xc0>)
 80030b8:	f001 fd06 	bl	8004ac8 <HAL_ADC_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 80030c2:	f000 fb4f 	bl	8003764 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030c6:	2304      	movs	r3, #4
 80030c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030d2:	463b      	mov	r3, r7
 80030d4:	4619      	mov	r1, r3
 80030d6:	480d      	ldr	r0, [pc, #52]	; (800310c <MX_ADC2_Init+0xc0>)
 80030d8:	f001 fe7a 	bl	8004dd0 <HAL_ADC_ConfigChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 80030e2:	f000 fb3f 	bl	8003764 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80030e6:	2305      	movs	r3, #5
 80030e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80030ea:	2302      	movs	r3, #2
 80030ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030ee:	463b      	mov	r3, r7
 80030f0:	4619      	mov	r1, r3
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <MX_ADC2_Init+0xc0>)
 80030f4:	f001 fe6c 	bl	8004dd0 <HAL_ADC_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80030fe:	f000 fb31 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000588c 	.word	0x2000588c
 8003110:	40012100 	.word	0x40012100
 8003114:	0f000001 	.word	0x0f000001

08003118 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800311e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <MX_RTC_Init+0x11c>)
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <MX_RTC_Init+0x120>)
 8003144:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <MX_RTC_Init+0x11c>)
 8003148:	2200      	movs	r2, #0
 800314a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <MX_RTC_Init+0x11c>)
 800314e:	227f      	movs	r2, #127	; 0x7f
 8003150:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <MX_RTC_Init+0x11c>)
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <MX_RTC_Init+0x11c>)
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800315e:	4b35      	ldr	r3, [pc, #212]	; (8003234 <MX_RTC_Init+0x11c>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003164:	4b33      	ldr	r3, [pc, #204]	; (8003234 <MX_RTC_Init+0x11c>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800316a:	4832      	ldr	r0, [pc, #200]	; (8003234 <MX_RTC_Init+0x11c>)
 800316c:	f004 fda2 	bl	8007cb4 <HAL_RTC_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8003176:	f000 faf5 	bl	8003764 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003198:	2201      	movs	r2, #1
 800319a:	4619      	mov	r1, r3
 800319c:	4825      	ldr	r0, [pc, #148]	; (8003234 <MX_RTC_Init+0x11c>)
 800319e:	f004 fe13 	bl	8007dc8 <HAL_RTC_SetTime>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80031a8:	f000 fadc 	bl	8003764 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80031c4:	f107 0320 	add.w	r3, r7, #32
 80031c8:	2201      	movs	r2, #1
 80031ca:	4619      	mov	r1, r3
 80031cc:	4819      	ldr	r0, [pc, #100]	; (8003234 <MX_RTC_Init+0x11c>)
 80031ce:	f004 ff03 	bl	8007fd8 <HAL_RTC_SetDate>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80031d8:	f000 fac4 	bl	8003764 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80031dc:	2300      	movs	r3, #0
 80031de:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80031fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003200:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	2201      	movs	r2, #1
 8003206:	4619      	mov	r1, r3
 8003208:	480a      	ldr	r0, [pc, #40]	; (8003234 <MX_RTC_Init+0x11c>)
 800320a:	f004 ffd4 	bl	80081b6 <HAL_RTC_SetAlarm>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8003214:	f000 faa6 	bl	8003764 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_RTC_Init+0x11c>)
 800321e:	f005 f95e 	bl	80084de <HAL_RTCEx_SetWakeUpTimer>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8003228:	f000 fa9c 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800322c:	bf00      	nop
 800322e:	3730      	adds	r7, #48	; 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000591c 	.word	0x2000591c
 8003238:	40002800 	.word	0x40002800

0800323c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b096      	sub	sp, #88	; 0x58
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003250:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]
 800326a:	615a      	str	r2, [r3, #20]
 800326c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2220      	movs	r2, #32
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f00e fc77 	bl	8011b68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800327a:	4b44      	ldr	r3, [pc, #272]	; (800338c <MX_TIM1_Init+0x150>)
 800327c:	4a44      	ldr	r2, [pc, #272]	; (8003390 <MX_TIM1_Init+0x154>)
 800327e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <MX_TIM1_Init+0x150>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <MX_TIM1_Init+0x150>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <MX_TIM1_Init+0x150>)
 800328e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003292:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <MX_TIM1_Init+0x150>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800329a:	4b3c      	ldr	r3, [pc, #240]	; (800338c <MX_TIM1_Init+0x150>)
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032a0:	4b3a      	ldr	r3, [pc, #232]	; (800338c <MX_TIM1_Init+0x150>)
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032a6:	4839      	ldr	r0, [pc, #228]	; (800338c <MX_TIM1_Init+0x150>)
 80032a8:	f005 f9ad 	bl	8008606 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80032b2:	f000 fa57 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c0:	4619      	mov	r1, r3
 80032c2:	4832      	ldr	r0, [pc, #200]	; (800338c <MX_TIM1_Init+0x150>)
 80032c4:	f005 fc32 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80032ce:	f000 fa49 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032d2:	482e      	ldr	r0, [pc, #184]	; (800338c <MX_TIM1_Init+0x150>)
 80032d4:	f005 fa4c 	bl	8008770 <HAL_TIM_PWM_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80032de:	f000 fa41 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032ee:	4619      	mov	r1, r3
 80032f0:	4826      	ldr	r0, [pc, #152]	; (800338c <MX_TIM1_Init+0x150>)
 80032f2:	f005 ffe3 	bl	80092bc <HAL_TIMEx_MasterConfigSynchronization>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80032fc:	f000 fa32 	bl	8003764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003300:	2360      	movs	r3, #96	; 0x60
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003310:	2304      	movs	r3, #4
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	2200      	movs	r2, #0
 8003322:	4619      	mov	r1, r3
 8003324:	4819      	ldr	r0, [pc, #100]	; (800338c <MX_TIM1_Init+0x150>)
 8003326:	f005 fb43 	bl	80089b0 <HAL_TIM_PWM_ConfigChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003330:	f000 fa18 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003338:	2208      	movs	r2, #8
 800333a:	4619      	mov	r1, r3
 800333c:	4813      	ldr	r0, [pc, #76]	; (800338c <MX_TIM1_Init+0x150>)
 800333e:	f005 fb37 	bl	80089b0 <HAL_TIM_PWM_ConfigChannel>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003348:	f000 fa0c 	bl	8003764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003364:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4807      	ldr	r0, [pc, #28]	; (800338c <MX_TIM1_Init+0x150>)
 8003370:	f006 f81e 	bl	80093b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800337a:	f000 f9f3 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <MX_TIM1_Init+0x150>)
 8003380:	f001 f844 	bl	800440c <HAL_TIM_MspPostInit>

}
 8003384:	bf00      	nop
 8003386:	3758      	adds	r7, #88	; 0x58
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20005950 	.word	0x20005950
 8003390:	40010000 	.word	0x40010000

08003394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a8:	463b      	mov	r3, r7
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <MX_TIM2_Init+0x94>)
 80033b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <MX_TIM2_Init+0x94>)
 80033ba:	2223      	movs	r2, #35	; 0x23
 80033bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <MX_TIM2_Init+0x94>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <MX_TIM2_Init+0x94>)
 80033c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80033ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <MX_TIM2_Init+0x94>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <MX_TIM2_Init+0x94>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033d8:	4813      	ldr	r0, [pc, #76]	; (8003428 <MX_TIM2_Init+0x94>)
 80033da:	f005 f914 	bl	8008606 <HAL_TIM_Base_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80033e4:	f000 f9be 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4619      	mov	r1, r3
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <MX_TIM2_Init+0x94>)
 80033f6:	f005 fb99 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003400:	f000 f9b0 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800340c:	463b      	mov	r3, r7
 800340e:	4619      	mov	r1, r3
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_TIM2_Init+0x94>)
 8003412:	f005 ff53 	bl	80092bc <HAL_TIMEx_MasterConfigSynchronization>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800341c:	f000 f9a2 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20005998 	.word	0x20005998

0800342c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003440:	463b      	mov	r3, r7
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <MX_TIM4_Init+0x94>)
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <MX_TIM4_Init+0x98>)
 800344c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <MX_TIM4_Init+0x94>)
 8003450:	2223      	movs	r2, #35	; 0x23
 8003452:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <MX_TIM4_Init+0x94>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <MX_TIM4_Init+0x94>)
 800345c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003460:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <MX_TIM4_Init+0x94>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_TIM4_Init+0x94>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800346e:	4814      	ldr	r0, [pc, #80]	; (80034c0 <MX_TIM4_Init+0x94>)
 8003470:	f005 f8c9 	bl	8008606 <HAL_TIM_Base_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800347a:	f000 f973 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4619      	mov	r1, r3
 800348a:	480d      	ldr	r0, [pc, #52]	; (80034c0 <MX_TIM4_Init+0x94>)
 800348c:	f005 fb4e 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003496:	f000 f965 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034a2:	463b      	mov	r3, r7
 80034a4:	4619      	mov	r1, r3
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <MX_TIM4_Init+0x94>)
 80034a8:	f005 ff08 	bl	80092bc <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80034b2:	f000 f957 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20005844 	.word	0x20005844
 80034c4:	40000800 	.word	0x40000800

080034c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
 80034dc:	615a      	str	r2, [r3, #20]
 80034de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <MX_TIM10_Init+0x94>)
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <MX_TIM10_Init+0x98>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <MX_TIM10_Init+0x94>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <MX_TIM10_Init+0x94>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <MX_TIM10_Init+0x94>)
 80034f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <MX_TIM10_Init+0x94>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <MX_TIM10_Init+0x94>)
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003506:	4815      	ldr	r0, [pc, #84]	; (800355c <MX_TIM10_Init+0x94>)
 8003508:	f005 f87d 	bl	8008606 <HAL_TIM_Base_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003512:	f000 f927 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003516:	4811      	ldr	r0, [pc, #68]	; (800355c <MX_TIM10_Init+0x94>)
 8003518:	f005 f92a 	bl	8008770 <HAL_TIM_PWM_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003522:	f000 f91f 	bl	8003764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003526:	2360      	movs	r3, #96	; 0x60
 8003528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	2200      	movs	r2, #0
 800353a:	4619      	mov	r1, r3
 800353c:	4807      	ldr	r0, [pc, #28]	; (800355c <MX_TIM10_Init+0x94>)
 800353e:	f005 fa37 	bl	80089b0 <HAL_TIM_PWM_ConfigChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003548:	f000 f90c 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <MX_TIM10_Init+0x94>)
 800354e:	f000 ff5d 	bl	800440c <HAL_TIM_MspPostInit>

}
 8003552:	bf00      	nop
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200058d4 	.word	0x200058d4
 8003560:	40014400 	.word	0x40014400

08003564 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800356a:	463b      	mov	r3, r7
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <MX_TIM12_Init+0x6c>)
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <MX_TIM12_Init+0x70>)
 800357a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <MX_TIM12_Init+0x6c>)
 800357e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003582:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <MX_TIM12_Init+0x6c>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <MX_TIM12_Init+0x6c>)
 800358c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003590:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <MX_TIM12_Init+0x6c>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <MX_TIM12_Init+0x6c>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800359e:	480c      	ldr	r0, [pc, #48]	; (80035d0 <MX_TIM12_Init+0x6c>)
 80035a0:	f005 f831 	bl	8008606 <HAL_TIM_Base_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80035aa:	f000 f8db 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_TIM12_Init+0x6c>)
 80035ba:	f005 fab7 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80035c4:	f000 f8ce 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200059e0 	.word	0x200059e0
 80035d4:	40001800 	.word	0x40001800

080035d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	4b58      	ldr	r3, [pc, #352]	; (8003754 <MX_GPIO_Init+0x17c>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a57      	ldr	r2, [pc, #348]	; (8003754 <MX_GPIO_Init+0x17c>)
 80035f8:	f043 0310 	orr.w	r3, r3, #16
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b55      	ldr	r3, [pc, #340]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a50      	ldr	r2, [pc, #320]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003614:	f043 0320 	orr.w	r3, r3, #32
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <MX_GPIO_Init+0x17c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <MX_GPIO_Init+0x17c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a49      	ldr	r2, [pc, #292]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a42      	ldr	r2, [pc, #264]	; (8003754 <MX_GPIO_Init+0x17c>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <MX_GPIO_Init+0x17c>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b32      	ldr	r3, [pc, #200]	; (8003754 <MX_GPIO_Init+0x17c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8003696:	2201      	movs	r2, #1
 8003698:	21fc      	movs	r1, #252	; 0xfc
 800369a:	482f      	ldr	r0, [pc, #188]	; (8003758 <MX_GPIO_Init+0x180>)
 800369c:	f002 f881 	bl	80057a2 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2104      	movs	r1, #4
 80036a4:	482d      	ldr	r0, [pc, #180]	; (800375c <MX_GPIO_Init+0x184>)
 80036a6:	f002 f87c 	bl	80057a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2104      	movs	r1, #4
 80036ae:	482c      	ldr	r0, [pc, #176]	; (8003760 <MX_GPIO_Init+0x188>)
 80036b0:	f002 f877 	bl	80057a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 80036b4:	2200      	movs	r2, #0
 80036b6:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80036ba:	4827      	ldr	r0, [pc, #156]	; (8003758 <MX_GPIO_Init+0x180>)
 80036bc:	f002 f871 	bl	80057a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80036c0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80036c4:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c6:	2301      	movs	r3, #1
 80036c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	4619      	mov	r1, r3
 80036d8:	481f      	ldr	r0, [pc, #124]	; (8003758 <MX_GPIO_Init+0x180>)
 80036da:	f001 fead 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036de:	2304      	movs	r3, #4
 80036e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4819      	ldr	r0, [pc, #100]	; (800375c <MX_GPIO_Init+0x184>)
 80036f6:	f001 fe9f 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 80036fa:	2304      	movs	r3, #4
 80036fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fe:	2301      	movs	r3, #1
 8003700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	4813      	ldr	r0, [pc, #76]	; (8003760 <MX_GPIO_Init+0x188>)
 8003712:	f001 fe91 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 8003716:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800371a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800371c:	2301      	movs	r3, #1
 800371e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	4619      	mov	r1, r3
 800372e:	480a      	ldr	r0, [pc, #40]	; (8003758 <MX_GPIO_Init+0x180>)
 8003730:	f001 fe82 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 8003734:	2302      	movs	r3, #2
 8003736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 8003740:	f107 031c 	add.w	r3, r7, #28
 8003744:	4619      	mov	r1, r3
 8003746:	4804      	ldr	r0, [pc, #16]	; (8003758 <MX_GPIO_Init+0x180>)
 8003748:	f001 fe76 	bl	8005438 <HAL_GPIO_Init>

}
 800374c:	bf00      	nop
 800374e:	3730      	adds	r7, #48	; 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	40021000 	.word	0x40021000
 800375c:	40020800 	.word	0x40020800
 8003760:	40020400 	.word	0x40020400

08003764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003768:	b672      	cpsid	i
}
 800376a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800376c:	e7fe      	b.n	800376c <Error_Handler+0x8>

0800376e <doseWater>:
#include "main.h"



void doseWater(float acid_ml, float base_ml, float nutrient_ml)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
	int ph_down_steps = calc_dose_steps(acid_ml);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7fc fe9a 	bl	80004b4 <__aeabi_f2d>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	f000 f956 	bl	8003a38 <calc_dose_steps>
 800378c:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 800378e:	68b8      	ldr	r0, [r7, #8]
 8003790:	f7fc fe90 	bl	80004b4 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	f000 f94c 	bl	8003a38 <calc_dose_steps>
 80037a0:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fc fe86 	bl	80004b4 <__aeabi_f2d>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f000 f942 	bl	8003a38 <calc_dose_steps>
 80037b4:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	6978      	ldr	r0, [r7, #20]
 80037bc:	f000 fb12 	bl	8003de4 <step>
}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <read_voltage>:
float value;
float ph_voltage_buffer[30] = {0};
float voltage_mV, pH_low_cal = 2021.0, pH_mid_cal = 1523.0, pH_high_cal= 1135.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
float slope = 0, intercept = 0, ph_Value_Buf = 0;
float read_voltage()
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	ph_Value_Buf = 0;
 80037ce:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <read_voltage+0xf8>)
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<32; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	e019      	b.n	8003810 <read_voltage+0x48>
	{
		get_nutrient_ph_value();
 80037dc:	f000 fcee 	bl	80041bc <get_nutrient_ph_value>
		value = nutrient_ph_values[0];
 80037e0:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <read_voltage+0xfc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fabb 	bl	8000d60 <__aeabi_ui2f>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4a36      	ldr	r2, [pc, #216]	; (80038c8 <read_voltage+0x100>)
 80037ee:	6013      	str	r3, [r2, #0]
		if(i>1) ph_voltage_buffer[i-2] = value;   // skip first 2 samples for accuracy
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	dd06      	ble.n	8003804 <read_voltage+0x3c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3b02      	subs	r3, #2
 80037fa:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <read_voltage+0x100>)
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4933      	ldr	r1, [pc, #204]	; (80038cc <read_voltage+0x104>)
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_Delay(1);
 8003804:	2001      	movs	r0, #1
 8003806:	f001 f93b 	bl	8004a80 <HAL_Delay>
	for(int i = 0; i<32; i++)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3301      	adds	r3, #1
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b1f      	cmp	r3, #31
 8003814:	dde2      	ble.n	80037dc <read_voltage+0x14>
	}
	for(j=0;j<30;j++) ph_Value_Buf = ph_voltage_buffer[j] + ph_Value_Buf;
 8003816:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <read_voltage+0x108>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e013      	b.n	8003846 <read_voltage+0x7e>
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <read_voltage+0x108>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <read_voltage+0x104>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <read_voltage+0xf8>)
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd f9e6 	bl	8000c00 <__addsf3>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <read_voltage+0xf8>)
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <read_voltage+0x108>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <read_voltage+0x108>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <read_voltage+0x108>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b1d      	cmp	r3, #29
 800384c:	dde7      	ble.n	800381e <read_voltage+0x56>
	ph_voltage_average = ph_Value_Buf/30;
 800384e:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <read_voltage+0xf8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4920      	ldr	r1, [pc, #128]	; (80038d4 <read_voltage+0x10c>)
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fb8f 	bl	8000f78 <__aeabi_fdiv>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <read_voltage+0x110>)
 8003860:	601a      	str	r2, [r3, #0]
	mili_Voltage_Buf = ((ph_voltage_average/4096.0)*3.3)*1000;
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <read_voltage+0x110>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe24 	bl	80004b4 <__aeabi_f2d>
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <read_voltage+0x114>)
 8003872:	f7fc ffa1 	bl	80007b8 <__aeabi_ddiv>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	a30e      	add	r3, pc, #56	; (adr r3, 80038b8 <read_voltage+0xf0>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fe6e 	bl	8000564 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <read_voltage+0x118>)
 8003896:	f7fc fe65 	bl	8000564 <__aeabi_dmul>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f7fd f957 	bl	8000b54 <__aeabi_d2f>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <read_voltage+0x11c>)
 80038aa:	6013      	str	r3, [r2, #0]
	return mili_Voltage_Buf;
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <read_voltage+0x11c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	66666666 	.word	0x66666666
 80038bc:	400a6666 	.word	0x400a6666
 80038c0:	20005590 	.word	0x20005590
 80038c4:	20005500 	.word	0x20005500
 80038c8:	20005a2c 	.word	0x20005a2c
 80038cc:	20005514 	.word	0x20005514
 80038d0:	20005510 	.word	0x20005510
 80038d4:	41f00000 	.word	0x41f00000
 80038d8:	2000550c 	.word	0x2000550c
 80038dc:	40b00000 	.word	0x40b00000
 80038e0:	408f4000 	.word	0x408f4000
 80038e4:	20005508 	.word	0x20005508

080038e8 <convert_ph>:

float convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 80038f0:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <convert_ph+0x104>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd fc46 	bl	8001188 <__aeabi_fcmpgt>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d032      	beq.n	8003968 <convert_ph+0x80>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <convert_ph+0x108>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <convert_ph+0x10c>)
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd f975 	bl	8000bfc <__aeabi_fsub>
 8003912:	4603      	mov	r3, r0
 8003914:	461c      	mov	r4, r3
 8003916:	4b35      	ldr	r3, [pc, #212]	; (80039ec <convert_ph+0x104>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a37      	ldr	r2, [pc, #220]	; (80039f8 <convert_ph+0x110>)
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd f96b 	bl	8000bfc <__aeabi_fsub>
 8003926:	4603      	mov	r3, r0
 8003928:	4619      	mov	r1, r3
 800392a:	4620      	mov	r0, r4
 800392c:	f7fd fb24 	bl	8000f78 <__aeabi_fdiv>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <convert_ph+0x114>)
 8003936:	601a      	str	r2, [r3, #0]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <convert_ph+0x110>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd f95c 	bl	8000bfc <__aeabi_fsub>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <convert_ph+0x114>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7fd fa5e 	bl	8000e10 <__aeabi_fmul>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <convert_ph+0x10c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7fd f94e 	bl	8000c00 <__addsf3>
 8003964:	4603      	mov	r3, r0
 8003966:	e03d      	b.n	80039e4 <convert_ph+0xfc>
	}
	else if(voltage_mV<=pH_mid_cal)
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <convert_ph+0x104>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fbf6 	bl	8001160 <__aeabi_fcmple>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d032      	beq.n	80039e0 <convert_ph+0xf8>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <convert_ph+0x118>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <convert_ph+0x108>)
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd f939 	bl	8000bfc <__aeabi_fsub>
 800398a:	4603      	mov	r3, r0
 800398c:	461c      	mov	r4, r3
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <convert_ph+0x11c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a16      	ldr	r2, [pc, #88]	; (80039ec <convert_ph+0x104>)
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd f92f 	bl	8000bfc <__aeabi_fsub>
 800399e:	4603      	mov	r3, r0
 80039a0:	4619      	mov	r1, r3
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fd fae8 	bl	8000f78 <__aeabi_fdiv>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <convert_ph+0x114>)
 80039ae:	601a      	str	r2, [r3, #0]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <convert_ph+0x104>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd f920 	bl	8000bfc <__aeabi_fsub>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <convert_ph+0x114>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7fd fa22 	bl	8000e10 <__aeabi_fmul>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <convert_ph+0x108>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7fd f912 	bl	8000c00 <__addsf3>
 80039dc:	4603      	mov	r3, r0
 80039de:	e001      	b.n	80039e4 <convert_ph+0xfc>
	}
	return 0;
 80039e0:	f04f 0300 	mov.w	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}
 80039ec:	20000204 	.word	0x20000204
 80039f0:	20000210 	.word	0x20000210
 80039f4:	2000020c 	.word	0x2000020c
 80039f8:	20000200 	.word	0x20000200
 80039fc:	2000558c 	.word	0x2000558c
 8003a00:	20000214 	.word	0x20000214
 8003a04:	20000208 	.word	0x20000208

08003a08 <delay_Stepper>:
#include "peristaltic_driver.h"
#include "main.h"
//extern TIM_HandleTypeDef step_timer;

void delay_Stepper(uint16_t us)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim2,0);  			 // set the counter value a 0
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <delay_Stepper+0x2c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8003a1a:	bf00      	nop
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <delay_Stepper+0x2c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3f9      	bcc.n	8003a1c <delay_Stepper+0x14>
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20005998 	.word	0x20005998

08003a38 <calc_dose_steps>:
double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a4e:	f7fd f819 	bl	8000a84 <__aeabi_dcmpgt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d028      	beq.n	8003aaa <calc_dose_steps+0x72>
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	4bbe      	ldr	r3, [pc, #760]	; (8003d58 <calc_dose_steps+0x320>)
 8003a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a62:	f7fc fffb 	bl	8000a5c <__aeabi_dcmple>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01e      	beq.n	8003aaa <calc_dose_steps+0x72>
 8003a6c:	a3ae      	add	r3, pc, #696	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a76:	f7fc fbbf 	bl	80001f8 <__adddf3>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	a3ab      	add	r3, pc, #684	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fd6c 	bl	8000564 <__aeabi_dmul>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	a3a8      	add	r3, pc, #672	; (adr r3, 8003d38 <calc_dose_steps+0x300>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fd63 	bl	8000564 <__aeabi_dmul>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	49ae      	ldr	r1, [pc, #696]	; (8003d5c <calc_dose_steps+0x324>)
 8003aa4:	e9c1 2300 	strd	r2, r3, [r1]
 8003aa8:	e131      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	4baa      	ldr	r3, [pc, #680]	; (8003d58 <calc_dose_steps+0x320>)
 8003ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ab4:	f7fc ffe6 	bl	8000a84 <__aeabi_dcmpgt>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d029      	beq.n	8003b12 <calc_dose_steps+0xda>
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aca:	f7fc ffc7 	bl	8000a5c <__aeabi_dcmple>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01e      	beq.n	8003b12 <calc_dose_steps+0xda>
 8003ad4:	a394      	add	r3, pc, #592	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ade:	f7fc fb8b 	bl	80001f8 <__adddf3>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	a391      	add	r3, pc, #580	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fd38 	bl	8000564 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	a390      	add	r3, pc, #576	; (adr r3, 8003d40 <calc_dose_steps+0x308>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fd2f 	bl	8000564 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4994      	ldr	r1, [pc, #592]	; (8003d5c <calc_dose_steps+0x324>)
 8003b0c:	e9c1 2300 	strd	r2, r3, [r1]
 8003b10:	e0fd      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b1e:	f7fc ffb1 	bl	8000a84 <__aeabi_dcmpgt>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d028      	beq.n	8003b7a <calc_dose_steps+0x142>
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <calc_dose_steps+0x328>)
 8003b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b32:	f7fc ff93 	bl	8000a5c <__aeabi_dcmple>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01e      	beq.n	8003b7a <calc_dose_steps+0x142>
 8003b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b46:	f7fc fb57 	bl	80001f8 <__adddf3>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	a377      	add	r3, pc, #476	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fd04 	bl	8000564 <__aeabi_dmul>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	a378      	add	r3, pc, #480	; (adr r3, 8003d48 <calc_dose_steps+0x310>)
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f7fc fcfb 	bl	8000564 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	497a      	ldr	r1, [pc, #488]	; (8003d5c <calc_dose_steps+0x324>)
 8003b74:	e9c1 2300 	strd	r2, r3, [r1]
 8003b78:	e0c9      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <calc_dose_steps+0x328>)
 8003b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b84:	f7fc ff7e 	bl	8000a84 <__aeabi_dcmpgt>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d028      	beq.n	8003be0 <calc_dose_steps+0x1a8>
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <calc_dose_steps+0x32c>)
 8003b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b98:	f7fc ff60 	bl	8000a5c <__aeabi_dcmple>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01e      	beq.n	8003be0 <calc_dose_steps+0x1a8>
 8003ba2:	a361      	add	r3, pc, #388	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bac:	f7fc fb24 	bl	80001f8 <__adddf3>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	a35d      	add	r3, pc, #372	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f7fc fcd1 	bl	8000564 <__aeabi_dmul>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	a35f      	add	r3, pc, #380	; (adr r3, 8003d48 <calc_dose_steps+0x310>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fcc8 	bl	8000564 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4960      	ldr	r1, [pc, #384]	; (8003d5c <calc_dose_steps+0x324>)
 8003bda:	e9c1 2300 	strd	r2, r3, [r1]
 8003bde:	e096      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <calc_dose_steps+0x32c>)
 8003be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bea:	f7fc ff4b 	bl	8000a84 <__aeabi_dcmpgt>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <calc_dose_steps+0x20e>
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <calc_dose_steps+0x330>)
 8003bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bfe:	f7fc ff2d 	bl	8000a5c <__aeabi_dcmple>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01e      	beq.n	8003c46 <calc_dose_steps+0x20e>
 8003c08:	a347      	add	r3, pc, #284	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c12:	f7fc faf1 	bl	80001f8 <__adddf3>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	a344      	add	r3, pc, #272	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fc9e 	bl	8000564 <__aeabi_dmul>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	a345      	add	r3, pc, #276	; (adr r3, 8003d48 <calc_dose_steps+0x310>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc fc95 	bl	8000564 <__aeabi_dmul>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4947      	ldr	r1, [pc, #284]	; (8003d5c <calc_dose_steps+0x324>)
 8003c40:	e9c1 2300 	strd	r2, r3, [r1]
 8003c44:	e063      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <calc_dose_steps+0x330>)
 8003c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c50:	f7fc ff18 	bl	8000a84 <__aeabi_dcmpgt>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d028      	beq.n	8003cac <calc_dose_steps+0x274>
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <calc_dose_steps+0x334>)
 8003c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c64:	f7fc fefa 	bl	8000a5c <__aeabi_dcmple>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01e      	beq.n	8003cac <calc_dose_steps+0x274>
 8003c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c78:	f7fc fabe 	bl	80001f8 <__adddf3>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	a32a      	add	r3, pc, #168	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fc6b 	bl	8000564 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	a32c      	add	r3, pc, #176	; (adr r3, 8003d48 <calc_dose_steps+0x310>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fc62 	bl	8000564 <__aeabi_dmul>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	492d      	ldr	r1, [pc, #180]	; (8003d5c <calc_dose_steps+0x324>)
 8003ca6:	e9c1 2300 	strd	r2, r3, [r1]
 8003caa:	e030      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cb8:	f7fc febc 	bl	8000a34 <__aeabi_dcmpeq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <calc_dose_steps+0x29a>
 8003cc2:	4926      	ldr	r1, [pc, #152]	; (8003d5c <calc_dose_steps+0x324>)
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd0:	e01d      	b.n	8003d0e <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8003cd2:	a315      	add	r3, pc, #84	; (adr r3, 8003d28 <calc_dose_steps+0x2f0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cdc:	f7fc fa8c 	bl	80001f8 <__adddf3>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	a311      	add	r3, pc, #68	; (adr r3, 8003d30 <calc_dose_steps+0x2f8>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fc39 	bl	8000564 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	a315      	add	r3, pc, #84	; (adr r3, 8003d50 <calc_dose_steps+0x318>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fc30 	bl	8000564 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4914      	ldr	r1, [pc, #80]	; (8003d5c <calc_dose_steps+0x324>)
 8003d0a:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <calc_dose_steps+0x324>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	f7fc fed4 	bl	8000ac4 <__aeabi_d2iz>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	edfa43fe 	.word	0xedfa43fe
 8003d2c:	3fc9c0eb 	.word	0x3fc9c0eb
 8003d30:	f2197bf2 	.word	0xf2197bf2
 8003d34:	4012197b 	.word	0x4012197b
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	409b4400 	.word	0x409b4400
 8003d40:	00000000 	.word	0x00000000
 8003d44:	409bf800 	.word	0x409bf800
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	409ef000 	.word	0x409ef000
 8003d50:	00000000 	.word	0x00000000
 8003d54:	409dec00 	.word	0x409dec00
 8003d58:	3ff00000 	.word	0x3ff00000
 8003d5c:	20005598 	.word	0x20005598
 8003d60:	40080000 	.word	0x40080000
 8003d64:	40100000 	.word	0x40100000
 8003d68:	40140000 	.word	0x40140000
 8003d6c:	403e0000 	.word	0x403e0000

08003d70 <disablePumps>:

void disablePumps()	// disable all pumps
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 8003d74:	2201      	movs	r2, #1
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	4807      	ldr	r0, [pc, #28]	; (8003d98 <disablePumps+0x28>)
 8003d7a:	f001 fd12 	bl	80057a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 8003d7e:	2201      	movs	r2, #1
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	4805      	ldr	r0, [pc, #20]	; (8003d98 <disablePumps+0x28>)
 8003d84:	f001 fd0d 	bl	80057a2 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <disablePumps+0x28>)
 8003d8e:	f001 fd08 	bl	80057a2 <HAL_GPIO_WritePin>

}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000

08003d9c <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	dd04      	ble.n	8003db8 <enablePumps+0x1c>
 8003dae:	2200      	movs	r2, #0
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	480b      	ldr	r0, [pc, #44]	; (8003de0 <enablePumps+0x44>)
 8003db4:	f001 fcf5 	bl	80057a2 <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	dd04      	ble.n	8003dc8 <enablePumps+0x2c>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	4807      	ldr	r0, [pc, #28]	; (8003de0 <enablePumps+0x44>)
 8003dc4:	f001 fced 	bl	80057a2 <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	dd04      	ble.n	8003dd8 <enablePumps+0x3c>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	4803      	ldr	r0, [pc, #12]	; (8003de0 <enablePumps+0x44>)
 8003dd4:	f001 fce5 	bl	80057a2 <HAL_GPIO_WritePin>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000

08003de4 <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dd01      	ble.n	8003e00 <step+0x1c>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dd01      	ble.n	8003e0c <step+0x28>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff ffc3 	bl	8003d9c <enablePumps>
	HAL_TIM_Base_Start(&htim2);
 8003e16:	4824      	ldr	r0, [pc, #144]	; (8003ea8 <step+0xc4>)
 8003e18:	f004 fc44 	bl	80086a4 <HAL_TIM_Base_Start>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e038      	b.n	8003e94 <step+0xb0>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	da03      	bge.n	8003e32 <step+0x4e>
 8003e2a:	2110      	movs	r1, #16
 8003e2c:	481f      	ldr	r0, [pc, #124]	; (8003eac <step+0xc8>)
 8003e2e:	f001 fcd0 	bl	80057d2 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	da03      	bge.n	8003e42 <step+0x5e>
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	481b      	ldr	r0, [pc, #108]	; (8003eac <step+0xc8>)
 8003e3e:	f001 fcc8 	bl	80057d2 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	da03      	bge.n	8003e52 <step+0x6e>
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4817      	ldr	r0, [pc, #92]	; (8003eac <step+0xc8>)
 8003e4e:	f001 fcc0 	bl	80057d2 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8003e52:	2028      	movs	r0, #40	; 0x28
 8003e54:	f7ff fdd8 	bl	8003a08 <delay_Stepper>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	da03      	bge.n	8003e68 <step+0x84>
 8003e60:	2110      	movs	r1, #16
 8003e62:	4812      	ldr	r0, [pc, #72]	; (8003eac <step+0xc8>)
 8003e64:	f001 fcb5 	bl	80057d2 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	da03      	bge.n	8003e78 <step+0x94>
 8003e70:	2104      	movs	r1, #4
 8003e72:	480e      	ldr	r0, [pc, #56]	; (8003eac <step+0xc8>)
 8003e74:	f001 fcad 	bl	80057d2 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	da03      	bge.n	8003e88 <step+0xa4>
 8003e80:	2108      	movs	r1, #8
 8003e82:	480a      	ldr	r0, [pc, #40]	; (8003eac <step+0xc8>)
 8003e84:	f001 fca5 	bl	80057d2 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8003e88:	2028      	movs	r0, #40	; 0x28
 8003e8a:	f7ff fdbd 	bl	8003a08 <delay_Stepper>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	3301      	adds	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dbc2      	blt.n	8003e22 <step+0x3e>
	}
	disablePumps();
 8003e9c:	f7ff ff68 	bl	8003d70 <disablePumps>
}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20005998 	.word	0x20005998
 8003eac:	40021000 	.word	0x40021000

08003eb0 <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
float Humidity = 0;

double readWaterTemp(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8003eb4:	f000 fc04 	bl	80046c0 <DWT_Delay_Init>

	 //Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8003eb8:	2201      	movs	r2, #1
 8003eba:	2104      	movs	r1, #4
 8003ebc:	482b      	ldr	r0, [pc, #172]	; (8003f6c <readWaterTemp+0xbc>)
 8003ebe:	f001 fc70 	bl	80057a2 <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	f000 fc2c 	bl	8004720 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8003ec8:	f000 fc52 	bl	8004770 <DS18B20_Start>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <readWaterTemp+0xc0>)
 8003ed2:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 8003ed4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ed8:	f000 fc22 	bl	8004720 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8003edc:	20cc      	movs	r0, #204	; 0xcc
 8003ede:	f000 fc77 	bl	80047d0 <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 8003ee2:	2044      	movs	r0, #68	; 0x44
 8003ee4:	f000 fc74 	bl	80047d0 <DS18B20_Write>

	 Presence = DS18B20_Start();
 8003ee8:	f000 fc42 	bl	8004770 <DS18B20_Start>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <readWaterTemp+0xc0>)
 8003ef2:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 8003ef4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ef8:	f000 fc12 	bl	8004720 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8003efc:	20cc      	movs	r0, #204	; 0xcc
 8003efe:	f000 fc67 	bl	80047d0 <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 8003f02:	20be      	movs	r0, #190	; 0xbe
 8003f04:	f000 fc64 	bl	80047d0 <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 8003f08:	f000 fca8 	bl	800485c <DS18B20_Read>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <readWaterTemp+0xc4>)
 8003f12:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 8003f14:	f000 fca2 	bl	800485c <DS18B20_Read>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <readWaterTemp+0xc8>)
 8003f1e:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <readWaterTemp+0xc8>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	b21a      	sxth	r2, r3
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <readWaterTemp+0xc4>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b21b      	sxth	r3, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <readWaterTemp+0xcc>)
 8003f36:	801a      	strh	r2, [r3, #0]
	 Temperature = (float)TEMP/16;
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <readWaterTemp+0xcc>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc ff0f 	bl	8000d60 <__aeabi_ui2f>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fd f815 	bl	8000f78 <__aeabi_fdiv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc faaf 	bl	80004b4 <__aeabi_f2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4909      	ldr	r1, [pc, #36]	; (8003f80 <readWaterTemp+0xd0>)
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
	 return Temperature;
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <readWaterTemp+0xd0>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	200055a0 	.word	0x200055a0
 8003f74:	20005aac 	.word	0x20005aac
 8003f78:	20005b2c 	.word	0x20005b2c
 8003f7c:	20005a30 	.word	0x20005a30
 8003f80:	200055a8 	.word	0x200055a8
 8003f84:	00000000 	.word	0x00000000

08003f88 <readWaterTDS>:
#define SCOUNT  30           	// sum of sample point
int nutrientBuffer[SCOUNT],analogBufferTemp[SCOUNT], copyIndex = 0;  // store the analog value in the array, read from ADC
float averageVoltage = 0,tdsValue = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;

float readWaterTDS() // Get nutrient level
{
 8003f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
	for(int i = 0; i<SCOUNT+10; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	e012      	b.n	8003fbc <readWaterTDS+0x34>
	{
		get_nutrient_ph_value();
 8003f96:	f000 f911 	bl	80041bc <get_nutrient_ph_value>
		if(i>9)nutrientBuffer[i-10] = nutrient_ph_values[1];  		 // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b09      	cmp	r3, #9
 8003f9e:	dd07      	ble.n	8003fb0 <readWaterTDS+0x28>
 8003fa0:	4b79      	ldr	r3, [pc, #484]	; (8004188 <readWaterTDS+0x200>)
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4a78      	ldr	r2, [pc, #480]	; (800418c <readWaterTDS+0x204>)
 8003fac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    HAL_Delay(1);
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f000 fd65 	bl	8004a80 <HAL_Delay>
	for(int i = 0; i<SCOUNT+10; i++)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b27      	cmp	r3, #39	; 0x27
 8003fc0:	dde9      	ble.n	8003f96 <readWaterTDS+0xe>
	}

    for(copyIndex=0;copyIndex<SCOUNT;copyIndex++) analogBufferTemp[copyIndex]= nutrientBuffer[copyIndex];
 8003fc2:	4b73      	ldr	r3, [pc, #460]	; (8004190 <readWaterTDS+0x208>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e00e      	b.n	8003fe8 <readWaterTDS+0x60>
 8003fca:	4b71      	ldr	r3, [pc, #452]	; (8004190 <readWaterTDS+0x208>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b70      	ldr	r3, [pc, #448]	; (8004190 <readWaterTDS+0x208>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	496e      	ldr	r1, [pc, #440]	; (800418c <readWaterTDS+0x204>)
 8003fd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fd8:	496e      	ldr	r1, [pc, #440]	; (8004194 <readWaterTDS+0x20c>)
 8003fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <readWaterTDS+0x208>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <readWaterTDS+0x208>)
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b69      	ldr	r3, [pc, #420]	; (8004190 <readWaterTDS+0x208>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b1d      	cmp	r3, #29
 8003fee:	ddec      	ble.n	8003fca <readWaterTDS+0x42>
    averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)0.000805664; 																					// read the analog value more stable by averaging and convert to voltage value
 8003ff0:	211e      	movs	r1, #30
 8003ff2:	4868      	ldr	r0, [pc, #416]	; (8004194 <readWaterTDS+0x20c>)
 8003ff4:	f7fd fcc4 	bl	8001980 <getMedianNum>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc feb4 	bl	8000d68 <__aeabi_i2f>
 8004000:	4603      	mov	r3, r0
 8004002:	4965      	ldr	r1, [pc, #404]	; (8004198 <readWaterTDS+0x210>)
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc ff03 	bl	8000e10 <__aeabi_fmul>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <readWaterTDS+0x214>)
 8004010:	601a      	str	r2, [r3, #0]
    compensationCoefficient=1.0+0.02*(temperature-25.0);   																								    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 8004012:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <readWaterTDS+0x218>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa4c 	bl	80004b4 <__aeabi_f2d>
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <readWaterTDS+0x21c>)
 8004022:	f7fc f8e7 	bl	80001f4 <__aeabi_dsub>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	a34e      	add	r3, pc, #312	; (adr r3, 8004168 <readWaterTDS+0x1e0>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fa96 	bl	8000564 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <readWaterTDS+0x220>)
 8004046:	f7fc f8d7 	bl	80001f8 <__adddf3>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7fc fd7f 	bl	8000b54 <__aeabi_d2f>
 8004056:	4603      	mov	r3, r0
 8004058:	4a54      	ldr	r2, [pc, #336]	; (80041ac <readWaterTDS+0x224>)
 800405a:	6013      	str	r3, [r2, #0]
    compensationVolatge=averageVoltage/compensationCoefficient;  																								//temperature compensation
 800405c:	4b4f      	ldr	r3, [pc, #316]	; (800419c <readWaterTDS+0x214>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <readWaterTDS+0x224>)
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc ff86 	bl	8000f78 <__aeabi_fdiv>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <readWaterTDS+0x228>)
 8004072:	601a      	str	r2, [r3, #0]
    tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 8004074:	4b4e      	ldr	r3, [pc, #312]	; (80041b0 <readWaterTDS+0x228>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fa1b 	bl	80004b4 <__aeabi_f2d>
 800407e:	a33c      	add	r3, pc, #240	; (adr r3, 8004170 <readWaterTDS+0x1e8>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fa6e 	bl	8000564 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <readWaterTDS+0x228>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fa0d 	bl	80004b4 <__aeabi_f2d>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f7fc fa5f 	bl	8000564 <__aeabi_dmul>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	461d      	mov	r5, r3
 80040ae:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <readWaterTDS+0x228>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc f9fe 	bl	80004b4 <__aeabi_f2d>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc fa50 	bl	8000564 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <readWaterTDS+0x228>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc f9ef 	bl	80004b4 <__aeabi_f2d>
 80040d6:	a328      	add	r3, pc, #160	; (adr r3, 8004178 <readWaterTDS+0x1f0>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc fa42 	bl	8000564 <__aeabi_dmul>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4690      	mov	r8, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <readWaterTDS+0x228>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc f9e1 	bl	80004b4 <__aeabi_f2d>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4640      	mov	r0, r8
 80040f8:	4649      	mov	r1, r9
 80040fa:	f7fc fa33 	bl	8000564 <__aeabi_dmul>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fc f875 	bl	80001f4 <__aeabi_dsub>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <readWaterTDS+0x228>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc f9cc 	bl	80004b4 <__aeabi_f2d>
 800411c:	a318      	add	r3, pc, #96	; (adr r3, 8004180 <readWaterTDS+0x1f8>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa1f 	bl	8000564 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc f863 	bl	80001f8 <__adddf3>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <readWaterTDS+0x22c>)
 8004140:	f7fc fa10 	bl	8000564 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f7fc fd02 	bl	8000b54 <__aeabi_d2f>
 8004150:	4603      	mov	r3, r0
 8004152:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <readWaterTDS+0x230>)
 8004154:	6013      	str	r3, [r2, #0]
    return tdsValue;
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <readWaterTDS+0x230>)
 8004158:	681b      	ldr	r3, [r3, #0]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004164:	f3af 8000 	nop.w
 8004168:	47ae147b 	.word	0x47ae147b
 800416c:	3f947ae1 	.word	0x3f947ae1
 8004170:	a3d70a3d 	.word	0xa3d70a3d
 8004174:	4060ad70 	.word	0x4060ad70
 8004178:	1eb851ec 	.word	0x1eb851ec
 800417c:	406ffb85 	.word	0x406ffb85
 8004180:	b851eb85 	.word	0xb851eb85
 8004184:	408acb1e 	.word	0x408acb1e
 8004188:	20005500 	.word	0x20005500
 800418c:	20005a34 	.word	0x20005a34
 8004190:	200055b0 	.word	0x200055b0
 8004194:	20005ab4 	.word	0x20005ab4
 8004198:	3a533332 	.word	0x3a533332
 800419c:	200055b4 	.word	0x200055b4
 80041a0:	20000218 	.word	0x20000218
 80041a4:	40390000 	.word	0x40390000
 80041a8:	3ff00000 	.word	0x3ff00000
 80041ac:	200055bc 	.word	0x200055bc
 80041b0:	200055c0 	.word	0x200055c0
 80041b4:	3fe00000 	.word	0x3fe00000
 80041b8:	200055b8 	.word	0x200055b8

080041bc <get_nutrient_ph_value>:

void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC and places it in a buffer
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	nutrient_ph_values[0] = get_ADC_values(1);
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7fd f9e5 	bl	8001590 <get_ADC_values>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd f80d 	bl	80011e8 <__aeabi_f2uiz>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <get_nutrient_ph_value+0x30>)
 80041d2:	6013      	str	r3, [r2, #0]
	nutrient_ph_values[1] = get_ADC_values(0);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fd f9db 	bl	8001590 <get_ADC_values>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd f803 	bl	80011e8 <__aeabi_f2uiz>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a01      	ldr	r2, [pc, #4]	; (80041ec <get_nutrient_ph_value+0x30>)
 80041e6:	6053      	str	r3, [r2, #4]
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20005500 	.word	0x20005500

080041f0 <readPH>:
{

}
float mili_voltage,ph_value = 0;
float readPH()
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
	mili_voltage = read_voltage();
 80041f4:	f7ff fae8 	bl	80037c8 <read_voltage>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4a07      	ldr	r2, [pc, #28]	; (8004218 <readPH+0x28>)
 80041fc:	6013      	str	r3, [r2, #0]
	ph_value = convert_ph(mili_voltage);
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <readPH+0x28>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fb70 	bl	80038e8 <convert_ph>
 8004208:	4603      	mov	r3, r0
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <readPH+0x2c>)
 800420c:	6013      	str	r3, [r2, #0]
	return ph_value;
 800420e:	4b03      	ldr	r3, [pc, #12]	; (800421c <readPH+0x2c>)
 8004210:	681b      	ldr	r3, [r3, #0]
}
 8004212:	4618      	mov	r0, r3
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20005ab0 	.word	0x20005ab0
 800421c:	200055c4 	.word	0x200055c4

08004220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_MspInit+0x48>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <HAL_MspInit+0x48>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_MspInit+0x48>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_MspInit+0x48>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <HAL_MspInit+0x48>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_MspInit+0x48>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_ADC_MspInit+0x7c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d127      	bne.n	80042de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_ADC_MspInit+0x80>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a15      	ldr	r2, [pc, #84]	; (80042ec <HAL_ADC_MspInit+0x80>)
 8004298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_ADC_MspInit+0x80>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <HAL_ADC_MspInit+0x80>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <HAL_ADC_MspInit+0x80>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <HAL_ADC_MspInit+0x80>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 80042c6:	2330      	movs	r3, #48	; 0x30
 80042c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ca:	2303      	movs	r3, #3
 80042cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4619      	mov	r1, r3
 80042d8:	4805      	ldr	r0, [pc, #20]	; (80042f0 <HAL_ADC_MspInit+0x84>)
 80042da:	f001 f8ad 	bl	8005438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80042de:	bf00      	nop
 80042e0:	3728      	adds	r7, #40	; 0x28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40012100 	.word	0x40012100
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40020000 	.word	0x40020000

080042f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a05      	ldr	r2, [pc, #20]	; (8004318 <HAL_RTC_MspInit+0x24>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d102      	bne.n	800430c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RTC_MspInit+0x28>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40002800 	.word	0x40002800
 800431c:	42470e3c 	.word	0x42470e3c

08004320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <HAL_TIM_Base_MspInit+0xd8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a30      	ldr	r2, [pc, #192]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800434e:	e04e      	b.n	80043ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a26      	ldr	r2, [pc, #152]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]
}
 8004376:	e03a      	b.n	80043ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a20      	ldr	r2, [pc, #128]	; (8004400 <HAL_TIM_Base_MspInit+0xe0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	e026      	b.n	80043ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_TIM_Base_MspInit+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	4a12      	ldr	r2, [pc, #72]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	693b      	ldr	r3, [r7, #16]
}
 80043c6:	e012      	b.n	80043ee <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <HAL_TIM_Base_MspInit+0xe8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10d      	bne.n	80043ee <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_TIM_Base_MspInit+0xdc>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40023800 	.word	0x40023800
 8004400:	40000800 	.word	0x40000800
 8004404:	40014400 	.word	0x40014400
 8004408:	40001800 	.word	0x40001800

0800440c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a24      	ldr	r2, [pc, #144]	; (80044bc <HAL_TIM_MspPostInit+0xb0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d11f      	bne.n	800446e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 8004438:	f043 0310 	orr.w	r3, r3, #16
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 800444a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800444e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800445c:	2301      	movs	r3, #1
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	4619      	mov	r1, r3
 8004466:	4817      	ldr	r0, [pc, #92]	; (80044c4 <HAL_TIM_MspPostInit+0xb8>)
 8004468:	f000 ffe6 	bl	8005438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800446c:	e022      	b.n	80044b4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_TIM_MspPostInit+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d11d      	bne.n	80044b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 8004482:	f043 0320 	orr.w	r3, r3, #32
 8004486:	6313      	str	r3, [r2, #48]	; 0x30
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_TIM_MspPostInit+0xb4>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8004494:	2340      	movs	r3, #64	; 0x40
 8004496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004498:	2302      	movs	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a0:	2300      	movs	r3, #0
 80044a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80044a4:	2303      	movs	r3, #3
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	4807      	ldr	r0, [pc, #28]	; (80044cc <HAL_TIM_MspPostInit+0xc0>)
 80044b0:	f000 ffc2 	bl	8005438 <HAL_GPIO_Init>
}
 80044b4:	bf00      	nop
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40021400 	.word	0x40021400

080044d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <NMI_Handler+0x4>

080044d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044da:	e7fe      	b.n	80044da <HardFault_Handler+0x4>

080044dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e0:	e7fe      	b.n	80044e0 <MemManage_Handler+0x4>

080044e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e6:	e7fe      	b.n	80044e6 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <UsageFault_Handler+0x4>

080044ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ee:	b480      	push	{r7}
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004516:	f000 fa97 	bl	8004a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004524:	4802      	ldr	r0, [pc, #8]	; (8004530 <OTG_FS_IRQHandler+0x10>)
 8004526:	f001 fbd7 	bl	8005cd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20007f68 	.word	0x20007f68

08004534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
	return 1;
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <_kill>:

int _kill(int pid, int sig)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800454c:	f00d fac4 	bl	8011ad8 <__errno>
 8004550:	4603      	mov	r3, r0
 8004552:	2216      	movs	r2, #22
 8004554:	601a      	str	r2, [r3, #0]
	return -1;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <_exit>:

void _exit (int status)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800456a:	f04f 31ff 	mov.w	r1, #4294967295
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ffe7 	bl	8004542 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004574:	e7fe      	b.n	8004574 <_exit+0x12>

08004576 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e00a      	b.n	800459e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004588:	f3af 8000 	nop.w
 800458c:	4601      	mov	r1, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	60ba      	str	r2, [r7, #8]
 8004594:	b2ca      	uxtb	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3301      	adds	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	dbf0      	blt.n	8004588 <_read+0x12>
	}

return len;
 80045a6:	687b      	ldr	r3, [r7, #4]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e009      	b.n	80045d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	60ba      	str	r2, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	dbf1      	blt.n	80045c2 <_write+0x12>
	}
	return len;
 80045de:	687b      	ldr	r3, [r7, #4]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_close>:

int _close(int file)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	return -1;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800460e:	605a      	str	r2, [r3, #4]
	return 0;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <_isatty>:

int _isatty(int file)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	return 1;
 8004624:	2301      	movs	r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
	return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <_sbrk+0x5c>)
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <_sbrk+0x60>)
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <_sbrk+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <_sbrk+0x64>)
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <_sbrk+0x68>)
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <_sbrk+0x64>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d207      	bcs.n	8004688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004678:	f00d fa2e 	bl	8011ad8 <__errno>
 800467c:	4603      	mov	r3, r0
 800467e:	220c      	movs	r2, #12
 8004680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	e009      	b.n	800469c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <_sbrk+0x64>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <_sbrk+0x64>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <_sbrk+0x64>)
 8004698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2001c000 	.word	0x2001c000
 80046a8:	00000800 	.word	0x00000800
 80046ac:	200055c8 	.word	0x200055c8
 80046b0:	20008280 	.word	0x20008280

080046b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <DWT_Delay_Init+0x58>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <DWT_Delay_Init+0x58>)
 80046ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ce:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <DWT_Delay_Init+0x58>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a10      	ldr	r2, [pc, #64]	; (8004718 <DWT_Delay_Init+0x58>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <DWT_Delay_Init+0x5c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <DWT_Delay_Init+0x5c>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <DWT_Delay_Init+0x5c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a0b      	ldr	r2, [pc, #44]	; (800471c <DWT_Delay_Init+0x5c>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <DWT_Delay_Init+0x5c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80046fa:	bf00      	nop
    __ASM volatile ("NOP");
 80046fc:	bf00      	nop
    __ASM volatile ("NOP");
 80046fe:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <DWT_Delay_Init+0x5c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800470c:	2301      	movs	r3, #1
    }
}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000edf0 	.word	0xe000edf0
 800471c:	e0001000 	.word	0xe0001000

08004720 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <DWT_Delay_us+0x48>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800472e:	f003 f9c1 	bl	8007ab4 <HAL_RCC_GetHCLKFreq>
 8004732:	4603      	mov	r3, r0
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <DWT_Delay_us+0x4c>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8004748:	bf00      	nop
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <DWT_Delay_us+0x48>)
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	429a      	cmp	r2, r3
 800475a:	d3f6      	bcc.n	800474a <DWT_Delay_us+0x2a>
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e0001000 	.word	0xe0001000
 800476c:	431bde83 	.word	0x431bde83

08004770 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800477a:	2104      	movs	r1, #4
 800477c:	4813      	ldr	r0, [pc, #76]	; (80047cc <DS18B20_Start+0x5c>)
 800477e:	f000 f8ab 	bl	80048d8 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8004782:	2200      	movs	r2, #0
 8004784:	2104      	movs	r1, #4
 8004786:	4811      	ldr	r0, [pc, #68]	; (80047cc <DS18B20_Start+0x5c>)
 8004788:	f001 f80b 	bl	80057a2 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 800478c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004790:	f7ff ffc6 	bl	8004720 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8004794:	2104      	movs	r1, #4
 8004796:	480d      	ldr	r0, [pc, #52]	; (80047cc <DS18B20_Start+0x5c>)
 8004798:	f000 f8bc 	bl	8004914 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 800479c:	2050      	movs	r0, #80	; 0x50
 800479e:	f7ff ffbf 	bl	8004720 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80047a2:	2104      	movs	r1, #4
 80047a4:	4809      	ldr	r0, [pc, #36]	; (80047cc <DS18B20_Start+0x5c>)
 80047a6:	f000 ffe5 	bl	8005774 <HAL_GPIO_ReadPin>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <DS18B20_Start+0x46>
 80047b0:	2301      	movs	r3, #1
 80047b2:	71fb      	strb	r3, [r7, #7]
 80047b4:	e001      	b.n	80047ba <DS18B20_Start+0x4a>
	else Response = -1;
 80047b6:	23ff      	movs	r3, #255	; 0xff
 80047b8:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 80047ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80047be:	f7ff ffaf 	bl	8004720 <DWT_Delay_us>

	return Response;
 80047c2:	79fb      	ldrb	r3, [r7, #7]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40020400 	.word	0x40020400

080047d0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 80047da:	2104      	movs	r1, #4
 80047dc:	481e      	ldr	r0, [pc, #120]	; (8004858 <DS18B20_Write+0x88>)
 80047de:	f000 f87b 	bl	80048d8 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e02e      	b.n	8004846 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80047e8:	79fa      	ldrb	r2, [r7, #7]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	fa42 f303 	asr.w	r3, r2, r3
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 80047f8:	2104      	movs	r1, #4
 80047fa:	4817      	ldr	r0, [pc, #92]	; (8004858 <DS18B20_Write+0x88>)
 80047fc:	f000 f86c 	bl	80048d8 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8004800:	2200      	movs	r2, #0
 8004802:	2104      	movs	r1, #4
 8004804:	4814      	ldr	r0, [pc, #80]	; (8004858 <DS18B20_Write+0x88>)
 8004806:	f000 ffcc 	bl	80057a2 <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 800480a:	2005      	movs	r0, #5
 800480c:	f7ff ff88 	bl	8004720 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8004810:	2104      	movs	r1, #4
 8004812:	4811      	ldr	r0, [pc, #68]	; (8004858 <DS18B20_Write+0x88>)
 8004814:	f000 f87e 	bl	8004914 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8004818:	2041      	movs	r0, #65	; 0x41
 800481a:	f7ff ff81 	bl	8004720 <DWT_Delay_us>
 800481e:	e00f      	b.n	8004840 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8004820:	2104      	movs	r1, #4
 8004822:	480d      	ldr	r0, [pc, #52]	; (8004858 <DS18B20_Write+0x88>)
 8004824:	f000 f858 	bl	80048d8 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8004828:	2200      	movs	r2, #0
 800482a:	2104      	movs	r1, #4
 800482c:	480a      	ldr	r0, [pc, #40]	; (8004858 <DS18B20_Write+0x88>)
 800482e:	f000 ffb8 	bl	80057a2 <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 8004832:	2041      	movs	r0, #65	; 0x41
 8004834:	f7ff ff74 	bl	8004720 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8004838:	2104      	movs	r1, #4
 800483a:	4807      	ldr	r0, [pc, #28]	; (8004858 <DS18B20_Write+0x88>)
 800483c:	f000 f86a 	bl	8004914 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b07      	cmp	r3, #7
 800484a:	ddcd      	ble.n	80047e8 <DS18B20_Write+0x18>
		}
	}
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40020400 	.word	0x40020400

0800485c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8004862:	2300      	movs	r3, #0
 8004864:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8004866:	2104      	movs	r1, #4
 8004868:	481a      	ldr	r0, [pc, #104]	; (80048d4 <DS18B20_Read+0x78>)
 800486a:	f000 f853 	bl	8004914 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	e026      	b.n	80048c2 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8004874:	2104      	movs	r1, #4
 8004876:	4817      	ldr	r0, [pc, #92]	; (80048d4 <DS18B20_Read+0x78>)
 8004878:	f000 f82e 	bl	80048d8 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 800487c:	2200      	movs	r2, #0
 800487e:	2104      	movs	r1, #4
 8004880:	4814      	ldr	r0, [pc, #80]	; (80048d4 <DS18B20_Read+0x78>)
 8004882:	f000 ff8e 	bl	80057a2 <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 8004886:	2005      	movs	r0, #5
 8004888:	f7ff ff4a 	bl	8004720 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 800488c:	2104      	movs	r1, #4
 800488e:	4811      	ldr	r0, [pc, #68]	; (80048d4 <DS18B20_Read+0x78>)
 8004890:	f000 f840 	bl	8004914 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8004894:	2104      	movs	r1, #4
 8004896:	480f      	ldr	r0, [pc, #60]	; (80048d4 <DS18B20_Read+0x78>)
 8004898:	f000 ff6c 	bl	8005774 <HAL_GPIO_ReadPin>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80048a2:	2201      	movs	r2, #1
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	b25a      	sxtb	r2, r3
 80048ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 80048b6:	2032      	movs	r0, #50	; 0x32
 80048b8:	f7ff ff32 	bl	8004720 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	ddd5      	ble.n	8004874 <DS18B20_Read+0x18>
	}
	return value;
 80048c8:	79fb      	ldrb	r3, [r7, #7]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40020400 	.word	0x40020400

080048d8 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f8:	2301      	movs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fd96 	bl	8005438 <HAL_GPIO_Init>
}
 800490c:	bf00      	nop
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800493c:	f107 030c 	add.w	r3, r7, #12
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fd78 	bl	8005438 <HAL_GPIO_Init>
}
 8004948:	bf00      	nop
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004954:	480d      	ldr	r0, [pc, #52]	; (800498c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004956:	490e      	ldr	r1, [pc, #56]	; (8004990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004958:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800495a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800495c:	e002      	b.n	8004964 <LoopCopyDataInit>

0800495e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800495e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004962:	3304      	adds	r3, #4

08004964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004968:	d3f9      	bcc.n	800495e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800496a:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800496c:	4c0b      	ldr	r4, [pc, #44]	; (800499c <LoopFillZerobss+0x26>)
  movs r3, #0
 800496e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004970:	e001      	b.n	8004976 <LoopFillZerobss>

08004972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004974:	3204      	adds	r2, #4

08004976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004978:	d3fb      	bcc.n	8004972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800497a:	f7ff fe9b 	bl	80046b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800497e:	f00d f8b1 	bl	8011ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004982:	f7fe fae3 	bl	8002f4c <main>
  bx  lr
 8004986:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004988:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800498c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004990:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 8004994:	08016f04 	.word	0x08016f04
  ldr r2, =_sbss
 8004998:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800499c:	2000827c 	.word	0x2000827c

080049a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049a0:	e7fe      	b.n	80049a0 <ADC_IRQHandler>
	...

080049a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_Init+0x40>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_Init+0x40>)
 80049ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_Init+0x40>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <HAL_Init+0x40>)
 80049ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_Init+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_Init+0x40>)
 80049c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f000 fcf1 	bl	80053b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d2:	200f      	movs	r0, #15
 80049d4:	f000 f808 	bl	80049e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80049d8:	f7ff fc22 	bl	8004220 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00

080049e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_InitTick+0x54>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_InitTick+0x58>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fd09 	bl	800541e <HAL_SYSTICK_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00e      	b.n	8004a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d80a      	bhi.n	8004a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	f000 fcd1 	bl	80053ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <HAL_InitTick+0x5c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	2000021c 	.word	0x2000021c
 8004a40:	20000224 	.word	0x20000224
 8004a44:	20000220 	.word	0x20000220

08004a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_IncTick+0x1c>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_IncTick+0x20>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <HAL_IncTick+0x20>)
 8004a5a:	6013      	str	r3, [r2, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	20000224 	.word	0x20000224
 8004a68:	20005b30 	.word	0x20005b30

08004a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <HAL_GetTick+0x10>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20005b30 	.word	0x20005b30

08004a80 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7ff fff0 	bl	8004a6c <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d005      	beq.n	8004aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_Delay+0x44>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa6:	bf00      	nop
 8004aa8:	f7ff ffe0 	bl	8004a6c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d8f7      	bhi.n	8004aa8 <HAL_Delay+0x28>
  {

  }
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000224 	.word	0x20000224

08004ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e033      	b.n	8004b46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fbc0 	bl	800426c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b0e:	f023 0302 	bic.w	r3, r3, #2
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa78 	bl	8005010 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
 8004b36:	e001      	b.n	8004b3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_Start+0x1a>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e095      	b.n	8004c96 <HAL_ADC_Start+0x146>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d018      	beq.n	8004bb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b90:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <HAL_ADC_Start+0x150>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a43      	ldr	r2, [pc, #268]	; (8004ca4 <HAL_ADC_Start+0x154>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0c9a      	lsrs	r2, r3, #18
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004ba4:	e002      	b.n	8004bac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d15d      	bne.n	8004c7c <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d106      	bne.n	8004c0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	f023 0206 	bic.w	r2, r3, #6
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
 8004c0c:	e002      	b.n	8004c14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_ADC_Start+0x158>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10f      	bne.n	8004c52 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d129      	bne.n	8004c94 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	e020      	b.n	8004c94 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_ADC_Start+0x15c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d11b      	bne.n	8004c94 <HAL_ADC_Start+0x144>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d114      	bne.n	8004c94 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	e00b      	b.n	8004c94 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f043 0210 	orr.w	r2, r3, #16
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	2000021c 	.word	0x2000021c
 8004ca4:	431bde83 	.word	0x431bde83
 8004ca8:	40012300 	.word	0x40012300
 8004cac:	40012000 	.word	0x40012000

08004cb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d113      	bne.n	8004cf6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e05c      	b.n	8004db0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004cf6:	f7ff feb9 	bl	8004a6c <HAL_GetTick>
 8004cfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cfc:	e01a      	b.n	8004d34 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d016      	beq.n	8004d34 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_ADC_PollForConversion+0x6c>
 8004d0c:	f7ff feae 	bl	8004a6c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d20b      	bcs.n	8004d34 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0204 	orr.w	r2, r3, #4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e03d      	b.n	8004db0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d1dd      	bne.n	8004cfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0212 	mvn.w	r2, #18
 8004d4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d123      	bne.n	8004dae <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d11f      	bne.n	8004dae <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d111      	bne.n	8004dae <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e103      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x224>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	d925      	bls.n	8004e48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	3b1e      	subs	r3, #30
 8004e12:	2207      	movs	r2, #7
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	400a      	ands	r2, r1
 8004e20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68d9      	ldr	r1, [r3, #12]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4403      	add	r3, r0
 8004e3a:	3b1e      	subs	r3, #30
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e022      	b.n	8004e8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6919      	ldr	r1, [r3, #16]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	400a      	ands	r2, r1
 8004e6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4403      	add	r3, r0
 8004e84:	409a      	lsls	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d824      	bhi.n	8004ee0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b05      	subs	r3, #5
 8004ea8:	221f      	movs	r2, #31
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b05      	subs	r3, #5
 8004ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ede:	e04c      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d824      	bhi.n	8004f32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3b23      	subs	r3, #35	; 0x23
 8004efa:	221f      	movs	r2, #31
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43da      	mvns	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	400a      	ands	r2, r1
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4618      	mov	r0, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	3b23      	subs	r3, #35	; 0x23
 8004f24:	fa00 f203 	lsl.w	r2, r0, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f30:	e023      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	3b41      	subs	r3, #65	; 0x41
 8004f44:	221f      	movs	r2, #31
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	400a      	ands	r2, r1
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4618      	mov	r0, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3b41      	subs	r3, #65	; 0x41
 8004f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <HAL_ADC_ConfigChannel+0x230>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d109      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1c8>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b12      	cmp	r3, #18
 8004f8a:	d105      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_ADC_ConfigChannel+0x234>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_ADC_ConfigChannel+0x234>)
 8004f92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f96:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	; (8005000 <HAL_ADC_ConfigChannel+0x230>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d123      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x21a>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d003      	beq.n	8004fb2 <HAL_ADC_ConfigChannel+0x1e2>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b11      	cmp	r3, #17
 8004fb0:	d11b      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_ADC_ConfigChannel+0x234>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4a13      	ldr	r2, [pc, #76]	; (8005004 <HAL_ADC_ConfigChannel+0x234>)
 8004fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fbc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d111      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_ADC_ConfigChannel+0x238>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <HAL_ADC_ConfigChannel+0x23c>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	0c9a      	lsrs	r2, r3, #18
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004fdc:	e002      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f9      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012000 	.word	0x40012000
 8005004:	40012300 	.word	0x40012300
 8005008:	2000021c 	.word	0x2000021c
 800500c:	431bde83 	.word	0x431bde83

08005010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005018:	4b7e      	ldr	r3, [pc, #504]	; (8005214 <ADC_Init+0x204>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a7d      	ldr	r2, [pc, #500]	; (8005214 <ADC_Init+0x204>)
 800501e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005022:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005024:	4b7b      	ldr	r3, [pc, #492]	; (8005214 <ADC_Init+0x204>)
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4979      	ldr	r1, [pc, #484]	; (8005214 <ADC_Init+0x204>)
 800502e:	4313      	orrs	r3, r2
 8005030:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6899      	ldr	r1, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	4a5e      	ldr	r2, [pc, #376]	; (8005218 <ADC_Init+0x208>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e00f      	b.n	800510a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005108:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0202 	bic.w	r2, r2, #2
 8005118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7e1b      	ldrb	r3, [r3, #24]
 8005124:	005a      	lsls	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d027      	beq.n	8005188 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005146:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	3b01      	subs	r3, #1
 800515e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005162:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	fa92 f2a2 	rbit	r2, r2
 800516a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	fab2 f282 	clz	r2, r2
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	fa03 f102 	lsl.w	r1, r3, r2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e007      	b.n	8005198 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005196:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	051a      	lsls	r2, r3, #20
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6899      	ldr	r1, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051da:	025a      	lsls	r2, r3, #9
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	029a      	lsls	r2, r3, #10
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012300 	.word	0x40012300
 8005218:	0f000001 	.word	0x0f000001

0800521c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005238:	4013      	ands	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800524e:	4a04      	ldr	r2, [pc, #16]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	60d3      	str	r3, [r2, #12]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <__NVIC_GetPriorityGrouping+0x18>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0307 	and.w	r3, r3, #7
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db0b      	blt.n	80052aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	4906      	ldr	r1, [pc, #24]	; (80052b4 <__NVIC_EnableIRQ+0x34>)
 800529a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2001      	movs	r0, #1
 80052a2:	fa00 f202 	lsl.w	r2, r0, r2
 80052a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	e000e100 	.word	0xe000e100

080052b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db0a      	blt.n	80052e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	490c      	ldr	r1, [pc, #48]	; (8005304 <__NVIC_SetPriority+0x4c>)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	440b      	add	r3, r1
 80052dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e0:	e00a      	b.n	80052f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4908      	ldr	r1, [pc, #32]	; (8005308 <__NVIC_SetPriority+0x50>)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3b04      	subs	r3, #4
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	440b      	add	r3, r1
 80052f6:	761a      	strb	r2, [r3, #24]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	e000e100 	.word	0xe000e100
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f1c3 0307 	rsb	r3, r3, #7
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf28      	it	cs
 800532a:	2304      	movcs	r3, #4
 800532c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3304      	adds	r3, #4
 8005332:	2b06      	cmp	r3, #6
 8005334:	d902      	bls.n	800533c <NVIC_EncodePriority+0x30>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	3b03      	subs	r3, #3
 800533a:	e000      	b.n	800533e <NVIC_EncodePriority+0x32>
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43da      	mvns	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	401a      	ands	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005354:	f04f 31ff 	mov.w	r1, #4294967295
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	43d9      	mvns	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005364:	4313      	orrs	r3, r2
         );
}
 8005366:	4618      	mov	r0, r3
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005380:	d301      	bcc.n	8005386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005382:	2301      	movs	r3, #1
 8005384:	e00f      	b.n	80053a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005386:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <SysTick_Config+0x40>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538e:	210f      	movs	r1, #15
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	f7ff ff90 	bl	80052b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <SysTick_Config+0x40>)
 800539a:	2200      	movs	r2, #0
 800539c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <SysTick_Config+0x40>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010

080053b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ff2d 	bl	800521c <__NVIC_SetPriorityGrouping>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	4603      	mov	r3, r0
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053dc:	f7ff ff42 	bl	8005264 <__NVIC_GetPriorityGrouping>
 80053e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f7ff ff90 	bl	800530c <NVIC_EncodePriority>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff5f 	bl	80052b8 <__NVIC_SetPriority>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff35 	bl	8005280 <__NVIC_EnableIRQ>
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ffa2 	bl	8005370 <SysTick_Config>
 800542c:	4603      	mov	r3, r0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005446:	e16f      	b.n	8005728 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2101      	movs	r1, #1
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	4013      	ands	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8161 	beq.w	8005722 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d005      	beq.n	8005478 <HAL_GPIO_Init+0x40>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d130      	bne.n	80054da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	2203      	movs	r2, #3
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ae:	2201      	movs	r2, #1
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0201 	and.w	r2, r3, #1
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d017      	beq.n	8005516 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2203      	movs	r2, #3
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d123      	bne.n	800556a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	08da      	lsrs	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3208      	adds	r2, #8
 800552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	220f      	movs	r2, #15
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43db      	mvns	r3, r3
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	08da      	lsrs	r2, r3, #3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3208      	adds	r2, #8
 8005564:	6939      	ldr	r1, [r7, #16]
 8005566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	2203      	movs	r2, #3
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80bb 	beq.w	8005722 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	4b64      	ldr	r3, [pc, #400]	; (8005744 <HAL_GPIO_Init+0x30c>)
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	4a63      	ldr	r2, [pc, #396]	; (8005744 <HAL_GPIO_Init+0x30c>)
 80055b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ba:	6453      	str	r3, [r2, #68]	; 0x44
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_GPIO_Init+0x30c>)
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055c8:	4a5f      	ldr	r2, [pc, #380]	; (8005748 <HAL_GPIO_Init+0x310>)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	3302      	adds	r3, #2
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	220f      	movs	r2, #15
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a57      	ldr	r2, [pc, #348]	; (800574c <HAL_GPIO_Init+0x314>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d031      	beq.n	8005658 <HAL_GPIO_Init+0x220>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a56      	ldr	r2, [pc, #344]	; (8005750 <HAL_GPIO_Init+0x318>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d02b      	beq.n	8005654 <HAL_GPIO_Init+0x21c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a55      	ldr	r2, [pc, #340]	; (8005754 <HAL_GPIO_Init+0x31c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d025      	beq.n	8005650 <HAL_GPIO_Init+0x218>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a54      	ldr	r2, [pc, #336]	; (8005758 <HAL_GPIO_Init+0x320>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01f      	beq.n	800564c <HAL_GPIO_Init+0x214>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a53      	ldr	r2, [pc, #332]	; (800575c <HAL_GPIO_Init+0x324>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d019      	beq.n	8005648 <HAL_GPIO_Init+0x210>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a52      	ldr	r2, [pc, #328]	; (8005760 <HAL_GPIO_Init+0x328>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_GPIO_Init+0x20c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a51      	ldr	r2, [pc, #324]	; (8005764 <HAL_GPIO_Init+0x32c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00d      	beq.n	8005640 <HAL_GPIO_Init+0x208>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a50      	ldr	r2, [pc, #320]	; (8005768 <HAL_GPIO_Init+0x330>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d007      	beq.n	800563c <HAL_GPIO_Init+0x204>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a4f      	ldr	r2, [pc, #316]	; (800576c <HAL_GPIO_Init+0x334>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <HAL_GPIO_Init+0x200>
 8005634:	2308      	movs	r3, #8
 8005636:	e010      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005638:	2309      	movs	r3, #9
 800563a:	e00e      	b.n	800565a <HAL_GPIO_Init+0x222>
 800563c:	2307      	movs	r3, #7
 800563e:	e00c      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005640:	2306      	movs	r3, #6
 8005642:	e00a      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005644:	2305      	movs	r3, #5
 8005646:	e008      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005648:	2304      	movs	r3, #4
 800564a:	e006      	b.n	800565a <HAL_GPIO_Init+0x222>
 800564c:	2303      	movs	r3, #3
 800564e:	e004      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005650:	2302      	movs	r3, #2
 8005652:	e002      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_GPIO_Init+0x222>
 8005658:	2300      	movs	r3, #0
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	f002 0203 	and.w	r2, r2, #3
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	4093      	lsls	r3, r2
 8005664:	461a      	mov	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800566c:	4936      	ldr	r1, [pc, #216]	; (8005748 <HAL_GPIO_Init+0x310>)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	3302      	adds	r3, #2
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_GPIO_Init+0x338>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	43db      	mvns	r3, r3
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800569e:	4a34      	ldr	r2, [pc, #208]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056a4:	4b32      	ldr	r3, [pc, #200]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4013      	ands	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80056c8:	4a29      	ldr	r2, [pc, #164]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ce:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4013      	ands	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_GPIO_Init+0x338>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	43db      	mvns	r3, r3
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4013      	ands	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <HAL_GPIO_Init+0x338>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	3301      	adds	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	fa22 f303 	lsr.w	r3, r2, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	f47f ae88 	bne.w	8005448 <HAL_GPIO_Init+0x10>
  }
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40023800 	.word	0x40023800
 8005748:	40013800 	.word	0x40013800
 800574c:	40020000 	.word	0x40020000
 8005750:	40020400 	.word	0x40020400
 8005754:	40020800 	.word	0x40020800
 8005758:	40020c00 	.word	0x40020c00
 800575c:	40021000 	.word	0x40021000
 8005760:	40021400 	.word	0x40021400
 8005764:	40021800 	.word	0x40021800
 8005768:	40021c00 	.word	0x40021c00
 800576c:	40022000 	.word	0x40022000
 8005770:	40013c00 	.word	0x40013c00

08005774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	e001      	b.n	8005796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	807b      	strh	r3, [r7, #2]
 80057ae:	4613      	mov	r3, r2
 80057b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b2:	787b      	ldrb	r3, [r7, #1]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057b8:	887a      	ldrh	r2, [r7, #2]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057be:	e003      	b.n	80057c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	041a      	lsls	r2, r3, #16
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	619a      	str	r2, [r3, #24]
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057e4:	887a      	ldrh	r2, [r7, #2]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	041a      	lsls	r2, r3, #16
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	43d9      	mvns	r1, r3
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	400b      	ands	r3, r1
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005806:	b08f      	sub	sp, #60	; 0x3c
 8005808:	af0a      	add	r7, sp, #40	; 0x28
 800580a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e054      	b.n	80058c0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f00b fe79 	bl	8011528 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2203      	movs	r2, #3
 800583a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f003 fe63 	bl	8009520 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	687e      	ldr	r6, [r7, #4]
 8005862:	466d      	mov	r5, sp
 8005864:	f106 0410 	add.w	r4, r6, #16
 8005868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800586a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800586c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800586e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005874:	e885 0003 	stmia.w	r5, {r0, r1}
 8005878:	1d33      	adds	r3, r6, #4
 800587a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800587c:	6838      	ldr	r0, [r7, #0]
 800587e:	f003 fde8 	bl	8009452 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2101      	movs	r1, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f003 fe59 	bl	8009540 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	687e      	ldr	r6, [r7, #4]
 8005896:	466d      	mov	r5, sp
 8005898:	f106 0410 	add.w	r4, r6, #16
 800589c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800589e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80058ac:	1d33      	adds	r3, r6, #4
 80058ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b0:	6838      	ldr	r0, [r7, #0]
 80058b2:	f003 ffbb 	bl	800982c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058c8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af04      	add	r7, sp, #16
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	70fb      	strb	r3, [r7, #3]
 80058da:	460b      	mov	r3, r1
 80058dc:	70bb      	strb	r3, [r7, #2]
 80058de:	4613      	mov	r3, r2
 80058e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_HCD_HC_Init+0x28>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e076      	b.n	80059de <HAL_HCD_HC_Init+0x116>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	212c      	movs	r1, #44	; 0x2c
 80058fe:	fb01 f303 	mul.w	r3, r1, r3
 8005902:	4413      	add	r3, r2
 8005904:	333d      	adds	r3, #61	; 0x3d
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	212c      	movs	r1, #44	; 0x2c
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	3338      	adds	r3, #56	; 0x38
 8005918:	787a      	ldrb	r2, [r7, #1]
 800591a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	212c      	movs	r1, #44	; 0x2c
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3340      	adds	r3, #64	; 0x40
 800592a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800592c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	212c      	movs	r1, #44	; 0x2c
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	3339      	adds	r3, #57	; 0x39
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	333f      	adds	r3, #63	; 0x3f
 800594e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	78ba      	ldrb	r2, [r7, #2]
 8005958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800595c:	b2d0      	uxtb	r0, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	212c      	movs	r1, #44	; 0x2c
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	4413      	add	r3, r2
 8005968:	333a      	adds	r3, #58	; 0x3a
 800596a:	4602      	mov	r2, r0
 800596c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800596e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005972:	2b00      	cmp	r3, #0
 8005974:	da09      	bge.n	800598a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	212c      	movs	r1, #44	; 0x2c
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	333b      	adds	r3, #59	; 0x3b
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e008      	b.n	800599c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	212c      	movs	r1, #44	; 0x2c
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	333b      	adds	r3, #59	; 0x3b
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	333c      	adds	r3, #60	; 0x3c
 80059aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	787c      	ldrb	r4, [r7, #1]
 80059b6:	78ba      	ldrb	r2, [r7, #2]
 80059b8:	78f9      	ldrb	r1, [r7, #3]
 80059ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	4623      	mov	r3, r4
 80059cc:	f004 f8a4 	bl	8009b18 <USB_HC_Init>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd90      	pop	{r4, r7, pc}

080059e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_HCD_HC_Halt+0x1e>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e00f      	b.n	8005a24 <HAL_HCD_HC_Halt+0x3e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f004 fadf 	bl	8009fd8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	70fb      	strb	r3, [r7, #3]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	70bb      	strb	r3, [r7, #2]
 8005a42:	4613      	mov	r3, r2
 8005a44:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	212c      	movs	r1, #44	; 0x2c
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	4413      	add	r3, r2
 8005a52:	333b      	adds	r3, #59	; 0x3b
 8005a54:	78ba      	ldrb	r2, [r7, #2]
 8005a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	212c      	movs	r1, #44	; 0x2c
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	333f      	adds	r3, #63	; 0x3f
 8005a66:	787a      	ldrb	r2, [r7, #1]
 8005a68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005a6a:	7c3b      	ldrb	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d112      	bne.n	8005a96 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	212c      	movs	r1, #44	; 0x2c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3342      	adds	r3, #66	; 0x42
 8005a7e:	2203      	movs	r2, #3
 8005a80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	333d      	adds	r3, #61	; 0x3d
 8005a90:	7f3a      	ldrb	r2, [r7, #28]
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3342      	adds	r3, #66	; 0x42
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005aa8:	787b      	ldrb	r3, [r7, #1]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	f200 80c6 	bhi.w	8005c3c <HAL_HCD_HC_SubmitRequest+0x210>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005c29 	.word	0x08005c29
 8005ac0:	08005b2d 	.word	0x08005b2d
 8005ac4:	08005bab 	.word	0x08005bab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005ac8:	7c3b      	ldrb	r3, [r7, #16]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	f040 80b8 	bne.w	8005c40 <HAL_HCD_HC_SubmitRequest+0x214>
 8005ad0:	78bb      	ldrb	r3, [r7, #2]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 80b4 	bne.w	8005c40 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005ad8:	8b3b      	ldrh	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	212c      	movs	r1, #44	; 0x2c
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	3355      	adds	r3, #85	; 0x55
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3355      	adds	r3, #85	; 0x55
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3342      	adds	r3, #66	; 0x42
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005b16:	e093      	b.n	8005c40 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	212c      	movs	r1, #44	; 0x2c
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	3342      	adds	r3, #66	; 0x42
 8005b26:	2202      	movs	r2, #2
 8005b28:	701a      	strb	r2, [r3, #0]
      break;
 8005b2a:	e089      	b.n	8005c40 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005b2c:	78bb      	ldrb	r3, [r7, #2]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11d      	bne.n	8005b6e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	212c      	movs	r1, #44	; 0x2c
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3355      	adds	r3, #85	; 0x55
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	212c      	movs	r1, #44	; 0x2c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	3342      	adds	r3, #66	; 0x42
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005b58:	e073      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	212c      	movs	r1, #44	; 0x2c
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	3342      	adds	r3, #66	; 0x42
 8005b68:	2202      	movs	r2, #2
 8005b6a:	701a      	strb	r2, [r3, #0]
      break;
 8005b6c:	e069      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	212c      	movs	r1, #44	; 0x2c
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	3354      	adds	r3, #84	; 0x54
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	212c      	movs	r1, #44	; 0x2c
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3342      	adds	r3, #66	; 0x42
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
      break;
 8005b94:	e055      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	212c      	movs	r1, #44	; 0x2c
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3342      	adds	r3, #66	; 0x42
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	701a      	strb	r2, [r3, #0]
      break;
 8005ba8:	e04b      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005baa:	78bb      	ldrb	r3, [r7, #2]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11d      	bne.n	8005bec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	212c      	movs	r1, #44	; 0x2c
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3355      	adds	r3, #85	; 0x55
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	212c      	movs	r1, #44	; 0x2c
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	3342      	adds	r3, #66	; 0x42
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005bd6:	e034      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3342      	adds	r3, #66	; 0x42
 8005be6:	2202      	movs	r2, #2
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e02a      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3354      	adds	r3, #84	; 0x54
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3342      	adds	r3, #66	; 0x42
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
      break;
 8005c12:	e016      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3342      	adds	r3, #66	; 0x42
 8005c22:	2202      	movs	r2, #2
 8005c24:	701a      	strb	r2, [r3, #0]
      break;
 8005c26:	e00c      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	212c      	movs	r1, #44	; 0x2c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3342      	adds	r3, #66	; 0x42
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005c3c:	bf00      	nop
 8005c3e:	e000      	b.n	8005c42 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005c40:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	212c      	movs	r1, #44	; 0x2c
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3344      	adds	r3, #68	; 0x44
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	8b3a      	ldrh	r2, [r7, #24]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	202c      	movs	r0, #44	; 0x2c
 8005c5c:	fb00 f303 	mul.w	r3, r0, r3
 8005c60:	440b      	add	r3, r1
 8005c62:	334c      	adds	r3, #76	; 0x4c
 8005c64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	212c      	movs	r1, #44	; 0x2c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	3360      	adds	r3, #96	; 0x60
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	212c      	movs	r1, #44	; 0x2c
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	3350      	adds	r3, #80	; 0x50
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	212c      	movs	r1, #44	; 0x2c
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	3339      	adds	r3, #57	; 0x39
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	212c      	movs	r1, #44	; 0x2c
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3361      	adds	r3, #97	; 0x61
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	222c      	movs	r2, #44	; 0x2c
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	3338      	adds	r3, #56	; 0x38
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	18d1      	adds	r1, r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f004 f834 	bl	8009d34 <USB_HC_StartXfer>
 8005ccc:	4603      	mov	r3, r0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop

08005cd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f003 fd5c 	bl	80097ac <USB_GetMode>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	f040 80ef 	bne.w	8005eda <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f003 fd41 	bl	8009788 <USB_ReadInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80e5 	beq.w	8005ed8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f003 fd38 	bl	8009788 <USB_ReadInterrupts>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d22:	d104      	bne.n	8005d2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f003 fd28 	bl	8009788 <USB_ReadInterrupts>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d42:	d104      	bne.n	8005d4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f003 fd18 	bl	8009788 <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d62:	d104      	bne.n	8005d6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005d6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f003 fd08 	bl	8009788 <USB_ReadInterrupts>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d103      	bne.n	8005d8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2202      	movs	r2, #2
 8005d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f003 fcfa 	bl	8009788 <USB_ReadInterrupts>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9e:	d115      	bne.n	8005dcc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005da8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d108      	bne.n	8005dcc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f00b fc32 	bl	8011624 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f003 fde4 	bl	8009994 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f003 fcd9 	bl	8009788 <USB_ReadInterrupts>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de0:	d102      	bne.n	8005de8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fa01 	bl	80071ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f003 fccb 	bl	8009788 <USB_ReadInterrupts>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d106      	bne.n	8005e0a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f00b fbf5 	bl	80115ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2208      	movs	r2, #8
 8005e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 fcba 	bl	8009788 <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d101      	bne.n	8005e22 <HAL_HCD_IRQHandler+0x14a>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <HAL_HCD_IRQHandler+0x14c>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d012      	beq.n	8005e4e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0210 	bic.w	r2, r2, #16
 8005e36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 f904 	bl	8007046 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0210 	orr.w	r2, r2, #16
 8005e4c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f003 fc98 	bl	8009788 <USB_ReadInterrupts>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e62:	d13a      	bne.n	8005eda <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f004 f8a5 	bl	8009fb8 <USB_HC_ReadInterrupt>
 8005e6e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e025      	b.n	8005ec2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d018      	beq.n	8005ebc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	d106      	bne.n	8005eb0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f8a9 	bl	8006000 <HCD_HC_IN_IRQHandler>
 8005eae:	e005      	b.n	8005ebc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fcc4 	bl	8006844 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d3d4      	bcc.n	8005e76 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ed4:	615a      	str	r2, [r3, #20]
 8005ed6:	e000      	b.n	8005eda <HAL_HCD_IRQHandler+0x202>
      return;
 8005ed8:	bf00      	nop
    }
  }
}
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_HCD_Start+0x16>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e013      	b.n	8005f1e <HAL_HCD_Start+0x3e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f003 fda8 	bl	8009a5a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f003 faf6 	bl	8009500 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_HCD_Stop+0x16>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e00d      	b.n	8005f58 <HAL_HCD_Stop+0x32>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f004 f99b 	bl	800a284 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f003 fd4a 	bl	8009a06 <USB_ResetPort>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3360      	adds	r3, #96	; 0x60
 8005f96:	781b      	ldrb	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3350      	adds	r3, #80	; 0x50
 8005fbc:	681b      	ldr	r3, [r3, #0]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f003 fd8e 	bl	8009af6 <USB_GetCurrentFrame>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f003 fd6a 	bl	8009aca <USB_GetHostSpeed>
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d119      	bne.n	8006064 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	461a      	mov	r2, r3
 800603e:	2304      	movs	r3, #4
 8006040:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	60d3      	str	r3, [r2, #12]
 8006062:	e101      	b.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	d12b      	bne.n	80060d4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	461a      	mov	r2, r3
 800608a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	212c      	movs	r1, #44	; 0x2c
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	4413      	add	r3, r2
 800609c:	3361      	adds	r3, #97	; 0x61
 800609e:	2207      	movs	r2, #7
 80060a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060bc:	f043 0302 	orr.w	r3, r3, #2
 80060c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f003 ff83 	bl	8009fd8 <USB_HC_Halt>
 80060d2:	e0c9      	b.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d109      	bne.n	80060fe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	2320      	movs	r3, #32
 80060fa:	6093      	str	r3, [r2, #8]
 80060fc:	e0b4      	b.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d133      	bne.n	800617c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	440a      	add	r2, r1
 800612a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612e:	f043 0302 	orr.w	r3, r3, #2
 8006132:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	212c      	movs	r1, #44	; 0x2c
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	4413      	add	r3, r2
 8006140:	3361      	adds	r3, #97	; 0x61
 8006142:	2205      	movs	r2, #5
 8006144:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	461a      	mov	r2, r3
 8006154:	2310      	movs	r3, #16
 8006156:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	461a      	mov	r2, r3
 8006166:	2308      	movs	r3, #8
 8006168:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f003 ff2f 	bl	8009fd8 <USB_HC_Halt>
 800617a:	e075      	b.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d134      	bne.n	80061fe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ae:	f043 0302 	orr.w	r3, r3, #2
 80061b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	3361      	adds	r3, #97	; 0x61
 80061c2:	2208      	movs	r2, #8
 80061c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	461a      	mov	r2, r3
 80061d4:	2310      	movs	r3, #16
 80061d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	461a      	mov	r2, r3
 80061e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f003 feee 	bl	8009fd8 <USB_HC_Halt>
 80061fc:	e034      	b.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d129      	bne.n	8006268 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	440a      	add	r2, r1
 800622a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3361      	adds	r3, #97	; 0x61
 8006242:	2206      	movs	r2, #6
 8006244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f003 fec1 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	461a      	mov	r2, r3
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627e:	d122      	bne.n	80062c6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629a:	f043 0302 	orr.w	r3, r3, #2
 800629e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 fe94 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062bc:	461a      	mov	r2, r3
 80062be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80062c4:	e2ba      	b.n	800683c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	f040 811b 	bne.w	8006514 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d019      	beq.n	800631a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	212c      	movs	r1, #44	; 0x2c
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	3348      	adds	r3, #72	; 0x48
 80062f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0159      	lsls	r1, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	440b      	add	r3, r1
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006308:	1ad2      	subs	r2, r2, r3
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	202c      	movs	r0, #44	; 0x2c
 8006310:	fb00 f303 	mul.w	r3, r0, r3
 8006314:	440b      	add	r3, r1
 8006316:	3350      	adds	r3, #80	; 0x50
 8006318:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	212c      	movs	r1, #44	; 0x2c
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	3361      	adds	r3, #97	; 0x61
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	212c      	movs	r1, #44	; 0x2c
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	4413      	add	r3, r2
 8006338:	335c      	adds	r3, #92	; 0x5c
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	461a      	mov	r2, r3
 800634c:	2301      	movs	r3, #1
 800634e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	212c      	movs	r1, #44	; 0x2c
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	4413      	add	r3, r2
 800635c:	333f      	adds	r3, #63	; 0x3f
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d009      	beq.n	8006378 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	212c      	movs	r1, #44	; 0x2c
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	4413      	add	r3, r2
 8006370:	333f      	adds	r3, #63	; 0x3f
 8006372:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006374:	2b02      	cmp	r3, #2
 8006376:	d121      	bne.n	80063bc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	440a      	add	r2, r1
 800638e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f003 fe18 	bl	8009fd8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	2310      	movs	r3, #16
 80063b8:	6093      	str	r3, [r2, #8]
 80063ba:	e066      	b.n	800648a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	212c      	movs	r1, #44	; 0x2c
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	333f      	adds	r3, #63	; 0x3f
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d127      	bne.n	8006420 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	212c      	movs	r1, #44	; 0x2c
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	3360      	adds	r3, #96	; 0x60
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	202c      	movs	r0, #44	; 0x2c
 800640c:	fb00 f303 	mul.w	r3, r0, r3
 8006410:	4413      	add	r3, r2
 8006412:	3360      	adds	r3, #96	; 0x60
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f00b f911 	bl	8011640 <HAL_HCD_HC_NotifyURBChange_Callback>
 800641e:	e034      	b.n	800648a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	212c      	movs	r1, #44	; 0x2c
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	333f      	adds	r3, #63	; 0x3f
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d12a      	bne.n	800648a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	212c      	movs	r1, #44	; 0x2c
 800643a:	fb01 f303 	mul.w	r3, r1, r3
 800643e:	4413      	add	r3, r2
 8006440:	3360      	adds	r3, #96	; 0x60
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	212c      	movs	r1, #44	; 0x2c
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	4413      	add	r3, r2
 8006452:	3354      	adds	r3, #84	; 0x54
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f083 0301 	eor.w	r3, r3, #1
 800645a:	b2d8      	uxtb	r0, r3
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	212c      	movs	r1, #44	; 0x2c
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	3354      	adds	r3, #84	; 0x54
 800646a:	4602      	mov	r2, r0
 800646c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	b2d9      	uxtb	r1, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	202c      	movs	r0, #44	; 0x2c
 8006478:	fb00 f303 	mul.w	r3, r0, r3
 800647c:	4413      	add	r3, r2
 800647e:	3360      	adds	r3, #96	; 0x60
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f00b f8db 	bl	8011640 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d12b      	bne.n	80064ea <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	212c      	movs	r1, #44	; 0x2c
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	4413      	add	r3, r2
 800649e:	3348      	adds	r3, #72	; 0x48
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	202c      	movs	r0, #44	; 0x2c
 80064a8:	fb00 f202 	mul.w	r2, r0, r2
 80064ac:	440a      	add	r2, r1
 80064ae:	3240      	adds	r2, #64	; 0x40
 80064b0:	8812      	ldrh	r2, [r2, #0]
 80064b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 81be 	beq.w	800683c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	3354      	adds	r3, #84	; 0x54
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f083 0301 	eor.w	r3, r3, #1
 80064d4:	b2d8      	uxtb	r0, r3
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	212c      	movs	r1, #44	; 0x2c
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	4413      	add	r3, r2
 80064e2:	3354      	adds	r3, #84	; 0x54
 80064e4:	4602      	mov	r2, r0
 80064e6:	701a      	strb	r2, [r3, #0]
}
 80064e8:	e1a8      	b.n	800683c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	212c      	movs	r1, #44	; 0x2c
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	3354      	adds	r3, #84	; 0x54
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2d8      	uxtb	r0, r3
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	212c      	movs	r1, #44	; 0x2c
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	3354      	adds	r3, #84	; 0x54
 800650e:	4602      	mov	r2, r0
 8006510:	701a      	strb	r2, [r3, #0]
}
 8006512:	e193      	b.n	800683c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b02      	cmp	r3, #2
 8006528:	f040 8106 	bne.w	8006738 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006546:	f023 0302 	bic.w	r3, r3, #2
 800654a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	3361      	adds	r3, #97	; 0x61
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d109      	bne.n	8006574 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	212c      	movs	r1, #44	; 0x2c
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	3360      	adds	r3, #96	; 0x60
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e0c9      	b.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	212c      	movs	r1, #44	; 0x2c
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	3361      	adds	r3, #97	; 0x61
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b05      	cmp	r3, #5
 8006586:	d109      	bne.n	800659c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	212c      	movs	r1, #44	; 0x2c
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	3360      	adds	r3, #96	; 0x60
 8006596:	2205      	movs	r2, #5
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e0b5      	b.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	212c      	movs	r1, #44	; 0x2c
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3361      	adds	r3, #97	; 0x61
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b06      	cmp	r3, #6
 80065ae:	d009      	beq.n	80065c4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	212c      	movs	r1, #44	; 0x2c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	3361      	adds	r3, #97	; 0x61
 80065be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d150      	bne.n	8006666 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	212c      	movs	r1, #44	; 0x2c
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	335c      	adds	r3, #92	; 0x5c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	202c      	movs	r0, #44	; 0x2c
 80065dc:	fb00 f303 	mul.w	r3, r0, r3
 80065e0:	440b      	add	r3, r1
 80065e2:	335c      	adds	r3, #92	; 0x5c
 80065e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	212c      	movs	r1, #44	; 0x2c
 80065ec:	fb01 f303 	mul.w	r3, r1, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	335c      	adds	r3, #92	; 0x5c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d912      	bls.n	8006620 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	212c      	movs	r1, #44	; 0x2c
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	335c      	adds	r3, #92	; 0x5c
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3360      	adds	r3, #96	; 0x60
 800661a:	2204      	movs	r2, #4
 800661c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800661e:	e073      	b.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	212c      	movs	r1, #44	; 0x2c
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	3360      	adds	r3, #96	; 0x60
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006648:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006650:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	461a      	mov	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006664:	e050      	b.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	212c      	movs	r1, #44	; 0x2c
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	4413      	add	r3, r2
 8006672:	3361      	adds	r3, #97	; 0x61
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d122      	bne.n	80066c0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	212c      	movs	r1, #44	; 0x2c
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	3360      	adds	r3, #96	; 0x60
 8006688:	2202      	movs	r2, #2
 800668a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	461a      	mov	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e023      	b.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	212c      	movs	r1, #44	; 0x2c
 80066c6:	fb01 f303 	mul.w	r3, r1, r3
 80066ca:	4413      	add	r3, r2
 80066cc:	3361      	adds	r3, #97	; 0x61
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d119      	bne.n	8006708 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	212c      	movs	r1, #44	; 0x2c
 80066da:	fb01 f303 	mul.w	r3, r1, r3
 80066de:	4413      	add	r3, r2
 80066e0:	335c      	adds	r3, #92	; 0x5c
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	202c      	movs	r0, #44	; 0x2c
 80066ec:	fb00 f303 	mul.w	r3, r0, r3
 80066f0:	440b      	add	r3, r1
 80066f2:	335c      	adds	r3, #92	; 0x5c
 80066f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	212c      	movs	r1, #44	; 0x2c
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	3360      	adds	r3, #96	; 0x60
 8006704:	2204      	movs	r2, #4
 8006706:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	461a      	mov	r2, r3
 8006716:	2302      	movs	r3, #2
 8006718:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	202c      	movs	r0, #44	; 0x2c
 8006724:	fb00 f303 	mul.w	r3, r0, r3
 8006728:	4413      	add	r3, r2
 800672a:	3360      	adds	r3, #96	; 0x60
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f00a ff85 	bl	8011640 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006736:	e081      	b.n	800683c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d176      	bne.n	800683c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	212c      	movs	r1, #44	; 0x2c
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	333f      	adds	r3, #63	; 0x3f
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b03      	cmp	r3, #3
 8006760:	d121      	bne.n	80067a6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	212c      	movs	r1, #44	; 0x2c
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	335c      	adds	r3, #92	; 0x5c
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678e:	f043 0302 	orr.w	r3, r3, #2
 8006792:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f003 fc1a 	bl	8009fd8 <USB_HC_Halt>
 80067a4:	e041      	b.n	800682a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	212c      	movs	r1, #44	; 0x2c
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	333f      	adds	r3, #63	; 0x3f
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	212c      	movs	r1, #44	; 0x2c
 80067c0:	fb01 f303 	mul.w	r3, r1, r3
 80067c4:	4413      	add	r3, r2
 80067c6:	333f      	adds	r3, #63	; 0x3f
 80067c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d12d      	bne.n	800682a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	212c      	movs	r1, #44	; 0x2c
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	335c      	adds	r3, #92	; 0x5c
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d120      	bne.n	800682a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	212c      	movs	r1, #44	; 0x2c
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	4413      	add	r3, r2
 80067f4:	3361      	adds	r3, #97	; 0x61
 80067f6:	2203      	movs	r2, #3
 80067f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	440a      	add	r2, r1
 8006810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f003 fbd7 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	461a      	mov	r2, r3
 8006838:	2310      	movs	r3, #16
 800683a:	6093      	str	r3, [r2, #8]
}
 800683c:	bf00      	nop
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d119      	bne.n	80068a8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	461a      	mov	r2, r3
 8006882:	2304      	movs	r3, #4
 8006884:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	440a      	add	r2, r1
 800689c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80068a6:	e3ca      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d13e      	bne.n	800693c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	461a      	mov	r2, r3
 80068cc:	2320      	movs	r3, #32
 80068ce:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	212c      	movs	r1, #44	; 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	333d      	adds	r3, #61	; 0x3d
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f040 83ac 	bne.w	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	212c      	movs	r1, #44	; 0x2c
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	333d      	adds	r3, #61	; 0x3d
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	212c      	movs	r1, #44	; 0x2c
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	3360      	adds	r3, #96	; 0x60
 8006906:	2202      	movs	r2, #2
 8006908:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f003 fb4f 	bl	8009fd8 <USB_HC_Halt>
}
 800693a:	e380      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006952:	d122      	bne.n	800699a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696e:	f043 0302 	orr.w	r3, r3, #2
 8006972:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f003 fb2a 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	461a      	mov	r2, r3
 8006992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006996:	6093      	str	r3, [r2, #8]
}
 8006998:	e351      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d150      	bne.n	8006a52 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	335c      	adds	r3, #92	; 0x5c
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d111      	bne.n	80069fc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	212c      	movs	r1, #44	; 0x2c
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	333d      	adds	r3, #61	; 0x3d
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f6:	461a      	mov	r2, r3
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f003 fad6 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	212c      	movs	r1, #44	; 0x2c
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	3361      	adds	r3, #97	; 0x61
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
}
 8006a50:	e2f5      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d13c      	bne.n	8006ae2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	212c      	movs	r1, #44	; 0x2c
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	3361      	adds	r3, #97	; 0x61
 8006a76:	2204      	movs	r2, #4
 8006a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	212c      	movs	r1, #44	; 0x2c
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	333d      	adds	r3, #61	; 0x3d
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	212c      	movs	r1, #44	; 0x2c
 8006a92:	fb01 f303 	mul.w	r3, r1, r3
 8006a96:	4413      	add	r3, r2
 8006a98:	335c      	adds	r3, #92	; 0x5c
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab8:	f043 0302 	orr.w	r3, r3, #2
 8006abc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 fa85 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ada:	461a      	mov	r2, r3
 8006adc:	2340      	movs	r3, #64	; 0x40
 8006ade:	6093      	str	r3, [r2, #8]
}
 8006ae0:	e2ad      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d12a      	bne.n	8006b4e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	461a      	mov	r2, r3
 8006b06:	2308      	movs	r3, #8
 8006b08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f003 fa4f 	bl	8009fd8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	212c      	movs	r1, #44	; 0x2c
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	3361      	adds	r3, #97	; 0x61
 8006b48:	2205      	movs	r2, #5
 8006b4a:	701a      	strb	r2, [r3, #0]
}
 8006b4c:	e277      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d150      	bne.n	8006c06 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	212c      	movs	r1, #44	; 0x2c
 8006b6a:	fb01 f303 	mul.w	r3, r1, r3
 8006b6e:	4413      	add	r3, r2
 8006b70:	335c      	adds	r3, #92	; 0x5c
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	212c      	movs	r1, #44	; 0x2c
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	3361      	adds	r3, #97	; 0x61
 8006b84:	2203      	movs	r2, #3
 8006b86:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	333d      	adds	r3, #61	; 0x3d
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d112      	bne.n	8006bc2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	212c      	movs	r1, #44	; 0x2c
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	333c      	adds	r3, #60	; 0x3c
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d108      	bne.n	8006bc2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	333d      	adds	r3, #61	; 0x3d
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f003 f9f3 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2310      	movs	r3, #16
 8006c02:	6093      	str	r3, [r2, #8]
}
 8006c04:	e21b      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d174      	bne.n	8006d06 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d121      	bne.n	8006c68 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	212c      	movs	r1, #44	; 0x2c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	3361      	adds	r3, #97	; 0x61
 8006c32:	2206      	movs	r2, #6
 8006c34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c50:	f043 0302 	orr.w	r3, r3, #2
 8006c54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f003 f9b9 	bl	8009fd8 <USB_HC_Halt>
 8006c66:	e044      	b.n	8006cf2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	212c      	movs	r1, #44	; 0x2c
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	335c      	adds	r3, #92	; 0x5c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	202c      	movs	r0, #44	; 0x2c
 8006c80:	fb00 f303 	mul.w	r3, r0, r3
 8006c84:	440b      	add	r3, r1
 8006c86:	335c      	adds	r3, #92	; 0x5c
 8006c88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	212c      	movs	r1, #44	; 0x2c
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	335c      	adds	r3, #92	; 0x5c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d920      	bls.n	8006ce0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	212c      	movs	r1, #44	; 0x2c
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	335c      	adds	r3, #92	; 0x5c
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	212c      	movs	r1, #44	; 0x2c
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3360      	adds	r3, #96	; 0x60
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	b2d9      	uxtb	r1, r3
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	202c      	movs	r0, #44	; 0x2c
 8006ccc:	fb00 f303 	mul.w	r3, r0, r3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3360      	adds	r3, #96	; 0x60
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f00a fcb1 	bl	8011640 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006cde:	e008      	b.n	8006cf2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	212c      	movs	r1, #44	; 0x2c
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	3360      	adds	r3, #96	; 0x60
 8006cee:	2202      	movs	r2, #2
 8006cf0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2380      	movs	r3, #128	; 0x80
 8006d02:	6093      	str	r3, [r2, #8]
}
 8006d04:	e19b      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d134      	bne.n	8006d88 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f003 f945 	bl	8009fd8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	212c      	movs	r1, #44	; 0x2c
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	3361      	adds	r3, #97	; 0x61
 8006d82:	2208      	movs	r2, #8
 8006d84:	701a      	strb	r2, [r3, #0]
}
 8006d86:	e15a      	b.n	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	f040 814f 	bne.w	800703e <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dba:	f023 0302 	bic.w	r3, r3, #2
 8006dbe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	212c      	movs	r1, #44	; 0x2c
 8006dc6:	fb01 f303 	mul.w	r3, r1, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	3361      	adds	r3, #97	; 0x61
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d17d      	bne.n	8006ed0 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	212c      	movs	r1, #44	; 0x2c
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	3360      	adds	r3, #96	; 0x60
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	212c      	movs	r1, #44	; 0x2c
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	333f      	adds	r3, #63	; 0x3f
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d00a      	beq.n	8006e10 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	212c      	movs	r1, #44	; 0x2c
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	4413      	add	r3, r2
 8006e06:	333f      	adds	r3, #63	; 0x3f
 8006e08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	f040 8100 	bne.w	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	212c      	movs	r1, #44	; 0x2c
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	4413      	add	r3, r2
 8006e24:	3355      	adds	r3, #85	; 0x55
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f083 0301 	eor.w	r3, r3, #1
 8006e2c:	b2d8      	uxtb	r0, r3
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	212c      	movs	r1, #44	; 0x2c
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	3355      	adds	r3, #85	; 0x55
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 80e3 	bne.w	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	212c      	movs	r1, #44	; 0x2c
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	4413      	add	r3, r2
 8006e56:	334c      	adds	r3, #76	; 0x4c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80d8 	beq.w	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	212c      	movs	r1, #44	; 0x2c
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	334c      	adds	r3, #76	; 0x4c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	202c      	movs	r0, #44	; 0x2c
 8006e76:	fb00 f202 	mul.w	r2, r0, r2
 8006e7a:	440a      	add	r2, r1
 8006e7c:	3240      	adds	r2, #64	; 0x40
 8006e7e:	8812      	ldrh	r2, [r2, #0]
 8006e80:	4413      	add	r3, r2
 8006e82:	3b01      	subs	r3, #1
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	202c      	movs	r0, #44	; 0x2c
 8006e8a:	fb00 f202 	mul.w	r2, r0, r2
 8006e8e:	440a      	add	r2, r1
 8006e90:	3240      	adds	r2, #64	; 0x40
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80b5 	beq.w	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	212c      	movs	r1, #44	; 0x2c
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3355      	adds	r3, #85	; 0x55
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f083 0301 	eor.w	r3, r3, #1
 8006eba:	b2d8      	uxtb	r0, r3
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	212c      	movs	r1, #44	; 0x2c
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3355      	adds	r3, #85	; 0x55
 8006eca:	4602      	mov	r2, r0
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e09f      	b.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	212c      	movs	r1, #44	; 0x2c
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	3361      	adds	r3, #97	; 0x61
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d109      	bne.n	8006ef8 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	212c      	movs	r1, #44	; 0x2c
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	3360      	adds	r3, #96	; 0x60
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e08b      	b.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	212c      	movs	r1, #44	; 0x2c
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	3361      	adds	r3, #97	; 0x61
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d109      	bne.n	8006f20 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	212c      	movs	r1, #44	; 0x2c
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3360      	adds	r3, #96	; 0x60
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e077      	b.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	212c      	movs	r1, #44	; 0x2c
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3361      	adds	r3, #97	; 0x61
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	d109      	bne.n	8006f48 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	212c      	movs	r1, #44	; 0x2c
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	3360      	adds	r3, #96	; 0x60
 8006f42:	2205      	movs	r2, #5
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e063      	b.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	3361      	adds	r3, #97	; 0x61
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d009      	beq.n	8006f70 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	212c      	movs	r1, #44	; 0x2c
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	3361      	adds	r3, #97	; 0x61
 8006f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d14f      	bne.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	212c      	movs	r1, #44	; 0x2c
 8006f76:	fb01 f303 	mul.w	r3, r1, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	335c      	adds	r3, #92	; 0x5c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	202c      	movs	r0, #44	; 0x2c
 8006f88:	fb00 f303 	mul.w	r3, r0, r3
 8006f8c:	440b      	add	r3, r1
 8006f8e:	335c      	adds	r3, #92	; 0x5c
 8006f90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	212c      	movs	r1, #44	; 0x2c
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	335c      	adds	r3, #92	; 0x5c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d912      	bls.n	8006fcc <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	212c      	movs	r1, #44	; 0x2c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	335c      	adds	r3, #92	; 0x5c
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	212c      	movs	r1, #44	; 0x2c
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3360      	adds	r3, #96	; 0x60
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e021      	b.n	8007010 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	212c      	movs	r1, #44	; 0x2c
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3360      	adds	r3, #96	; 0x60
 8006fda:	2202      	movs	r2, #2
 8006fdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ff4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	461a      	mov	r2, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701c:	461a      	mov	r2, r3
 800701e:	2302      	movs	r3, #2
 8007020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	b2d9      	uxtb	r1, r3
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	202c      	movs	r0, #44	; 0x2c
 800702c:	fb00 f303 	mul.w	r3, r0, r3
 8007030:	4413      	add	r3, r2
 8007032:	3360      	adds	r3, #96	; 0x60
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f00a fb01 	bl	8011640 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800703e:	bf00      	nop
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b08a      	sub	sp, #40	; 0x28
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	0c5b      	lsrs	r3, r3, #17
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d004      	beq.n	800708c <HCD_RXQLVL_IRQHandler+0x46>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b05      	cmp	r3, #5
 8007086:	f000 80a9 	beq.w	80071dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800708a:	e0aa      	b.n	80071e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80a6 	beq.w	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	212c      	movs	r1, #44	; 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	3344      	adds	r3, #68	; 0x44
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 809b 	beq.w	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	212c      	movs	r1, #44	; 0x2c
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	3350      	adds	r3, #80	; 0x50
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	441a      	add	r2, r3
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	202c      	movs	r0, #44	; 0x2c
 80070c4:	fb00 f303 	mul.w	r3, r0, r3
 80070c8:	440b      	add	r3, r1
 80070ca:	334c      	adds	r3, #76	; 0x4c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d87a      	bhi.n	80071c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	212c      	movs	r1, #44	; 0x2c
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	3344      	adds	r3, #68	; 0x44
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	b292      	uxth	r2, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	f002 faf5 	bl	80096da <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	212c      	movs	r1, #44	; 0x2c
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	3344      	adds	r3, #68	; 0x44
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	441a      	add	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	202c      	movs	r0, #44	; 0x2c
 800710a:	fb00 f303 	mul.w	r3, r0, r3
 800710e:	440b      	add	r3, r1
 8007110:	3344      	adds	r3, #68	; 0x44
 8007112:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	212c      	movs	r1, #44	; 0x2c
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	4413      	add	r3, r2
 8007120:	3350      	adds	r3, #80	; 0x50
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	441a      	add	r2, r3
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	202c      	movs	r0, #44	; 0x2c
 800712e:	fb00 f303 	mul.w	r3, r0, r3
 8007132:	440b      	add	r3, r1
 8007134:	3350      	adds	r3, #80	; 0x50
 8007136:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	0cdb      	lsrs	r3, r3, #19
 8007148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	212c      	movs	r1, #44	; 0x2c
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	3340      	adds	r3, #64	; 0x40
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4293      	cmp	r3, r2
 8007164:	d13c      	bne.n	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d039      	beq.n	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007182:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800718a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	461a      	mov	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	212c      	movs	r1, #44	; 0x2c
 80071a4:	fb01 f303 	mul.w	r3, r1, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	3354      	adds	r3, #84	; 0x54
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f083 0301 	eor.w	r3, r3, #1
 80071b2:	b2d8      	uxtb	r0, r3
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	212c      	movs	r1, #44	; 0x2c
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	4413      	add	r3, r2
 80071c0:	3354      	adds	r3, #84	; 0x54
 80071c2:	4602      	mov	r2, r0
 80071c4:	701a      	strb	r2, [r3, #0]
      break;
 80071c6:	e00b      	b.n	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	212c      	movs	r1, #44	; 0x2c
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	3360      	adds	r3, #96	; 0x60
 80071d6:	2204      	movs	r2, #4
 80071d8:	701a      	strb	r2, [r3, #0]
      break;
 80071da:	e001      	b.n	80071e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80071e0:	bf00      	nop
  }
}
 80071e2:	bf00      	nop
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b086      	sub	sp, #24
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007216:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d10b      	bne.n	800723a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d102      	bne.n	8007232 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f00a f9eb 	bl	8011608 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f043 0302 	orr.w	r3, r3, #2
 8007238:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d132      	bne.n	80072aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f043 0308 	orr.w	r3, r3, #8
 800724a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b04      	cmp	r3, #4
 8007254:	d126      	bne.n	80072a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d113      	bne.n	8007286 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007268:	d106      	bne.n	8007278 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f002 fb8f 	bl	8009994 <USB_InitFSLSPClkSel>
 8007276:	e011      	b.n	800729c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2101      	movs	r1, #1
 800727e:	4618      	mov	r0, r3
 8007280:	f002 fb88 	bl	8009994 <USB_InitFSLSPClkSel>
 8007284:	e00a      	b.n	800729c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d106      	bne.n	800729c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007294:	461a      	mov	r2, r3
 8007296:	f64e 2360 	movw	r3, #60000	; 0xea60
 800729a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f00a f9dc 	bl	801165a <HAL_HCD_PortEnabled_Callback>
 80072a2:	e002      	b.n	80072aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f00a f9e6 	bl	8011676 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d103      	bne.n	80072bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f043 0320 	orr.w	r3, r3, #32
 80072ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072c2:	461a      	mov	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6013      	str	r3, [r2, #0]
}
 80072c8:	bf00      	nop
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e237      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d050      	beq.n	8007390 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ee:	4ba3      	ldr	r3, [pc, #652]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d00c      	beq.n	8007314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fa:	4ba0      	ldr	r3, [pc, #640]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007302:	2b08      	cmp	r3, #8
 8007304:	d112      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007306:	4b9d      	ldr	r3, [pc, #628]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007312:	d10b      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	4b99      	ldr	r3, [pc, #612]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d036      	beq.n	800738e <HAL_RCC_OscConfig+0xbe>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d132      	bne.n	800738e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e212      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	4b93      	ldr	r3, [pc, #588]	; (8007580 <HAL_RCC_OscConfig+0x2b0>)
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d013      	beq.n	8007366 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733e:	f7fd fb95 	bl	8004a6c <HAL_GetTick>
 8007342:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007346:	f7fd fb91 	bl	8004a6c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b64      	cmp	r3, #100	; 0x64
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e1fc      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007358:	4b88      	ldr	r3, [pc, #544]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCC_OscConfig+0x76>
 8007364:	e014      	b.n	8007390 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fd fb81 	bl	8004a6c <HAL_GetTick>
 800736a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800736e:	f7fd fb7d 	bl	8004a6c <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b64      	cmp	r3, #100	; 0x64
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e1e8      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007380:	4b7e      	ldr	r3, [pc, #504]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x9e>
 800738c:	e000      	b.n	8007390 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d077      	beq.n	800748c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800739c:	4b77      	ldr	r3, [pc, #476]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 030c 	and.w	r3, r3, #12
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073a8:	4b74      	ldr	r3, [pc, #464]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d126      	bne.n	8007402 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073b4:	4b71      	ldr	r3, [pc, #452]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d120      	bne.n	8007402 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073c0:	4b6e      	ldr	r3, [pc, #440]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_RCC_OscConfig+0x108>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e1bc      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d8:	4b68      	ldr	r3, [pc, #416]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	21f8      	movs	r1, #248	; 0xf8
 80073e6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	69b9      	ldr	r1, [r7, #24]
 80073ea:	fa91 f1a1 	rbit	r1, r1
 80073ee:	6179      	str	r1, [r7, #20]
  return result;
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	fab1 f181 	clz	r1, r1
 80073f6:	b2c9      	uxtb	r1, r1
 80073f8:	408b      	lsls	r3, r1
 80073fa:	4960      	ldr	r1, [pc, #384]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007400:	e044      	b.n	800748c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d02a      	beq.n	8007460 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800740a:	4b5e      	ldr	r3, [pc, #376]	; (8007584 <HAL_RCC_OscConfig+0x2b4>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fd fb2c 	bl	8004a6c <HAL_GetTick>
 8007414:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007418:	f7fd fb28 	bl	8004a6c <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e193      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742a:	4b54      	ldr	r3, [pc, #336]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007436:	4b51      	ldr	r3, [pc, #324]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	21f8      	movs	r1, #248	; 0xf8
 8007444:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	fa91 f1a1 	rbit	r1, r1
 800744c:	60f9      	str	r1, [r7, #12]
  return result;
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	fab1 f181 	clz	r1, r1
 8007454:	b2c9      	uxtb	r1, r1
 8007456:	408b      	lsls	r3, r1
 8007458:	4948      	ldr	r1, [pc, #288]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 800745a:	4313      	orrs	r3, r2
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	e015      	b.n	800748c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007460:	4b48      	ldr	r3, [pc, #288]	; (8007584 <HAL_RCC_OscConfig+0x2b4>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007466:	f7fd fb01 	bl	8004a6c <HAL_GetTick>
 800746a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800746e:	f7fd fafd 	bl	8004a6c <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e168      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007480:	4b3e      	ldr	r3, [pc, #248]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f0      	bne.n	800746e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d030      	beq.n	80074fa <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a0:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCC_OscConfig+0x2b8>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074a6:	f7fd fae1 	bl	8004a6c <HAL_GetTick>
 80074aa:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ae:	f7fd fadd 	bl	8004a6c <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e148      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c0:	4b2e      	ldr	r3, [pc, #184]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80074c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0f0      	beq.n	80074ae <HAL_RCC_OscConfig+0x1de>
 80074cc:	e015      	b.n	80074fa <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <HAL_RCC_OscConfig+0x2b8>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d4:	f7fd faca 	bl	8004a6c <HAL_GetTick>
 80074d8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074dc:	f7fd fac6 	bl	8004a6c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e131      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 80074f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f0      	bne.n	80074dc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8088 	beq.w	8007618 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800750e:	4b1b      	ldr	r3, [pc, #108]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d110      	bne.n	800753c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	4b17      	ldr	r3, [pc, #92]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	4a16      	ldr	r2, [pc, #88]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 8007524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007528:	6413      	str	r3, [r2, #64]	; 0x40
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <HAL_RCC_OscConfig+0x2ac>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <HAL_RCC_OscConfig+0x2bc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a12      	ldr	r2, [pc, #72]	; (800758c <HAL_RCC_OscConfig+0x2bc>)
 8007542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007546:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <HAL_RCC_OscConfig+0x2bc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d123      	bne.n	800759c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_RCC_OscConfig+0x2bc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a0c      	ldr	r2, [pc, #48]	; (800758c <HAL_RCC_OscConfig+0x2bc>)
 800755a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007560:	f7fd fa84 	bl	8004a6c <HAL_GetTick>
 8007564:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007566:	e013      	b.n	8007590 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007568:	f7fd fa80 	bl	8004a6c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d90c      	bls.n	8007590 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e0eb      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
 800757a:	bf00      	nop
 800757c:	40023800 	.word	0x40023800
 8007580:	40023802 	.word	0x40023802
 8007584:	42470000 	.word	0x42470000
 8007588:	42470e80 	.word	0x42470e80
 800758c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007590:	4b72      	ldr	r3, [pc, #456]	; (800775c <HAL_RCC_OscConfig+0x48c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0e5      	beq.n	8007568 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	4b6f      	ldr	r3, [pc, #444]	; (8007760 <HAL_RCC_OscConfig+0x490>)
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d015      	beq.n	80075da <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ae:	f7fd fa5d 	bl	8004a6c <HAL_GetTick>
 80075b2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b4:	e00a      	b.n	80075cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b6:	f7fd fa59 	bl	8004a6c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e0c2      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075cc:	4b65      	ldr	r3, [pc, #404]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0ee      	beq.n	80075b6 <HAL_RCC_OscConfig+0x2e6>
 80075d8:	e014      	b.n	8007604 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075da:	f7fd fa47 	bl	8004a6c <HAL_GetTick>
 80075de:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fd fa43 	bl	8004a6c <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0ac      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075f8:	4b5a      	ldr	r3, [pc, #360]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1ee      	bne.n	80075e2 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007608:	2b01      	cmp	r3, #1
 800760a:	d105      	bne.n	8007618 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800760c:	4b55      	ldr	r3, [pc, #340]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	4a54      	ldr	r2, [pc, #336]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8097 	beq.w	8007750 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007622:	4b50      	ldr	r3, [pc, #320]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 030c 	and.w	r3, r3, #12
 800762a:	2b08      	cmp	r3, #8
 800762c:	d061      	beq.n	80076f2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d146      	bne.n	80076c4 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007636:	4b4c      	ldr	r3, [pc, #304]	; (8007768 <HAL_RCC_OscConfig+0x498>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763c:	f7fd fa16 	bl	8004a6c <HAL_GetTick>
 8007640:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007644:	f7fd fa12 	bl	8004a6c <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b64      	cmp	r3, #100	; 0x64
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e07d      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007656:	4b43      	ldr	r3, [pc, #268]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007662:	4b40      	ldr	r3, [pc, #256]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b41      	ldr	r3, [pc, #260]	; (800776c <HAL_RCC_OscConfig+0x49c>)
 8007668:	4013      	ands	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	69d1      	ldr	r1, [r2, #28]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6a12      	ldr	r2, [r2, #32]
 8007672:	4311      	orrs	r1, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007678:	0192      	lsls	r2, r2, #6
 800767a:	4311      	orrs	r1, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007680:	0612      	lsls	r2, r2, #24
 8007682:	4311      	orrs	r1, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007688:	0852      	lsrs	r2, r2, #1
 800768a:	3a01      	subs	r2, #1
 800768c:	0412      	lsls	r2, r2, #16
 800768e:	430a      	orrs	r2, r1
 8007690:	4934      	ldr	r1, [pc, #208]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007692:	4313      	orrs	r3, r2
 8007694:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007696:	4b34      	ldr	r3, [pc, #208]	; (8007768 <HAL_RCC_OscConfig+0x498>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769c:	f7fd f9e6 	bl	8004a6c <HAL_GetTick>
 80076a0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a4:	f7fd f9e2 	bl	8004a6c <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b64      	cmp	r3, #100	; 0x64
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e04d      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b6:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0x3d4>
 80076c2:	e045      	b.n	8007750 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c4:	4b28      	ldr	r3, [pc, #160]	; (8007768 <HAL_RCC_OscConfig+0x498>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ca:	f7fd f9cf 	bl	8004a6c <HAL_GetTick>
 80076ce:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d2:	f7fd f9cb 	bl	8004a6c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b64      	cmp	r3, #100	; 0x64
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e036      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <HAL_RCC_OscConfig+0x402>
 80076f0:	e02e      	b.n	8007750 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e029      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <HAL_RCC_OscConfig+0x494>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	429a      	cmp	r2, r3
 8007710:	d11c      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771c:	429a      	cmp	r2, r3
 800771e:	d115      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	099b      	lsrs	r3, r3, #6
 8007724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800772c:	429a      	cmp	r2, r3
 800772e:	d10d      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d106      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007748:	429a      	cmp	r2, r3
 800774a:	d001      	beq.n	8007750 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e000      	b.n	8007752 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40007000 	.word	0x40007000
 8007760:	40023870 	.word	0x40023870
 8007764:	40023800 	.word	0x40023800
 8007768:	42470060 	.word	0x42470060
 800776c:	f0bc8000 	.word	0xf0bc8000

08007770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0d2      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007784:	4b6b      	ldr	r3, [pc, #428]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d90c      	bls.n	80077ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007792:	4b68      	ldr	r3, [pc, #416]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	4b66      	ldr	r3, [pc, #408]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d001      	beq.n	80077ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0be      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d020      	beq.n	80077fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077c4:	4b5c      	ldr	r3, [pc, #368]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a5b      	ldr	r2, [pc, #364]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80077dc:	4b56      	ldr	r3, [pc, #344]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	4a55      	ldr	r2, [pc, #340]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b53      	ldr	r3, [pc, #332]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4950      	ldr	r1, [pc, #320]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d040      	beq.n	8007888 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d107      	bne.n	800781e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	4b4a      	ldr	r3, [pc, #296]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d115      	bne.n	8007846 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e085      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d107      	bne.n	8007836 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007826:	4b44      	ldr	r3, [pc, #272]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e079      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007836:	4b40      	ldr	r3, [pc, #256]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e071      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007846:	4b3c      	ldr	r3, [pc, #240]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f023 0203 	bic.w	r2, r3, #3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4939      	ldr	r1, [pc, #228]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007854:	4313      	orrs	r3, r2
 8007856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007858:	f7fd f908 	bl	8004a6c <HAL_GetTick>
 800785c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800785e:	e00a      	b.n	8007876 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007860:	f7fd f904 	bl	8004a6c <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e059      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007876:	4b30      	ldr	r3, [pc, #192]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 020c 	and.w	r2, r3, #12
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	429a      	cmp	r2, r3
 8007886:	d1eb      	bne.n	8007860 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007888:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d20c      	bcs.n	80078b0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800789e:	4b25      	ldr	r3, [pc, #148]	; (8007934 <HAL_RCC_ClockConfig+0x1c4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d001      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e03c      	b.n	800792a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078bc:	4b1e      	ldr	r3, [pc, #120]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	491b      	ldr	r1, [pc, #108]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078da:	4b17      	ldr	r3, [pc, #92]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4913      	ldr	r1, [pc, #76]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80078ee:	f000 f82b 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 80078f2:	4601      	mov	r1, r0
 80078f4:	4b10      	ldr	r3, [pc, #64]	; (8007938 <HAL_RCC_ClockConfig+0x1c8>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078fc:	22f0      	movs	r2, #240	; 0xf0
 80078fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	fa92 f2a2 	rbit	r2, r2
 8007906:	60fa      	str	r2, [r7, #12]
  return result;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	fab2 f282 	clz	r2, r2
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	40d3      	lsrs	r3, r2
 8007912:	4a0a      	ldr	r2, [pc, #40]	; (800793c <HAL_RCC_ClockConfig+0x1cc>)
 8007914:	5cd3      	ldrb	r3, [r2, r3]
 8007916:	fa21 f303 	lsr.w	r3, r1, r3
 800791a:	4a09      	ldr	r2, [pc, #36]	; (8007940 <HAL_RCC_ClockConfig+0x1d0>)
 800791c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_RCC_ClockConfig+0x1d4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd f860 	bl	80049e8 <HAL_InitTick>

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40023c00 	.word	0x40023c00
 8007938:	40023800 	.word	0x40023800
 800793c:	080164cc 	.word	0x080164cc
 8007940:	2000021c 	.word	0x2000021c
 8007944:	20000220 	.word	0x20000220

08007948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007948:	b5b0      	push	{r4, r5, r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800794e:	2100      	movs	r1, #0
 8007950:	6079      	str	r1, [r7, #4]
 8007952:	2100      	movs	r1, #0
 8007954:	60f9      	str	r1, [r7, #12]
 8007956:	2100      	movs	r1, #0
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800795a:	2100      	movs	r1, #0
 800795c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800795e:	4952      	ldr	r1, [pc, #328]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007960:	6889      	ldr	r1, [r1, #8]
 8007962:	f001 010c 	and.w	r1, r1, #12
 8007966:	2908      	cmp	r1, #8
 8007968:	d00d      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x3e>
 800796a:	2908      	cmp	r1, #8
 800796c:	f200 8094 	bhi.w	8007a98 <HAL_RCC_GetSysClockFreq+0x150>
 8007970:	2900      	cmp	r1, #0
 8007972:	d002      	beq.n	800797a <HAL_RCC_GetSysClockFreq+0x32>
 8007974:	2904      	cmp	r1, #4
 8007976:	d003      	beq.n	8007980 <HAL_RCC_GetSysClockFreq+0x38>
 8007978:	e08e      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800797a:	4b4c      	ldr	r3, [pc, #304]	; (8007aac <HAL_RCC_GetSysClockFreq+0x164>)
 800797c:	60bb      	str	r3, [r7, #8]
       break;
 800797e:	e08e      	b.n	8007a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007980:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007982:	60bb      	str	r3, [r7, #8]
      break;
 8007984:	e08b      	b.n	8007a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007986:	4948      	ldr	r1, [pc, #288]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007988:	6849      	ldr	r1, [r1, #4]
 800798a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800798e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007990:	4945      	ldr	r1, [pc, #276]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007992:	6849      	ldr	r1, [r1, #4]
 8007994:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007998:	2900      	cmp	r1, #0
 800799a:	d024      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800799c:	4942      	ldr	r1, [pc, #264]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 800799e:	6849      	ldr	r1, [r1, #4]
 80079a0:	0989      	lsrs	r1, r1, #6
 80079a2:	4608      	mov	r0, r1
 80079a4:	f04f 0100 	mov.w	r1, #0
 80079a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80079ac:	f04f 0500 	mov.w	r5, #0
 80079b0:	ea00 0204 	and.w	r2, r0, r4
 80079b4:	ea01 0305 	and.w	r3, r1, r5
 80079b8:	493d      	ldr	r1, [pc, #244]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 80079ba:	fb01 f003 	mul.w	r0, r1, r3
 80079be:	2100      	movs	r1, #0
 80079c0:	fb01 f102 	mul.w	r1, r1, r2
 80079c4:	1844      	adds	r4, r0, r1
 80079c6:	493a      	ldr	r1, [pc, #232]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 80079c8:	fba2 0101 	umull	r0, r1, r2, r1
 80079cc:	1863      	adds	r3, r4, r1
 80079ce:	4619      	mov	r1, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	f7f9 fc26 	bl	8001228 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4613      	mov	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e04a      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079e6:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	461a      	mov	r2, r3
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	ea02 0400 	and.w	r4, r2, r0
 80079fe:	ea03 0501 	and.w	r5, r3, r1
 8007a02:	4620      	mov	r0, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	014b      	lsls	r3, r1, #5
 8007a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a14:	0142      	lsls	r2, r0, #5
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	1b00      	subs	r0, r0, r4
 8007a1c:	eb61 0105 	sbc.w	r1, r1, r5
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	018b      	lsls	r3, r1, #6
 8007a2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a2e:	0182      	lsls	r2, r0, #6
 8007a30:	1a12      	subs	r2, r2, r0
 8007a32:	eb63 0301 	sbc.w	r3, r3, r1
 8007a36:	f04f 0000 	mov.w	r0, #0
 8007a3a:	f04f 0100 	mov.w	r1, #0
 8007a3e:	00d9      	lsls	r1, r3, #3
 8007a40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a44:	00d0      	lsls	r0, r2, #3
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	1912      	adds	r2, r2, r4
 8007a4c:	eb45 0303 	adc.w	r3, r5, r3
 8007a50:	f04f 0000 	mov.w	r0, #0
 8007a54:	f04f 0100 	mov.w	r1, #0
 8007a58:	0299      	lsls	r1, r3, #10
 8007a5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a5e:	0290      	lsls	r0, r2, #10
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	f7f9 fbda 	bl	8001228 <__aeabi_uldivmod>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4613      	mov	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	3301      	adds	r3, #1
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	60bb      	str	r3, [r7, #8]
      break;
 8007a96:	e002      	b.n	8007a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <HAL_RCC_GetSysClockFreq+0x164>)
 8007a9a:	60bb      	str	r3, [r7, #8]
      break;
 8007a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	017d7840 	.word	0x017d7840

08007ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007aba:	681b      	ldr	r3, [r3, #0]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	2000021c 	.word	0x2000021c

08007ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d14c      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007aec:	4b6d      	ldr	r3, [pc, #436]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af2:	f7fc ffbb 	bl	8004a6c <HAL_GetTick>
 8007af6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007afa:	f7fc ffb7 	bl	8004a6c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e0c7      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b0c:	4b66      	ldr	r3, [pc, #408]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	fa92 f2a2 	rbit	r2, r2
 8007b28:	613a      	str	r2, [r7, #16]
  return result;
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	fab2 f282 	clz	r2, r2
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	fa03 f202 	lsl.w	r2, r3, r2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8007b3e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	fa91 f1a1 	rbit	r1, r1
 8007b46:	61b9      	str	r1, [r7, #24]
  return result;
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	fab1 f181 	clz	r1, r1
 8007b4e:	b2c9      	uxtb	r1, r1
 8007b50:	408b      	lsls	r3, r1
 8007b52:	4955      	ldr	r1, [pc, #340]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b5a:	4b52      	ldr	r3, [pc, #328]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b60:	f7fc ff84 	bl	8004a6c <HAL_GetTick>
 8007b64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b68:	f7fc ff80 	bl	8004a6c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e090      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8083 	beq.w	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	4b43      	ldr	r3, [pc, #268]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	4a42      	ldr	r2, [pc, #264]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba4:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bb0:	4b3e      	ldr	r3, [pc, #248]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3d      	ldr	r2, [pc, #244]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bba:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bbc:	f7fc ff56 	bl	8004a6c <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bc4:	f7fc ff52 	bl	8004a6c <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e062      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bd6:	4b35      	ldr	r3, [pc, #212]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007be2:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bea:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d02f      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfa:	6a3a      	ldr	r2, [r7, #32]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d028      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c00:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c08:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c16:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c1c:	4b22      	ldr	r3, [pc, #136]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d114      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c28:	f7fc ff20 	bl	8004a6c <HAL_GetTick>
 8007c2c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c2e:	e00a      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c30:	f7fc ff1c 	bl	8004a6c <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e02a      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0ee      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5e:	d10d      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c74:	490c      	ldr	r1, [pc, #48]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	608b      	str	r3, [r1, #8]
 8007c7a:	e005      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c86:	6093      	str	r3, [r2, #8]
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c94:	4904      	ldr	r1, [pc, #16]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	; 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	42470068 	.word	0x42470068
 8007ca8:	40023800 	.word	0x40023800
 8007cac:	40007000 	.word	0x40007000
 8007cb0:	42470e40 	.word	0x42470e40

08007cb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e07c      	b.n	8007dc0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7f5b      	ldrb	r3, [r3, #29]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fc fb0c 	bl	80042f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	22ca      	movs	r2, #202	; 0xca
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2253      	movs	r2, #83	; 0x53
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb8d 	bl	8008412 <RTC_EnterInitMode>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	22ff      	movs	r2, #255	; 0xff
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2204      	movs	r2, #4
 8007d0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e057      	b.n	8007dc0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6899      	ldr	r1, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68d2      	ldr	r2, [r2, #12]
 8007d4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6919      	ldr	r1, [r3, #16]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	041a      	lsls	r2, r3, #16
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d6e:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb26 	bl	80083c2 <HAL_RTC_WaitForSynchro>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2204      	movs	r2, #4
 8007d88:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e018      	b.n	8007dc0 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	22ff      	movs	r2, #255	; 0xff
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
  }
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	7f1b      	ldrb	r3, [r3, #28]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_RTC_SetTime+0x1c>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0a3      	b.n	8007f2c <HAL_RTC_SetTime+0x164>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2202      	movs	r2, #2
 8007dee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d126      	bne.n	8007e44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fb2b 	bl	800846a <RTC_ByteToBcd2>
 8007e14:	4603      	mov	r3, r0
 8007e16:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fb24 	bl	800846a <RTC_ByteToBcd2>
 8007e22:	4603      	mov	r3, r0
 8007e24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e26:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	789b      	ldrb	r3, [r3, #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fb1c 	bl	800846a <RTC_ByteToBcd2>
 8007e32:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e34:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	78db      	ldrb	r3, [r3, #3]
 8007e3c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e018      	b.n	8007e76 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e64:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e6a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	78db      	ldrb	r3, [r3, #3]
 8007e70:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	22ca      	movs	r2, #202	; 0xca
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2253      	movs	r2, #83	; 0x53
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fac3 	bl	8008412 <RTC_EnterInitMode>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	22ff      	movs	r2, #255	; 0xff
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e040      	b.n	8007f2c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007eb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007eb8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ec8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6899      	ldr	r1, [r3, #8]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef0:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fa65 	bl	80083c2 <HAL_RTC_WaitForSynchro>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	22ff      	movs	r2, #255	; 0xff
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e00a      	b.n	8007f2c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	22ff      	movs	r2, #255	; 0xff
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
  }
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}

08007f34 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007f4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007f52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11a      	bne.n	8007fce <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fa81 	bl	80084a4 <RTC_Bcd2ToByte>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fa78 	bl	80084a4 <RTC_Bcd2ToByte>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fa6f 	bl	80084a4 <RTC_Bcd2ToByte>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7f1b      	ldrb	r3, [r3, #28]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_RTC_SetDate+0x1c>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e08d      	b.n	8008110 <HAL_RTC_SetDate+0x138>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10e      	bne.n	8008024 <HAL_RTC_SetDate+0x4c>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	b2db      	uxtb	r3, r3
 800801c:	330a      	adds	r3, #10
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11c      	bne.n	8008064 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fa1b 	bl	800846a <RTC_ByteToBcd2>
 8008034:	4603      	mov	r3, r0
 8008036:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fa14 	bl	800846a <RTC_ByteToBcd2>
 8008042:	4603      	mov	r3, r0
 8008044:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008046:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	789b      	ldrb	r3, [r3, #2]
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fa0c 	bl	800846a <RTC_ByteToBcd2>
 8008052:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008054:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	e00e      	b.n	8008082 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	78db      	ldrb	r3, [r3, #3]
 8008068:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008070:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008076:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	22ca      	movs	r2, #202	; 0xca
 8008088:	625a      	str	r2, [r3, #36]	; 0x24
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2253      	movs	r2, #83	; 0x53
 8008090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f9bd 	bl	8008412 <RTC_EnterInitMode>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	22ff      	movs	r2, #255	; 0xff
 80080a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2204      	movs	r2, #4
 80080aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e02c      	b.n	8008110 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d4:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f973 	bl	80083c2 <HAL_RTC_WaitForSynchro>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2204      	movs	r2, #4
 80080ee:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e00a      	b.n	8008110 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	22ff      	movs	r2, #255	; 0xff
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800810e:	2300      	movs	r3, #0
  }
}
 8008110:	4618      	mov	r0, r3
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	bd90      	pop	{r4, r7, pc}

08008118 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008132:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008136:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	0c1b      	lsrs	r3, r3, #16
 800813c:	b2da      	uxtb	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800815a:	b2da      	uxtb	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	0b5b      	lsrs	r3, r3, #13
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	b2da      	uxtb	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d11a      	bne.n	80081ac <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	78db      	ldrb	r3, [r3, #3]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f992 	bl	80084a4 <RTC_Bcd2ToByte>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f989 	bl	80084a4 <RTC_Bcd2ToByte>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f980 	bl	80084a4 <RTC_Bcd2ToByte>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80081b6:	b590      	push	{r4, r7, lr}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	7f1b      	ldrb	r3, [r3, #28]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_RTC_SetAlarm+0x20>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e0f1      	b.n	80083ba <HAL_RTC_SetAlarm+0x204>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2202      	movs	r2, #2
 80081e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d136      	bne.n	8008256 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f932 	bl	800846a <RTC_ByteToBcd2>
 8008206:	4603      	mov	r3, r0
 8008208:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f92b 	bl	800846a <RTC_ByteToBcd2>
 8008214:	4603      	mov	r3, r0
 8008216:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008218:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	789b      	ldrb	r3, [r3, #2]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f923 	bl	800846a <RTC_ByteToBcd2>
 8008224:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008226:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	78db      	ldrb	r3, [r3, #3]
 800822e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008230:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f916 	bl	800846a <RTC_ByteToBcd2>
 800823e:	4603      	mov	r3, r0
 8008240:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008242:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800824a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	e022      	b.n	800829c <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008276:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800827c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008284:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	7d1b      	ldrb	r3, [r3, #20]
 800828a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800828c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008292:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	22ca      	movs	r2, #202	; 0xca
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2253      	movs	r2, #83	; 0x53
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b4:	d13b      	bne.n	800832e <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082c4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082d4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082d6:	f7fc fbc9 	bl	8004a6c <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082dc:	e013      	b.n	8008306 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082de:	f7fc fbc5 	bl	8004a6c <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ec:	d90b      	bls.n	8008306 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	22ff      	movs	r2, #255	; 0xff
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2203      	movs	r2, #3
 80082fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e059      	b.n	80083ba <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0e4      	beq.n	80082de <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	e03a      	b.n	80083a4 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800833c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800834e:	f7fc fb8d 	bl	8004a6c <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008354:	e013      	b.n	800837e <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008356:	f7fc fb89 	bl	8004a6c <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008364:	d90b      	bls.n	800837e <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	22ff      	movs	r2, #255	; 0xff
 800836c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2203      	movs	r2, #3
 8008372:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e01d      	b.n	80083ba <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0e4      	beq.n	8008356 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	22ff      	movs	r2, #255	; 0xff
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}

080083c2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083dc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083de:	f7fc fb45 	bl	8004a6c <HAL_GetTick>
 80083e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083e4:	e009      	b.n	80083fa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083e6:	f7fc fb41 	bl	8004a6c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083f4:	d901      	bls.n	80083fa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e007      	b.n	800840a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0ee      	beq.n	80083e6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d119      	bne.n	8008460 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f04f 32ff 	mov.w	r2, #4294967295
 8008434:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008436:	f7fc fb19 	bl	8004a6c <HAL_GetTick>
 800843a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800843c:	e009      	b.n	8008452 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800843e:	f7fc fb15 	bl	8004a6c <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800844c:	d901      	bls.n	8008452 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e007      	b.n	8008462 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0ee      	beq.n	800843e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	4603      	mov	r3, r0
 8008472:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8008478:	e005      	b.n	8008486 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	3b0a      	subs	r3, #10
 8008484:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	2b09      	cmp	r3, #9
 800848a:	d8f6      	bhi.n	800847a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	b2da      	uxtb	r2, r3
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	4313      	orrs	r3, r2
 8008498:	b2db      	uxtb	r3, r3
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	091b      	lsrs	r3, r3, #4
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4413      	add	r3, r2
 80084d2:	b2db      	uxtb	r3, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	bc80      	pop	{r7}
 80084dc:	4770      	bx	lr

080084de <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7f1b      	ldrb	r3, [r3, #28]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e081      	b.n	80085fe <HAL_RTCEx_SetWakeUpTimer+0x120>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2202      	movs	r2, #2
 8008504:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	22ca      	movs	r2, #202	; 0xca
 800850c:	625a      	str	r2, [r3, #36]	; 0x24
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2253      	movs	r2, #83	; 0x53
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01e      	beq.n	8008562 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8008524:	f7fc faa2 	bl	8004a6c <HAL_GetTick>
 8008528:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800852a:	e013      	b.n	8008554 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800852c:	f7fc fa9e 	bl	8004a6c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800853a:	d90b      	bls.n	8008554 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	22ff      	movs	r2, #255	; 0xff
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2203      	movs	r2, #3
 8008548:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e054      	b.n	80085fe <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e4      	bne.n	800852c <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008570:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008572:	f7fc fa7b 	bl	8004a6c <HAL_GetTick>
 8008576:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008578:	e013      	b.n	80085a2 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800857a:	f7fc fa77 	bl	8004a6c <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008588:	d90b      	bls.n	80085a2 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	22ff      	movs	r2, #255	; 0xff
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2203      	movs	r2, #3
 8008596:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e02d      	b.n	80085fe <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0e4      	beq.n	800857a <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0207 	bic.w	r2, r2, #7
 80085be:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6899      	ldr	r1, [r3, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e041      	b.n	800869c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fb fe77 	bl	8004320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f000 fb35 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d001      	beq.n	80086bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e046      	b.n	800874a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a22      	ldr	r2, [pc, #136]	; (8008754 <HAL_TIM_Base_Start+0xb0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d022      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d6:	d01d      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a1e      	ldr	r2, [pc, #120]	; (8008758 <HAL_TIM_Base_Start+0xb4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d018      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1d      	ldr	r2, [pc, #116]	; (800875c <HAL_TIM_Base_Start+0xb8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <HAL_TIM_Base_Start+0xbc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00e      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1a      	ldr	r2, [pc, #104]	; (8008764 <HAL_TIM_Base_Start+0xc0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_TIM_Base_Start+0xc4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_TIM_Base_Start+0x70>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a17      	ldr	r2, [pc, #92]	; (800876c <HAL_TIM_Base_Start+0xc8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d111      	bne.n	8008738 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b06      	cmp	r3, #6
 8008724:	d010      	beq.n	8008748 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f042 0201 	orr.w	r2, r2, #1
 8008734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008736:	e007      	b.n	8008748 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr
 8008754:	40010000 	.word	0x40010000
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40010400 	.word	0x40010400
 8008768:	40014000 	.word	0x40014000
 800876c:	40001800 	.word	0x40001800

08008770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e041      	b.n	8008806 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f839 	bl	800880e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f000 fa80 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr

08008820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <HAL_TIM_PWM_Start+0x24>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	e022      	b.n	800888a <HAL_TIM_PWM_Start+0x6a>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b04      	cmp	r3, #4
 8008848:	d109      	bne.n	800885e <HAL_TIM_PWM_Start+0x3e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b01      	cmp	r3, #1
 8008854:	bf14      	ite	ne
 8008856:	2301      	movne	r3, #1
 8008858:	2300      	moveq	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	e015      	b.n	800888a <HAL_TIM_PWM_Start+0x6a>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b08      	cmp	r3, #8
 8008862:	d109      	bne.n	8008878 <HAL_TIM_PWM_Start+0x58>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	bf14      	ite	ne
 8008870:	2301      	movne	r3, #1
 8008872:	2300      	moveq	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	e008      	b.n	800888a <HAL_TIM_PWM_Start+0x6a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e07c      	b.n	800898c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <HAL_TIM_PWM_Start+0x82>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088a0:	e013      	b.n	80088ca <HAL_TIM_PWM_Start+0xaa>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d104      	bne.n	80088b2 <HAL_TIM_PWM_Start+0x92>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088b0:	e00b      	b.n	80088ca <HAL_TIM_PWM_Start+0xaa>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d104      	bne.n	80088c2 <HAL_TIM_PWM_Start+0xa2>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c0:	e003      	b.n	80088ca <HAL_TIM_PWM_Start+0xaa>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fcce 	bl	8009274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a2d      	ldr	r2, [pc, #180]	; (8008994 <HAL_TIM_PWM_Start+0x174>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <HAL_TIM_PWM_Start+0xcc>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a2c      	ldr	r2, [pc, #176]	; (8008998 <HAL_TIM_PWM_Start+0x178>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d101      	bne.n	80088f0 <HAL_TIM_PWM_Start+0xd0>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <HAL_TIM_PWM_Start+0xd2>
 80088f0:	2300      	movs	r3, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a22      	ldr	r2, [pc, #136]	; (8008994 <HAL_TIM_PWM_Start+0x174>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d022      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008918:	d01d      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1f      	ldr	r2, [pc, #124]	; (800899c <HAL_TIM_PWM_Start+0x17c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d018      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <HAL_TIM_PWM_Start+0x180>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d013      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <HAL_TIM_PWM_Start+0x184>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00e      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a16      	ldr	r2, [pc, #88]	; (8008998 <HAL_TIM_PWM_Start+0x178>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d009      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <HAL_TIM_PWM_Start+0x188>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d004      	beq.n	8008956 <HAL_TIM_PWM_Start+0x136>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a16      	ldr	r2, [pc, #88]	; (80089ac <HAL_TIM_PWM_Start+0x18c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d111      	bne.n	800897a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b06      	cmp	r3, #6
 8008966:	d010      	beq.n	800898a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0201 	orr.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	e007      	b.n	800898a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	40010000 	.word	0x40010000
 8008998:	40010400 	.word	0x40010400
 800899c:	40000400 	.word	0x40000400
 80089a0:	40000800 	.word	0x40000800
 80089a4:	40000c00 	.word	0x40000c00
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40001800 	.word	0x40001800

080089b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e0ac      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x174>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b0c      	cmp	r3, #12
 80089d6:	f200 809f 	bhi.w	8008b18 <HAL_TIM_PWM_ConfigChannel+0x168>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a15 	.word	0x08008a15
 80089e4:	08008b19 	.word	0x08008b19
 80089e8:	08008b19 	.word	0x08008b19
 80089ec:	08008b19 	.word	0x08008b19
 80089f0:	08008a55 	.word	0x08008a55
 80089f4:	08008b19 	.word	0x08008b19
 80089f8:	08008b19 	.word	0x08008b19
 80089fc:	08008b19 	.word	0x08008b19
 8008a00:	08008a97 	.word	0x08008a97
 8008a04:	08008b19 	.word	0x08008b19
 8008a08:	08008b19 	.word	0x08008b19
 8008a0c:	08008b19 	.word	0x08008b19
 8008a10:	08008ad7 	.word	0x08008ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f9e8 	bl	8008df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0208 	orr.w	r2, r2, #8
 8008a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6999      	ldr	r1, [r3, #24]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	619a      	str	r2, [r3, #24]
      break;
 8008a52:	e062      	b.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fa38 	bl	8008ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6999      	ldr	r1, [r3, #24]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	021a      	lsls	r2, r3, #8
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	619a      	str	r2, [r3, #24]
      break;
 8008a94:	e041      	b.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fa8b 	bl	8008fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0208 	orr.w	r2, r2, #8
 8008ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0204 	bic.w	r2, r2, #4
 8008ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69d9      	ldr	r1, [r3, #28]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	61da      	str	r2, [r3, #28]
      break;
 8008ad4:	e021      	b.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fadf 	bl	80090a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69da      	ldr	r2, [r3, #28]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69d9      	ldr	r1, [r3, #28]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	021a      	lsls	r2, r3, #8
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	61da      	str	r2, [r3, #28]
      break;
 8008b16:	e000      	b.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_TIM_ConfigClockSource+0x18>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e0b3      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x180>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b7c:	d03e      	beq.n	8008bfc <HAL_TIM_ConfigClockSource+0xd0>
 8008b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b82:	f200 8087 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8a:	f000 8085 	beq.w	8008c98 <HAL_TIM_ConfigClockSource+0x16c>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	d87f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008b94:	2b70      	cmp	r3, #112	; 0x70
 8008b96:	d01a      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xa2>
 8008b98:	2b70      	cmp	r3, #112	; 0x70
 8008b9a:	d87b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008b9c:	2b60      	cmp	r3, #96	; 0x60
 8008b9e:	d050      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x116>
 8008ba0:	2b60      	cmp	r3, #96	; 0x60
 8008ba2:	d877      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008ba4:	2b50      	cmp	r3, #80	; 0x50
 8008ba6:	d03c      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0xf6>
 8008ba8:	2b50      	cmp	r3, #80	; 0x50
 8008baa:	d873      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008bac:	2b40      	cmp	r3, #64	; 0x40
 8008bae:	d058      	beq.n	8008c62 <HAL_TIM_ConfigClockSource+0x136>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d86f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008bb4:	2b30      	cmp	r3, #48	; 0x30
 8008bb6:	d064      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x156>
 8008bb8:	2b30      	cmp	r3, #48	; 0x30
 8008bba:	d86b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d060      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x156>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d867      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d05c      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x156>
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	d05a      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008bcc:	e062      	b.n	8008c94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6899      	ldr	r1, [r3, #8]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f000 fb2a 	bl	8009236 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	609a      	str	r2, [r3, #8]
      break;
 8008bfa:	e04e      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6899      	ldr	r1, [r3, #8]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f000 fb13 	bl	8009236 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c1e:	609a      	str	r2, [r3, #8]
      break;
 8008c20:	e03b      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6859      	ldr	r1, [r3, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f000 fa8a 	bl	8009148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2150      	movs	r1, #80	; 0x50
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fae1 	bl	8009202 <TIM_ITRx_SetConfig>
      break;
 8008c40:	e02b      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f000 faa8 	bl	80091a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2160      	movs	r1, #96	; 0x60
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fad1 	bl	8009202 <TIM_ITRx_SetConfig>
      break;
 8008c60:	e01b      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f000 fa6a 	bl	8009148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fac1 	bl	8009202 <TIM_ITRx_SetConfig>
      break;
 8008c80:	e00b      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f000 fab8 	bl	8009202 <TIM_ITRx_SetConfig>
        break;
 8008c92:	e002      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c94:	bf00      	nop
 8008c96:	e000      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a3f      	ldr	r2, [pc, #252]	; (8008dc4 <TIM_Base_SetConfig+0x110>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d013      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a3c      	ldr	r2, [pc, #240]	; (8008dc8 <TIM_Base_SetConfig+0x114>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a3b      	ldr	r2, [pc, #236]	; (8008dcc <TIM_Base_SetConfig+0x118>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a3a      	ldr	r2, [pc, #232]	; (8008dd0 <TIM_Base_SetConfig+0x11c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a39      	ldr	r2, [pc, #228]	; (8008dd4 <TIM_Base_SetConfig+0x120>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d108      	bne.n	8008d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2e      	ldr	r2, [pc, #184]	; (8008dc4 <TIM_Base_SetConfig+0x110>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d02b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d14:	d027      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a2b      	ldr	r2, [pc, #172]	; (8008dc8 <TIM_Base_SetConfig+0x114>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d023      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2a      	ldr	r2, [pc, #168]	; (8008dcc <TIM_Base_SetConfig+0x118>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a29      	ldr	r2, [pc, #164]	; (8008dd0 <TIM_Base_SetConfig+0x11c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d01b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a28      	ldr	r2, [pc, #160]	; (8008dd4 <TIM_Base_SetConfig+0x120>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d017      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a27      	ldr	r2, [pc, #156]	; (8008dd8 <TIM_Base_SetConfig+0x124>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a26      	ldr	r2, [pc, #152]	; (8008ddc <TIM_Base_SetConfig+0x128>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a25      	ldr	r2, [pc, #148]	; (8008de0 <TIM_Base_SetConfig+0x12c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a24      	ldr	r2, [pc, #144]	; (8008de4 <TIM_Base_SetConfig+0x130>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a23      	ldr	r2, [pc, #140]	; (8008de8 <TIM_Base_SetConfig+0x134>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a22      	ldr	r2, [pc, #136]	; (8008dec <TIM_Base_SetConfig+0x138>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <TIM_Base_SetConfig+0x110>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a0b      	ldr	r2, [pc, #44]	; (8008dd4 <TIM_Base_SetConfig+0x120>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d103      	bne.n	8008db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	615a      	str	r2, [r3, #20]
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40000400 	.word	0x40000400
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40000c00 	.word	0x40000c00
 8008dd4:	40010400 	.word	0x40010400
 8008dd8:	40014000 	.word	0x40014000
 8008ddc:	40014400 	.word	0x40014400
 8008de0:	40014800 	.word	0x40014800
 8008de4:	40001800 	.word	0x40001800
 8008de8:	40001c00 	.word	0x40001c00
 8008dec:	40002000 	.word	0x40002000

08008df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f023 0201 	bic.w	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0302 	bic.w	r3, r3, #2
 8008e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a20      	ldr	r2, [pc, #128]	; (8008ec8 <TIM_OC1_SetConfig+0xd8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d003      	beq.n	8008e54 <TIM_OC1_SetConfig+0x64>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a1f      	ldr	r2, [pc, #124]	; (8008ecc <TIM_OC1_SetConfig+0xdc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d10c      	bne.n	8008e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0308 	bic.w	r3, r3, #8
 8008e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f023 0304 	bic.w	r3, r3, #4
 8008e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <TIM_OC1_SetConfig+0xd8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d003      	beq.n	8008e7e <TIM_OC1_SetConfig+0x8e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a14      	ldr	r2, [pc, #80]	; (8008ecc <TIM_OC1_SetConfig+0xdc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d111      	bne.n	8008ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	621a      	str	r2, [r3, #32]
}
 8008ebc:	bf00      	nop
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40010400 	.word	0x40010400

08008ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0210 	bic.w	r2, r3, #16
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f023 0320 	bic.w	r3, r3, #32
 8008f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a21      	ldr	r2, [pc, #132]	; (8008fb0 <TIM_OC2_SetConfig+0xe0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <TIM_OC2_SetConfig+0x68>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a20      	ldr	r2, [pc, #128]	; (8008fb4 <TIM_OC2_SetConfig+0xe4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d10d      	bne.n	8008f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <TIM_OC2_SetConfig+0xe0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_OC2_SetConfig+0x94>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <TIM_OC2_SetConfig+0xe4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d113      	bne.n	8008f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr
 8008fb0:	40010000 	.word	0x40010000
 8008fb4:	40010400 	.word	0x40010400

08008fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a21      	ldr	r2, [pc, #132]	; (8009098 <TIM_OC3_SetConfig+0xe0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d003      	beq.n	800901e <TIM_OC3_SetConfig+0x66>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a20      	ldr	r2, [pc, #128]	; (800909c <TIM_OC3_SetConfig+0xe4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d10d      	bne.n	800903a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a16      	ldr	r2, [pc, #88]	; (8009098 <TIM_OC3_SetConfig+0xe0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_OC3_SetConfig+0x92>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a15      	ldr	r2, [pc, #84]	; (800909c <TIM_OC3_SetConfig+0xe4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d113      	bne.n	8009072 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	011b      	lsls	r3, r3, #4
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	621a      	str	r2, [r3, #32]
}
 800908c:	bf00      	nop
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40010000 	.word	0x40010000
 800909c:	40010400 	.word	0x40010400

080090a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	031b      	lsls	r3, r3, #12
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a11      	ldr	r2, [pc, #68]	; (8009140 <TIM_OC4_SetConfig+0xa0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d003      	beq.n	8009108 <TIM_OC4_SetConfig+0x68>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a10      	ldr	r2, [pc, #64]	; (8009144 <TIM_OC4_SetConfig+0xa4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d109      	bne.n	800911c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800910e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	019b      	lsls	r3, r3, #6
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	621a      	str	r2, [r3, #32]
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr
 8009140:	40010000 	.word	0x40010000
 8009144:	40010400 	.word	0x40010400

08009148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	f023 0201 	bic.w	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f023 030a 	bic.w	r3, r3, #10
 8009184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f023 0210 	bic.w	r2, r3, #16
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	031b      	lsls	r3, r3, #12
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	621a      	str	r2, [r3, #32]
}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr

08009202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	f043 0307 	orr.w	r3, r3, #7
 8009224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	609a      	str	r2, [r3, #8]
}
 800922c:	bf00      	nop
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr

08009236 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009236:	b480      	push	{r7}
 8009238:	b087      	sub	sp, #28
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009250:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	021a      	lsls	r2, r3, #8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	431a      	orrs	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	4313      	orrs	r3, r2
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	609a      	str	r2, [r3, #8]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 031f 	and.w	r3, r3, #31
 8009286:	2201      	movs	r2, #1
 8009288:	fa02 f303 	lsl.w	r3, r2, r3
 800928c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1a      	ldr	r2, [r3, #32]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	43db      	mvns	r3, r3
 8009296:	401a      	ands	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1a      	ldr	r2, [r3, #32]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 031f 	and.w	r3, r3, #31
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	431a      	orrs	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr

080092bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e05a      	b.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a20      	ldr	r2, [pc, #128]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d022      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009320:	d01d      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1c      	ldr	r2, [pc, #112]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d018      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1a      	ldr	r2, [pc, #104]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a19      	ldr	r2, [pc, #100]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00e      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a17      	ldr	r2, [pc, #92]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d009      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a16      	ldr	r2, [pc, #88]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a14      	ldr	r2, [pc, #80]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d10c      	bne.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4313      	orrs	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr
 8009394:	40010000 	.word	0x40010000
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40001800 	.word	0x40001800

080093b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e03d      	b.n	8009448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr

08009452 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009452:	b084      	sub	sp, #16
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	f107 001c 	add.w	r0, r7, #28
 8009460:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	2b01      	cmp	r3, #1
 8009468:	d122      	bne.n	80094b0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800947e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d105      	bne.n	80094a4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f98f 	bl	80097c8 <USB_CoreReset>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e010      	b.n	80094d2 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f983 	bl	80097c8 <USB_CoreReset>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10b      	bne.n	80094f0 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f043 0206 	orr.w	r2, r3, #6
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f043 0220 	orr.w	r2, r3, #32
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094fc:	b004      	add	sp, #16
 80094fe:	4770      	bx	lr

08009500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f043 0201 	orr.w	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	bc80      	pop	{r7}
 800951e:	4770      	bx	lr

08009520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f023 0201 	bic.w	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr

08009540 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d115      	bne.n	800958e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800956e:	2001      	movs	r0, #1
 8009570:	f7fb fa86 	bl	8004a80 <HAL_Delay>
      ms++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f916 	bl	80097ac <USB_GetMode>
 8009580:	4603      	mov	r3, r0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d01e      	beq.n	80095c4 <USB_SetCurrentMode+0x84>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b31      	cmp	r3, #49	; 0x31
 800958a:	d9f0      	bls.n	800956e <USB_SetCurrentMode+0x2e>
 800958c:	e01a      	b.n	80095c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d115      	bne.n	80095c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095a0:	2001      	movs	r0, #1
 80095a2:	f7fb fa6d 	bl	8004a80 <HAL_Delay>
      ms++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8fd 	bl	80097ac <USB_GetMode>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <USB_SetCurrentMode+0x84>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b31      	cmp	r3, #49	; 0x31
 80095bc:	d9f0      	bls.n	80095a0 <USB_SetCurrentMode+0x60>
 80095be:	e001      	b.n	80095c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e005      	b.n	80095d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b32      	cmp	r3, #50	; 0x32
 80095c8:	d101      	bne.n	80095ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	019b      	lsls	r3, r3, #6
 80095ea:	f043 0220 	orr.w	r2, r3, #32
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3301      	adds	r3, #1
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4a08      	ldr	r2, [pc, #32]	; (800961c <USB_FlushTxFifo+0x44>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d901      	bls.n	8009604 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e006      	b.n	8009612 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b20      	cmp	r3, #32
 800960e:	d0f0      	beq.n	80095f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	00030d40 	.word	0x00030d40

08009620 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2210      	movs	r2, #16
 8009630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a08      	ldr	r2, [pc, #32]	; (800965c <USB_FlushRxFifo+0x3c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d901      	bls.n	8009644 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e006      	b.n	8009652 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b10      	cmp	r3, #16
 800964e:	d0f0      	beq.n	8009632 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr
 800965c:	00030d40 	.word	0x00030d40

08009660 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009660:	b480      	push	{r7}
 8009662:	b089      	sub	sp, #36	; 0x24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4611      	mov	r1, r2
 800966c:	461a      	mov	r2, r3
 800966e:	460b      	mov	r3, r1
 8009670:	71fb      	strb	r3, [r7, #7]
 8009672:	4613      	mov	r3, r2
 8009674:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800967e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d123      	bne.n	80096ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009686:	88bb      	ldrh	r3, [r7, #4]
 8009688:	3303      	adds	r3, #3
 800968a:	089b      	lsrs	r3, r3, #2
 800968c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800968e:	2300      	movs	r3, #0
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	e018      	b.n	80096c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	031a      	lsls	r2, r3, #12
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	4413      	add	r3, r2
 800969c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a0:	461a      	mov	r2, r3
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	3301      	adds	r3, #1
 80096ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3301      	adds	r3, #1
 80096b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	3301      	adds	r3, #1
 80096b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	3301      	adds	r3, #1
 80096be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3e2      	bcc.n	8009694 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3724      	adds	r7, #36	; 0x24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096da:	b480      	push	{r7}
 80096dc:	b08b      	sub	sp, #44	; 0x2c
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	089b      	lsrs	r3, r3, #2
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009700:	2300      	movs	r3, #0
 8009702:	623b      	str	r3, [r7, #32]
 8009704:	e014      	b.n	8009730 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	601a      	str	r2, [r3, #0]
    pDest++;
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	3301      	adds	r3, #1
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	3301      	adds	r3, #1
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	3301      	adds	r3, #1
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	3301      	adds	r3, #1
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	3301      	adds	r3, #1
 800972e:	623b      	str	r3, [r7, #32]
 8009730:	6a3a      	ldr	r2, [r7, #32]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	429a      	cmp	r2, r3
 8009736:	d3e6      	bcc.n	8009706 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009738:	8bfb      	ldrh	r3, [r7, #30]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01e      	beq.n	800977c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009748:	461a      	mov	r2, r3
 800974a:	f107 0310 	add.w	r3, r7, #16
 800974e:	6812      	ldr	r2, [r2, #0]
 8009750:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	fa22 f303 	lsr.w	r3, r2, r3
 800975e:	b2da      	uxtb	r2, r3
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	701a      	strb	r2, [r3, #0]
      i++;
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	3301      	adds	r3, #1
 8009768:	623b      	str	r3, [r7, #32]
      pDest++;
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	3301      	adds	r3, #1
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009770:	8bfb      	ldrh	r3, [r7, #30]
 8009772:	3b01      	subs	r3, #1
 8009774:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009776:	8bfb      	ldrh	r3, [r7, #30]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1ea      	bne.n	8009752 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800977e:	4618      	mov	r0, r3
 8009780:	372c      	adds	r7, #44	; 0x2c
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr

08009788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4013      	ands	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097a0:	68fb      	ldr	r3, [r7, #12]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bc80      	pop	{r7}
 80097aa:	4770      	bx	lr

080097ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	f003 0301 	and.w	r3, r3, #1
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr
	...

080097c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4a12      	ldr	r2, [pc, #72]	; (8009828 <USB_CoreReset+0x60>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e01b      	b.n	800981e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	daf2      	bge.n	80097d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f043 0201 	orr.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a08      	ldr	r2, [pc, #32]	; (8009828 <USB_CoreReset+0x60>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d901      	bls.n	8009810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e006      	b.n	800981e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	d0f0      	beq.n	80097fe <USB_CoreReset+0x36>

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr
 8009828:	00030d40 	.word	0x00030d40

0800982c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800982c:	b084      	sub	sp, #16
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	f107 001c 	add.w	r0, r7, #28
 800983a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009848:	461a      	mov	r2, r3
 800984a:	2300      	movs	r3, #0
 800984c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d018      	beq.n	80098b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	2b01      	cmp	r3, #1
 8009882:	d10a      	bne.n	800989a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009892:	f043 0304 	orr.w	r3, r3, #4
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	e014      	b.n	80098c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098a8:	f023 0304 	bic.w	r3, r3, #4
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	e009      	b.n	80098c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098be:	f023 0304 	bic.w	r3, r3, #4
 80098c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80098c4:	2110      	movs	r1, #16
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fe86 	bl	80095d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff fea7 	bl	8009620 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e015      	b.n	8009904 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e4:	461a      	mov	r2, r3
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f8:	461a      	mov	r2, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3301      	adds	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d3e5      	bcc.n	80098d8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800992c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a13      	ldr	r2, [pc, #76]	; (8009980 <USB_HostInit+0x154>)
 8009932:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a13      	ldr	r2, [pc, #76]	; (8009984 <USB_HostInit+0x158>)
 8009938:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800993c:	e009      	b.n	8009952 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2280      	movs	r2, #128	; 0x80
 8009942:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a10      	ldr	r2, [pc, #64]	; (8009988 <USB_HostInit+0x15c>)
 8009948:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a0f      	ldr	r2, [pc, #60]	; (800998c <USB_HostInit+0x160>)
 800994e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	2b00      	cmp	r3, #0
 8009956:	d105      	bne.n	8009964 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f043 0210 	orr.w	r2, r3, #16
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699a      	ldr	r2, [r3, #24]
 8009968:	4b09      	ldr	r3, [pc, #36]	; (8009990 <USB_HostInit+0x164>)
 800996a:	4313      	orrs	r3, r2
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800997c:	b004      	add	sp, #16
 800997e:	4770      	bx	lr
 8009980:	01000200 	.word	0x01000200
 8009984:	00e00300 	.word	0x00e00300
 8009988:	00600080 	.word	0x00600080
 800998c:	004000e0 	.word	0x004000e0
 8009990:	a3200008 	.word	0xa3200008

08009994 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80099cc:	4313      	orrs	r3, r2
 80099ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d107      	bne.n	80099e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099dc:	461a      	mov	r2, r3
 80099de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80099e2:	6053      	str	r3, [r2, #4]
 80099e4:	e009      	b.n	80099fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d106      	bne.n	80099fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099f2:	461a      	mov	r2, r3
 80099f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80099f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr

08009a06 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009a26:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a34:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009a36:	2064      	movs	r0, #100	; 0x64
 8009a38:	f7fb f822 	bl	8004a80 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a48:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009a4a:	200a      	movs	r0, #10
 8009a4c:	f7fb f818 	bl	8004a80 <HAL_Delay>

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009a7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <USB_DriveVbus+0x44>
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d106      	bne.n	8009a9e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a9c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa8:	d109      	bne.n	8009abe <USB_DriveVbus+0x64>
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009abc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bc80      	pop	{r7}
 8009ac8:	4770      	bx	lr

08009aca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	0c5b      	lsrs	r3, r3, #17
 8009ae8:	f003 0303 	and.w	r3, r3, #3
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr

08009af6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	b29b      	uxth	r3, r3
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc80      	pop	{r7}
 8009b14:	4770      	bx	lr
	...

08009b18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	461a      	mov	r2, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	70fb      	strb	r3, [r7, #3]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	70bb      	strb	r3, [r7, #2]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b46:	461a      	mov	r2, r3
 8009b48:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d87e      	bhi.n	8009c54 <USB_HC_Init+0x13c>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <USB_HC_Init+0x44>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b6d 	.word	0x08009b6d
 8009b60:	08009c17 	.word	0x08009c17
 8009b64:	08009b6d 	.word	0x08009b6d
 8009b68:	08009bd9 	.word	0x08009bd9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009b7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009b80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da10      	bge.n	8009baa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ba8:	e057      	b.n	8009c5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d051      	beq.n	8009c5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009bb6:	78fb      	ldrb	r3, [r7, #3]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009bd4:	60d3      	str	r3, [r2, #12]
      break;
 8009bd6:	e040      	b.n	8009c5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be4:	461a      	mov	r2, r3
 8009be6:	f240 639d 	movw	r3, #1693	; 0x69d
 8009bea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009bec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	da34      	bge.n	8009c5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	78fa      	ldrb	r2, [r7, #3]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009c14:	e023      	b.n	8009c5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c22:	461a      	mov	r2, r3
 8009c24:	f240 2325 	movw	r3, #549	; 0x225
 8009c28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009c2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da17      	bge.n	8009c62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	78fa      	ldrb	r2, [r7, #3]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009c50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009c52:	e006      	b.n	8009c62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	77fb      	strb	r3, [r7, #31]
      break;
 8009c58:	e004      	b.n	8009c64 <USB_HC_Init+0x14c>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e002      	b.n	8009c64 <USB_HC_Init+0x14c>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <USB_HC_Init+0x14c>
      break;
 8009c62:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	2101      	movs	r1, #1
 8009c74:	fa01 f303 	lsl.w	r3, r1, r3
 8009c78:	6939      	ldr	r1, [r7, #16]
 8009c7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	da03      	bge.n	8009c9e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c9a:	61bb      	str	r3, [r7, #24]
 8009c9c:	e001      	b.n	8009ca2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ff11 	bl	8009aca <USB_GetHostSpeed>
 8009ca8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d106      	bne.n	8009cc0 <USB_HC_Init+0x1a8>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d003      	beq.n	8009cc0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009cbc:	617b      	str	r3, [r7, #20]
 8009cbe:	e001      	b.n	8009cc4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009cc4:	787b      	ldrb	r3, [r7, #1]
 8009cc6:	059b      	lsls	r3, r3, #22
 8009cc8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ccc:	78bb      	ldrb	r3, [r7, #2]
 8009cce:	02db      	lsls	r3, r3, #11
 8009cd0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009cd4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cda:	049b      	lsls	r3, r3, #18
 8009cdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ce0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009ce2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ce8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	0159      	lsls	r1, r3, #5
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009d00:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009d02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d10f      	bne.n	8009d2a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	78fa      	ldrb	r2, [r7, #3]
 8009d1a:	0151      	lsls	r1, r2, #5
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	440a      	add	r2, r1
 8009d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d28:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08c      	sub	sp, #48	; 0x30
 8009d38:	af02      	add	r7, sp, #8
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d50:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d02d      	beq.n	8009dba <USB_HC_StartXfer+0x86>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	791b      	ldrb	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d129      	bne.n	8009dba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d117      	bne.n	8009d9c <USB_HC_StartXfer+0x68>
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	79db      	ldrb	r3, [r3, #7]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <USB_HC_StartXfer+0x48>
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	79db      	ldrb	r3, [r3, #7]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d10f      	bne.n	8009d9c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	6a3a      	ldr	r2, [r7, #32]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10b      	bne.n	8009dba <USB_HC_StartXfer+0x86>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	795b      	ldrb	r3, [r3, #5]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d107      	bne.n	8009dba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	4619      	mov	r1, r3
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fa2d 	bl	800a210 <USB_DoPing>
      return HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	e0f8      	b.n	8009fac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d018      	beq.n	8009df4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	8912      	ldrh	r2, [r2, #8]
 8009dca:	4413      	add	r3, r2
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	8912      	ldrh	r2, [r2, #8]
 8009dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009dd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009dda:	8b7b      	ldrh	r3, [r7, #26]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d90b      	bls.n	8009df8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009de0:	8b7b      	ldrh	r3, [r7, #26]
 8009de2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009de4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	8912      	ldrh	r2, [r2, #8]
 8009dea:	fb02 f203 	mul.w	r2, r2, r3
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	611a      	str	r2, [r3, #16]
 8009df2:	e001      	b.n	8009df8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009df4:	2301      	movs	r3, #1
 8009df6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	78db      	ldrb	r3, [r3, #3]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	8912      	ldrh	r2, [r2, #8]
 8009e06:	fb02 f203 	mul.w	r2, r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	611a      	str	r2, [r3, #16]
 8009e0e:	e003      	b.n	8009e18 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	695a      	ldr	r2, [r3, #20]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e22:	04d9      	lsls	r1, r3, #19
 8009e24:	4b63      	ldr	r3, [pc, #396]	; (8009fb4 <USB_HC_StartXfer+0x280>)
 8009e26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	7a9b      	ldrb	r3, [r3, #10]
 8009e2e:	075b      	lsls	r3, r3, #29
 8009e30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	0148      	lsls	r0, r1, #5
 8009e38:	6a39      	ldr	r1, [r7, #32]
 8009e3a:	4401      	add	r1, r0
 8009e3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	68d9      	ldr	r1, [r3, #12]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf0c      	ite	eq
 8009e6e:	2301      	moveq	r3, #1
 8009e70:	2300      	movne	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	0151      	lsls	r1, r2, #5
 8009e88:	6a3a      	ldr	r2, [r7, #32]
 8009e8a:	440a      	add	r2, r1
 8009e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	7e7b      	ldrb	r3, [r7, #25]
 8009ea6:	075b      	lsls	r3, r3, #29
 8009ea8:	69f9      	ldr	r1, [r7, #28]
 8009eaa:	0148      	lsls	r0, r1, #5
 8009eac:	6a39      	ldr	r1, [r7, #32]
 8009eae:	4401      	add	r1, r0
 8009eb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ece:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	e003      	b.n	8009eea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ee8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efe:	461a      	mov	r2, r3
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e04e      	b.n	8009fac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	78db      	ldrb	r3, [r3, #3]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d149      	bne.n	8009faa <USB_HC_StartXfer+0x276>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d045      	beq.n	8009faa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	79db      	ldrb	r3, [r3, #7]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d830      	bhi.n	8009f88 <USB_HC_StartXfer+0x254>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <USB_HC_StartXfer+0x1f8>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f3d 	.word	0x08009f3d
 8009f30:	08009f61 	.word	0x08009f61
 8009f34:	08009f3d 	.word	0x08009f3d
 8009f38:	08009f61 	.word	0x08009f61
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	3303      	adds	r3, #3
 8009f42:	089b      	lsrs	r3, r3, #2
 8009f44:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009f46:	8afa      	ldrh	r2, [r7, #22]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d91c      	bls.n	8009f8c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	f043 0220 	orr.w	r2, r3, #32
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f5e:	e015      	b.n	8009f8c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	3303      	adds	r3, #3
 8009f66:	089b      	lsrs	r3, r3, #2
 8009f68:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009f6a:	8afa      	ldrh	r2, [r7, #22]
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d90a      	bls.n	8009f90 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f86:	e003      	b.n	8009f90 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009f88:	bf00      	nop
 8009f8a:	e002      	b.n	8009f92 <USB_HC_StartXfer+0x25e>
        break;
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <USB_HC_StartXfer+0x25e>
        break;
 8009f90:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	68d9      	ldr	r1, [r3, #12]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	785a      	ldrb	r2, [r3, #1]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	9000      	str	r0, [sp, #0]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7ff fb5b 	bl	8009660 <USB_WritePacket>
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3728      	adds	r7, #40	; 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	1ff80000 	.word	0x1ff80000

08009fb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	b29b      	uxth	r3, r3
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b089      	sub	sp, #36	; 0x24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	0c9b      	lsrs	r3, r3, #18
 800a000:	f003 0303 	and.w	r3, r3, #3
 800a004:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	0fdb      	lsrs	r3, r3, #31
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b20      	cmp	r3, #32
 800a026:	d104      	bne.n	800a032 <USB_HC_Halt+0x5a>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	e0e8      	b.n	800a204 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <USB_HC_Halt+0x66>
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d173      	bne.n	800a126 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	4413      	add	r3, r2
 800a046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	0151      	lsls	r1, r2, #5
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	440a      	add	r2, r1
 800a054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a05c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	f040 80cb 	bne.w	800a202 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d143      	bne.n	800a100 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a096:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	0151      	lsls	r1, r2, #5
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	440a      	add	r2, r1
 800a0ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0d6:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0e4:	d81d      	bhi.n	800a122 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0fc:	d0ec      	beq.n	800a0d8 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0fe:	e080      	b.n	800a202 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	4413      	add	r3, r2
 800a108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	0151      	lsls	r1, r2, #5
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	440a      	add	r2, r1
 800a116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a11a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a11e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a120:	e06f      	b.n	800a202 <USB_HC_Halt+0x22a>
            break;
 800a122:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a124:	e06d      	b.n	800a202 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	015a      	lsls	r2, r3, #5
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	4413      	add	r3, r2
 800a12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	0151      	lsls	r1, r2, #5
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	440a      	add	r2, r1
 800a13c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a144:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d143      	bne.n	800a1de <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a174:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a194:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	0151      	lsls	r1, r2, #5
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	440a      	add	r2, r1
 800a1ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1b4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1c2:	d81d      	bhi.n	800a200 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1da:	d0ec      	beq.n	800a1b6 <USB_HC_Halt+0x1de>
 800a1dc:	e011      	b.n	800a202 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	e000      	b.n	800a202 <USB_HC_Halt+0x22a>
          break;
 800a200:	bf00      	nop
    }
  }

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3724      	adds	r7, #36	; 0x24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr
	...

0800a210 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a224:	2301      	movs	r3, #1
 800a226:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	04da      	lsls	r2, r3, #19
 800a22c:	4b14      	ldr	r3, [pc, #80]	; (800a280 <USB_DoPing+0x70>)
 800a22e:	4013      	ands	r3, r2
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	0151      	lsls	r1, r2, #5
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	440a      	add	r2, r1
 800a238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a23c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a240:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a258:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a260:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a26e:	461a      	mov	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bc80      	pop	{r7}
 800a27e:	4770      	bx	lr
 800a280:	1ff80000 	.word	0x1ff80000

0800a284 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff f943 	bl	8009520 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a29a:	2110      	movs	r1, #16
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff f99b 	bl	80095d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff f9bc 	bl	8009620 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	613b      	str	r3, [r7, #16]
 800a2ac:	e01f      	b.n	800a2ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b0f      	cmp	r3, #15
 800a2f2:	d9dc      	bls.n	800a2ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	e034      	b.n	800a364 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4413      	add	r3, r2
 800a302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a310:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a318:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a320:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32e:	461a      	mov	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	3301      	adds	r3, #1
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a340:	d80c      	bhi.n	800a35c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a358:	d0ec      	beq.n	800a334 <USB_StopHost+0xb0>
 800a35a:	e000      	b.n	800a35e <USB_StopHost+0xda>
        break;
 800a35c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	3301      	adds	r3, #1
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2b0f      	cmp	r3, #15
 800a368:	d9c7      	bls.n	800a2fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a370:	461a      	mov	r2, r3
 800a372:	f04f 33ff 	mov.w	r3, #4294967295
 800a376:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a390:	4904      	ldr	r1, [pc, #16]	; (800a3a4 <MX_FATFS_Init+0x18>)
 800a392:	4805      	ldr	r0, [pc, #20]	; (800a3a8 <MX_FATFS_Init+0x1c>)
 800a394:	f006 feac 	bl	80110f0 <FATFS_LinkDriver>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <MX_FATFS_Init+0x20>)
 800a39e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a3a0:	bf00      	nop
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20005b34 	.word	0x20005b34
 800a3a8:	0801656c 	.word	0x0801656c
 800a3ac:	20007b94 	.word	0x20007b94

0800a3b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a3b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr

0800a3be <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a3be:	b590      	push	{r4, r7, lr}
 800a3c0:	b089      	sub	sp, #36	; 0x24
 800a3c2:	af04      	add	r7, sp, #16
 800a3c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3cc:	7919      	ldrb	r1, [r3, #4]
 800a3ce:	2350      	movs	r3, #80	; 0x50
 800a3d0:	2206      	movs	r2, #6
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 fc47 	bl	800bc66 <USBH_FindInterface>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2bff      	cmp	r3, #255	; 0xff
 800a3e0:	d002      	beq.n	800a3e8 <USBH_MSC_InterfaceInit+0x2a>
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d901      	bls.n	800a3ec <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e0ef      	b.n	800a5cc <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fc1d 	bl	800bc30 <USBH_SelectInterface>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a400:	2302      	movs	r3, #2
 800a402:	e0e3      	b.n	800a5cc <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800a40a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a40e:	f007 fb8d 	bl	8011b2c <malloc>
 800a412:	4603      	mov	r3, r0
 800a414:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a426:	2302      	movs	r3, #2
 800a428:	e0d0      	b.n	800a5cc <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a42a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a42e:	2100      	movs	r1, #0
 800a430:	68b8      	ldr	r0, [r7, #8]
 800a432:	f007 fb99 	bl	8011b68 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	211a      	movs	r1, #26
 800a43c:	fb01 f303 	mul.w	r3, r1, r3
 800a440:	4413      	add	r3, r2
 800a442:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	da16      	bge.n	800a47c <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	211a      	movs	r1, #26
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	4413      	add	r3, r2
 800a45a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	211a      	movs	r1, #26
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	4413      	add	r3, r2
 800a470:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	815a      	strh	r2, [r3, #10]
 800a47a:	e015      	b.n	800a4a8 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	211a      	movs	r1, #26
 800a482:	fb01 f303 	mul.w	r3, r1, r3
 800a486:	4413      	add	r3, r2
 800a488:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a48c:	781a      	ldrb	r2, [r3, #0]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	211a      	movs	r1, #26
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	4413      	add	r3, r2
 800a49e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a4a2:	881a      	ldrh	r2, [r3, #0]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	211a      	movs	r1, #26
 800a4ae:	fb01 f303 	mul.w	r3, r1, r3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	b25b      	sxtb	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	da16      	bge.n	800a4ee <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	211a      	movs	r1, #26
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	211a      	movs	r1, #26
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4e6:	881a      	ldrh	r2, [r3, #0]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	815a      	strh	r2, [r3, #10]
 800a4ec:	e015      	b.n	800a51a <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	211a      	movs	r1, #26
 800a4f4:	fb01 f303 	mul.w	r3, r1, r3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a4fe:	781a      	ldrb	r2, [r3, #0]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	211a      	movs	r1, #26
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a514:	881a      	ldrh	r2, [r3, #0]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2200      	movs	r2, #0
 800a524:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	799b      	ldrb	r3, [r3, #6]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 fcab 	bl	800ce8e <USBH_AllocPipe>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	79db      	ldrb	r3, [r3, #7]
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f002 fca1 	bl	800ce8e <USBH_AllocPipe>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fdab 	bl	800b0b0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	7959      	ldrb	r1, [r3, #5]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	7998      	ldrb	r0, [r3, #6]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	8912      	ldrh	r2, [r2, #8]
 800a572:	9202      	str	r2, [sp, #8]
 800a574:	2202      	movs	r2, #2
 800a576:	9201      	str	r2, [sp, #4]
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4623      	mov	r3, r4
 800a57c:	4602      	mov	r2, r0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f002 fc56 	bl	800ce30 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	7919      	ldrb	r1, [r3, #4]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	79d8      	ldrb	r0, [r3, #7]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	8952      	ldrh	r2, [r2, #10]
 800a59c:	9202      	str	r2, [sp, #8]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	9201      	str	r2, [sp, #4]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4623      	mov	r3, r4
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f002 fc41 	bl	800ce30 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f007 f9dc 	bl	8011974 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	795b      	ldrb	r3, [r3, #5]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f007 f9d5 	bl	8011974 <USBH_LL_SetToggle>

  return USBH_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd90      	pop	{r4, r7, pc}

0800a5d4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	795b      	ldrb	r3, [r3, #5]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00e      	beq.n	800a60c <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	795b      	ldrb	r3, [r3, #5]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f002 fc3a 	bl	800ce6e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	795b      	ldrb	r3, [r3, #5]
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f002 fc64 	bl	800cece <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	791b      	ldrb	r3, [r3, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00e      	beq.n	800a632 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	791b      	ldrb	r3, [r3, #4]
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f002 fc27 	bl	800ce6e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	791b      	ldrb	r3, [r3, #4]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f002 fc51 	bl	800cece <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00b      	beq.n	800a656 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	4618      	mov	r0, r3
 800a648:	f007 fa78 	bl	8011b3c <free>
    phost->pActiveClass->pData = 0U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a652:	2200      	movs	r2, #0
 800a654:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a672:	2301      	movs	r3, #1
 800a674:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	7b9b      	ldrb	r3, [r3, #14]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d042      	beq.n	800a704 <USBH_MSC_ClassRequest+0xa4>
 800a67e:	2b03      	cmp	r3, #3
 800a680:	dc4c      	bgt.n	800a71c <USBH_MSC_ClassRequest+0xbc>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <USBH_MSC_ClassRequest+0x2a>
 800a686:	2b02      	cmp	r3, #2
 800a688:	d148      	bne.n	800a71c <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fcef 	bl	800b072 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d104      	bne.n	800a6a8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d138      	bne.n	800a720 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d804      	bhi.n	800a6c2 <USBH_MSC_ClassRequest+0x62>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	3301      	adds	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <USBH_MSC_ClassRequest+0x64>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73bb      	strb	r3, [r7, #14]
 800a6cc:	e014      	b.n	800a6f8 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	2134      	movs	r1, #52	; 0x34
 800a6d4:	fb01 f303 	mul.w	r3, r1, r3
 800a6d8:	4413      	add	r3, r2
 800a6da:	3392      	adds	r3, #146	; 0x92
 800a6dc:	2202      	movs	r2, #2
 800a6de:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	2134      	movs	r1, #52	; 0x34
 800a6e6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	33c1      	adds	r3, #193	; 0xc1
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	73bb      	strb	r3, [r7, #14]
 800a6f8:	7bba      	ldrb	r2, [r7, #14]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d3e5      	bcc.n	800a6ce <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 800a702:	e00d      	b.n	800a720 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a704:	2100      	movs	r1, #0
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 ff65 	bl	800c5d6 <USBH_ClrFeature>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d108      	bne.n	800a724 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	7bda      	ldrb	r2, [r3, #15]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a71a:	e003      	b.n	800a724 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800a71c:	bf00      	nop
 800a71e:	e002      	b.n	800a726 <USBH_MSC_ClassRequest+0xc6>
      break;
 800a720:	bf00      	nop
 800a722:	e000      	b.n	800a726 <USBH_MSC_ClassRequest+0xc6>
      break;
 800a724:	bf00      	nop
  }

  return status;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a742:	2301      	movs	r3, #1
 800a744:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a746:	2301      	movs	r3, #1
 800a748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a74a:	2301      	movs	r3, #1
 800a74c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	7b1b      	ldrb	r3, [r3, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <USBH_MSC_Process+0x2e>
 800a756:	2b01      	cmp	r3, #1
 800a758:	f000 8271 	beq.w	800ac3e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a75c:	e272      	b.n	800ac44 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a764:	461a      	mov	r2, r3
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	f080 824f 	bcs.w	800ac0e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a776:	4619      	mov	r1, r3
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	2334      	movs	r3, #52	; 0x34
 800a77c:	fb03 f301 	mul.w	r3, r3, r1
 800a780:	4413      	add	r3, r2
 800a782:	3391      	adds	r3, #145	; 0x91
 800a784:	2201      	movs	r2, #1
 800a786:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a78e:	4619      	mov	r1, r3
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	2334      	movs	r3, #52	; 0x34
 800a794:	fb03 f301 	mul.w	r3, r3, r1
 800a798:	4413      	add	r3, r2
 800a79a:	3390      	adds	r3, #144	; 0x90
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b08      	cmp	r3, #8
 800a7a0:	f200 8243 	bhi.w	800ac2a <USBH_MSC_Process+0x4fa>
 800a7a4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <USBH_MSC_Process+0x7c>)
 800a7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7aa:	bf00      	nop
 800a7ac:	0800a7d1 	.word	0x0800a7d1
 800a7b0:	0800ac2b 	.word	0x0800ac2b
 800a7b4:	0800a899 	.word	0x0800a899
 800a7b8:	0800aa1d 	.word	0x0800aa1d
 800a7bc:	0800a7f7 	.word	0x0800a7f7
 800a7c0:	0800aae9 	.word	0x0800aae9
 800a7c4:	0800ac2b 	.word	0x0800ac2b
 800a7c8:	0800ac2b 	.word	0x0800ac2b
 800a7cc:	0800abfd 	.word	0x0800abfd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	2334      	movs	r3, #52	; 0x34
 800a7dc:	fb03 f301 	mul.w	r3, r3, r1
 800a7e0:	4413      	add	r3, r2
 800a7e2:	3390      	adds	r3, #144	; 0x90
 800a7e4:	2204      	movs	r2, #4
 800a7e6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a7f4:	e222      	b.n	800ac3c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7fc:	b2d9      	uxtb	r1, r3
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a804:	461a      	mov	r2, r3
 800a806:	2334      	movs	r3, #52	; 0x34
 800a808:	fb03 f302 	mul.w	r3, r3, r2
 800a80c:	3398      	adds	r3, #152	; 0x98
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	4413      	add	r3, r2
 800a812:	3307      	adds	r3, #7
 800a814:	461a      	mov	r2, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 ff68 	bl	800b6ec <USBH_MSC_SCSI_Inquiry>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a82c:	4619      	mov	r1, r3
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	2334      	movs	r3, #52	; 0x34
 800a832:	fb03 f301 	mul.w	r3, r3, r1
 800a836:	4413      	add	r3, r2
 800a838:	3390      	adds	r3, #144	; 0x90
 800a83a:	2202      	movs	r2, #2
 800a83c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d10c      	bne.n	800a85e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a84a:	4619      	mov	r1, r3
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	2334      	movs	r3, #52	; 0x34
 800a850:	fb03 f301 	mul.w	r3, r3, r1
 800a854:	4413      	add	r3, r2
 800a856:	3390      	adds	r3, #144	; 0x90
 800a858:	2205      	movs	r2, #5
 800a85a:	701a      	strb	r2, [r3, #0]
            break;
 800a85c:	e1e7      	b.n	800ac2e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b04      	cmp	r3, #4
 800a862:	f040 81e4 	bne.w	800ac2e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a86c:	4619      	mov	r1, r3
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	2334      	movs	r3, #52	; 0x34
 800a872:	fb03 f301 	mul.w	r3, r3, r1
 800a876:	4413      	add	r3, r2
 800a878:	3390      	adds	r3, #144	; 0x90
 800a87a:	2201      	movs	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a884:	4619      	mov	r1, r3
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	2334      	movs	r3, #52	; 0x34
 800a88a:	fb03 f301 	mul.w	r3, r3, r1
 800a88e:	4413      	add	r3, r2
 800a890:	3391      	adds	r3, #145	; 0x91
 800a892:	2202      	movs	r2, #2
 800a894:	701a      	strb	r2, [r3, #0]
            break;
 800a896:	e1ca      	b.n	800ac2e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fe64 	bl	800b570 <USBH_MSC_SCSI_TestUnitReady>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d149      	bne.n	800a946 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	2334      	movs	r3, #52	; 0x34
 800a8be:	fb03 f301 	mul.w	r3, r3, r1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3392      	adds	r3, #146	; 0x92
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00c      	beq.n	800a8e6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	2334      	movs	r3, #52	; 0x34
 800a8d8:	fb03 f301 	mul.w	r3, r3, r1
 800a8dc:	4413      	add	r3, r2
 800a8de:	33c1      	adds	r3, #193	; 0xc1
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e00b      	b.n	800a8fe <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	2334      	movs	r3, #52	; 0x34
 800a8f2:	fb03 f301 	mul.w	r3, r3, r1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	33c1      	adds	r3, #193	; 0xc1
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a904:	4619      	mov	r1, r3
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	2334      	movs	r3, #52	; 0x34
 800a90a:	fb03 f301 	mul.w	r3, r3, r1
 800a90e:	4413      	add	r3, r2
 800a910:	3390      	adds	r3, #144	; 0x90
 800a912:	2203      	movs	r2, #3
 800a914:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a91c:	4619      	mov	r1, r3
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	2334      	movs	r3, #52	; 0x34
 800a922:	fb03 f301 	mul.w	r3, r3, r1
 800a926:	4413      	add	r3, r2
 800a928:	3391      	adds	r3, #145	; 0x91
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a934:	4619      	mov	r1, r3
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	2334      	movs	r3, #52	; 0x34
 800a93a:	fb03 f301 	mul.w	r3, r3, r1
 800a93e:	4413      	add	r3, r2
 800a940:	3392      	adds	r3, #146	; 0x92
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d14a      	bne.n	800a9e2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a952:	4619      	mov	r1, r3
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	2334      	movs	r3, #52	; 0x34
 800a958:	fb03 f301 	mul.w	r3, r3, r1
 800a95c:	4413      	add	r3, r2
 800a95e:	3392      	adds	r3, #146	; 0x92
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b02      	cmp	r3, #2
 800a964:	d00c      	beq.n	800a980 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a96c:	4619      	mov	r1, r3
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	2334      	movs	r3, #52	; 0x34
 800a972:	fb03 f301 	mul.w	r3, r3, r1
 800a976:	4413      	add	r3, r2
 800a978:	33c1      	adds	r3, #193	; 0xc1
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
 800a97e:	e00b      	b.n	800a998 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a986:	4619      	mov	r1, r3
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	2334      	movs	r3, #52	; 0x34
 800a98c:	fb03 f301 	mul.w	r3, r3, r1
 800a990:	4413      	add	r3, r2
 800a992:	33c1      	adds	r3, #193	; 0xc1
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a99e:	4619      	mov	r1, r3
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	2334      	movs	r3, #52	; 0x34
 800a9a4:	fb03 f301 	mul.w	r3, r3, r1
 800a9a8:	4413      	add	r3, r2
 800a9aa:	3390      	adds	r3, #144	; 0x90
 800a9ac:	2205      	movs	r2, #5
 800a9ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	2334      	movs	r3, #52	; 0x34
 800a9bc:	fb03 f301 	mul.w	r3, r3, r1
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3391      	adds	r3, #145	; 0x91
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	2334      	movs	r3, #52	; 0x34
 800a9d4:	fb03 f301 	mul.w	r3, r3, r1
 800a9d8:	4413      	add	r3, r2
 800a9da:	3392      	adds	r3, #146	; 0x92
 800a9dc:	2202      	movs	r2, #2
 800a9de:	701a      	strb	r2, [r3, #0]
            break;
 800a9e0:	e127      	b.n	800ac32 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	f040 8124 	bne.w	800ac32 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	2334      	movs	r3, #52	; 0x34
 800a9f6:	fb03 f301 	mul.w	r3, r3, r1
 800a9fa:	4413      	add	r3, r2
 800a9fc:	3390      	adds	r3, #144	; 0x90
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa08:	4619      	mov	r1, r3
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	2334      	movs	r3, #52	; 0x34
 800aa0e:	fb03 f301 	mul.w	r3, r3, r1
 800aa12:	4413      	add	r3, r2
 800aa14:	3391      	adds	r3, #145	; 0x91
 800aa16:	2202      	movs	r2, #2
 800aa18:	701a      	strb	r2, [r3, #0]
            break;
 800aa1a:	e10a      	b.n	800ac32 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa22:	b2d9      	uxtb	r1, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	2334      	movs	r3, #52	; 0x34
 800aa2e:	fb03 f302 	mul.w	r3, r3, r2
 800aa32:	3390      	adds	r3, #144	; 0x90
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	4413      	add	r3, r2
 800aa38:	3304      	adds	r3, #4
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fdda 	bl	800b5f6 <USBH_MSC_SCSI_ReadCapacity>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d120      	bne.n	800aa8e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa52:	4619      	mov	r1, r3
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	2334      	movs	r3, #52	; 0x34
 800aa58:	fb03 f301 	mul.w	r3, r3, r1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3390      	adds	r3, #144	; 0x90
 800aa60:	2201      	movs	r2, #1
 800aa62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	2334      	movs	r3, #52	; 0x34
 800aa70:	fb03 f301 	mul.w	r3, r3, r1
 800aa74:	4413      	add	r3, r2
 800aa76:	3391      	adds	r3, #145	; 0x91
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa82:	3301      	adds	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aa8c:	e0d3      	b.n	800ac36 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d10c      	bne.n	800aaae <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	2334      	movs	r3, #52	; 0x34
 800aaa0:	fb03 f301 	mul.w	r3, r3, r1
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3390      	adds	r3, #144	; 0x90
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	701a      	strb	r2, [r3, #0]
            break;
 800aaac:	e0c3      	b.n	800ac36 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	f040 80c0 	bne.w	800ac36 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aabc:	4619      	mov	r1, r3
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	2334      	movs	r3, #52	; 0x34
 800aac2:	fb03 f301 	mul.w	r3, r3, r1
 800aac6:	4413      	add	r3, r2
 800aac8:	3390      	adds	r3, #144	; 0x90
 800aaca:	2201      	movs	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aad4:	4619      	mov	r1, r3
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	2334      	movs	r3, #52	; 0x34
 800aada:	fb03 f301 	mul.w	r3, r3, r1
 800aade:	4413      	add	r3, r2
 800aae0:	3391      	adds	r3, #145	; 0x91
 800aae2:	2202      	movs	r2, #2
 800aae4:	701a      	strb	r2, [r3, #0]
            break;
 800aae6:	e0a6      	b.n	800ac36 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaee:	b2d9      	uxtb	r1, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	2334      	movs	r3, #52	; 0x34
 800aafa:	fb03 f302 	mul.w	r3, r3, r2
 800aafe:	3398      	adds	r3, #152	; 0x98
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	4413      	add	r3, r2
 800ab04:	3304      	adds	r3, #4
 800ab06:	461a      	mov	r2, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fe94 	bl	800b836 <USBH_MSC_SCSI_RequestSense>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d145      	bne.n	800aba4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	2334      	movs	r3, #52	; 0x34
 800ab24:	fb03 f301 	mul.w	r3, r3, r1
 800ab28:	4413      	add	r3, r2
 800ab2a:	339c      	adds	r3, #156	; 0x9c
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b06      	cmp	r3, #6
 800ab30:	d00c      	beq.n	800ab4c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab38:	4619      	mov	r1, r3
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	2334      	movs	r3, #52	; 0x34
 800ab3e:	fb03 f301 	mul.w	r3, r3, r1
 800ab42:	4413      	add	r3, r2
 800ab44:	339c      	adds	r3, #156	; 0x9c
 800ab46:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d117      	bne.n	800ab7c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d80c      	bhi.n	800ab7c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	2334      	movs	r3, #52	; 0x34
 800ab6e:	fb03 f301 	mul.w	r3, r3, r1
 800ab72:	4413      	add	r3, r2
 800ab74:	3390      	adds	r3, #144	; 0x90
 800ab76:	2202      	movs	r2, #2
 800ab78:	701a      	strb	r2, [r3, #0]
                  break;
 800ab7a:	e05f      	b.n	800ac3c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab82:	4619      	mov	r1, r3
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	2334      	movs	r3, #52	; 0x34
 800ab88:	fb03 f301 	mul.w	r3, r3, r1
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3390      	adds	r3, #144	; 0x90
 800ab90:	2201      	movs	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d10c      	bne.n	800abc4 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abb0:	4619      	mov	r1, r3
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	2334      	movs	r3, #52	; 0x34
 800abb6:	fb03 f301 	mul.w	r3, r3, r1
 800abba:	4413      	add	r3, r2
 800abbc:	3390      	adds	r3, #144	; 0x90
 800abbe:	2208      	movs	r2, #8
 800abc0:	701a      	strb	r2, [r3, #0]
            break;
 800abc2:	e03a      	b.n	800ac3a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d137      	bne.n	800ac3a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abd0:	4619      	mov	r1, r3
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	2334      	movs	r3, #52	; 0x34
 800abd6:	fb03 f301 	mul.w	r3, r3, r1
 800abda:	4413      	add	r3, r2
 800abdc:	3390      	adds	r3, #144	; 0x90
 800abde:	2201      	movs	r2, #1
 800abe0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abe8:	4619      	mov	r1, r3
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	2334      	movs	r3, #52	; 0x34
 800abee:	fb03 f301 	mul.w	r3, r3, r1
 800abf2:	4413      	add	r3, r2
 800abf4:	3391      	adds	r3, #145	; 0x91
 800abf6:	2202      	movs	r2, #2
 800abf8:	701a      	strb	r2, [r3, #0]
            break;
 800abfa:	e01e      	b.n	800ac3a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac02:	3301      	adds	r3, #1
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ac0c:	e016      	b.n	800ac3c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ac22:	2102      	movs	r1, #2
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	4798      	blx	r3
      break;
 800ac28:	e00c      	b.n	800ac44 <USBH_MSC_Process+0x514>
            break;
 800ac2a:	bf00      	nop
 800ac2c:	e00a      	b.n	800ac44 <USBH_MSC_Process+0x514>
            break;
 800ac2e:	bf00      	nop
 800ac30:	e008      	b.n	800ac44 <USBH_MSC_Process+0x514>
            break;
 800ac32:	bf00      	nop
 800ac34:	e006      	b.n	800ac44 <USBH_MSC_Process+0x514>
            break;
 800ac36:	bf00      	nop
 800ac38:	e004      	b.n	800ac44 <USBH_MSC_Process+0x514>
            break;
 800ac3a:	bf00      	nop
      break;
 800ac3c:	e002      	b.n	800ac44 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	75fb      	strb	r3, [r7, #23]
      break;
 800ac42:	bf00      	nop
  }
  return error;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop

0800ac50 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bc80      	pop	{r7}
 800ac62:	4770      	bx	lr

0800ac64 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	2134      	movs	r1, #52	; 0x34
 800ac88:	fb01 f303 	mul.w	r3, r1, r3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3390      	adds	r3, #144	; 0x90
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b07      	cmp	r3, #7
 800ac94:	d03c      	beq.n	800ad10 <USBH_MSC_RdWrProcess+0xac>
 800ac96:	2b07      	cmp	r3, #7
 800ac98:	f300 80a7 	bgt.w	800adea <USBH_MSC_RdWrProcess+0x186>
 800ac9c:	2b05      	cmp	r3, #5
 800ac9e:	d06c      	beq.n	800ad7a <USBH_MSC_RdWrProcess+0x116>
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	f040 80a2 	bne.w	800adea <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800aca6:	78f9      	ldrb	r1, [r7, #3]
 800aca8:	2300      	movs	r3, #0
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	2300      	movs	r3, #0
 800acae:	2200      	movs	r2, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fea4 	bl	800b9fe <USBH_MSC_SCSI_Read>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	2134      	movs	r1, #52	; 0x34
 800acc6:	fb01 f303 	mul.w	r3, r1, r3
 800acca:	4413      	add	r3, r2
 800accc:	3390      	adds	r3, #144	; 0x90
 800acce:	2201      	movs	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800acd6:	e08a      	b.n	800adee <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d109      	bne.n	800acf2 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	2134      	movs	r1, #52	; 0x34
 800ace4:	fb01 f303 	mul.w	r3, r1, r3
 800ace8:	4413      	add	r3, r2
 800acea:	3390      	adds	r3, #144	; 0x90
 800acec:	2205      	movs	r2, #5
 800acee:	701a      	strb	r2, [r3, #0]
      break;
 800acf0:	e07d      	b.n	800adee <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d17a      	bne.n	800adee <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	2134      	movs	r1, #52	; 0x34
 800acfe:	fb01 f303 	mul.w	r3, r1, r3
 800ad02:	4413      	add	r3, r2
 800ad04:	3390      	adds	r3, #144	; 0x90
 800ad06:	2208      	movs	r2, #8
 800ad08:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad0e:	e06e      	b.n	800adee <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ad10:	78f9      	ldrb	r1, [r7, #3]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fe04 	bl	800b928 <USBH_MSC_SCSI_Write>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	2134      	movs	r1, #52	; 0x34
 800ad30:	fb01 f303 	mul.w	r3, r1, r3
 800ad34:	4413      	add	r3, r2
 800ad36:	3390      	adds	r3, #144	; 0x90
 800ad38:	2201      	movs	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad40:	e057      	b.n	800adf2 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d109      	bne.n	800ad5c <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ad48:	78fb      	ldrb	r3, [r7, #3]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	2134      	movs	r1, #52	; 0x34
 800ad4e:	fb01 f303 	mul.w	r3, r1, r3
 800ad52:	4413      	add	r3, r2
 800ad54:	3390      	adds	r3, #144	; 0x90
 800ad56:	2205      	movs	r2, #5
 800ad58:	701a      	strb	r2, [r3, #0]
      break;
 800ad5a:	e04a      	b.n	800adf2 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d147      	bne.n	800adf2 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	2134      	movs	r1, #52	; 0x34
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	3390      	adds	r3, #144	; 0x90
 800ad70:	2208      	movs	r2, #8
 800ad72:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad74:	2302      	movs	r3, #2
 800ad76:	75fb      	strb	r3, [r7, #23]
      break;
 800ad78:	e03b      	b.n	800adf2 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	2234      	movs	r2, #52	; 0x34
 800ad7e:	fb02 f303 	mul.w	r3, r2, r3
 800ad82:	3398      	adds	r3, #152	; 0x98
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4413      	add	r3, r2
 800ad88:	1d1a      	adds	r2, r3, #4
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fd51 	bl	800b836 <USBH_MSC_SCSI_RequestSense>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d113      	bne.n	800adc6 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	2134      	movs	r1, #52	; 0x34
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	4413      	add	r3, r2
 800adaa:	3390      	adds	r3, #144	; 0x90
 800adac:	2201      	movs	r2, #1
 800adae:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	2134      	movs	r1, #52	; 0x34
 800adb6:	fb01 f303 	mul.w	r3, r1, r3
 800adba:	4413      	add	r3, r2
 800adbc:	3391      	adds	r3, #145	; 0x91
 800adbe:	2202      	movs	r2, #2
 800adc0:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800adc2:	2302      	movs	r3, #2
 800adc4:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d014      	beq.n	800adf6 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	2b04      	cmp	r3, #4
 800add0:	d111      	bne.n	800adf6 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	2134      	movs	r1, #52	; 0x34
 800add8:	fb01 f303 	mul.w	r3, r1, r3
 800addc:	4413      	add	r3, r2
 800adde:	3390      	adds	r3, #144	; 0x90
 800ade0:	2208      	movs	r2, #8
 800ade2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ade4:	2302      	movs	r3, #2
 800ade6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ade8:	e005      	b.n	800adf6 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800adea:	bf00      	nop
 800adec:	e004      	b.n	800adf8 <USBH_MSC_RdWrProcess+0x194>
      break;
 800adee:	bf00      	nop
 800adf0:	e002      	b.n	800adf8 <USBH_MSC_RdWrProcess+0x194>
      break;
 800adf2:	bf00      	nop
 800adf4:	e000      	b.n	800adf8 <USBH_MSC_RdWrProcess+0x194>
      break;
 800adf6:	bf00      	nop

  }
  return error;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b085      	sub	sp, #20
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b0b      	cmp	r3, #11
 800ae20:	d10c      	bne.n	800ae3c <USBH_MSC_UnitIsReady+0x3a>
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	2134      	movs	r1, #52	; 0x34
 800ae28:	fb01 f303 	mul.w	r3, r1, r3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3391      	adds	r3, #145	; 0x91
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
 800ae3a:	e001      	b.n	800ae40 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bc80      	pop	{r7}
 800ae4a:	4770      	bx	lr

0800ae4c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	460b      	mov	r3, r1
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b0b      	cmp	r3, #11
 800ae6c:	d10d      	bne.n	800ae8a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ae6e:	7afb      	ldrb	r3, [r7, #11]
 800ae70:	2234      	movs	r2, #52	; 0x34
 800ae72:	fb02 f303 	mul.w	r3, r2, r3
 800ae76:	3390      	adds	r3, #144	; 0x90
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	2234      	movs	r2, #52	; 0x34
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f006 fe63 	bl	8011b4c <memcpy>
    return USBH_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e000      	b.n	800ae8c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ae8a:	2302      	movs	r3, #2
  }
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	607a      	str	r2, [r7, #4]
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	460b      	mov	r3, r1
 800aea2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00e      	beq.n	800aed8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800aec0:	2b0b      	cmp	r3, #11
 800aec2:	d109      	bne.n	800aed8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	2134      	movs	r1, #52	; 0x34
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	4413      	add	r3, r2
 800aed0:	3390      	adds	r3, #144	; 0x90
 800aed2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d001      	beq.n	800aedc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800aed8:	2302      	movs	r3, #2
 800aeda:	e040      	b.n	800af5e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2206      	movs	r2, #6
 800aee0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	2134      	movs	r1, #52	; 0x34
 800aee8:	fb01 f303 	mul.w	r3, r1, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	3390      	adds	r3, #144	; 0x90
 800aef0:	2206      	movs	r2, #6
 800aef2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800aefe:	7af9      	ldrb	r1, [r7, #11]
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f000 fd78 	bl	800b9fe <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800af14:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af16:	e016      	b.n	800af46 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	1ad2      	subs	r2, r2, r3
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	f242 7110 	movw	r1, #10000	; 0x2710
 800af28:	fb01 f303 	mul.w	r3, r1, r3
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d805      	bhi.n	800af3c <USBH_MSC_Read+0xa8>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d104      	bne.n	800af46 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2201      	movs	r2, #1
 800af40:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800af42:	2302      	movs	r3, #2
 800af44:	e00b      	b.n	800af5e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	4619      	mov	r1, r3
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7ff fe8a 	bl	800ac64 <USBH_MSC_RdWrProcess>
 800af50:	4603      	mov	r3, r0
 800af52:	2b01      	cmp	r3, #1
 800af54:	d0e0      	beq.n	800af18 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2201      	movs	r2, #1
 800af5a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af02      	add	r7, sp, #8
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
 800af72:	460b      	mov	r3, r1
 800af74:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00e      	beq.n	800afaa <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800af92:	2b0b      	cmp	r3, #11
 800af94:	d109      	bne.n	800afaa <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	2134      	movs	r1, #52	; 0x34
 800af9c:	fb01 f303 	mul.w	r3, r1, r3
 800afa0:	4413      	add	r3, r2
 800afa2:	3390      	adds	r3, #144	; 0x90
 800afa4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d001      	beq.n	800afae <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800afaa:	2302      	movs	r3, #2
 800afac:	e040      	b.n	800b030 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2207      	movs	r2, #7
 800afb2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800afb4:	7afb      	ldrb	r3, [r7, #11]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	2134      	movs	r1, #52	; 0x34
 800afba:	fb01 f303 	mul.w	r3, r1, r3
 800afbe:	4413      	add	r3, r2
 800afc0:	3390      	adds	r3, #144	; 0x90
 800afc2:	2207      	movs	r2, #7
 800afc4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	b29a      	uxth	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800afd0:	7af9      	ldrb	r1, [r7, #11]
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f000 fca4 	bl	800b928 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800afe6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800afe8:	e016      	b.n	800b018 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	1ad2      	subs	r2, r2, r3
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	f242 7110 	movw	r1, #10000	; 0x2710
 800affa:	fb01 f303 	mul.w	r3, r1, r3
 800affe:	429a      	cmp	r2, r3
 800b000:	d805      	bhi.n	800b00e <USBH_MSC_Write+0xa8>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d104      	bne.n	800b018 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2201      	movs	r2, #1
 800b012:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b014:	2302      	movs	r3, #2
 800b016:	e00b      	b.n	800b030 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b018:	7afb      	ldrb	r3, [r7, #11]
 800b01a:	4619      	mov	r1, r3
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff fe21 	bl	800ac64 <USBH_MSC_RdWrProcess>
 800b022:	4603      	mov	r3, r0
 800b024:	2b01      	cmp	r3, #1
 800b026:	d0e0      	beq.n	800afea <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2201      	movs	r2, #1
 800b02c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2221      	movs	r2, #33	; 0x21
 800b044:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	22ff      	movs	r2, #255	; 0xff
 800b04a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800b05e:	2200      	movs	r2, #0
 800b060:	2100      	movs	r1, #0
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 fc92 	bl	800c98c <USBH_CtlReq>
 800b068:	4603      	mov	r3, r0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	22a1      	movs	r2, #161	; 0xa1
 800b080:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	22fe      	movs	r2, #254	; 0xfe
 800b086:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b09a:	2201      	movs	r2, #1
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 fc74 	bl	800c98c <USBH_CtlReq>
 800b0a4:	4603      	mov	r3, r0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4a09      	ldr	r2, [pc, #36]	; (800b0ec <USBH_MSC_BOT_Init+0x3c>)
 800b0c6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <USBH_MSC_BOT_Init+0x40>)
 800b0cc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	43425355 	.word	0x43425355
 800b0f0:	20304050 	.word	0x20304050

0800b0f4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b100:	2301      	movs	r3, #1
 800b102:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b104:	2301      	movs	r3, #1
 800b106:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b108:	2301      	movs	r3, #1
 800b10a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b116:	69db      	ldr	r3, [r3, #28]
 800b118:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b124:	3b01      	subs	r3, #1
 800b126:	2b0a      	cmp	r3, #10
 800b128:	f200 819e 	bhi.w	800b468 <USBH_MSC_BOT_Process+0x374>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <USBH_MSC_BOT_Process+0x40>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b161 	.word	0x0800b161
 800b138:	0800b189 	.word	0x0800b189
 800b13c:	0800b1f3 	.word	0x0800b1f3
 800b140:	0800b211 	.word	0x0800b211
 800b144:	0800b295 	.word	0x0800b295
 800b148:	0800b2b7 	.word	0x0800b2b7
 800b14c:	0800b34f 	.word	0x0800b34f
 800b150:	0800b36b 	.word	0x0800b36b
 800b154:	0800b3bd 	.word	0x0800b3bd
 800b158:	0800b3ed 	.word	0x0800b3ed
 800b15c:	0800b44f 	.word	0x0800b44f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	795b      	ldrb	r3, [r3, #5]
 800b17a:	2201      	movs	r2, #1
 800b17c:	9200      	str	r2, [sp, #0]
 800b17e:	221f      	movs	r2, #31
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 fe12 	bl	800cdaa <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b186:	e17e      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	795b      	ldrb	r3, [r3, #5]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f006 fbc6 	bl	8011920 <USBH_LL_GetURBState>
 800b194:	4603      	mov	r3, r0
 800b196:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b198:	7d3b      	ldrb	r3, [r7, #20]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d118      	bne.n	800b1d0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00f      	beq.n	800b1c6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b1ac:	b25b      	sxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da04      	bge.n	800b1bc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2203      	movs	r2, #3
 800b1b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1ba:	e157      	b.n	800b46c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2205      	movs	r2, #5
 800b1c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1c4:	e152      	b.n	800b46c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2207      	movs	r2, #7
 800b1ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1ce:	e14d      	b.n	800b46c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1d0:	7d3b      	ldrb	r3, [r7, #20]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d104      	bne.n	800b1e0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1de:	e145      	b.n	800b46c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b1e0:	7d3b      	ldrb	r3, [r7, #20]
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	f040 8142 	bne.w	800b46c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	220a      	movs	r2, #10
 800b1ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1f0:	e13c      	b.n	800b46c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	895a      	ldrh	r2, [r3, #10]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	791b      	ldrb	r3, [r3, #4]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fdf7 	bl	800cdf4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2204      	movs	r2, #4
 800b20a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b20e:	e13a      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	791b      	ldrb	r3, [r3, #4]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f006 fb82 	bl	8011920 <USBH_LL_GetURBState>
 800b21c:	4603      	mov	r3, r0
 800b21e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b220:	7d3b      	ldrb	r3, [r7, #20]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d12d      	bne.n	800b282 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	8952      	ldrh	r2, [r2, #10]
 800b22e:	4293      	cmp	r3, r2
 800b230:	d910      	bls.n	800b254 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	8952      	ldrh	r2, [r2, #10]
 800b23c:	441a      	add	r2, r3
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	8952      	ldrh	r2, [r2, #10]
 800b24c:	1a9a      	subs	r2, r3, r2
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	65da      	str	r2, [r3, #92]	; 0x5c
 800b252:	e002      	b.n	800b25a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	2200      	movs	r2, #0
 800b258:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00a      	beq.n	800b278 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	895a      	ldrh	r2, [r3, #10]
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	791b      	ldrb	r3, [r3, #4]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f001 fdbf 	bl	800cdf4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b276:	e0fb      	b.n	800b470 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	2207      	movs	r2, #7
 800b27c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b280:	e0f6      	b.n	800b470 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b282:	7d3b      	ldrb	r3, [r7, #20]
 800b284:	2b05      	cmp	r3, #5
 800b286:	f040 80f3 	bne.w	800b470 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2209      	movs	r2, #9
 800b28e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b292:	e0ed      	b.n	800b470 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	891a      	ldrh	r2, [r3, #8]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	795b      	ldrb	r3, [r3, #5]
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	9000      	str	r0, [sp, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fd7f 	bl	800cdaa <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2206      	movs	r2, #6
 800b2b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2b4:	e0e7      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	795b      	ldrb	r3, [r3, #5]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f006 fb2f 	bl	8011920 <USBH_LL_GetURBState>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b2c6:	7d3b      	ldrb	r3, [r7, #20]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d12f      	bne.n	800b32c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	8912      	ldrh	r2, [r2, #8]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d910      	bls.n	800b2fa <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	8912      	ldrh	r2, [r2, #8]
 800b2e2:	441a      	add	r2, r3
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	8912      	ldrh	r2, [r2, #8]
 800b2f2:	1a9a      	subs	r2, r3, r2
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	65da      	str	r2, [r3, #92]	; 0x5c
 800b2f8:	e002      	b.n	800b300 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	891a      	ldrh	r2, [r3, #8]
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	795b      	ldrb	r3, [r3, #5]
 800b316:	2001      	movs	r0, #1
 800b318:	9000      	str	r0, [sp, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f001 fd45 	bl	800cdaa <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b320:	e0a8      	b.n	800b474 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2207      	movs	r2, #7
 800b326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b32a:	e0a3      	b.n	800b474 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b32c:	7d3b      	ldrb	r3, [r7, #20]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d104      	bne.n	800b33c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2205      	movs	r2, #5
 800b336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b33a:	e09b      	b.n	800b474 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b33c:	7d3b      	ldrb	r3, [r7, #20]
 800b33e:	2b05      	cmp	r3, #5
 800b340:	f040 8098 	bne.w	800b474 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	220a      	movs	r2, #10
 800b348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b34c:	e092      	b.n	800b474 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	791b      	ldrb	r3, [r3, #4]
 800b358:	220d      	movs	r2, #13
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 fd4a 	bl	800cdf4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2208      	movs	r2, #8
 800b364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b368:	e08d      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	791b      	ldrb	r3, [r3, #4]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f006 fad5 	bl	8011920 <USBH_LL_GetURBState>
 800b376:	4603      	mov	r3, r0
 800b378:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b37a:	7d3b      	ldrb	r3, [r7, #20]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d115      	bne.n	800b3ac <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f8a9 	bl	800b4e8 <USBH_MSC_DecodeCSW>
 800b396:	4603      	mov	r3, r0
 800b398:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b39a:	7d7b      	ldrb	r3, [r7, #21]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b3a4:	e068      	b.n	800b478 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3aa:	e065      	b.n	800b478 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b3ac:	7d3b      	ldrb	r3, [r7, #20]
 800b3ae:	2b05      	cmp	r3, #5
 800b3b0:	d162      	bne.n	800b478 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2209      	movs	r2, #9
 800b3b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b3ba:	e05d      	b.n	800b478 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b3bc:	78fb      	ldrb	r3, [r7, #3]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f864 	bl	800b490 <USBH_MSC_BOT_Abort>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b3cc:	7dbb      	ldrb	r3, [r7, #22]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d104      	bne.n	800b3dc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2207      	movs	r2, #7
 800b3d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b3da:	e04f      	b.n	800b47c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b3dc:	7dbb      	ldrb	r3, [r7, #22]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d14c      	bne.n	800b47c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	220b      	movs	r2, #11
 800b3e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b3ea:	e047      	b.n	800b47c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f84c 	bl	800b490 <USBH_MSC_BOT_Abort>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b3fc:	7dbb      	ldrb	r3, [r7, #22]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d11d      	bne.n	800b43e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	795b      	ldrb	r3, [r3, #5]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f006 fae2 	bl	80119d2 <USBH_LL_GetToggle>
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	7959      	ldrb	r1, [r3, #5]
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	f1c3 0301 	rsb	r3, r3, #1
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f006 faa7 	bl	8011974 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	791b      	ldrb	r3, [r3, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f006 faa0 	bl	8011974 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2209      	movs	r2, #9
 800b438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b43c:	e020      	b.n	800b480 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b43e:	7dbb      	ldrb	r3, [r7, #22]
 800b440:	2b04      	cmp	r3, #4
 800b442:	d11d      	bne.n	800b480 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	220b      	movs	r2, #11
 800b448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b44c:	e018      	b.n	800b480 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff fdf2 	bl	800b038 <USBH_MSC_BOT_REQ_Reset>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d112      	bne.n	800b484 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b466:	e00d      	b.n	800b484 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b468:	bf00      	nop
 800b46a:	e00c      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b46c:	bf00      	nop
 800b46e:	e00a      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b470:	bf00      	nop
 800b472:	e008      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b474:	bf00      	nop
 800b476:	e006      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b478:	bf00      	nop
 800b47a:	e004      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <USBH_MSC_BOT_Process+0x392>
      break;
 800b484:	bf00      	nop
  }
  return status;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
 800b49c:	4613      	mov	r3, r2
 800b49e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b4ae:	78bb      	ldrb	r3, [r7, #2]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <USBH_MSC_BOT_Abort+0x2a>
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d009      	beq.n	800b4cc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b4b8:	e011      	b.n	800b4de <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	79db      	ldrb	r3, [r3, #7]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f888 	bl	800c5d6 <USBH_ClrFeature>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ca:	e008      	b.n	800b4de <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	799b      	ldrb	r3, [r3, #6]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 f87f 	bl	800c5d6 <USBH_ClrFeature>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
      break;
 800b4dc:	bf00      	nop
  }
  return status;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	791b      	ldrb	r3, [r3, #4]
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f006 f979 	bl	80117fc <USBH_LL_GetLastXferSize>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b0d      	cmp	r3, #13
 800b50e:	d002      	beq.n	800b516 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b510:	2302      	movs	r3, #2
 800b512:	73fb      	strb	r3, [r7, #15]
 800b514:	e024      	b.n	800b560 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b51a:	4a14      	ldr	r2, [pc, #80]	; (800b56c <USBH_MSC_DecodeCSW+0x84>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d11d      	bne.n	800b55c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b528:	429a      	cmp	r2, r3
 800b52a:	d119      	bne.n	800b560 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
 800b53a:	e011      	b.n	800b560 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b542:	2b01      	cmp	r3, #1
 800b544:	d102      	bne.n	800b54c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b546:	2301      	movs	r3, #1
 800b548:	73fb      	strb	r3, [r7, #15]
 800b54a:	e009      	b.n	800b560 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b552:	2b02      	cmp	r3, #2
 800b554:	d104      	bne.n	800b560 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b556:	2302      	movs	r3, #2
 800b558:	73fb      	strb	r3, [r7, #15]
 800b55a:	e001      	b.n	800b560 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b55c:	2302      	movs	r3, #2
 800b55e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	53425355 	.word	0x53425355

0800b570 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b57c:	2302      	movs	r3, #2
 800b57e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b590:	2b01      	cmp	r3, #1
 800b592:	d002      	beq.n	800b59a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b594:	2b02      	cmp	r3, #2
 800b596:	d021      	beq.n	800b5dc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b598:	e028      	b.n	800b5ec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2200      	movs	r2, #0
 800b59e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	220a      	movs	r2, #10
 800b5ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	3363      	adds	r3, #99	; 0x63
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f006 fad5 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5da:	e007      	b.n	800b5ec <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fd87 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ea:	bf00      	nop
  }

  return error;
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	460b      	mov	r3, r1
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d002      	beq.n	800b622 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d027      	beq.n	800b670 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b620:	e05f      	b.n	800b6e2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2208      	movs	r2, #8
 800b626:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	2280      	movs	r2, #128	; 0x80
 800b62c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	220a      	movs	r2, #10
 800b634:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	3363      	adds	r3, #99	; 0x63
 800b63c:	2210      	movs	r2, #16
 800b63e:	2100      	movs	r1, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f006 fa91 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2225      	movs	r2, #37	; 0x25
 800b64a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	2202      	movs	r2, #2
 800b65a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f103 0210 	add.w	r2, r3, #16
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b66a:	2301      	movs	r3, #1
 800b66c:	75fb      	strb	r3, [r7, #23]
      break;
 800b66e:	e038      	b.n	800b6e2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	4619      	mov	r1, r3
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f7ff fd3d 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800b67a:	4603      	mov	r3, r0
 800b67c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d12d      	bne.n	800b6e0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b68a:	3303      	adds	r3, #3
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	461a      	mov	r2, r3
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b696:	3302      	adds	r3, #2
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b6aa:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	061b      	lsls	r3, r3, #24
 800b6b6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c2:	3307      	adds	r3, #7
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ce:	3306      	adds	r3, #6
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	021b      	lsls	r3, r3, #8
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	809a      	strh	r2, [r3, #4]
      break;
 800b6e0:	bf00      	nop
  }

  return error;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d002      	beq.n	800b718 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b712:	2b02      	cmp	r3, #2
 800b714:	d03d      	beq.n	800b792 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b716:	e089      	b.n	800b82c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	2224      	movs	r2, #36	; 0x24
 800b71c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2280      	movs	r2, #128	; 0x80
 800b722:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	220a      	movs	r2, #10
 800b72a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3363      	adds	r3, #99	; 0x63
 800b732:	220a      	movs	r2, #10
 800b734:	2100      	movs	r1, #0
 800b736:	4618      	mov	r0, r3
 800b738:	f006 fa16 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2212      	movs	r2, #18
 800b740:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b744:	7afb      	ldrb	r3, [r7, #11]
 800b746:	015b      	lsls	r3, r3, #5
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	2224      	movs	r2, #36	; 0x24
 800b764:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2202      	movs	r2, #2
 800b77c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f103 0210 	add.w	r2, r3, #16
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b78c:	2301      	movs	r3, #1
 800b78e:	75fb      	strb	r3, [r7, #23]
      break;
 800b790:	e04c      	b.n	800b82c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	4619      	mov	r1, r3
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f7ff fcac 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d141      	bne.n	800b82a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b7a6:	2222      	movs	r2, #34	; 0x22
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f006 f9dc 	bl	8011b68 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 031f 	and.w	r3, r3, #31
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	095b      	lsrs	r3, r3, #5
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d8:	3301      	adds	r3, #1
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	da03      	bge.n	800b7ea <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	709a      	strb	r2, [r3, #2]
 800b7e8:	e002      	b.n	800b7f0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	1cd8      	adds	r0, r3, #3
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	4619      	mov	r1, r3
 800b800:	f006 f9a4 	bl	8011b4c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f103 000c 	add.w	r0, r3, #12
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b810:	3310      	adds	r3, #16
 800b812:	2210      	movs	r2, #16
 800b814:	4619      	mov	r1, r3
 800b816:	f006 f999 	bl	8011b4c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	331d      	adds	r3, #29
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b824:	3220      	adds	r2, #32
 800b826:	6812      	ldr	r2, [r2, #0]
 800b828:	601a      	str	r2, [r3, #0]
      break;
 800b82a:	bf00      	nop
  }

  return error;
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b086      	sub	sp, #24
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	460b      	mov	r3, r1
 800b840:	607a      	str	r2, [r7, #4]
 800b842:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b844:	2302      	movs	r3, #2
 800b846:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d002      	beq.n	800b862 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d03d      	beq.n	800b8dc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b860:	e05d      	b.n	800b91e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	220e      	movs	r2, #14
 800b866:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2280      	movs	r2, #128	; 0x80
 800b86c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	220a      	movs	r2, #10
 800b874:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3363      	adds	r3, #99	; 0x63
 800b87c:	2210      	movs	r2, #16
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f006 f971 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2203      	movs	r2, #3
 800b88a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	015b      	lsls	r3, r3, #5
 800b892:	b2da      	uxtb	r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	220e      	movs	r2, #14
 800b8ae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f103 0210 	add.w	r2, r3, #16
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8da:	e020      	b.n	800b91e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7ff fc07 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d115      	bne.n	800b91c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8f6:	3302      	adds	r3, #2
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	f003 030f 	and.w	r3, r3, #15
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b90a:	7b1a      	ldrb	r2, [r3, #12]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b916:	7b5a      	ldrb	r2, [r3, #13]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	709a      	strb	r2, [r3, #2]
      break;
 800b91c:	bf00      	nop
  }

  return error;
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	460b      	mov	r3, r1
 800b936:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b938:	2302      	movs	r3, #2
 800b93a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d002      	beq.n	800b956 <USBH_MSC_SCSI_Write+0x2e>
 800b950:	2b02      	cmp	r3, #2
 800b952:	d047      	beq.n	800b9e4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b954:	e04e      	b.n	800b9f4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b95c:	461a      	mov	r2, r3
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	fb03 f202 	mul.w	r2, r3, r2
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	220a      	movs	r2, #10
 800b974:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3363      	adds	r3, #99	; 0x63
 800b97c:	2210      	movs	r2, #16
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f006 f8f1 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	222a      	movs	r2, #42	; 0x2a
 800b98a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b98e:	79fa      	ldrb	r2, [r7, #7]
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b996:	79ba      	ldrb	r2, [r7, #6]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b99e:	797a      	ldrb	r2, [r7, #5]
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b9a6:	1d3b      	adds	r3, r7, #4
 800b9a8:	781a      	ldrb	r2, [r3, #0]
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b9b0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b9ba:	f107 0320 	add.w	r3, r7, #32
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9e2:	e007      	b.n	800b9f4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f7ff fb83 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f2:	bf00      	nop
  }

  return error;
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b086      	sub	sp, #24
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ba0e:	2302      	movs	r3, #2
 800ba10:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d002      	beq.n	800ba2c <USBH_MSC_SCSI_Read+0x2e>
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d047      	beq.n	800baba <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ba2a:	e04e      	b.n	800baca <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ba32:	461a      	mov	r2, r3
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	fb03 f202 	mul.w	r2, r3, r2
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2280      	movs	r2, #128	; 0x80
 800ba42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	220a      	movs	r2, #10
 800ba4a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	3363      	adds	r3, #99	; 0x63
 800ba52:	2210      	movs	r2, #16
 800ba54:	2100      	movs	r1, #0
 800ba56:	4618      	mov	r0, r3
 800ba58:	f006 f886 	bl	8011b68 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2228      	movs	r2, #40	; 0x28
 800ba60:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ba6c:	79ba      	ldrb	r2, [r7, #6]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ba74:	797a      	ldrb	r2, [r7, #5]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ba7c:	1d3b      	adds	r3, r7, #4
 800ba7e:	781a      	ldrb	r2, [r3, #0]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ba86:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ba90:	f107 0320 	add.w	r3, r7, #32
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bab4:	2301      	movs	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]
      break;
 800bab8:	e007      	b.n	800baca <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800baba:	7afb      	ldrb	r3, [r7, #11]
 800babc:	4619      	mov	r1, r3
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7ff fb18 	bl	800b0f4 <USBH_MSC_BOT_Process>
 800bac4:	4603      	mov	r3, r0
 800bac6:	75fb      	strb	r3, [r7, #23]
      break;
 800bac8:	bf00      	nop
  }

  return error;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bae8:	2302      	movs	r3, #2
 800baea:	e029      	b.n	800bb40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	79fa      	ldrb	r2, [r7, #7]
 800baf0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f81f 	bl	800bb48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f005 fdab 	bl	8011694 <USBH_LL_Init>

  return USBH_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb54:	2300      	movs	r3, #0
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e008      	b.n	800bb6c <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	32e0      	adds	r2, #224	; 0xe0
 800bb60:	2100      	movs	r1, #0
 800bb62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b0e      	cmp	r3, #14
 800bb70:	d9f3      	bls.n	800bb5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bb72:	2300      	movs	r3, #0
 800bb74:	60fb      	str	r3, [r7, #12]
 800bb76:	e009      	b.n	800bb8c <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb92:	d3f1      	bcc.n	800bb78 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2240      	movs	r2, #64	; 0x40
 800bbb8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bc80      	pop	{r7}
 800bbda:	4770      	bx	lr

0800bbdc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d017      	beq.n	800bc20 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10f      	bne.n	800bc1a <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc00:	1c59      	adds	r1, r3, #1
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	33dc      	adds	r3, #220	; 0xdc
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
 800bc18:	e004      	b.n	800bc24 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	73fb      	strb	r3, [r7, #15]
 800bc1e:	e001      	b.n	800bc24 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bc20:	2302      	movs	r3, #2
 800bc22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr

0800bc30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800bc46:	78fa      	ldrb	r2, [r7, #3]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d204      	bcs.n	800bc56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800bc54:	e001      	b.n	800bc5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bc56:	2302      	movs	r3, #2
 800bc58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bc80      	pop	{r7}
 800bc64:	4770      	bx	lr

0800bc66 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	4608      	mov	r0, r1
 800bc70:	4611      	mov	r1, r2
 800bc72:	461a      	mov	r2, r3
 800bc74:	4603      	mov	r3, r0
 800bc76:	70fb      	strb	r3, [r7, #3]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70bb      	strb	r3, [r7, #2]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f203 3336 	addw	r3, r3, #822	; 0x336
 800bc8e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bc90:	e025      	b.n	800bcde <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	221a      	movs	r2, #26
 800bc96:	fb02 f303 	mul.w	r3, r2, r3
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	3302      	adds	r3, #2
 800bca2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	795b      	ldrb	r3, [r3, #5]
 800bca8:	78fa      	ldrb	r2, [r7, #3]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d002      	beq.n	800bcb4 <USBH_FindInterface+0x4e>
 800bcae:	78fb      	ldrb	r3, [r7, #3]
 800bcb0:	2bff      	cmp	r3, #255	; 0xff
 800bcb2:	d111      	bne.n	800bcd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bcb8:	78ba      	ldrb	r2, [r7, #2]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d002      	beq.n	800bcc4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bcbe:	78bb      	ldrb	r3, [r7, #2]
 800bcc0:	2bff      	cmp	r3, #255	; 0xff
 800bcc2:	d109      	bne.n	800bcd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bcc8:	787a      	ldrb	r2, [r7, #1]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d002      	beq.n	800bcd4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bcce:	787b      	ldrb	r3, [r7, #1]
 800bcd0:	2bff      	cmp	r3, #255	; 0xff
 800bcd2:	d101      	bne.n	800bcd8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	e006      	b.n	800bce6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d9d6      	bls.n	800bc92 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bce4:	23ff      	movs	r3, #255	; 0xff
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f005 fd07 	bl	801170c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bcfe:	2101      	movs	r1, #1
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f005 fe20 	bl	8011946 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af04      	add	r7, sp, #16
 800bd16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bd18:	2302      	movs	r3, #2
 800bd1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d102      	bne.n	800bd32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2203      	movs	r2, #3
 800bd30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b0b      	cmp	r3, #11
 800bd3a:	f200 8177 	bhi.w	800c02c <USBH_Process+0x31c>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <USBH_Process+0x34>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd75 	.word	0x0800bd75
 800bd48:	0800bd97 	.word	0x0800bd97
 800bd4c:	0800bdab 	.word	0x0800bdab
 800bd50:	0800bfc7 	.word	0x0800bfc7
 800bd54:	0800c02d 	.word	0x0800c02d
 800bd58:	0800be4f 	.word	0x0800be4f
 800bd5c:	0800bf7d 	.word	0x0800bf7d
 800bd60:	0800be7f 	.word	0x0800be7f
 800bd64:	0800be9f 	.word	0x0800be9f
 800bd68:	0800bebf 	.word	0x0800bebf
 800bd6c:	0800beed 	.word	0x0800beed
 800bd70:	0800bfaf 	.word	0x0800bfaf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8157 	beq.w	800c030 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bd88:	20c8      	movs	r0, #200	; 0xc8
 800bd8a:	f005 fe51 	bl	8011a30 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f005 fd19 	bl	80117c6 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bd94:	e14c      	b.n	800c030 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	f040 8149 	bne.w	800c034 <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2202      	movs	r2, #2
 800bda6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bda8:	e144      	b.n	800c034 <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d005      	beq.n	800bdc0 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bdba:	2104      	movs	r1, #4
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bdc0:	2064      	movs	r0, #100	; 0x64
 800bdc2:	f005 fe35 	bl	8011a30 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f005 fcd6 	bl	8011778 <USBH_LL_GetSpeed>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	461a      	mov	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2205      	movs	r2, #5
 800bdda:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bddc:	2100      	movs	r1, #0
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 f855 	bl	800ce8e <USBH_AllocPipe>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461a      	mov	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bdec:	2180      	movs	r1, #128	; 0x80
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f84d 	bl	800ce8e <USBH_AllocPipe>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7919      	ldrb	r1, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800be10:	b292      	uxth	r2, r2
 800be12:	9202      	str	r2, [sp, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	9201      	str	r2, [sp, #4]
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	4603      	mov	r3, r0
 800be1c:	2280      	movs	r2, #128	; 0x80
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f001 f806 	bl	800ce30 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7959      	ldrb	r1, [r3, #5]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800be38:	b292      	uxth	r2, r2
 800be3a:	9202      	str	r2, [sp, #8]
 800be3c:	2200      	movs	r2, #0
 800be3e:	9201      	str	r2, [sp, #4]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4603      	mov	r3, r0
 800be44:	2200      	movs	r2, #0
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fff2 	bl	800ce30 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800be4c:	e101      	b.n	800c052 <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f904 	bl	800c05c <USBH_HandleEnum>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	f040 80ee 	bne.w	800c038 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d103      	bne.n	800be76 <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2208      	movs	r2, #8
 800be72:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800be74:	e0e0      	b.n	800c038 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2207      	movs	r2, #7
 800be7a:	701a      	strb	r2, [r3, #0]
      break;
 800be7c:	e0dc      	b.n	800c038 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 80d9 	beq.w	800c03c <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800be90:	2101      	movs	r1, #1
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2208      	movs	r2, #8
 800be9a:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800be9c:	e0ce      	b.n	800c03c <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fb4d 	bl	800c548 <USBH_SetCfg>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f040 80c5 	bne.w	800c040 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2209      	movs	r2, #9
 800beba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bebc:	e0c0      	b.n	800c040 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800becc:	2101      	movs	r1, #1
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fb5d 	bl	800c58e <USBH_SetFeature>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f040 80b4 	bne.w	800c044 <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	220a      	movs	r2, #10
 800bee0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bee2:	e0af      	b.n	800c044 <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	220a      	movs	r2, #10
 800bee8:	701a      	strb	r2, [r3, #0]
      break;
 800beea:	e0ab      	b.n	800c044 <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80a8 	beq.w	800c048 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]
 800bf04:	e017      	b.n	800bf36 <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	33dc      	adds	r3, #220	; 0xdc
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	791a      	ldrb	r2, [r3, #4]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d108      	bne.n	800bf30 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	33dc      	adds	r3, #220	; 0xdc
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	3301      	adds	r3, #1
 800bf34:	73fb      	strb	r3, [r7, #15]
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0e4      	beq.n	800bf06 <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d016      	beq.n	800bf74 <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2206      	movs	r2, #6
 800bf5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bf64:	2103      	movs	r1, #3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf6a:	e06d      	b.n	800c048 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	220d      	movs	r2, #13
 800bf70:	701a      	strb	r2, [r3, #0]
      break;
 800bf72:	e069      	b.n	800c048 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	220d      	movs	r2, #13
 800bf78:	701a      	strb	r2, [r3, #0]
      break;
 800bf7a:	e065      	b.n	800c048 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00f      	beq.n	800bfa6 <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	4798      	blx	r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d156      	bne.n	800c04c <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	220b      	movs	r2, #11
 800bfa2:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bfa4:	e052      	b.n	800c04c <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	220d      	movs	r2, #13
 800bfaa:	701a      	strb	r2, [r3, #0]
      break;
 800bfac:	e04e      	b.n	800c04c <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d04b      	beq.n	800c050 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	4798      	blx	r3
      }
      break;
 800bfc4:	e044      	b.n	800c050 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fdba 	bl	800bb48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d009      	beq.n	800bff2 <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c002:	2105      	movs	r1, #5
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b01      	cmp	r3, #1
 800c012:	d107      	bne.n	800c024 <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fe67 	bl	800bcf0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c022:	e016      	b.n	800c052 <USBH_Process+0x342>
        USBH_LL_Start(phost);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f005 fb71 	bl	801170c <USBH_LL_Start>
      break;
 800c02a:	e012      	b.n	800c052 <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 800c02c:	bf00      	nop
 800c02e:	e010      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c030:	bf00      	nop
 800c032:	e00e      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c034:	bf00      	nop
 800c036:	e00c      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c038:	bf00      	nop
 800c03a:	e00a      	b.n	800c052 <USBH_Process+0x342>
    break;
 800c03c:	bf00      	nop
 800c03e:	e008      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c040:	bf00      	nop
 800c042:	e006      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c044:	bf00      	nop
 800c046:	e004      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c048:	bf00      	nop
 800c04a:	e002      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c04c:	bf00      	nop
 800c04e:	e000      	b.n	800c052 <USBH_Process+0x342>
      break;
 800c050:	bf00      	nop
  }
  return USBH_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af04      	add	r7, sp, #16
 800c062:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c064:	2301      	movs	r3, #1
 800c066:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	2b07      	cmp	r3, #7
 800c06e:	f200 80f8 	bhi.w	800c262 <USBH_HandleEnum+0x206>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <USBH_HandleEnum+0x1c>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c099 	.word	0x0800c099
 800c07c:	0800c10b 	.word	0x0800c10b
 800c080:	0800c123 	.word	0x0800c123
 800c084:	0800c199 	.word	0x0800c199
 800c088:	0800c1af 	.word	0x0800c1af
 800c08c:	0800c1cb 	.word	0x0800c1cb
 800c090:	0800c1ff 	.word	0x0800c1ff
 800c094:	0800c233 	.word	0x0800c233
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800c098:	2108      	movs	r1, #8
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f984 	bl	800c3a8 <USBH_Get_DevDesc>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f040 80df 	bne.w	800c266 <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7919      	ldrb	r1, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c0cc:	b292      	uxth	r2, r2
 800c0ce:	9202      	str	r2, [sp, #8]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	9201      	str	r2, [sp, #4]
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2280      	movs	r2, #128	; 0x80
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fea8 	bl	800ce30 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	7959      	ldrb	r1, [r3, #5]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c0f4:	b292      	uxth	r2, r2
 800c0f6:	9202      	str	r2, [sp, #8]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	9201      	str	r2, [sp, #4]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	4603      	mov	r3, r0
 800c100:	2200      	movs	r2, #0
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fe94 	bl	800ce30 <USBH_OpenPipe>
      }
      break;
 800c108:	e0ad      	b.n	800c266 <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800c10a:	2112      	movs	r1, #18
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f94b 	bl	800c3a8 <USBH_Get_DevDesc>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	f040 80a8 	bne.w	800c26a <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2202      	movs	r2, #2
 800c11e:	705a      	strb	r2, [r3, #1]

      }
      break;
 800c120:	e0a3      	b.n	800c26a <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800c122:	2101      	movs	r1, #1
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f9eb 	bl	800c500 <USBH_SetAddress>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 809e 	bne.w	800c26e <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 800c132:	2002      	movs	r0, #2
 800c134:	f005 fc7c 	bl	8011a30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2203      	movs	r2, #3
 800c144:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7919      	ldrb	r1, [r3, #4]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c15a:	b292      	uxth	r2, r2
 800c15c:	9202      	str	r2, [sp, #8]
 800c15e:	2200      	movs	r2, #0
 800c160:	9201      	str	r2, [sp, #4]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	4603      	mov	r3, r0
 800c166:	2280      	movs	r2, #128	; 0x80
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fe61 	bl	800ce30 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7959      	ldrb	r1, [r3, #5]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c182:	b292      	uxth	r2, r2
 800c184:	9202      	str	r2, [sp, #8]
 800c186:	2200      	movs	r2, #0
 800c188:	9201      	str	r2, [sp, #4]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	4603      	mov	r3, r0
 800c18e:	2200      	movs	r2, #0
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fe4d 	bl	800ce30 <USBH_OpenPipe>
      }
      break;
 800c196:	e06a      	b.n	800c26e <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800c198:	2109      	movs	r1, #9
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f92c 	bl	800c3f8 <USBH_Get_CfgDesc>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d165      	bne.n	800c272 <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c1ac:	e061      	b.n	800c272 <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 f91e 	bl	800c3f8 <USBH_Get_CfgDesc>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d159      	bne.n	800c276 <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2205      	movs	r2, #5
 800c1c6:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c1c8:	e055      	b.n	800c276 <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d010      	beq.n	800c1f6 <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800c1e0:	23ff      	movs	r3, #255	; 0xff
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f92c 	bl	800c440 <USBH_Get_StringDesc>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d145      	bne.n	800c27a <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2206      	movs	r2, #6
 800c1f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c1f4:	e041      	b.n	800c27a <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2206      	movs	r2, #6
 800c1fa:	705a      	strb	r2, [r3, #1]
      break;
 800c1fc:	e03d      	b.n	800c27a <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800c204:	2b00      	cmp	r3, #0
 800c206:	d010      	beq.n	800c22a <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800c214:	23ff      	movs	r3, #255	; 0xff
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f912 	bl	800c440 <USBH_Get_StringDesc>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d12d      	bne.n	800c27e <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2207      	movs	r2, #7
 800c226:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c228:	e029      	b.n	800c27e <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2207      	movs	r2, #7
 800c22e:	705a      	strb	r2, [r3, #1]
      break;
 800c230:	e025      	b.n	800c27e <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00f      	beq.n	800c25c <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800c248:	23ff      	movs	r3, #255	; 0xff
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f8f8 	bl	800c440 <USBH_Get_StringDesc>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d115      	bne.n	800c282 <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c25a:	e012      	b.n	800c282 <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	73fb      	strb	r3, [r7, #15]
      break;
 800c260:	e00f      	b.n	800c282 <USBH_HandleEnum+0x226>

    default:
      break;
 800c262:	bf00      	nop
 800c264:	e00e      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c266:	bf00      	nop
 800c268:	e00c      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c26a:	bf00      	nop
 800c26c:	e00a      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c26e:	bf00      	nop
 800c270:	e008      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c272:	bf00      	nop
 800c274:	e006      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c276:	bf00      	nop
 800c278:	e004      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c27a:	bf00      	nop
 800c27c:	e002      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c27e:	bf00      	nop
 800c280:	e000      	b.n	800c284 <USBH_HandleEnum+0x228>
      break;
 800c282:	bf00      	nop
  }
  return Status;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop

0800c290 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bc80      	pop	{r7}
 800c2aa:	4770      	bx	lr

0800c2ac <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f804 	bl	800c2d0 <USBH_HandleSof>
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b0b      	cmp	r3, #11
 800c2e0:	d10a      	bne.n	800c2f8 <USBH_HandleSof+0x28>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d005      	beq.n	800c2f8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	4798      	blx	r3
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c310:	bf00      	nop
}
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	bc80      	pop	{r7}
 800c318:	4770      	bx	lr

0800c31a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800c32a:	bf00      	nop
}
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	bc80      	pop	{r7}
 800c332:	4770      	bx	lr

0800c334 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bc80      	pop	{r7}
 800c35e:	4770      	bx	lr

0800c360 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f005 f9de 	bl	8011742 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	791b      	ldrb	r3, [r3, #4]
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fd9e 	bl	800cece <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	795b      	ldrb	r3, [r3, #5]
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fd98 	bl	800cece <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c3ba:	78fb      	ldrb	r3, [r7, #3]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f864 	bl	800c496 <USBH_GetDescriptor>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73fb      	strb	r3, [r7, #15]
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c3e4:	78fa      	ldrb	r2, [r7, #3]
 800c3e6:	b292      	uxth	r2, r2
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f000 f918 	bl	800c61e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	331c      	adds	r3, #28
 800c408:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c40a:	887b      	ldrh	r3, [r7, #2]
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c414:	2100      	movs	r1, #0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f83d 	bl	800c496 <USBH_GetDescriptor>
 800c41c:	4603      	mov	r3, r0
 800c41e:	72fb      	strb	r3, [r7, #11]
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d107      	bne.n	800c436 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f203 3336 	addw	r3, r3, #822	; 0x336
 800c42c:	887a      	ldrh	r2, [r7, #2]
 800c42e:	68f9      	ldr	r1, [r7, #12]
 800c430:	4618      	mov	r0, r3
 800c432:	f000 f963 	bl	800c6fc <USBH_ParseCfgDesc>
  }

  return status;
 800c436:	7afb      	ldrb	r3, [r7, #11]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af02      	add	r7, sp, #8
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	607a      	str	r2, [r7, #4]
 800c44a:	461a      	mov	r2, r3
 800c44c:	460b      	mov	r3, r1
 800c44e:	72fb      	strb	r3, [r7, #11]
 800c450:	4613      	mov	r3, r2
 800c452:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	b29b      	uxth	r3, r3
 800c458:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c45c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c464:	893b      	ldrh	r3, [r7, #8]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	460b      	mov	r3, r1
 800c46a:	2100      	movs	r1, #0
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 f812 	bl	800c496 <USBH_GetDescriptor>
 800c472:	4603      	mov	r3, r0
 800c474:	75fb      	strb	r3, [r7, #23]
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d107      	bne.n	800c48c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c482:	893a      	ldrh	r2, [r7, #8]
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fa34 	bl	800c8f4 <USBH_ParseStringDesc>
  }

  return status;
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	607b      	str	r3, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	72fb      	strb	r3, [r7, #11]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	789b      	ldrb	r3, [r3, #2]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d11c      	bne.n	800c4ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c4b0:	7afb      	ldrb	r3, [r7, #11]
 800c4b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2206      	movs	r2, #6
 800c4c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	893a      	ldrh	r2, [r7, #8]
 800c4c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c4c8:	893b      	ldrh	r3, [r7, #8]
 800c4ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c4ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4d2:	d104      	bne.n	800c4de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f240 4209 	movw	r2, #1033	; 0x409
 800c4da:	829a      	strh	r2, [r3, #20]
 800c4dc:	e002      	b.n	800c4e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	8b3a      	ldrh	r2, [r7, #24]
 800c4e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c4ea:	8b3b      	ldrh	r3, [r7, #24]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 fa4b 	bl	800c98c <USBH_CtlReq>
 800c4f6:	4603      	mov	r3, r0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	789b      	ldrb	r3, [r3, #2]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d10f      	bne.n	800c534 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2205      	movs	r2, #5
 800c51e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	b29a      	uxth	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c534:	2200      	movs	r2, #0
 800c536:	2100      	movs	r1, #0
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fa27 	bl	800c98c <USBH_CtlReq>
 800c53e:	4603      	mov	r3, r0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	789b      	ldrb	r3, [r3, #2]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d10e      	bne.n	800c57a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2209      	movs	r2, #9
 800c566:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	887a      	ldrh	r2, [r7, #2]
 800c56c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c57a:	2200      	movs	r2, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fa04 	bl	800c98c <USBH_CtlReq>
 800c584:	4603      	mov	r3, r0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	460b      	mov	r3, r1
 800c598:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	789b      	ldrb	r3, [r3, #2]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d10f      	bne.n	800c5c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c5ae:	78fb      	ldrb	r3, [r7, #3]
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f9e0 	bl	800c98c <USBH_CtlReq>
 800c5cc:	4603      	mov	r3, r0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	789b      	ldrb	r3, [r3, #2]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d10f      	bne.n	800c60a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2202      	movs	r2, #2
 800c5ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c60a:	2200      	movs	r2, #0
 800c60c:	2100      	movs	r1, #0
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f9bc 	bl	800c98c <USBH_CtlReq>
 800c614:	4603      	mov	r3, r0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c61e:	b480      	push	{r7}
 800c620:	b085      	sub	sp, #20
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	4613      	mov	r3, r2
 800c62a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	781a      	ldrb	r2, [r3, #0]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	785a      	ldrb	r2, [r3, #1]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	3302      	adds	r3, #2
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	b29a      	uxth	r2, r3
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	3303      	adds	r3, #3
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b29a      	uxth	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	791a      	ldrb	r2, [r3, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	795a      	ldrb	r2, [r3, #5]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	799a      	ldrb	r2, [r3, #6]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	79da      	ldrb	r2, [r3, #7]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	2b08      	cmp	r3, #8
 800c67c:	d939      	bls.n	800c6f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	3308      	adds	r3, #8
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	b29a      	uxth	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	3309      	adds	r3, #9
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	b29b      	uxth	r3, r3
 800c692:	4313      	orrs	r3, r2
 800c694:	b29a      	uxth	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	330a      	adds	r3, #10
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	330b      	adds	r3, #11
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	330d      	adds	r3, #13
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	021b      	lsls	r3, r3, #8
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	7b9a      	ldrb	r2, [r3, #14]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	7bda      	ldrb	r2, [r3, #15]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	7c1a      	ldrb	r2, [r3, #16]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	7c5a      	ldrb	r2, [r3, #17]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	745a      	strb	r2, [r3, #17]
  }
}
 800c6f2:	bf00      	nop
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bc80      	pop	{r7}
 800c6fa:	4770      	bx	lr

0800c6fc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	; 0x28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	4613      	mov	r3, r2
 800c708:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	785a      	ldrb	r2, [r3, #1]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	3302      	adds	r3, #2
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	b29a      	uxth	r2, r3
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	3303      	adds	r3, #3
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	021b      	lsls	r3, r3, #8
 800c740:	b29b      	uxth	r3, r3
 800c742:	4313      	orrs	r3, r2
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	791a      	ldrb	r2, [r3, #4]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	795a      	ldrb	r2, [r3, #5]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	799a      	ldrb	r2, [r3, #6]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	79da      	ldrb	r2, [r3, #7]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	7a1a      	ldrb	r2, [r3, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c772:	88fb      	ldrh	r3, [r7, #6]
 800c774:	2b09      	cmp	r3, #9
 800c776:	d95f      	bls.n	800c838 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c778:	2309      	movs	r3, #9
 800c77a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c780:	e051      	b.n	800c826 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c782:	f107 0316 	add.w	r3, r7, #22
 800c786:	4619      	mov	r1, r3
 800c788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c78a:	f000 f8e5 	bl	800c958 <USBH_GetNextDesc>
 800c78e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	785b      	ldrb	r3, [r3, #1]
 800c794:	2b04      	cmp	r3, #4
 800c796:	d146      	bne.n	800c826 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c79c:	221a      	movs	r2, #26
 800c79e:	fb02 f303 	mul.w	r3, r2, r3
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3302      	adds	r3, #2
 800c7aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7ae:	69f8      	ldr	r0, [r7, #28]
 800c7b0:	f000 f846 	bl	800c840 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c7be:	e022      	b.n	800c806 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c7c0:	f107 0316 	add.w	r3, r7, #22
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7c8:	f000 f8c6 	bl	800c958 <USBH_GetNextDesc>
 800c7cc:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	785b      	ldrb	r3, [r3, #1]
 800c7d2:	2b05      	cmp	r3, #5
 800c7d4:	d117      	bne.n	800c806 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c7d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c7da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c7de:	3201      	adds	r2, #1
 800c7e0:	00d2      	lsls	r2, r2, #3
 800c7e2:	211a      	movs	r1, #26
 800c7e4:	fb01 f303 	mul.w	r3, r1, r3
 800c7e8:	4413      	add	r3, r2
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7f6:	69b8      	ldr	r0, [r7, #24]
 800c7f8:	f000 f850 	bl	800c89c <USBH_ParseEPDesc>
            ep_ix++;
 800c7fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c800:	3301      	adds	r3, #1
 800c802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	791b      	ldrb	r3, [r3, #4]
 800c80a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c80e:	429a      	cmp	r2, r3
 800c810:	d204      	bcs.n	800c81c <USBH_ParseCfgDesc+0x120>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	885a      	ldrh	r2, [r3, #2]
 800c816:	8afb      	ldrh	r3, [r7, #22]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d8d1      	bhi.n	800c7c0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c81c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c820:	3301      	adds	r3, #1
 800c822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c826:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d804      	bhi.n	800c838 <USBH_ParseCfgDesc+0x13c>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	885a      	ldrh	r2, [r3, #2]
 800c832:	8afb      	ldrh	r3, [r7, #22]
 800c834:	429a      	cmp	r2, r3
 800c836:	d8a4      	bhi.n	800c782 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c838:	bf00      	nop
 800c83a:	3728      	adds	r7, #40	; 0x28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781a      	ldrb	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	785a      	ldrb	r2, [r3, #1]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	789a      	ldrb	r2, [r3, #2]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	78da      	ldrb	r2, [r3, #3]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	791a      	ldrb	r2, [r3, #4]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	795a      	ldrb	r2, [r3, #5]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	799a      	ldrb	r2, [r3, #6]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	79da      	ldrb	r2, [r3, #7]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	7a1a      	ldrb	r2, [r3, #8]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	721a      	strb	r2, [r3, #8]
}
 800c892:	bf00      	nop
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr

0800c89c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	785a      	ldrb	r2, [r3, #1]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	789a      	ldrb	r2, [r3, #2]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	78da      	ldrb	r2, [r3, #3]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	3305      	adds	r3, #5
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	021b      	lsls	r3, r3, #8
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	799a      	ldrb	r2, [r3, #6]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	719a      	strb	r2, [r3, #6]
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bc80      	pop	{r7}
 800c8f2:	4770      	bx	lr

0800c8f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	4613      	mov	r3, r2
 800c900:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d120      	bne.n	800c94e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	1e9a      	subs	r2, r3, #2
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	4293      	cmp	r3, r2
 800c916:	bf28      	it	cs
 800c918:	4613      	movcs	r3, r2
 800c91a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3302      	adds	r3, #2
 800c920:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c922:	2300      	movs	r3, #0
 800c924:	82fb      	strh	r3, [r7, #22]
 800c926:	e00b      	b.n	800c940 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c928:	8afb      	ldrh	r3, [r7, #22]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4413      	add	r3, r2
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	3301      	adds	r3, #1
 800c938:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c93a:	8afb      	ldrh	r3, [r7, #22]
 800c93c:	3302      	adds	r3, #2
 800c93e:	82fb      	strh	r3, [r7, #22]
 800c940:	8afa      	ldrh	r2, [r7, #22]
 800c942:	8abb      	ldrh	r3, [r7, #20]
 800c944:	429a      	cmp	r2, r3
 800c946:	d3ef      	bcc.n	800c928 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]
  }
}
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	bc80      	pop	{r7}
 800c956:	4770      	bx	lr

0800c958 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	881a      	ldrh	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4413      	add	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4413      	add	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c980:	68fb      	ldr	r3, [r7, #12]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	bc80      	pop	{r7}
 800c98a:	4770      	bx	lr

0800c98c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4613      	mov	r3, r2
 800c998:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c99a:	2301      	movs	r3, #1
 800c99c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	789b      	ldrb	r3, [r3, #2]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d002      	beq.n	800c9ac <USBH_CtlReq+0x20>
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d00f      	beq.n	800c9ca <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800c9aa:	e034      	b.n	800ca16 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	88fa      	ldrh	r2, [r7, #6]
 800c9b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c9c8:	e025      	b.n	800ca16 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f828 	bl	800ca20 <USBH_HandleControl>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d108      	bne.n	800c9ec <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c9ea:	e013      	b.n	800ca14 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d108      	bne.n	800ca04 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	75fb      	strb	r3, [r7, #23]
      break;
 800ca02:	e007      	b.n	800ca14 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d104      	bne.n	800ca14 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800ca10:	2302      	movs	r3, #2
 800ca12:	75fb      	strb	r3, [r7, #23]
      break;
 800ca14:	bf00      	nop
  }
  return status;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7e1b      	ldrb	r3, [r3, #24]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	2b0a      	cmp	r3, #10
 800ca38:	f200 814a 	bhi.w	800ccd0 <USBH_HandleControl+0x2b0>
 800ca3c:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <USBH_HandleControl+0x24>)
 800ca3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca42:	bf00      	nop
 800ca44:	0800ca71 	.word	0x0800ca71
 800ca48:	0800ca8b 	.word	0x0800ca8b
 800ca4c:	0800caf5 	.word	0x0800caf5
 800ca50:	0800cb1b 	.word	0x0800cb1b
 800ca54:	0800cb53 	.word	0x0800cb53
 800ca58:	0800cb7d 	.word	0x0800cb7d
 800ca5c:	0800cbcf 	.word	0x0800cbcf
 800ca60:	0800cbf1 	.word	0x0800cbf1
 800ca64:	0800cc2d 	.word	0x0800cc2d
 800ca68:	0800cc53 	.word	0x0800cc53
 800ca6c:	0800cc91 	.word	0x0800cc91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f103 0110 	add.w	r1, r3, #16
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	795b      	ldrb	r3, [r3, #5]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f937 	bl	800ccf0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2202      	movs	r2, #2
 800ca86:	761a      	strb	r2, [r3, #24]
      break;
 800ca88:	e12d      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	795b      	ldrb	r3, [r3, #5]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f004 ff45 	bl	8011920 <USBH_LL_GetURBState>
 800ca96:	4603      	mov	r3, r0
 800ca98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d11e      	bne.n	800cade <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	7c1b      	ldrb	r3, [r3, #16]
 800caa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800caa8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	8adb      	ldrh	r3, [r3, #22]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cab2:	7b7b      	ldrb	r3, [r7, #13]
 800cab4:	2b80      	cmp	r3, #128	; 0x80
 800cab6:	d103      	bne.n	800cac0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2203      	movs	r2, #3
 800cabc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cabe:	e109      	b.n	800ccd4 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_DATA_OUT;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2205      	movs	r2, #5
 800cac4:	761a      	strb	r2, [r3, #24]
      break;
 800cac6:	e105      	b.n	800ccd4 <USBH_HandleControl+0x2b4>
          if (direction == USB_D2H)
 800cac8:	7b7b      	ldrb	r3, [r7, #13]
 800caca:	2b80      	cmp	r3, #128	; 0x80
 800cacc:	d103      	bne.n	800cad6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2209      	movs	r2, #9
 800cad2:	761a      	strb	r2, [r3, #24]
      break;
 800cad4:	e0fe      	b.n	800ccd4 <USBH_HandleControl+0x2b4>
            phost->Control.state = CTRL_STATUS_IN;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2207      	movs	r2, #7
 800cada:	761a      	strb	r2, [r3, #24]
      break;
 800cadc:	e0fa      	b.n	800ccd4 <USBH_HandleControl+0x2b4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	d003      	beq.n	800caec <USBH_HandleControl+0xcc>
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	f040 80f4 	bne.w	800ccd4 <USBH_HandleControl+0x2b4>
          phost->Control.state = CTRL_ERROR;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	220b      	movs	r2, #11
 800caf0:	761a      	strb	r2, [r3, #24]
      break;
 800caf2:	e0ef      	b.n	800ccd4 <USBH_HandleControl+0x2b4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6899      	ldr	r1, [r3, #8]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	899a      	ldrh	r2, [r3, #12]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	791b      	ldrb	r3, [r3, #4]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f92e 	bl	800cd6e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2204      	movs	r2, #4
 800cb16:	761a      	strb	r2, [r3, #24]
      break;
 800cb18:	e0e5      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	791b      	ldrb	r3, [r3, #4]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f004 fefd 	bl	8011920 <USBH_LL_GetURBState>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d102      	bne.n	800cb36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2209      	movs	r2, #9
 800cb34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	2b05      	cmp	r3, #5
 800cb3a:	d102      	bne.n	800cb42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cb40:	e0ca      	b.n	800ccd8 <USBH_HandleControl+0x2b8>
        if (URB_Status == USBH_URB_ERROR)
 800cb42:	7bbb      	ldrb	r3, [r7, #14]
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	f040 80c7 	bne.w	800ccd8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	220b      	movs	r2, #11
 800cb4e:	761a      	strb	r2, [r3, #24]
      break;
 800cb50:	e0c2      	b.n	800ccd8 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6899      	ldr	r1, [r3, #8]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	899a      	ldrh	r2, [r3, #12]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	795b      	ldrb	r3, [r3, #5]
 800cb5e:	2001      	movs	r0, #1
 800cb60:	9000      	str	r0, [sp, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f8de 	bl	800cd24 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2206      	movs	r2, #6
 800cb78:	761a      	strb	r2, [r3, #24]
      break;
 800cb7a:	e0b4      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	795b      	ldrb	r3, [r3, #5]
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f004 fecc 	bl	8011920 <USBH_LL_GetURBState>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d103      	bne.n	800cb9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2207      	movs	r2, #7
 800cb96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cb98:	e0a0      	b.n	800ccdc <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_STALL)
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
 800cb9c:	2b05      	cmp	r3, #5
 800cb9e:	d105      	bne.n	800cbac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	220c      	movs	r2, #12
 800cba4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cba6:	2303      	movs	r3, #3
 800cba8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbaa:	e097      	b.n	800ccdc <USBH_HandleControl+0x2bc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d103      	bne.n	800cbba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2205      	movs	r2, #5
 800cbb6:	761a      	strb	r2, [r3, #24]
      break;
 800cbb8:	e090      	b.n	800ccdc <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	f040 808d 	bne.w	800ccdc <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	220b      	movs	r2, #11
 800cbc6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	73fb      	strb	r3, [r7, #15]
      break;
 800cbcc:	e086      	b.n	800ccdc <USBH_HandleControl+0x2bc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f8c9 	bl	800cd6e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2208      	movs	r2, #8
 800cbec:	761a      	strb	r2, [r3, #24]

      break;
 800cbee:	e07a      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	791b      	ldrb	r3, [r3, #4]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f004 fe92 	bl	8011920 <USBH_LL_GetURBState>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d105      	bne.n	800cc12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	220d      	movs	r2, #13
 800cc0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cc10:	e066      	b.n	800cce0 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_ERROR)
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	2b04      	cmp	r3, #4
 800cc16:	d103      	bne.n	800cc20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	220b      	movs	r2, #11
 800cc1c:	761a      	strb	r2, [r3, #24]
      break;
 800cc1e:	e05f      	b.n	800cce0 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_STALL)
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b05      	cmp	r3, #5
 800cc24:	d15c      	bne.n	800cce0 <USBH_HandleControl+0x2c0>
          status = USBH_NOT_SUPPORTED;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
      break;
 800cc2a:	e059      	b.n	800cce0 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	795b      	ldrb	r3, [r3, #5]
 800cc30:	2201      	movs	r2, #1
 800cc32:	9200      	str	r2, [sp, #0]
 800cc34:	2200      	movs	r2, #0
 800cc36:	2100      	movs	r1, #0
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f873 	bl	800cd24 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	220a      	movs	r2, #10
 800cc4e:	761a      	strb	r2, [r3, #24]
      break;
 800cc50:	e049      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	795b      	ldrb	r3, [r3, #5]
 800cc56:	4619      	mov	r1, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f004 fe61 	bl	8011920 <USBH_LL_GetURBState>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d105      	bne.n	800cc74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	220d      	movs	r2, #13
 800cc70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cc72:	e037      	b.n	800cce4 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d103      	bne.n	800cc82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2209      	movs	r2, #9
 800cc7e:	761a      	strb	r2, [r3, #24]
      break;
 800cc80:	e030      	b.n	800cce4 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_ERROR)
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d12d      	bne.n	800cce4 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_ERROR;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	220b      	movs	r2, #11
 800cc8c:	761a      	strb	r2, [r3, #24]
      break;
 800cc8e:	e029      	b.n	800cce4 <USBH_HandleControl+0x2c4>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7e5b      	ldrb	r3, [r3, #25]
 800cc94:	3301      	adds	r3, #1
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	765a      	strb	r2, [r3, #25]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7e5b      	ldrb	r3, [r3, #25]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d806      	bhi.n	800ccb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ccb0:	e019      	b.n	800cce6 <USBH_HandleControl+0x2c6>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ccb8:	2106      	movs	r1, #6
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ccca:	2302      	movs	r3, #2
 800cccc:	73fb      	strb	r3, [r7, #15]
      break;
 800ccce:	e00a      	b.n	800cce6 <USBH_HandleControl+0x2c6>

    default:
      break;
 800ccd0:	bf00      	nop
 800ccd2:	e008      	b.n	800cce6 <USBH_HandleControl+0x2c6>
      break;
 800ccd4:	bf00      	nop
 800ccd6:	e006      	b.n	800cce6 <USBH_HandleControl+0x2c6>
      break;
 800ccd8:	bf00      	nop
 800ccda:	e004      	b.n	800cce6 <USBH_HandleControl+0x2c6>
      break;
 800ccdc:	bf00      	nop
 800ccde:	e002      	b.n	800cce6 <USBH_HandleControl+0x2c6>
      break;
 800cce0:	bf00      	nop
 800cce2:	e000      	b.n	800cce6 <USBH_HandleControl+0x2c6>
      break;
 800cce4:	bf00      	nop
  }

  return status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af04      	add	r7, sp, #16
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ccfe:	79f9      	ldrb	r1, [r7, #7]
 800cd00:	2300      	movs	r3, #0
 800cd02:	9303      	str	r3, [sp, #12]
 800cd04:	2308      	movs	r3, #8
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2300      	movs	r3, #0
 800cd12:	2200      	movs	r2, #0
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f004 fdd2 	bl	80118be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af04      	add	r7, sp, #16
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4611      	mov	r1, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	460b      	mov	r3, r1
 800cd34:	80fb      	strh	r3, [r7, #6]
 800cd36:	4613      	mov	r3, r2
 800cd38:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cd48:	7979      	ldrb	r1, [r7, #5]
 800cd4a:	7e3b      	ldrb	r3, [r7, #24]
 800cd4c:	9303      	str	r3, [sp, #12]
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	9301      	str	r3, [sp, #4]
 800cd56:	2301      	movs	r3, #1
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f004 fdad 	bl	80118be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b088      	sub	sp, #32
 800cd72:	af04      	add	r7, sp, #16
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	80fb      	strh	r3, [r7, #6]
 800cd80:	4613      	mov	r3, r2
 800cd82:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cd84:	7979      	ldrb	r1, [r7, #5]
 800cd86:	2300      	movs	r3, #0
 800cd88:	9303      	str	r3, [sp, #12]
 800cd8a:	88fb      	ldrh	r3, [r7, #6]
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	2301      	movs	r3, #1
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	2300      	movs	r3, #0
 800cd98:	2201      	movs	r2, #1
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f004 fd8f 	bl	80118be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cda0:	2300      	movs	r3, #0

}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b088      	sub	sp, #32
 800cdae:	af04      	add	r7, sp, #16
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	460b      	mov	r3, r1
 800cdba:	80fb      	strh	r3, [r7, #6]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cdce:	7979      	ldrb	r1, [r7, #5]
 800cdd0:	7e3b      	ldrb	r3, [r7, #24]
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	9302      	str	r3, [sp, #8]
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	2301      	movs	r3, #1
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	2302      	movs	r3, #2
 800cde2:	2200      	movs	r2, #0
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f004 fd6a 	bl	80118be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af04      	add	r7, sp, #16
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	4611      	mov	r1, r2
 800ce00:	461a      	mov	r2, r3
 800ce02:	460b      	mov	r3, r1
 800ce04:	80fb      	strh	r3, [r7, #6]
 800ce06:	4613      	mov	r3, r2
 800ce08:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ce0a:	7979      	ldrb	r1, [r7, #5]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	88fb      	ldrh	r3, [r7, #6]
 800ce12:	9302      	str	r3, [sp, #8]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	2301      	movs	r3, #1
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	2201      	movs	r2, #1
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f004 fd4c 	bl	80118be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af04      	add	r7, sp, #16
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4603      	mov	r3, r0
 800ce40:	70fb      	strb	r3, [r7, #3]
 800ce42:	460b      	mov	r3, r1
 800ce44:	70bb      	strb	r3, [r7, #2]
 800ce46:	4613      	mov	r3, r2
 800ce48:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ce4a:	7878      	ldrb	r0, [r7, #1]
 800ce4c:	78ba      	ldrb	r2, [r7, #2]
 800ce4e:	78f9      	ldrb	r1, [r7, #3]
 800ce50:	8b3b      	ldrh	r3, [r7, #24]
 800ce52:	9302      	str	r3, [sp, #8]
 800ce54:	7d3b      	ldrb	r3, [r7, #20]
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	7c3b      	ldrb	r3, [r7, #16]
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f004 fcdf 	bl	8011822 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b082      	sub	sp, #8
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f004 fcfe 	bl	8011880 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f832 	bl	800cf04 <USBH_GetFreePipe>
 800cea0:	4603      	mov	r3, r0
 800cea2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cea4:	89fb      	ldrh	r3, [r7, #14]
 800cea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d009      	beq.n	800cec2 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ceae:	78fb      	ldrb	r3, [r7, #3]
 800ceb0:	89fa      	ldrh	r2, [r7, #14]
 800ceb2:	f002 020f 	and.w	r2, r2, #15
 800ceb6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	32e0      	adds	r2, #224	; 0xe0
 800cebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800cec2:	89fb      	ldrh	r3, [r7, #14]
 800cec4:	b2db      	uxtb	r3, r3
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	460b      	mov	r3, r1
 800ced8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	2b0a      	cmp	r3, #10
 800cede:	d80b      	bhi.n	800cef8 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cee0:	78fa      	ldrb	r2, [r7, #3]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	32e0      	adds	r2, #224	; 0xe0
 800cee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceea:	78fa      	ldrb	r2, [r7, #3]
 800ceec:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	32e0      	adds	r2, #224	; 0xe0
 800cef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr

0800cf04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800cf10:	2300      	movs	r3, #0
 800cf12:	73fb      	strb	r3, [r7, #15]
 800cf14:	e00e      	b.n	800cf34 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cf16:	7bfa      	ldrb	r2, [r7, #15]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	32e0      	adds	r2, #224	; 0xe0
 800cf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	e007      	b.n	800cf3e <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
 800cf30:	3301      	adds	r3, #1
 800cf32:	73fb      	strb	r3, [r7, #15]
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b0a      	cmp	r3, #10
 800cf38:	d9ed      	bls.n	800cf16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cf3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bc80      	pop	{r7}
 800cf46:	4770      	bx	lr

0800cf48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	4a08      	ldr	r2, [pc, #32]	; (800cf78 <disk_status+0x30>)
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	79fa      	ldrb	r2, [r7, #7]
 800cf60:	4905      	ldr	r1, [pc, #20]	; (800cf78 <disk_status+0x30>)
 800cf62:	440a      	add	r2, r1
 800cf64:	7a12      	ldrb	r2, [r2, #8]
 800cf66:	4610      	mov	r0, r2
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	200057ec 	.word	0x200057ec

0800cf7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	4a0d      	ldr	r2, [pc, #52]	; (800cfc4 <disk_initialize+0x48>)
 800cf8e:	5cd3      	ldrb	r3, [r2, r3]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d111      	bne.n	800cfb8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4a0b      	ldr	r2, [pc, #44]	; (800cfc4 <disk_initialize+0x48>)
 800cf98:	2101      	movs	r1, #1
 800cf9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	4a09      	ldr	r2, [pc, #36]	; (800cfc4 <disk_initialize+0x48>)
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	79fa      	ldrb	r2, [r7, #7]
 800cfaa:	4906      	ldr	r1, [pc, #24]	; (800cfc4 <disk_initialize+0x48>)
 800cfac:	440a      	add	r2, r1
 800cfae:	7a12      	ldrb	r2, [r2, #8]
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4798      	blx	r3
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200057ec 	.word	0x200057ec

0800cfc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfc8:	b590      	push	{r4, r7, lr}
 800cfca:	b087      	sub	sp, #28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	607a      	str	r2, [r7, #4]
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
 800cfda:	4a0a      	ldr	r2, [pc, #40]	; (800d004 <disk_read+0x3c>)
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4413      	add	r3, r2
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	689c      	ldr	r4, [r3, #8]
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	4a07      	ldr	r2, [pc, #28]	; (800d004 <disk_read+0x3c>)
 800cfe8:	4413      	add	r3, r2
 800cfea:	7a18      	ldrb	r0, [r3, #8]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	47a0      	blx	r4
 800cff4:	4603      	mov	r3, r0
 800cff6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd90      	pop	{r4, r7, pc}
 800d002:	bf00      	nop
 800d004:	200057ec 	.word	0x200057ec

0800d008 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	603b      	str	r3, [r7, #0]
 800d014:	4603      	mov	r3, r0
 800d016:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	4a0a      	ldr	r2, [pc, #40]	; (800d044 <disk_write+0x3c>)
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	68dc      	ldr	r4, [r3, #12]
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4a07      	ldr	r2, [pc, #28]	; (800d044 <disk_write+0x3c>)
 800d028:	4413      	add	r3, r2
 800d02a:	7a18      	ldrb	r0, [r3, #8]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	68b9      	ldr	r1, [r7, #8]
 800d032:	47a0      	blx	r4
 800d034:	4603      	mov	r3, r0
 800d036:	75fb      	strb	r3, [r7, #23]
  return res;
 800d038:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd90      	pop	{r4, r7, pc}
 800d042:	bf00      	nop
 800d044:	200057ec 	.word	0x200057ec

0800d048 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4603      	mov	r3, r0
 800d050:	603a      	str	r2, [r7, #0]
 800d052:	71fb      	strb	r3, [r7, #7]
 800d054:	460b      	mov	r3, r1
 800d056:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d058:	79fb      	ldrb	r3, [r7, #7]
 800d05a:	4a09      	ldr	r2, [pc, #36]	; (800d080 <disk_ioctl+0x38>)
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	79fa      	ldrb	r2, [r7, #7]
 800d066:	4906      	ldr	r1, [pc, #24]	; (800d080 <disk_ioctl+0x38>)
 800d068:	440a      	add	r2, r1
 800d06a:	7a10      	ldrb	r0, [r2, #8]
 800d06c:	79b9      	ldrb	r1, [r7, #6]
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	4798      	blx	r3
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]
  return res;
 800d076:	7bfb      	ldrb	r3, [r7, #15]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	200057ec 	.word	0x200057ec

0800d084 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d084:	b480      	push	{r7}
 800d086:	b087      	sub	sp, #28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800d098:	e007      	b.n	800d0aa <mem_cpy+0x26>
		*d++ = *s++;
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	1c53      	adds	r3, r2, #1
 800d09e:	613b      	str	r3, [r7, #16]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	1c59      	adds	r1, r3, #1
 800d0a4:	6179      	str	r1, [r7, #20]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	1e5a      	subs	r2, r3, #1
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1f2      	bne.n	800d09a <mem_cpy+0x16>
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	371c      	adds	r7, #28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bc80      	pop	{r7}
 800d0be:	4770      	bx	lr

0800d0c0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800d0d0:	e005      	b.n	800d0de <mem_set+0x1e>
		*d++ = (BYTE)val;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	617a      	str	r2, [r7, #20]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	b2d2      	uxtb	r2, r2
 800d0dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	1e5a      	subs	r2, r3, #1
 800d0e2:	607a      	str	r2, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1f4      	bne.n	800d0d2 <mem_set+0x12>
}
 800d0e8:	bf00      	nop
 800d0ea:	bf00      	nop
 800d0ec:	371c      	adds	r7, #28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bc80      	pop	{r7}
 800d0f2:	4770      	bx	lr

0800d0f4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800d0f4:	b480      	push	{r7}
 800d0f6:	b089      	sub	sp, #36	; 0x24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	61fb      	str	r3, [r7, #28]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800d10c:	bf00      	nop
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	1e5a      	subs	r2, r3, #1
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00d      	beq.n	800d134 <mem_cmp+0x40>
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	61fa      	str	r2, [r7, #28]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	4619      	mov	r1, r3
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	1c5a      	adds	r2, r3, #1
 800d126:	61ba      	str	r2, [r7, #24]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	1acb      	subs	r3, r1, r3
 800d12c:	617b      	str	r3, [r7, #20]
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d0ec      	beq.n	800d10e <mem_cmp+0x1a>
	return r;
 800d134:	697b      	ldr	r3, [r7, #20]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3724      	adds	r7, #36	; 0x24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d14a:	e002      	b.n	800d152 <chk_chr+0x12>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3301      	adds	r3, #1
 800d150:	607b      	str	r3, [r7, #4]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <chk_chr+0x26>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	4293      	cmp	r3, r2
 800d164:	d1f2      	bne.n	800d14c <chk_chr+0xc>
	return *str;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	781b      	ldrb	r3, [r3, #0]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr

0800d174 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d17e:	2300      	movs	r3, #0
 800d180:	60bb      	str	r3, [r7, #8]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	60fb      	str	r3, [r7, #12]
 800d186:	e03d      	b.n	800d204 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800d188:	4932      	ldr	r1, [pc, #200]	; (800d254 <chk_lock+0xe0>)
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	4613      	mov	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	4413      	add	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	440b      	add	r3, r1
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d02e      	beq.n	800d1fa <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d19c:	492d      	ldr	r1, [pc, #180]	; (800d254 <chk_lock+0xe0>)
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d122      	bne.n	800d1fe <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800d1b8:	4926      	ldr	r1, [pc, #152]	; (800d254 <chk_lock+0xe0>)
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	4413      	add	r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	440b      	add	r3, r1
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d112      	bne.n	800d1fe <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800d1d8:	491e      	ldr	r1, [pc, #120]	; (800d254 <chk_lock+0xe0>)
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	4413      	add	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	440b      	add	r3, r1
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	881a      	ldrh	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f0:	3306      	adds	r3, #6
 800d1f2:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d102      	bne.n	800d1fe <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800d1f8:	e007      	b.n	800d20a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3301      	adds	r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d9be      	bls.n	800d188 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d109      	bne.n	800d224 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <chk_lock+0xa8>
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d101      	bne.n	800d220 <chk_lock+0xac>
 800d21c:	2300      	movs	r3, #0
 800d21e:	e013      	b.n	800d248 <chk_lock+0xd4>
 800d220:	2312      	movs	r3, #18
 800d222:	e011      	b.n	800d248 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <chk_lock+0xce>
 800d22a:	490a      	ldr	r1, [pc, #40]	; (800d254 <chk_lock+0xe0>)
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	440b      	add	r3, r1
 800d238:	330a      	adds	r3, #10
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d240:	d101      	bne.n	800d246 <chk_lock+0xd2>
 800d242:	2310      	movs	r3, #16
 800d244:	e000      	b.n	800d248 <chk_lock+0xd4>
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bc80      	pop	{r7}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	200055d4 	.word	0x200055d4

0800d258 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d25e:	2300      	movs	r3, #0
 800d260:	607b      	str	r3, [r7, #4]
 800d262:	e002      	b.n	800d26a <enq_lock+0x12>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3301      	adds	r3, #1
 800d268:	607b      	str	r3, [r7, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d809      	bhi.n	800d284 <enq_lock+0x2c>
 800d270:	490a      	ldr	r1, [pc, #40]	; (800d29c <enq_lock+0x44>)
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1ef      	bne.n	800d264 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b02      	cmp	r3, #2
 800d288:	bf14      	ite	ne
 800d28a:	2301      	movne	r3, #1
 800d28c:	2300      	moveq	r3, #0
 800d28e:	b2db      	uxtb	r3, r3
}
 800d290:	4618      	mov	r0, r3
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	bc80      	pop	{r7}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	200055d4 	.word	0x200055d4

0800d2a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e030      	b.n	800d312 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800d2b0:	495a      	ldr	r1, [pc, #360]	; (800d41c <inc_lock+0x17c>)
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d11f      	bne.n	800d30c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800d2cc:	4953      	ldr	r1, [pc, #332]	; (800d41c <inc_lock+0x17c>)
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	3304      	adds	r3, #4
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d10f      	bne.n	800d30c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800d2ec:	494b      	ldr	r1, [pc, #300]	; (800d41c <inc_lock+0x17c>)
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	440b      	add	r3, r1
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	881a      	ldrh	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d304:	3306      	adds	r3, #6
 800d306:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800d308:	429a      	cmp	r2, r3
 800d30a:	d006      	beq.n	800d31a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3301      	adds	r3, #1
 800d310:	60fb      	str	r3, [r7, #12]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d9cb      	bls.n	800d2b0 <inc_lock+0x10>
 800d318:	e000      	b.n	800d31c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800d31a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d14a      	bne.n	800d3b8 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e002      	b.n	800d32e <inc_lock+0x8e>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d809      	bhi.n	800d348 <inc_lock+0xa8>
 800d334:	4939      	ldr	r1, [pc, #228]	; (800d41c <inc_lock+0x17c>)
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	4613      	mov	r3, r2
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	440b      	add	r3, r1
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1ef      	bne.n	800d328 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d101      	bne.n	800d352 <inc_lock+0xb2>
 800d34e:	2300      	movs	r3, #0
 800d350:	e05f      	b.n	800d412 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d358:	6819      	ldr	r1, [r3, #0]
 800d35a:	4830      	ldr	r0, [pc, #192]	; (800d41c <inc_lock+0x17c>)
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	4613      	mov	r3, r2
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	4413      	add	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4403      	add	r3, r0
 800d368:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d370:	3308      	adds	r3, #8
 800d372:	6819      	ldr	r1, [r3, #0]
 800d374:	4829      	ldr	r0, [pc, #164]	; (800d41c <inc_lock+0x17c>)
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4613      	mov	r3, r2
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4403      	add	r3, r0
 800d382:	3304      	adds	r3, #4
 800d384:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38c:	3306      	adds	r3, #6
 800d38e:	8818      	ldrh	r0, [r3, #0]
 800d390:	4922      	ldr	r1, [pc, #136]	; (800d41c <inc_lock+0x17c>)
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	4613      	mov	r3, r2
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	3308      	adds	r3, #8
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800d3a4:	491d      	ldr	r1, [pc, #116]	; (800d41c <inc_lock+0x17c>)
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	330a      	adds	r3, #10
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00c      	beq.n	800d3d8 <inc_lock+0x138>
 800d3be:	4917      	ldr	r1, [pc, #92]	; (800d41c <inc_lock+0x17c>)
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	440b      	add	r3, r1
 800d3cc:	330a      	adds	r3, #10
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <inc_lock+0x138>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	e01c      	b.n	800d412 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <inc_lock+0x156>
 800d3de:	490f      	ldr	r1, [pc, #60]	; (800d41c <inc_lock+0x17c>)
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4413      	add	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	440b      	add	r3, r1
 800d3ec:	330a      	adds	r3, #10
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	b299      	uxth	r1, r3
 800d3f4:	e001      	b.n	800d3fa <inc_lock+0x15a>
 800d3f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3fa:	4808      	ldr	r0, [pc, #32]	; (800d41c <inc_lock+0x17c>)
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	4613      	mov	r3, r2
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	4413      	add	r3, r2
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4403      	add	r3, r0
 800d408:	330a      	adds	r3, #10
 800d40a:	460a      	mov	r2, r1
 800d40c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3301      	adds	r3, #1
}
 800d412:	4618      	mov	r0, r3
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	bc80      	pop	{r7}
 800d41a:	4770      	bx	lr
 800d41c:	200055d4 	.word	0x200055d4

0800d420 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3b01      	subs	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d82e      	bhi.n	800d492 <dec_lock+0x72>
		n = Files[i].ctr;
 800d434:	491b      	ldr	r1, [pc, #108]	; (800d4a4 <dec_lock+0x84>)
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	4613      	mov	r3, r2
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	440b      	add	r3, r1
 800d442:	330a      	adds	r3, #10
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d448:	89fb      	ldrh	r3, [r7, #14]
 800d44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d44e:	d101      	bne.n	800d454 <dec_lock+0x34>
 800d450:	2300      	movs	r3, #0
 800d452:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800d454:	89fb      	ldrh	r3, [r7, #14]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <dec_lock+0x40>
 800d45a:	89fb      	ldrh	r3, [r7, #14]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d460:	4910      	ldr	r1, [pc, #64]	; (800d4a4 <dec_lock+0x84>)
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	4613      	mov	r3, r2
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	4413      	add	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	440b      	add	r3, r1
 800d46e:	330a      	adds	r3, #10
 800d470:	89fa      	ldrh	r2, [r7, #14]
 800d472:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d474:	89fb      	ldrh	r3, [r7, #14]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d108      	bne.n	800d48c <dec_lock+0x6c>
 800d47a:	490a      	ldr	r1, [pc, #40]	; (800d4a4 <dec_lock+0x84>)
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	440b      	add	r3, r1
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	737b      	strb	r3, [r7, #13]
 800d490:	e001      	b.n	800d496 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d492:	2302      	movs	r3, #2
 800d494:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d496:	7b7b      	ldrb	r3, [r7, #13]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bc80      	pop	{r7}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	200055d4 	.word	0x200055d4

0800d4a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	e016      	b.n	800d4e4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4b6:	4910      	ldr	r1, [pc, #64]	; (800d4f8 <clear_lock+0x50>)
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4413      	add	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	440b      	add	r3, r1
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d108      	bne.n	800d4de <clear_lock+0x36>
 800d4cc:	490a      	ldr	r1, [pc, #40]	; (800d4f8 <clear_lock+0x50>)
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	2200      	movs	r2, #0
 800d4dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d9e5      	bls.n	800d4b6 <clear_lock+0xe>
	}
}
 800d4ea:	bf00      	nop
 800d4ec:	bf00      	nop
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bc80      	pop	{r7}
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	200055d4 	.word	0x200055d4

0800d4fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d504:	2300      	movs	r3, #0
 800d506:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d50e:	3304      	adds	r3, #4
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d047      	beq.n	800d5a6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d51c:	330c      	adds	r3, #12
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d528:	3301      	adds	r3, #1
 800d52a:	7818      	ldrb	r0, [r3, #0]
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	2301      	movs	r3, #1
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	f7ff fd69 	bl	800d008 <disk_write>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <sync_window+0x46>
			res = FR_DISK_ERR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	73fb      	strb	r3, [r7, #15]
 800d540:	e031      	b.n	800d5a6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d548:	3304      	adds	r3, #4
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	1ad2      	subs	r2, r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d560:	3318      	adds	r3, #24
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d21e      	bcs.n	800d5a6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56e:	3303      	adds	r3, #3
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	e014      	b.n	800d5a0 <sync_window+0xa4>
					wsect += fs->fsize;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57c:	3318      	adds	r3, #24
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	697a      	ldr	r2, [r7, #20]
 800d582:	4413      	add	r3, r2
 800d584:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d58c:	3301      	adds	r3, #1
 800d58e:	7818      	ldrb	r0, [r3, #0]
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	2301      	movs	r3, #1
 800d594:	697a      	ldr	r2, [r7, #20]
 800d596:	f7ff fd37 	bl	800d008 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d8e7      	bhi.n	800d576 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3718      	adds	r7, #24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d01f      	beq.n	800d60e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff ff94 	bl	800d4fc <sync_window>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d117      	bne.n	800d60e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	7818      	ldrb	r0, [r3, #0]
 800d5e8:	6879      	ldr	r1, [r7, #4]
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	f7ff fceb 	bl	800cfc8 <disk_read>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d608:	330c      	adds	r3, #12
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff ff6b 	bl	800d4fc <sync_window>
 800d626:	4603      	mov	r3, r0
 800d628:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f040 80bd 	bne.w	800d7ac <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	f040 80a7 	bne.w	800d78e <sync_fs+0x176>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d646:	3305      	adds	r3, #5
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	f040 809f 	bne.w	800d78e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d658:	330a      	adds	r3, #10
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	2100      	movs	r1, #0
 800d660:	f7ff fd2e 	bl	800d0c0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2255      	movs	r2, #85	; 0x55
 800d668:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	22aa      	movs	r2, #170	; 0xaa
 800d670:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2252      	movs	r2, #82	; 0x52
 800d678:	701a      	strb	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2252      	movs	r2, #82	; 0x52
 800d67e:	705a      	strb	r2, [r3, #1]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2261      	movs	r2, #97	; 0x61
 800d684:	709a      	strb	r2, [r3, #2]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2241      	movs	r2, #65	; 0x41
 800d68a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2272      	movs	r2, #114	; 0x72
 800d690:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2272      	movs	r2, #114	; 0x72
 800d698:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2241      	movs	r2, #65	; 0x41
 800d6a0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2261      	movs	r2, #97	; 0x61
 800d6a8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b2:	3310      	adds	r3, #16
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c4:	3310      	adds	r3, #16
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	0a1b      	lsrs	r3, r3, #8
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6dc:	3310      	adds	r3, #16
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	0c1b      	lsrs	r3, r3, #16
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	0e1b      	lsrs	r3, r3, #24
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d704:	330c      	adds	r3, #12
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d716:	330c      	adds	r3, #12
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	0a1b      	lsrs	r3, r3, #8
 800d71e:	b29b      	uxth	r3, r3
 800d720:	b2da      	uxtb	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d72e:	330c      	adds	r3, #12
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	0c1b      	lsrs	r3, r3, #16
 800d734:	b2da      	uxtb	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d742:	330c      	adds	r3, #12
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	0e1b      	lsrs	r3, r3, #24
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d756:	331c      	adds	r3, #28
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d762:	330c      	adds	r3, #12
 800d764:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76c:	3301      	adds	r3, #1
 800d76e:	7818      	ldrb	r0, [r3, #0]
 800d770:	6879      	ldr	r1, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d778:	330c      	adds	r3, #12
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	2301      	movs	r3, #1
 800d77e:	f7ff fc43 	bl	800d008 <disk_write>
			fs->fsi_flag = 0;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d788:	3305      	adds	r3, #5
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d794:	3301      	adds	r3, #1
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2200      	movs	r2, #0
 800d79a:	2100      	movs	r1, #0
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff fc53 	bl	800d048 <disk_ioctl>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <sync_fs+0x194>
			res = FR_DISK_ERR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b083      	sub	sp, #12
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	3b02      	subs	r3, #2
 800d7c4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7cc:	3314      	adds	r3, #20
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3b02      	subs	r3, #2
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d301      	bcc.n	800d7dc <clust2sect+0x26>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e00e      	b.n	800d7fa <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e2:	3302      	adds	r3, #2
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	fb03 f202 	mul.w	r2, r3, r2
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4413      	add	r3, r2
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bc80      	pop	{r7}
 800d802:	4770      	bx	lr

0800d804 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d907      	bls.n	800d824 <get_fat+0x20>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81a:	3314      	adds	r3, #20
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d302      	bcc.n	800d82a <get_fat+0x26>
		val = 1;	/* Internal error */
 800d824:	2301      	movs	r3, #1
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	e0ec      	b.n	800da04 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d82a:	f04f 33ff 	mov.w	r3, #4294967295
 800d82e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2b03      	cmp	r3, #3
 800d83a:	f000 809e 	beq.w	800d97a <get_fat+0x176>
 800d83e:	2b03      	cmp	r3, #3
 800d840:	f300 80d6 	bgt.w	800d9f0 <get_fat+0x1ec>
 800d844:	2b01      	cmp	r3, #1
 800d846:	d002      	beq.n	800d84e <get_fat+0x4a>
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d063      	beq.n	800d914 <get_fat+0x110>
 800d84c:	e0d0      	b.n	800d9f0 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	085b      	lsrs	r3, r3, #1
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d86a:	330a      	adds	r3, #10
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	4619      	mov	r1, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	fbb3 f3f1 	udiv	r3, r3, r1
 800d876:	4413      	add	r3, r2
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff fe98 	bl	800d5b0 <move_window>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	f040 80b7 	bne.w	800d9f6 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	60fa      	str	r2, [r7, #12]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d894:	320a      	adds	r2, #10
 800d896:	8812      	ldrh	r2, [r2, #0]
 800d898:	fbb3 f1f2 	udiv	r1, r3, r2
 800d89c:	fb02 f201 	mul.w	r2, r2, r1
 800d8a0:	1a9b      	subs	r3, r3, r2
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	5cd3      	ldrb	r3, [r2, r3]
 800d8a6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b6:	330a      	adds	r3, #10
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8c2:	4413      	add	r3, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff fe72 	bl	800d5b0 <move_window>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f040 8093 	bne.w	800d9fa <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8da:	330a      	adds	r3, #10
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8e6:	fb02 f201 	mul.w	r2, r2, r1
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	5cd3      	ldrb	r3, [r2, r3]
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <get_fat+0x106>
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	091b      	lsrs	r3, r3, #4
 800d908:	e002      	b.n	800d910 <get_fat+0x10c>
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d910:	617b      	str	r3, [r7, #20]
			break;
 800d912:	e077      	b.n	800da04 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d922:	330a      	adds	r3, #10
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	085b      	lsrs	r3, r3, #1
 800d928:	b29b      	uxth	r3, r3
 800d92a:	4619      	mov	r1, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d932:	4413      	add	r3, r2
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff fe3a 	bl	800d5b0 <move_window>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d15d      	bne.n	800d9fe <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	005a      	lsls	r2, r3, #1
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94c:	330a      	adds	r3, #10
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	fbb2 f1f3 	udiv	r1, r2, r3
 800d954:	fb03 f301 	mul.w	r3, r3, r1
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	4413      	add	r3, r2
 800d95e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3301      	adds	r3, #1
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	021b      	lsls	r3, r3, #8
 800d968:	b21a      	sxth	r2, r3
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	b21b      	sxth	r3, r3
 800d970:	4313      	orrs	r3, r2
 800d972:	b21b      	sxth	r3, r3
 800d974:	b29b      	uxth	r3, r3
 800d976:	617b      	str	r3, [r7, #20]
			break;
 800d978:	e044      	b.n	800da04 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d988:	330a      	adds	r3, #10
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	089b      	lsrs	r3, r3, #2
 800d98e:	b29b      	uxth	r3, r3
 800d990:	4619      	mov	r1, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	fbb3 f3f1 	udiv	r3, r3, r1
 800d998:	4413      	add	r3, r2
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fe07 	bl	800d5b0 <move_window>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d12c      	bne.n	800da02 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	009a      	lsls	r2, r3, #2
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9b2:	330a      	adds	r3, #10
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	fbb2 f1f3 	udiv	r1, r2, r3
 800d9ba:	fb03 f301 	mul.w	r3, r3, r1
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3303      	adds	r3, #3
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	061a      	lsls	r2, r3, #24
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	041b      	lsls	r3, r3, #16
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	3201      	adds	r2, #1
 800d9dc:	7812      	ldrb	r2, [r2, #0]
 800d9de:	0212      	lsls	r2, r2, #8
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	693a      	ldr	r2, [r7, #16]
 800d9e4:	7812      	ldrb	r2, [r2, #0]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d9ec:	617b      	str	r3, [r7, #20]
			break;
 800d9ee:	e009      	b.n	800da04 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
 800d9f4:	e006      	b.n	800da04 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9f6:	bf00      	nop
 800d9f8:	e004      	b.n	800da04 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9fa:	bf00      	nop
 800d9fc:	e002      	b.n	800da04 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d9fe:	bf00      	nop
 800da00:	e000      	b.n	800da04 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da02:	bf00      	nop
		}
	}

	return val;
 800da04:	697b      	ldr	r3, [r7, #20]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b088      	sub	sp, #32
 800da12:	af00      	add	r7, sp, #0
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d907      	bls.n	800da30 <put_fat+0x22>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da26:	3314      	adds	r3, #20
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d302      	bcc.n	800da36 <put_fat+0x28>
		res = FR_INT_ERR;
 800da30:	2302      	movs	r3, #2
 800da32:	77fb      	strb	r3, [r7, #31]
 800da34:	e146      	b.n	800dcc4 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	f000 80d9 	beq.w	800dbf6 <put_fat+0x1e8>
 800da44:	2b03      	cmp	r3, #3
 800da46:	f300 8133 	bgt.w	800dcb0 <put_fat+0x2a2>
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d003      	beq.n	800da56 <put_fat+0x48>
 800da4e:	2b02      	cmp	r3, #2
 800da50:	f000 8095 	beq.w	800db7e <put_fat+0x170>
 800da54:	e12c      	b.n	800dcb0 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	617b      	str	r3, [r7, #20]
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	085b      	lsrs	r3, r3, #1
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	4413      	add	r3, r2
 800da62:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da72:	330a      	adds	r3, #10
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	4619      	mov	r1, r3
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800da7e:	4413      	add	r3, r2
 800da80:	4619      	mov	r1, r3
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7ff fd94 	bl	800d5b0 <move_window>
 800da88:	4603      	mov	r3, r0
 800da8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da8c:	7ffb      	ldrb	r3, [r7, #31]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f040 8111 	bne.w	800dcb6 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	617a      	str	r2, [r7, #20]
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800daa0:	320a      	adds	r2, #10
 800daa2:	8812      	ldrh	r2, [r2, #0]
 800daa4:	fbb3 f1f2 	udiv	r1, r3, r2
 800daa8:	fb02 f201 	mul.w	r2, r2, r1
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	4413      	add	r3, r2
 800dab2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00d      	beq.n	800dada <put_fat+0xcc>
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	b25b      	sxtb	r3, r3
 800dac4:	f003 030f 	and.w	r3, r3, #15
 800dac8:	b25a      	sxtb	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b25b      	sxtb	r3, r3
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	e001      	b.n	800dade <put_fat+0xd0>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dae8:	3304      	adds	r3, #4
 800daea:	2201      	movs	r2, #1
 800daec:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dafc:	330a      	adds	r3, #10
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	4619      	mov	r1, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	fbb3 f3f1 	udiv	r3, r3, r1
 800db08:	4413      	add	r3, r2
 800db0a:	4619      	mov	r1, r3
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff fd4f 	bl	800d5b0 <move_window>
 800db12:	4603      	mov	r3, r0
 800db14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db16:	7ffb      	ldrb	r3, [r7, #31]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f040 80ce 	bne.w	800dcba <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db24:	330a      	adds	r3, #10
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800db30:	fb02 f201 	mul.w	r2, r2, r1
 800db34:	1a9b      	subs	r3, r3, r2
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	4413      	add	r3, r2
 800db3a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <put_fat+0x140>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	091b      	lsrs	r3, r3, #4
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	e00e      	b.n	800db6c <put_fat+0x15e>
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	b25b      	sxtb	r3, r3
 800db54:	f023 030f 	bic.w	r3, r3, #15
 800db58:	b25a      	sxtb	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	0a1b      	lsrs	r3, r3, #8
 800db5e:	b25b      	sxtb	r3, r3
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	b25b      	sxtb	r3, r3
 800db66:	4313      	orrs	r3, r2
 800db68:	b25b      	sxtb	r3, r3
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	69ba      	ldr	r2, [r7, #24]
 800db6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db76:	3304      	adds	r3, #4
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]
			break;
 800db7c:	e0a2      	b.n	800dcc4 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db8c:	330a      	adds	r3, #10
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	085b      	lsrs	r3, r3, #1
 800db92:	b29b      	uxth	r3, r3
 800db94:	4619      	mov	r1, r3
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	fbb3 f3f1 	udiv	r3, r3, r1
 800db9c:	4413      	add	r3, r2
 800db9e:	4619      	mov	r1, r3
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f7ff fd05 	bl	800d5b0 <move_window>
 800dba6:	4603      	mov	r3, r0
 800dba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbaa:	7ffb      	ldrb	r3, [r7, #31]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f040 8086 	bne.w	800dcbe <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	005a      	lsls	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbc:	330a      	adds	r3, #10
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	fbb2 f1f3 	udiv	r1, r2, r3
 800dbc4:	fb03 f301 	mul.w	r3, r3, r1
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	701a      	strb	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	0a1b      	lsrs	r3, r3, #8
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbee:	3304      	adds	r3, #4
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]
			break;
 800dbf4:	e066      	b.n	800dcc4 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc04:	330a      	adds	r3, #10
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	089b      	lsrs	r3, r3, #2
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc14:	4413      	add	r3, r2
 800dc16:	4619      	mov	r1, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff fcc9 	bl	800d5b0 <move_window>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc22:	7ffb      	ldrb	r3, [r7, #31]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d14c      	bne.n	800dcc2 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	009a      	lsls	r2, r3, #2
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc32:	330a      	adds	r3, #10
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc3a:	fb03 f301 	mul.w	r3, r3, r1
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	4413      	add	r3, r2
 800dc44:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	3303      	adds	r3, #3
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	061a      	lsls	r2, r3, #24
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	3302      	adds	r3, #2
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	041b      	lsls	r3, r3, #16
 800dc56:	4313      	orrs	r3, r2
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	3201      	adds	r2, #1
 800dc5c:	7812      	ldrb	r2, [r2, #0]
 800dc5e:	0212      	lsls	r2, r2, #8
 800dc60:	4313      	orrs	r3, r2
 800dc62:	69ba      	ldr	r2, [r7, #24]
 800dc64:	7812      	ldrb	r2, [r2, #0]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	0a1b      	lsrs	r3, r3, #8
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	3301      	adds	r3, #1
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	0c1a      	lsrs	r2, r3, #16
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	3302      	adds	r3, #2
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	0e1a      	lsrs	r2, r3, #24
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	3303      	adds	r3, #3
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dca8:	3304      	adds	r3, #4
 800dcaa:	2201      	movs	r2, #1
 800dcac:	701a      	strb	r2, [r3, #0]
			break;
 800dcae:	e009      	b.n	800dcc4 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	77fb      	strb	r3, [r7, #31]
 800dcb4:	e006      	b.n	800dcc4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800dcb6:	bf00      	nop
 800dcb8:	e004      	b.n	800dcc4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800dcba:	bf00      	nop
 800dcbc:	e002      	b.n	800dcc4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800dcbe:	bf00      	nop
 800dcc0:	e000      	b.n	800dcc4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800dcc2:	bf00      	nop
		}
	}

	return res;
 800dcc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3720      	adds	r7, #32
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d907      	bls.n	800dcee <remove_chain+0x20>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dce4:	3314      	adds	r3, #20
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d302      	bcc.n	800dcf4 <remove_chain+0x26>
		res = FR_INT_ERR;
 800dcee:	2302      	movs	r3, #2
 800dcf0:	73fb      	strb	r3, [r7, #15]
 800dcf2:	e04f      	b.n	800dd94 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800dcf8:	e040      	b.n	800dd7c <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff fd81 	bl	800d804 <get_fat>
 800dd02:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d041      	beq.n	800dd8e <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d102      	bne.n	800dd16 <remove_chain+0x48>
 800dd10:	2302      	movs	r3, #2
 800dd12:	73fb      	strb	r3, [r7, #15]
 800dd14:	e03e      	b.n	800dd94 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d102      	bne.n	800dd24 <remove_chain+0x56>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	73fb      	strb	r3, [r7, #15]
 800dd22:	e037      	b.n	800dd94 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800dd24:	2200      	movs	r2, #0
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff fe70 	bl	800da0e <put_fat>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d12c      	bne.n	800dd92 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd3e:	3310      	adds	r3, #16
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd46:	d017      	beq.n	800dd78 <remove_chain+0xaa>
				fs->free_clust++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4e:	3310      	adds	r3, #16
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd5a:	3310      	adds	r3, #16
 800dd5c:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd64:	3305      	adds	r3, #5
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	f043 0301 	orr.w	r3, r3, #1
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd74:	3305      	adds	r3, #5
 800dd76:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd82:	3314      	adds	r3, #20
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d3b6      	bcc.n	800dcfa <remove_chain+0x2c>
 800dd8c:	e002      	b.n	800dd94 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800dd8e:	bf00      	nop
 800dd90:	e000      	b.n	800dd94 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800dd92:	bf00      	nop
		}
	}

	return res;
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b086      	sub	sp, #24
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d113      	bne.n	800ddd6 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb4:	330c      	adds	r3, #12
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d007      	beq.n	800ddd0 <create_chain+0x32>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc6:	3314      	adds	r3, #20
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d31e      	bcc.n	800de0e <create_chain+0x70>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	613b      	str	r3, [r7, #16]
 800ddd4:	e01b      	b.n	800de0e <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff fd13 	bl	800d804 <get_fat>
 800ddde:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d801      	bhi.n	800ddea <create_chain+0x4c>
 800dde6:	2301      	movs	r3, #1
 800dde8:	e086      	b.n	800def8 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf0:	d101      	bne.n	800ddf6 <create_chain+0x58>
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	e080      	b.n	800def8 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddfc:	3314      	adds	r3, #20
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	429a      	cmp	r2, r3
 800de04:	d201      	bcs.n	800de0a <create_chain+0x6c>
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	e076      	b.n	800def8 <create_chain+0x15a>
		scl = clst;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	3301      	adds	r3, #1
 800de16:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de1e:	3314      	adds	r3, #20
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	429a      	cmp	r2, r3
 800de26:	d307      	bcc.n	800de38 <create_chain+0x9a>
			ncl = 2;
 800de28:	2302      	movs	r3, #2
 800de2a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	429a      	cmp	r2, r3
 800de32:	d901      	bls.n	800de38 <create_chain+0x9a>
 800de34:	2300      	movs	r3, #0
 800de36:	e05f      	b.n	800def8 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800de38:	6979      	ldr	r1, [r7, #20]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fce2 	bl	800d804 <get_fat>
 800de40:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00e      	beq.n	800de66 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4e:	d002      	beq.n	800de56 <create_chain+0xb8>
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d101      	bne.n	800de5a <create_chain+0xbc>
			return cs;
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	e04e      	b.n	800def8 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d1d7      	bne.n	800de12 <create_chain+0x74>
 800de62:	2300      	movs	r3, #0
 800de64:	e048      	b.n	800def8 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800de66:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800de68:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800de6c:	6979      	ldr	r1, [r7, #20]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff fdcd 	bl	800da0e <put_fat>
 800de74:	4603      	mov	r3, r0
 800de76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d109      	bne.n	800de92 <create_chain+0xf4>
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d006      	beq.n	800de92 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fdc0 	bl	800da0e <put_fat>
 800de8e:	4603      	mov	r3, r0
 800de90:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d126      	bne.n	800dee6 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de9e:	330c      	adds	r3, #12
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deaa:	3310      	adds	r3, #16
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb2:	d020      	beq.n	800def6 <create_chain+0x158>
			fs->free_clust--;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deba:	3310      	adds	r3, #16
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	1e5a      	subs	r2, r3, #1
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec6:	3310      	adds	r3, #16
 800dec8:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ded0:	3305      	adds	r3, #5
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f043 0301 	orr.w	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dee0:	3305      	adds	r3, #5
 800dee2:	701a      	strb	r2, [r3, #0]
 800dee4:	e007      	b.n	800def6 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d102      	bne.n	800def2 <create_chain+0x154>
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	e000      	b.n	800def4 <create_chain+0x156>
 800def2:	2301      	movs	r3, #1
 800def4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800def6:	697b      	ldr	r3, [r7, #20]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800df00:	b480      	push	{r7}
 800df02:	b087      	sub	sp, #28
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800df10:	3304      	adds	r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3304      	adds	r3, #4
 800df16:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df24:	330a      	adds	r3, #10
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	461a      	mov	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	fbb3 f2f2 	udiv	r2, r3, r2
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3c:	3302      	adds	r3, #2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	fbb2 f3f3 	udiv	r3, r2, r3
 800df44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	1d1a      	adds	r2, r3, #4
 800df4a:	613a      	str	r2, [r7, #16]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <clmt_clust+0x5a>
 800df56:	2300      	movs	r3, #0
 800df58:	e010      	b.n	800df7c <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800df5a:	697a      	ldr	r2, [r7, #20]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d307      	bcc.n	800df72 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	617b      	str	r3, [r7, #20]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	3304      	adds	r3, #4
 800df6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df70:	e7e9      	b.n	800df46 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800df72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	4413      	add	r3, r2
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	371c      	adds	r7, #28
 800df80:	46bd      	mov	sp, r7
 800df82:	bc80      	pop	{r7}
 800df84:	4770      	bx	lr

0800df86 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b086      	sub	sp, #24
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	b29a      	uxth	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9a:	3306      	adds	r3, #6
 800df9c:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d00a      	beq.n	800dfc6 <dir_sdi+0x40>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfbc:	3314      	adds	r3, #20
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d301      	bcc.n	800dfca <dir_sdi+0x44>
		return FR_INT_ERR;
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	e0b4      	b.n	800e134 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d111      	bne.n	800dff4 <dir_sdi+0x6e>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d108      	bne.n	800dff4 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dfee:	3304      	adds	r3, #4
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d117      	bne.n	800e02a <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e006:	3308      	adds	r3, #8
 800e008:	881b      	ldrh	r3, [r3, #0]
 800e00a:	461a      	mov	r2, r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	4293      	cmp	r3, r2
 800e010:	d301      	bcc.n	800e016 <dir_sdi+0x90>
			return FR_INT_ERR;
 800e012:	2302      	movs	r3, #2
 800e014:	e08e      	b.n	800e134 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e022:	3304      	adds	r3, #4
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	613b      	str	r3, [r7, #16]
 800e028:	e046      	b.n	800e0b8 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e036:	330a      	adds	r3, #10
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	095b      	lsrs	r3, r3, #5
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	461a      	mov	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e04c:	3302      	adds	r3, #2
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	fb03 f302 	mul.w	r3, r3, r2
 800e054:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800e056:	e022      	b.n	800e09e <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6979      	ldr	r1, [r7, #20]
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff fbce 	bl	800d804 <get_fat>
 800e068:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e070:	d101      	bne.n	800e076 <dir_sdi+0xf0>
 800e072:	2301      	movs	r3, #1
 800e074:	e05e      	b.n	800e134 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d90a      	bls.n	800e092 <dir_sdi+0x10c>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e088:	3314      	adds	r3, #20
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d301      	bcc.n	800e096 <dir_sdi+0x110>
				return FR_INT_ERR;
 800e092:	2302      	movs	r3, #2
 800e094:	e04e      	b.n	800e134 <dir_sdi+0x1ae>
			idx -= ic;
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d2d8      	bcs.n	800e058 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6979      	ldr	r1, [r7, #20]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fb80 	bl	800d7b6 <clust2sect>
 800e0b6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0be:	330c      	adds	r3, #12
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <dir_sdi+0x148>
 800e0ca:	2302      	movs	r3, #2
 800e0cc:	e032      	b.n	800e134 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	330a      	adds	r3, #10
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	095b      	lsrs	r3, r3, #5
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	441a      	add	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	3310      	adds	r3, #16
 800e0f6:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4618      	mov	r0, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	330a      	adds	r3, #10
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	095b      	lsrs	r3, r3, #5
 800e114:	b29b      	uxth	r3, r3
 800e116:	461a      	mov	r2, r3
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e11e:	fb02 f201 	mul.w	r2, r2, r1
 800e122:	1a9b      	subs	r3, r3, r2
 800e124:	015b      	lsls	r3, r3, #5
 800e126:	18c2      	adds	r2, r0, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e12e:	3314      	adds	r3, #20
 800e130:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3718      	adds	r7, #24
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e13c:	b590      	push	{r4, r7, lr}
 800e13e:	b087      	sub	sp, #28
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e14c:	3306      	adds	r3, #6
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	3301      	adds	r3, #1
 800e152:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	b29b      	uxth	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d006      	beq.n	800e16a <dir_next+0x2e>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e162:	3310      	adds	r3, #16
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <dir_next+0x32>
		return FR_NO_FILE;
 800e16a:	2304      	movs	r3, #4
 800e16c:	e144      	b.n	800e3f8 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17a:	330a      	adds	r3, #10
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	095b      	lsrs	r3, r3, #5
 800e180:	b29b      	uxth	r3, r3
 800e182:	461a      	mov	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	fbb3 f1f2 	udiv	r1, r3, r2
 800e18a:	fb02 f201 	mul.w	r2, r2, r1
 800e18e:	1a9b      	subs	r3, r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	f040 810c 	bne.w	800e3ae <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e19c:	3310      	adds	r3, #16
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	1c5a      	adds	r2, r3, #1
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a8:	3310      	adds	r3, #16
 800e1aa:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b2:	330c      	adds	r3, #12
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10e      	bne.n	800e1d8 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	f0c0 80ed 	bcc.w	800e3ae <dir_next+0x272>
				return FR_NO_FILE;
 800e1d4:	2304      	movs	r3, #4
 800e1d6:	e10f      	b.n	800e3f8 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1e4:	330a      	adds	r3, #10
 800e1e6:	881b      	ldrh	r3, [r3, #0]
 800e1e8:	095b      	lsrs	r3, r3, #5
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e200:	3302      	adds	r3, #2
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	3b01      	subs	r3, #1
 800e206:	4013      	ands	r3, r2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f040 80d0 	bne.w	800e3ae <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e21c:	330c      	adds	r3, #12
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f7ff faee 	bl	800d804 <get_fat>
 800e228:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d801      	bhi.n	800e234 <dir_next+0xf8>
 800e230:	2302      	movs	r3, #2
 800e232:	e0e1      	b.n	800e3f8 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d101      	bne.n	800e240 <dir_next+0x104>
 800e23c:	2301      	movs	r3, #1
 800e23e:	e0db      	b.n	800e3f8 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24c:	3314      	adds	r3, #20
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	697a      	ldr	r2, [r7, #20]
 800e252:	429a      	cmp	r2, r3
 800e254:	f0c0 8097 	bcc.w	800e386 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <dir_next+0x126>
 800e25e:	2304      	movs	r3, #4
 800e260:	e0ca      	b.n	800e3f8 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e270:	330c      	adds	r3, #12
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7ff fd91 	bl	800dd9e <create_chain>
 800e27c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <dir_next+0x14c>
 800e284:	2307      	movs	r3, #7
 800e286:	e0b7      	b.n	800e3f8 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <dir_next+0x156>
 800e28e:	2302      	movs	r3, #2
 800e290:	e0b2      	b.n	800e3f8 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e298:	d101      	bne.n	800e29e <dir_next+0x162>
 800e29a:	2301      	movs	r3, #1
 800e29c:	e0ac      	b.n	800e3f8 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7ff f928 	bl	800d4fc <sync_window>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <dir_next+0x17a>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e0a0      	b.n	800e3f8 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2cc:	330a      	adds	r3, #10
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	f7fe fef4 	bl	800d0c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e6:	681c      	ldr	r4, [r3, #0]
 800e2e8:	6979      	ldr	r1, [r7, #20]
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7ff fa63 	bl	800d7b6 <clust2sect>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800e2f6:	330c      	adds	r3, #12
 800e2f8:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	613b      	str	r3, [r7, #16]
 800e2fe:	e024      	b.n	800e34a <dir_next+0x20e>
						dp->fs->wflag = 1;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e30c:	3304      	adds	r3, #4
 800e30e:	2201      	movs	r2, #1
 800e310:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff f8ee 	bl	800d4fc <sync_window>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <dir_next+0x1ee>
 800e326:	2301      	movs	r3, #1
 800e328:	e066      	b.n	800e3f8 <dir_next+0x2bc>
						dp->fs->winsect++;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800e336:	330c      	adds	r3, #12
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	1c59      	adds	r1, r3, #1
 800e33c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800e340:	330c      	adds	r3, #12
 800e342:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	3301      	adds	r3, #1
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e356:	3302      	adds	r3, #2
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	4293      	cmp	r3, r2
 800e360:	d3ce      	bcc.n	800e300 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e36e:	330c      	adds	r3, #12
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	693a      	ldr	r2, [r7, #16]
 800e37c:	1a8a      	subs	r2, r1, r2
 800e37e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e382:	330c      	adds	r3, #12
 800e384:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e38c:	330c      	adds	r3, #12
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	6979      	ldr	r1, [r7, #20]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fa0a 	bl	800d7b6 <clust2sect>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3aa:	3310      	adds	r3, #16
 800e3ac:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b8:	3306      	adds	r3, #6
 800e3ba:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d2:	330a      	adds	r3, #10
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	095b      	lsrs	r3, r3, #5
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	461a      	mov	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3e2:	fb02 f201 	mul.w	r2, r2, r1
 800e3e6:	1a9b      	subs	r3, r3, r2
 800e3e8:	015b      	lsls	r3, r3, #5
 800e3ea:	18c2      	adds	r2, r0, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f2:	3314      	adds	r3, #20
 800e3f4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	371c      	adds	r7, #28
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}

0800e400 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800e40a:	2100      	movs	r1, #0
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7ff fdba 	bl	800df86 <dir_sdi>
 800e412:	4603      	mov	r3, r0
 800e414:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e416:	7bfb      	ldrb	r3, [r7, #15]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d138      	bne.n	800e48e <dir_alloc+0x8e>
		n = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42e:	3310      	adds	r3, #16
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4619      	mov	r1, r3
 800e434:	4610      	mov	r0, r2
 800e436:	f7ff f8bb 	bl	800d5b0 <move_window>
 800e43a:	4603      	mov	r3, r0
 800e43c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d123      	bne.n	800e48c <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e44a:	3314      	adds	r3, #20
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	2be5      	cmp	r3, #229	; 0xe5
 800e452:	d007      	beq.n	800e464 <dir_alloc+0x64>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e45a:	3314      	adds	r3, #20
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d107      	bne.n	800e474 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	3301      	adds	r3, #1
 800e468:	60bb      	str	r3, [r7, #8]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d102      	bne.n	800e478 <dir_alloc+0x78>
 800e472:	e00c      	b.n	800e48e <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e474:	2300      	movs	r3, #0
 800e476:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800e478:	2101      	movs	r1, #1
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff fe5e 	bl	800e13c <dir_next>
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d0ca      	beq.n	800e420 <dir_alloc+0x20>
 800e48a:	e000      	b.n	800e48e <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800e48c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
 800e490:	2b04      	cmp	r3, #4
 800e492:	d101      	bne.n	800e498 <dir_alloc+0x98>
 800e494:	2307      	movs	r3, #7
 800e496:	73fb      	strb	r3, [r7, #15]
	return res;
 800e498:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800e4a2:	b480      	push	{r7}
 800e4a4:	b085      	sub	sp, #20
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
 800e4aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	331b      	adds	r3, #27
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	021b      	lsls	r3, r3, #8
 800e4b4:	b21a      	sxth	r2, r3
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	331a      	adds	r3, #26
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	b21b      	sxth	r3, r3
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	b21b      	sxth	r3, r3
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	d10f      	bne.n	800e4f2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	3315      	adds	r3, #21
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	021b      	lsls	r3, r3, #8
 800e4da:	b21a      	sxth	r2, r3
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	3314      	adds	r3, #20
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	b21b      	sxth	r3, r3
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	b21b      	sxth	r3, r3
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	041b      	lsls	r3, r3, #16
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	60fb      	str	r3, [r7, #12]

	return cl;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bc80      	pop	{r7}
 800e4fc:	4770      	bx	lr

0800e4fe <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800e4fe:	b480      	push	{r7}
 800e500:	b083      	sub	sp, #12
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	331a      	adds	r3, #26
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	b2d2      	uxtb	r2, r2
 800e510:	701a      	strb	r2, [r3, #0]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	b29b      	uxth	r3, r3
 800e516:	0a1b      	lsrs	r3, r3, #8
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	331b      	adds	r3, #27
 800e51e:	b2d2      	uxtb	r2, r2
 800e520:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	0c1a      	lsrs	r2, r3, #16
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3314      	adds	r3, #20
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	701a      	strb	r2, [r3, #0]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	0c1b      	lsrs	r3, r3, #16
 800e532:	b29b      	uxth	r3, r3
 800e534:	0a1b      	lsrs	r3, r3, #8
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3315      	adds	r3, #21
 800e53c:	b2d2      	uxtb	r2, r2
 800e53e:	701a      	strb	r2, [r3, #0]
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	bc80      	pop	{r7}
 800e548:	4770      	bx	lr
	...

0800e54c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e55e:	1e5a      	subs	r2, r3, #1
 800e560:	4613      	mov	r3, r2
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	4413      	add	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800e56c:	2300      	movs	r3, #0
 800e56e:	613b      	str	r3, [r7, #16]
 800e570:	2301      	movs	r3, #1
 800e572:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800e574:	4a2b      	ldr	r2, [pc, #172]	; (800e624 <cmp_lfn+0xd8>)
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	4413      	add	r3, r2
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	4413      	add	r3, r2
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	021b      	lsls	r3, r3, #8
 800e586:	b21a      	sxth	r2, r3
 800e588:	4926      	ldr	r1, [pc, #152]	; (800e624 <cmp_lfn+0xd8>)
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	440b      	add	r3, r1
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	4619      	mov	r1, r3
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	440b      	add	r3, r1
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	b21b      	sxth	r3, r3
 800e59a:	4313      	orrs	r3, r2
 800e59c:	b21b      	sxth	r3, r3
 800e59e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800e5a0:	89fb      	ldrh	r3, [r7, #14]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d019      	beq.n	800e5da <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800e5a6:	89bb      	ldrh	r3, [r7, #12]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f002 ff17 	bl	80113dc <ff_wtoupper>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2bfe      	cmp	r3, #254	; 0xfe
 800e5b6:	d80e      	bhi.n	800e5d6 <cmp_lfn+0x8a>
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	617a      	str	r2, [r7, #20]
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f002 ff08 	bl	80113dc <ff_wtoupper>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	89fb      	ldrh	r3, [r7, #14]
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d008      	beq.n	800e5e8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	e01f      	b.n	800e61a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800e5da:	89bb      	ldrh	r3, [r7, #12]
 800e5dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d001      	beq.n	800e5e8 <cmp_lfn+0x9c>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e018      	b.n	800e61a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	613b      	str	r3, [r7, #16]
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	2b0c      	cmp	r3, #12
 800e5f2:	d9bf      	bls.n	800e574 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <cmp_lfn+0xcc>
 800e600:	89fb      	ldrh	r3, [r7, #14]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <cmp_lfn+0xcc>
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	005b      	lsls	r3, r3, #1
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	4413      	add	r3, r2
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <cmp_lfn+0xcc>
		return 0;
 800e614:	2300      	movs	r3, #0
 800e616:	e000      	b.n	800e61a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800e618:	2301      	movs	r3, #1
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	0801655c 	.word	0x0801655c

0800e628 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800e628:	b480      	push	{r7}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e63a:	1e5a      	subs	r2, r3, #1
 800e63c:	4613      	mov	r3, r2
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800e648:	2300      	movs	r3, #0
 800e64a:	613b      	str	r3, [r7, #16]
 800e64c:	2301      	movs	r3, #1
 800e64e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 800e650:	4a26      	ldr	r2, [pc, #152]	; (800e6ec <pick_lfn+0xc4>)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	4413      	add	r3, r2
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	3301      	adds	r3, #1
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	4413      	add	r3, r2
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	021b      	lsls	r3, r3, #8
 800e662:	b21a      	sxth	r2, r3
 800e664:	4921      	ldr	r1, [pc, #132]	; (800e6ec <pick_lfn+0xc4>)
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	440b      	add	r3, r1
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	4619      	mov	r1, r3
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	440b      	add	r3, r1
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	b21b      	sxth	r3, r3
 800e676:	4313      	orrs	r3, r2
 800e678:	b21b      	sxth	r3, r3
 800e67a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800e67c:	89fb      	ldrh	r3, [r7, #14]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00f      	beq.n	800e6a2 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2bfe      	cmp	r3, #254	; 0xfe
 800e686:	d901      	bls.n	800e68c <pick_lfn+0x64>
 800e688:	2300      	movs	r3, #0
 800e68a:	e029      	b.n	800e6e0 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e68c:	89bb      	ldrh	r3, [r7, #12]
 800e68e:	81fb      	strh	r3, [r7, #14]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	617a      	str	r2, [r7, #20]
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	4413      	add	r3, r2
 800e69c:	89fa      	ldrh	r2, [r7, #14]
 800e69e:	801a      	strh	r2, [r3, #0]
 800e6a0:	e006      	b.n	800e6b0 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e6a2:	89bb      	ldrh	r3, [r7, #12]
 800e6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d001      	beq.n	800e6b0 <pick_lfn+0x88>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	e017      	b.n	800e6e0 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	613b      	str	r3, [r7, #16]
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b0c      	cmp	r3, #12
 800e6ba:	d9c9      	bls.n	800e650 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2bfe      	cmp	r3, #254	; 0xfe
 800e6cc:	d901      	bls.n	800e6d2 <pick_lfn+0xaa>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e006      	b.n	800e6e0 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	4413      	add	r3, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800e6de:	2301      	movs	r3, #1
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	371c      	adds	r7, #28
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bc80      	pop	{r7}
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	0801655c 	.word	0x0801655c

0800e6f0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b089      	sub	sp, #36	; 0x24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	460b      	mov	r3, r1
 800e700:	71fb      	strb	r3, [r7, #7]
 800e702:	4613      	mov	r3, r2
 800e704:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	330d      	adds	r3, #13
 800e70a:	79ba      	ldrb	r2, [r7, #6]
 800e70c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	330b      	adds	r3, #11
 800e712:	220f      	movs	r2, #15
 800e714:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	330c      	adds	r3, #12
 800e71a:	2200      	movs	r2, #0
 800e71c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	331a      	adds	r3, #26
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	331b      	adds	r3, #27
 800e72a:	2200      	movs	r2, #0
 800e72c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	1e5a      	subs	r2, r3, #1
 800e732:	4613      	mov	r3, r2
 800e734:	005b      	lsls	r3, r3, #1
 800e736:	4413      	add	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	82fb      	strh	r3, [r7, #22]
 800e742:	2300      	movs	r3, #0
 800e744:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800e746:	8afb      	ldrh	r3, [r7, #22]
 800e748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d007      	beq.n	800e760 <fit_lfn+0x70>
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	1c5a      	adds	r2, r3, #1
 800e754:	61fa      	str	r2, [r7, #28]
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800e760:	4a1c      	ldr	r2, [pc, #112]	; (800e7d4 <fit_lfn+0xe4>)
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	4413      	add	r3, r2
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	461a      	mov	r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	4413      	add	r3, r2
 800e76e:	8afa      	ldrh	r2, [r7, #22]
 800e770:	b2d2      	uxtb	r2, r2
 800e772:	701a      	strb	r2, [r3, #0]
 800e774:	8afb      	ldrh	r3, [r7, #22]
 800e776:	0a1b      	lsrs	r3, r3, #8
 800e778:	b299      	uxth	r1, r3
 800e77a:	4a16      	ldr	r2, [pc, #88]	; (800e7d4 <fit_lfn+0xe4>)
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	4413      	add	r3, r2
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	3301      	adds	r3, #1
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	4413      	add	r3, r2
 800e788:	b2ca      	uxtb	r2, r1
 800e78a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800e78c:	8afb      	ldrh	r3, [r7, #22]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <fit_lfn+0xa8>
 800e792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e796:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	3301      	adds	r3, #1
 800e79c:	61bb      	str	r3, [r7, #24]
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	2b0c      	cmp	r3, #12
 800e7a2:	d9d0      	bls.n	800e746 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800e7a4:	8afb      	ldrh	r3, [r7, #22]
 800e7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d006      	beq.n	800e7bc <fit_lfn+0xcc>
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	881b      	ldrh	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d103      	bne.n	800e7c4 <fit_lfn+0xd4>
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	79fa      	ldrb	r2, [r7, #7]
 800e7c8:	701a      	strb	r2, [r3, #0]
}
 800e7ca:	bf00      	nop
 800e7cc:	3724      	adds	r7, #36	; 0x24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bc80      	pop	{r7}
 800e7d2:	4770      	bx	lr
 800e7d4:	0801655c 	.word	0x0801655c

0800e7d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08c      	sub	sp, #48	; 0x30
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e7e6:	220b      	movs	r2, #11
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7fe fc4a 	bl	800d084 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	2b05      	cmp	r3, #5
 800e7f4:	d92b      	bls.n	800e84e <gen_numname+0x76>
		sr = seq;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e7fa:	e022      	b.n	800e842 <gen_numname+0x6a>
			wc = *lfn++;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	1c9a      	adds	r2, r3, #2
 800e800:	607a      	str	r2, [r7, #4]
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e806:	2300      	movs	r3, #0
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
 800e80a:	e017      	b.n	800e83c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	005a      	lsls	r2, r3, #1
 800e810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e81a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e81c:	085b      	lsrs	r3, r3, #1
 800e81e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e826:	2b00      	cmp	r3, #0
 800e828:	d005      	beq.n	800e836 <gen_numname+0x5e>
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e830:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e834:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	3301      	adds	r3, #1
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	2b0f      	cmp	r3, #15
 800e840:	d9e4      	bls.n	800e80c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	881b      	ldrh	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1d8      	bne.n	800e7fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e84e:	2307      	movs	r3, #7
 800e850:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	b2db      	uxtb	r3, r3
 800e856:	f003 030f 	and.w	r3, r3, #15
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	3330      	adds	r3, #48	; 0x30
 800e85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e866:	2b39      	cmp	r3, #57	; 0x39
 800e868:	d904      	bls.n	800e874 <gen_numname+0x9c>
 800e86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e86e:	3307      	adds	r3, #7
 800e870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	1e5a      	subs	r2, r3, #1
 800e878:	62ba      	str	r2, [r7, #40]	; 0x28
 800e87a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e87e:	4413      	add	r3, r2
 800e880:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e884:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	091b      	lsrs	r3, r3, #4
 800e88c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1de      	bne.n	800e852 <gen_numname+0x7a>
	ns[i] = '~';
 800e894:	f107 0214 	add.w	r2, r7, #20
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	4413      	add	r3, r2
 800e89c:	227e      	movs	r2, #126	; 0x7e
 800e89e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8a4:	e002      	b.n	800e8ac <gen_numname+0xd4>
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d205      	bcs.n	800e8c0 <gen_numname+0xe8>
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	4413      	add	r3, r2
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b20      	cmp	r3, #32
 800e8be:	d1f2      	bne.n	800e8a6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	2b07      	cmp	r3, #7
 800e8c4:	d808      	bhi.n	800e8d8 <gen_numname+0x100>
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	62ba      	str	r2, [r7, #40]	; 0x28
 800e8cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e8d0:	4413      	add	r3, r2
 800e8d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e8d6:	e000      	b.n	800e8da <gen_numname+0x102>
 800e8d8:	2120      	movs	r1, #32
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	627a      	str	r2, [r7, #36]	; 0x24
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	460a      	mov	r2, r1
 800e8e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	2b07      	cmp	r3, #7
 800e8ec:	d9e8      	bls.n	800e8c0 <gen_numname+0xe8>
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	3730      	adds	r7, #48	; 0x30
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e904:	230b      	movs	r3, #11
 800e906:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	0852      	lsrs	r2, r2, #1
 800e90e:	01db      	lsls	r3, r3, #7
 800e910:	4313      	orrs	r3, r2
 800e912:	b2da      	uxtb	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1c59      	adds	r1, r3, #1
 800e918:	6079      	str	r1, [r7, #4]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	4413      	add	r3, r2
 800e91e:	73fb      	strb	r3, [r7, #15]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	3b01      	subs	r3, #1
 800e924:	60bb      	str	r3, [r7, #8]
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1ed      	bne.n	800e908 <sum_sfn+0x10>
	return sum;
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	bc80      	pop	{r7}
 800e936:	4770      	bx	lr

0800e938 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e940:	2100      	movs	r1, #0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff fb1f 	bl	800df86 <dir_sdi>
 800e948:	4603      	mov	r3, r0
 800e94a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d001      	beq.n	800e956 <dir_find+0x1e>
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	e0c1      	b.n	800eada <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e956:	23ff      	movs	r3, #255	; 0xff
 800e958:	753b      	strb	r3, [r7, #20]
 800e95a:	7d3b      	ldrb	r3, [r7, #20]
 800e95c:	757b      	strb	r3, [r7, #21]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e964:	3304      	adds	r3, #4
 800e966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e96a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e97a:	3310      	adds	r3, #16
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4619      	mov	r1, r3
 800e980:	4610      	mov	r0, r2
 800e982:	f7fe fe15 	bl	800d5b0 <move_window>
 800e986:	4603      	mov	r3, r0
 800e988:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 809e 	bne.w	800eace <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e998:	3314      	adds	r3, #20
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9a4:	7dbb      	ldrb	r3, [r7, #22]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d102      	bne.n	800e9b0 <dir_find+0x78>
 800e9aa:	2304      	movs	r3, #4
 800e9ac:	75fb      	strb	r3, [r7, #23]
 800e9ae:	e093      	b.n	800ead8 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	330b      	adds	r3, #11
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9ba:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e9bc:	7dbb      	ldrb	r3, [r7, #22]
 800e9be:	2be5      	cmp	r3, #229	; 0xe5
 800e9c0:	d007      	beq.n	800e9d2 <dir_find+0x9a>
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
 800e9c4:	f003 0308 	and.w	r3, r3, #8
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00c      	beq.n	800e9e6 <dir_find+0xae>
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	2b0f      	cmp	r3, #15
 800e9d0:	d009      	beq.n	800e9e6 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e9d2:	23ff      	movs	r3, #255	; 0xff
 800e9d4:	757b      	strb	r3, [r7, #21]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e9dc:	3304      	adds	r3, #4
 800e9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9e2:	801a      	strh	r2, [r3, #0]
 800e9e4:	e068      	b.n	800eab8 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	2b0f      	cmp	r3, #15
 800e9ea:	d139      	bne.n	800ea60 <dir_find+0x128>
				if (dp->lfn) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d05f      	beq.n	800eab8 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e9f8:	7dbb      	ldrb	r3, [r7, #22]
 800e9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d012      	beq.n	800ea28 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	7b5b      	ldrb	r3, [r3, #13]
 800ea06:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ea08:	7dbb      	ldrb	r3, [r7, #22]
 800ea0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea0e:	75bb      	strb	r3, [r7, #22]
 800ea10:	7dbb      	ldrb	r3, [r7, #22]
 800ea12:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea1a:	3306      	adds	r3, #6
 800ea1c:	881a      	ldrh	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea24:	3304      	adds	r3, #4
 800ea26:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ea28:	7dba      	ldrb	r2, [r7, #22]
 800ea2a:	7d7b      	ldrb	r3, [r7, #21]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d114      	bne.n	800ea5a <dir_find+0x122>
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	330d      	adds	r3, #13
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	7d3a      	ldrb	r2, [r7, #20]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d10e      	bne.n	800ea5a <dir_find+0x122>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6939      	ldr	r1, [r7, #16]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7ff fd80 	bl	800e54c <cmp_lfn>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d003      	beq.n	800ea5a <dir_find+0x122>
 800ea52:	7d7b      	ldrb	r3, [r7, #21]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	e000      	b.n	800ea5c <dir_find+0x124>
 800ea5a:	23ff      	movs	r3, #255	; 0xff
 800ea5c:	757b      	strb	r3, [r7, #21]
 800ea5e:	e02b      	b.n	800eab8 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ea60:	7d7b      	ldrb	r3, [r7, #21]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d107      	bne.n	800ea76 <dir_find+0x13e>
 800ea66:	6938      	ldr	r0, [r7, #16]
 800ea68:	f7ff ff46 	bl	800e8f8 <sum_sfn>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	7d3b      	ldrb	r3, [r7, #20]
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d02d      	beq.n	800ead2 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea7c:	3318      	adds	r3, #24
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	330b      	adds	r3, #11
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10c      	bne.n	800eaa6 <dir_find+0x16e>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea92:	3318      	adds	r3, #24
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	220b      	movs	r2, #11
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6938      	ldr	r0, [r7, #16]
 800ea9c:	f7fe fb2a 	bl	800d0f4 <mem_cmp>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d017      	beq.n	800ead6 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800eaa6:	23ff      	movs	r3, #255	; 0xff
 800eaa8:	757b      	strb	r3, [r7, #21]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800eab0:	3304      	adds	r3, #4
 800eab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eab6:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800eab8:	2100      	movs	r1, #0
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7ff fb3e 	bl	800e13c <dir_next>
 800eac0:	4603      	mov	r3, r0
 800eac2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f43f af50 	beq.w	800e96c <dir_find+0x34>
 800eacc:	e004      	b.n	800ead8 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800eace:	bf00      	nop
 800ead0:	e002      	b.n	800ead8 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ead2:	bf00      	nop
 800ead4:	e000      	b.n	800ead8 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ead6:	bf00      	nop

	return res;
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3718      	adds	r7, #24
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b086      	sub	sp, #24
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800eaec:	23ff      	movs	r3, #255	; 0xff
 800eaee:	757b      	strb	r3, [r7, #21]
 800eaf0:	23ff      	movs	r3, #255	; 0xff
 800eaf2:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800eaf8:	e08f      	b.n	800ec1a <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb08:	3310      	adds	r3, #16
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4610      	mov	r0, r2
 800eb10:	f7fe fd4e 	bl	800d5b0 <move_window>
 800eb14:	4603      	mov	r3, r0
 800eb16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb18:	7dfb      	ldrb	r3, [r7, #23]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f040 8086 	bne.w	800ec2c <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb26:	3314      	adds	r3, #20
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb32:	7dbb      	ldrb	r3, [r7, #22]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <dir_read+0x5c>
 800eb38:	2304      	movs	r3, #4
 800eb3a:	75fb      	strb	r3, [r7, #23]
 800eb3c:	e07b      	b.n	800ec36 <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	330b      	adds	r3, #11
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb48:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800eb4a:	7dbb      	ldrb	r3, [r7, #22]
 800eb4c:	2be5      	cmp	r3, #229	; 0xe5
 800eb4e:	d00e      	beq.n	800eb6e <dir_read+0x8c>
 800eb50:	7dbb      	ldrb	r3, [r7, #22]
 800eb52:	2b2e      	cmp	r3, #46	; 0x2e
 800eb54:	d00b      	beq.n	800eb6e <dir_read+0x8c>
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
 800eb58:	f023 0320 	bic.w	r3, r3, #32
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	bf0c      	ite	eq
 800eb60:	2301      	moveq	r3, #1
 800eb62:	2300      	movne	r3, #0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	461a      	mov	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d002      	beq.n	800eb74 <dir_read+0x92>
			ord = 0xFF;
 800eb6e:	23ff      	movs	r3, #255	; 0xff
 800eb70:	757b      	strb	r3, [r7, #21]
 800eb72:	e049      	b.n	800ec08 <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	2b0f      	cmp	r3, #15
 800eb78:	d133      	bne.n	800ebe2 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800eb7a:	7dbb      	ldrb	r3, [r7, #22]
 800eb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d012      	beq.n	800ebaa <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	7b5b      	ldrb	r3, [r3, #13]
 800eb88:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800eb8a:	7dbb      	ldrb	r3, [r7, #22]
 800eb8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb90:	75bb      	strb	r3, [r7, #22]
 800eb92:	7dbb      	ldrb	r3, [r7, #22]
 800eb94:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb9c:	3306      	adds	r3, #6
 800eb9e:	881a      	ldrh	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800eba6:	3304      	adds	r3, #4
 800eba8:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ebaa:	7dba      	ldrb	r2, [r7, #22]
 800ebac:	7d7b      	ldrb	r3, [r7, #21]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d114      	bne.n	800ebdc <dir_read+0xfa>
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	330d      	adds	r3, #13
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	7d3a      	ldrb	r2, [r7, #20]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d10e      	bne.n	800ebdc <dir_read+0xfa>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6939      	ldr	r1, [r7, #16]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff fd2d 	bl	800e628 <pick_lfn>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d003      	beq.n	800ebdc <dir_read+0xfa>
 800ebd4:	7d7b      	ldrb	r3, [r7, #21]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	e000      	b.n	800ebde <dir_read+0xfc>
 800ebdc:	23ff      	movs	r3, #255	; 0xff
 800ebde:	757b      	strb	r3, [r7, #21]
 800ebe0:	e012      	b.n	800ec08 <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800ebe2:	7d7b      	ldrb	r3, [r7, #21]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d107      	bne.n	800ebf8 <dir_read+0x116>
 800ebe8:	6938      	ldr	r0, [r7, #16]
 800ebea:	f7ff fe85 	bl	800e8f8 <sum_sfn>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	7d3b      	ldrb	r3, [r7, #20]
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d01b      	beq.n	800ec30 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ebfe:	3304      	adds	r3, #4
 800ec00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec04:	801a      	strh	r2, [r3, #0]
				break;
 800ec06:	e013      	b.n	800ec30 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800ec08:	2100      	movs	r1, #0
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff fa96 	bl	800e13c <dir_next>
 800ec10:	4603      	mov	r3, r0
 800ec12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d10c      	bne.n	800ec34 <dir_read+0x152>
	while (dp->sect) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec20:	3310      	adds	r3, #16
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f47f af68 	bne.w	800eafa <dir_read+0x18>
 800ec2a:	e004      	b.n	800ec36 <dir_read+0x154>
		if (res != FR_OK) break;
 800ec2c:	bf00      	nop
 800ec2e:	e002      	b.n	800ec36 <dir_read+0x154>
				break;
 800ec30:	bf00      	nop
 800ec32:	e000      	b.n	800ec36 <dir_read+0x154>
		if (res != FR_OK) break;
 800ec34:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <dir_read+0x166>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec42:	3310      	adds	r3, #16
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]

	return res;
 800ec48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08c      	sub	sp, #48	; 0x30
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec62:	3318      	adds	r3, #24
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	623b      	str	r3, [r7, #32]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ec72:	f107 030c 	add.w	r3, r7, #12
 800ec76:	220c      	movs	r2, #12
 800ec78:	6a39      	ldr	r1, [r7, #32]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fa02 	bl	800d084 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	f003 0301 	and.w	r3, r3, #1
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d039      	beq.n	800ecfe <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ec8a:	6a3b      	ldr	r3, [r7, #32]
 800ec8c:	330b      	adds	r3, #11
 800ec8e:	2200      	movs	r2, #0
 800ec90:	701a      	strb	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eca0:	e013      	b.n	800ecca <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800eca2:	f107 010c 	add.w	r1, r7, #12
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	6a38      	ldr	r0, [r7, #32]
 800ecac:	f7ff fd94 	bl	800e7d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fe41 	bl	800e938 <dir_find>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ecbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d106      	bne.n	800ecd2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	2b63      	cmp	r3, #99	; 0x63
 800ecce:	d9e8      	bls.n	800eca2 <dir_register+0x4e>
 800ecd0:	e000      	b.n	800ecd4 <dir_register+0x80>
			if (res != FR_OK) break;
 800ecd2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	2b64      	cmp	r3, #100	; 0x64
 800ecd8:	d101      	bne.n	800ecde <dir_register+0x8a>
 800ecda:	2307      	movs	r3, #7
 800ecdc:	e0e3      	b.n	800eea6 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ecde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ece2:	2b04      	cmp	r3, #4
 800ece4:	d002      	beq.n	800ecec <dir_register+0x98>
 800ece6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecea:	e0dc      	b.n	800eea6 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	330b      	adds	r3, #11
 800ecf0:	7dfa      	ldrb	r2, [r7, #23]
 800ecf2:	701a      	strb	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
 800ed00:	f003 0302 	and.w	r3, r3, #2
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d014      	beq.n	800ed32 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed0c:	e002      	b.n	800ed14 <dir_register+0xc0>
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	3301      	adds	r3, #1
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	69fa      	ldr	r2, [r7, #28]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1f5      	bne.n	800ed0e <dir_register+0xba>
		nent = (n + 25) / 13;
 800ed22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed24:	3319      	adds	r3, #25
 800ed26:	4a62      	ldr	r2, [pc, #392]	; (800eeb0 <dir_register+0x25c>)
 800ed28:	fba2 2303 	umull	r2, r3, r2, r3
 800ed2c:	089b      	lsrs	r3, r3, #2
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed30:	e001      	b.n	800ed36 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ed32:	2301      	movs	r3, #1
 800ed34:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7ff fb61 	bl	800e400 <dir_alloc>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ed44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d160      	bne.n	800ee0e <dir_register+0x1ba>
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d05a      	beq.n	800ee0e <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed5e:	3306      	adds	r3, #6
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	4619      	mov	r1, r3
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff f90b 	bl	800df86 <dir_sdi>
 800ed70:	4603      	mov	r3, r0
 800ed72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ed76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d147      	bne.n	800ee0e <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed84:	3318      	adds	r3, #24
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff fdb5 	bl	800e8f8 <sum_sfn>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eda0:	3310      	adds	r3, #16
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4619      	mov	r1, r3
 800eda6:	4610      	mov	r0, r2
 800eda8:	f7fe fc02 	bl	800d5b0 <move_window>
 800edac:	4603      	mov	r3, r0
 800edae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800edb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d128      	bne.n	800ee0c <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edc8:	3314      	adds	r3, #20
 800edca:	6819      	ldr	r1, [r3, #0]
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	7efb      	ldrb	r3, [r7, #27]
 800edd2:	f7ff fc8d 	bl	800e6f0 <fit_lfn>
				dp->fs->wflag = 1;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ede2:	3304      	adds	r3, #4
 800ede4:	2201      	movs	r2, #1
 800ede6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800ede8:	2100      	movs	r1, #0
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff f9a6 	bl	800e13c <dir_next>
 800edf0:	4603      	mov	r3, r0
 800edf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800edf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d107      	bne.n	800ee0e <dir_register+0x1ba>
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	3b01      	subs	r3, #1
 800ee02:	627b      	str	r3, [r7, #36]	; 0x24
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1c3      	bne.n	800ed92 <dir_register+0x13e>
 800ee0a:	e000      	b.n	800ee0e <dir_register+0x1ba>
				if (res != FR_OK) break;
 800ee0c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ee0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d145      	bne.n	800eea2 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee24:	3310      	adds	r3, #16
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	f7fe fbc0 	bl	800d5b0 <move_window>
 800ee30:	4603      	mov	r3, r0
 800ee32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ee36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d131      	bne.n	800eea2 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee44:	3314      	adds	r3, #20
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe f937 	bl	800d0c0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee58:	3314      	adds	r3, #20
 800ee5a:	6818      	ldr	r0, [r3, #0]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee62:	3318      	adds	r3, #24
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	220b      	movs	r2, #11
 800ee68:	4619      	mov	r1, r3
 800ee6a:	f7fe f90b 	bl	800d084 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee74:	3318      	adds	r3, #24
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	330b      	adds	r3, #11
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee82:	3314      	adds	r3, #20
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	330c      	adds	r3, #12
 800ee88:	f002 0218 	and.w	r2, r2, #24
 800ee8c:	b2d2      	uxtb	r2, r2
 800ee8e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	2201      	movs	r2, #1
 800eea0:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800eea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3730      	adds	r7, #48	; 0x30
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800eeb4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	3309      	adds	r3, #9
 800eec2:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeca:	3310      	adds	r3, #16
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d072      	beq.n	800efb8 <get_fileinfo+0x104>
		dir = dp->dir;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eed8:	3314      	adds	r3, #20
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	60fb      	str	r3, [r7, #12]
		i = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 800eee2:	e032      	b.n	800ef4a <get_fileinfo+0x96>
			c = (TCHAR)dir[i++];
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	61fa      	str	r2, [r7, #28]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	4413      	add	r3, r2
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 800eef2:	7dfb      	ldrb	r3, [r7, #23]
 800eef4:	2b20      	cmp	r3, #32
 800eef6:	d100      	bne.n	800eefa <get_fileinfo+0x46>
 800eef8:	e027      	b.n	800ef4a <get_fileinfo+0x96>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
 800eefc:	2b05      	cmp	r3, #5
 800eefe:	d101      	bne.n	800ef04 <get_fileinfo+0x50>
 800ef00:	23e5      	movs	r3, #229	; 0xe5
 800ef02:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	2b09      	cmp	r3, #9
 800ef08:	d104      	bne.n	800ef14 <get_fileinfo+0x60>
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	1c5a      	adds	r2, r3, #1
 800ef0e:	61ba      	str	r2, [r7, #24]
 800ef10:	222e      	movs	r2, #46	; 0x2e
 800ef12:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 800ef14:	7dfb      	ldrb	r3, [r7, #23]
 800ef16:	2b40      	cmp	r3, #64	; 0x40
 800ef18:	d912      	bls.n	800ef40 <get_fileinfo+0x8c>
 800ef1a:	7dfb      	ldrb	r3, [r7, #23]
 800ef1c:	2b5a      	cmp	r3, #90	; 0x5a
 800ef1e:	d80f      	bhi.n	800ef40 <get_fileinfo+0x8c>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	330c      	adds	r3, #12
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	461a      	mov	r2, r3
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	2b08      	cmp	r3, #8
 800ef2c:	d901      	bls.n	800ef32 <get_fileinfo+0x7e>
 800ef2e:	2310      	movs	r3, #16
 800ef30:	e000      	b.n	800ef34 <get_fileinfo+0x80>
 800ef32:	2308      	movs	r3, #8
 800ef34:	4013      	ands	r3, r2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d002      	beq.n	800ef40 <get_fileinfo+0x8c>
				c += 0x20;			/* To lower */
 800ef3a:	7dfb      	ldrb	r3, [r7, #23]
 800ef3c:	3320      	adds	r3, #32
 800ef3e:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	61ba      	str	r2, [r7, #24]
 800ef46:	7dfa      	ldrb	r2, [r7, #23]
 800ef48:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	2b0a      	cmp	r3, #10
 800ef4e:	d9c9      	bls.n	800eee4 <get_fileinfo+0x30>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	7ada      	ldrb	r2, [r3, #11]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	331f      	adds	r3, #31
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	061a      	lsls	r2, r3, #24
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	331e      	adds	r3, #30
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	041b      	lsls	r3, r3, #16
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	321d      	adds	r2, #29
 800ef6e:	7812      	ldrb	r2, [r2, #0]
 800ef70:	0212      	lsls	r2, r2, #8
 800ef72:	4313      	orrs	r3, r2
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	321c      	adds	r2, #28
 800ef78:	7812      	ldrb	r2, [r2, #0]
 800ef7a:	431a      	orrs	r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	3319      	adds	r3, #25
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	021b      	lsls	r3, r3, #8
 800ef88:	b21a      	sxth	r2, r3
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	3318      	adds	r3, #24
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	b21b      	sxth	r3, r3
 800ef92:	4313      	orrs	r3, r2
 800ef94:	b21b      	sxth	r3, r3
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	3317      	adds	r3, #23
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	021b      	lsls	r3, r3, #8
 800efa4:	b21a      	sxth	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3316      	adds	r3, #22
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	b21b      	sxth	r3, r3
 800efae:	4313      	orrs	r3, r2
 800efb0:	b21b      	sxth	r3, r3
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d049      	beq.n	800f05a <get_fileinfo+0x1a6>
		i = 0; p = fno->lfname;
 800efc6:	2300      	movs	r3, #0
 800efc8:	61fb      	str	r3, [r7, #28]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	699b      	ldr	r3, [r3, #24]
 800efce:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efd6:	3310      	adds	r3, #16
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d038      	beq.n	800f050 <get_fileinfo+0x19c>
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	69db      	ldr	r3, [r3, #28]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d034      	beq.n	800f050 <get_fileinfo+0x19c>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800efec:	3304      	adds	r3, #4
 800efee:	881b      	ldrh	r3, [r3, #0]
 800eff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d02b      	beq.n	800f050 <get_fileinfo+0x19c>
			lfn = dp->lfn;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800f002:	e01d      	b.n	800f040 <get_fileinfo+0x18c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f004:	897b      	ldrh	r3, [r7, #10]
 800f006:	2100      	movs	r1, #0
 800f008:	4618      	mov	r0, r3
 800f00a:	f002 f9ad 	bl	8011368 <ff_convert>
 800f00e:	4603      	mov	r3, r0
 800f010:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800f012:	897b      	ldrh	r3, [r7, #10]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d102      	bne.n	800f01e <get_fileinfo+0x16a>
 800f018:	2300      	movs	r3, #0
 800f01a:	61fb      	str	r3, [r7, #28]
 800f01c:	e018      	b.n	800f050 <get_fileinfo+0x19c>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	69db      	ldr	r3, [r3, #28]
 800f022:	3b01      	subs	r3, #1
 800f024:	69fa      	ldr	r2, [r7, #28]
 800f026:	429a      	cmp	r2, r3
 800f028:	d302      	bcc.n	800f030 <get_fileinfo+0x17c>
 800f02a:	2300      	movs	r3, #0
 800f02c:	61fb      	str	r3, [r7, #28]
 800f02e:	e00f      	b.n	800f050 <get_fileinfo+0x19c>
				p[i++] = (TCHAR)w;
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	61fa      	str	r2, [r7, #28]
 800f036:	69ba      	ldr	r2, [r7, #24]
 800f038:	4413      	add	r3, r2
 800f03a:	897a      	ldrh	r2, [r7, #10]
 800f03c:	b2d2      	uxtb	r2, r2
 800f03e:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	1c9a      	adds	r2, r3, #2
 800f044:	613a      	str	r2, [r7, #16]
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	817b      	strh	r3, [r7, #10]
 800f04a:	897b      	ldrh	r3, [r7, #10]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1d9      	bne.n	800f004 <get_fileinfo+0x150>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800f050:	69ba      	ldr	r2, [r7, #24]
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	4413      	add	r3, r2
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800f05a:	bf00      	nop
 800f05c:	3720      	adds	r7, #32
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08a      	sub	sp, #40	; 0x28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	613b      	str	r3, [r7, #16]
 800f074:	e002      	b.n	800f07c <create_name+0x18>
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	3301      	adds	r3, #1
 800f07a:	613b      	str	r3, [r7, #16]
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	2b2f      	cmp	r3, #47	; 0x2f
 800f082:	d0f8      	beq.n	800f076 <create_name+0x12>
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2b5c      	cmp	r3, #92	; 0x5c
 800f08a:	d0f4      	beq.n	800f076 <create_name+0x12>
	lfn = dp->lfn;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	1c5a      	adds	r2, r3, #1
 800f0a2:	61ba      	str	r2, [r7, #24]
 800f0a4:	693a      	ldr	r2, [r7, #16]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ae:	2b1f      	cmp	r3, #31
 800f0b0:	d92f      	bls.n	800f112 <create_name+0xae>
 800f0b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b4:	2b2f      	cmp	r3, #47	; 0x2f
 800f0b6:	d02c      	beq.n	800f112 <create_name+0xae>
 800f0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ba:	2b5c      	cmp	r3, #92	; 0x5c
 800f0bc:	d029      	beq.n	800f112 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2bfe      	cmp	r3, #254	; 0xfe
 800f0c2:	d901      	bls.n	800f0c8 <create_name+0x64>
			return FR_INVALID_NAME;
 800f0c4:	2306      	movs	r3, #6
 800f0c6:	e18b      	b.n	800f3e0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f002 f948 	bl	8011368 <ff_convert>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <create_name+0x82>
 800f0e2:	2306      	movs	r3, #6
 800f0e4:	e17c      	b.n	800f3e0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800f0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0e8:	2b7f      	cmp	r3, #127	; 0x7f
 800f0ea:	d809      	bhi.n	800f100 <create_name+0x9c>
 800f0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	488f      	ldr	r0, [pc, #572]	; (800f330 <create_name+0x2cc>)
 800f0f2:	f7fe f825 	bl	800d140 <chk_chr>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <create_name+0x9c>
			return FR_INVALID_NAME;
 800f0fc:	2306      	movs	r3, #6
 800f0fe:	e16f      	b.n	800f3e0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	617a      	str	r2, [r7, #20]
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	4413      	add	r3, r2
 800f10c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f10e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f110:	e7c5      	b.n	800f09e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	441a      	add	r2, r3
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f11c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f11e:	2b1f      	cmp	r3, #31
 800f120:	d801      	bhi.n	800f126 <create_name+0xc2>
 800f122:	2304      	movs	r3, #4
 800f124:	e000      	b.n	800f128 <create_name+0xc4>
 800f126:	2300      	movs	r3, #0
 800f128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800f12c:	e011      	b.n	800f152 <create_name+0xee>
		w = lfn[di - 1];
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f134:	3b01      	subs	r3, #1
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f142:	2b20      	cmp	r3, #32
 800f144:	d002      	beq.n	800f14c <create_name+0xe8>
 800f146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f148:	2b2e      	cmp	r3, #46	; 0x2e
 800f14a:	d106      	bne.n	800f15a <create_name+0xf6>
		di--;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	3b01      	subs	r3, #1
 800f150:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1ea      	bne.n	800f12e <create_name+0xca>
 800f158:	e000      	b.n	800f15c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800f15a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <create_name+0x102>
 800f162:	2306      	movs	r3, #6
 800f164:	e13c      	b.n	800f3e0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	005b      	lsls	r3, r3, #1
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4413      	add	r3, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f178:	3318      	adds	r3, #24
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	220b      	movs	r2, #11
 800f17e:	2120      	movs	r1, #32
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd ff9d 	bl	800d0c0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f186:	2300      	movs	r3, #0
 800f188:	61bb      	str	r3, [r7, #24]
 800f18a:	e002      	b.n	800f192 <create_name+0x12e>
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	3301      	adds	r3, #1
 800f190:	61bb      	str	r3, [r7, #24]
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	4413      	add	r3, r2
 800f19a:	881b      	ldrh	r3, [r3, #0]
 800f19c:	2b20      	cmp	r3, #32
 800f19e:	d0f5      	beq.n	800f18c <create_name+0x128>
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ac:	d0ee      	beq.n	800f18c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d009      	beq.n	800f1c8 <create_name+0x164>
 800f1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b8:	f043 0303 	orr.w	r3, r3, #3
 800f1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f1c0:	e002      	b.n	800f1c8 <create_name+0x164>
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	617b      	str	r3, [r7, #20]
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d009      	beq.n	800f1e2 <create_name+0x17e>
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	4413      	add	r3, r2
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	2b2e      	cmp	r3, #46	; 0x2e
 800f1e0:	d1ef      	bne.n	800f1c2 <create_name+0x15e>

	b = i = 0; ni = 8;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	623b      	str	r3, [r7, #32]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1ec:	2308      	movs	r3, #8
 800f1ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	61ba      	str	r2, [r7, #24]
 800f1f6:	005b      	lsls	r3, r3, #1
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 8092 	beq.w	800f32c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f20a:	2b20      	cmp	r3, #32
 800f20c:	d006      	beq.n	800f21c <create_name+0x1b8>
 800f20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f210:	2b2e      	cmp	r3, #46	; 0x2e
 800f212:	d10a      	bne.n	800f22a <create_name+0x1c6>
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d006      	beq.n	800f22a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800f21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f220:	f043 0303 	orr.w	r3, r3, #3
 800f224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f228:	e07f      	b.n	800f32a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f22a:	6a3a      	ldr	r2, [r7, #32]
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d203      	bcs.n	800f23a <create_name+0x1d6>
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	429a      	cmp	r2, r3
 800f238:	d123      	bne.n	800f282 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	2b0b      	cmp	r3, #11
 800f23e:	d106      	bne.n	800f24e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800f240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f244:	f043 0303 	orr.w	r3, r3, #3
 800f248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f24c:	e077      	b.n	800f33e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	429a      	cmp	r2, r3
 800f254:	d005      	beq.n	800f262 <create_name+0x1fe>
 800f256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f25a:	f043 0303 	orr.w	r3, r3, #3
 800f25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f262:	69ba      	ldr	r2, [r7, #24]
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	429a      	cmp	r2, r3
 800f268:	d868      	bhi.n	800f33c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	61bb      	str	r3, [r7, #24]
 800f26e:	2308      	movs	r3, #8
 800f270:	623b      	str	r3, [r7, #32]
 800f272:	230b      	movs	r3, #11
 800f274:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f280:	e053      	b.n	800f32a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f284:	2b7f      	cmp	r3, #127	; 0x7f
 800f286:	d914      	bls.n	800f2b2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f28a:	2100      	movs	r1, #0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f002 f86b 	bl	8011368 <ff_convert>
 800f292:	4603      	mov	r3, r0
 800f294:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d004      	beq.n	800f2a6 <create_name+0x242>
 800f29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f29e:	3b80      	subs	r3, #128	; 0x80
 800f2a0:	4a24      	ldr	r2, [pc, #144]	; (800f334 <create_name+0x2d0>)
 800f2a2:	5cd3      	ldrb	r3, [r2, r3]
 800f2a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2aa:	f043 0302 	orr.w	r3, r3, #2
 800f2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d007      	beq.n	800f2c8 <create_name+0x264>
 800f2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	481e      	ldr	r0, [pc, #120]	; (800f338 <create_name+0x2d4>)
 800f2be:	f7fd ff3f 	bl	800d140 <chk_chr>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d008      	beq.n	800f2da <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f2c8:	235f      	movs	r3, #95	; 0x5f
 800f2ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d0:	f043 0303 	orr.w	r3, r3, #3
 800f2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2d8:	e01b      	b.n	800f312 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2dc:	2b40      	cmp	r3, #64	; 0x40
 800f2de:	d909      	bls.n	800f2f4 <create_name+0x290>
 800f2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2e2:	2b5a      	cmp	r3, #90	; 0x5a
 800f2e4:	d806      	bhi.n	800f2f4 <create_name+0x290>
					b |= 2;
 800f2e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2ea:	f043 0302 	orr.w	r3, r3, #2
 800f2ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2f2:	e00e      	b.n	800f312 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f2f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2f6:	2b60      	cmp	r3, #96	; 0x60
 800f2f8:	d90b      	bls.n	800f312 <create_name+0x2ae>
 800f2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2fc:	2b7a      	cmp	r3, #122	; 0x7a
 800f2fe:	d808      	bhi.n	800f312 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800f300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f304:	f043 0301 	orr.w	r3, r3, #1
 800f308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f30e:	3b20      	subs	r3, #32
 800f310:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f318:	3318      	adds	r3, #24
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	6a3b      	ldr	r3, [r7, #32]
 800f31e:	1c59      	adds	r1, r3, #1
 800f320:	6239      	str	r1, [r7, #32]
 800f322:	4413      	add	r3, r2
 800f324:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f326:	b2d2      	uxtb	r2, r2
 800f328:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800f32a:	e761      	b.n	800f1f0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800f32c:	bf00      	nop
 800f32e:	e006      	b.n	800f33e <create_name+0x2da>
 800f330:	0801643c 	.word	0x0801643c
 800f334:	080164dc 	.word	0x080164dc
 800f338:	08016448 	.word	0x08016448
			if (si > di) break;			/* No extension */
 800f33c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f344:	3318      	adds	r3, #24
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	2be5      	cmp	r3, #229	; 0xe5
 800f34c:	d106      	bne.n	800f35c <create_name+0x2f8>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f354:	3318      	adds	r3, #24
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2205      	movs	r2, #5
 800f35a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	2b08      	cmp	r3, #8
 800f360:	d104      	bne.n	800f36c <create_name+0x308>
 800f362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800f36c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f370:	f003 030c 	and.w	r3, r3, #12
 800f374:	2b0c      	cmp	r3, #12
 800f376:	d005      	beq.n	800f384 <create_name+0x320>
 800f378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f37c:	f003 0303 	and.w	r3, r3, #3
 800f380:	2b03      	cmp	r3, #3
 800f382:	d105      	bne.n	800f390 <create_name+0x32c>
		cf |= NS_LFN;
 800f384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f388:	f043 0302 	orr.w	r3, r3, #2
 800f38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f394:	f003 0302 	and.w	r3, r3, #2
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d117      	bne.n	800f3cc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f39c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3a0:	f003 0303 	and.w	r3, r3, #3
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d105      	bne.n	800f3b4 <create_name+0x350>
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ac:	f043 0310 	orr.w	r3, r3, #16
 800f3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f3b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3b8:	f003 030c 	and.w	r3, r3, #12
 800f3bc:	2b04      	cmp	r3, #4
 800f3be:	d105      	bne.n	800f3cc <create_name+0x368>
 800f3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c4:	f043 0308 	orr.w	r3, r3, #8
 800f3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3d2:	3318      	adds	r3, #24
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	330b      	adds	r3, #11
 800f3d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f3dc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f3de:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3728      	adds	r7, #40	; 0x28
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b2f      	cmp	r3, #47	; 0x2f
 800f3f8:	d003      	beq.n	800f402 <follow_path+0x1a>
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b5c      	cmp	r3, #92	; 0x5c
 800f400:	d102      	bne.n	800f408 <follow_path+0x20>
		path++;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	3301      	adds	r3, #1
 800f406:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f40e:	3308      	adds	r3, #8
 800f410:	2200      	movs	r2, #0
 800f412:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b1f      	cmp	r3, #31
 800f41a:	d80c      	bhi.n	800f436 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800f41c:	2100      	movs	r1, #0
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7fe fdb1 	bl	800df86 <dir_sdi>
 800f424:	4603      	mov	r3, r0
 800f426:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f42e:	3314      	adds	r3, #20
 800f430:	2200      	movs	r2, #0
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	e04c      	b.n	800f4d0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f436:	463b      	mov	r3, r7
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff fe12 	bl	800f064 <create_name>
 800f440:	4603      	mov	r3, r0
 800f442:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d13d      	bne.n	800f4c6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff fa74 	bl	800e938 <dir_find>
 800f450:	4603      	mov	r3, r0
 800f452:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f45a:	3318      	adds	r3, #24
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	7adb      	ldrb	r3, [r3, #11]
 800f460:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00a      	beq.n	800f47e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d12d      	bne.n	800f4ca <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b00      	cmp	r3, #0
 800f476:	d128      	bne.n	800f4ca <follow_path+0xe2>
 800f478:	2305      	movs	r3, #5
 800f47a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800f47c:	e025      	b.n	800f4ca <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f47e:	7bbb      	ldrb	r3, [r7, #14]
 800f480:	f003 0304 	and.w	r3, r3, #4
 800f484:	2b00      	cmp	r3, #0
 800f486:	d122      	bne.n	800f4ce <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f48e:	3314      	adds	r3, #20
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	330b      	adds	r3, #11
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	f003 0310 	and.w	r3, r3, #16
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d102      	bne.n	800f4a8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800f4a2:	2305      	movs	r3, #5
 800f4a4:	73fb      	strb	r3, [r7, #15]
 800f4a6:	e013      	b.n	800f4d0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fff5 	bl	800e4a2 <ld_clust>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4c4:	e7b7      	b.n	800f436 <follow_path+0x4e>
			if (res != FR_OK) break;
 800f4c6:	bf00      	nop
 800f4c8:	e002      	b.n	800f4d0 <follow_path+0xe8>
				break;
 800f4ca:	bf00      	nop
 800f4cc:	e000      	b.n	800f4d0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4ce:	bf00      	nop
		}
	}

	return res;
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b087      	sub	sp, #28
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d031      	beq.n	800f554 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	617b      	str	r3, [r7, #20]
 800f4f6:	e002      	b.n	800f4fe <get_ldnumber+0x24>
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	617b      	str	r3, [r7, #20]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	2b1f      	cmp	r3, #31
 800f504:	d903      	bls.n	800f50e <get_ldnumber+0x34>
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b3a      	cmp	r3, #58	; 0x3a
 800f50c:	d1f4      	bne.n	800f4f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b3a      	cmp	r3, #58	; 0x3a
 800f514:	d11c      	bne.n	800f550 <get_ldnumber+0x76>
			tp = *path;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	1c5a      	adds	r2, r3, #1
 800f520:	60fa      	str	r2, [r7, #12]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	3b30      	subs	r3, #48	; 0x30
 800f526:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2b09      	cmp	r3, #9
 800f52c:	d80e      	bhi.n	800f54c <get_ldnumber+0x72>
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	429a      	cmp	r2, r3
 800f534:	d10a      	bne.n	800f54c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d107      	bne.n	800f54c <get_ldnumber+0x72>
					vol = (int)i;
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	3301      	adds	r3, #1
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	697a      	ldr	r2, [r7, #20]
 800f54a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	e002      	b.n	800f556 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f550:	2300      	movs	r3, #0
 800f552:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f554:	693b      	ldr	r3, [r7, #16]
}
 800f556:	4618      	mov	r0, r3
 800f558:	371c      	adds	r7, #28
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bc80      	pop	{r7}
 800f55e:	4770      	bx	lr

0800f560 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f570:	3304      	adds	r3, #4
 800f572:	2200      	movs	r2, #0
 800f574:	701a      	strb	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800f57c:	330c      	adds	r3, #12
 800f57e:	f04f 32ff 	mov.w	r2, #4294967295
 800f582:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7fe f812 	bl	800d5b0 <move_window>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <check_fs+0x36>
		return 3;
 800f592:	2303      	movs	r3, #3
 800f594:	e04a      	b.n	800f62c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f59c:	3301      	adds	r3, #1
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	021b      	lsls	r3, r3, #8
 800f5a2:	b21a      	sxth	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800f5aa:	b21b      	sxth	r3, r3
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	b21b      	sxth	r3, r3
 800f5b0:	4a20      	ldr	r2, [pc, #128]	; (800f634 <check_fs+0xd4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d001      	beq.n	800f5ba <check_fs+0x5a>
		return 2;
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	e038      	b.n	800f62c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3336      	adds	r3, #54	; 0x36
 800f5be:	3303      	adds	r3, #3
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	061a      	lsls	r2, r3, #24
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3336      	adds	r3, #54	; 0x36
 800f5c8:	3302      	adds	r3, #2
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	041b      	lsls	r3, r3, #16
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	3236      	adds	r2, #54	; 0x36
 800f5d4:	3201      	adds	r2, #1
 800f5d6:	7812      	ldrb	r2, [r2, #0]
 800f5d8:	0212      	lsls	r2, r2, #8
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f5e8:	4a13      	ldr	r2, [pc, #76]	; (800f638 <check_fs+0xd8>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d101      	bne.n	800f5f2 <check_fs+0x92>
		return 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e01c      	b.n	800f62c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	3352      	adds	r3, #82	; 0x52
 800f5f6:	3303      	adds	r3, #3
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	061a      	lsls	r2, r3, #24
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3352      	adds	r3, #82	; 0x52
 800f600:	3302      	adds	r3, #2
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	041b      	lsls	r3, r3, #16
 800f606:	4313      	orrs	r3, r2
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	3252      	adds	r2, #82	; 0x52
 800f60c:	3201      	adds	r2, #1
 800f60e:	7812      	ldrb	r2, [r2, #0]
 800f610:	0212      	lsls	r2, r2, #8
 800f612:	4313      	orrs	r3, r2
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800f61a:	4313      	orrs	r3, r2
 800f61c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f620:	4a05      	ldr	r2, [pc, #20]	; (800f638 <check_fs+0xd8>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d101      	bne.n	800f62a <check_fs+0xca>
		return 0;
 800f626:	2300      	movs	r3, #0
 800f628:	e000      	b.n	800f62c <check_fs+0xcc>

	return 1;
 800f62a:	2301      	movs	r3, #1
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	ffffaa55 	.word	0xffffaa55
 800f638:	00544146 	.word	0x00544146

0800f63c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b096      	sub	sp, #88	; 0x58
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f650:	68b8      	ldr	r0, [r7, #8]
 800f652:	f7ff ff42 	bl	800f4da <get_ldnumber>
 800f656:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da01      	bge.n	800f662 <find_volume+0x26>
 800f65e:	230b      	movs	r3, #11
 800f660:	e33c      	b.n	800fcdc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f662:	4ab3      	ldr	r2, [pc, #716]	; (800f930 <find_volume+0x2f4>)
 800f664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f66a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d101      	bne.n	800f676 <find_volume+0x3a>
 800f672:	230c      	movs	r3, #12
 800f674:	e332      	b.n	800fcdc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f67a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d01d      	beq.n	800f6c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68e:	3301      	adds	r3, #1
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	4618      	mov	r0, r3
 800f694:	f7fd fc58 	bl	800cf48 <disk_status>
 800f698:	4603      	mov	r3, r0
 800f69a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f69e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10c      	bne.n	800f6c4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800f6aa:	79fb      	ldrb	r3, [r7, #7]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d007      	beq.n	800f6c0 <find_volume+0x84>
 800f6b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6b4:	f003 0304 	and.w	r3, r3, #4
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f6bc:	230a      	movs	r3, #10
 800f6be:	e30d      	b.n	800fcdc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	e30b      	b.n	800fcdc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d0:	b2da      	uxtb	r2, r3
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6d8:	3301      	adds	r3, #1
 800f6da:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fd fc48 	bl	800cf7c <disk_initialize>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800f6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d001      	beq.n	800f702 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f6fe:	2303      	movs	r3, #3
 800f700:	e2ec      	b.n	800fcdc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d007      	beq.n	800f718 <find_volume+0xdc>
 800f708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800f714:	230a      	movs	r3, #10
 800f716:	e2e1      	b.n	800fcdc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800f718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f71e:	3301      	adds	r3, #1
 800f720:	7818      	ldrb	r0, [r3, #0]
 800f722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f728:	330a      	adds	r3, #10
 800f72a:	461a      	mov	r2, r3
 800f72c:	2102      	movs	r1, #2
 800f72e:	f7fd fc8b 	bl	800d048 <disk_ioctl>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10f      	bne.n	800f758 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f73e:	330a      	adds	r3, #10
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f746:	d307      	bcc.n	800f758 <find_volume+0x11c>
 800f748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f74e:	330a      	adds	r3, #10
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f756:	d901      	bls.n	800f75c <find_volume+0x120>
 800f758:	2301      	movs	r3, #1
 800f75a:	e2bf      	b.n	800fcdc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800f75c:	2300      	movs	r3, #0
 800f75e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800f760:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f764:	f7ff fefc 	bl	800f560 <check_fs>
 800f768:	4603      	mov	r3, r0
 800f76a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800f76e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f772:	2b01      	cmp	r3, #1
 800f774:	d155      	bne.n	800f822 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f776:	2300      	movs	r3, #0
 800f778:	643b      	str	r3, [r7, #64]	; 0x40
 800f77a:	e029      	b.n	800f7d0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800f77c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f780:	011b      	lsls	r3, r3, #4
 800f782:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f786:	4413      	add	r3, r2
 800f788:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	3304      	adds	r3, #4
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d012      	beq.n	800f7ba <find_volume+0x17e>
 800f794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f796:	330b      	adds	r3, #11
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	061a      	lsls	r2, r3, #24
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	330a      	adds	r3, #10
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	041b      	lsls	r3, r3, #16
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a8:	3209      	adds	r2, #9
 800f7aa:	7812      	ldrb	r2, [r2, #0]
 800f7ac:	0212      	lsls	r2, r2, #8
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7b2:	3208      	adds	r2, #8
 800f7b4:	7812      	ldrb	r2, [r2, #0]
 800f7b6:	431a      	orrs	r2, r3
 800f7b8:	e000      	b.n	800f7bc <find_volume+0x180>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f7c4:	440b      	add	r3, r1
 800f7c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f7d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d2:	2b03      	cmp	r3, #3
 800f7d4:	d9d2      	bls.n	800f77c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <find_volume+0x1aa>
 800f7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800f7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f7f4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800f7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d005      	beq.n	800f808 <find_volume+0x1cc>
 800f7fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f800:	f7ff feae 	bl	800f560 <check_fs>
 800f804:	4603      	mov	r3, r0
 800f806:	e000      	b.n	800f80a <find_volume+0x1ce>
 800f808:	2302      	movs	r3, #2
 800f80a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800f80e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f812:	2b00      	cmp	r3, #0
 800f814:	d005      	beq.n	800f822 <find_volume+0x1e6>
 800f816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f818:	3301      	adds	r3, #1
 800f81a:	643b      	str	r3, [r7, #64]	; 0x40
 800f81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f81e:	2b03      	cmp	r3, #3
 800f820:	d9e1      	bls.n	800f7e6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f826:	2b03      	cmp	r3, #3
 800f828:	d101      	bne.n	800f82e <find_volume+0x1f2>
 800f82a:	2301      	movs	r3, #1
 800f82c:	e256      	b.n	800fcdc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800f82e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <find_volume+0x1fe>
 800f836:	230d      	movs	r3, #13
 800f838:	e250      	b.n	800fcdc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83c:	7b1b      	ldrb	r3, [r3, #12]
 800f83e:	021b      	lsls	r3, r3, #8
 800f840:	b21a      	sxth	r2, r3
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	7adb      	ldrb	r3, [r3, #11]
 800f846:	b21b      	sxth	r3, r3
 800f848:	4313      	orrs	r3, r2
 800f84a:	b21a      	sxth	r2, r3
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f852:	330a      	adds	r3, #10
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	b21b      	sxth	r3, r3
 800f858:	429a      	cmp	r2, r3
 800f85a:	d001      	beq.n	800f860 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800f85c:	230d      	movs	r3, #13
 800f85e:	e23d      	b.n	800fcdc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	7ddb      	ldrb	r3, [r3, #23]
 800f864:	021b      	lsls	r3, r3, #8
 800f866:	b21a      	sxth	r2, r3
 800f868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86a:	7d9b      	ldrb	r3, [r3, #22]
 800f86c:	b21b      	sxth	r3, r3
 800f86e:	4313      	orrs	r3, r2
 800f870:	b21b      	sxth	r3, r3
 800f872:	b29b      	uxth	r3, r3
 800f874:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800f876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d112      	bne.n	800f8a2 <find_volume+0x266>
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f882:	061a      	lsls	r2, r3, #24
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f88a:	041b      	lsls	r3, r3, #16
 800f88c:	4313      	orrs	r3, r2
 800f88e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f890:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f894:	0212      	lsls	r2, r2, #8
 800f896:	4313      	orrs	r3, r2
 800f898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f89a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a8:	3318      	adds	r3, #24
 800f8aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8ac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	7c1a      	ldrb	r2, [r3, #16]
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8b8:	3303      	adds	r3, #3
 800f8ba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8c2:	3303      	adds	r3, #3
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d008      	beq.n	800f8dc <find_volume+0x2a0>
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8d0:	3303      	adds	r3, #3
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d001      	beq.n	800f8dc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800f8d8:	230d      	movs	r3, #13
 800f8da:	e1ff      	b.n	800fcdc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8e2:	3303      	adds	r3, #3
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ea:	fb02 f303 	mul.w	r3, r2, r3
 800f8ee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	7b5a      	ldrb	r2, [r3, #13]
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8fa:	3302      	adds	r3, #2
 800f8fc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f904:	3302      	adds	r3, #2
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <find_volume+0x2ee>
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f912:	3302      	adds	r3, #2
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	461a      	mov	r2, r3
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f91e:	3302      	adds	r3, #2
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	3b01      	subs	r3, #1
 800f924:	4013      	ands	r3, r2
 800f926:	2b00      	cmp	r3, #0
 800f928:	d004      	beq.n	800f934 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800f92a:	230d      	movs	r3, #13
 800f92c:	e1d6      	b.n	800fcdc <find_volume+0x6a0>
 800f92e:	bf00      	nop
 800f930:	200055cc 	.word	0x200055cc

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	7c9b      	ldrb	r3, [r3, #18]
 800f938:	021b      	lsls	r3, r3, #8
 800f93a:	b21a      	sxth	r2, r3
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	7c5b      	ldrb	r3, [r3, #17]
 800f940:	b21b      	sxth	r3, r3
 800f942:	4313      	orrs	r3, r2
 800f944:	b21b      	sxth	r3, r3
 800f946:	b29a      	uxth	r2, r3
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f94e:	3308      	adds	r3, #8
 800f950:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f958:	3308      	adds	r3, #8
 800f95a:	881a      	ldrh	r2, [r3, #0]
 800f95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f962:	330a      	adds	r3, #10
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	095b      	lsrs	r3, r3, #5
 800f968:	b29b      	uxth	r3, r3
 800f96a:	fbb2 f1f3 	udiv	r1, r2, r3
 800f96e:	fb03 f301 	mul.w	r3, r3, r1
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	b29b      	uxth	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800f97a:	230d      	movs	r3, #13
 800f97c:	e1ae      	b.n	800fcdc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	7d1b      	ldrb	r3, [r3, #20]
 800f982:	021b      	lsls	r3, r3, #8
 800f984:	b21a      	sxth	r2, r3
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	7cdb      	ldrb	r3, [r3, #19]
 800f98a:	b21b      	sxth	r3, r3
 800f98c:	4313      	orrs	r3, r2
 800f98e:	b21b      	sxth	r3, r3
 800f990:	b29b      	uxth	r3, r3
 800f992:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800f994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f996:	2b00      	cmp	r3, #0
 800f998:	d112      	bne.n	800f9c0 <find_volume+0x384>
 800f99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f9a0:	061a      	lsls	r2, r3, #24
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f9a8:	041b      	lsls	r3, r3, #16
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800f9b2:	0212      	lsls	r2, r2, #8
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	7bdb      	ldrb	r3, [r3, #15]
 800f9c4:	021b      	lsls	r3, r3, #8
 800f9c6:	b21a      	sxth	r2, r3
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	7b9b      	ldrb	r3, [r3, #14]
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	b21b      	sxth	r3, r3
 800f9d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800f9d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d101      	bne.n	800f9de <find_volume+0x3a2>
 800f9da:	230d      	movs	r3, #13
 800f9dc:	e17e      	b.n	800fcdc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800f9de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e2:	441a      	add	r2, r3
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	8819      	ldrh	r1, [r3, #0]
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9f4:	330a      	adds	r3, #10
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	095b      	lsrs	r3, r3, #5
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	4413      	add	r3, r2
 800fa04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d201      	bcs.n	800fa12 <find_volume+0x3d6>
 800fa0e:	230d      	movs	r3, #13
 800fa10:	e164      	b.n	800fcdc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800fa12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa16:	1ad2      	subs	r2, r2, r3
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa1e:	3302      	adds	r3, #2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <find_volume+0x3f6>
 800fa2e:	230d      	movs	r3, #13
 800fa30:	e154      	b.n	800fcdc <find_volume+0x6a0>
	fmt = FS_FAT12;
 800fa32:	2301      	movs	r3, #1
 800fa34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d902      	bls.n	800fa48 <find_volume+0x40c>
 800fa42:	2302      	movs	r3, #2
 800fa44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d902      	bls.n	800fa58 <find_volume+0x41c>
 800fa52:	2303      	movs	r3, #3
 800fa54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	1c9a      	adds	r2, r3, #2
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa62:	3314      	adds	r3, #20
 800fa64:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa6c:	331c      	adds	r3, #28
 800fa6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa70:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800fa72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa76:	441a      	add	r2, r3
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fa7e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800fa80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	441a      	add	r2, r3
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800fa90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d127      	bne.n	800fae8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800fa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa9e:	3308      	adds	r3, #8
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <find_volume+0x46e>
 800faa6:	230d      	movs	r3, #13
 800faa8:	e118      	b.n	800fcdc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fab0:	061a      	lsls	r2, r3, #24
 800fab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fab8:	041b      	lsls	r3, r3, #16
 800faba:	4313      	orrs	r3, r2
 800fabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fabe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800fac2:	0212      	lsls	r2, r2, #8
 800fac4:	4313      	orrs	r3, r2
 800fac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fac8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800facc:	431a      	orrs	r2, r3
 800face:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fad4:	3304      	adds	r3, #4
 800fad6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800fad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fade:	3314      	adds	r3, #20
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	647b      	str	r3, [r7, #68]	; 0x44
 800fae6:	e030      	b.n	800fb4a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faee:	3308      	adds	r3, #8
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <find_volume+0x4be>
 800faf6:	230d      	movs	r3, #13
 800faf8:	e0f0      	b.n	800fcdc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800fafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb04:	441a      	add	r2, r3
 800fb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fb10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	d106      	bne.n	800fb26 <find_volume+0x4ea>
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb1e:	3314      	adds	r3, #20
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	005b      	lsls	r3, r3, #1
 800fb24:	e010      	b.n	800fb48 <find_volume+0x50c>
 800fb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb2c:	3314      	adds	r3, #20
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	4613      	mov	r3, r2
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	4413      	add	r3, r2
 800fb36:	085a      	lsrs	r2, r3, #1
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb3e:	3314      	adds	r3, #20
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800fb48:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb50:	3318      	adds	r3, #24
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb5a:	330a      	adds	r3, #10
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb62:	440b      	add	r3, r1
 800fb64:	1e59      	subs	r1, r3, #1
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb6c:	330a      	adds	r3, #10
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	fbb1 f3f3 	udiv	r3, r1, r3
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d201      	bcs.n	800fb7c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800fb78:	230d      	movs	r3, #13
 800fb7a:	e0af      	b.n	800fcdc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb82:	3310      	adds	r3, #16
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	601a      	str	r2, [r3, #0]
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb90:	3310      	adds	r3, #16
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb9a:	330c      	adds	r3, #12
 800fb9c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800fb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fba4:	3305      	adds	r3, #5
 800fba6:	2280      	movs	r2, #128	; 0x80
 800fba8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800fbaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	d17d      	bne.n	800fcae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fbb8:	021b      	lsls	r3, r3, #8
 800fbba:	b21a      	sxth	r2, r3
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbc2:	b21b      	sxth	r3, r3
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	b21b      	sxth	r3, r3
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d170      	bne.n	800fcae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800fbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbce:	3301      	adds	r3, #1
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbd4:	f7fd fcec 	bl	800d5b0 <move_window>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d167      	bne.n	800fcae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800fbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbe4:	3305      	adds	r3, #5
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800fbf0:	021b      	lsls	r3, r3, #8
 800fbf2:	b21a      	sxth	r2, r3
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800fbfa:	b21b      	sxth	r3, r3
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	b21b      	sxth	r3, r3
 800fc00:	4a38      	ldr	r2, [pc, #224]	; (800fce4 <find_volume+0x6a8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d153      	bne.n	800fcae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	78db      	ldrb	r3, [r3, #3]
 800fc0a:	061a      	lsls	r2, r3, #24
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	789b      	ldrb	r3, [r3, #2]
 800fc10:	041b      	lsls	r3, r3, #16
 800fc12:	4313      	orrs	r3, r2
 800fc14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc16:	7852      	ldrb	r2, [r2, #1]
 800fc18:	0212      	lsls	r2, r2, #8
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc1e:	7812      	ldrb	r2, [r2, #0]
 800fc20:	4313      	orrs	r3, r2
 800fc22:	4a31      	ldr	r2, [pc, #196]	; (800fce8 <find_volume+0x6ac>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d142      	bne.n	800fcae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800fc2e:	061a      	lsls	r2, r3, #24
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800fc36:	041b      	lsls	r3, r3, #16
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc3c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800fc40:	0212      	lsls	r2, r2, #8
 800fc42:	4313      	orrs	r3, r2
 800fc44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc46:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	4a27      	ldr	r2, [pc, #156]	; (800fcec <find_volume+0x6b0>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d12d      	bne.n	800fcae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800fc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc54:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800fc58:	061a      	lsls	r2, r3, #24
 800fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800fc60:	041b      	lsls	r3, r3, #16
 800fc62:	4313      	orrs	r3, r2
 800fc64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc66:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800fc6a:	0212      	lsls	r2, r2, #8
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc70:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800fc74:	431a      	orrs	r2, r3
 800fc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc7c:	3310      	adds	r3, #16
 800fc7e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc82:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800fc86:	061a      	lsls	r2, r3, #24
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800fc8e:	041b      	lsls	r3, r3, #16
 800fc90:	4313      	orrs	r3, r2
 800fc92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc94:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800fc98:	0212      	lsls	r2, r2, #8
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc9e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800fca2:	431a      	orrs	r2, r3
 800fca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcaa:	330c      	adds	r3, #12
 800fcac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcb4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fcb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800fcba:	4b0d      	ldr	r3, [pc, #52]	; (800fcf0 <find_volume+0x6b4>)
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <find_volume+0x6b4>)
 800fcc4:	801a      	strh	r2, [r3, #0]
 800fcc6:	4b0a      	ldr	r3, [pc, #40]	; (800fcf0 <find_volume+0x6b4>)
 800fcc8:	881a      	ldrh	r2, [r3, #0]
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcd0:	3306      	adds	r3, #6
 800fcd2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800fcd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcd6:	f7fd fbe7 	bl	800d4a8 <clear_lock>
#endif

	return FR_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3758      	adds	r7, #88	; 0x58
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	ffffaa55 	.word	0xffffaa55
 800fce8:	41615252 	.word	0x41615252
 800fcec:	61417272 	.word	0x61417272
 800fcf0:	200055d0 	.word	0x200055d0

0800fcf4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d02d      	beq.n	800fd62 <validate+0x6e>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d027      	beq.n	800fd62 <validate+0x6e>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01e      	beq.n	800fd62 <validate+0x6e>
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd30:	3306      	adds	r3, #6
 800fd32:	881a      	ldrh	r2, [r3, #0]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	881b      	ldrh	r3, [r3, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d10f      	bne.n	800fd62 <validate+0x6e>
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd4e:	3301      	adds	r3, #1
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fd f8f8 	bl	800cf48 <disk_status>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <validate+0x72>
		return FR_INVALID_OBJECT;
 800fd62:	2309      	movs	r3, #9
 800fd64:	e000      	b.n	800fd68 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800fd82:	f107 0310 	add.w	r3, r7, #16
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7ff fba7 	bl	800f4da <get_ldnumber>
 800fd8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	da01      	bge.n	800fd98 <f_mount+0x28>
 800fd94:	230b      	movs	r3, #11
 800fd96:	e02f      	b.n	800fdf8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fd98:	4a19      	ldr	r2, [pc, #100]	; (800fe00 <f_mount+0x90>)
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fda0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d007      	beq.n	800fdb8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800fda8:	69b8      	ldr	r0, [r7, #24]
 800fdaa:	f7fd fb7d 	bl	800d4a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d004      	beq.n	800fdc8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	490d      	ldr	r1, [pc, #52]	; (800fe00 <f_mount+0x90>)
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <f_mount+0x6e>
 800fdd8:	79fb      	ldrb	r3, [r7, #7]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d001      	beq.n	800fde2 <f_mount+0x72>
 800fdde:	2300      	movs	r3, #0
 800fde0:	e00a      	b.n	800fdf8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800fde2:	f107 0108 	add.w	r1, r7, #8
 800fde6:	f107 030c 	add.w	r3, r7, #12
 800fdea:	2200      	movs	r2, #0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7ff fc25 	bl	800f63c <find_volume>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3720      	adds	r7, #32
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	200055cc 	.word	0x200055cc

0800fe04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	f107 0318 	add.w	r3, r7, #24
 800fe12:	3b0c      	subs	r3, #12
 800fe14:	6018      	str	r0, [r3, #0]
 800fe16:	f107 0318 	add.w	r3, r7, #24
 800fe1a:	3b10      	subs	r3, #16
 800fe1c:	6019      	str	r1, [r3, #0]
 800fe1e:	f107 0318 	add.w	r3, r7, #24
 800fe22:	3b11      	subs	r3, #17
 800fe24:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800fe26:	f107 0318 	add.w	r3, r7, #24
 800fe2a:	3b0c      	subs	r3, #12
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d101      	bne.n	800fe36 <f_open+0x32>
 800fe32:	2309      	movs	r3, #9
 800fe34:	e319      	b.n	801046a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800fe36:	f107 0318 	add.w	r3, r7, #24
 800fe3a:	3b0c      	subs	r3, #12
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800fe46:	f107 0318 	add.w	r3, r7, #24
 800fe4a:	3b11      	subs	r3, #17
 800fe4c:	f107 0218 	add.w	r2, r7, #24
 800fe50:	3a11      	subs	r2, #17
 800fe52:	7812      	ldrb	r2, [r2, #0]
 800fe54:	f002 021f 	and.w	r2, r2, #31
 800fe58:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800fe5a:	f107 0318 	add.w	r3, r7, #24
 800fe5e:	3b11      	subs	r3, #17
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	f023 0301 	bic.w	r3, r3, #1
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	f107 0118 	add.w	r1, r7, #24
 800fe6c:	3910      	subs	r1, #16
 800fe6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe72:	3b18      	subs	r3, #24
 800fe74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff fbdf 	bl	800f63c <find_volume>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800fe84:	f102 0217 	add.w	r2, r2, #23
 800fe88:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800fe8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fe8e:	f103 0317 	add.w	r3, r3, #23
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f040 82e3 	bne.w	8010460 <f_open+0x65c>
		INIT_BUF(dj);
 800fe9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe9e:	3b18      	subs	r3, #24
 800fea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fea4:	3318      	adds	r3, #24
 800fea6:	f107 0218 	add.w	r2, r7, #24
 800feaa:	3a04      	subs	r2, #4
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800feb2:	3b18      	subs	r3, #24
 800feb4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800feb8:	4ad1      	ldr	r2, [pc, #836]	; (8010200 <f_open+0x3fc>)
 800feba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800febc:	f107 0318 	add.w	r3, r7, #24
 800fec0:	3b10      	subs	r3, #16
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fec8:	3b18      	subs	r3, #24
 800feca:	4611      	mov	r1, r2
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff fa8b 	bl	800f3e8 <follow_path>
 800fed2:	4603      	mov	r3, r0
 800fed4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800fed8:	f102 0217 	add.w	r2, r2, #23
 800fedc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800fede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fee2:	3b18      	subs	r3, #24
 800fee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fee8:	3314      	adds	r3, #20
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800fef0:	f102 0210 	add.w	r2, r2, #16
 800fef4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fef6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fefa:	f103 0317 	add.w	r3, r3, #23
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d126      	bne.n	800ff52 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800ff04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ff08:	f103 0310 	add.w	r3, r3, #16
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d106      	bne.n	800ff20 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800ff12:	2306      	movs	r3, #6
 800ff14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ff18:	f102 0217 	add.w	r2, r2, #23
 800ff1c:	7013      	strb	r3, [r2, #0]
 800ff1e:	e018      	b.n	800ff52 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff20:	f107 0318 	add.w	r3, r7, #24
 800ff24:	3b11      	subs	r3, #17
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	f023 0301 	bic.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf14      	ite	ne
 800ff30:	2301      	movne	r3, #1
 800ff32:	2300      	moveq	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	461a      	mov	r2, r3
 800ff38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff3c:	3b18      	subs	r3, #24
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fd f917 	bl	800d174 <chk_lock>
 800ff46:	4603      	mov	r3, r0
 800ff48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ff4c:	f102 0217 	add.w	r2, r2, #23
 800ff50:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ff52:	f107 0318 	add.w	r3, r7, #24
 800ff56:	3b11      	subs	r3, #17
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	f003 031c 	and.w	r3, r3, #28
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f000 8150 	beq.w	8010204 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800ff64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ff68:	f103 0317 	add.w	r3, r3, #23
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d030      	beq.n	800ffd4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ff72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ff76:	f103 0317 	add.w	r3, r3, #23
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d112      	bne.n	800ffa6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ff80:	f7fd f96a 	bl	800d258 <enq_lock>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d007      	beq.n	800ff9a <f_open+0x196>
 800ff8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff8e:	3b18      	subs	r3, #24
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe fe5f 	bl	800ec54 <dir_register>
 800ff96:	4603      	mov	r3, r0
 800ff98:	e000      	b.n	800ff9c <f_open+0x198>
 800ff9a:	2312      	movs	r3, #18
 800ff9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ffa0:	f102 0217 	add.w	r2, r2, #23
 800ffa4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ffa6:	f107 0318 	add.w	r3, r7, #24
 800ffaa:	3b11      	subs	r3, #17
 800ffac:	f107 0218 	add.w	r2, r7, #24
 800ffb0:	3a11      	subs	r2, #17
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	f042 0208 	orr.w	r2, r2, #8
 800ffb8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800ffba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffbe:	3b18      	subs	r3, #24
 800ffc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffc4:	3314      	adds	r3, #20
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ffcc:	f102 0210 	add.w	r2, r2, #16
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	e01f      	b.n	8010014 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ffd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ffd8:	f103 0310 	add.w	r3, r3, #16
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	330b      	adds	r3, #11
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f003 0311 	and.w	r3, r3, #17
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d006      	beq.n	800fff8 <f_open+0x1f4>
					res = FR_DENIED;
 800ffea:	2307      	movs	r3, #7
 800ffec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800fff0:	f102 0217 	add.w	r2, r2, #23
 800fff4:	7013      	strb	r3, [r2, #0]
 800fff6:	e00d      	b.n	8010014 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800fff8:	f107 0318 	add.w	r3, r7, #24
 800fffc:	3b11      	subs	r3, #17
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d005      	beq.n	8010014 <f_open+0x210>
						res = FR_EXIST;
 8010008:	2308      	movs	r3, #8
 801000a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 801000e:	f102 0217 	add.w	r2, r2, #23
 8010012:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010014:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010018:	f103 0317 	add.w	r3, r3, #23
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f040 8122 	bne.w	8010268 <f_open+0x464>
 8010024:	f107 0318 	add.w	r3, r7, #24
 8010028:	3b11      	subs	r3, #17
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	f003 0308 	and.w	r3, r3, #8
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 8119 	beq.w	8010268 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8010036:	f7fa f9bb 	bl	800a3b0 <get_fattime>
 801003a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801003e:	f103 030c 	add.w	r3, r3, #12
 8010042:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8010044:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010048:	f103 0310 	add.w	r3, r3, #16
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	330e      	adds	r3, #14
 8010050:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010054:	f102 020c 	add.w	r2, r2, #12
 8010058:	6812      	ldr	r2, [r2, #0]
 801005a:	b2d2      	uxtb	r2, r2
 801005c:	701a      	strb	r2, [r3, #0]
 801005e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010062:	f103 030c 	add.w	r3, r3, #12
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	b29b      	uxth	r3, r3
 801006a:	0a1b      	lsrs	r3, r3, #8
 801006c:	b29a      	uxth	r2, r3
 801006e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010072:	f103 0310 	add.w	r3, r3, #16
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	330f      	adds	r3, #15
 801007a:	b2d2      	uxtb	r2, r2
 801007c:	701a      	strb	r2, [r3, #0]
 801007e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010082:	f103 030c 	add.w	r3, r3, #12
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	0c1a      	lsrs	r2, r3, #16
 801008a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801008e:	f103 0310 	add.w	r3, r3, #16
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	3310      	adds	r3, #16
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
 801009a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801009e:	f103 030c 	add.w	r3, r3, #12
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	0e1a      	lsrs	r2, r3, #24
 80100a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100aa:	f103 0310 	add.w	r3, r3, #16
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	3311      	adds	r3, #17
 80100b2:	b2d2      	uxtb	r2, r2
 80100b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80100b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100ba:	f103 0310 	add.w	r3, r3, #16
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	330b      	adds	r3, #11
 80100c2:	2200      	movs	r2, #0
 80100c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80100c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100ca:	f103 0310 	add.w	r3, r3, #16
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	331c      	adds	r3, #28
 80100d2:	2200      	movs	r2, #0
 80100d4:	701a      	strb	r2, [r3, #0]
 80100d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100da:	f103 0310 	add.w	r3, r3, #16
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	331d      	adds	r3, #29
 80100e2:	2200      	movs	r2, #0
 80100e4:	701a      	strb	r2, [r3, #0]
 80100e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100ea:	f103 0310 	add.w	r3, r3, #16
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	331e      	adds	r3, #30
 80100f2:	2200      	movs	r2, #0
 80100f4:	701a      	strb	r2, [r3, #0]
 80100f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80100fa:	f103 0310 	add.w	r3, r3, #16
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	331f      	adds	r3, #31
 8010102:	2200      	movs	r2, #0
 8010104:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010106:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801010a:	3b18      	subs	r3, #24
 801010c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010116:	f102 0210 	add.w	r2, r2, #16
 801011a:	6811      	ldr	r1, [r2, #0]
 801011c:	4618      	mov	r0, r3
 801011e:	f7fe f9c0 	bl	800e4a2 <ld_clust>
 8010122:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010126:	f103 0308 	add.w	r3, r3, #8
 801012a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 801012c:	2100      	movs	r1, #0
 801012e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010132:	f103 0310 	add.w	r3, r3, #16
 8010136:	6818      	ldr	r0, [r3, #0]
 8010138:	f7fe f9e1 	bl	800e4fe <st_clust>
				dj.fs->wflag = 1;
 801013c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010140:	3b18      	subs	r3, #24
 8010142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801014c:	3304      	adds	r3, #4
 801014e:	2201      	movs	r2, #1
 8010150:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8010152:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010156:	f103 0308 	add.w	r3, r3, #8
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 8083 	beq.w	8010268 <f_open+0x464>
					dw = dj.fs->winsect;
 8010162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010166:	3b18      	subs	r3, #24
 8010168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010172:	330c      	adds	r3, #12
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 801017a:	f102 020c 	add.w	r2, r2, #12
 801017e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8010180:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010184:	3b18      	subs	r3, #24
 8010186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010190:	f102 0208 	add.w	r2, r2, #8
 8010194:	6811      	ldr	r1, [r2, #0]
 8010196:	4618      	mov	r0, r3
 8010198:	f7fd fd99 	bl	800dcce <remove_chain>
 801019c:	4603      	mov	r3, r0
 801019e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80101a2:	f102 0217 	add.w	r2, r2, #23
 80101a6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80101a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80101ac:	f103 0317 	add.w	r3, r3, #23
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d158      	bne.n	8010268 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80101b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101ba:	3b18      	subs	r3, #24
 80101bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80101c6:	f102 0208 	add.w	r2, r2, #8
 80101ca:	6812      	ldr	r2, [r2, #0]
 80101cc:	3a01      	subs	r2, #1
 80101ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101d2:	330c      	adds	r3, #12
 80101d4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80101d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101da:	3b18      	subs	r3, #24
 80101dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80101e6:	f102 020c 	add.w	r2, r2, #12
 80101ea:	6811      	ldr	r1, [r2, #0]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fd f9df 	bl	800d5b0 <move_window>
 80101f2:	4603      	mov	r3, r0
 80101f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80101f8:	f102 0217 	add.w	r2, r2, #23
 80101fc:	7013      	strb	r3, [r2, #0]
 80101fe:	e033      	b.n	8010268 <f_open+0x464>
 8010200:	200055ec 	.word	0x200055ec
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8010204:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010208:	f103 0317 	add.w	r3, r3, #23
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d12a      	bne.n	8010268 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8010212:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010216:	f103 0310 	add.w	r3, r3, #16
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	330b      	adds	r3, #11
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	d006      	beq.n	8010236 <f_open+0x432>
					res = FR_NO_FILE;
 8010228:	2304      	movs	r3, #4
 801022a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 801022e:	f102 0217 	add.w	r2, r2, #23
 8010232:	7013      	strb	r3, [r2, #0]
 8010234:	e018      	b.n	8010268 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8010236:	f107 0318 	add.w	r3, r7, #24
 801023a:	3b11      	subs	r3, #17
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	f003 0302 	and.w	r3, r3, #2
 8010242:	2b00      	cmp	r3, #0
 8010244:	d010      	beq.n	8010268 <f_open+0x464>
 8010246:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801024a:	f103 0310 	add.w	r3, r3, #16
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	330b      	adds	r3, #11
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d005      	beq.n	8010268 <f_open+0x464>
						res = FR_DENIED;
 801025c:	2307      	movs	r3, #7
 801025e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010262:	f102 0217 	add.w	r2, r2, #23
 8010266:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8010268:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801026c:	f103 0317 	add.w	r3, r3, #23
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d15b      	bne.n	801032e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010276:	f107 0318 	add.w	r3, r7, #24
 801027a:	3b11      	subs	r3, #17
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	f003 0308 	and.w	r3, r3, #8
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <f_open+0x496>
				mode |= FA__WRITTEN;
 8010286:	f107 0318 	add.w	r3, r7, #24
 801028a:	3b11      	subs	r3, #17
 801028c:	f107 0218 	add.w	r2, r7, #24
 8010290:	3a11      	subs	r2, #17
 8010292:	7812      	ldrb	r2, [r2, #0]
 8010294:	f042 0220 	orr.w	r2, r2, #32
 8010298:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801029a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801029e:	3b18      	subs	r3, #24
 80102a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80102aa:	330c      	adds	r3, #12
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	f107 0318 	add.w	r3, r7, #24
 80102b2:	3b0c      	subs	r3, #12
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ba:	331c      	adds	r3, #28
 80102bc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80102be:	f107 0318 	add.w	r3, r7, #24
 80102c2:	3b0c      	subs	r3, #12
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80102ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80102ce:	f102 0210 	add.w	r2, r2, #16
 80102d2:	6812      	ldr	r2, [r2, #0]
 80102d4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102d6:	f107 0318 	add.w	r3, r7, #24
 80102da:	3b11      	subs	r3, #17
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	f023 0301 	bic.w	r3, r3, #1
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	bf14      	ite	ne
 80102e6:	2301      	movne	r3, #1
 80102e8:	2300      	moveq	r3, #0
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	461a      	mov	r2, r3
 80102ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80102f2:	3b18      	subs	r3, #24
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fc ffd2 	bl	800d2a0 <inc_lock>
 80102fc:	4602      	mov	r2, r0
 80102fe:	f107 0318 	add.w	r3, r7, #24
 8010302:	3b0c      	subs	r3, #12
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801030a:	3308      	adds	r3, #8
 801030c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 801030e:	f107 0318 	add.w	r3, r7, #24
 8010312:	3b0c      	subs	r3, #12
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801031a:	3308      	adds	r3, #8
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d105      	bne.n	801032e <f_open+0x52a>
 8010322:	2302      	movs	r3, #2
 8010324:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010328:	f102 0217 	add.w	r2, r2, #23
 801032c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 801032e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010332:	f103 0317 	add.w	r3, r3, #23
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	f040 8091 	bne.w	8010460 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 801033e:	f107 0318 	add.w	r3, r7, #24
 8010342:	3b0c      	subs	r3, #12
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801034a:	3306      	adds	r3, #6
 801034c:	f107 0218 	add.w	r2, r7, #24
 8010350:	3a11      	subs	r2, #17
 8010352:	7812      	ldrb	r2, [r2, #0]
 8010354:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8010356:	f107 0318 	add.w	r3, r7, #24
 801035a:	3b0c      	subs	r3, #12
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010362:	3307      	adds	r3, #7
 8010364:	2200      	movs	r2, #0
 8010366:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8010368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801036c:	3b18      	subs	r3, #24
 801036e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010378:	f102 0210 	add.w	r2, r2, #16
 801037c:	6811      	ldr	r1, [r2, #0]
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe f88f 	bl	800e4a2 <ld_clust>
 8010384:	4602      	mov	r2, r0
 8010386:	f107 0318 	add.w	r3, r7, #24
 801038a:	3b0c      	subs	r3, #12
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010392:	3310      	adds	r3, #16
 8010394:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8010396:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801039a:	f103 0310 	add.w	r3, r3, #16
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	331f      	adds	r3, #31
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	061a      	lsls	r2, r3, #24
 80103a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80103aa:	f103 0310 	add.w	r3, r3, #16
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	331e      	adds	r3, #30
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	041b      	lsls	r3, r3, #16
 80103b6:	4313      	orrs	r3, r2
 80103b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80103bc:	f102 0210 	add.w	r2, r2, #16
 80103c0:	6812      	ldr	r2, [r2, #0]
 80103c2:	321d      	adds	r2, #29
 80103c4:	7812      	ldrb	r2, [r2, #0]
 80103c6:	0212      	lsls	r2, r2, #8
 80103c8:	4313      	orrs	r3, r2
 80103ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80103ce:	f102 0210 	add.w	r2, r2, #16
 80103d2:	6812      	ldr	r2, [r2, #0]
 80103d4:	321c      	adds	r2, #28
 80103d6:	7812      	ldrb	r2, [r2, #0]
 80103d8:	431a      	orrs	r2, r3
 80103da:	f107 0318 	add.w	r3, r7, #24
 80103de:	3b0c      	subs	r3, #12
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103e6:	330c      	adds	r3, #12
 80103e8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 80103ea:	f107 0318 	add.w	r3, r7, #24
 80103ee:	3b0c      	subs	r3, #12
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103f6:	3308      	adds	r3, #8
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 80103fc:	f107 0318 	add.w	r3, r7, #24
 8010400:	3b0c      	subs	r3, #12
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010408:	3318      	adds	r3, #24
 801040a:	2200      	movs	r2, #0
 801040c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 801040e:	f107 0318 	add.w	r3, r7, #24
 8010412:	3b0c      	subs	r3, #12
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801041a:	3304      	adds	r3, #4
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010424:	3b18      	subs	r3, #24
 8010426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	f107 0318 	add.w	r3, r7, #24
 8010430:	3b0c      	subs	r3, #12
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010438:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 801043a:	f107 0318 	add.w	r3, r7, #24
 801043e:	3b0c      	subs	r3, #12
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801044c:	3306      	adds	r3, #6
 801044e:	881a      	ldrh	r2, [r3, #0]
 8010450:	f107 0318 	add.w	r3, r7, #24
 8010454:	3b0c      	subs	r3, #12
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801045c:	3304      	adds	r3, #4
 801045e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8010460:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010464:	f103 0317 	add.w	r3, r3, #23
 8010468:	781b      	ldrb	r3, [r3, #0]
}
 801046a:	4618      	mov	r0, r3
 801046c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8010470:	3718      	adds	r7, #24
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop

08010478 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08a      	sub	sp, #40	; 0x28
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	2200      	movs	r2, #0
 801048e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f7ff fc2f 	bl	800fcf4 <validate>
 8010496:	4603      	mov	r3, r0
 8010498:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801049a:	7dfb      	ldrb	r3, [r7, #23]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <f_write+0x2c>
 80104a0:	7dfb      	ldrb	r3, [r7, #23]
 80104a2:	e258      	b.n	8010956 <f_write+0x4de>
	if (fp->err)							/* Check error */
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104aa:	3307      	adds	r3, #7
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d005      	beq.n	80104be <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104b8:	3307      	adds	r3, #7
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	e24b      	b.n	8010956 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104c4:	3306      	adds	r3, #6
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	f003 0302 	and.w	r3, r3, #2
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80104d0:	2307      	movs	r3, #7
 80104d2:	e240      	b.n	8010956 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104da:	3308      	adds	r3, #8
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	441a      	add	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e8:	3308      	adds	r3, #8
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	f080 8208 	bcs.w	8010902 <f_write+0x48a>
 80104f2:	2300      	movs	r3, #0
 80104f4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80104f6:	e204      	b.n	8010902 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104fe:	3308      	adds	r3, #8
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801050e:	330a      	adds	r3, #10
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	fbb2 f1f3 	udiv	r1, r2, r3
 8010516:	fb03 f301 	mul.w	r3, r3, r1
 801051a:	1ad3      	subs	r3, r2, r3
 801051c:	2b00      	cmp	r3, #0
 801051e:	f040 818d 	bne.w	801083c <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010528:	3308      	adds	r3, #8
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010538:	330a      	adds	r3, #10
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010540:	b2da      	uxtb	r2, r3
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801054e:	3302      	adds	r3, #2
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	3b01      	subs	r3, #1
 8010554:	b2db      	uxtb	r3, r3
 8010556:	4013      	ands	r3, r2
 8010558:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 801055a:	7dbb      	ldrb	r3, [r7, #22]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d167      	bne.n	8010630 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010566:	3308      	adds	r3, #8
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d112      	bne.n	8010594 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010574:	3310      	adds	r3, #16
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	2b00      	cmp	r3, #0
 801057e:	d129      	bne.n	80105d4 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2100      	movs	r1, #0
 801058a:	4618      	mov	r0, r3
 801058c:	f7fd fc07 	bl	800dd9e <create_chain>
 8010590:	6278      	str	r0, [r7, #36]	; 0x24
 8010592:	e01f      	b.n	80105d4 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801059a:	3304      	adds	r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00a      	beq.n	80105b8 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105a8:	3308      	adds	r3, #8
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	4619      	mov	r1, r3
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f7fd fca6 	bl	800df00 <clmt_clust>
 80105b4:	6278      	str	r0, [r7, #36]	; 0x24
 80105b6:	e00d      	b.n	80105d4 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105c6:	3314      	adds	r3, #20
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4619      	mov	r1, r3
 80105cc:	4610      	mov	r0, r2
 80105ce:	f7fd fbe6 	bl	800dd9e <create_chain>
 80105d2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8198 	beq.w	801090c <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d107      	bne.n	80105f2 <f_write+0x17a>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105e8:	3307      	adds	r3, #7
 80105ea:	2202      	movs	r2, #2
 80105ec:	701a      	strb	r2, [r3, #0]
 80105ee:	2302      	movs	r3, #2
 80105f0:	e1b1      	b.n	8010956 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80105f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f8:	d107      	bne.n	801060a <f_write+0x192>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010600:	3307      	adds	r3, #7
 8010602:	2201      	movs	r2, #1
 8010604:	701a      	strb	r2, [r3, #0]
 8010606:	2301      	movs	r3, #1
 8010608:	e1a5      	b.n	8010956 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010610:	3314      	adds	r3, #20
 8010612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010614:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801061c:	3310      	adds	r3, #16
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d105      	bne.n	8010630 <f_write+0x1b8>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801062a:	3310      	adds	r3, #16
 801062c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801062e:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010636:	3306      	adds	r3, #6
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801063e:	2b00      	cmp	r3, #0
 8010640:	d028      	beq.n	8010694 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801064e:	3301      	adds	r3, #1
 8010650:	7818      	ldrb	r0, [r3, #0]
 8010652:	68f9      	ldr	r1, [r7, #12]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801065a:	3318      	adds	r3, #24
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	2301      	movs	r3, #1
 8010660:	f7fc fcd2 	bl	800d008 <disk_write>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d007      	beq.n	801067a <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010670:	3307      	adds	r3, #7
 8010672:	2201      	movs	r2, #1
 8010674:	701a      	strb	r2, [r3, #0]
 8010676:	2301      	movs	r3, #1
 8010678:	e16d      	b.n	8010956 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010680:	3306      	adds	r3, #6
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010688:	b2da      	uxtb	r2, r3
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010690:	3306      	adds	r3, #6
 8010692:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106a2:	3314      	adds	r3, #20
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4619      	mov	r1, r3
 80106a8:	4610      	mov	r0, r2
 80106aa:	f7fd f884 	bl	800d7b6 <clust2sect>
 80106ae:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d107      	bne.n	80106c6 <f_write+0x24e>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106bc:	3307      	adds	r3, #7
 80106be:	2202      	movs	r2, #2
 80106c0:	701a      	strb	r2, [r3, #0]
 80106c2:	2302      	movs	r3, #2
 80106c4:	e147      	b.n	8010956 <f_write+0x4de>
			sect += csect;
 80106c6:	7dbb      	ldrb	r3, [r7, #22]
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	4413      	add	r3, r2
 80106cc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106da:	330a      	adds	r3, #10
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80106e6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d074      	beq.n	80107d8 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80106ee:	7dba      	ldrb	r2, [r7, #22]
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	441a      	add	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010700:	3302      	adds	r3, #2
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	429a      	cmp	r2, r3
 8010706:	d90b      	bls.n	8010720 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010714:	3302      	adds	r3, #2
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	461a      	mov	r2, r3
 801071a:	7dbb      	ldrb	r3, [r7, #22]
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801072c:	3301      	adds	r3, #1
 801072e:	7818      	ldrb	r0, [r3, #0]
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	69b9      	ldr	r1, [r7, #24]
 8010736:	f7fc fc67 	bl	800d008 <disk_write>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d007      	beq.n	8010750 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010746:	3307      	adds	r3, #7
 8010748:	2201      	movs	r2, #1
 801074a:	701a      	strb	r2, [r3, #0]
 801074c:	2301      	movs	r3, #1
 801074e:	e102      	b.n	8010956 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010756:	3318      	adds	r3, #24
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	69fa      	ldr	r2, [r7, #28]
 8010760:	429a      	cmp	r2, r3
 8010762:	d92b      	bls.n	80107bc <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801076c:	3318      	adds	r3, #24
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	1ad2      	subs	r2, r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010780:	330a      	adds	r3, #10
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	fb03 f302 	mul.w	r3, r3, r2
 8010788:	69ba      	ldr	r2, [r7, #24]
 801078a:	18d1      	adds	r1, r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010798:	330a      	adds	r3, #10
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	461a      	mov	r2, r3
 801079e:	f7fc fc71 	bl	800d084 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107a8:	3306      	adds	r3, #6
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b0:	b2da      	uxtb	r2, r3
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107b8:	3306      	adds	r3, #6
 80107ba:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107c8:	330a      	adds	r3, #10
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	fb02 f303 	mul.w	r3, r2, r3
 80107d4:	623b      	str	r3, [r7, #32]
				continue;
 80107d6:	e07a      	b.n	80108ce <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107de:	3318      	adds	r3, #24
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	693a      	ldr	r2, [r7, #16]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d023      	beq.n	8010830 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ee:	3308      	adds	r3, #8
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f8:	330c      	adds	r3, #12
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d217      	bcs.n	8010830 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801080c:	3301      	adds	r3, #1
 801080e:	7818      	ldrb	r0, [r3, #0]
 8010810:	68f9      	ldr	r1, [r7, #12]
 8010812:	2301      	movs	r3, #1
 8010814:	693a      	ldr	r2, [r7, #16]
 8010816:	f7fc fbd7 	bl	800cfc8 <disk_read>
 801081a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010826:	3307      	adds	r3, #7
 8010828:	2201      	movs	r2, #1
 801082a:	701a      	strb	r2, [r3, #0]
 801082c:	2301      	movs	r3, #1
 801082e:	e092      	b.n	8010956 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010836:	3318      	adds	r3, #24
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010848:	330a      	adds	r3, #10
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	4618      	mov	r0, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010854:	3308      	adds	r3, #8
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010864:	330a      	adds	r3, #10
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	fbb2 f1f3 	udiv	r1, r2, r3
 801086c:	fb03 f301 	mul.w	r3, r3, r1
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	1ac3      	subs	r3, r0, r3
 8010874:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010876:	6a3a      	ldr	r2, [r7, #32]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	429a      	cmp	r2, r3
 801087c:	d901      	bls.n	8010882 <f_write+0x40a>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010888:	3308      	adds	r3, #8
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010898:	330a      	adds	r3, #10
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	fbb2 f1f3 	udiv	r1, r2, r3
 80108a0:	fb03 f301 	mul.w	r3, r3, r1
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	4413      	add	r3, r2
 80108aa:	6a3a      	ldr	r2, [r7, #32]
 80108ac:	69b9      	ldr	r1, [r7, #24]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fc fbe8 	bl	800d084 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108ba:	3306      	adds	r3, #6
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108ca:	3306      	adds	r3, #6
 80108cc:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	6a3b      	ldr	r3, [r7, #32]
 80108d2:	4413      	add	r3, r2
 80108d4:	61bb      	str	r3, [r7, #24]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108dc:	3308      	adds	r3, #8
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	441a      	add	r2, r3
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108ea:	3308      	adds	r3, #8
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	441a      	add	r2, r3
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	601a      	str	r2, [r3, #0]
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	1ad3      	subs	r3, r2, r3
 8010900:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	f47f adf7 	bne.w	80104f8 <f_write+0x80>
 801090a:	e000      	b.n	801090e <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801090c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010914:	3308      	adds	r3, #8
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801091e:	330c      	adds	r3, #12
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	429a      	cmp	r2, r3
 8010924:	d909      	bls.n	801093a <f_write+0x4c2>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801092c:	3308      	adds	r3, #8
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010936:	330c      	adds	r3, #12
 8010938:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010940:	3306      	adds	r3, #6
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f043 0320 	orr.w	r3, r3, #32
 8010948:	b2da      	uxtb	r2, r3
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010950:	3306      	adds	r3, #6
 8010952:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3728      	adds	r7, #40	; 0x28
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801095e:	b580      	push	{r7, lr}
 8010960:	b086      	sub	sp, #24
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7ff f9c4 	bl	800fcf4 <validate>
 801096c:	4603      	mov	r3, r0
 801096e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010970:	7dfb      	ldrb	r3, [r7, #23]
 8010972:	2b00      	cmp	r3, #0
 8010974:	f040 80cc 	bne.w	8010b10 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801097e:	3306      	adds	r3, #6
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	f003 0320 	and.w	r3, r3, #32
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 80c2 	beq.w	8010b10 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010992:	3306      	adds	r3, #6
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801099a:	2b00      	cmp	r3, #0
 801099c:	d022      	beq.n	80109e4 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109aa:	3301      	adds	r3, #1
 80109ac:	7818      	ldrb	r0, [r3, #0]
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109b6:	3318      	adds	r3, #24
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	2301      	movs	r3, #1
 80109bc:	f7fc fb24 	bl	800d008 <disk_write>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80109c6:	2301      	movs	r3, #1
 80109c8:	e0a3      	b.n	8010b12 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109d0:	3306      	adds	r3, #6
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109e0:	3306      	adds	r3, #6
 80109e2:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109f2:	331c      	adds	r3, #28
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4619      	mov	r1, r3
 80109f8:	4610      	mov	r0, r2
 80109fa:	f7fc fdd9 	bl	800d5b0 <move_window>
 80109fe:	4603      	mov	r3, r0
 8010a00:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010a02:	7dfb      	ldrb	r3, [r7, #23]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f040 8083 	bne.w	8010b10 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	330b      	adds	r3, #11
 8010a18:	781a      	ldrb	r2, [r3, #0]
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	330b      	adds	r3, #11
 8010a1e:	f042 0220 	orr.w	r2, r2, #32
 8010a22:	b2d2      	uxtb	r2, r2
 8010a24:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a2c:	330c      	adds	r3, #12
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	331c      	adds	r3, #28
 8010a34:	b2d2      	uxtb	r2, r2
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a3e:	330c      	adds	r3, #12
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	0a1b      	lsrs	r3, r3, #8
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	331d      	adds	r3, #29
 8010a4c:	b2d2      	uxtb	r2, r2
 8010a4e:	701a      	strb	r2, [r3, #0]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a56:	330c      	adds	r3, #12
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	0c1a      	lsrs	r2, r3, #16
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	331e      	adds	r3, #30
 8010a60:	b2d2      	uxtb	r2, r2
 8010a62:	701a      	strb	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a6a:	330c      	adds	r3, #12
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	0e1a      	lsrs	r2, r3, #24
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	331f      	adds	r3, #31
 8010a74:	b2d2      	uxtb	r2, r2
 8010a76:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a7e:	3310      	adds	r3, #16
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4619      	mov	r1, r3
 8010a84:	6938      	ldr	r0, [r7, #16]
 8010a86:	f7fd fd3a 	bl	800e4fe <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8010a8a:	f7f9 fc91 	bl	800a3b0 <get_fattime>
 8010a8e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	3316      	adds	r3, #22
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	b2d2      	uxtb	r2, r2
 8010a98:	701a      	strb	r2, [r3, #0]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	0a1b      	lsrs	r3, r3, #8
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	3317      	adds	r3, #23
 8010aa6:	b2d2      	uxtb	r2, r2
 8010aa8:	701a      	strb	r2, [r3, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	0c1a      	lsrs	r2, r3, #16
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	3318      	adds	r3, #24
 8010ab2:	b2d2      	uxtb	r2, r2
 8010ab4:	701a      	strb	r2, [r3, #0]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	0e1a      	lsrs	r2, r3, #24
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	3319      	adds	r3, #25
 8010abe:	b2d2      	uxtb	r2, r2
 8010ac0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	3312      	adds	r3, #18
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	701a      	strb	r2, [r3, #0]
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	3313      	adds	r3, #19
 8010ace:	2200      	movs	r2, #0
 8010ad0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ad8:	3306      	adds	r3, #6
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f023 0320 	bic.w	r3, r3, #32
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ae8:	3306      	adds	r3, #6
 8010aea:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010af8:	3304      	adds	r3, #4
 8010afa:	2201      	movs	r2, #1
 8010afc:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fc fd86 	bl	800d618 <sync_fs>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff ff1b 	bl	801095e <f_sync>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d119      	bne.n	8010b66 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff f8de 	bl	800fcf4 <validate>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b3c:	7bfb      	ldrb	r3, [r7, #15]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d111      	bne.n	8010b66 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010b48:	3308      	adds	r3, #8
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7fc fc67 	bl	800d420 <dec_lock>
 8010b52:	4603      	mov	r3, r0
 8010b54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d104      	bne.n	8010b66 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b62:	2200      	movs	r2, #0
 8010b64:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b088      	sub	sp, #32
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <f_opendir+0x14>
 8010b80:	2309      	movs	r3, #9
 8010b82:	e090      	b.n	8010ca6 <f_opendir+0x136>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8010b84:	4639      	mov	r1, r7
 8010b86:	f107 0318 	add.w	r3, r7, #24
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7fe fd55 	bl	800f63c <find_volume>
 8010b92:	4603      	mov	r3, r0
 8010b94:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8010b96:	7ffb      	ldrb	r3, [r7, #31]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d17b      	bne.n	8010c94 <f_opendir+0x124>
		dp->fs = fs;
 8010b9c:	69ba      	ldr	r2, [r7, #24]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ba4:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bac:	3318      	adds	r3, #24
 8010bae:	f107 020c 	add.w	r2, r7, #12
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010bba:	4a3d      	ldr	r2, [pc, #244]	; (8010cb0 <f_opendir+0x140>)
 8010bbc:	601a      	str	r2, [r3, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7fe fc10 	bl	800f3e8 <follow_path>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8010bcc:	7ffb      	ldrb	r3, [r7, #31]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d15b      	bne.n	8010c8a <f_opendir+0x11a>
			if (dp->dir) {						/* It is not the origin directory itself */
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bd8:	3314      	adds	r3, #20
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d01d      	beq.n	8010c1c <f_opendir+0xac>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010be6:	3314      	adds	r3, #20
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	330b      	adds	r3, #11
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	f003 0310 	and.w	r3, r3, #16
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d010      	beq.n	8010c18 <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 8010bf6:	69ba      	ldr	r2, [r7, #24]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bfe:	3314      	adds	r3, #20
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4619      	mov	r1, r3
 8010c04:	4610      	mov	r0, r2
 8010c06:	f7fd fc4c 	bl	800e4a2 <ld_clust>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c12:	3308      	adds	r3, #8
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	e001      	b.n	8010c1c <f_opendir+0xac>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8010c18:	2305      	movs	r3, #5
 8010c1a:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8010c1c:	7ffb      	ldrb	r3, [r7, #31]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d133      	bne.n	8010c8a <f_opendir+0x11a>
				dp->id = fs->id;
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c28:	3306      	adds	r3, #6
 8010c2a:	881a      	ldrh	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c32:	3304      	adds	r3, #4
 8010c34:	801a      	strh	r2, [r3, #0]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010c36:	2100      	movs	r1, #0
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7fd f9a4 	bl	800df86 <dir_sdi>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8010c42:	7ffb      	ldrb	r3, [r7, #31]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d120      	bne.n	8010c8a <f_opendir+0x11a>
					if (dp->sclust) {
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c4e:	3308      	adds	r3, #8
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d013      	beq.n	8010c7e <f_opendir+0x10e>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010c56:	2100      	movs	r1, #0
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7fc fb21 	bl	800d2a0 <inc_lock>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c66:	331c      	adds	r3, #28
 8010c68:	601a      	str	r2, [r3, #0]
						if (!dp->lockid)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c70:	331c      	adds	r3, #28
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d108      	bne.n	8010c8a <f_opendir+0x11a>
							res = FR_TOO_MANY_OPEN_FILES;
 8010c78:	2312      	movs	r3, #18
 8010c7a:	77fb      	strb	r3, [r7, #31]
 8010c7c:	e005      	b.n	8010c8a <f_opendir+0x11a>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c84:	331c      	adds	r3, #28
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010c8a:	7ffb      	ldrb	r3, [r7, #31]
 8010c8c:	2b04      	cmp	r3, #4
 8010c8e:	d101      	bne.n	8010c94 <f_opendir+0x124>
 8010c90:	2305      	movs	r3, #5
 8010c92:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8010c94:	7ffb      	ldrb	r3, [r7, #31]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d004      	beq.n	8010ca4 <f_opendir+0x134>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3720      	adds	r7, #32
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	200055ec 	.word	0x200055ec

08010cb4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff f819 	bl	800fcf4 <validate>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d118      	bne.n	8010cfe <f_closedir+0x4a>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cd2:	331c      	adds	r3, #28
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d009      	beq.n	8010cee <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ce0:	331c      	adds	r3, #28
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fc fb9b 	bl	800d420 <dec_lock>
 8010cea:	4603      	mov	r3, r0
 8010cec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d104      	bne.n	8010cfe <f_closedir+0x4a>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3710      	adds	r7, #16
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f7fe ffee 	bl	800fcf4 <validate>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d13e      	bne.n	8010da0 <f_readdir+0x98>
		if (!fno) {
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d106      	bne.n	8010d36 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010d28:	2100      	movs	r1, #0
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7fd f92b 	bl	800df86 <dir_sdi>
 8010d30:	4603      	mov	r3, r0
 8010d32:	75fb      	strb	r3, [r7, #23]
 8010d34:	e034      	b.n	8010da0 <f_readdir+0x98>
		} else {
			INIT_BUF(*dp);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d3c:	3318      	adds	r3, #24
 8010d3e:	f107 0208 	add.w	r2, r7, #8
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010d4a:	4a18      	ldr	r2, [pc, #96]	; (8010dac <f_readdir+0xa4>)
 8010d4c:	601a      	str	r2, [r3, #0]
			res = dir_read(dp, 0);			/* Read an item */
 8010d4e:	2100      	movs	r1, #0
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7fd fec6 	bl	800eae2 <dir_read>
 8010d56:	4603      	mov	r3, r0
 8010d58:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	2b04      	cmp	r3, #4
 8010d5e:	d107      	bne.n	8010d70 <f_readdir+0x68>
				dp->sect = 0;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d66:	3310      	adds	r3, #16
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
				res = FR_OK;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d114      	bne.n	8010da0 <f_readdir+0x98>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010d76:	6839      	ldr	r1, [r7, #0]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7fe f89b 	bl	800eeb4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010d7e:	2100      	movs	r1, #0
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7fd f9db 	bl	800e13c <dir_next>
 8010d86:	4603      	mov	r3, r0
 8010d88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	2b04      	cmp	r3, #4
 8010d8e:	d107      	bne.n	8010da0 <f_readdir+0x98>
					dp->sect = 0;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d96:	3310      	adds	r3, #16
 8010d98:	2200      	movs	r2, #0
 8010d9a:	601a      	str	r2, [r3, #0]
					res = FR_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	200055ec 	.word	0x200055ec

08010db0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	f107 0320 	add.w	r3, r7, #32
 8010dbc:	3b1c      	subs	r3, #28
 8010dbe:	6018      	str	r0, [r3, #0]
 8010dc0:	463b      	mov	r3, r7
 8010dc2:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8010dc4:	f107 0120 	add.w	r1, r7, #32
 8010dc8:	391c      	subs	r1, #28
 8010dca:	f107 0320 	add.w	r3, r7, #32
 8010dce:	3b0c      	subs	r3, #12
 8010dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fe fc30 	bl	800f63c <find_volume>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8010de2:	f102 021f 	add.w	r2, r2, #31
 8010de6:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 8010de8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8010dec:	f103 031f 	add.w	r3, r3, #31
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d144      	bne.n	8010e80 <f_stat+0xd0>
		INIT_BUF(dj);
 8010df6:	f107 0320 	add.w	r3, r7, #32
 8010dfa:	3b0c      	subs	r3, #12
 8010dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e00:	3318      	adds	r3, #24
 8010e02:	f107 0220 	add.w	r2, r7, #32
 8010e06:	3a18      	subs	r2, #24
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	f107 0320 	add.w	r3, r7, #32
 8010e0e:	3b0c      	subs	r3, #12
 8010e10:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010e14:	4a1f      	ldr	r2, [pc, #124]	; (8010e94 <f_stat+0xe4>)
 8010e16:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010e18:	f107 0320 	add.w	r3, r7, #32
 8010e1c:	3b1c      	subs	r3, #28
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	f107 0320 	add.w	r3, r7, #32
 8010e24:	3b0c      	subs	r3, #12
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fe fadd 	bl	800f3e8 <follow_path>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8010e34:	f102 021f 	add.w	r2, r2, #31
 8010e38:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {				/* Follow completed */
 8010e3a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8010e3e:	f103 031f 	add.w	r3, r3, #31
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d11b      	bne.n	8010e80 <f_stat+0xd0>
			if (dj.dir) {		/* Found an object */
 8010e48:	f107 0320 	add.w	r3, r7, #32
 8010e4c:	3b0c      	subs	r3, #12
 8010e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e52:	3314      	adds	r3, #20
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00c      	beq.n	8010e74 <f_stat+0xc4>
				if (fno) get_fileinfo(&dj, fno);
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00e      	beq.n	8010e80 <f_stat+0xd0>
 8010e62:	463a      	mov	r2, r7
 8010e64:	f107 0320 	add.w	r3, r7, #32
 8010e68:	3b0c      	subs	r3, #12
 8010e6a:	6811      	ldr	r1, [r2, #0]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fe f821 	bl	800eeb4 <get_fileinfo>
 8010e72:	e005      	b.n	8010e80 <f_stat+0xd0>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8010e74:	2306      	movs	r3, #6
 8010e76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8010e7a:	f102 021f 	add.w	r2, r2, #31
 8010e7e:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8010e80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8010e84:	f103 031f 	add.w	r3, r3, #31
 8010e88:	781b      	ldrb	r3, [r3, #0]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	200055ec 	.word	0x200055ec

08010e98 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08e      	sub	sp, #56	; 0x38
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8010ea4:	f107 030c 	add.w	r3, r7, #12
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	4619      	mov	r1, r3
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7fe fbc5 	bl	800f63c <find_volume>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8010ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f040 80c4 	bne.w	8011050 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ece:	3310      	adds	r3, #16
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ed8:	3314      	adds	r3, #20
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3b02      	subs	r3, #2
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d807      	bhi.n	8010ef2 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ee8:	3310      	adds	r3, #16
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	601a      	str	r2, [r3, #0]
 8010ef0:	e0ae      	b.n	8011050 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8010f00:	7efb      	ldrb	r3, [r7, #27]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d127      	bne.n	8010f56 <f_getfree+0xbe>
				clst = 2;
 8010f06:	2302      	movs	r3, #2
 8010f08:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8010f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f0c:	69f8      	ldr	r0, [r7, #28]
 8010f0e:	f7fc fc79 	bl	800d804 <get_fat>
 8010f12:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1a:	d103      	bne.n	8010f24 <f_getfree+0x8c>
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f22:	e07f      	b.n	8011024 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d103      	bne.n	8010f32 <f_getfree+0x9a>
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f30:	e078      	b.n	8011024 <f_getfree+0x18c>
					if (stat == 0) n++;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d102      	bne.n	8010f3e <f_getfree+0xa6>
 8010f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8010f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f40:	3301      	adds	r3, #1
 8010f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f4a:	3314      	adds	r3, #20
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d3da      	bcc.n	8010f0a <f_getfree+0x72>
 8010f54:	e066      	b.n	8011024 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f5c:	3314      	adds	r3, #20
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f70:	2300      	movs	r3, #0
 8010f72:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8010f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d115      	bne.n	8010fa6 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	1c5a      	adds	r2, r3, #1
 8010f7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8010f80:	4619      	mov	r1, r3
 8010f82:	69f8      	ldr	r0, [r7, #28]
 8010f84:	f7fc fb14 	bl	800d5b0 <move_window>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8010f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d145      	bne.n	8011022 <f_getfree+0x18a>
						p = fs->win.d8;
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fa0:	330a      	adds	r3, #10
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8010fa6:	7efb      	ldrb	r3, [r7, #27]
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d115      	bne.n	8010fd8 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	021b      	lsls	r3, r3, #8
 8010fb4:	b21a      	sxth	r2, r3
 8010fb6:	6a3b      	ldr	r3, [r7, #32]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	b21b      	sxth	r3, r3
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	b21b      	sxth	r3, r3
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d102      	bne.n	8010fca <f_getfree+0x132>
 8010fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8010fca:	6a3b      	ldr	r3, [r7, #32]
 8010fcc:	3302      	adds	r3, #2
 8010fce:	623b      	str	r3, [r7, #32]
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	3b02      	subs	r3, #2
 8010fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fd6:	e01d      	b.n	8011014 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	3303      	adds	r3, #3
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	061a      	lsls	r2, r3, #24
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	3302      	adds	r3, #2
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	041b      	lsls	r3, r3, #16
 8010fe8:	4313      	orrs	r3, r2
 8010fea:	6a3a      	ldr	r2, [r7, #32]
 8010fec:	3201      	adds	r2, #1
 8010fee:	7812      	ldrb	r2, [r2, #0]
 8010ff0:	0212      	lsls	r2, r2, #8
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	6a3a      	ldr	r2, [r7, #32]
 8010ff6:	7812      	ldrb	r2, [r2, #0]
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <f_getfree+0x170>
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	3301      	adds	r3, #1
 8011006:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	3304      	adds	r3, #4
 801100c:	623b      	str	r3, [r7, #32]
 801100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011010:	3b04      	subs	r3, #4
 8011012:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8011014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011016:	3b01      	subs	r3, #1
 8011018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1a9      	bne.n	8010f74 <f_getfree+0xdc>
 8011020:	e000      	b.n	8011024 <f_getfree+0x18c>
						if (res != FR_OK) break;
 8011022:	bf00      	nop
			}
			fs->free_clust = n;
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801102a:	3310      	adds	r3, #16
 801102c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801102e:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011036:	3305      	adds	r3, #5
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f043 0301 	orr.w	r3, r3, #1
 801103e:	b2da      	uxtb	r2, r3
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011046:	3305      	adds	r3, #5
 8011048:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801104e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8011050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8011054:	4618      	mov	r0, r3
 8011056:	3738      	adds	r7, #56	; 0x38
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801105c:	b480      	push	{r7}
 801105e:	b087      	sub	sp, #28
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	4613      	mov	r3, r2
 8011068:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801106a:	2301      	movs	r3, #1
 801106c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801106e:	2300      	movs	r3, #0
 8011070:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8011072:	4b1e      	ldr	r3, [pc, #120]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 8011074:	7a5b      	ldrb	r3, [r3, #9]
 8011076:	b2db      	uxtb	r3, r3
 8011078:	2b01      	cmp	r3, #1
 801107a:	d831      	bhi.n	80110e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801107c:	4b1b      	ldr	r3, [pc, #108]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 801107e:	7a5b      	ldrb	r3, [r3, #9]
 8011080:	b2db      	uxtb	r3, r3
 8011082:	461a      	mov	r2, r3
 8011084:	4b19      	ldr	r3, [pc, #100]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 8011086:	2100      	movs	r1, #0
 8011088:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 801108a:	4b18      	ldr	r3, [pc, #96]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 801108c:	7a5b      	ldrb	r3, [r3, #9]
 801108e:	b2db      	uxtb	r3, r3
 8011090:	4a16      	ldr	r2, [pc, #88]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	4413      	add	r3, r2
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 801109a:	4b14      	ldr	r3, [pc, #80]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 801109c:	7a5b      	ldrb	r3, [r3, #9]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	461a      	mov	r2, r3
 80110a2:	4b12      	ldr	r3, [pc, #72]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 80110a4:	4413      	add	r3, r2
 80110a6:	79fa      	ldrb	r2, [r7, #7]
 80110a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80110aa:	4b10      	ldr	r3, [pc, #64]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 80110ac:	7a5b      	ldrb	r3, [r3, #9]
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	1c5a      	adds	r2, r3, #1
 80110b2:	b2d1      	uxtb	r1, r2
 80110b4:	4a0d      	ldr	r2, [pc, #52]	; (80110ec <FATFS_LinkDriverEx+0x90>)
 80110b6:	7251      	strb	r1, [r2, #9]
 80110b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80110ba:	7dbb      	ldrb	r3, [r7, #22]
 80110bc:	3330      	adds	r3, #48	; 0x30
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	3301      	adds	r3, #1
 80110c8:	223a      	movs	r2, #58	; 0x3a
 80110ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	3302      	adds	r3, #2
 80110d0:	222f      	movs	r2, #47	; 0x2f
 80110d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	3303      	adds	r3, #3
 80110d8:	2200      	movs	r2, #0
 80110da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80110e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	371c      	adds	r7, #28
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bc80      	pop	{r7}
 80110ea:	4770      	bx	lr
 80110ec:	200057ec 	.word	0x200057ec

080110f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80110fa:	2200      	movs	r2, #0
 80110fc:	6839      	ldr	r1, [r7, #0]
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff ffac 	bl	801105c <FATFS_LinkDriverEx>
 8011104:	4603      	mov	r3, r0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3708      	adds	r7, #8
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	4603      	mov	r3, r0
 8011116:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	bc80      	pop	{r7}
 8011122:	4770      	bx	lr

08011124 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	4603      	mov	r3, r0
 801112c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 801112e:	2301      	movs	r3, #1
 8011130:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	4619      	mov	r1, r3
 8011136:	4808      	ldr	r0, [pc, #32]	; (8011158 <USBH_status+0x34>)
 8011138:	f7f9 fe63 	bl	800ae02 <USBH_MSC_UnitIsReady>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d002      	beq.n	8011148 <USBH_status+0x24>
  {
    res = RES_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	73fb      	strb	r3, [r7, #15]
 8011146:	e001      	b.n	801114c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8011148:	2301      	movs	r3, #1
 801114a:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 801114c:	7bfb      	ldrb	r3, [r7, #15]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	20007b98 	.word	0x20007b98

0801115c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b094      	sub	sp, #80	; 0x50
 8011160:	af02      	add	r7, sp, #8
 8011162:	60b9      	str	r1, [r7, #8]
 8011164:	607a      	str	r2, [r7, #4]
 8011166:	603b      	str	r3, [r7, #0]
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801116c:	2301      	movs	r3, #1
 801116e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8011172:	2300      	movs	r3, #0
 8011174:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	f003 0303 	and.w	r3, r3, #3
 801117e:	2b00      	cmp	r3, #0
 8011180:	d002      	beq.n	8011188 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8011182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011186:	e02c      	b.n	80111e2 <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8011188:	7bf9      	ldrb	r1, [r7, #15]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	4816      	ldr	r0, [pc, #88]	; (80111ec <USBH_read+0x90>)
 8011194:	f7f9 fe7e 	bl	800ae94 <USBH_MSC_Read>
 8011198:	4603      	mov	r3, r0
 801119a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 801119e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d103      	bne.n	80111ae <USBH_read+0x52>
  {
    res = RES_OK;
 80111a6:	2300      	movs	r3, #0
 80111a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80111ac:	e017      	b.n	80111de <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80111ae:	f107 0210 	add.w	r2, r7, #16
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	4619      	mov	r1, r3
 80111b6:	480d      	ldr	r0, [pc, #52]	; (80111ec <USBH_read+0x90>)
 80111b8:	f7f9 fe48 	bl	800ae4c <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 80111bc:	7f7b      	ldrb	r3, [r7, #29]
 80111be:	2b3a      	cmp	r3, #58	; 0x3a
 80111c0:	d005      	beq.n	80111ce <USBH_read+0x72>
 80111c2:	2b3a      	cmp	r3, #58	; 0x3a
 80111c4:	dc07      	bgt.n	80111d6 <USBH_read+0x7a>
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d001      	beq.n	80111ce <USBH_read+0x72>
 80111ca:	2b28      	cmp	r3, #40	; 0x28
 80111cc:	d103      	bne.n	80111d6 <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 80111ce:	2303      	movs	r3, #3
 80111d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80111d4:	e003      	b.n	80111de <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 80111d6:	2301      	movs	r3, #1
 80111d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80111dc:	bf00      	nop
    }
  }
  
  return res;
 80111de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3748      	adds	r7, #72	; 0x48
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	20007b98 	.word	0x20007b98

080111f0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b094      	sub	sp, #80	; 0x50
 80111f4:	af02      	add	r7, sp, #8
 80111f6:	60b9      	str	r1, [r7, #8]
 80111f8:	607a      	str	r2, [r7, #4]
 80111fa:	603b      	str	r3, [r7, #0]
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 8011200:	2301      	movs	r3, #1
 8011202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 8011206:	2300      	movs	r3, #0
 8011208:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	f003 0303 	and.w	r3, r3, #3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d002      	beq.n	801121c <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8011216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801121a:	e034      	b.n	8011286 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 801121c:	7bf9      	ldrb	r1, [r7, #15]
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	481a      	ldr	r0, [pc, #104]	; (8011290 <USBH_write+0xa0>)
 8011228:	f7f9 fe9d 	bl	800af66 <USBH_MSC_Write>
 801122c:	4603      	mov	r3, r0
 801122e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8011232:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011236:	2b00      	cmp	r3, #0
 8011238:	d103      	bne.n	8011242 <USBH_write+0x52>
  {
    res = RES_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011240:	e01f      	b.n	8011282 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8011242:	f107 0210 	add.w	r2, r7, #16
 8011246:	7bfb      	ldrb	r3, [r7, #15]
 8011248:	4619      	mov	r1, r3
 801124a:	4811      	ldr	r0, [pc, #68]	; (8011290 <USBH_write+0xa0>)
 801124c:	f7f9 fdfe 	bl	800ae4c <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8011250:	7f7b      	ldrb	r3, [r7, #29]
 8011252:	2b3a      	cmp	r3, #58	; 0x3a
 8011254:	d00d      	beq.n	8011272 <USBH_write+0x82>
 8011256:	2b3a      	cmp	r3, #58	; 0x3a
 8011258:	dc0f      	bgt.n	801127a <USBH_write+0x8a>
 801125a:	2b28      	cmp	r3, #40	; 0x28
 801125c:	d009      	beq.n	8011272 <USBH_write+0x82>
 801125e:	2b28      	cmp	r3, #40	; 0x28
 8011260:	dc0b      	bgt.n	801127a <USBH_write+0x8a>
 8011262:	2b04      	cmp	r3, #4
 8011264:	d005      	beq.n	8011272 <USBH_write+0x82>
 8011266:	2b27      	cmp	r3, #39	; 0x27
 8011268:	d107      	bne.n	801127a <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 801126a:	2302      	movs	r3, #2
 801126c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8011270:	e007      	b.n	8011282 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 8011272:	2303      	movs	r3, #3
 8011274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8011278:	e003      	b.n	8011282 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 801127a:	2301      	movs	r3, #1
 801127c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8011280:	bf00      	nop
    }
  }
  
  return res;   
 8011282:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011286:	4618      	mov	r0, r3
 8011288:	3748      	adds	r7, #72	; 0x48
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	20007b98 	.word	0x20007b98

08011294 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b090      	sub	sp, #64	; 0x40
 8011298:	af00      	add	r7, sp, #0
 801129a:	4603      	mov	r3, r0
 801129c:	603a      	str	r2, [r7, #0]
 801129e:	71fb      	strb	r3, [r7, #7]
 80112a0:	460b      	mov	r3, r1
 80112a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80112a4:	2301      	movs	r3, #1
 80112a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 80112aa:	79bb      	ldrb	r3, [r7, #6]
 80112ac:	2b03      	cmp	r3, #3
 80112ae:	d850      	bhi.n	8011352 <USBH_ioctl+0xbe>
 80112b0:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <USBH_ioctl+0x24>)
 80112b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b6:	bf00      	nop
 80112b8:	080112c9 	.word	0x080112c9
 80112bc:	080112d1 	.word	0x080112d1
 80112c0:	080112fb 	.word	0x080112fb
 80112c4:	08011327 	.word	0x08011327
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80112ce:	e043      	b.n	8011358 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80112d0:	f107 0208 	add.w	r2, r7, #8
 80112d4:	79fb      	ldrb	r3, [r7, #7]
 80112d6:	4619      	mov	r1, r3
 80112d8:	4822      	ldr	r0, [pc, #136]	; (8011364 <USBH_ioctl+0xd0>)
 80112da:	f7f9 fdb7 	bl	800ae4c <USBH_MSC_GetLUNInfo>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d106      	bne.n	80112f2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80112ea:	2300      	movs	r3, #0
 80112ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80112f0:	e032      	b.n	8011358 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80112f8:	e02e      	b.n	8011358 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80112fa:	f107 0208 	add.w	r2, r7, #8
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	4619      	mov	r1, r3
 8011302:	4818      	ldr	r0, [pc, #96]	; (8011364 <USBH_ioctl+0xd0>)
 8011304:	f7f9 fda2 	bl	800ae4c <USBH_MSC_GetLUNInfo>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d107      	bne.n	801131e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801130e:	8a3b      	ldrh	r3, [r7, #16]
 8011310:	461a      	mov	r2, r3
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801131c:	e01c      	b.n	8011358 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 801131e:	2301      	movs	r3, #1
 8011320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8011324:	e018      	b.n	8011358 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8011326:	f107 0208 	add.w	r2, r7, #8
 801132a:	79fb      	ldrb	r3, [r7, #7]
 801132c:	4619      	mov	r1, r3
 801132e:	480d      	ldr	r0, [pc, #52]	; (8011364 <USBH_ioctl+0xd0>)
 8011330:	f7f9 fd8c 	bl	800ae4c <USBH_MSC_GetLUNInfo>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d107      	bne.n	801134a <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801133a:	8a3b      	ldrh	r3, [r7, #16]
 801133c:	461a      	mov	r2, r3
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8011348:	e006      	b.n	8011358 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8011350:	e002      	b.n	8011358 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 8011352:	2304      	movs	r3, #4
 8011354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 8011358:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801135c:	4618      	mov	r0, r3
 801135e:	3740      	adds	r7, #64	; 0x40
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	20007b98 	.word	0x20007b98

08011368 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	6039      	str	r1, [r7, #0]
 8011372:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011374:	88fb      	ldrh	r3, [r7, #6]
 8011376:	2b7f      	cmp	r3, #127	; 0x7f
 8011378:	d802      	bhi.n	8011380 <ff_convert+0x18>
		c = chr;
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	81fb      	strh	r3, [r7, #14]
 801137e:	e025      	b.n	80113cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00b      	beq.n	801139e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011386:	88fb      	ldrh	r3, [r7, #6]
 8011388:	2bff      	cmp	r3, #255	; 0xff
 801138a:	d805      	bhi.n	8011398 <ff_convert+0x30>
 801138c:	88fb      	ldrh	r3, [r7, #6]
 801138e:	3b80      	subs	r3, #128	; 0x80
 8011390:	4a11      	ldr	r2, [pc, #68]	; (80113d8 <ff_convert+0x70>)
 8011392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011396:	e000      	b.n	801139a <ff_convert+0x32>
 8011398:	2300      	movs	r3, #0
 801139a:	81fb      	strh	r3, [r7, #14]
 801139c:	e016      	b.n	80113cc <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 801139e:	2300      	movs	r3, #0
 80113a0:	81fb      	strh	r3, [r7, #14]
 80113a2:	e009      	b.n	80113b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80113a4:	89fb      	ldrh	r3, [r7, #14]
 80113a6:	4a0c      	ldr	r2, [pc, #48]	; (80113d8 <ff_convert+0x70>)
 80113a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ac:	88fa      	ldrh	r2, [r7, #6]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d006      	beq.n	80113c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80113b2:	89fb      	ldrh	r3, [r7, #14]
 80113b4:	3301      	adds	r3, #1
 80113b6:	81fb      	strh	r3, [r7, #14]
 80113b8:	89fb      	ldrh	r3, [r7, #14]
 80113ba:	2b7f      	cmp	r3, #127	; 0x7f
 80113bc:	d9f2      	bls.n	80113a4 <ff_convert+0x3c>
 80113be:	e000      	b.n	80113c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80113c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80113c2:	89fb      	ldrh	r3, [r7, #14]
 80113c4:	3380      	adds	r3, #128	; 0x80
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80113cc:	89fb      	ldrh	r3, [r7, #14]
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3714      	adds	r7, #20
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bc80      	pop	{r7}
 80113d6:	4770      	bx	lr
 80113d8:	08016580 	.word	0x08016580

080113dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	4603      	mov	r3, r0
 80113e4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80113e6:	2300      	movs	r3, #0
 80113e8:	60fb      	str	r3, [r7, #12]
 80113ea:	e002      	b.n	80113f2 <ff_wtoupper+0x16>
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	3301      	adds	r3, #1
 80113f0:	60fb      	str	r3, [r7, #12]
 80113f2:	4a0f      	ldr	r2, [pc, #60]	; (8011430 <ff_wtoupper+0x54>)
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d006      	beq.n	801140c <ff_wtoupper+0x30>
 80113fe:	4a0c      	ldr	r2, [pc, #48]	; (8011430 <ff_wtoupper+0x54>)
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011406:	88fa      	ldrh	r2, [r7, #6]
 8011408:	429a      	cmp	r2, r3
 801140a:	d1ef      	bne.n	80113ec <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 801140c:	4a08      	ldr	r2, [pc, #32]	; (8011430 <ff_wtoupper+0x54>)
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d004      	beq.n	8011422 <ff_wtoupper+0x46>
 8011418:	4a06      	ldr	r2, [pc, #24]	; (8011434 <ff_wtoupper+0x58>)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011420:	e000      	b.n	8011424 <ff_wtoupper+0x48>
 8011422:	88fb      	ldrh	r3, [r7, #6]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3714      	adds	r7, #20
 8011428:	46bd      	mov	sp, r7
 801142a:	bc80      	pop	{r7}
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	08016680 	.word	0x08016680
 8011434:	08016860 	.word	0x08016860

08011438 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801143c:	2201      	movs	r2, #1
 801143e:	490e      	ldr	r1, [pc, #56]	; (8011478 <MX_USB_HOST_Init+0x40>)
 8011440:	480e      	ldr	r0, [pc, #56]	; (801147c <MX_USB_HOST_Init+0x44>)
 8011442:	f7fa fb47 	bl	800bad4 <USBH_Init>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d001      	beq.n	8011450 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801144c:	f7f2 f98a 	bl	8003764 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8011450:	490b      	ldr	r1, [pc, #44]	; (8011480 <MX_USB_HOST_Init+0x48>)
 8011452:	480a      	ldr	r0, [pc, #40]	; (801147c <MX_USB_HOST_Init+0x44>)
 8011454:	f7fa fbc2 	bl	800bbdc <USBH_RegisterClass>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801145e:	f7f2 f981 	bl	8003764 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011462:	4806      	ldr	r0, [pc, #24]	; (801147c <MX_USB_HOST_Init+0x44>)
 8011464:	f7fa fc44 	bl	800bcf0 <USBH_Start>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801146e:	f7f2 f979 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011472:	bf00      	nop
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	08011499 	.word	0x08011499
 801147c:	20007b98 	.word	0x20007b98
 8011480:	20000228 	.word	0x20000228

08011484 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011488:	4802      	ldr	r0, [pc, #8]	; (8011494 <MX_USB_HOST_Process+0x10>)
 801148a:	f7fa fc41 	bl	800bd10 <USBH_Process>
}
 801148e:	bf00      	nop
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	20007b98 	.word	0x20007b98

08011498 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	460b      	mov	r3, r1
 80114a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80114a4:	78fb      	ldrb	r3, [r7, #3]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	2b04      	cmp	r3, #4
 80114aa:	d82e      	bhi.n	801150a <USBH_UserProcess+0x72>
 80114ac:	a201      	add	r2, pc, #4	; (adr r2, 80114b4 <USBH_UserProcess+0x1c>)
 80114ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b2:	bf00      	nop
 80114b4:	0801150b 	.word	0x0801150b
 80114b8:	080114db 	.word	0x080114db
 80114bc:	0801150b 	.word	0x0801150b
 80114c0:	08011503 	.word	0x08011503
 80114c4:	080114c9 	.word	0x080114c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80114c8:	4b12      	ldr	r3, [pc, #72]	; (8011514 <USBH_UserProcess+0x7c>)
 80114ca:	2203      	movs	r2, #3
 80114cc:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 80114ce:	4b12      	ldr	r3, [pc, #72]	; (8011518 <USBH_UserProcess+0x80>)
 80114d0:	2200      	movs	r2, #0
 80114d2:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 80114d4:	f7f0 f88a 	bl	80015ec <Unmount_USB>
  break;
 80114d8:	e018      	b.n	801150c <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80114da:	4b0e      	ldr	r3, [pc, #56]	; (8011514 <USBH_UserProcess+0x7c>)
 80114dc:	2202      	movs	r2, #2
 80114de:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 80114e0:	f7f0 f870 	bl	80015c4 <Mount_USB>
	Check_USB_Details();
 80114e4:	f7f0 f99e 	bl	8001824 <Check_USB_Details>
	Scan_USB("/");
 80114e8:	480c      	ldr	r0, [pc, #48]	; (801151c <USBH_UserProcess+0x84>)
 80114ea:	f7f0 f891 	bl	8001610 <Scan_USB>
	Create_File("/TDS_PH_UP_Calibration_data.csv");
 80114ee:	480c      	ldr	r0, [pc, #48]	; (8011520 <USBH_UserProcess+0x88>)
 80114f0:	f7f0 f962 	bl	80017b8 <Create_File>
	Create_File("/TDS_PH_Down_Calibration_data.csv");
 80114f4:	480b      	ldr	r0, [pc, #44]	; (8011524 <USBH_UserProcess+0x8c>)
 80114f6:	f7f0 f95f 	bl	80017b8 <Create_File>

	//Write_File("/TDS_PH_Calibration_data.csv","does it work");
  usb_good = 1;
 80114fa:	4b07      	ldr	r3, [pc, #28]	; (8011518 <USBH_UserProcess+0x80>)
 80114fc:	2201      	movs	r2, #1
 80114fe:	601a      	str	r2, [r3, #0]

  break;
 8011500:	e004      	b.n	801150c <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011502:	4b04      	ldr	r3, [pc, #16]	; (8011514 <USBH_UserProcess+0x7c>)
 8011504:	2201      	movs	r2, #1
 8011506:	701a      	strb	r2, [r3, #0]
  break;
 8011508:	e000      	b.n	801150c <USBH_UserProcess+0x74>

  default:
  break;
 801150a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801150c:	bf00      	nop
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	200057f8 	.word	0x200057f8
 8011518:	200057fc 	.word	0x200057fc
 801151c:	08016484 	.word	0x08016484
 8011520:	08016488 	.word	0x08016488
 8011524:	080164a8 	.word	0x080164a8

08011528 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08a      	sub	sp, #40	; 0x28
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011530:	f107 0314 	add.w	r3, r7, #20
 8011534:	2200      	movs	r2, #0
 8011536:	601a      	str	r2, [r3, #0]
 8011538:	605a      	str	r2, [r3, #4]
 801153a:	609a      	str	r2, [r3, #8]
 801153c:	60da      	str	r2, [r3, #12]
 801153e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011548:	d147      	bne.n	80115da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801154a:	2300      	movs	r3, #0
 801154c:	613b      	str	r3, [r7, #16]
 801154e:	4b25      	ldr	r3, [pc, #148]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 8011550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011552:	4a24      	ldr	r2, [pc, #144]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 8011554:	f043 0301 	orr.w	r3, r3, #1
 8011558:	6313      	str	r3, [r2, #48]	; 0x30
 801155a:	4b22      	ldr	r3, [pc, #136]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 801155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801155e:	f003 0301 	and.w	r3, r3, #1
 8011562:	613b      	str	r3, [r7, #16]
 8011564:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011566:	f44f 7300 	mov.w	r3, #512	; 0x200
 801156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801156c:	2300      	movs	r3, #0
 801156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011570:	2300      	movs	r3, #0
 8011572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011574:	f107 0314 	add.w	r3, r7, #20
 8011578:	4619      	mov	r1, r3
 801157a:	481b      	ldr	r0, [pc, #108]	; (80115e8 <HAL_HCD_MspInit+0xc0>)
 801157c:	f7f3 ff5c 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011580:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011586:	2302      	movs	r3, #2
 8011588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801158a:	2300      	movs	r3, #0
 801158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801158e:	2303      	movs	r3, #3
 8011590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011592:	230a      	movs	r3, #10
 8011594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011596:	f107 0314 	add.w	r3, r7, #20
 801159a:	4619      	mov	r1, r3
 801159c:	4812      	ldr	r0, [pc, #72]	; (80115e8 <HAL_HCD_MspInit+0xc0>)
 801159e:	f7f3 ff4b 	bl	8005438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115a2:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 80115a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a6:	4a0f      	ldr	r2, [pc, #60]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 80115a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115ac:	6353      	str	r3, [r2, #52]	; 0x34
 80115ae:	2300      	movs	r3, #0
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	4b0c      	ldr	r3, [pc, #48]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 80115b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115b6:	4a0b      	ldr	r2, [pc, #44]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 80115b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80115bc:	6453      	str	r3, [r2, #68]	; 0x44
 80115be:	4b09      	ldr	r3, [pc, #36]	; (80115e4 <HAL_HCD_MspInit+0xbc>)
 80115c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115c6:	60fb      	str	r3, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80115ca:	2200      	movs	r2, #0
 80115cc:	2100      	movs	r1, #0
 80115ce:	2043      	movs	r0, #67	; 0x43
 80115d0:	f7f3 fefb 	bl	80053ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80115d4:	2043      	movs	r0, #67	; 0x43
 80115d6:	f7f3 ff14 	bl	8005402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80115da:	bf00      	nop
 80115dc:	3728      	adds	r7, #40	; 0x28
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	40023800 	.word	0x40023800
 80115e8:	40020000 	.word	0x40020000

080115ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fa fe56 	bl	800c2ac <USBH_LL_IncTimer>
}
 8011600:	bf00      	nop
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011616:	4618      	mov	r0, r3
 8011618:	f7fa fe8c 	bl	800c334 <USBH_LL_Connect>
}
 801161c:	bf00      	nop
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011632:	4618      	mov	r0, r3
 8011634:	f7fa fe94 	bl	800c360 <USBH_LL_Disconnect>
}
 8011638:	bf00      	nop
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	460b      	mov	r3, r1
 801164a:	70fb      	strb	r3, [r7, #3]
 801164c:	4613      	mov	r3, r2
 801164e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011650:	bf00      	nop
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	bc80      	pop	{r7}
 8011658:	4770      	bx	lr

0801165a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801165a:	b580      	push	{r7, lr}
 801165c:	b082      	sub	sp, #8
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011668:	4618      	mov	r0, r3
 801166a:	f7fa fe49 	bl	800c300 <USBH_LL_PortEnabled>
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b082      	sub	sp, #8
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011684:	4618      	mov	r0, r3
 8011686:	f7fa fe48 	bl	800c31a <USBH_LL_PortDisabled>
}
 801168a:	bf00      	nop
 801168c:	3708      	adds	r7, #8
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
	...

08011694 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d12a      	bne.n	80116fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80116a6:	4a18      	ldr	r2, [pc, #96]	; (8011708 <USBH_LL_Init+0x74>)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a15      	ldr	r2, [pc, #84]	; (8011708 <USBH_LL_Init+0x74>)
 80116b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80116b6:	4b14      	ldr	r3, [pc, #80]	; (8011708 <USBH_LL_Init+0x74>)
 80116b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80116bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80116be:	4b12      	ldr	r3, [pc, #72]	; (8011708 <USBH_LL_Init+0x74>)
 80116c0:	2208      	movs	r2, #8
 80116c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80116c4:	4b10      	ldr	r3, [pc, #64]	; (8011708 <USBH_LL_Init+0x74>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80116ca:	4b0f      	ldr	r3, [pc, #60]	; (8011708 <USBH_LL_Init+0x74>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80116d0:	4b0d      	ldr	r3, [pc, #52]	; (8011708 <USBH_LL_Init+0x74>)
 80116d2:	2202      	movs	r2, #2
 80116d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80116d6:	4b0c      	ldr	r3, [pc, #48]	; (8011708 <USBH_LL_Init+0x74>)
 80116d8:	2200      	movs	r2, #0
 80116da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80116dc:	480a      	ldr	r0, [pc, #40]	; (8011708 <USBH_LL_Init+0x74>)
 80116de:	f7f4 f891 	bl	8005804 <HAL_HCD_Init>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d001      	beq.n	80116ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80116e8:	f7f2 f83c 	bl	8003764 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80116ec:	4806      	ldr	r0, [pc, #24]	; (8011708 <USBH_LL_Init+0x74>)
 80116ee:	f7f4 fc6b 	bl	8005fc8 <HAL_HCD_GetCurrentFrame>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4619      	mov	r1, r3
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7fa fdca 	bl	800c290 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	20007f68 	.word	0x20007f68

0801170c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011714:	2300      	movs	r3, #0
 8011716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011722:	4618      	mov	r0, r3
 8011724:	f7f4 fbdc 	bl	8005ee0 <HAL_HCD_Start>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 f98a 	bl	8011a48 <USBH_Get_USB_Status>
 8011734:	4603      	mov	r3, r0
 8011736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011738:	7bbb      	ldrb	r3, [r7, #14]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b084      	sub	sp, #16
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011758:	4618      	mov	r0, r3
 801175a:	f7f4 fbe4 	bl	8005f26 <HAL_HCD_Stop>
 801175e:	4603      	mov	r3, r0
 8011760:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011762:	7bfb      	ldrb	r3, [r7, #15]
 8011764:	4618      	mov	r0, r3
 8011766:	f000 f96f 	bl	8011a48 <USBH_Get_USB_Status>
 801176a:	4603      	mov	r3, r0
 801176c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801176e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011770:	4618      	mov	r0, r3
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}

08011778 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011780:	2301      	movs	r3, #1
 8011782:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801178a:	4618      	mov	r0, r3
 801178c:	f7f4 fc2a 	bl	8005fe4 <HAL_HCD_GetCurrentSpeed>
 8011790:	4603      	mov	r3, r0
 8011792:	2b02      	cmp	r3, #2
 8011794:	d00c      	beq.n	80117b0 <USBH_LL_GetSpeed+0x38>
 8011796:	2b02      	cmp	r3, #2
 8011798:	d80d      	bhi.n	80117b6 <USBH_LL_GetSpeed+0x3e>
 801179a:	2b00      	cmp	r3, #0
 801179c:	d002      	beq.n	80117a4 <USBH_LL_GetSpeed+0x2c>
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d003      	beq.n	80117aa <USBH_LL_GetSpeed+0x32>
 80117a2:	e008      	b.n	80117b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80117a4:	2300      	movs	r3, #0
 80117a6:	73fb      	strb	r3, [r7, #15]
    break;
 80117a8:	e008      	b.n	80117bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80117aa:	2301      	movs	r3, #1
 80117ac:	73fb      	strb	r3, [r7, #15]
    break;
 80117ae:	e005      	b.n	80117bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80117b0:	2302      	movs	r3, #2
 80117b2:	73fb      	strb	r3, [r7, #15]
    break;
 80117b4:	e002      	b.n	80117bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80117b6:	2301      	movs	r3, #1
 80117b8:	73fb      	strb	r3, [r7, #15]
    break;
 80117ba:	bf00      	nop
  }
  return  speed;
 80117bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b084      	sub	sp, #16
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80117d2:	2300      	movs	r3, #0
 80117d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f4 fbbf 	bl	8005f60 <HAL_HCD_ResetPort>
 80117e2:	4603      	mov	r3, r0
 80117e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f000 f92d 	bl	8011a48 <USBH_Get_USB_Status>
 80117ee:	4603      	mov	r3, r0
 80117f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801180e:	78fa      	ldrb	r2, [r7, #3]
 8011810:	4611      	mov	r1, r2
 8011812:	4618      	mov	r0, r3
 8011814:	f7f4 fbc5 	bl	8005fa2 <HAL_HCD_HC_GetXferCount>
 8011818:	4603      	mov	r3, r0
}
 801181a:	4618      	mov	r0, r3
 801181c:	3708      	adds	r7, #8
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011822:	b590      	push	{r4, r7, lr}
 8011824:	b089      	sub	sp, #36	; 0x24
 8011826:	af04      	add	r7, sp, #16
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	4608      	mov	r0, r1
 801182c:	4611      	mov	r1, r2
 801182e:	461a      	mov	r2, r3
 8011830:	4603      	mov	r3, r0
 8011832:	70fb      	strb	r3, [r7, #3]
 8011834:	460b      	mov	r3, r1
 8011836:	70bb      	strb	r3, [r7, #2]
 8011838:	4613      	mov	r3, r2
 801183a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801183c:	2300      	movs	r3, #0
 801183e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011840:	2300      	movs	r3, #0
 8011842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801184a:	787c      	ldrb	r4, [r7, #1]
 801184c:	78ba      	ldrb	r2, [r7, #2]
 801184e:	78f9      	ldrb	r1, [r7, #3]
 8011850:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011852:	9302      	str	r3, [sp, #8]
 8011854:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801185e:	9300      	str	r3, [sp, #0]
 8011860:	4623      	mov	r3, r4
 8011862:	f7f4 f831 	bl	80058c8 <HAL_HCD_HC_Init>
 8011866:	4603      	mov	r3, r0
 8011868:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801186a:	7bfb      	ldrb	r3, [r7, #15]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f8eb 	bl	8011a48 <USBH_Get_USB_Status>
 8011872:	4603      	mov	r3, r0
 8011874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011876:	7bbb      	ldrb	r3, [r7, #14]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	bd90      	pop	{r4, r7, pc}

08011880 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	460b      	mov	r3, r1
 801188a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801188c:	2300      	movs	r3, #0
 801188e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011890:	2300      	movs	r3, #0
 8011892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801189a:	78fa      	ldrb	r2, [r7, #3]
 801189c:	4611      	mov	r1, r2
 801189e:	4618      	mov	r0, r3
 80118a0:	f7f4 f8a1 	bl	80059e6 <HAL_HCD_HC_Halt>
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f000 f8cc 	bl	8011a48 <USBH_Get_USB_Status>
 80118b0:	4603      	mov	r3, r0
 80118b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80118be:	b590      	push	{r4, r7, lr}
 80118c0:	b089      	sub	sp, #36	; 0x24
 80118c2:	af04      	add	r7, sp, #16
 80118c4:	6078      	str	r0, [r7, #4]
 80118c6:	4608      	mov	r0, r1
 80118c8:	4611      	mov	r1, r2
 80118ca:	461a      	mov	r2, r3
 80118cc:	4603      	mov	r3, r0
 80118ce:	70fb      	strb	r3, [r7, #3]
 80118d0:	460b      	mov	r3, r1
 80118d2:	70bb      	strb	r3, [r7, #2]
 80118d4:	4613      	mov	r3, r2
 80118d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118d8:	2300      	movs	r3, #0
 80118da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80118dc:	2300      	movs	r3, #0
 80118de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80118e6:	787c      	ldrb	r4, [r7, #1]
 80118e8:	78ba      	ldrb	r2, [r7, #2]
 80118ea:	78f9      	ldrb	r1, [r7, #3]
 80118ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80118f0:	9303      	str	r3, [sp, #12]
 80118f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80118f4:	9302      	str	r3, [sp, #8]
 80118f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	4623      	mov	r3, r4
 8011902:	f7f4 f893 	bl	8005a2c <HAL_HCD_HC_SubmitRequest>
 8011906:	4603      	mov	r3, r0
 8011908:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801190a:	7bfb      	ldrb	r3, [r7, #15]
 801190c:	4618      	mov	r0, r3
 801190e:	f000 f89b 	bl	8011a48 <USBH_Get_USB_Status>
 8011912:	4603      	mov	r3, r0
 8011914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011916:	7bbb      	ldrb	r3, [r7, #14]
}
 8011918:	4618      	mov	r0, r3
 801191a:	3714      	adds	r7, #20
 801191c:	46bd      	mov	sp, r7
 801191e:	bd90      	pop	{r4, r7, pc}

08011920 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	460b      	mov	r3, r1
 801192a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011932:	78fa      	ldrb	r2, [r7, #3]
 8011934:	4611      	mov	r1, r2
 8011936:	4618      	mov	r0, r3
 8011938:	f7f4 fb20 	bl	8005f7c <HAL_HCD_HC_GetURBState>
 801193c:	4603      	mov	r3, r0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
 801194e:	460b      	mov	r3, r1
 8011950:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8011958:	2b01      	cmp	r3, #1
 801195a:	d103      	bne.n	8011964 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801195c:	78fb      	ldrb	r3, [r7, #3]
 801195e:	4618      	mov	r0, r3
 8011960:	f000 f89e 	bl	8011aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011964:	20c8      	movs	r0, #200	; 0xc8
 8011966:	f7f3 f88b 	bl	8004a80 <HAL_Delay>
  return USBH_OK;
 801196a:	2300      	movs	r3, #0
}
 801196c:	4618      	mov	r0, r3
 801196e:	3708      	adds	r7, #8
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011974:	b480      	push	{r7}
 8011976:	b085      	sub	sp, #20
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	460b      	mov	r3, r1
 801197e:	70fb      	strb	r3, [r7, #3]
 8011980:	4613      	mov	r3, r2
 8011982:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801198a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	212c      	movs	r1, #44	; 0x2c
 8011992:	fb01 f303 	mul.w	r3, r1, r3
 8011996:	4413      	add	r3, r2
 8011998:	333b      	adds	r3, #59	; 0x3b
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d009      	beq.n	80119b4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80119a0:	78fb      	ldrb	r3, [r7, #3]
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	212c      	movs	r1, #44	; 0x2c
 80119a6:	fb01 f303 	mul.w	r3, r1, r3
 80119aa:	4413      	add	r3, r2
 80119ac:	3354      	adds	r3, #84	; 0x54
 80119ae:	78ba      	ldrb	r2, [r7, #2]
 80119b0:	701a      	strb	r2, [r3, #0]
 80119b2:	e008      	b.n	80119c6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80119b4:	78fb      	ldrb	r3, [r7, #3]
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	212c      	movs	r1, #44	; 0x2c
 80119ba:	fb01 f303 	mul.w	r3, r1, r3
 80119be:	4413      	add	r3, r2
 80119c0:	3355      	adds	r3, #85	; 0x55
 80119c2:	78ba      	ldrb	r2, [r7, #2]
 80119c4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80119c6:	2300      	movs	r3, #0
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3714      	adds	r7, #20
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bc80      	pop	{r7}
 80119d0:	4770      	bx	lr

080119d2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80119d2:	b480      	push	{r7}
 80119d4:	b085      	sub	sp, #20
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
 80119da:	460b      	mov	r3, r1
 80119dc:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80119e8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80119ea:	78fb      	ldrb	r3, [r7, #3]
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	212c      	movs	r1, #44	; 0x2c
 80119f0:	fb01 f303 	mul.w	r3, r1, r3
 80119f4:	4413      	add	r3, r2
 80119f6:	333b      	adds	r3, #59	; 0x3b
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d009      	beq.n	8011a12 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80119fe:	78fb      	ldrb	r3, [r7, #3]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	212c      	movs	r1, #44	; 0x2c
 8011a04:	fb01 f303 	mul.w	r3, r1, r3
 8011a08:	4413      	add	r3, r2
 8011a0a:	3354      	adds	r3, #84	; 0x54
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	73fb      	strb	r3, [r7, #15]
 8011a10:	e008      	b.n	8011a24 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011a12:	78fb      	ldrb	r3, [r7, #3]
 8011a14:	68ba      	ldr	r2, [r7, #8]
 8011a16:	212c      	movs	r1, #44	; 0x2c
 8011a18:	fb01 f303 	mul.w	r3, r1, r3
 8011a1c:	4413      	add	r3, r2
 8011a1e:	3355      	adds	r3, #85	; 0x55
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bc80      	pop	{r7}
 8011a2e:	4770      	bx	lr

08011a30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7f3 f821 	bl	8004a80 <HAL_Delay>
}
 8011a3e:	bf00      	nop
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
	...

08011a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	d817      	bhi.n	8011a8c <USBH_Get_USB_Status+0x44>
 8011a5c:	a201      	add	r2, pc, #4	; (adr r2, 8011a64 <USBH_Get_USB_Status+0x1c>)
 8011a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a62:	bf00      	nop
 8011a64:	08011a75 	.word	0x08011a75
 8011a68:	08011a7b 	.word	0x08011a7b
 8011a6c:	08011a81 	.word	0x08011a81
 8011a70:	08011a87 	.word	0x08011a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011a74:	2300      	movs	r3, #0
 8011a76:	73fb      	strb	r3, [r7, #15]
    break;
 8011a78:	e00b      	b.n	8011a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011a7a:	2302      	movs	r3, #2
 8011a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a7e:	e008      	b.n	8011a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011a80:	2301      	movs	r3, #1
 8011a82:	73fb      	strb	r3, [r7, #15]
    break;
 8011a84:	e005      	b.n	8011a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011a86:	2302      	movs	r3, #2
 8011a88:	73fb      	strb	r3, [r7, #15]
    break;
 8011a8a:	e002      	b.n	8011a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a90:	bf00      	nop
  }
  return usb_status;
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3714      	adds	r7, #20
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bc80      	pop	{r7}
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop

08011aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011aaa:	79fb      	ldrb	r3, [r7, #7]
 8011aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d102      	bne.n	8011aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	73fb      	strb	r3, [r7, #15]
 8011ab8:	e001      	b.n	8011abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011aba:	2301      	movs	r3, #1
 8011abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 8011abe:	7bfb      	ldrb	r3, [r7, #15]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	2104      	movs	r1, #4
 8011ac4:	4803      	ldr	r0, [pc, #12]	; (8011ad4 <MX_DriverVbusFS+0x34>)
 8011ac6:	f7f3 fe6c 	bl	80057a2 <HAL_GPIO_WritePin>
}
 8011aca:	bf00      	nop
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	40020800 	.word	0x40020800

08011ad8 <__errno>:
 8011ad8:	4b01      	ldr	r3, [pc, #4]	; (8011ae0 <__errno+0x8>)
 8011ada:	6818      	ldr	r0, [r3, #0]
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	20000248 	.word	0x20000248

08011ae4 <__libc_init_array>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	2600      	movs	r6, #0
 8011ae8:	4d0c      	ldr	r5, [pc, #48]	; (8011b1c <__libc_init_array+0x38>)
 8011aea:	4c0d      	ldr	r4, [pc, #52]	; (8011b20 <__libc_init_array+0x3c>)
 8011aec:	1b64      	subs	r4, r4, r5
 8011aee:	10a4      	asrs	r4, r4, #2
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	d109      	bne.n	8011b08 <__libc_init_array+0x24>
 8011af4:	f004 fc52 	bl	801639c <_init>
 8011af8:	2600      	movs	r6, #0
 8011afa:	4d0a      	ldr	r5, [pc, #40]	; (8011b24 <__libc_init_array+0x40>)
 8011afc:	4c0a      	ldr	r4, [pc, #40]	; (8011b28 <__libc_init_array+0x44>)
 8011afe:	1b64      	subs	r4, r4, r5
 8011b00:	10a4      	asrs	r4, r4, #2
 8011b02:	42a6      	cmp	r6, r4
 8011b04:	d105      	bne.n	8011b12 <__libc_init_array+0x2e>
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0c:	4798      	blx	r3
 8011b0e:	3601      	adds	r6, #1
 8011b10:	e7ee      	b.n	8011af0 <__libc_init_array+0xc>
 8011b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b16:	4798      	blx	r3
 8011b18:	3601      	adds	r6, #1
 8011b1a:	e7f2      	b.n	8011b02 <__libc_init_array+0x1e>
 8011b1c:	08016efc 	.word	0x08016efc
 8011b20:	08016efc 	.word	0x08016efc
 8011b24:	08016efc 	.word	0x08016efc
 8011b28:	08016f00 	.word	0x08016f00

08011b2c <malloc>:
 8011b2c:	4b02      	ldr	r3, [pc, #8]	; (8011b38 <malloc+0xc>)
 8011b2e:	4601      	mov	r1, r0
 8011b30:	6818      	ldr	r0, [r3, #0]
 8011b32:	f000 b86d 	b.w	8011c10 <_malloc_r>
 8011b36:	bf00      	nop
 8011b38:	20000248 	.word	0x20000248

08011b3c <free>:
 8011b3c:	4b02      	ldr	r3, [pc, #8]	; (8011b48 <free+0xc>)
 8011b3e:	4601      	mov	r1, r0
 8011b40:	6818      	ldr	r0, [r3, #0]
 8011b42:	f000 b819 	b.w	8011b78 <_free_r>
 8011b46:	bf00      	nop
 8011b48:	20000248 	.word	0x20000248

08011b4c <memcpy>:
 8011b4c:	440a      	add	r2, r1
 8011b4e:	4291      	cmp	r1, r2
 8011b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b54:	d100      	bne.n	8011b58 <memcpy+0xc>
 8011b56:	4770      	bx	lr
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b5e:	4291      	cmp	r1, r2
 8011b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b64:	d1f9      	bne.n	8011b5a <memcpy+0xe>
 8011b66:	bd10      	pop	{r4, pc}

08011b68 <memset>:
 8011b68:	4603      	mov	r3, r0
 8011b6a:	4402      	add	r2, r0
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d100      	bne.n	8011b72 <memset+0xa>
 8011b70:	4770      	bx	lr
 8011b72:	f803 1b01 	strb.w	r1, [r3], #1
 8011b76:	e7f9      	b.n	8011b6c <memset+0x4>

08011b78 <_free_r>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	4605      	mov	r5, r0
 8011b7c:	2900      	cmp	r1, #0
 8011b7e:	d043      	beq.n	8011c08 <_free_r+0x90>
 8011b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b84:	1f0c      	subs	r4, r1, #4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	bfb8      	it	lt
 8011b8a:	18e4      	addlt	r4, r4, r3
 8011b8c:	f003 f80c 	bl	8014ba8 <__malloc_lock>
 8011b90:	4a1e      	ldr	r2, [pc, #120]	; (8011c0c <_free_r+0x94>)
 8011b92:	6813      	ldr	r3, [r2, #0]
 8011b94:	4610      	mov	r0, r2
 8011b96:	b933      	cbnz	r3, 8011ba6 <_free_r+0x2e>
 8011b98:	6063      	str	r3, [r4, #4]
 8011b9a:	6014      	str	r4, [r2, #0]
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ba2:	f003 b807 	b.w	8014bb4 <__malloc_unlock>
 8011ba6:	42a3      	cmp	r3, r4
 8011ba8:	d90a      	bls.n	8011bc0 <_free_r+0x48>
 8011baa:	6821      	ldr	r1, [r4, #0]
 8011bac:	1862      	adds	r2, r4, r1
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	bf01      	itttt	eq
 8011bb2:	681a      	ldreq	r2, [r3, #0]
 8011bb4:	685b      	ldreq	r3, [r3, #4]
 8011bb6:	1852      	addeq	r2, r2, r1
 8011bb8:	6022      	streq	r2, [r4, #0]
 8011bba:	6063      	str	r3, [r4, #4]
 8011bbc:	6004      	str	r4, [r0, #0]
 8011bbe:	e7ed      	b.n	8011b9c <_free_r+0x24>
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	b10b      	cbz	r3, 8011bca <_free_r+0x52>
 8011bc6:	42a3      	cmp	r3, r4
 8011bc8:	d9fa      	bls.n	8011bc0 <_free_r+0x48>
 8011bca:	6811      	ldr	r1, [r2, #0]
 8011bcc:	1850      	adds	r0, r2, r1
 8011bce:	42a0      	cmp	r0, r4
 8011bd0:	d10b      	bne.n	8011bea <_free_r+0x72>
 8011bd2:	6820      	ldr	r0, [r4, #0]
 8011bd4:	4401      	add	r1, r0
 8011bd6:	1850      	adds	r0, r2, r1
 8011bd8:	4283      	cmp	r3, r0
 8011bda:	6011      	str	r1, [r2, #0]
 8011bdc:	d1de      	bne.n	8011b9c <_free_r+0x24>
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	4401      	add	r1, r0
 8011be4:	6011      	str	r1, [r2, #0]
 8011be6:	6053      	str	r3, [r2, #4]
 8011be8:	e7d8      	b.n	8011b9c <_free_r+0x24>
 8011bea:	d902      	bls.n	8011bf2 <_free_r+0x7a>
 8011bec:	230c      	movs	r3, #12
 8011bee:	602b      	str	r3, [r5, #0]
 8011bf0:	e7d4      	b.n	8011b9c <_free_r+0x24>
 8011bf2:	6820      	ldr	r0, [r4, #0]
 8011bf4:	1821      	adds	r1, r4, r0
 8011bf6:	428b      	cmp	r3, r1
 8011bf8:	bf01      	itttt	eq
 8011bfa:	6819      	ldreq	r1, [r3, #0]
 8011bfc:	685b      	ldreq	r3, [r3, #4]
 8011bfe:	1809      	addeq	r1, r1, r0
 8011c00:	6021      	streq	r1, [r4, #0]
 8011c02:	6063      	str	r3, [r4, #4]
 8011c04:	6054      	str	r4, [r2, #4]
 8011c06:	e7c9      	b.n	8011b9c <_free_r+0x24>
 8011c08:	bd38      	pop	{r3, r4, r5, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20005800 	.word	0x20005800

08011c10 <_malloc_r>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	1ccd      	adds	r5, r1, #3
 8011c14:	f025 0503 	bic.w	r5, r5, #3
 8011c18:	3508      	adds	r5, #8
 8011c1a:	2d0c      	cmp	r5, #12
 8011c1c:	bf38      	it	cc
 8011c1e:	250c      	movcc	r5, #12
 8011c20:	2d00      	cmp	r5, #0
 8011c22:	4606      	mov	r6, r0
 8011c24:	db01      	blt.n	8011c2a <_malloc_r+0x1a>
 8011c26:	42a9      	cmp	r1, r5
 8011c28:	d903      	bls.n	8011c32 <_malloc_r+0x22>
 8011c2a:	230c      	movs	r3, #12
 8011c2c:	6033      	str	r3, [r6, #0]
 8011c2e:	2000      	movs	r0, #0
 8011c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c32:	f002 ffb9 	bl	8014ba8 <__malloc_lock>
 8011c36:	4921      	ldr	r1, [pc, #132]	; (8011cbc <_malloc_r+0xac>)
 8011c38:	680a      	ldr	r2, [r1, #0]
 8011c3a:	4614      	mov	r4, r2
 8011c3c:	b99c      	cbnz	r4, 8011c66 <_malloc_r+0x56>
 8011c3e:	4f20      	ldr	r7, [pc, #128]	; (8011cc0 <_malloc_r+0xb0>)
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	b923      	cbnz	r3, 8011c4e <_malloc_r+0x3e>
 8011c44:	4621      	mov	r1, r4
 8011c46:	4630      	mov	r0, r6
 8011c48:	f000 feae 	bl	80129a8 <_sbrk_r>
 8011c4c:	6038      	str	r0, [r7, #0]
 8011c4e:	4629      	mov	r1, r5
 8011c50:	4630      	mov	r0, r6
 8011c52:	f000 fea9 	bl	80129a8 <_sbrk_r>
 8011c56:	1c43      	adds	r3, r0, #1
 8011c58:	d123      	bne.n	8011ca2 <_malloc_r+0x92>
 8011c5a:	230c      	movs	r3, #12
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	6033      	str	r3, [r6, #0]
 8011c60:	f002 ffa8 	bl	8014bb4 <__malloc_unlock>
 8011c64:	e7e3      	b.n	8011c2e <_malloc_r+0x1e>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	1b5b      	subs	r3, r3, r5
 8011c6a:	d417      	bmi.n	8011c9c <_malloc_r+0x8c>
 8011c6c:	2b0b      	cmp	r3, #11
 8011c6e:	d903      	bls.n	8011c78 <_malloc_r+0x68>
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	441c      	add	r4, r3
 8011c74:	6025      	str	r5, [r4, #0]
 8011c76:	e004      	b.n	8011c82 <_malloc_r+0x72>
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	42a2      	cmp	r2, r4
 8011c7c:	bf0c      	ite	eq
 8011c7e:	600b      	streq	r3, [r1, #0]
 8011c80:	6053      	strne	r3, [r2, #4]
 8011c82:	4630      	mov	r0, r6
 8011c84:	f002 ff96 	bl	8014bb4 <__malloc_unlock>
 8011c88:	f104 000b 	add.w	r0, r4, #11
 8011c8c:	1d23      	adds	r3, r4, #4
 8011c8e:	f020 0007 	bic.w	r0, r0, #7
 8011c92:	1ac2      	subs	r2, r0, r3
 8011c94:	d0cc      	beq.n	8011c30 <_malloc_r+0x20>
 8011c96:	1a1b      	subs	r3, r3, r0
 8011c98:	50a3      	str	r3, [r4, r2]
 8011c9a:	e7c9      	b.n	8011c30 <_malloc_r+0x20>
 8011c9c:	4622      	mov	r2, r4
 8011c9e:	6864      	ldr	r4, [r4, #4]
 8011ca0:	e7cc      	b.n	8011c3c <_malloc_r+0x2c>
 8011ca2:	1cc4      	adds	r4, r0, #3
 8011ca4:	f024 0403 	bic.w	r4, r4, #3
 8011ca8:	42a0      	cmp	r0, r4
 8011caa:	d0e3      	beq.n	8011c74 <_malloc_r+0x64>
 8011cac:	1a21      	subs	r1, r4, r0
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f000 fe7a 	bl	80129a8 <_sbrk_r>
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	d1dd      	bne.n	8011c74 <_malloc_r+0x64>
 8011cb8:	e7cf      	b.n	8011c5a <_malloc_r+0x4a>
 8011cba:	bf00      	nop
 8011cbc:	20005800 	.word	0x20005800
 8011cc0:	20005804 	.word	0x20005804

08011cc4 <__cvt>:
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cca:	461f      	mov	r7, r3
 8011ccc:	bfbb      	ittet	lt
 8011cce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011cd2:	461f      	movlt	r7, r3
 8011cd4:	2300      	movge	r3, #0
 8011cd6:	232d      	movlt	r3, #45	; 0x2d
 8011cd8:	b088      	sub	sp, #32
 8011cda:	4614      	mov	r4, r2
 8011cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011ce0:	7013      	strb	r3, [r2, #0]
 8011ce2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ce4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011ce8:	f023 0820 	bic.w	r8, r3, #32
 8011cec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011cf0:	d005      	beq.n	8011cfe <__cvt+0x3a>
 8011cf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011cf6:	d100      	bne.n	8011cfa <__cvt+0x36>
 8011cf8:	3501      	adds	r5, #1
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e000      	b.n	8011d00 <__cvt+0x3c>
 8011cfe:	2303      	movs	r3, #3
 8011d00:	aa07      	add	r2, sp, #28
 8011d02:	9204      	str	r2, [sp, #16]
 8011d04:	aa06      	add	r2, sp, #24
 8011d06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011d0a:	e9cd 3500 	strd	r3, r5, [sp]
 8011d0e:	4622      	mov	r2, r4
 8011d10:	463b      	mov	r3, r7
 8011d12:	f001 fdd1 	bl	80138b8 <_dtoa_r>
 8011d16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	d102      	bne.n	8011d24 <__cvt+0x60>
 8011d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d20:	07db      	lsls	r3, r3, #31
 8011d22:	d522      	bpl.n	8011d6a <__cvt+0xa6>
 8011d24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011d28:	eb06 0905 	add.w	r9, r6, r5
 8011d2c:	d110      	bne.n	8011d50 <__cvt+0x8c>
 8011d2e:	7833      	ldrb	r3, [r6, #0]
 8011d30:	2b30      	cmp	r3, #48	; 0x30
 8011d32:	d10a      	bne.n	8011d4a <__cvt+0x86>
 8011d34:	2200      	movs	r2, #0
 8011d36:	2300      	movs	r3, #0
 8011d38:	4620      	mov	r0, r4
 8011d3a:	4639      	mov	r1, r7
 8011d3c:	f7ee fe7a 	bl	8000a34 <__aeabi_dcmpeq>
 8011d40:	b918      	cbnz	r0, 8011d4a <__cvt+0x86>
 8011d42:	f1c5 0501 	rsb	r5, r5, #1
 8011d46:	f8ca 5000 	str.w	r5, [sl]
 8011d4a:	f8da 3000 	ldr.w	r3, [sl]
 8011d4e:	4499      	add	r9, r3
 8011d50:	2200      	movs	r2, #0
 8011d52:	2300      	movs	r3, #0
 8011d54:	4620      	mov	r0, r4
 8011d56:	4639      	mov	r1, r7
 8011d58:	f7ee fe6c 	bl	8000a34 <__aeabi_dcmpeq>
 8011d5c:	b108      	cbz	r0, 8011d62 <__cvt+0x9e>
 8011d5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011d62:	2230      	movs	r2, #48	; 0x30
 8011d64:	9b07      	ldr	r3, [sp, #28]
 8011d66:	454b      	cmp	r3, r9
 8011d68:	d307      	bcc.n	8011d7a <__cvt+0xb6>
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	9b07      	ldr	r3, [sp, #28]
 8011d6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d70:	1b9b      	subs	r3, r3, r6
 8011d72:	6013      	str	r3, [r2, #0]
 8011d74:	b008      	add	sp, #32
 8011d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d7a:	1c59      	adds	r1, r3, #1
 8011d7c:	9107      	str	r1, [sp, #28]
 8011d7e:	701a      	strb	r2, [r3, #0]
 8011d80:	e7f0      	b.n	8011d64 <__cvt+0xa0>

08011d82 <__exponent>:
 8011d82:	4603      	mov	r3, r0
 8011d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d86:	2900      	cmp	r1, #0
 8011d88:	f803 2b02 	strb.w	r2, [r3], #2
 8011d8c:	bfb6      	itet	lt
 8011d8e:	222d      	movlt	r2, #45	; 0x2d
 8011d90:	222b      	movge	r2, #43	; 0x2b
 8011d92:	4249      	neglt	r1, r1
 8011d94:	2909      	cmp	r1, #9
 8011d96:	7042      	strb	r2, [r0, #1]
 8011d98:	dd2b      	ble.n	8011df2 <__exponent+0x70>
 8011d9a:	f10d 0407 	add.w	r4, sp, #7
 8011d9e:	46a4      	mov	ip, r4
 8011da0:	270a      	movs	r7, #10
 8011da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8011da6:	460a      	mov	r2, r1
 8011da8:	46a6      	mov	lr, r4
 8011daa:	fb07 1516 	mls	r5, r7, r6, r1
 8011dae:	2a63      	cmp	r2, #99	; 0x63
 8011db0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011db4:	4631      	mov	r1, r6
 8011db6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011dba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011dbe:	dcf0      	bgt.n	8011da2 <__exponent+0x20>
 8011dc0:	3130      	adds	r1, #48	; 0x30
 8011dc2:	f1ae 0502 	sub.w	r5, lr, #2
 8011dc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011dca:	4629      	mov	r1, r5
 8011dcc:	1c44      	adds	r4, r0, #1
 8011dce:	4561      	cmp	r1, ip
 8011dd0:	d30a      	bcc.n	8011de8 <__exponent+0x66>
 8011dd2:	f10d 0209 	add.w	r2, sp, #9
 8011dd6:	eba2 020e 	sub.w	r2, r2, lr
 8011dda:	4565      	cmp	r5, ip
 8011ddc:	bf88      	it	hi
 8011dde:	2200      	movhi	r2, #0
 8011de0:	4413      	add	r3, r2
 8011de2:	1a18      	subs	r0, r3, r0
 8011de4:	b003      	add	sp, #12
 8011de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011df0:	e7ed      	b.n	8011dce <__exponent+0x4c>
 8011df2:	2330      	movs	r3, #48	; 0x30
 8011df4:	3130      	adds	r1, #48	; 0x30
 8011df6:	7083      	strb	r3, [r0, #2]
 8011df8:	70c1      	strb	r1, [r0, #3]
 8011dfa:	1d03      	adds	r3, r0, #4
 8011dfc:	e7f1      	b.n	8011de2 <__exponent+0x60>
	...

08011e00 <_printf_float>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	b091      	sub	sp, #68	; 0x44
 8011e06:	460c      	mov	r4, r1
 8011e08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011e0c:	4616      	mov	r6, r2
 8011e0e:	461f      	mov	r7, r3
 8011e10:	4605      	mov	r5, r0
 8011e12:	f002 fea5 	bl	8014b60 <_localeconv_r>
 8011e16:	6803      	ldr	r3, [r0, #0]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e1c:	f7ee f9de 	bl	80001dc <strlen>
 8011e20:	2300      	movs	r3, #0
 8011e22:	930e      	str	r3, [sp, #56]	; 0x38
 8011e24:	f8d8 3000 	ldr.w	r3, [r8]
 8011e28:	900a      	str	r0, [sp, #40]	; 0x28
 8011e2a:	3307      	adds	r3, #7
 8011e2c:	f023 0307 	bic.w	r3, r3, #7
 8011e30:	f103 0208 	add.w	r2, r3, #8
 8011e34:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011e38:	f8d4 b000 	ldr.w	fp, [r4]
 8011e3c:	f8c8 2000 	str.w	r2, [r8]
 8011e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011e48:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011e4c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e52:	f04f 32ff 	mov.w	r2, #4294967295
 8011e56:	4640      	mov	r0, r8
 8011e58:	4b9c      	ldr	r3, [pc, #624]	; (80120cc <_printf_float+0x2cc>)
 8011e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e5c:	f7ee fe1c 	bl	8000a98 <__aeabi_dcmpun>
 8011e60:	bb70      	cbnz	r0, 8011ec0 <_printf_float+0xc0>
 8011e62:	f04f 32ff 	mov.w	r2, #4294967295
 8011e66:	4640      	mov	r0, r8
 8011e68:	4b98      	ldr	r3, [pc, #608]	; (80120cc <_printf_float+0x2cc>)
 8011e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e6c:	f7ee fdf6 	bl	8000a5c <__aeabi_dcmple>
 8011e70:	bb30      	cbnz	r0, 8011ec0 <_printf_float+0xc0>
 8011e72:	2200      	movs	r2, #0
 8011e74:	2300      	movs	r3, #0
 8011e76:	4640      	mov	r0, r8
 8011e78:	4651      	mov	r1, sl
 8011e7a:	f7ee fde5 	bl	8000a48 <__aeabi_dcmplt>
 8011e7e:	b110      	cbz	r0, 8011e86 <_printf_float+0x86>
 8011e80:	232d      	movs	r3, #45	; 0x2d
 8011e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e86:	4b92      	ldr	r3, [pc, #584]	; (80120d0 <_printf_float+0x2d0>)
 8011e88:	4892      	ldr	r0, [pc, #584]	; (80120d4 <_printf_float+0x2d4>)
 8011e8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011e8e:	bf94      	ite	ls
 8011e90:	4698      	movls	r8, r3
 8011e92:	4680      	movhi	r8, r0
 8011e94:	2303      	movs	r3, #3
 8011e96:	f04f 0a00 	mov.w	sl, #0
 8011e9a:	6123      	str	r3, [r4, #16]
 8011e9c:	f02b 0304 	bic.w	r3, fp, #4
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	4633      	mov	r3, r6
 8011ea4:	4621      	mov	r1, r4
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	9700      	str	r7, [sp, #0]
 8011eaa:	aa0f      	add	r2, sp, #60	; 0x3c
 8011eac:	f000 f9d4 	bl	8012258 <_printf_common>
 8011eb0:	3001      	adds	r0, #1
 8011eb2:	f040 8090 	bne.w	8011fd6 <_printf_float+0x1d6>
 8011eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eba:	b011      	add	sp, #68	; 0x44
 8011ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec0:	4642      	mov	r2, r8
 8011ec2:	4653      	mov	r3, sl
 8011ec4:	4640      	mov	r0, r8
 8011ec6:	4651      	mov	r1, sl
 8011ec8:	f7ee fde6 	bl	8000a98 <__aeabi_dcmpun>
 8011ecc:	b148      	cbz	r0, 8011ee2 <_printf_float+0xe2>
 8011ece:	f1ba 0f00 	cmp.w	sl, #0
 8011ed2:	bfb8      	it	lt
 8011ed4:	232d      	movlt	r3, #45	; 0x2d
 8011ed6:	4880      	ldr	r0, [pc, #512]	; (80120d8 <_printf_float+0x2d8>)
 8011ed8:	bfb8      	it	lt
 8011eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011ede:	4b7f      	ldr	r3, [pc, #508]	; (80120dc <_printf_float+0x2dc>)
 8011ee0:	e7d3      	b.n	8011e8a <_printf_float+0x8a>
 8011ee2:	6863      	ldr	r3, [r4, #4]
 8011ee4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011ee8:	1c5a      	adds	r2, r3, #1
 8011eea:	d142      	bne.n	8011f72 <_printf_float+0x172>
 8011eec:	2306      	movs	r3, #6
 8011eee:	6063      	str	r3, [r4, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	9206      	str	r2, [sp, #24]
 8011ef4:	aa0e      	add	r2, sp, #56	; 0x38
 8011ef6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011efa:	aa0d      	add	r2, sp, #52	; 0x34
 8011efc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011f00:	9203      	str	r2, [sp, #12]
 8011f02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011f06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011f0a:	6023      	str	r3, [r4, #0]
 8011f0c:	6863      	ldr	r3, [r4, #4]
 8011f0e:	4642      	mov	r2, r8
 8011f10:	9300      	str	r3, [sp, #0]
 8011f12:	4628      	mov	r0, r5
 8011f14:	4653      	mov	r3, sl
 8011f16:	910b      	str	r1, [sp, #44]	; 0x2c
 8011f18:	f7ff fed4 	bl	8011cc4 <__cvt>
 8011f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f1e:	4680      	mov	r8, r0
 8011f20:	2947      	cmp	r1, #71	; 0x47
 8011f22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f24:	d108      	bne.n	8011f38 <_printf_float+0x138>
 8011f26:	1cc8      	adds	r0, r1, #3
 8011f28:	db02      	blt.n	8011f30 <_printf_float+0x130>
 8011f2a:	6863      	ldr	r3, [r4, #4]
 8011f2c:	4299      	cmp	r1, r3
 8011f2e:	dd40      	ble.n	8011fb2 <_printf_float+0x1b2>
 8011f30:	f1a9 0902 	sub.w	r9, r9, #2
 8011f34:	fa5f f989 	uxtb.w	r9, r9
 8011f38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f3c:	d81f      	bhi.n	8011f7e <_printf_float+0x17e>
 8011f3e:	464a      	mov	r2, r9
 8011f40:	3901      	subs	r1, #1
 8011f42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f46:	910d      	str	r1, [sp, #52]	; 0x34
 8011f48:	f7ff ff1b 	bl	8011d82 <__exponent>
 8011f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f4e:	4682      	mov	sl, r0
 8011f50:	1813      	adds	r3, r2, r0
 8011f52:	2a01      	cmp	r2, #1
 8011f54:	6123      	str	r3, [r4, #16]
 8011f56:	dc02      	bgt.n	8011f5e <_printf_float+0x15e>
 8011f58:	6822      	ldr	r2, [r4, #0]
 8011f5a:	07d2      	lsls	r2, r2, #31
 8011f5c:	d501      	bpl.n	8011f62 <_printf_float+0x162>
 8011f5e:	3301      	adds	r3, #1
 8011f60:	6123      	str	r3, [r4, #16]
 8011f62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d09b      	beq.n	8011ea2 <_printf_float+0xa2>
 8011f6a:	232d      	movs	r3, #45	; 0x2d
 8011f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f70:	e797      	b.n	8011ea2 <_printf_float+0xa2>
 8011f72:	2947      	cmp	r1, #71	; 0x47
 8011f74:	d1bc      	bne.n	8011ef0 <_printf_float+0xf0>
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1ba      	bne.n	8011ef0 <_printf_float+0xf0>
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	e7b7      	b.n	8011eee <_printf_float+0xee>
 8011f7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011f82:	d118      	bne.n	8011fb6 <_printf_float+0x1b6>
 8011f84:	2900      	cmp	r1, #0
 8011f86:	6863      	ldr	r3, [r4, #4]
 8011f88:	dd0b      	ble.n	8011fa2 <_printf_float+0x1a2>
 8011f8a:	6121      	str	r1, [r4, #16]
 8011f8c:	b913      	cbnz	r3, 8011f94 <_printf_float+0x194>
 8011f8e:	6822      	ldr	r2, [r4, #0]
 8011f90:	07d0      	lsls	r0, r2, #31
 8011f92:	d502      	bpl.n	8011f9a <_printf_float+0x19a>
 8011f94:	3301      	adds	r3, #1
 8011f96:	440b      	add	r3, r1
 8011f98:	6123      	str	r3, [r4, #16]
 8011f9a:	f04f 0a00 	mov.w	sl, #0
 8011f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011fa0:	e7df      	b.n	8011f62 <_printf_float+0x162>
 8011fa2:	b913      	cbnz	r3, 8011faa <_printf_float+0x1aa>
 8011fa4:	6822      	ldr	r2, [r4, #0]
 8011fa6:	07d2      	lsls	r2, r2, #31
 8011fa8:	d501      	bpl.n	8011fae <_printf_float+0x1ae>
 8011faa:	3302      	adds	r3, #2
 8011fac:	e7f4      	b.n	8011f98 <_printf_float+0x198>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e7f2      	b.n	8011f98 <_printf_float+0x198>
 8011fb2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fb8:	4299      	cmp	r1, r3
 8011fba:	db05      	blt.n	8011fc8 <_printf_float+0x1c8>
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	6121      	str	r1, [r4, #16]
 8011fc0:	07d8      	lsls	r0, r3, #31
 8011fc2:	d5ea      	bpl.n	8011f9a <_printf_float+0x19a>
 8011fc4:	1c4b      	adds	r3, r1, #1
 8011fc6:	e7e7      	b.n	8011f98 <_printf_float+0x198>
 8011fc8:	2900      	cmp	r1, #0
 8011fca:	bfcc      	ite	gt
 8011fcc:	2201      	movgt	r2, #1
 8011fce:	f1c1 0202 	rsble	r2, r1, #2
 8011fd2:	4413      	add	r3, r2
 8011fd4:	e7e0      	b.n	8011f98 <_printf_float+0x198>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	055a      	lsls	r2, r3, #21
 8011fda:	d407      	bmi.n	8011fec <_printf_float+0x1ec>
 8011fdc:	6923      	ldr	r3, [r4, #16]
 8011fde:	4642      	mov	r2, r8
 8011fe0:	4631      	mov	r1, r6
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	47b8      	blx	r7
 8011fe6:	3001      	adds	r0, #1
 8011fe8:	d12b      	bne.n	8012042 <_printf_float+0x242>
 8011fea:	e764      	b.n	8011eb6 <_printf_float+0xb6>
 8011fec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011ff0:	f240 80dd 	bls.w	80121ae <_printf_float+0x3ae>
 8011ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f7ee fd1a 	bl	8000a34 <__aeabi_dcmpeq>
 8012000:	2800      	cmp	r0, #0
 8012002:	d033      	beq.n	801206c <_printf_float+0x26c>
 8012004:	2301      	movs	r3, #1
 8012006:	4631      	mov	r1, r6
 8012008:	4628      	mov	r0, r5
 801200a:	4a35      	ldr	r2, [pc, #212]	; (80120e0 <_printf_float+0x2e0>)
 801200c:	47b8      	blx	r7
 801200e:	3001      	adds	r0, #1
 8012010:	f43f af51 	beq.w	8011eb6 <_printf_float+0xb6>
 8012014:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012018:	429a      	cmp	r2, r3
 801201a:	db02      	blt.n	8012022 <_printf_float+0x222>
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	07d8      	lsls	r0, r3, #31
 8012020:	d50f      	bpl.n	8012042 <_printf_float+0x242>
 8012022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	f43f af42 	beq.w	8011eb6 <_printf_float+0xb6>
 8012032:	f04f 0800 	mov.w	r8, #0
 8012036:	f104 091a 	add.w	r9, r4, #26
 801203a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801203c:	3b01      	subs	r3, #1
 801203e:	4543      	cmp	r3, r8
 8012040:	dc09      	bgt.n	8012056 <_printf_float+0x256>
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	079b      	lsls	r3, r3, #30
 8012046:	f100 8102 	bmi.w	801224e <_printf_float+0x44e>
 801204a:	68e0      	ldr	r0, [r4, #12]
 801204c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801204e:	4298      	cmp	r0, r3
 8012050:	bfb8      	it	lt
 8012052:	4618      	movlt	r0, r3
 8012054:	e731      	b.n	8011eba <_printf_float+0xba>
 8012056:	2301      	movs	r3, #1
 8012058:	464a      	mov	r2, r9
 801205a:	4631      	mov	r1, r6
 801205c:	4628      	mov	r0, r5
 801205e:	47b8      	blx	r7
 8012060:	3001      	adds	r0, #1
 8012062:	f43f af28 	beq.w	8011eb6 <_printf_float+0xb6>
 8012066:	f108 0801 	add.w	r8, r8, #1
 801206a:	e7e6      	b.n	801203a <_printf_float+0x23a>
 801206c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206e:	2b00      	cmp	r3, #0
 8012070:	dc38      	bgt.n	80120e4 <_printf_float+0x2e4>
 8012072:	2301      	movs	r3, #1
 8012074:	4631      	mov	r1, r6
 8012076:	4628      	mov	r0, r5
 8012078:	4a19      	ldr	r2, [pc, #100]	; (80120e0 <_printf_float+0x2e0>)
 801207a:	47b8      	blx	r7
 801207c:	3001      	adds	r0, #1
 801207e:	f43f af1a 	beq.w	8011eb6 <_printf_float+0xb6>
 8012082:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012086:	4313      	orrs	r3, r2
 8012088:	d102      	bne.n	8012090 <_printf_float+0x290>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	07d9      	lsls	r1, r3, #31
 801208e:	d5d8      	bpl.n	8012042 <_printf_float+0x242>
 8012090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012094:	4631      	mov	r1, r6
 8012096:	4628      	mov	r0, r5
 8012098:	47b8      	blx	r7
 801209a:	3001      	adds	r0, #1
 801209c:	f43f af0b 	beq.w	8011eb6 <_printf_float+0xb6>
 80120a0:	f04f 0900 	mov.w	r9, #0
 80120a4:	f104 0a1a 	add.w	sl, r4, #26
 80120a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120aa:	425b      	negs	r3, r3
 80120ac:	454b      	cmp	r3, r9
 80120ae:	dc01      	bgt.n	80120b4 <_printf_float+0x2b4>
 80120b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120b2:	e794      	b.n	8011fde <_printf_float+0x1de>
 80120b4:	2301      	movs	r3, #1
 80120b6:	4652      	mov	r2, sl
 80120b8:	4631      	mov	r1, r6
 80120ba:	4628      	mov	r0, r5
 80120bc:	47b8      	blx	r7
 80120be:	3001      	adds	r0, #1
 80120c0:	f43f aef9 	beq.w	8011eb6 <_printf_float+0xb6>
 80120c4:	f109 0901 	add.w	r9, r9, #1
 80120c8:	e7ee      	b.n	80120a8 <_printf_float+0x2a8>
 80120ca:	bf00      	nop
 80120cc:	7fefffff 	.word	0x7fefffff
 80120d0:	08016a44 	.word	0x08016a44
 80120d4:	08016a48 	.word	0x08016a48
 80120d8:	08016a50 	.word	0x08016a50
 80120dc:	08016a4c 	.word	0x08016a4c
 80120e0:	08016a54 	.word	0x08016a54
 80120e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80120e8:	429a      	cmp	r2, r3
 80120ea:	bfa8      	it	ge
 80120ec:	461a      	movge	r2, r3
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	4691      	mov	r9, r2
 80120f2:	dc37      	bgt.n	8012164 <_printf_float+0x364>
 80120f4:	f04f 0b00 	mov.w	fp, #0
 80120f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120fc:	f104 021a 	add.w	r2, r4, #26
 8012100:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012104:	ebaa 0309 	sub.w	r3, sl, r9
 8012108:	455b      	cmp	r3, fp
 801210a:	dc33      	bgt.n	8012174 <_printf_float+0x374>
 801210c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012110:	429a      	cmp	r2, r3
 8012112:	db3b      	blt.n	801218c <_printf_float+0x38c>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	07da      	lsls	r2, r3, #31
 8012118:	d438      	bmi.n	801218c <_printf_float+0x38c>
 801211a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801211c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801211e:	eba2 030a 	sub.w	r3, r2, sl
 8012122:	eba2 0901 	sub.w	r9, r2, r1
 8012126:	4599      	cmp	r9, r3
 8012128:	bfa8      	it	ge
 801212a:	4699      	movge	r9, r3
 801212c:	f1b9 0f00 	cmp.w	r9, #0
 8012130:	dc34      	bgt.n	801219c <_printf_float+0x39c>
 8012132:	f04f 0800 	mov.w	r8, #0
 8012136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801213a:	f104 0a1a 	add.w	sl, r4, #26
 801213e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012142:	1a9b      	subs	r3, r3, r2
 8012144:	eba3 0309 	sub.w	r3, r3, r9
 8012148:	4543      	cmp	r3, r8
 801214a:	f77f af7a 	ble.w	8012042 <_printf_float+0x242>
 801214e:	2301      	movs	r3, #1
 8012150:	4652      	mov	r2, sl
 8012152:	4631      	mov	r1, r6
 8012154:	4628      	mov	r0, r5
 8012156:	47b8      	blx	r7
 8012158:	3001      	adds	r0, #1
 801215a:	f43f aeac 	beq.w	8011eb6 <_printf_float+0xb6>
 801215e:	f108 0801 	add.w	r8, r8, #1
 8012162:	e7ec      	b.n	801213e <_printf_float+0x33e>
 8012164:	4613      	mov	r3, r2
 8012166:	4631      	mov	r1, r6
 8012168:	4642      	mov	r2, r8
 801216a:	4628      	mov	r0, r5
 801216c:	47b8      	blx	r7
 801216e:	3001      	adds	r0, #1
 8012170:	d1c0      	bne.n	80120f4 <_printf_float+0x2f4>
 8012172:	e6a0      	b.n	8011eb6 <_printf_float+0xb6>
 8012174:	2301      	movs	r3, #1
 8012176:	4631      	mov	r1, r6
 8012178:	4628      	mov	r0, r5
 801217a:	920b      	str	r2, [sp, #44]	; 0x2c
 801217c:	47b8      	blx	r7
 801217e:	3001      	adds	r0, #1
 8012180:	f43f ae99 	beq.w	8011eb6 <_printf_float+0xb6>
 8012184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012186:	f10b 0b01 	add.w	fp, fp, #1
 801218a:	e7b9      	b.n	8012100 <_printf_float+0x300>
 801218c:	4631      	mov	r1, r6
 801218e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012192:	4628      	mov	r0, r5
 8012194:	47b8      	blx	r7
 8012196:	3001      	adds	r0, #1
 8012198:	d1bf      	bne.n	801211a <_printf_float+0x31a>
 801219a:	e68c      	b.n	8011eb6 <_printf_float+0xb6>
 801219c:	464b      	mov	r3, r9
 801219e:	4631      	mov	r1, r6
 80121a0:	4628      	mov	r0, r5
 80121a2:	eb08 020a 	add.w	r2, r8, sl
 80121a6:	47b8      	blx	r7
 80121a8:	3001      	adds	r0, #1
 80121aa:	d1c2      	bne.n	8012132 <_printf_float+0x332>
 80121ac:	e683      	b.n	8011eb6 <_printf_float+0xb6>
 80121ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121b0:	2a01      	cmp	r2, #1
 80121b2:	dc01      	bgt.n	80121b8 <_printf_float+0x3b8>
 80121b4:	07db      	lsls	r3, r3, #31
 80121b6:	d537      	bpl.n	8012228 <_printf_float+0x428>
 80121b8:	2301      	movs	r3, #1
 80121ba:	4642      	mov	r2, r8
 80121bc:	4631      	mov	r1, r6
 80121be:	4628      	mov	r0, r5
 80121c0:	47b8      	blx	r7
 80121c2:	3001      	adds	r0, #1
 80121c4:	f43f ae77 	beq.w	8011eb6 <_printf_float+0xb6>
 80121c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121cc:	4631      	mov	r1, r6
 80121ce:	4628      	mov	r0, r5
 80121d0:	47b8      	blx	r7
 80121d2:	3001      	adds	r0, #1
 80121d4:	f43f ae6f 	beq.w	8011eb6 <_printf_float+0xb6>
 80121d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80121dc:	2200      	movs	r2, #0
 80121de:	2300      	movs	r3, #0
 80121e0:	f7ee fc28 	bl	8000a34 <__aeabi_dcmpeq>
 80121e4:	b9d8      	cbnz	r0, 801221e <_printf_float+0x41e>
 80121e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121e8:	f108 0201 	add.w	r2, r8, #1
 80121ec:	3b01      	subs	r3, #1
 80121ee:	4631      	mov	r1, r6
 80121f0:	4628      	mov	r0, r5
 80121f2:	47b8      	blx	r7
 80121f4:	3001      	adds	r0, #1
 80121f6:	d10e      	bne.n	8012216 <_printf_float+0x416>
 80121f8:	e65d      	b.n	8011eb6 <_printf_float+0xb6>
 80121fa:	2301      	movs	r3, #1
 80121fc:	464a      	mov	r2, r9
 80121fe:	4631      	mov	r1, r6
 8012200:	4628      	mov	r0, r5
 8012202:	47b8      	blx	r7
 8012204:	3001      	adds	r0, #1
 8012206:	f43f ae56 	beq.w	8011eb6 <_printf_float+0xb6>
 801220a:	f108 0801 	add.w	r8, r8, #1
 801220e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012210:	3b01      	subs	r3, #1
 8012212:	4543      	cmp	r3, r8
 8012214:	dcf1      	bgt.n	80121fa <_printf_float+0x3fa>
 8012216:	4653      	mov	r3, sl
 8012218:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801221c:	e6e0      	b.n	8011fe0 <_printf_float+0x1e0>
 801221e:	f04f 0800 	mov.w	r8, #0
 8012222:	f104 091a 	add.w	r9, r4, #26
 8012226:	e7f2      	b.n	801220e <_printf_float+0x40e>
 8012228:	2301      	movs	r3, #1
 801222a:	4642      	mov	r2, r8
 801222c:	e7df      	b.n	80121ee <_printf_float+0x3ee>
 801222e:	2301      	movs	r3, #1
 8012230:	464a      	mov	r2, r9
 8012232:	4631      	mov	r1, r6
 8012234:	4628      	mov	r0, r5
 8012236:	47b8      	blx	r7
 8012238:	3001      	adds	r0, #1
 801223a:	f43f ae3c 	beq.w	8011eb6 <_printf_float+0xb6>
 801223e:	f108 0801 	add.w	r8, r8, #1
 8012242:	68e3      	ldr	r3, [r4, #12]
 8012244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012246:	1a5b      	subs	r3, r3, r1
 8012248:	4543      	cmp	r3, r8
 801224a:	dcf0      	bgt.n	801222e <_printf_float+0x42e>
 801224c:	e6fd      	b.n	801204a <_printf_float+0x24a>
 801224e:	f04f 0800 	mov.w	r8, #0
 8012252:	f104 0919 	add.w	r9, r4, #25
 8012256:	e7f4      	b.n	8012242 <_printf_float+0x442>

08012258 <_printf_common>:
 8012258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801225c:	4616      	mov	r6, r2
 801225e:	4699      	mov	r9, r3
 8012260:	688a      	ldr	r2, [r1, #8]
 8012262:	690b      	ldr	r3, [r1, #16]
 8012264:	4607      	mov	r7, r0
 8012266:	4293      	cmp	r3, r2
 8012268:	bfb8      	it	lt
 801226a:	4613      	movlt	r3, r2
 801226c:	6033      	str	r3, [r6, #0]
 801226e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012272:	460c      	mov	r4, r1
 8012274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012278:	b10a      	cbz	r2, 801227e <_printf_common+0x26>
 801227a:	3301      	adds	r3, #1
 801227c:	6033      	str	r3, [r6, #0]
 801227e:	6823      	ldr	r3, [r4, #0]
 8012280:	0699      	lsls	r1, r3, #26
 8012282:	bf42      	ittt	mi
 8012284:	6833      	ldrmi	r3, [r6, #0]
 8012286:	3302      	addmi	r3, #2
 8012288:	6033      	strmi	r3, [r6, #0]
 801228a:	6825      	ldr	r5, [r4, #0]
 801228c:	f015 0506 	ands.w	r5, r5, #6
 8012290:	d106      	bne.n	80122a0 <_printf_common+0x48>
 8012292:	f104 0a19 	add.w	sl, r4, #25
 8012296:	68e3      	ldr	r3, [r4, #12]
 8012298:	6832      	ldr	r2, [r6, #0]
 801229a:	1a9b      	subs	r3, r3, r2
 801229c:	42ab      	cmp	r3, r5
 801229e:	dc28      	bgt.n	80122f2 <_printf_common+0x9a>
 80122a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122a4:	1e13      	subs	r3, r2, #0
 80122a6:	6822      	ldr	r2, [r4, #0]
 80122a8:	bf18      	it	ne
 80122aa:	2301      	movne	r3, #1
 80122ac:	0692      	lsls	r2, r2, #26
 80122ae:	d42d      	bmi.n	801230c <_printf_common+0xb4>
 80122b0:	4649      	mov	r1, r9
 80122b2:	4638      	mov	r0, r7
 80122b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80122b8:	47c0      	blx	r8
 80122ba:	3001      	adds	r0, #1
 80122bc:	d020      	beq.n	8012300 <_printf_common+0xa8>
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	68e5      	ldr	r5, [r4, #12]
 80122c2:	f003 0306 	and.w	r3, r3, #6
 80122c6:	2b04      	cmp	r3, #4
 80122c8:	bf18      	it	ne
 80122ca:	2500      	movne	r5, #0
 80122cc:	6832      	ldr	r2, [r6, #0]
 80122ce:	f04f 0600 	mov.w	r6, #0
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	bf08      	it	eq
 80122d6:	1aad      	subeq	r5, r5, r2
 80122d8:	6922      	ldr	r2, [r4, #16]
 80122da:	bf08      	it	eq
 80122dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122e0:	4293      	cmp	r3, r2
 80122e2:	bfc4      	itt	gt
 80122e4:	1a9b      	subgt	r3, r3, r2
 80122e6:	18ed      	addgt	r5, r5, r3
 80122e8:	341a      	adds	r4, #26
 80122ea:	42b5      	cmp	r5, r6
 80122ec:	d11a      	bne.n	8012324 <_printf_common+0xcc>
 80122ee:	2000      	movs	r0, #0
 80122f0:	e008      	b.n	8012304 <_printf_common+0xac>
 80122f2:	2301      	movs	r3, #1
 80122f4:	4652      	mov	r2, sl
 80122f6:	4649      	mov	r1, r9
 80122f8:	4638      	mov	r0, r7
 80122fa:	47c0      	blx	r8
 80122fc:	3001      	adds	r0, #1
 80122fe:	d103      	bne.n	8012308 <_printf_common+0xb0>
 8012300:	f04f 30ff 	mov.w	r0, #4294967295
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	3501      	adds	r5, #1
 801230a:	e7c4      	b.n	8012296 <_printf_common+0x3e>
 801230c:	2030      	movs	r0, #48	; 0x30
 801230e:	18e1      	adds	r1, r4, r3
 8012310:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012314:	1c5a      	adds	r2, r3, #1
 8012316:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801231a:	4422      	add	r2, r4
 801231c:	3302      	adds	r3, #2
 801231e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012322:	e7c5      	b.n	80122b0 <_printf_common+0x58>
 8012324:	2301      	movs	r3, #1
 8012326:	4622      	mov	r2, r4
 8012328:	4649      	mov	r1, r9
 801232a:	4638      	mov	r0, r7
 801232c:	47c0      	blx	r8
 801232e:	3001      	adds	r0, #1
 8012330:	d0e6      	beq.n	8012300 <_printf_common+0xa8>
 8012332:	3601      	adds	r6, #1
 8012334:	e7d9      	b.n	80122ea <_printf_common+0x92>
	...

08012338 <_printf_i>:
 8012338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	460c      	mov	r4, r1
 801233e:	7e27      	ldrb	r7, [r4, #24]
 8012340:	4691      	mov	r9, r2
 8012342:	2f78      	cmp	r7, #120	; 0x78
 8012344:	4680      	mov	r8, r0
 8012346:	469a      	mov	sl, r3
 8012348:	990c      	ldr	r1, [sp, #48]	; 0x30
 801234a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801234e:	d807      	bhi.n	8012360 <_printf_i+0x28>
 8012350:	2f62      	cmp	r7, #98	; 0x62
 8012352:	d80a      	bhi.n	801236a <_printf_i+0x32>
 8012354:	2f00      	cmp	r7, #0
 8012356:	f000 80d9 	beq.w	801250c <_printf_i+0x1d4>
 801235a:	2f58      	cmp	r7, #88	; 0x58
 801235c:	f000 80a4 	beq.w	80124a8 <_printf_i+0x170>
 8012360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012368:	e03a      	b.n	80123e0 <_printf_i+0xa8>
 801236a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801236e:	2b15      	cmp	r3, #21
 8012370:	d8f6      	bhi.n	8012360 <_printf_i+0x28>
 8012372:	a001      	add	r0, pc, #4	; (adr r0, 8012378 <_printf_i+0x40>)
 8012374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012378:	080123d1 	.word	0x080123d1
 801237c:	080123e5 	.word	0x080123e5
 8012380:	08012361 	.word	0x08012361
 8012384:	08012361 	.word	0x08012361
 8012388:	08012361 	.word	0x08012361
 801238c:	08012361 	.word	0x08012361
 8012390:	080123e5 	.word	0x080123e5
 8012394:	08012361 	.word	0x08012361
 8012398:	08012361 	.word	0x08012361
 801239c:	08012361 	.word	0x08012361
 80123a0:	08012361 	.word	0x08012361
 80123a4:	080124f3 	.word	0x080124f3
 80123a8:	08012415 	.word	0x08012415
 80123ac:	080124d5 	.word	0x080124d5
 80123b0:	08012361 	.word	0x08012361
 80123b4:	08012361 	.word	0x08012361
 80123b8:	08012515 	.word	0x08012515
 80123bc:	08012361 	.word	0x08012361
 80123c0:	08012415 	.word	0x08012415
 80123c4:	08012361 	.word	0x08012361
 80123c8:	08012361 	.word	0x08012361
 80123cc:	080124dd 	.word	0x080124dd
 80123d0:	680b      	ldr	r3, [r1, #0]
 80123d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123d6:	1d1a      	adds	r2, r3, #4
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	600a      	str	r2, [r1, #0]
 80123dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123e0:	2301      	movs	r3, #1
 80123e2:	e0a4      	b.n	801252e <_printf_i+0x1f6>
 80123e4:	6825      	ldr	r5, [r4, #0]
 80123e6:	6808      	ldr	r0, [r1, #0]
 80123e8:	062e      	lsls	r6, r5, #24
 80123ea:	f100 0304 	add.w	r3, r0, #4
 80123ee:	d50a      	bpl.n	8012406 <_printf_i+0xce>
 80123f0:	6805      	ldr	r5, [r0, #0]
 80123f2:	600b      	str	r3, [r1, #0]
 80123f4:	2d00      	cmp	r5, #0
 80123f6:	da03      	bge.n	8012400 <_printf_i+0xc8>
 80123f8:	232d      	movs	r3, #45	; 0x2d
 80123fa:	426d      	negs	r5, r5
 80123fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012400:	230a      	movs	r3, #10
 8012402:	485e      	ldr	r0, [pc, #376]	; (801257c <_printf_i+0x244>)
 8012404:	e019      	b.n	801243a <_printf_i+0x102>
 8012406:	f015 0f40 	tst.w	r5, #64	; 0x40
 801240a:	6805      	ldr	r5, [r0, #0]
 801240c:	600b      	str	r3, [r1, #0]
 801240e:	bf18      	it	ne
 8012410:	b22d      	sxthne	r5, r5
 8012412:	e7ef      	b.n	80123f4 <_printf_i+0xbc>
 8012414:	680b      	ldr	r3, [r1, #0]
 8012416:	6825      	ldr	r5, [r4, #0]
 8012418:	1d18      	adds	r0, r3, #4
 801241a:	6008      	str	r0, [r1, #0]
 801241c:	0628      	lsls	r0, r5, #24
 801241e:	d501      	bpl.n	8012424 <_printf_i+0xec>
 8012420:	681d      	ldr	r5, [r3, #0]
 8012422:	e002      	b.n	801242a <_printf_i+0xf2>
 8012424:	0669      	lsls	r1, r5, #25
 8012426:	d5fb      	bpl.n	8012420 <_printf_i+0xe8>
 8012428:	881d      	ldrh	r5, [r3, #0]
 801242a:	2f6f      	cmp	r7, #111	; 0x6f
 801242c:	bf0c      	ite	eq
 801242e:	2308      	moveq	r3, #8
 8012430:	230a      	movne	r3, #10
 8012432:	4852      	ldr	r0, [pc, #328]	; (801257c <_printf_i+0x244>)
 8012434:	2100      	movs	r1, #0
 8012436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801243a:	6866      	ldr	r6, [r4, #4]
 801243c:	2e00      	cmp	r6, #0
 801243e:	bfa8      	it	ge
 8012440:	6821      	ldrge	r1, [r4, #0]
 8012442:	60a6      	str	r6, [r4, #8]
 8012444:	bfa4      	itt	ge
 8012446:	f021 0104 	bicge.w	r1, r1, #4
 801244a:	6021      	strge	r1, [r4, #0]
 801244c:	b90d      	cbnz	r5, 8012452 <_printf_i+0x11a>
 801244e:	2e00      	cmp	r6, #0
 8012450:	d04d      	beq.n	80124ee <_printf_i+0x1b6>
 8012452:	4616      	mov	r6, r2
 8012454:	fbb5 f1f3 	udiv	r1, r5, r3
 8012458:	fb03 5711 	mls	r7, r3, r1, r5
 801245c:	5dc7      	ldrb	r7, [r0, r7]
 801245e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012462:	462f      	mov	r7, r5
 8012464:	42bb      	cmp	r3, r7
 8012466:	460d      	mov	r5, r1
 8012468:	d9f4      	bls.n	8012454 <_printf_i+0x11c>
 801246a:	2b08      	cmp	r3, #8
 801246c:	d10b      	bne.n	8012486 <_printf_i+0x14e>
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	07df      	lsls	r7, r3, #31
 8012472:	d508      	bpl.n	8012486 <_printf_i+0x14e>
 8012474:	6923      	ldr	r3, [r4, #16]
 8012476:	6861      	ldr	r1, [r4, #4]
 8012478:	4299      	cmp	r1, r3
 801247a:	bfde      	ittt	le
 801247c:	2330      	movle	r3, #48	; 0x30
 801247e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012482:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012486:	1b92      	subs	r2, r2, r6
 8012488:	6122      	str	r2, [r4, #16]
 801248a:	464b      	mov	r3, r9
 801248c:	4621      	mov	r1, r4
 801248e:	4640      	mov	r0, r8
 8012490:	f8cd a000 	str.w	sl, [sp]
 8012494:	aa03      	add	r2, sp, #12
 8012496:	f7ff fedf 	bl	8012258 <_printf_common>
 801249a:	3001      	adds	r0, #1
 801249c:	d14c      	bne.n	8012538 <_printf_i+0x200>
 801249e:	f04f 30ff 	mov.w	r0, #4294967295
 80124a2:	b004      	add	sp, #16
 80124a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a8:	4834      	ldr	r0, [pc, #208]	; (801257c <_printf_i+0x244>)
 80124aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124ae:	680e      	ldr	r6, [r1, #0]
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80124b6:	061f      	lsls	r7, r3, #24
 80124b8:	600e      	str	r6, [r1, #0]
 80124ba:	d514      	bpl.n	80124e6 <_printf_i+0x1ae>
 80124bc:	07d9      	lsls	r1, r3, #31
 80124be:	bf44      	itt	mi
 80124c0:	f043 0320 	orrmi.w	r3, r3, #32
 80124c4:	6023      	strmi	r3, [r4, #0]
 80124c6:	b91d      	cbnz	r5, 80124d0 <_printf_i+0x198>
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	f023 0320 	bic.w	r3, r3, #32
 80124ce:	6023      	str	r3, [r4, #0]
 80124d0:	2310      	movs	r3, #16
 80124d2:	e7af      	b.n	8012434 <_printf_i+0xfc>
 80124d4:	6823      	ldr	r3, [r4, #0]
 80124d6:	f043 0320 	orr.w	r3, r3, #32
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	2378      	movs	r3, #120	; 0x78
 80124de:	4828      	ldr	r0, [pc, #160]	; (8012580 <_printf_i+0x248>)
 80124e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124e4:	e7e3      	b.n	80124ae <_printf_i+0x176>
 80124e6:	065e      	lsls	r6, r3, #25
 80124e8:	bf48      	it	mi
 80124ea:	b2ad      	uxthmi	r5, r5
 80124ec:	e7e6      	b.n	80124bc <_printf_i+0x184>
 80124ee:	4616      	mov	r6, r2
 80124f0:	e7bb      	b.n	801246a <_printf_i+0x132>
 80124f2:	680b      	ldr	r3, [r1, #0]
 80124f4:	6826      	ldr	r6, [r4, #0]
 80124f6:	1d1d      	adds	r5, r3, #4
 80124f8:	6960      	ldr	r0, [r4, #20]
 80124fa:	600d      	str	r5, [r1, #0]
 80124fc:	0635      	lsls	r5, r6, #24
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	d501      	bpl.n	8012506 <_printf_i+0x1ce>
 8012502:	6018      	str	r0, [r3, #0]
 8012504:	e002      	b.n	801250c <_printf_i+0x1d4>
 8012506:	0671      	lsls	r1, r6, #25
 8012508:	d5fb      	bpl.n	8012502 <_printf_i+0x1ca>
 801250a:	8018      	strh	r0, [r3, #0]
 801250c:	2300      	movs	r3, #0
 801250e:	4616      	mov	r6, r2
 8012510:	6123      	str	r3, [r4, #16]
 8012512:	e7ba      	b.n	801248a <_printf_i+0x152>
 8012514:	680b      	ldr	r3, [r1, #0]
 8012516:	1d1a      	adds	r2, r3, #4
 8012518:	600a      	str	r2, [r1, #0]
 801251a:	681e      	ldr	r6, [r3, #0]
 801251c:	2100      	movs	r1, #0
 801251e:	4630      	mov	r0, r6
 8012520:	6862      	ldr	r2, [r4, #4]
 8012522:	f002 fb33 	bl	8014b8c <memchr>
 8012526:	b108      	cbz	r0, 801252c <_printf_i+0x1f4>
 8012528:	1b80      	subs	r0, r0, r6
 801252a:	6060      	str	r0, [r4, #4]
 801252c:	6863      	ldr	r3, [r4, #4]
 801252e:	6123      	str	r3, [r4, #16]
 8012530:	2300      	movs	r3, #0
 8012532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012536:	e7a8      	b.n	801248a <_printf_i+0x152>
 8012538:	4632      	mov	r2, r6
 801253a:	4649      	mov	r1, r9
 801253c:	4640      	mov	r0, r8
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	47d0      	blx	sl
 8012542:	3001      	adds	r0, #1
 8012544:	d0ab      	beq.n	801249e <_printf_i+0x166>
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	079b      	lsls	r3, r3, #30
 801254a:	d413      	bmi.n	8012574 <_printf_i+0x23c>
 801254c:	68e0      	ldr	r0, [r4, #12]
 801254e:	9b03      	ldr	r3, [sp, #12]
 8012550:	4298      	cmp	r0, r3
 8012552:	bfb8      	it	lt
 8012554:	4618      	movlt	r0, r3
 8012556:	e7a4      	b.n	80124a2 <_printf_i+0x16a>
 8012558:	2301      	movs	r3, #1
 801255a:	4632      	mov	r2, r6
 801255c:	4649      	mov	r1, r9
 801255e:	4640      	mov	r0, r8
 8012560:	47d0      	blx	sl
 8012562:	3001      	adds	r0, #1
 8012564:	d09b      	beq.n	801249e <_printf_i+0x166>
 8012566:	3501      	adds	r5, #1
 8012568:	68e3      	ldr	r3, [r4, #12]
 801256a:	9903      	ldr	r1, [sp, #12]
 801256c:	1a5b      	subs	r3, r3, r1
 801256e:	42ab      	cmp	r3, r5
 8012570:	dcf2      	bgt.n	8012558 <_printf_i+0x220>
 8012572:	e7eb      	b.n	801254c <_printf_i+0x214>
 8012574:	2500      	movs	r5, #0
 8012576:	f104 0619 	add.w	r6, r4, #25
 801257a:	e7f5      	b.n	8012568 <_printf_i+0x230>
 801257c:	08016a56 	.word	0x08016a56
 8012580:	08016a67 	.word	0x08016a67

08012584 <_scanf_float>:
 8012584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012588:	b087      	sub	sp, #28
 801258a:	9303      	str	r3, [sp, #12]
 801258c:	688b      	ldr	r3, [r1, #8]
 801258e:	4617      	mov	r7, r2
 8012590:	1e5a      	subs	r2, r3, #1
 8012592:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012596:	bf85      	ittet	hi
 8012598:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801259c:	195b      	addhi	r3, r3, r5
 801259e:	2300      	movls	r3, #0
 80125a0:	9302      	strhi	r3, [sp, #8]
 80125a2:	bf88      	it	hi
 80125a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80125a8:	468b      	mov	fp, r1
 80125aa:	f04f 0500 	mov.w	r5, #0
 80125ae:	bf8c      	ite	hi
 80125b0:	608b      	strhi	r3, [r1, #8]
 80125b2:	9302      	strls	r3, [sp, #8]
 80125b4:	680b      	ldr	r3, [r1, #0]
 80125b6:	4680      	mov	r8, r0
 80125b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80125bc:	f84b 3b1c 	str.w	r3, [fp], #28
 80125c0:	460c      	mov	r4, r1
 80125c2:	465e      	mov	r6, fp
 80125c4:	46aa      	mov	sl, r5
 80125c6:	46a9      	mov	r9, r5
 80125c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80125cc:	9501      	str	r5, [sp, #4]
 80125ce:	68a2      	ldr	r2, [r4, #8]
 80125d0:	b152      	cbz	r2, 80125e8 <_scanf_float+0x64>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	2b4e      	cmp	r3, #78	; 0x4e
 80125d8:	d864      	bhi.n	80126a4 <_scanf_float+0x120>
 80125da:	2b40      	cmp	r3, #64	; 0x40
 80125dc:	d83c      	bhi.n	8012658 <_scanf_float+0xd4>
 80125de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80125e2:	b2c8      	uxtb	r0, r1
 80125e4:	280e      	cmp	r0, #14
 80125e6:	d93a      	bls.n	801265e <_scanf_float+0xda>
 80125e8:	f1b9 0f00 	cmp.w	r9, #0
 80125ec:	d003      	beq.n	80125f6 <_scanf_float+0x72>
 80125ee:	6823      	ldr	r3, [r4, #0]
 80125f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125f4:	6023      	str	r3, [r4, #0]
 80125f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125fa:	f1ba 0f01 	cmp.w	sl, #1
 80125fe:	f200 8113 	bhi.w	8012828 <_scanf_float+0x2a4>
 8012602:	455e      	cmp	r6, fp
 8012604:	f200 8105 	bhi.w	8012812 <_scanf_float+0x28e>
 8012608:	2501      	movs	r5, #1
 801260a:	4628      	mov	r0, r5
 801260c:	b007      	add	sp, #28
 801260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012612:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012616:	2a0d      	cmp	r2, #13
 8012618:	d8e6      	bhi.n	80125e8 <_scanf_float+0x64>
 801261a:	a101      	add	r1, pc, #4	; (adr r1, 8012620 <_scanf_float+0x9c>)
 801261c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012620:	0801275f 	.word	0x0801275f
 8012624:	080125e9 	.word	0x080125e9
 8012628:	080125e9 	.word	0x080125e9
 801262c:	080125e9 	.word	0x080125e9
 8012630:	080127bf 	.word	0x080127bf
 8012634:	08012797 	.word	0x08012797
 8012638:	080125e9 	.word	0x080125e9
 801263c:	080125e9 	.word	0x080125e9
 8012640:	0801276d 	.word	0x0801276d
 8012644:	080125e9 	.word	0x080125e9
 8012648:	080125e9 	.word	0x080125e9
 801264c:	080125e9 	.word	0x080125e9
 8012650:	080125e9 	.word	0x080125e9
 8012654:	08012725 	.word	0x08012725
 8012658:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801265c:	e7db      	b.n	8012616 <_scanf_float+0x92>
 801265e:	290e      	cmp	r1, #14
 8012660:	d8c2      	bhi.n	80125e8 <_scanf_float+0x64>
 8012662:	a001      	add	r0, pc, #4	; (adr r0, 8012668 <_scanf_float+0xe4>)
 8012664:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012668:	08012717 	.word	0x08012717
 801266c:	080125e9 	.word	0x080125e9
 8012670:	08012717 	.word	0x08012717
 8012674:	080127ab 	.word	0x080127ab
 8012678:	080125e9 	.word	0x080125e9
 801267c:	080126c5 	.word	0x080126c5
 8012680:	08012701 	.word	0x08012701
 8012684:	08012701 	.word	0x08012701
 8012688:	08012701 	.word	0x08012701
 801268c:	08012701 	.word	0x08012701
 8012690:	08012701 	.word	0x08012701
 8012694:	08012701 	.word	0x08012701
 8012698:	08012701 	.word	0x08012701
 801269c:	08012701 	.word	0x08012701
 80126a0:	08012701 	.word	0x08012701
 80126a4:	2b6e      	cmp	r3, #110	; 0x6e
 80126a6:	d809      	bhi.n	80126bc <_scanf_float+0x138>
 80126a8:	2b60      	cmp	r3, #96	; 0x60
 80126aa:	d8b2      	bhi.n	8012612 <_scanf_float+0x8e>
 80126ac:	2b54      	cmp	r3, #84	; 0x54
 80126ae:	d077      	beq.n	80127a0 <_scanf_float+0x21c>
 80126b0:	2b59      	cmp	r3, #89	; 0x59
 80126b2:	d199      	bne.n	80125e8 <_scanf_float+0x64>
 80126b4:	2d07      	cmp	r5, #7
 80126b6:	d197      	bne.n	80125e8 <_scanf_float+0x64>
 80126b8:	2508      	movs	r5, #8
 80126ba:	e029      	b.n	8012710 <_scanf_float+0x18c>
 80126bc:	2b74      	cmp	r3, #116	; 0x74
 80126be:	d06f      	beq.n	80127a0 <_scanf_float+0x21c>
 80126c0:	2b79      	cmp	r3, #121	; 0x79
 80126c2:	e7f6      	b.n	80126b2 <_scanf_float+0x12e>
 80126c4:	6821      	ldr	r1, [r4, #0]
 80126c6:	05c8      	lsls	r0, r1, #23
 80126c8:	d51a      	bpl.n	8012700 <_scanf_float+0x17c>
 80126ca:	9b02      	ldr	r3, [sp, #8]
 80126cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80126d0:	6021      	str	r1, [r4, #0]
 80126d2:	f109 0901 	add.w	r9, r9, #1
 80126d6:	b11b      	cbz	r3, 80126e0 <_scanf_float+0x15c>
 80126d8:	3b01      	subs	r3, #1
 80126da:	3201      	adds	r2, #1
 80126dc:	9302      	str	r3, [sp, #8]
 80126de:	60a2      	str	r2, [r4, #8]
 80126e0:	68a3      	ldr	r3, [r4, #8]
 80126e2:	3b01      	subs	r3, #1
 80126e4:	60a3      	str	r3, [r4, #8]
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	3301      	adds	r3, #1
 80126ea:	6123      	str	r3, [r4, #16]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3b01      	subs	r3, #1
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	607b      	str	r3, [r7, #4]
 80126f4:	f340 8084 	ble.w	8012800 <_scanf_float+0x27c>
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	3301      	adds	r3, #1
 80126fc:	603b      	str	r3, [r7, #0]
 80126fe:	e766      	b.n	80125ce <_scanf_float+0x4a>
 8012700:	eb1a 0f05 	cmn.w	sl, r5
 8012704:	f47f af70 	bne.w	80125e8 <_scanf_float+0x64>
 8012708:	6822      	ldr	r2, [r4, #0]
 801270a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801270e:	6022      	str	r2, [r4, #0]
 8012710:	f806 3b01 	strb.w	r3, [r6], #1
 8012714:	e7e4      	b.n	80126e0 <_scanf_float+0x15c>
 8012716:	6822      	ldr	r2, [r4, #0]
 8012718:	0610      	lsls	r0, r2, #24
 801271a:	f57f af65 	bpl.w	80125e8 <_scanf_float+0x64>
 801271e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012722:	e7f4      	b.n	801270e <_scanf_float+0x18a>
 8012724:	f1ba 0f00 	cmp.w	sl, #0
 8012728:	d10e      	bne.n	8012748 <_scanf_float+0x1c4>
 801272a:	f1b9 0f00 	cmp.w	r9, #0
 801272e:	d10e      	bne.n	801274e <_scanf_float+0x1ca>
 8012730:	6822      	ldr	r2, [r4, #0]
 8012732:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012736:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801273a:	d108      	bne.n	801274e <_scanf_float+0x1ca>
 801273c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012740:	f04f 0a01 	mov.w	sl, #1
 8012744:	6022      	str	r2, [r4, #0]
 8012746:	e7e3      	b.n	8012710 <_scanf_float+0x18c>
 8012748:	f1ba 0f02 	cmp.w	sl, #2
 801274c:	d055      	beq.n	80127fa <_scanf_float+0x276>
 801274e:	2d01      	cmp	r5, #1
 8012750:	d002      	beq.n	8012758 <_scanf_float+0x1d4>
 8012752:	2d04      	cmp	r5, #4
 8012754:	f47f af48 	bne.w	80125e8 <_scanf_float+0x64>
 8012758:	3501      	adds	r5, #1
 801275a:	b2ed      	uxtb	r5, r5
 801275c:	e7d8      	b.n	8012710 <_scanf_float+0x18c>
 801275e:	f1ba 0f01 	cmp.w	sl, #1
 8012762:	f47f af41 	bne.w	80125e8 <_scanf_float+0x64>
 8012766:	f04f 0a02 	mov.w	sl, #2
 801276a:	e7d1      	b.n	8012710 <_scanf_float+0x18c>
 801276c:	b97d      	cbnz	r5, 801278e <_scanf_float+0x20a>
 801276e:	f1b9 0f00 	cmp.w	r9, #0
 8012772:	f47f af3c 	bne.w	80125ee <_scanf_float+0x6a>
 8012776:	6822      	ldr	r2, [r4, #0]
 8012778:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801277c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012780:	f47f af39 	bne.w	80125f6 <_scanf_float+0x72>
 8012784:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012788:	2501      	movs	r5, #1
 801278a:	6022      	str	r2, [r4, #0]
 801278c:	e7c0      	b.n	8012710 <_scanf_float+0x18c>
 801278e:	2d03      	cmp	r5, #3
 8012790:	d0e2      	beq.n	8012758 <_scanf_float+0x1d4>
 8012792:	2d05      	cmp	r5, #5
 8012794:	e7de      	b.n	8012754 <_scanf_float+0x1d0>
 8012796:	2d02      	cmp	r5, #2
 8012798:	f47f af26 	bne.w	80125e8 <_scanf_float+0x64>
 801279c:	2503      	movs	r5, #3
 801279e:	e7b7      	b.n	8012710 <_scanf_float+0x18c>
 80127a0:	2d06      	cmp	r5, #6
 80127a2:	f47f af21 	bne.w	80125e8 <_scanf_float+0x64>
 80127a6:	2507      	movs	r5, #7
 80127a8:	e7b2      	b.n	8012710 <_scanf_float+0x18c>
 80127aa:	6822      	ldr	r2, [r4, #0]
 80127ac:	0591      	lsls	r1, r2, #22
 80127ae:	f57f af1b 	bpl.w	80125e8 <_scanf_float+0x64>
 80127b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80127b6:	6022      	str	r2, [r4, #0]
 80127b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80127bc:	e7a8      	b.n	8012710 <_scanf_float+0x18c>
 80127be:	6822      	ldr	r2, [r4, #0]
 80127c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80127c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80127c8:	d006      	beq.n	80127d8 <_scanf_float+0x254>
 80127ca:	0550      	lsls	r0, r2, #21
 80127cc:	f57f af0c 	bpl.w	80125e8 <_scanf_float+0x64>
 80127d0:	f1b9 0f00 	cmp.w	r9, #0
 80127d4:	f43f af0f 	beq.w	80125f6 <_scanf_float+0x72>
 80127d8:	0591      	lsls	r1, r2, #22
 80127da:	bf58      	it	pl
 80127dc:	9901      	ldrpl	r1, [sp, #4]
 80127de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80127e2:	bf58      	it	pl
 80127e4:	eba9 0101 	subpl.w	r1, r9, r1
 80127e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80127ec:	f04f 0900 	mov.w	r9, #0
 80127f0:	bf58      	it	pl
 80127f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80127f6:	6022      	str	r2, [r4, #0]
 80127f8:	e78a      	b.n	8012710 <_scanf_float+0x18c>
 80127fa:	f04f 0a03 	mov.w	sl, #3
 80127fe:	e787      	b.n	8012710 <_scanf_float+0x18c>
 8012800:	4639      	mov	r1, r7
 8012802:	4640      	mov	r0, r8
 8012804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012808:	4798      	blx	r3
 801280a:	2800      	cmp	r0, #0
 801280c:	f43f aedf 	beq.w	80125ce <_scanf_float+0x4a>
 8012810:	e6ea      	b.n	80125e8 <_scanf_float+0x64>
 8012812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012816:	463a      	mov	r2, r7
 8012818:	4640      	mov	r0, r8
 801281a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801281e:	4798      	blx	r3
 8012820:	6923      	ldr	r3, [r4, #16]
 8012822:	3b01      	subs	r3, #1
 8012824:	6123      	str	r3, [r4, #16]
 8012826:	e6ec      	b.n	8012602 <_scanf_float+0x7e>
 8012828:	1e6b      	subs	r3, r5, #1
 801282a:	2b06      	cmp	r3, #6
 801282c:	d825      	bhi.n	801287a <_scanf_float+0x2f6>
 801282e:	2d02      	cmp	r5, #2
 8012830:	d836      	bhi.n	80128a0 <_scanf_float+0x31c>
 8012832:	455e      	cmp	r6, fp
 8012834:	f67f aee8 	bls.w	8012608 <_scanf_float+0x84>
 8012838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801283c:	463a      	mov	r2, r7
 801283e:	4640      	mov	r0, r8
 8012840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012844:	4798      	blx	r3
 8012846:	6923      	ldr	r3, [r4, #16]
 8012848:	3b01      	subs	r3, #1
 801284a:	6123      	str	r3, [r4, #16]
 801284c:	e7f1      	b.n	8012832 <_scanf_float+0x2ae>
 801284e:	9802      	ldr	r0, [sp, #8]
 8012850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012854:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012858:	463a      	mov	r2, r7
 801285a:	9002      	str	r0, [sp, #8]
 801285c:	4640      	mov	r0, r8
 801285e:	4798      	blx	r3
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	3b01      	subs	r3, #1
 8012864:	6123      	str	r3, [r4, #16]
 8012866:	f10a 3aff 	add.w	sl, sl, #4294967295
 801286a:	fa5f fa8a 	uxtb.w	sl, sl
 801286e:	f1ba 0f02 	cmp.w	sl, #2
 8012872:	d1ec      	bne.n	801284e <_scanf_float+0x2ca>
 8012874:	3d03      	subs	r5, #3
 8012876:	b2ed      	uxtb	r5, r5
 8012878:	1b76      	subs	r6, r6, r5
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	05da      	lsls	r2, r3, #23
 801287e:	d52f      	bpl.n	80128e0 <_scanf_float+0x35c>
 8012880:	055b      	lsls	r3, r3, #21
 8012882:	d510      	bpl.n	80128a6 <_scanf_float+0x322>
 8012884:	455e      	cmp	r6, fp
 8012886:	f67f aebf 	bls.w	8012608 <_scanf_float+0x84>
 801288a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801288e:	463a      	mov	r2, r7
 8012890:	4640      	mov	r0, r8
 8012892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012896:	4798      	blx	r3
 8012898:	6923      	ldr	r3, [r4, #16]
 801289a:	3b01      	subs	r3, #1
 801289c:	6123      	str	r3, [r4, #16]
 801289e:	e7f1      	b.n	8012884 <_scanf_float+0x300>
 80128a0:	46aa      	mov	sl, r5
 80128a2:	9602      	str	r6, [sp, #8]
 80128a4:	e7df      	b.n	8012866 <_scanf_float+0x2e2>
 80128a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	2965      	cmp	r1, #101	; 0x65
 80128ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80128b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	d00c      	beq.n	80128d4 <_scanf_float+0x350>
 80128ba:	2945      	cmp	r1, #69	; 0x45
 80128bc:	d00a      	beq.n	80128d4 <_scanf_float+0x350>
 80128be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128c2:	463a      	mov	r2, r7
 80128c4:	4640      	mov	r0, r8
 80128c6:	4798      	blx	r3
 80128c8:	6923      	ldr	r3, [r4, #16]
 80128ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80128ce:	3b01      	subs	r3, #1
 80128d0:	1eb5      	subs	r5, r6, #2
 80128d2:	6123      	str	r3, [r4, #16]
 80128d4:	463a      	mov	r2, r7
 80128d6:	4640      	mov	r0, r8
 80128d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128dc:	4798      	blx	r3
 80128de:	462e      	mov	r6, r5
 80128e0:	6825      	ldr	r5, [r4, #0]
 80128e2:	f015 0510 	ands.w	r5, r5, #16
 80128e6:	d159      	bne.n	801299c <_scanf_float+0x418>
 80128e8:	7035      	strb	r5, [r6, #0]
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80128f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128f4:	d11c      	bne.n	8012930 <_scanf_float+0x3ac>
 80128f6:	9b01      	ldr	r3, [sp, #4]
 80128f8:	454b      	cmp	r3, r9
 80128fa:	eba3 0209 	sub.w	r2, r3, r9
 80128fe:	d124      	bne.n	801294a <_scanf_float+0x3c6>
 8012900:	2200      	movs	r2, #0
 8012902:	4659      	mov	r1, fp
 8012904:	4640      	mov	r0, r8
 8012906:	f000 febb 	bl	8013680 <_strtod_r>
 801290a:	f8d4 c000 	ldr.w	ip, [r4]
 801290e:	9b03      	ldr	r3, [sp, #12]
 8012910:	f01c 0f02 	tst.w	ip, #2
 8012914:	4606      	mov	r6, r0
 8012916:	460f      	mov	r7, r1
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	d021      	beq.n	8012960 <_scanf_float+0x3dc>
 801291c:	9903      	ldr	r1, [sp, #12]
 801291e:	1d1a      	adds	r2, r3, #4
 8012920:	600a      	str	r2, [r1, #0]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	e9c3 6700 	strd	r6, r7, [r3]
 8012928:	68e3      	ldr	r3, [r4, #12]
 801292a:	3301      	adds	r3, #1
 801292c:	60e3      	str	r3, [r4, #12]
 801292e:	e66c      	b.n	801260a <_scanf_float+0x86>
 8012930:	9b04      	ldr	r3, [sp, #16]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d0e4      	beq.n	8012900 <_scanf_float+0x37c>
 8012936:	9905      	ldr	r1, [sp, #20]
 8012938:	230a      	movs	r3, #10
 801293a:	462a      	mov	r2, r5
 801293c:	4640      	mov	r0, r8
 801293e:	3101      	adds	r1, #1
 8012940:	f000 ff2a 	bl	8013798 <_strtol_r>
 8012944:	9b04      	ldr	r3, [sp, #16]
 8012946:	9e05      	ldr	r6, [sp, #20]
 8012948:	1ac2      	subs	r2, r0, r3
 801294a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801294e:	429e      	cmp	r6, r3
 8012950:	bf28      	it	cs
 8012952:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012956:	4630      	mov	r0, r6
 8012958:	4911      	ldr	r1, [pc, #68]	; (80129a0 <_scanf_float+0x41c>)
 801295a:	f000 f839 	bl	80129d0 <siprintf>
 801295e:	e7cf      	b.n	8012900 <_scanf_float+0x37c>
 8012960:	f01c 0f04 	tst.w	ip, #4
 8012964:	f103 0e04 	add.w	lr, r3, #4
 8012968:	d003      	beq.n	8012972 <_scanf_float+0x3ee>
 801296a:	9903      	ldr	r1, [sp, #12]
 801296c:	f8c1 e000 	str.w	lr, [r1]
 8012970:	e7d7      	b.n	8012922 <_scanf_float+0x39e>
 8012972:	9a03      	ldr	r2, [sp, #12]
 8012974:	f8c2 e000 	str.w	lr, [r2]
 8012978:	f8d3 8000 	ldr.w	r8, [r3]
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	f7ee f88a 	bl	8000a98 <__aeabi_dcmpun>
 8012984:	b128      	cbz	r0, 8012992 <_scanf_float+0x40e>
 8012986:	4807      	ldr	r0, [pc, #28]	; (80129a4 <_scanf_float+0x420>)
 8012988:	f000 f81e 	bl	80129c8 <nanf>
 801298c:	f8c8 0000 	str.w	r0, [r8]
 8012990:	e7ca      	b.n	8012928 <_scanf_float+0x3a4>
 8012992:	4630      	mov	r0, r6
 8012994:	4639      	mov	r1, r7
 8012996:	f7ee f8dd 	bl	8000b54 <__aeabi_d2f>
 801299a:	e7f7      	b.n	801298c <_scanf_float+0x408>
 801299c:	2500      	movs	r5, #0
 801299e:	e634      	b.n	801260a <_scanf_float+0x86>
 80129a0:	08016a78 	.word	0x08016a78
 80129a4:	08016e90 	.word	0x08016e90

080129a8 <_sbrk_r>:
 80129a8:	b538      	push	{r3, r4, r5, lr}
 80129aa:	2300      	movs	r3, #0
 80129ac:	4d05      	ldr	r5, [pc, #20]	; (80129c4 <_sbrk_r+0x1c>)
 80129ae:	4604      	mov	r4, r0
 80129b0:	4608      	mov	r0, r1
 80129b2:	602b      	str	r3, [r5, #0]
 80129b4:	f7f1 fe48 	bl	8004648 <_sbrk>
 80129b8:	1c43      	adds	r3, r0, #1
 80129ba:	d102      	bne.n	80129c2 <_sbrk_r+0x1a>
 80129bc:	682b      	ldr	r3, [r5, #0]
 80129be:	b103      	cbz	r3, 80129c2 <_sbrk_r+0x1a>
 80129c0:	6023      	str	r3, [r4, #0]
 80129c2:	bd38      	pop	{r3, r4, r5, pc}
 80129c4:	2000826c 	.word	0x2000826c

080129c8 <nanf>:
 80129c8:	4800      	ldr	r0, [pc, #0]	; (80129cc <nanf+0x4>)
 80129ca:	4770      	bx	lr
 80129cc:	7fc00000 	.word	0x7fc00000

080129d0 <siprintf>:
 80129d0:	b40e      	push	{r1, r2, r3}
 80129d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80129d6:	b500      	push	{lr}
 80129d8:	b09c      	sub	sp, #112	; 0x70
 80129da:	ab1d      	add	r3, sp, #116	; 0x74
 80129dc:	9002      	str	r0, [sp, #8]
 80129de:	9006      	str	r0, [sp, #24]
 80129e0:	9107      	str	r1, [sp, #28]
 80129e2:	9104      	str	r1, [sp, #16]
 80129e4:	4808      	ldr	r0, [pc, #32]	; (8012a08 <siprintf+0x38>)
 80129e6:	4909      	ldr	r1, [pc, #36]	; (8012a0c <siprintf+0x3c>)
 80129e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ec:	9105      	str	r1, [sp, #20]
 80129ee:	6800      	ldr	r0, [r0, #0]
 80129f0:	a902      	add	r1, sp, #8
 80129f2:	9301      	str	r3, [sp, #4]
 80129f4:	f002 fe06 	bl	8015604 <_svfiprintf_r>
 80129f8:	2200      	movs	r2, #0
 80129fa:	9b02      	ldr	r3, [sp, #8]
 80129fc:	701a      	strb	r2, [r3, #0]
 80129fe:	b01c      	add	sp, #112	; 0x70
 8012a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a04:	b003      	add	sp, #12
 8012a06:	4770      	bx	lr
 8012a08:	20000248 	.word	0x20000248
 8012a0c:	ffff0208 	.word	0xffff0208

08012a10 <strcat>:
 8012a10:	4602      	mov	r2, r0
 8012a12:	b510      	push	{r4, lr}
 8012a14:	7814      	ldrb	r4, [r2, #0]
 8012a16:	4613      	mov	r3, r2
 8012a18:	3201      	adds	r2, #1
 8012a1a:	2c00      	cmp	r4, #0
 8012a1c:	d1fa      	bne.n	8012a14 <strcat+0x4>
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a28:	2a00      	cmp	r2, #0
 8012a2a:	d1f9      	bne.n	8012a20 <strcat+0x10>
 8012a2c:	bd10      	pop	{r4, pc}

08012a2e <strncat>:
 8012a2e:	b530      	push	{r4, r5, lr}
 8012a30:	4604      	mov	r4, r0
 8012a32:	7825      	ldrb	r5, [r4, #0]
 8012a34:	4623      	mov	r3, r4
 8012a36:	3401      	adds	r4, #1
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	d1fa      	bne.n	8012a32 <strncat+0x4>
 8012a3c:	3a01      	subs	r2, #1
 8012a3e:	d304      	bcc.n	8012a4a <strncat+0x1c>
 8012a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a44:	f803 4b01 	strb.w	r4, [r3], #1
 8012a48:	b904      	cbnz	r4, 8012a4c <strncat+0x1e>
 8012a4a:	bd30      	pop	{r4, r5, pc}
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	d1f5      	bne.n	8012a3c <strncat+0xe>
 8012a50:	701a      	strb	r2, [r3, #0]
 8012a52:	e7f3      	b.n	8012a3c <strncat+0xe>

08012a54 <sulp>:
 8012a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a58:	460f      	mov	r7, r1
 8012a5a:	4690      	mov	r8, r2
 8012a5c:	f002 fc20 	bl	80152a0 <__ulp>
 8012a60:	4604      	mov	r4, r0
 8012a62:	460d      	mov	r5, r1
 8012a64:	f1b8 0f00 	cmp.w	r8, #0
 8012a68:	d011      	beq.n	8012a8e <sulp+0x3a>
 8012a6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8012a6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	dd0b      	ble.n	8012a8e <sulp+0x3a>
 8012a76:	2400      	movs	r4, #0
 8012a78:	051b      	lsls	r3, r3, #20
 8012a7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012a7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012a82:	4622      	mov	r2, r4
 8012a84:	462b      	mov	r3, r5
 8012a86:	f7ed fd6d 	bl	8000564 <__aeabi_dmul>
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	460d      	mov	r5, r1
 8012a8e:	4620      	mov	r0, r4
 8012a90:	4629      	mov	r1, r5
 8012a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012a98 <_strtod_l>:
 8012a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9c:	469b      	mov	fp, r3
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	b0a1      	sub	sp, #132	; 0x84
 8012aa2:	931c      	str	r3, [sp, #112]	; 0x70
 8012aa4:	4ba1      	ldr	r3, [pc, #644]	; (8012d2c <_strtod_l+0x294>)
 8012aa6:	4682      	mov	sl, r0
 8012aa8:	681f      	ldr	r7, [r3, #0]
 8012aaa:	460e      	mov	r6, r1
 8012aac:	4638      	mov	r0, r7
 8012aae:	9217      	str	r2, [sp, #92]	; 0x5c
 8012ab0:	f7ed fb94 	bl	80001dc <strlen>
 8012ab4:	f04f 0800 	mov.w	r8, #0
 8012ab8:	4604      	mov	r4, r0
 8012aba:	f04f 0900 	mov.w	r9, #0
 8012abe:	961b      	str	r6, [sp, #108]	; 0x6c
 8012ac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ac2:	781a      	ldrb	r2, [r3, #0]
 8012ac4:	2a2b      	cmp	r2, #43	; 0x2b
 8012ac6:	d04c      	beq.n	8012b62 <_strtod_l+0xca>
 8012ac8:	d83a      	bhi.n	8012b40 <_strtod_l+0xa8>
 8012aca:	2a0d      	cmp	r2, #13
 8012acc:	d833      	bhi.n	8012b36 <_strtod_l+0x9e>
 8012ace:	2a08      	cmp	r2, #8
 8012ad0:	d833      	bhi.n	8012b3a <_strtod_l+0xa2>
 8012ad2:	2a00      	cmp	r2, #0
 8012ad4:	d03d      	beq.n	8012b52 <_strtod_l+0xba>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8012ada:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012adc:	782b      	ldrb	r3, [r5, #0]
 8012ade:	2b30      	cmp	r3, #48	; 0x30
 8012ae0:	f040 80af 	bne.w	8012c42 <_strtod_l+0x1aa>
 8012ae4:	786b      	ldrb	r3, [r5, #1]
 8012ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012aea:	2b58      	cmp	r3, #88	; 0x58
 8012aec:	d16c      	bne.n	8012bc8 <_strtod_l+0x130>
 8012aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012af0:	4650      	mov	r0, sl
 8012af2:	9301      	str	r3, [sp, #4]
 8012af4:	ab1c      	add	r3, sp, #112	; 0x70
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	4a8d      	ldr	r2, [pc, #564]	; (8012d30 <_strtod_l+0x298>)
 8012afa:	f8cd b008 	str.w	fp, [sp, #8]
 8012afe:	ab1d      	add	r3, sp, #116	; 0x74
 8012b00:	a91b      	add	r1, sp, #108	; 0x6c
 8012b02:	f001 fd2f 	bl	8014564 <__gethex>
 8012b06:	f010 0607 	ands.w	r6, r0, #7
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	d005      	beq.n	8012b1a <_strtod_l+0x82>
 8012b0e:	2e06      	cmp	r6, #6
 8012b10:	d129      	bne.n	8012b66 <_strtod_l+0xce>
 8012b12:	2300      	movs	r3, #0
 8012b14:	3501      	adds	r5, #1
 8012b16:	951b      	str	r5, [sp, #108]	; 0x6c
 8012b18:	930c      	str	r3, [sp, #48]	; 0x30
 8012b1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f040 8596 	bne.w	801364e <_strtod_l+0xbb6>
 8012b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b24:	b1d3      	cbz	r3, 8012b5c <_strtod_l+0xc4>
 8012b26:	4642      	mov	r2, r8
 8012b28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	4619      	mov	r1, r3
 8012b30:	b021      	add	sp, #132	; 0x84
 8012b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b36:	2a20      	cmp	r2, #32
 8012b38:	d1cd      	bne.n	8012ad6 <_strtod_l+0x3e>
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8012b3e:	e7bf      	b.n	8012ac0 <_strtod_l+0x28>
 8012b40:	2a2d      	cmp	r2, #45	; 0x2d
 8012b42:	d1c8      	bne.n	8012ad6 <_strtod_l+0x3e>
 8012b44:	2201      	movs	r2, #1
 8012b46:	920c      	str	r2, [sp, #48]	; 0x30
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8012b4c:	785b      	ldrb	r3, [r3, #1]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1c3      	bne.n	8012ada <_strtod_l+0x42>
 8012b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b54:	961b      	str	r6, [sp, #108]	; 0x6c
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f040 8577 	bne.w	801364a <_strtod_l+0xbb2>
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	464b      	mov	r3, r9
 8012b60:	e7e4      	b.n	8012b2c <_strtod_l+0x94>
 8012b62:	2200      	movs	r2, #0
 8012b64:	e7ef      	b.n	8012b46 <_strtod_l+0xae>
 8012b66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012b68:	b13a      	cbz	r2, 8012b7a <_strtod_l+0xe2>
 8012b6a:	2135      	movs	r1, #53	; 0x35
 8012b6c:	a81e      	add	r0, sp, #120	; 0x78
 8012b6e:	f002 fc9b 	bl	80154a8 <__copybits>
 8012b72:	4650      	mov	r0, sl
 8012b74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012b76:	f002 f863 	bl	8014c40 <_Bfree>
 8012b7a:	3e01      	subs	r6, #1
 8012b7c:	2e05      	cmp	r6, #5
 8012b7e:	d807      	bhi.n	8012b90 <_strtod_l+0xf8>
 8012b80:	e8df f006 	tbb	[pc, r6]
 8012b84:	1d180b0e 	.word	0x1d180b0e
 8012b88:	030e      	.short	0x030e
 8012b8a:	f04f 0900 	mov.w	r9, #0
 8012b8e:	46c8      	mov	r8, r9
 8012b90:	0721      	lsls	r1, r4, #28
 8012b92:	d5c2      	bpl.n	8012b1a <_strtod_l+0x82>
 8012b94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012b98:	e7bf      	b.n	8012b1a <_strtod_l+0x82>
 8012b9a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8012b9e:	e7f7      	b.n	8012b90 <_strtod_l+0xf8>
 8012ba0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012ba2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8012ba6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012bae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012bb2:	e7ed      	b.n	8012b90 <_strtod_l+0xf8>
 8012bb4:	f04f 0800 	mov.w	r8, #0
 8012bb8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012d34 <_strtod_l+0x29c>
 8012bbc:	e7e8      	b.n	8012b90 <_strtod_l+0xf8>
 8012bbe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012bc2:	f04f 38ff 	mov.w	r8, #4294967295
 8012bc6:	e7e3      	b.n	8012b90 <_strtod_l+0xf8>
 8012bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	921b      	str	r2, [sp, #108]	; 0x6c
 8012bce:	785b      	ldrb	r3, [r3, #1]
 8012bd0:	2b30      	cmp	r3, #48	; 0x30
 8012bd2:	d0f9      	beq.n	8012bc8 <_strtod_l+0x130>
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d0a0      	beq.n	8012b1a <_strtod_l+0x82>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	9307      	str	r3, [sp, #28]
 8012bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bde:	220a      	movs	r2, #10
 8012be0:	9308      	str	r3, [sp, #32]
 8012be2:	2300      	movs	r3, #0
 8012be4:	469b      	mov	fp, r3
 8012be6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012bea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012bec:	7805      	ldrb	r5, [r0, #0]
 8012bee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8012bf2:	b2d9      	uxtb	r1, r3
 8012bf4:	2909      	cmp	r1, #9
 8012bf6:	d926      	bls.n	8012c46 <_strtod_l+0x1ae>
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	4639      	mov	r1, r7
 8012bfc:	f002 fe08 	bl	8015810 <strncmp>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d032      	beq.n	8012c6a <_strtod_l+0x1d2>
 8012c04:	2000      	movs	r0, #0
 8012c06:	462b      	mov	r3, r5
 8012c08:	465c      	mov	r4, fp
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	9004      	str	r0, [sp, #16]
 8012c0e:	2b65      	cmp	r3, #101	; 0x65
 8012c10:	d001      	beq.n	8012c16 <_strtod_l+0x17e>
 8012c12:	2b45      	cmp	r3, #69	; 0x45
 8012c14:	d113      	bne.n	8012c3e <_strtod_l+0x1a6>
 8012c16:	b91c      	cbnz	r4, 8012c20 <_strtod_l+0x188>
 8012c18:	9b07      	ldr	r3, [sp, #28]
 8012c1a:	4303      	orrs	r3, r0
 8012c1c:	d099      	beq.n	8012b52 <_strtod_l+0xba>
 8012c1e:	2400      	movs	r4, #0
 8012c20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012c22:	1c73      	adds	r3, r6, #1
 8012c24:	931b      	str	r3, [sp, #108]	; 0x6c
 8012c26:	7873      	ldrb	r3, [r6, #1]
 8012c28:	2b2b      	cmp	r3, #43	; 0x2b
 8012c2a:	d078      	beq.n	8012d1e <_strtod_l+0x286>
 8012c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8012c2e:	d07b      	beq.n	8012d28 <_strtod_l+0x290>
 8012c30:	2700      	movs	r7, #0
 8012c32:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012c36:	2909      	cmp	r1, #9
 8012c38:	f240 8082 	bls.w	8012d40 <_strtod_l+0x2a8>
 8012c3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c3e:	2500      	movs	r5, #0
 8012c40:	e09e      	b.n	8012d80 <_strtod_l+0x2e8>
 8012c42:	2300      	movs	r3, #0
 8012c44:	e7c9      	b.n	8012bda <_strtod_l+0x142>
 8012c46:	f1bb 0f08 	cmp.w	fp, #8
 8012c4a:	bfd5      	itete	le
 8012c4c:	9906      	ldrle	r1, [sp, #24]
 8012c4e:	9905      	ldrgt	r1, [sp, #20]
 8012c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8012c54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012c58:	f100 0001 	add.w	r0, r0, #1
 8012c5c:	bfd4      	ite	le
 8012c5e:	9306      	strle	r3, [sp, #24]
 8012c60:	9305      	strgt	r3, [sp, #20]
 8012c62:	f10b 0b01 	add.w	fp, fp, #1
 8012c66:	901b      	str	r0, [sp, #108]	; 0x6c
 8012c68:	e7bf      	b.n	8012bea <_strtod_l+0x152>
 8012c6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c6c:	191a      	adds	r2, r3, r4
 8012c6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c70:	5d1b      	ldrb	r3, [r3, r4]
 8012c72:	f1bb 0f00 	cmp.w	fp, #0
 8012c76:	d036      	beq.n	8012ce6 <_strtod_l+0x24e>
 8012c78:	465c      	mov	r4, fp
 8012c7a:	9004      	str	r0, [sp, #16]
 8012c7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012c80:	2a09      	cmp	r2, #9
 8012c82:	d912      	bls.n	8012caa <_strtod_l+0x212>
 8012c84:	2201      	movs	r2, #1
 8012c86:	e7c2      	b.n	8012c0e <_strtod_l+0x176>
 8012c88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c8a:	3001      	adds	r0, #1
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	2b30      	cmp	r3, #48	; 0x30
 8012c94:	d0f8      	beq.n	8012c88 <_strtod_l+0x1f0>
 8012c96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012c9a:	2a08      	cmp	r2, #8
 8012c9c:	f200 84dc 	bhi.w	8013658 <_strtod_l+0xbc0>
 8012ca0:	9004      	str	r0, [sp, #16]
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012ca8:	9208      	str	r2, [sp, #32]
 8012caa:	3b30      	subs	r3, #48	; 0x30
 8012cac:	f100 0201 	add.w	r2, r0, #1
 8012cb0:	d013      	beq.n	8012cda <_strtod_l+0x242>
 8012cb2:	9904      	ldr	r1, [sp, #16]
 8012cb4:	1905      	adds	r5, r0, r4
 8012cb6:	4411      	add	r1, r2
 8012cb8:	9104      	str	r1, [sp, #16]
 8012cba:	4622      	mov	r2, r4
 8012cbc:	210a      	movs	r1, #10
 8012cbe:	42aa      	cmp	r2, r5
 8012cc0:	d113      	bne.n	8012cea <_strtod_l+0x252>
 8012cc2:	1822      	adds	r2, r4, r0
 8012cc4:	2a08      	cmp	r2, #8
 8012cc6:	f104 0401 	add.w	r4, r4, #1
 8012cca:	4404      	add	r4, r0
 8012ccc:	dc1b      	bgt.n	8012d06 <_strtod_l+0x26e>
 8012cce:	220a      	movs	r2, #10
 8012cd0:	9906      	ldr	r1, [sp, #24]
 8012cd2:	fb02 3301 	mla	r3, r2, r1, r3
 8012cd6:	9306      	str	r3, [sp, #24]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cdc:	4610      	mov	r0, r2
 8012cde:	1c59      	adds	r1, r3, #1
 8012ce0:	911b      	str	r1, [sp, #108]	; 0x6c
 8012ce2:	785b      	ldrb	r3, [r3, #1]
 8012ce4:	e7ca      	b.n	8012c7c <_strtod_l+0x1e4>
 8012ce6:	4658      	mov	r0, fp
 8012ce8:	e7d3      	b.n	8012c92 <_strtod_l+0x1fa>
 8012cea:	2a08      	cmp	r2, #8
 8012cec:	dc04      	bgt.n	8012cf8 <_strtod_l+0x260>
 8012cee:	9f06      	ldr	r7, [sp, #24]
 8012cf0:	434f      	muls	r7, r1
 8012cf2:	9706      	str	r7, [sp, #24]
 8012cf4:	3201      	adds	r2, #1
 8012cf6:	e7e2      	b.n	8012cbe <_strtod_l+0x226>
 8012cf8:	1c57      	adds	r7, r2, #1
 8012cfa:	2f10      	cmp	r7, #16
 8012cfc:	bfde      	ittt	le
 8012cfe:	9f05      	ldrle	r7, [sp, #20]
 8012d00:	434f      	mulle	r7, r1
 8012d02:	9705      	strle	r7, [sp, #20]
 8012d04:	e7f6      	b.n	8012cf4 <_strtod_l+0x25c>
 8012d06:	2c10      	cmp	r4, #16
 8012d08:	bfdf      	itttt	le
 8012d0a:	220a      	movle	r2, #10
 8012d0c:	9905      	ldrle	r1, [sp, #20]
 8012d0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012d12:	9305      	strle	r3, [sp, #20]
 8012d14:	e7e0      	b.n	8012cd8 <_strtod_l+0x240>
 8012d16:	2300      	movs	r3, #0
 8012d18:	2201      	movs	r2, #1
 8012d1a:	9304      	str	r3, [sp, #16]
 8012d1c:	e77c      	b.n	8012c18 <_strtod_l+0x180>
 8012d1e:	2700      	movs	r7, #0
 8012d20:	1cb3      	adds	r3, r6, #2
 8012d22:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d24:	78b3      	ldrb	r3, [r6, #2]
 8012d26:	e784      	b.n	8012c32 <_strtod_l+0x19a>
 8012d28:	2701      	movs	r7, #1
 8012d2a:	e7f9      	b.n	8012d20 <_strtod_l+0x288>
 8012d2c:	08016cd0 	.word	0x08016cd0
 8012d30:	08016a80 	.word	0x08016a80
 8012d34:	7ff00000 	.word	0x7ff00000
 8012d38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d3a:	1c59      	adds	r1, r3, #1
 8012d3c:	911b      	str	r1, [sp, #108]	; 0x6c
 8012d3e:	785b      	ldrb	r3, [r3, #1]
 8012d40:	2b30      	cmp	r3, #48	; 0x30
 8012d42:	d0f9      	beq.n	8012d38 <_strtod_l+0x2a0>
 8012d44:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012d48:	2908      	cmp	r1, #8
 8012d4a:	f63f af78 	bhi.w	8012c3e <_strtod_l+0x1a6>
 8012d4e:	f04f 0e0a 	mov.w	lr, #10
 8012d52:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8012d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d58:	9309      	str	r3, [sp, #36]	; 0x24
 8012d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d5c:	1c59      	adds	r1, r3, #1
 8012d5e:	911b      	str	r1, [sp, #108]	; 0x6c
 8012d60:	785b      	ldrb	r3, [r3, #1]
 8012d62:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8012d66:	2d09      	cmp	r5, #9
 8012d68:	d935      	bls.n	8012dd6 <_strtod_l+0x33e>
 8012d6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012d6c:	1b49      	subs	r1, r1, r5
 8012d6e:	2908      	cmp	r1, #8
 8012d70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012d74:	dc02      	bgt.n	8012d7c <_strtod_l+0x2e4>
 8012d76:	4565      	cmp	r5, ip
 8012d78:	bfa8      	it	ge
 8012d7a:	4665      	movge	r5, ip
 8012d7c:	b107      	cbz	r7, 8012d80 <_strtod_l+0x2e8>
 8012d7e:	426d      	negs	r5, r5
 8012d80:	2c00      	cmp	r4, #0
 8012d82:	d14c      	bne.n	8012e1e <_strtod_l+0x386>
 8012d84:	9907      	ldr	r1, [sp, #28]
 8012d86:	4301      	orrs	r1, r0
 8012d88:	f47f aec7 	bne.w	8012b1a <_strtod_l+0x82>
 8012d8c:	2a00      	cmp	r2, #0
 8012d8e:	f47f aee0 	bne.w	8012b52 <_strtod_l+0xba>
 8012d92:	2b69      	cmp	r3, #105	; 0x69
 8012d94:	d026      	beq.n	8012de4 <_strtod_l+0x34c>
 8012d96:	dc23      	bgt.n	8012de0 <_strtod_l+0x348>
 8012d98:	2b49      	cmp	r3, #73	; 0x49
 8012d9a:	d023      	beq.n	8012de4 <_strtod_l+0x34c>
 8012d9c:	2b4e      	cmp	r3, #78	; 0x4e
 8012d9e:	f47f aed8 	bne.w	8012b52 <_strtod_l+0xba>
 8012da2:	499c      	ldr	r1, [pc, #624]	; (8013014 <_strtod_l+0x57c>)
 8012da4:	a81b      	add	r0, sp, #108	; 0x6c
 8012da6:	f001 fe2b 	bl	8014a00 <__match>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	f43f aed1 	beq.w	8012b52 <_strtod_l+0xba>
 8012db0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b28      	cmp	r3, #40	; 0x28
 8012db6:	d12c      	bne.n	8012e12 <_strtod_l+0x37a>
 8012db8:	4997      	ldr	r1, [pc, #604]	; (8013018 <_strtod_l+0x580>)
 8012dba:	aa1e      	add	r2, sp, #120	; 0x78
 8012dbc:	a81b      	add	r0, sp, #108	; 0x6c
 8012dbe:	f001 fe33 	bl	8014a28 <__hexnan>
 8012dc2:	2805      	cmp	r0, #5
 8012dc4:	d125      	bne.n	8012e12 <_strtod_l+0x37a>
 8012dc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012dc8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012dcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012dd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012dd4:	e6a1      	b.n	8012b1a <_strtod_l+0x82>
 8012dd6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8012dda:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8012dde:	e7bc      	b.n	8012d5a <_strtod_l+0x2c2>
 8012de0:	2b6e      	cmp	r3, #110	; 0x6e
 8012de2:	e7dc      	b.n	8012d9e <_strtod_l+0x306>
 8012de4:	498d      	ldr	r1, [pc, #564]	; (801301c <_strtod_l+0x584>)
 8012de6:	a81b      	add	r0, sp, #108	; 0x6c
 8012de8:	f001 fe0a 	bl	8014a00 <__match>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	f43f aeb0 	beq.w	8012b52 <_strtod_l+0xba>
 8012df2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012df4:	498a      	ldr	r1, [pc, #552]	; (8013020 <_strtod_l+0x588>)
 8012df6:	3b01      	subs	r3, #1
 8012df8:	a81b      	add	r0, sp, #108	; 0x6c
 8012dfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8012dfc:	f001 fe00 	bl	8014a00 <__match>
 8012e00:	b910      	cbnz	r0, 8012e08 <_strtod_l+0x370>
 8012e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e04:	3301      	adds	r3, #1
 8012e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e08:	f04f 0800 	mov.w	r8, #0
 8012e0c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8013030 <_strtod_l+0x598>
 8012e10:	e683      	b.n	8012b1a <_strtod_l+0x82>
 8012e12:	4884      	ldr	r0, [pc, #528]	; (8013024 <_strtod_l+0x58c>)
 8012e14:	f002 fcf6 	bl	8015804 <nan>
 8012e18:	4680      	mov	r8, r0
 8012e1a:	4689      	mov	r9, r1
 8012e1c:	e67d      	b.n	8012b1a <_strtod_l+0x82>
 8012e1e:	9b04      	ldr	r3, [sp, #16]
 8012e20:	f1bb 0f00 	cmp.w	fp, #0
 8012e24:	bf08      	it	eq
 8012e26:	46a3      	moveq	fp, r4
 8012e28:	1aeb      	subs	r3, r5, r3
 8012e2a:	2c10      	cmp	r4, #16
 8012e2c:	9806      	ldr	r0, [sp, #24]
 8012e2e:	4626      	mov	r6, r4
 8012e30:	9307      	str	r3, [sp, #28]
 8012e32:	bfa8      	it	ge
 8012e34:	2610      	movge	r6, #16
 8012e36:	f7ed fb1b 	bl	8000470 <__aeabi_ui2d>
 8012e3a:	2c09      	cmp	r4, #9
 8012e3c:	4680      	mov	r8, r0
 8012e3e:	4689      	mov	r9, r1
 8012e40:	dd13      	ble.n	8012e6a <_strtod_l+0x3d2>
 8012e42:	4b79      	ldr	r3, [pc, #484]	; (8013028 <_strtod_l+0x590>)
 8012e44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e48:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012e4c:	f7ed fb8a 	bl	8000564 <__aeabi_dmul>
 8012e50:	4680      	mov	r8, r0
 8012e52:	9805      	ldr	r0, [sp, #20]
 8012e54:	4689      	mov	r9, r1
 8012e56:	f7ed fb0b 	bl	8000470 <__aeabi_ui2d>
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	4640      	mov	r0, r8
 8012e60:	4649      	mov	r1, r9
 8012e62:	f7ed f9c9 	bl	80001f8 <__adddf3>
 8012e66:	4680      	mov	r8, r0
 8012e68:	4689      	mov	r9, r1
 8012e6a:	2c0f      	cmp	r4, #15
 8012e6c:	dc36      	bgt.n	8012edc <_strtod_l+0x444>
 8012e6e:	9b07      	ldr	r3, [sp, #28]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f43f ae52 	beq.w	8012b1a <_strtod_l+0x82>
 8012e76:	dd22      	ble.n	8012ebe <_strtod_l+0x426>
 8012e78:	2b16      	cmp	r3, #22
 8012e7a:	dc09      	bgt.n	8012e90 <_strtod_l+0x3f8>
 8012e7c:	4c6a      	ldr	r4, [pc, #424]	; (8013028 <_strtod_l+0x590>)
 8012e7e:	4642      	mov	r2, r8
 8012e80:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8012e84:	464b      	mov	r3, r9
 8012e86:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012e8a:	f7ed fb6b 	bl	8000564 <__aeabi_dmul>
 8012e8e:	e7c3      	b.n	8012e18 <_strtod_l+0x380>
 8012e90:	9a07      	ldr	r2, [sp, #28]
 8012e92:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012e96:	4293      	cmp	r3, r2
 8012e98:	db20      	blt.n	8012edc <_strtod_l+0x444>
 8012e9a:	4d63      	ldr	r5, [pc, #396]	; (8013028 <_strtod_l+0x590>)
 8012e9c:	f1c4 040f 	rsb	r4, r4, #15
 8012ea0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012ea4:	4642      	mov	r2, r8
 8012ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eaa:	464b      	mov	r3, r9
 8012eac:	f7ed fb5a 	bl	8000564 <__aeabi_dmul>
 8012eb0:	9b07      	ldr	r3, [sp, #28]
 8012eb2:	1b1c      	subs	r4, r3, r4
 8012eb4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012eb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ebc:	e7e5      	b.n	8012e8a <_strtod_l+0x3f2>
 8012ebe:	9b07      	ldr	r3, [sp, #28]
 8012ec0:	3316      	adds	r3, #22
 8012ec2:	db0b      	blt.n	8012edc <_strtod_l+0x444>
 8012ec4:	9b04      	ldr	r3, [sp, #16]
 8012ec6:	4a58      	ldr	r2, [pc, #352]	; (8013028 <_strtod_l+0x590>)
 8012ec8:	1b5d      	subs	r5, r3, r5
 8012eca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012ece:	4640      	mov	r0, r8
 8012ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ed4:	4649      	mov	r1, r9
 8012ed6:	f7ed fc6f 	bl	80007b8 <__aeabi_ddiv>
 8012eda:	e79d      	b.n	8012e18 <_strtod_l+0x380>
 8012edc:	9b07      	ldr	r3, [sp, #28]
 8012ede:	1ba6      	subs	r6, r4, r6
 8012ee0:	441e      	add	r6, r3
 8012ee2:	2e00      	cmp	r6, #0
 8012ee4:	dd71      	ble.n	8012fca <_strtod_l+0x532>
 8012ee6:	f016 030f 	ands.w	r3, r6, #15
 8012eea:	d00a      	beq.n	8012f02 <_strtod_l+0x46a>
 8012eec:	494e      	ldr	r1, [pc, #312]	; (8013028 <_strtod_l+0x590>)
 8012eee:	4642      	mov	r2, r8
 8012ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ef8:	464b      	mov	r3, r9
 8012efa:	f7ed fb33 	bl	8000564 <__aeabi_dmul>
 8012efe:	4680      	mov	r8, r0
 8012f00:	4689      	mov	r9, r1
 8012f02:	f036 060f 	bics.w	r6, r6, #15
 8012f06:	d050      	beq.n	8012faa <_strtod_l+0x512>
 8012f08:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8012f0c:	dd27      	ble.n	8012f5e <_strtod_l+0x4c6>
 8012f0e:	f04f 0b00 	mov.w	fp, #0
 8012f12:	f8cd b010 	str.w	fp, [sp, #16]
 8012f16:	f8cd b020 	str.w	fp, [sp, #32]
 8012f1a:	f8cd b018 	str.w	fp, [sp, #24]
 8012f1e:	2322      	movs	r3, #34	; 0x22
 8012f20:	f04f 0800 	mov.w	r8, #0
 8012f24:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013030 <_strtod_l+0x598>
 8012f28:	f8ca 3000 	str.w	r3, [sl]
 8012f2c:	9b08      	ldr	r3, [sp, #32]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f43f adf3 	beq.w	8012b1a <_strtod_l+0x82>
 8012f34:	4650      	mov	r0, sl
 8012f36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012f38:	f001 fe82 	bl	8014c40 <_Bfree>
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	9906      	ldr	r1, [sp, #24]
 8012f40:	f001 fe7e 	bl	8014c40 <_Bfree>
 8012f44:	4650      	mov	r0, sl
 8012f46:	9904      	ldr	r1, [sp, #16]
 8012f48:	f001 fe7a 	bl	8014c40 <_Bfree>
 8012f4c:	4650      	mov	r0, sl
 8012f4e:	9908      	ldr	r1, [sp, #32]
 8012f50:	f001 fe76 	bl	8014c40 <_Bfree>
 8012f54:	4659      	mov	r1, fp
 8012f56:	4650      	mov	r0, sl
 8012f58:	f001 fe72 	bl	8014c40 <_Bfree>
 8012f5c:	e5dd      	b.n	8012b1a <_strtod_l+0x82>
 8012f5e:	2300      	movs	r3, #0
 8012f60:	4640      	mov	r0, r8
 8012f62:	4649      	mov	r1, r9
 8012f64:	461f      	mov	r7, r3
 8012f66:	1136      	asrs	r6, r6, #4
 8012f68:	2e01      	cmp	r6, #1
 8012f6a:	dc21      	bgt.n	8012fb0 <_strtod_l+0x518>
 8012f6c:	b10b      	cbz	r3, 8012f72 <_strtod_l+0x4da>
 8012f6e:	4680      	mov	r8, r0
 8012f70:	4689      	mov	r9, r1
 8012f72:	4b2e      	ldr	r3, [pc, #184]	; (801302c <_strtod_l+0x594>)
 8012f74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012f78:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012f7c:	4642      	mov	r2, r8
 8012f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012f82:	464b      	mov	r3, r9
 8012f84:	f7ed faee 	bl	8000564 <__aeabi_dmul>
 8012f88:	4b29      	ldr	r3, [pc, #164]	; (8013030 <_strtod_l+0x598>)
 8012f8a:	460a      	mov	r2, r1
 8012f8c:	400b      	ands	r3, r1
 8012f8e:	4929      	ldr	r1, [pc, #164]	; (8013034 <_strtod_l+0x59c>)
 8012f90:	4680      	mov	r8, r0
 8012f92:	428b      	cmp	r3, r1
 8012f94:	d8bb      	bhi.n	8012f0e <_strtod_l+0x476>
 8012f96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012f9a:	428b      	cmp	r3, r1
 8012f9c:	bf86      	itte	hi
 8012f9e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012fa2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8013038 <_strtod_l+0x5a0>
 8012fa6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012faa:	2300      	movs	r3, #0
 8012fac:	9305      	str	r3, [sp, #20]
 8012fae:	e07e      	b.n	80130ae <_strtod_l+0x616>
 8012fb0:	07f2      	lsls	r2, r6, #31
 8012fb2:	d507      	bpl.n	8012fc4 <_strtod_l+0x52c>
 8012fb4:	4b1d      	ldr	r3, [pc, #116]	; (801302c <_strtod_l+0x594>)
 8012fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed fad1 	bl	8000564 <__aeabi_dmul>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	3701      	adds	r7, #1
 8012fc6:	1076      	asrs	r6, r6, #1
 8012fc8:	e7ce      	b.n	8012f68 <_strtod_l+0x4d0>
 8012fca:	d0ee      	beq.n	8012faa <_strtod_l+0x512>
 8012fcc:	4276      	negs	r6, r6
 8012fce:	f016 020f 	ands.w	r2, r6, #15
 8012fd2:	d00a      	beq.n	8012fea <_strtod_l+0x552>
 8012fd4:	4b14      	ldr	r3, [pc, #80]	; (8013028 <_strtod_l+0x590>)
 8012fd6:	4640      	mov	r0, r8
 8012fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fdc:	4649      	mov	r1, r9
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed fbe9 	bl	80007b8 <__aeabi_ddiv>
 8012fe6:	4680      	mov	r8, r0
 8012fe8:	4689      	mov	r9, r1
 8012fea:	1136      	asrs	r6, r6, #4
 8012fec:	d0dd      	beq.n	8012faa <_strtod_l+0x512>
 8012fee:	2e1f      	cmp	r6, #31
 8012ff0:	dd24      	ble.n	801303c <_strtod_l+0x5a4>
 8012ff2:	f04f 0b00 	mov.w	fp, #0
 8012ff6:	f8cd b010 	str.w	fp, [sp, #16]
 8012ffa:	f8cd b020 	str.w	fp, [sp, #32]
 8012ffe:	f8cd b018 	str.w	fp, [sp, #24]
 8013002:	2322      	movs	r3, #34	; 0x22
 8013004:	f04f 0800 	mov.w	r8, #0
 8013008:	f04f 0900 	mov.w	r9, #0
 801300c:	f8ca 3000 	str.w	r3, [sl]
 8013010:	e78c      	b.n	8012f2c <_strtod_l+0x494>
 8013012:	bf00      	nop
 8013014:	08016a51 	.word	0x08016a51
 8013018:	08016a94 	.word	0x08016a94
 801301c:	08016a49 	.word	0x08016a49
 8013020:	08016bd4 	.word	0x08016bd4
 8013024:	08016e90 	.word	0x08016e90
 8013028:	08016d70 	.word	0x08016d70
 801302c:	08016d48 	.word	0x08016d48
 8013030:	7ff00000 	.word	0x7ff00000
 8013034:	7ca00000 	.word	0x7ca00000
 8013038:	7fefffff 	.word	0x7fefffff
 801303c:	f016 0310 	ands.w	r3, r6, #16
 8013040:	bf18      	it	ne
 8013042:	236a      	movne	r3, #106	; 0x6a
 8013044:	4640      	mov	r0, r8
 8013046:	9305      	str	r3, [sp, #20]
 8013048:	4649      	mov	r1, r9
 801304a:	2300      	movs	r3, #0
 801304c:	4fb2      	ldr	r7, [pc, #712]	; (8013318 <_strtod_l+0x880>)
 801304e:	07f2      	lsls	r2, r6, #31
 8013050:	d504      	bpl.n	801305c <_strtod_l+0x5c4>
 8013052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013056:	f7ed fa85 	bl	8000564 <__aeabi_dmul>
 801305a:	2301      	movs	r3, #1
 801305c:	1076      	asrs	r6, r6, #1
 801305e:	f107 0708 	add.w	r7, r7, #8
 8013062:	d1f4      	bne.n	801304e <_strtod_l+0x5b6>
 8013064:	b10b      	cbz	r3, 801306a <_strtod_l+0x5d2>
 8013066:	4680      	mov	r8, r0
 8013068:	4689      	mov	r9, r1
 801306a:	9b05      	ldr	r3, [sp, #20]
 801306c:	b1bb      	cbz	r3, 801309e <_strtod_l+0x606>
 801306e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8013072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013076:	2b00      	cmp	r3, #0
 8013078:	4649      	mov	r1, r9
 801307a:	dd10      	ble.n	801309e <_strtod_l+0x606>
 801307c:	2b1f      	cmp	r3, #31
 801307e:	f340 812b 	ble.w	80132d8 <_strtod_l+0x840>
 8013082:	2b34      	cmp	r3, #52	; 0x34
 8013084:	bfd8      	it	le
 8013086:	f04f 32ff 	movle.w	r2, #4294967295
 801308a:	f04f 0800 	mov.w	r8, #0
 801308e:	bfcf      	iteee	gt
 8013090:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013094:	3b20      	suble	r3, #32
 8013096:	fa02 f303 	lslle.w	r3, r2, r3
 801309a:	ea03 0901 	andle.w	r9, r3, r1
 801309e:	2200      	movs	r2, #0
 80130a0:	2300      	movs	r3, #0
 80130a2:	4640      	mov	r0, r8
 80130a4:	4649      	mov	r1, r9
 80130a6:	f7ed fcc5 	bl	8000a34 <__aeabi_dcmpeq>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d1a1      	bne.n	8012ff2 <_strtod_l+0x55a>
 80130ae:	9b06      	ldr	r3, [sp, #24]
 80130b0:	465a      	mov	r2, fp
 80130b2:	9300      	str	r3, [sp, #0]
 80130b4:	4650      	mov	r0, sl
 80130b6:	4623      	mov	r3, r4
 80130b8:	9908      	ldr	r1, [sp, #32]
 80130ba:	f001 fe2d 	bl	8014d18 <__s2b>
 80130be:	9008      	str	r0, [sp, #32]
 80130c0:	2800      	cmp	r0, #0
 80130c2:	f43f af24 	beq.w	8012f0e <_strtod_l+0x476>
 80130c6:	9b04      	ldr	r3, [sp, #16]
 80130c8:	f04f 0b00 	mov.w	fp, #0
 80130cc:	1b5d      	subs	r5, r3, r5
 80130ce:	9b07      	ldr	r3, [sp, #28]
 80130d0:	f8cd b010 	str.w	fp, [sp, #16]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	bfb4      	ite	lt
 80130d8:	462b      	movlt	r3, r5
 80130da:	2300      	movge	r3, #0
 80130dc:	930e      	str	r3, [sp, #56]	; 0x38
 80130de:	9b07      	ldr	r3, [sp, #28]
 80130e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80130e4:	9316      	str	r3, [sp, #88]	; 0x58
 80130e6:	9b08      	ldr	r3, [sp, #32]
 80130e8:	4650      	mov	r0, sl
 80130ea:	6859      	ldr	r1, [r3, #4]
 80130ec:	f001 fd68 	bl	8014bc0 <_Balloc>
 80130f0:	9006      	str	r0, [sp, #24]
 80130f2:	2800      	cmp	r0, #0
 80130f4:	f43f af13 	beq.w	8012f1e <_strtod_l+0x486>
 80130f8:	9b08      	ldr	r3, [sp, #32]
 80130fa:	300c      	adds	r0, #12
 80130fc:	691a      	ldr	r2, [r3, #16]
 80130fe:	f103 010c 	add.w	r1, r3, #12
 8013102:	3202      	adds	r2, #2
 8013104:	0092      	lsls	r2, r2, #2
 8013106:	f7fe fd21 	bl	8011b4c <memcpy>
 801310a:	ab1e      	add	r3, sp, #120	; 0x78
 801310c:	9301      	str	r3, [sp, #4]
 801310e:	ab1d      	add	r3, sp, #116	; 0x74
 8013110:	9300      	str	r3, [sp, #0]
 8013112:	4642      	mov	r2, r8
 8013114:	464b      	mov	r3, r9
 8013116:	4650      	mov	r0, sl
 8013118:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801311c:	f002 f93a 	bl	8015394 <__d2b>
 8013120:	901c      	str	r0, [sp, #112]	; 0x70
 8013122:	2800      	cmp	r0, #0
 8013124:	f43f aefb 	beq.w	8012f1e <_strtod_l+0x486>
 8013128:	2101      	movs	r1, #1
 801312a:	4650      	mov	r0, sl
 801312c:	f001 fe8c 	bl	8014e48 <__i2b>
 8013130:	4603      	mov	r3, r0
 8013132:	9004      	str	r0, [sp, #16]
 8013134:	2800      	cmp	r0, #0
 8013136:	f43f aef2 	beq.w	8012f1e <_strtod_l+0x486>
 801313a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801313c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801313e:	2d00      	cmp	r5, #0
 8013140:	bfab      	itete	ge
 8013142:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013144:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013146:	18ee      	addge	r6, r5, r3
 8013148:	1b5c      	sublt	r4, r3, r5
 801314a:	9b05      	ldr	r3, [sp, #20]
 801314c:	bfa8      	it	ge
 801314e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8013150:	eba5 0503 	sub.w	r5, r5, r3
 8013154:	4415      	add	r5, r2
 8013156:	4b71      	ldr	r3, [pc, #452]	; (801331c <_strtod_l+0x884>)
 8013158:	f105 35ff 	add.w	r5, r5, #4294967295
 801315c:	bfb8      	it	lt
 801315e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8013160:	429d      	cmp	r5, r3
 8013162:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013166:	f280 80c9 	bge.w	80132fc <_strtod_l+0x864>
 801316a:	1b5b      	subs	r3, r3, r5
 801316c:	2b1f      	cmp	r3, #31
 801316e:	f04f 0701 	mov.w	r7, #1
 8013172:	eba2 0203 	sub.w	r2, r2, r3
 8013176:	f300 80b6 	bgt.w	80132e6 <_strtod_l+0x84e>
 801317a:	2500      	movs	r5, #0
 801317c:	fa07 f303 	lsl.w	r3, r7, r3
 8013180:	930f      	str	r3, [sp, #60]	; 0x3c
 8013182:	18b7      	adds	r7, r6, r2
 8013184:	9b05      	ldr	r3, [sp, #20]
 8013186:	42be      	cmp	r6, r7
 8013188:	4414      	add	r4, r2
 801318a:	441c      	add	r4, r3
 801318c:	4633      	mov	r3, r6
 801318e:	bfa8      	it	ge
 8013190:	463b      	movge	r3, r7
 8013192:	42a3      	cmp	r3, r4
 8013194:	bfa8      	it	ge
 8013196:	4623      	movge	r3, r4
 8013198:	2b00      	cmp	r3, #0
 801319a:	bfc2      	ittt	gt
 801319c:	1aff      	subgt	r7, r7, r3
 801319e:	1ae4      	subgt	r4, r4, r3
 80131a0:	1af6      	subgt	r6, r6, r3
 80131a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	dd17      	ble.n	80131d8 <_strtod_l+0x740>
 80131a8:	461a      	mov	r2, r3
 80131aa:	4650      	mov	r0, sl
 80131ac:	9904      	ldr	r1, [sp, #16]
 80131ae:	f001 ff05 	bl	8014fbc <__pow5mult>
 80131b2:	9004      	str	r0, [sp, #16]
 80131b4:	2800      	cmp	r0, #0
 80131b6:	f43f aeb2 	beq.w	8012f1e <_strtod_l+0x486>
 80131ba:	4601      	mov	r1, r0
 80131bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80131be:	4650      	mov	r0, sl
 80131c0:	f001 fe58 	bl	8014e74 <__multiply>
 80131c4:	9009      	str	r0, [sp, #36]	; 0x24
 80131c6:	2800      	cmp	r0, #0
 80131c8:	f43f aea9 	beq.w	8012f1e <_strtod_l+0x486>
 80131cc:	4650      	mov	r0, sl
 80131ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80131d0:	f001 fd36 	bl	8014c40 <_Bfree>
 80131d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d6:	931c      	str	r3, [sp, #112]	; 0x70
 80131d8:	2f00      	cmp	r7, #0
 80131da:	f300 8093 	bgt.w	8013304 <_strtod_l+0x86c>
 80131de:	9b07      	ldr	r3, [sp, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	dd08      	ble.n	80131f6 <_strtod_l+0x75e>
 80131e4:	4650      	mov	r0, sl
 80131e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80131e8:	9906      	ldr	r1, [sp, #24]
 80131ea:	f001 fee7 	bl	8014fbc <__pow5mult>
 80131ee:	9006      	str	r0, [sp, #24]
 80131f0:	2800      	cmp	r0, #0
 80131f2:	f43f ae94 	beq.w	8012f1e <_strtod_l+0x486>
 80131f6:	2c00      	cmp	r4, #0
 80131f8:	dd08      	ble.n	801320c <_strtod_l+0x774>
 80131fa:	4622      	mov	r2, r4
 80131fc:	4650      	mov	r0, sl
 80131fe:	9906      	ldr	r1, [sp, #24]
 8013200:	f001 ff36 	bl	8015070 <__lshift>
 8013204:	9006      	str	r0, [sp, #24]
 8013206:	2800      	cmp	r0, #0
 8013208:	f43f ae89 	beq.w	8012f1e <_strtod_l+0x486>
 801320c:	2e00      	cmp	r6, #0
 801320e:	dd08      	ble.n	8013222 <_strtod_l+0x78a>
 8013210:	4632      	mov	r2, r6
 8013212:	4650      	mov	r0, sl
 8013214:	9904      	ldr	r1, [sp, #16]
 8013216:	f001 ff2b 	bl	8015070 <__lshift>
 801321a:	9004      	str	r0, [sp, #16]
 801321c:	2800      	cmp	r0, #0
 801321e:	f43f ae7e 	beq.w	8012f1e <_strtod_l+0x486>
 8013222:	4650      	mov	r0, sl
 8013224:	9a06      	ldr	r2, [sp, #24]
 8013226:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013228:	f001 ffaa 	bl	8015180 <__mdiff>
 801322c:	4683      	mov	fp, r0
 801322e:	2800      	cmp	r0, #0
 8013230:	f43f ae75 	beq.w	8012f1e <_strtod_l+0x486>
 8013234:	2400      	movs	r4, #0
 8013236:	68c3      	ldr	r3, [r0, #12]
 8013238:	9904      	ldr	r1, [sp, #16]
 801323a:	60c4      	str	r4, [r0, #12]
 801323c:	930d      	str	r3, [sp, #52]	; 0x34
 801323e:	f001 ff83 	bl	8015148 <__mcmp>
 8013242:	42a0      	cmp	r0, r4
 8013244:	da70      	bge.n	8013328 <_strtod_l+0x890>
 8013246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013248:	ea53 0308 	orrs.w	r3, r3, r8
 801324c:	f040 8096 	bne.w	801337c <_strtod_l+0x8e4>
 8013250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013254:	2b00      	cmp	r3, #0
 8013256:	f040 8091 	bne.w	801337c <_strtod_l+0x8e4>
 801325a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801325e:	0d1b      	lsrs	r3, r3, #20
 8013260:	051b      	lsls	r3, r3, #20
 8013262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013266:	f240 8089 	bls.w	801337c <_strtod_l+0x8e4>
 801326a:	f8db 3014 	ldr.w	r3, [fp, #20]
 801326e:	b923      	cbnz	r3, 801327a <_strtod_l+0x7e2>
 8013270:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013274:	2b01      	cmp	r3, #1
 8013276:	f340 8081 	ble.w	801337c <_strtod_l+0x8e4>
 801327a:	4659      	mov	r1, fp
 801327c:	2201      	movs	r2, #1
 801327e:	4650      	mov	r0, sl
 8013280:	f001 fef6 	bl	8015070 <__lshift>
 8013284:	9904      	ldr	r1, [sp, #16]
 8013286:	4683      	mov	fp, r0
 8013288:	f001 ff5e 	bl	8015148 <__mcmp>
 801328c:	2800      	cmp	r0, #0
 801328e:	dd75      	ble.n	801337c <_strtod_l+0x8e4>
 8013290:	9905      	ldr	r1, [sp, #20]
 8013292:	464b      	mov	r3, r9
 8013294:	4a22      	ldr	r2, [pc, #136]	; (8013320 <_strtod_l+0x888>)
 8013296:	2900      	cmp	r1, #0
 8013298:	f000 8091 	beq.w	80133be <_strtod_l+0x926>
 801329c:	ea02 0109 	and.w	r1, r2, r9
 80132a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80132a4:	f300 808b 	bgt.w	80133be <_strtod_l+0x926>
 80132a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80132ac:	f77f aea9 	ble.w	8013002 <_strtod_l+0x56a>
 80132b0:	2300      	movs	r3, #0
 80132b2:	4a1c      	ldr	r2, [pc, #112]	; (8013324 <_strtod_l+0x88c>)
 80132b4:	4640      	mov	r0, r8
 80132b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80132ba:	4649      	mov	r1, r9
 80132bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80132c0:	f7ed f950 	bl	8000564 <__aeabi_dmul>
 80132c4:	460b      	mov	r3, r1
 80132c6:	4303      	orrs	r3, r0
 80132c8:	bf08      	it	eq
 80132ca:	2322      	moveq	r3, #34	; 0x22
 80132cc:	4680      	mov	r8, r0
 80132ce:	4689      	mov	r9, r1
 80132d0:	bf08      	it	eq
 80132d2:	f8ca 3000 	streq.w	r3, [sl]
 80132d6:	e62d      	b.n	8012f34 <_strtod_l+0x49c>
 80132d8:	f04f 32ff 	mov.w	r2, #4294967295
 80132dc:	fa02 f303 	lsl.w	r3, r2, r3
 80132e0:	ea03 0808 	and.w	r8, r3, r8
 80132e4:	e6db      	b.n	801309e <_strtod_l+0x606>
 80132e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80132ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80132ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80132f2:	35e2      	adds	r5, #226	; 0xe2
 80132f4:	fa07 f505 	lsl.w	r5, r7, r5
 80132f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80132fa:	e742      	b.n	8013182 <_strtod_l+0x6ea>
 80132fc:	2301      	movs	r3, #1
 80132fe:	2500      	movs	r5, #0
 8013300:	930f      	str	r3, [sp, #60]	; 0x3c
 8013302:	e73e      	b.n	8013182 <_strtod_l+0x6ea>
 8013304:	463a      	mov	r2, r7
 8013306:	4650      	mov	r0, sl
 8013308:	991c      	ldr	r1, [sp, #112]	; 0x70
 801330a:	f001 feb1 	bl	8015070 <__lshift>
 801330e:	901c      	str	r0, [sp, #112]	; 0x70
 8013310:	2800      	cmp	r0, #0
 8013312:	f47f af64 	bne.w	80131de <_strtod_l+0x746>
 8013316:	e602      	b.n	8012f1e <_strtod_l+0x486>
 8013318:	08016aa8 	.word	0x08016aa8
 801331c:	fffffc02 	.word	0xfffffc02
 8013320:	7ff00000 	.word	0x7ff00000
 8013324:	39500000 	.word	0x39500000
 8013328:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801332c:	d166      	bne.n	80133fc <_strtod_l+0x964>
 801332e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013334:	b35a      	cbz	r2, 801338e <_strtod_l+0x8f6>
 8013336:	4a9c      	ldr	r2, [pc, #624]	; (80135a8 <_strtod_l+0xb10>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d12c      	bne.n	8013396 <_strtod_l+0x8fe>
 801333c:	9b05      	ldr	r3, [sp, #20]
 801333e:	4640      	mov	r0, r8
 8013340:	b303      	cbz	r3, 8013384 <_strtod_l+0x8ec>
 8013342:	464b      	mov	r3, r9
 8013344:	4a99      	ldr	r2, [pc, #612]	; (80135ac <_strtod_l+0xb14>)
 8013346:	f04f 31ff 	mov.w	r1, #4294967295
 801334a:	401a      	ands	r2, r3
 801334c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013350:	d81b      	bhi.n	801338a <_strtod_l+0x8f2>
 8013352:	0d12      	lsrs	r2, r2, #20
 8013354:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013358:	fa01 f303 	lsl.w	r3, r1, r3
 801335c:	4298      	cmp	r0, r3
 801335e:	d11a      	bne.n	8013396 <_strtod_l+0x8fe>
 8013360:	4b93      	ldr	r3, [pc, #588]	; (80135b0 <_strtod_l+0xb18>)
 8013362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013364:	429a      	cmp	r2, r3
 8013366:	d102      	bne.n	801336e <_strtod_l+0x8d6>
 8013368:	3001      	adds	r0, #1
 801336a:	f43f add8 	beq.w	8012f1e <_strtod_l+0x486>
 801336e:	f04f 0800 	mov.w	r8, #0
 8013372:	4b8e      	ldr	r3, [pc, #568]	; (80135ac <_strtod_l+0xb14>)
 8013374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013376:	401a      	ands	r2, r3
 8013378:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 801337c:	9b05      	ldr	r3, [sp, #20]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d196      	bne.n	80132b0 <_strtod_l+0x818>
 8013382:	e5d7      	b.n	8012f34 <_strtod_l+0x49c>
 8013384:	f04f 33ff 	mov.w	r3, #4294967295
 8013388:	e7e8      	b.n	801335c <_strtod_l+0x8c4>
 801338a:	460b      	mov	r3, r1
 801338c:	e7e6      	b.n	801335c <_strtod_l+0x8c4>
 801338e:	ea53 0308 	orrs.w	r3, r3, r8
 8013392:	f43f af7d 	beq.w	8013290 <_strtod_l+0x7f8>
 8013396:	b1e5      	cbz	r5, 80133d2 <_strtod_l+0x93a>
 8013398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339a:	421d      	tst	r5, r3
 801339c:	d0ee      	beq.n	801337c <_strtod_l+0x8e4>
 801339e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133a0:	4640      	mov	r0, r8
 80133a2:	4649      	mov	r1, r9
 80133a4:	9a05      	ldr	r2, [sp, #20]
 80133a6:	b1c3      	cbz	r3, 80133da <_strtod_l+0x942>
 80133a8:	f7ff fb54 	bl	8012a54 <sulp>
 80133ac:	4602      	mov	r2, r0
 80133ae:	460b      	mov	r3, r1
 80133b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133b4:	f7ec ff20 	bl	80001f8 <__adddf3>
 80133b8:	4680      	mov	r8, r0
 80133ba:	4689      	mov	r9, r1
 80133bc:	e7de      	b.n	801337c <_strtod_l+0x8e4>
 80133be:	4013      	ands	r3, r2
 80133c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80133c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80133c8:	f04f 38ff 	mov.w	r8, #4294967295
 80133cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80133d0:	e7d4      	b.n	801337c <_strtod_l+0x8e4>
 80133d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133d4:	ea13 0f08 	tst.w	r3, r8
 80133d8:	e7e0      	b.n	801339c <_strtod_l+0x904>
 80133da:	f7ff fb3b 	bl	8012a54 <sulp>
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133e6:	f7ec ff05 	bl	80001f4 <__aeabi_dsub>
 80133ea:	2200      	movs	r2, #0
 80133ec:	2300      	movs	r3, #0
 80133ee:	4680      	mov	r8, r0
 80133f0:	4689      	mov	r9, r1
 80133f2:	f7ed fb1f 	bl	8000a34 <__aeabi_dcmpeq>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d0c0      	beq.n	801337c <_strtod_l+0x8e4>
 80133fa:	e602      	b.n	8013002 <_strtod_l+0x56a>
 80133fc:	4658      	mov	r0, fp
 80133fe:	9904      	ldr	r1, [sp, #16]
 8013400:	f002 f824 	bl	801544c <__ratio>
 8013404:	2200      	movs	r2, #0
 8013406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801340a:	4606      	mov	r6, r0
 801340c:	460f      	mov	r7, r1
 801340e:	f7ed fb25 	bl	8000a5c <__aeabi_dcmple>
 8013412:	2800      	cmp	r0, #0
 8013414:	d075      	beq.n	8013502 <_strtod_l+0xa6a>
 8013416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013418:	2b00      	cmp	r3, #0
 801341a:	d047      	beq.n	80134ac <_strtod_l+0xa14>
 801341c:	2600      	movs	r6, #0
 801341e:	4f65      	ldr	r7, [pc, #404]	; (80135b4 <_strtod_l+0xb1c>)
 8013420:	4d64      	ldr	r5, [pc, #400]	; (80135b4 <_strtod_l+0xb1c>)
 8013422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013428:	0d1b      	lsrs	r3, r3, #20
 801342a:	051b      	lsls	r3, r3, #20
 801342c:	930f      	str	r3, [sp, #60]	; 0x3c
 801342e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013430:	4b61      	ldr	r3, [pc, #388]	; (80135b8 <_strtod_l+0xb20>)
 8013432:	429a      	cmp	r2, r3
 8013434:	f040 80c8 	bne.w	80135c8 <_strtod_l+0xb30>
 8013438:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801343c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013442:	4640      	mov	r0, r8
 8013444:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8013448:	4649      	mov	r1, r9
 801344a:	f001 ff29 	bl	80152a0 <__ulp>
 801344e:	4602      	mov	r2, r0
 8013450:	460b      	mov	r3, r1
 8013452:	4630      	mov	r0, r6
 8013454:	4639      	mov	r1, r7
 8013456:	f7ed f885 	bl	8000564 <__aeabi_dmul>
 801345a:	4642      	mov	r2, r8
 801345c:	464b      	mov	r3, r9
 801345e:	f7ec fecb 	bl	80001f8 <__adddf3>
 8013462:	460b      	mov	r3, r1
 8013464:	4951      	ldr	r1, [pc, #324]	; (80135ac <_strtod_l+0xb14>)
 8013466:	4a55      	ldr	r2, [pc, #340]	; (80135bc <_strtod_l+0xb24>)
 8013468:	4019      	ands	r1, r3
 801346a:	4291      	cmp	r1, r2
 801346c:	4680      	mov	r8, r0
 801346e:	d95e      	bls.n	801352e <_strtod_l+0xa96>
 8013470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013472:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013476:	4293      	cmp	r3, r2
 8013478:	d103      	bne.n	8013482 <_strtod_l+0x9ea>
 801347a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801347c:	3301      	adds	r3, #1
 801347e:	f43f ad4e 	beq.w	8012f1e <_strtod_l+0x486>
 8013482:	f04f 38ff 	mov.w	r8, #4294967295
 8013486:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80135b0 <_strtod_l+0xb18>
 801348a:	4650      	mov	r0, sl
 801348c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801348e:	f001 fbd7 	bl	8014c40 <_Bfree>
 8013492:	4650      	mov	r0, sl
 8013494:	9906      	ldr	r1, [sp, #24]
 8013496:	f001 fbd3 	bl	8014c40 <_Bfree>
 801349a:	4650      	mov	r0, sl
 801349c:	9904      	ldr	r1, [sp, #16]
 801349e:	f001 fbcf 	bl	8014c40 <_Bfree>
 80134a2:	4659      	mov	r1, fp
 80134a4:	4650      	mov	r0, sl
 80134a6:	f001 fbcb 	bl	8014c40 <_Bfree>
 80134aa:	e61c      	b.n	80130e6 <_strtod_l+0x64e>
 80134ac:	f1b8 0f00 	cmp.w	r8, #0
 80134b0:	d119      	bne.n	80134e6 <_strtod_l+0xa4e>
 80134b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134b8:	b9e3      	cbnz	r3, 80134f4 <_strtod_l+0xa5c>
 80134ba:	2200      	movs	r2, #0
 80134bc:	4630      	mov	r0, r6
 80134be:	4639      	mov	r1, r7
 80134c0:	4b3c      	ldr	r3, [pc, #240]	; (80135b4 <_strtod_l+0xb1c>)
 80134c2:	f7ed fac1 	bl	8000a48 <__aeabi_dcmplt>
 80134c6:	b9c8      	cbnz	r0, 80134fc <_strtod_l+0xa64>
 80134c8:	2200      	movs	r2, #0
 80134ca:	4630      	mov	r0, r6
 80134cc:	4639      	mov	r1, r7
 80134ce:	4b3c      	ldr	r3, [pc, #240]	; (80135c0 <_strtod_l+0xb28>)
 80134d0:	f7ed f848 	bl	8000564 <__aeabi_dmul>
 80134d4:	4604      	mov	r4, r0
 80134d6:	460d      	mov	r5, r1
 80134d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80134dc:	9418      	str	r4, [sp, #96]	; 0x60
 80134de:	9319      	str	r3, [sp, #100]	; 0x64
 80134e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80134e4:	e79d      	b.n	8013422 <_strtod_l+0x98a>
 80134e6:	f1b8 0f01 	cmp.w	r8, #1
 80134ea:	d103      	bne.n	80134f4 <_strtod_l+0xa5c>
 80134ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f43f ad87 	beq.w	8013002 <_strtod_l+0x56a>
 80134f4:	2600      	movs	r6, #0
 80134f6:	2400      	movs	r4, #0
 80134f8:	4f32      	ldr	r7, [pc, #200]	; (80135c4 <_strtod_l+0xb2c>)
 80134fa:	e791      	b.n	8013420 <_strtod_l+0x988>
 80134fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80134fe:	4d30      	ldr	r5, [pc, #192]	; (80135c0 <_strtod_l+0xb28>)
 8013500:	e7ea      	b.n	80134d8 <_strtod_l+0xa40>
 8013502:	4b2f      	ldr	r3, [pc, #188]	; (80135c0 <_strtod_l+0xb28>)
 8013504:	2200      	movs	r2, #0
 8013506:	4630      	mov	r0, r6
 8013508:	4639      	mov	r1, r7
 801350a:	f7ed f82b 	bl	8000564 <__aeabi_dmul>
 801350e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013510:	4604      	mov	r4, r0
 8013512:	460d      	mov	r5, r1
 8013514:	b933      	cbnz	r3, 8013524 <_strtod_l+0xa8c>
 8013516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801351a:	9010      	str	r0, [sp, #64]	; 0x40
 801351c:	9311      	str	r3, [sp, #68]	; 0x44
 801351e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013522:	e77e      	b.n	8013422 <_strtod_l+0x98a>
 8013524:	4602      	mov	r2, r0
 8013526:	460b      	mov	r3, r1
 8013528:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801352c:	e7f7      	b.n	801351e <_strtod_l+0xa86>
 801352e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013532:	9b05      	ldr	r3, [sp, #20]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1a8      	bne.n	801348a <_strtod_l+0x9f2>
 8013538:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801353c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801353e:	0d1b      	lsrs	r3, r3, #20
 8013540:	051b      	lsls	r3, r3, #20
 8013542:	429a      	cmp	r2, r3
 8013544:	d1a1      	bne.n	801348a <_strtod_l+0x9f2>
 8013546:	4620      	mov	r0, r4
 8013548:	4629      	mov	r1, r5
 801354a:	f7ed fe85 	bl	8001258 <__aeabi_d2lz>
 801354e:	f7ec ffdb 	bl	8000508 <__aeabi_l2d>
 8013552:	4602      	mov	r2, r0
 8013554:	460b      	mov	r3, r1
 8013556:	4620      	mov	r0, r4
 8013558:	4629      	mov	r1, r5
 801355a:	f7ec fe4b 	bl	80001f4 <__aeabi_dsub>
 801355e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013564:	ea43 0308 	orr.w	r3, r3, r8
 8013568:	4313      	orrs	r3, r2
 801356a:	4604      	mov	r4, r0
 801356c:	460d      	mov	r5, r1
 801356e:	d066      	beq.n	801363e <_strtod_l+0xba6>
 8013570:	a309      	add	r3, pc, #36	; (adr r3, 8013598 <_strtod_l+0xb00>)
 8013572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013576:	f7ed fa67 	bl	8000a48 <__aeabi_dcmplt>
 801357a:	2800      	cmp	r0, #0
 801357c:	f47f acda 	bne.w	8012f34 <_strtod_l+0x49c>
 8013580:	a307      	add	r3, pc, #28	; (adr r3, 80135a0 <_strtod_l+0xb08>)
 8013582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013586:	4620      	mov	r0, r4
 8013588:	4629      	mov	r1, r5
 801358a:	f7ed fa7b 	bl	8000a84 <__aeabi_dcmpgt>
 801358e:	2800      	cmp	r0, #0
 8013590:	f43f af7b 	beq.w	801348a <_strtod_l+0x9f2>
 8013594:	e4ce      	b.n	8012f34 <_strtod_l+0x49c>
 8013596:	bf00      	nop
 8013598:	94a03595 	.word	0x94a03595
 801359c:	3fdfffff 	.word	0x3fdfffff
 80135a0:	35afe535 	.word	0x35afe535
 80135a4:	3fe00000 	.word	0x3fe00000
 80135a8:	000fffff 	.word	0x000fffff
 80135ac:	7ff00000 	.word	0x7ff00000
 80135b0:	7fefffff 	.word	0x7fefffff
 80135b4:	3ff00000 	.word	0x3ff00000
 80135b8:	7fe00000 	.word	0x7fe00000
 80135bc:	7c9fffff 	.word	0x7c9fffff
 80135c0:	3fe00000 	.word	0x3fe00000
 80135c4:	bff00000 	.word	0xbff00000
 80135c8:	9b05      	ldr	r3, [sp, #20]
 80135ca:	b313      	cbz	r3, 8013612 <_strtod_l+0xb7a>
 80135cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80135d2:	d81e      	bhi.n	8013612 <_strtod_l+0xb7a>
 80135d4:	a326      	add	r3, pc, #152	; (adr r3, 8013670 <_strtod_l+0xbd8>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	4620      	mov	r0, r4
 80135dc:	4629      	mov	r1, r5
 80135de:	f7ed fa3d 	bl	8000a5c <__aeabi_dcmple>
 80135e2:	b190      	cbz	r0, 801360a <_strtod_l+0xb72>
 80135e4:	4629      	mov	r1, r5
 80135e6:	4620      	mov	r0, r4
 80135e8:	f7ed fa94 	bl	8000b14 <__aeabi_d2uiz>
 80135ec:	2801      	cmp	r0, #1
 80135ee:	bf38      	it	cc
 80135f0:	2001      	movcc	r0, #1
 80135f2:	f7ec ff3d 	bl	8000470 <__aeabi_ui2d>
 80135f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135f8:	4604      	mov	r4, r0
 80135fa:	460d      	mov	r5, r1
 80135fc:	b9d3      	cbnz	r3, 8013634 <_strtod_l+0xb9c>
 80135fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013602:	9012      	str	r0, [sp, #72]	; 0x48
 8013604:	9313      	str	r3, [sp, #76]	; 0x4c
 8013606:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801360a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801360c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013610:	1a9f      	subs	r7, r3, r2
 8013612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013616:	f001 fe43 	bl	80152a0 <__ulp>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	4630      	mov	r0, r6
 8013620:	4639      	mov	r1, r7
 8013622:	f7ec ff9f 	bl	8000564 <__aeabi_dmul>
 8013626:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801362a:	f7ec fde5 	bl	80001f8 <__adddf3>
 801362e:	4680      	mov	r8, r0
 8013630:	4689      	mov	r9, r1
 8013632:	e77e      	b.n	8013532 <_strtod_l+0xa9a>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801363c:	e7e3      	b.n	8013606 <_strtod_l+0xb6e>
 801363e:	a30e      	add	r3, pc, #56	; (adr r3, 8013678 <_strtod_l+0xbe0>)
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	f7ed fa00 	bl	8000a48 <__aeabi_dcmplt>
 8013648:	e7a1      	b.n	801358e <_strtod_l+0xaf6>
 801364a:	2300      	movs	r3, #0
 801364c:	930c      	str	r3, [sp, #48]	; 0x30
 801364e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013652:	6013      	str	r3, [r2, #0]
 8013654:	f7ff ba65 	b.w	8012b22 <_strtod_l+0x8a>
 8013658:	2b65      	cmp	r3, #101	; 0x65
 801365a:	f43f ab5c 	beq.w	8012d16 <_strtod_l+0x27e>
 801365e:	2b45      	cmp	r3, #69	; 0x45
 8013660:	f43f ab59 	beq.w	8012d16 <_strtod_l+0x27e>
 8013664:	2201      	movs	r2, #1
 8013666:	f7ff bb8d 	b.w	8012d84 <_strtod_l+0x2ec>
 801366a:	bf00      	nop
 801366c:	f3af 8000 	nop.w
 8013670:	ffc00000 	.word	0xffc00000
 8013674:	41dfffff 	.word	0x41dfffff
 8013678:	94a03595 	.word	0x94a03595
 801367c:	3fcfffff 	.word	0x3fcfffff

08013680 <_strtod_r>:
 8013680:	4b01      	ldr	r3, [pc, #4]	; (8013688 <_strtod_r+0x8>)
 8013682:	f7ff ba09 	b.w	8012a98 <_strtod_l>
 8013686:	bf00      	nop
 8013688:	200002b0 	.word	0x200002b0

0801368c <_strtol_l.isra.0>:
 801368c:	2b01      	cmp	r3, #1
 801368e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013692:	4686      	mov	lr, r0
 8013694:	d001      	beq.n	801369a <_strtol_l.isra.0+0xe>
 8013696:	2b24      	cmp	r3, #36	; 0x24
 8013698:	d906      	bls.n	80136a8 <_strtol_l.isra.0+0x1c>
 801369a:	f7fe fa1d 	bl	8011ad8 <__errno>
 801369e:	2316      	movs	r3, #22
 80136a0:	6003      	str	r3, [r0, #0]
 80136a2:	2000      	movs	r0, #0
 80136a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136a8:	468c      	mov	ip, r1
 80136aa:	4e3a      	ldr	r6, [pc, #232]	; (8013794 <_strtol_l.isra.0+0x108>)
 80136ac:	4660      	mov	r0, ip
 80136ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80136b2:	5da5      	ldrb	r5, [r4, r6]
 80136b4:	f015 0508 	ands.w	r5, r5, #8
 80136b8:	d1f8      	bne.n	80136ac <_strtol_l.isra.0+0x20>
 80136ba:	2c2d      	cmp	r4, #45	; 0x2d
 80136bc:	d133      	bne.n	8013726 <_strtol_l.isra.0+0x9a>
 80136be:	f04f 0801 	mov.w	r8, #1
 80136c2:	f89c 4000 	ldrb.w	r4, [ip]
 80136c6:	f100 0c02 	add.w	ip, r0, #2
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d05d      	beq.n	801378a <_strtol_l.isra.0+0xfe>
 80136ce:	2b10      	cmp	r3, #16
 80136d0:	d10c      	bne.n	80136ec <_strtol_l.isra.0+0x60>
 80136d2:	2c30      	cmp	r4, #48	; 0x30
 80136d4:	d10a      	bne.n	80136ec <_strtol_l.isra.0+0x60>
 80136d6:	f89c 0000 	ldrb.w	r0, [ip]
 80136da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80136de:	2858      	cmp	r0, #88	; 0x58
 80136e0:	d14e      	bne.n	8013780 <_strtol_l.isra.0+0xf4>
 80136e2:	2310      	movs	r3, #16
 80136e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80136e8:	f10c 0c02 	add.w	ip, ip, #2
 80136ec:	2500      	movs	r5, #0
 80136ee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80136f2:	3f01      	subs	r7, #1
 80136f4:	fbb7 f9f3 	udiv	r9, r7, r3
 80136f8:	4628      	mov	r0, r5
 80136fa:	fb03 7a19 	mls	sl, r3, r9, r7
 80136fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013702:	2e09      	cmp	r6, #9
 8013704:	d818      	bhi.n	8013738 <_strtol_l.isra.0+0xac>
 8013706:	4634      	mov	r4, r6
 8013708:	42a3      	cmp	r3, r4
 801370a:	dd24      	ble.n	8013756 <_strtol_l.isra.0+0xca>
 801370c:	2d00      	cmp	r5, #0
 801370e:	db1f      	blt.n	8013750 <_strtol_l.isra.0+0xc4>
 8013710:	4581      	cmp	r9, r0
 8013712:	d31d      	bcc.n	8013750 <_strtol_l.isra.0+0xc4>
 8013714:	d101      	bne.n	801371a <_strtol_l.isra.0+0x8e>
 8013716:	45a2      	cmp	sl, r4
 8013718:	db1a      	blt.n	8013750 <_strtol_l.isra.0+0xc4>
 801371a:	2501      	movs	r5, #1
 801371c:	fb00 4003 	mla	r0, r0, r3, r4
 8013720:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013724:	e7eb      	b.n	80136fe <_strtol_l.isra.0+0x72>
 8013726:	2c2b      	cmp	r4, #43	; 0x2b
 8013728:	bf08      	it	eq
 801372a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801372e:	46a8      	mov	r8, r5
 8013730:	bf08      	it	eq
 8013732:	f100 0c02 	addeq.w	ip, r0, #2
 8013736:	e7c8      	b.n	80136ca <_strtol_l.isra.0+0x3e>
 8013738:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801373c:	2e19      	cmp	r6, #25
 801373e:	d801      	bhi.n	8013744 <_strtol_l.isra.0+0xb8>
 8013740:	3c37      	subs	r4, #55	; 0x37
 8013742:	e7e1      	b.n	8013708 <_strtol_l.isra.0+0x7c>
 8013744:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013748:	2e19      	cmp	r6, #25
 801374a:	d804      	bhi.n	8013756 <_strtol_l.isra.0+0xca>
 801374c:	3c57      	subs	r4, #87	; 0x57
 801374e:	e7db      	b.n	8013708 <_strtol_l.isra.0+0x7c>
 8013750:	f04f 35ff 	mov.w	r5, #4294967295
 8013754:	e7e4      	b.n	8013720 <_strtol_l.isra.0+0x94>
 8013756:	2d00      	cmp	r5, #0
 8013758:	da08      	bge.n	801376c <_strtol_l.isra.0+0xe0>
 801375a:	2322      	movs	r3, #34	; 0x22
 801375c:	4638      	mov	r0, r7
 801375e:	f8ce 3000 	str.w	r3, [lr]
 8013762:	2a00      	cmp	r2, #0
 8013764:	d09e      	beq.n	80136a4 <_strtol_l.isra.0+0x18>
 8013766:	f10c 31ff 	add.w	r1, ip, #4294967295
 801376a:	e007      	b.n	801377c <_strtol_l.isra.0+0xf0>
 801376c:	f1b8 0f00 	cmp.w	r8, #0
 8013770:	d000      	beq.n	8013774 <_strtol_l.isra.0+0xe8>
 8013772:	4240      	negs	r0, r0
 8013774:	2a00      	cmp	r2, #0
 8013776:	d095      	beq.n	80136a4 <_strtol_l.isra.0+0x18>
 8013778:	2d00      	cmp	r5, #0
 801377a:	d1f4      	bne.n	8013766 <_strtol_l.isra.0+0xda>
 801377c:	6011      	str	r1, [r2, #0]
 801377e:	e791      	b.n	80136a4 <_strtol_l.isra.0+0x18>
 8013780:	2430      	movs	r4, #48	; 0x30
 8013782:	2b00      	cmp	r3, #0
 8013784:	d1b2      	bne.n	80136ec <_strtol_l.isra.0+0x60>
 8013786:	2308      	movs	r3, #8
 8013788:	e7b0      	b.n	80136ec <_strtol_l.isra.0+0x60>
 801378a:	2c30      	cmp	r4, #48	; 0x30
 801378c:	d0a3      	beq.n	80136d6 <_strtol_l.isra.0+0x4a>
 801378e:	230a      	movs	r3, #10
 8013790:	e7ac      	b.n	80136ec <_strtol_l.isra.0+0x60>
 8013792:	bf00      	nop
 8013794:	08016ad1 	.word	0x08016ad1

08013798 <_strtol_r>:
 8013798:	f7ff bf78 	b.w	801368c <_strtol_l.isra.0>

0801379c <quorem>:
 801379c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a0:	6903      	ldr	r3, [r0, #16]
 80137a2:	690c      	ldr	r4, [r1, #16]
 80137a4:	4607      	mov	r7, r0
 80137a6:	42a3      	cmp	r3, r4
 80137a8:	f2c0 8083 	blt.w	80138b2 <quorem+0x116>
 80137ac:	3c01      	subs	r4, #1
 80137ae:	f100 0514 	add.w	r5, r0, #20
 80137b2:	f101 0814 	add.w	r8, r1, #20
 80137b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137ba:	9301      	str	r3, [sp, #4]
 80137bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80137c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137c4:	3301      	adds	r3, #1
 80137c6:	429a      	cmp	r2, r3
 80137c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80137cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80137d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80137d4:	d332      	bcc.n	801383c <quorem+0xa0>
 80137d6:	f04f 0e00 	mov.w	lr, #0
 80137da:	4640      	mov	r0, r8
 80137dc:	46ac      	mov	ip, r5
 80137de:	46f2      	mov	sl, lr
 80137e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80137e4:	b293      	uxth	r3, r2
 80137e6:	fb06 e303 	mla	r3, r6, r3, lr
 80137ea:	0c12      	lsrs	r2, r2, #16
 80137ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80137f0:	fb06 e202 	mla	r2, r6, r2, lr
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	ebaa 0303 	sub.w	r3, sl, r3
 80137fa:	f8dc a000 	ldr.w	sl, [ip]
 80137fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013802:	fa1f fa8a 	uxth.w	sl, sl
 8013806:	4453      	add	r3, sl
 8013808:	fa1f fa82 	uxth.w	sl, r2
 801380c:	f8dc 2000 	ldr.w	r2, [ip]
 8013810:	4581      	cmp	r9, r0
 8013812:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013816:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801381a:	b29b      	uxth	r3, r3
 801381c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013820:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013824:	f84c 3b04 	str.w	r3, [ip], #4
 8013828:	d2da      	bcs.n	80137e0 <quorem+0x44>
 801382a:	f855 300b 	ldr.w	r3, [r5, fp]
 801382e:	b92b      	cbnz	r3, 801383c <quorem+0xa0>
 8013830:	9b01      	ldr	r3, [sp, #4]
 8013832:	3b04      	subs	r3, #4
 8013834:	429d      	cmp	r5, r3
 8013836:	461a      	mov	r2, r3
 8013838:	d32f      	bcc.n	801389a <quorem+0xfe>
 801383a:	613c      	str	r4, [r7, #16]
 801383c:	4638      	mov	r0, r7
 801383e:	f001 fc83 	bl	8015148 <__mcmp>
 8013842:	2800      	cmp	r0, #0
 8013844:	db25      	blt.n	8013892 <quorem+0xf6>
 8013846:	4628      	mov	r0, r5
 8013848:	f04f 0c00 	mov.w	ip, #0
 801384c:	3601      	adds	r6, #1
 801384e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013852:	f8d0 e000 	ldr.w	lr, [r0]
 8013856:	b28b      	uxth	r3, r1
 8013858:	ebac 0303 	sub.w	r3, ip, r3
 801385c:	fa1f f28e 	uxth.w	r2, lr
 8013860:	4413      	add	r3, r2
 8013862:	0c0a      	lsrs	r2, r1, #16
 8013864:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801386c:	b29b      	uxth	r3, r3
 801386e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013872:	45c1      	cmp	r9, r8
 8013874:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013878:	f840 3b04 	str.w	r3, [r0], #4
 801387c:	d2e7      	bcs.n	801384e <quorem+0xb2>
 801387e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013886:	b922      	cbnz	r2, 8013892 <quorem+0xf6>
 8013888:	3b04      	subs	r3, #4
 801388a:	429d      	cmp	r5, r3
 801388c:	461a      	mov	r2, r3
 801388e:	d30a      	bcc.n	80138a6 <quorem+0x10a>
 8013890:	613c      	str	r4, [r7, #16]
 8013892:	4630      	mov	r0, r6
 8013894:	b003      	add	sp, #12
 8013896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801389a:	6812      	ldr	r2, [r2, #0]
 801389c:	3b04      	subs	r3, #4
 801389e:	2a00      	cmp	r2, #0
 80138a0:	d1cb      	bne.n	801383a <quorem+0x9e>
 80138a2:	3c01      	subs	r4, #1
 80138a4:	e7c6      	b.n	8013834 <quorem+0x98>
 80138a6:	6812      	ldr	r2, [r2, #0]
 80138a8:	3b04      	subs	r3, #4
 80138aa:	2a00      	cmp	r2, #0
 80138ac:	d1f0      	bne.n	8013890 <quorem+0xf4>
 80138ae:	3c01      	subs	r4, #1
 80138b0:	e7eb      	b.n	801388a <quorem+0xee>
 80138b2:	2000      	movs	r0, #0
 80138b4:	e7ee      	b.n	8013894 <quorem+0xf8>
	...

080138b8 <_dtoa_r>:
 80138b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138bc:	4616      	mov	r6, r2
 80138be:	461f      	mov	r7, r3
 80138c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80138c2:	b099      	sub	sp, #100	; 0x64
 80138c4:	4605      	mov	r5, r0
 80138c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80138ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80138ce:	b974      	cbnz	r4, 80138ee <_dtoa_r+0x36>
 80138d0:	2010      	movs	r0, #16
 80138d2:	f7fe f92b 	bl	8011b2c <malloc>
 80138d6:	4602      	mov	r2, r0
 80138d8:	6268      	str	r0, [r5, #36]	; 0x24
 80138da:	b920      	cbnz	r0, 80138e6 <_dtoa_r+0x2e>
 80138dc:	21ea      	movs	r1, #234	; 0xea
 80138de:	4bae      	ldr	r3, [pc, #696]	; (8013b98 <_dtoa_r+0x2e0>)
 80138e0:	48ae      	ldr	r0, [pc, #696]	; (8013b9c <_dtoa_r+0x2e4>)
 80138e2:	f001 ffb5 	bl	8015850 <__assert_func>
 80138e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138ea:	6004      	str	r4, [r0, #0]
 80138ec:	60c4      	str	r4, [r0, #12]
 80138ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138f0:	6819      	ldr	r1, [r3, #0]
 80138f2:	b151      	cbz	r1, 801390a <_dtoa_r+0x52>
 80138f4:	685a      	ldr	r2, [r3, #4]
 80138f6:	2301      	movs	r3, #1
 80138f8:	4093      	lsls	r3, r2
 80138fa:	604a      	str	r2, [r1, #4]
 80138fc:	608b      	str	r3, [r1, #8]
 80138fe:	4628      	mov	r0, r5
 8013900:	f001 f99e 	bl	8014c40 <_Bfree>
 8013904:	2200      	movs	r2, #0
 8013906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	1e3b      	subs	r3, r7, #0
 801390c:	bfaf      	iteee	ge
 801390e:	2300      	movge	r3, #0
 8013910:	2201      	movlt	r2, #1
 8013912:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013916:	9305      	strlt	r3, [sp, #20]
 8013918:	bfa8      	it	ge
 801391a:	f8c8 3000 	strge.w	r3, [r8]
 801391e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013922:	4b9f      	ldr	r3, [pc, #636]	; (8013ba0 <_dtoa_r+0x2e8>)
 8013924:	bfb8      	it	lt
 8013926:	f8c8 2000 	strlt.w	r2, [r8]
 801392a:	ea33 0309 	bics.w	r3, r3, r9
 801392e:	d119      	bne.n	8013964 <_dtoa_r+0xac>
 8013930:	f242 730f 	movw	r3, #9999	; 0x270f
 8013934:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801393c:	4333      	orrs	r3, r6
 801393e:	f000 8580 	beq.w	8014442 <_dtoa_r+0xb8a>
 8013942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013944:	b953      	cbnz	r3, 801395c <_dtoa_r+0xa4>
 8013946:	4b97      	ldr	r3, [pc, #604]	; (8013ba4 <_dtoa_r+0x2ec>)
 8013948:	e022      	b.n	8013990 <_dtoa_r+0xd8>
 801394a:	4b97      	ldr	r3, [pc, #604]	; (8013ba8 <_dtoa_r+0x2f0>)
 801394c:	9308      	str	r3, [sp, #32]
 801394e:	3308      	adds	r3, #8
 8013950:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	9808      	ldr	r0, [sp, #32]
 8013956:	b019      	add	sp, #100	; 0x64
 8013958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395c:	4b91      	ldr	r3, [pc, #580]	; (8013ba4 <_dtoa_r+0x2ec>)
 801395e:	9308      	str	r3, [sp, #32]
 8013960:	3303      	adds	r3, #3
 8013962:	e7f5      	b.n	8013950 <_dtoa_r+0x98>
 8013964:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013968:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801396c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013970:	2200      	movs	r2, #0
 8013972:	2300      	movs	r3, #0
 8013974:	f7ed f85e 	bl	8000a34 <__aeabi_dcmpeq>
 8013978:	4680      	mov	r8, r0
 801397a:	b158      	cbz	r0, 8013994 <_dtoa_r+0xdc>
 801397c:	2301      	movs	r3, #1
 801397e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013980:	6013      	str	r3, [r2, #0]
 8013982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 8559 	beq.w	801443c <_dtoa_r+0xb84>
 801398a:	4888      	ldr	r0, [pc, #544]	; (8013bac <_dtoa_r+0x2f4>)
 801398c:	6018      	str	r0, [r3, #0]
 801398e:	1e43      	subs	r3, r0, #1
 8013990:	9308      	str	r3, [sp, #32]
 8013992:	e7df      	b.n	8013954 <_dtoa_r+0x9c>
 8013994:	ab16      	add	r3, sp, #88	; 0x58
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	ab17      	add	r3, sp, #92	; 0x5c
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	4628      	mov	r0, r5
 801399e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80139a2:	f001 fcf7 	bl	8015394 <__d2b>
 80139a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80139aa:	4682      	mov	sl, r0
 80139ac:	2c00      	cmp	r4, #0
 80139ae:	d07e      	beq.n	8013aae <_dtoa_r+0x1f6>
 80139b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80139ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80139c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80139c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80139ca:	2200      	movs	r2, #0
 80139cc:	4b78      	ldr	r3, [pc, #480]	; (8013bb0 <_dtoa_r+0x2f8>)
 80139ce:	f7ec fc11 	bl	80001f4 <__aeabi_dsub>
 80139d2:	a36b      	add	r3, pc, #428	; (adr r3, 8013b80 <_dtoa_r+0x2c8>)
 80139d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d8:	f7ec fdc4 	bl	8000564 <__aeabi_dmul>
 80139dc:	a36a      	add	r3, pc, #424	; (adr r3, 8013b88 <_dtoa_r+0x2d0>)
 80139de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e2:	f7ec fc09 	bl	80001f8 <__adddf3>
 80139e6:	4606      	mov	r6, r0
 80139e8:	4620      	mov	r0, r4
 80139ea:	460f      	mov	r7, r1
 80139ec:	f7ec fd50 	bl	8000490 <__aeabi_i2d>
 80139f0:	a367      	add	r3, pc, #412	; (adr r3, 8013b90 <_dtoa_r+0x2d8>)
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	f7ec fdb5 	bl	8000564 <__aeabi_dmul>
 80139fa:	4602      	mov	r2, r0
 80139fc:	460b      	mov	r3, r1
 80139fe:	4630      	mov	r0, r6
 8013a00:	4639      	mov	r1, r7
 8013a02:	f7ec fbf9 	bl	80001f8 <__adddf3>
 8013a06:	4606      	mov	r6, r0
 8013a08:	460f      	mov	r7, r1
 8013a0a:	f7ed f85b 	bl	8000ac4 <__aeabi_d2iz>
 8013a0e:	2200      	movs	r2, #0
 8013a10:	4681      	mov	r9, r0
 8013a12:	2300      	movs	r3, #0
 8013a14:	4630      	mov	r0, r6
 8013a16:	4639      	mov	r1, r7
 8013a18:	f7ed f816 	bl	8000a48 <__aeabi_dcmplt>
 8013a1c:	b148      	cbz	r0, 8013a32 <_dtoa_r+0x17a>
 8013a1e:	4648      	mov	r0, r9
 8013a20:	f7ec fd36 	bl	8000490 <__aeabi_i2d>
 8013a24:	4632      	mov	r2, r6
 8013a26:	463b      	mov	r3, r7
 8013a28:	f7ed f804 	bl	8000a34 <__aeabi_dcmpeq>
 8013a2c:	b908      	cbnz	r0, 8013a32 <_dtoa_r+0x17a>
 8013a2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a32:	f1b9 0f16 	cmp.w	r9, #22
 8013a36:	d857      	bhi.n	8013ae8 <_dtoa_r+0x230>
 8013a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013a3c:	4b5d      	ldr	r3, [pc, #372]	; (8013bb4 <_dtoa_r+0x2fc>)
 8013a3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	f7ec ffff 	bl	8000a48 <__aeabi_dcmplt>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d04e      	beq.n	8013aec <_dtoa_r+0x234>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a58:	1b1c      	subs	r4, r3, r4
 8013a5a:	1e63      	subs	r3, r4, #1
 8013a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a5e:	bf49      	itett	mi
 8013a60:	f1c4 0301 	rsbmi	r3, r4, #1
 8013a64:	2300      	movpl	r3, #0
 8013a66:	9306      	strmi	r3, [sp, #24]
 8013a68:	2300      	movmi	r3, #0
 8013a6a:	bf54      	ite	pl
 8013a6c:	9306      	strpl	r3, [sp, #24]
 8013a6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013a70:	f1b9 0f00 	cmp.w	r9, #0
 8013a74:	db3c      	blt.n	8013af0 <_dtoa_r+0x238>
 8013a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a78:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013a7c:	444b      	add	r3, r9
 8013a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a80:	2300      	movs	r3, #0
 8013a82:	930a      	str	r3, [sp, #40]	; 0x28
 8013a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a86:	2b09      	cmp	r3, #9
 8013a88:	d86c      	bhi.n	8013b64 <_dtoa_r+0x2ac>
 8013a8a:	2b05      	cmp	r3, #5
 8013a8c:	bfc4      	itt	gt
 8013a8e:	3b04      	subgt	r3, #4
 8013a90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a94:	bfc8      	it	gt
 8013a96:	2400      	movgt	r4, #0
 8013a98:	f1a3 0302 	sub.w	r3, r3, #2
 8013a9c:	bfd8      	it	le
 8013a9e:	2401      	movle	r4, #1
 8013aa0:	2b03      	cmp	r3, #3
 8013aa2:	f200 808b 	bhi.w	8013bbc <_dtoa_r+0x304>
 8013aa6:	e8df f003 	tbb	[pc, r3]
 8013aaa:	4f2d      	.short	0x4f2d
 8013aac:	5b4d      	.short	0x5b4d
 8013aae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013ab2:	441c      	add	r4, r3
 8013ab4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013ab8:	2b20      	cmp	r3, #32
 8013aba:	bfc3      	ittte	gt
 8013abc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ac0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8013ac4:	fa09 f303 	lslgt.w	r3, r9, r3
 8013ac8:	f1c3 0320 	rsble	r3, r3, #32
 8013acc:	bfc6      	itte	gt
 8013ace:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013ad2:	4318      	orrgt	r0, r3
 8013ad4:	fa06 f003 	lslle.w	r0, r6, r3
 8013ad8:	f7ec fcca 	bl	8000470 <__aeabi_ui2d>
 8013adc:	2301      	movs	r3, #1
 8013ade:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013ae2:	3c01      	subs	r4, #1
 8013ae4:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ae6:	e770      	b.n	80139ca <_dtoa_r+0x112>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e7b3      	b.n	8013a54 <_dtoa_r+0x19c>
 8013aec:	900f      	str	r0, [sp, #60]	; 0x3c
 8013aee:	e7b2      	b.n	8013a56 <_dtoa_r+0x19e>
 8013af0:	9b06      	ldr	r3, [sp, #24]
 8013af2:	eba3 0309 	sub.w	r3, r3, r9
 8013af6:	9306      	str	r3, [sp, #24]
 8013af8:	f1c9 0300 	rsb	r3, r9, #0
 8013afc:	930a      	str	r3, [sp, #40]	; 0x28
 8013afe:	2300      	movs	r3, #0
 8013b00:	930e      	str	r3, [sp, #56]	; 0x38
 8013b02:	e7bf      	b.n	8013a84 <_dtoa_r+0x1cc>
 8013b04:	2300      	movs	r3, #0
 8013b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	dc59      	bgt.n	8013bc2 <_dtoa_r+0x30a>
 8013b0e:	f04f 0b01 	mov.w	fp, #1
 8013b12:	465b      	mov	r3, fp
 8013b14:	f8cd b008 	str.w	fp, [sp, #8]
 8013b18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013b20:	6042      	str	r2, [r0, #4]
 8013b22:	2204      	movs	r2, #4
 8013b24:	f102 0614 	add.w	r6, r2, #20
 8013b28:	429e      	cmp	r6, r3
 8013b2a:	6841      	ldr	r1, [r0, #4]
 8013b2c:	d94f      	bls.n	8013bce <_dtoa_r+0x316>
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f001 f846 	bl	8014bc0 <_Balloc>
 8013b34:	9008      	str	r0, [sp, #32]
 8013b36:	2800      	cmp	r0, #0
 8013b38:	d14d      	bne.n	8013bd6 <_dtoa_r+0x31e>
 8013b3a:	4602      	mov	r2, r0
 8013b3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013b40:	4b1d      	ldr	r3, [pc, #116]	; (8013bb8 <_dtoa_r+0x300>)
 8013b42:	e6cd      	b.n	80138e0 <_dtoa_r+0x28>
 8013b44:	2301      	movs	r3, #1
 8013b46:	e7de      	b.n	8013b06 <_dtoa_r+0x24e>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b4e:	eb09 0b03 	add.w	fp, r9, r3
 8013b52:	f10b 0301 	add.w	r3, fp, #1
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	9302      	str	r3, [sp, #8]
 8013b5a:	bfb8      	it	lt
 8013b5c:	2301      	movlt	r3, #1
 8013b5e:	e7dd      	b.n	8013b1c <_dtoa_r+0x264>
 8013b60:	2301      	movs	r3, #1
 8013b62:	e7f2      	b.n	8013b4a <_dtoa_r+0x292>
 8013b64:	2401      	movs	r4, #1
 8013b66:	2300      	movs	r3, #0
 8013b68:	940b      	str	r4, [sp, #44]	; 0x2c
 8013b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8013b6c:	f04f 3bff 	mov.w	fp, #4294967295
 8013b70:	2200      	movs	r2, #0
 8013b72:	2312      	movs	r3, #18
 8013b74:	f8cd b008 	str.w	fp, [sp, #8]
 8013b78:	9223      	str	r2, [sp, #140]	; 0x8c
 8013b7a:	e7cf      	b.n	8013b1c <_dtoa_r+0x264>
 8013b7c:	f3af 8000 	nop.w
 8013b80:	636f4361 	.word	0x636f4361
 8013b84:	3fd287a7 	.word	0x3fd287a7
 8013b88:	8b60c8b3 	.word	0x8b60c8b3
 8013b8c:	3fc68a28 	.word	0x3fc68a28
 8013b90:	509f79fb 	.word	0x509f79fb
 8013b94:	3fd34413 	.word	0x3fd34413
 8013b98:	08016bde 	.word	0x08016bde
 8013b9c:	08016bf5 	.word	0x08016bf5
 8013ba0:	7ff00000 	.word	0x7ff00000
 8013ba4:	08016bda 	.word	0x08016bda
 8013ba8:	08016bd1 	.word	0x08016bd1
 8013bac:	08016a55 	.word	0x08016a55
 8013bb0:	3ff80000 	.word	0x3ff80000
 8013bb4:	08016d70 	.word	0x08016d70
 8013bb8:	08016c54 	.word	0x08016c54
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bc0:	e7d4      	b.n	8013b6c <_dtoa_r+0x2b4>
 8013bc2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8013bc6:	465b      	mov	r3, fp
 8013bc8:	f8cd b008 	str.w	fp, [sp, #8]
 8013bcc:	e7a6      	b.n	8013b1c <_dtoa_r+0x264>
 8013bce:	3101      	adds	r1, #1
 8013bd0:	6041      	str	r1, [r0, #4]
 8013bd2:	0052      	lsls	r2, r2, #1
 8013bd4:	e7a6      	b.n	8013b24 <_dtoa_r+0x26c>
 8013bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013bd8:	9a08      	ldr	r2, [sp, #32]
 8013bda:	601a      	str	r2, [r3, #0]
 8013bdc:	9b02      	ldr	r3, [sp, #8]
 8013bde:	2b0e      	cmp	r3, #14
 8013be0:	f200 80a8 	bhi.w	8013d34 <_dtoa_r+0x47c>
 8013be4:	2c00      	cmp	r4, #0
 8013be6:	f000 80a5 	beq.w	8013d34 <_dtoa_r+0x47c>
 8013bea:	f1b9 0f00 	cmp.w	r9, #0
 8013bee:	dd34      	ble.n	8013c5a <_dtoa_r+0x3a2>
 8013bf0:	4a9a      	ldr	r2, [pc, #616]	; (8013e5c <_dtoa_r+0x5a4>)
 8013bf2:	f009 030f 	and.w	r3, r9, #15
 8013bf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013bfa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8013bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013c06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8013c0a:	d016      	beq.n	8013c3a <_dtoa_r+0x382>
 8013c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c10:	4b93      	ldr	r3, [pc, #588]	; (8013e60 <_dtoa_r+0x5a8>)
 8013c12:	2703      	movs	r7, #3
 8013c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c18:	f7ec fdce 	bl	80007b8 <__aeabi_ddiv>
 8013c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c20:	f004 040f 	and.w	r4, r4, #15
 8013c24:	4e8e      	ldr	r6, [pc, #568]	; (8013e60 <_dtoa_r+0x5a8>)
 8013c26:	b954      	cbnz	r4, 8013c3e <_dtoa_r+0x386>
 8013c28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c30:	f7ec fdc2 	bl	80007b8 <__aeabi_ddiv>
 8013c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c38:	e029      	b.n	8013c8e <_dtoa_r+0x3d6>
 8013c3a:	2702      	movs	r7, #2
 8013c3c:	e7f2      	b.n	8013c24 <_dtoa_r+0x36c>
 8013c3e:	07e1      	lsls	r1, r4, #31
 8013c40:	d508      	bpl.n	8013c54 <_dtoa_r+0x39c>
 8013c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c4a:	f7ec fc8b 	bl	8000564 <__aeabi_dmul>
 8013c4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013c52:	3701      	adds	r7, #1
 8013c54:	1064      	asrs	r4, r4, #1
 8013c56:	3608      	adds	r6, #8
 8013c58:	e7e5      	b.n	8013c26 <_dtoa_r+0x36e>
 8013c5a:	f000 80a5 	beq.w	8013da8 <_dtoa_r+0x4f0>
 8013c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c62:	f1c9 0400 	rsb	r4, r9, #0
 8013c66:	4b7d      	ldr	r3, [pc, #500]	; (8013e5c <_dtoa_r+0x5a4>)
 8013c68:	f004 020f 	and.w	r2, r4, #15
 8013c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c74:	f7ec fc76 	bl	8000564 <__aeabi_dmul>
 8013c78:	2702      	movs	r7, #2
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c80:	4e77      	ldr	r6, [pc, #476]	; (8013e60 <_dtoa_r+0x5a8>)
 8013c82:	1124      	asrs	r4, r4, #4
 8013c84:	2c00      	cmp	r4, #0
 8013c86:	f040 8084 	bne.w	8013d92 <_dtoa_r+0x4da>
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1d2      	bne.n	8013c34 <_dtoa_r+0x37c>
 8013c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	f000 808b 	beq.w	8013dac <_dtoa_r+0x4f4>
 8013c96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013c9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013c9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	4b6f      	ldr	r3, [pc, #444]	; (8013e64 <_dtoa_r+0x5ac>)
 8013ca6:	f7ec fecf 	bl	8000a48 <__aeabi_dcmplt>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d07e      	beq.n	8013dac <_dtoa_r+0x4f4>
 8013cae:	9b02      	ldr	r3, [sp, #8]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d07b      	beq.n	8013dac <_dtoa_r+0x4f4>
 8013cb4:	f1bb 0f00 	cmp.w	fp, #0
 8013cb8:	dd38      	ble.n	8013d2c <_dtoa_r+0x474>
 8013cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	4b69      	ldr	r3, [pc, #420]	; (8013e68 <_dtoa_r+0x5b0>)
 8013cc2:	f7ec fc4f 	bl	8000564 <__aeabi_dmul>
 8013cc6:	465c      	mov	r4, fp
 8013cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ccc:	f109 38ff 	add.w	r8, r9, #4294967295
 8013cd0:	3701      	adds	r7, #1
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	f7ec fbdc 	bl	8000490 <__aeabi_i2d>
 8013cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013cdc:	f7ec fc42 	bl	8000564 <__aeabi_dmul>
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	4b62      	ldr	r3, [pc, #392]	; (8013e6c <_dtoa_r+0x5b4>)
 8013ce4:	f7ec fa88 	bl	80001f8 <__adddf3>
 8013ce8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013cf0:	9611      	str	r6, [sp, #68]	; 0x44
 8013cf2:	2c00      	cmp	r4, #0
 8013cf4:	d15d      	bne.n	8013db2 <_dtoa_r+0x4fa>
 8013cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4b5c      	ldr	r3, [pc, #368]	; (8013e70 <_dtoa_r+0x5b8>)
 8013cfe:	f7ec fa79 	bl	80001f4 <__aeabi_dsub>
 8013d02:	4602      	mov	r2, r0
 8013d04:	460b      	mov	r3, r1
 8013d06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013d0a:	4633      	mov	r3, r6
 8013d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d0e:	f7ec feb9 	bl	8000a84 <__aeabi_dcmpgt>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f040 829e 	bne.w	8014254 <_dtoa_r+0x99c>
 8013d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013d22:	f7ec fe91 	bl	8000a48 <__aeabi_dcmplt>
 8013d26:	2800      	cmp	r0, #0
 8013d28:	f040 8292 	bne.w	8014250 <_dtoa_r+0x998>
 8013d2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013d30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013d34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f2c0 8153 	blt.w	8013fe2 <_dtoa_r+0x72a>
 8013d3c:	f1b9 0f0e 	cmp.w	r9, #14
 8013d40:	f300 814f 	bgt.w	8013fe2 <_dtoa_r+0x72a>
 8013d44:	4b45      	ldr	r3, [pc, #276]	; (8013e5c <_dtoa_r+0x5a4>)
 8013d46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013d4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013d4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013d52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f280 80db 	bge.w	8013f10 <_dtoa_r+0x658>
 8013d5a:	9b02      	ldr	r3, [sp, #8]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f300 80d7 	bgt.w	8013f10 <_dtoa_r+0x658>
 8013d62:	f040 8274 	bne.w	801424e <_dtoa_r+0x996>
 8013d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4b40      	ldr	r3, [pc, #256]	; (8013e70 <_dtoa_r+0x5b8>)
 8013d6e:	f7ec fbf9 	bl	8000564 <__aeabi_dmul>
 8013d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d76:	f7ec fe7b 	bl	8000a70 <__aeabi_dcmpge>
 8013d7a:	9c02      	ldr	r4, [sp, #8]
 8013d7c:	4626      	mov	r6, r4
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	f040 824a 	bne.w	8014218 <_dtoa_r+0x960>
 8013d84:	2331      	movs	r3, #49	; 0x31
 8013d86:	9f08      	ldr	r7, [sp, #32]
 8013d88:	f109 0901 	add.w	r9, r9, #1
 8013d8c:	f807 3b01 	strb.w	r3, [r7], #1
 8013d90:	e246      	b.n	8014220 <_dtoa_r+0x968>
 8013d92:	07e2      	lsls	r2, r4, #31
 8013d94:	d505      	bpl.n	8013da2 <_dtoa_r+0x4ea>
 8013d96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013d9a:	f7ec fbe3 	bl	8000564 <__aeabi_dmul>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	3701      	adds	r7, #1
 8013da2:	1064      	asrs	r4, r4, #1
 8013da4:	3608      	adds	r6, #8
 8013da6:	e76d      	b.n	8013c84 <_dtoa_r+0x3cc>
 8013da8:	2702      	movs	r7, #2
 8013daa:	e770      	b.n	8013c8e <_dtoa_r+0x3d6>
 8013dac:	46c8      	mov	r8, r9
 8013dae:	9c02      	ldr	r4, [sp, #8]
 8013db0:	e78f      	b.n	8013cd2 <_dtoa_r+0x41a>
 8013db2:	9908      	ldr	r1, [sp, #32]
 8013db4:	4b29      	ldr	r3, [pc, #164]	; (8013e5c <_dtoa_r+0x5a4>)
 8013db6:	4421      	add	r1, r4
 8013db8:	9112      	str	r1, [sp, #72]	; 0x48
 8013dba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013dbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013dc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013dc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013dc8:	2900      	cmp	r1, #0
 8013dca:	d055      	beq.n	8013e78 <_dtoa_r+0x5c0>
 8013dcc:	2000      	movs	r0, #0
 8013dce:	4929      	ldr	r1, [pc, #164]	; (8013e74 <_dtoa_r+0x5bc>)
 8013dd0:	f7ec fcf2 	bl	80007b8 <__aeabi_ddiv>
 8013dd4:	463b      	mov	r3, r7
 8013dd6:	4632      	mov	r2, r6
 8013dd8:	f7ec fa0c 	bl	80001f4 <__aeabi_dsub>
 8013ddc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013de0:	9f08      	ldr	r7, [sp, #32]
 8013de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013de6:	f7ec fe6d 	bl	8000ac4 <__aeabi_d2iz>
 8013dea:	4604      	mov	r4, r0
 8013dec:	f7ec fb50 	bl	8000490 <__aeabi_i2d>
 8013df0:	4602      	mov	r2, r0
 8013df2:	460b      	mov	r3, r1
 8013df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013df8:	f7ec f9fc 	bl	80001f4 <__aeabi_dsub>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	460b      	mov	r3, r1
 8013e00:	3430      	adds	r4, #48	; 0x30
 8013e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e0a:	f807 4b01 	strb.w	r4, [r7], #1
 8013e0e:	f7ec fe1b 	bl	8000a48 <__aeabi_dcmplt>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d174      	bne.n	8013f00 <_dtoa_r+0x648>
 8013e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	4911      	ldr	r1, [pc, #68]	; (8013e64 <_dtoa_r+0x5ac>)
 8013e1e:	f7ec f9e9 	bl	80001f4 <__aeabi_dsub>
 8013e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e26:	f7ec fe0f 	bl	8000a48 <__aeabi_dcmplt>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	f040 80b6 	bne.w	8013f9c <_dtoa_r+0x6e4>
 8013e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e32:	429f      	cmp	r7, r3
 8013e34:	f43f af7a 	beq.w	8013d2c <_dtoa_r+0x474>
 8013e38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	4b0a      	ldr	r3, [pc, #40]	; (8013e68 <_dtoa_r+0x5b0>)
 8013e40:	f7ec fb90 	bl	8000564 <__aeabi_dmul>
 8013e44:	2200      	movs	r2, #0
 8013e46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e4e:	4b06      	ldr	r3, [pc, #24]	; (8013e68 <_dtoa_r+0x5b0>)
 8013e50:	f7ec fb88 	bl	8000564 <__aeabi_dmul>
 8013e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e58:	e7c3      	b.n	8013de2 <_dtoa_r+0x52a>
 8013e5a:	bf00      	nop
 8013e5c:	08016d70 	.word	0x08016d70
 8013e60:	08016d48 	.word	0x08016d48
 8013e64:	3ff00000 	.word	0x3ff00000
 8013e68:	40240000 	.word	0x40240000
 8013e6c:	401c0000 	.word	0x401c0000
 8013e70:	40140000 	.word	0x40140000
 8013e74:	3fe00000 	.word	0x3fe00000
 8013e78:	4630      	mov	r0, r6
 8013e7a:	4639      	mov	r1, r7
 8013e7c:	f7ec fb72 	bl	8000564 <__aeabi_dmul>
 8013e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013e86:	9c08      	ldr	r4, [sp, #32]
 8013e88:	9314      	str	r3, [sp, #80]	; 0x50
 8013e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e8e:	f7ec fe19 	bl	8000ac4 <__aeabi_d2iz>
 8013e92:	9015      	str	r0, [sp, #84]	; 0x54
 8013e94:	f7ec fafc 	bl	8000490 <__aeabi_i2d>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ea0:	f7ec f9a8 	bl	80001f4 <__aeabi_dsub>
 8013ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	3330      	adds	r3, #48	; 0x30
 8013eaa:	f804 3b01 	strb.w	r3, [r4], #1
 8013eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013eb0:	460f      	mov	r7, r1
 8013eb2:	429c      	cmp	r4, r3
 8013eb4:	f04f 0200 	mov.w	r2, #0
 8013eb8:	d124      	bne.n	8013f04 <_dtoa_r+0x64c>
 8013eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ebe:	4bb3      	ldr	r3, [pc, #716]	; (801418c <_dtoa_r+0x8d4>)
 8013ec0:	f7ec f99a 	bl	80001f8 <__adddf3>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	4630      	mov	r0, r6
 8013eca:	4639      	mov	r1, r7
 8013ecc:	f7ec fdda 	bl	8000a84 <__aeabi_dcmpgt>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d162      	bne.n	8013f9a <_dtoa_r+0x6e2>
 8013ed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ed8:	2000      	movs	r0, #0
 8013eda:	49ac      	ldr	r1, [pc, #688]	; (801418c <_dtoa_r+0x8d4>)
 8013edc:	f7ec f98a 	bl	80001f4 <__aeabi_dsub>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	f7ec fdae 	bl	8000a48 <__aeabi_dcmplt>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	f43f af1d 	beq.w	8013d2c <_dtoa_r+0x474>
 8013ef2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013ef4:	1e7b      	subs	r3, r7, #1
 8013ef6:	9314      	str	r3, [sp, #80]	; 0x50
 8013ef8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013efc:	2b30      	cmp	r3, #48	; 0x30
 8013efe:	d0f8      	beq.n	8013ef2 <_dtoa_r+0x63a>
 8013f00:	46c1      	mov	r9, r8
 8013f02:	e03a      	b.n	8013f7a <_dtoa_r+0x6c2>
 8013f04:	4ba2      	ldr	r3, [pc, #648]	; (8014190 <_dtoa_r+0x8d8>)
 8013f06:	f7ec fb2d 	bl	8000564 <__aeabi_dmul>
 8013f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f0e:	e7bc      	b.n	8013e8a <_dtoa_r+0x5d2>
 8013f10:	9f08      	ldr	r7, [sp, #32]
 8013f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f1a:	f7ec fc4d 	bl	80007b8 <__aeabi_ddiv>
 8013f1e:	f7ec fdd1 	bl	8000ac4 <__aeabi_d2iz>
 8013f22:	4604      	mov	r4, r0
 8013f24:	f7ec fab4 	bl	8000490 <__aeabi_i2d>
 8013f28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f2c:	f7ec fb1a 	bl	8000564 <__aeabi_dmul>
 8013f30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013f34:	460b      	mov	r3, r1
 8013f36:	4602      	mov	r2, r0
 8013f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f3c:	f7ec f95a 	bl	80001f4 <__aeabi_dsub>
 8013f40:	f807 6b01 	strb.w	r6, [r7], #1
 8013f44:	9e08      	ldr	r6, [sp, #32]
 8013f46:	9b02      	ldr	r3, [sp, #8]
 8013f48:	1bbe      	subs	r6, r7, r6
 8013f4a:	42b3      	cmp	r3, r6
 8013f4c:	d13a      	bne.n	8013fc4 <_dtoa_r+0x70c>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	460b      	mov	r3, r1
 8013f52:	f7ec f951 	bl	80001f8 <__adddf3>
 8013f56:	4602      	mov	r2, r0
 8013f58:	460b      	mov	r3, r1
 8013f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f62:	f7ec fd8f 	bl	8000a84 <__aeabi_dcmpgt>
 8013f66:	bb58      	cbnz	r0, 8013fc0 <_dtoa_r+0x708>
 8013f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f70:	f7ec fd60 	bl	8000a34 <__aeabi_dcmpeq>
 8013f74:	b108      	cbz	r0, 8013f7a <_dtoa_r+0x6c2>
 8013f76:	07e1      	lsls	r1, r4, #31
 8013f78:	d422      	bmi.n	8013fc0 <_dtoa_r+0x708>
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	4651      	mov	r1, sl
 8013f7e:	f000 fe5f 	bl	8014c40 <_Bfree>
 8013f82:	2300      	movs	r3, #0
 8013f84:	703b      	strb	r3, [r7, #0]
 8013f86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013f88:	f109 0001 	add.w	r0, r9, #1
 8013f8c:	6018      	str	r0, [r3, #0]
 8013f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f43f acdf 	beq.w	8013954 <_dtoa_r+0x9c>
 8013f96:	601f      	str	r7, [r3, #0]
 8013f98:	e4dc      	b.n	8013954 <_dtoa_r+0x9c>
 8013f9a:	4627      	mov	r7, r4
 8013f9c:	463b      	mov	r3, r7
 8013f9e:	461f      	mov	r7, r3
 8013fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fa4:	2a39      	cmp	r2, #57	; 0x39
 8013fa6:	d107      	bne.n	8013fb8 <_dtoa_r+0x700>
 8013fa8:	9a08      	ldr	r2, [sp, #32]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d1f7      	bne.n	8013f9e <_dtoa_r+0x6e6>
 8013fae:	2230      	movs	r2, #48	; 0x30
 8013fb0:	9908      	ldr	r1, [sp, #32]
 8013fb2:	f108 0801 	add.w	r8, r8, #1
 8013fb6:	700a      	strb	r2, [r1, #0]
 8013fb8:	781a      	ldrb	r2, [r3, #0]
 8013fba:	3201      	adds	r2, #1
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	e79f      	b.n	8013f00 <_dtoa_r+0x648>
 8013fc0:	46c8      	mov	r8, r9
 8013fc2:	e7eb      	b.n	8013f9c <_dtoa_r+0x6e4>
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4b72      	ldr	r3, [pc, #456]	; (8014190 <_dtoa_r+0x8d8>)
 8013fc8:	f7ec facc 	bl	8000564 <__aeabi_dmul>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f7ec fd2c 	bl	8000a34 <__aeabi_dcmpeq>
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d098      	beq.n	8013f12 <_dtoa_r+0x65a>
 8013fe0:	e7cb      	b.n	8013f7a <_dtoa_r+0x6c2>
 8013fe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013fe4:	2a00      	cmp	r2, #0
 8013fe6:	f000 80cd 	beq.w	8014184 <_dtoa_r+0x8cc>
 8013fea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013fec:	2a01      	cmp	r2, #1
 8013fee:	f300 80af 	bgt.w	8014150 <_dtoa_r+0x898>
 8013ff2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013ff4:	2a00      	cmp	r2, #0
 8013ff6:	f000 80a7 	beq.w	8014148 <_dtoa_r+0x890>
 8013ffa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ffe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014000:	9f06      	ldr	r7, [sp, #24]
 8014002:	9a06      	ldr	r2, [sp, #24]
 8014004:	2101      	movs	r1, #1
 8014006:	441a      	add	r2, r3
 8014008:	9206      	str	r2, [sp, #24]
 801400a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801400c:	4628      	mov	r0, r5
 801400e:	441a      	add	r2, r3
 8014010:	9209      	str	r2, [sp, #36]	; 0x24
 8014012:	f000 ff19 	bl	8014e48 <__i2b>
 8014016:	4606      	mov	r6, r0
 8014018:	2f00      	cmp	r7, #0
 801401a:	dd0c      	ble.n	8014036 <_dtoa_r+0x77e>
 801401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801401e:	2b00      	cmp	r3, #0
 8014020:	dd09      	ble.n	8014036 <_dtoa_r+0x77e>
 8014022:	42bb      	cmp	r3, r7
 8014024:	bfa8      	it	ge
 8014026:	463b      	movge	r3, r7
 8014028:	9a06      	ldr	r2, [sp, #24]
 801402a:	1aff      	subs	r7, r7, r3
 801402c:	1ad2      	subs	r2, r2, r3
 801402e:	9206      	str	r2, [sp, #24]
 8014030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	9309      	str	r3, [sp, #36]	; 0x24
 8014036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014038:	b1f3      	cbz	r3, 8014078 <_dtoa_r+0x7c0>
 801403a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801403c:	2b00      	cmp	r3, #0
 801403e:	f000 80a9 	beq.w	8014194 <_dtoa_r+0x8dc>
 8014042:	2c00      	cmp	r4, #0
 8014044:	dd10      	ble.n	8014068 <_dtoa_r+0x7b0>
 8014046:	4631      	mov	r1, r6
 8014048:	4622      	mov	r2, r4
 801404a:	4628      	mov	r0, r5
 801404c:	f000 ffb6 	bl	8014fbc <__pow5mult>
 8014050:	4652      	mov	r2, sl
 8014052:	4601      	mov	r1, r0
 8014054:	4606      	mov	r6, r0
 8014056:	4628      	mov	r0, r5
 8014058:	f000 ff0c 	bl	8014e74 <__multiply>
 801405c:	4680      	mov	r8, r0
 801405e:	4651      	mov	r1, sl
 8014060:	4628      	mov	r0, r5
 8014062:	f000 fded 	bl	8014c40 <_Bfree>
 8014066:	46c2      	mov	sl, r8
 8014068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801406a:	1b1a      	subs	r2, r3, r4
 801406c:	d004      	beq.n	8014078 <_dtoa_r+0x7c0>
 801406e:	4651      	mov	r1, sl
 8014070:	4628      	mov	r0, r5
 8014072:	f000 ffa3 	bl	8014fbc <__pow5mult>
 8014076:	4682      	mov	sl, r0
 8014078:	2101      	movs	r1, #1
 801407a:	4628      	mov	r0, r5
 801407c:	f000 fee4 	bl	8014e48 <__i2b>
 8014080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014082:	4604      	mov	r4, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	f340 8087 	ble.w	8014198 <_dtoa_r+0x8e0>
 801408a:	461a      	mov	r2, r3
 801408c:	4601      	mov	r1, r0
 801408e:	4628      	mov	r0, r5
 8014090:	f000 ff94 	bl	8014fbc <__pow5mult>
 8014094:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014096:	4604      	mov	r4, r0
 8014098:	2b01      	cmp	r3, #1
 801409a:	f340 8080 	ble.w	801419e <_dtoa_r+0x8e6>
 801409e:	f04f 0800 	mov.w	r8, #0
 80140a2:	6923      	ldr	r3, [r4, #16]
 80140a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80140a8:	6918      	ldr	r0, [r3, #16]
 80140aa:	f000 fe7f 	bl	8014dac <__hi0bits>
 80140ae:	f1c0 0020 	rsb	r0, r0, #32
 80140b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b4:	4418      	add	r0, r3
 80140b6:	f010 001f 	ands.w	r0, r0, #31
 80140ba:	f000 8092 	beq.w	80141e2 <_dtoa_r+0x92a>
 80140be:	f1c0 0320 	rsb	r3, r0, #32
 80140c2:	2b04      	cmp	r3, #4
 80140c4:	f340 808a 	ble.w	80141dc <_dtoa_r+0x924>
 80140c8:	f1c0 001c 	rsb	r0, r0, #28
 80140cc:	9b06      	ldr	r3, [sp, #24]
 80140ce:	4407      	add	r7, r0
 80140d0:	4403      	add	r3, r0
 80140d2:	9306      	str	r3, [sp, #24]
 80140d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d6:	4403      	add	r3, r0
 80140d8:	9309      	str	r3, [sp, #36]	; 0x24
 80140da:	9b06      	ldr	r3, [sp, #24]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	dd05      	ble.n	80140ec <_dtoa_r+0x834>
 80140e0:	4651      	mov	r1, sl
 80140e2:	461a      	mov	r2, r3
 80140e4:	4628      	mov	r0, r5
 80140e6:	f000 ffc3 	bl	8015070 <__lshift>
 80140ea:	4682      	mov	sl, r0
 80140ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	dd05      	ble.n	80140fe <_dtoa_r+0x846>
 80140f2:	4621      	mov	r1, r4
 80140f4:	461a      	mov	r2, r3
 80140f6:	4628      	mov	r0, r5
 80140f8:	f000 ffba 	bl	8015070 <__lshift>
 80140fc:	4604      	mov	r4, r0
 80140fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014100:	2b00      	cmp	r3, #0
 8014102:	d070      	beq.n	80141e6 <_dtoa_r+0x92e>
 8014104:	4621      	mov	r1, r4
 8014106:	4650      	mov	r0, sl
 8014108:	f001 f81e 	bl	8015148 <__mcmp>
 801410c:	2800      	cmp	r0, #0
 801410e:	da6a      	bge.n	80141e6 <_dtoa_r+0x92e>
 8014110:	2300      	movs	r3, #0
 8014112:	4651      	mov	r1, sl
 8014114:	220a      	movs	r2, #10
 8014116:	4628      	mov	r0, r5
 8014118:	f000 fdb4 	bl	8014c84 <__multadd>
 801411c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801411e:	4682      	mov	sl, r0
 8014120:	f109 39ff 	add.w	r9, r9, #4294967295
 8014124:	2b00      	cmp	r3, #0
 8014126:	f000 8193 	beq.w	8014450 <_dtoa_r+0xb98>
 801412a:	4631      	mov	r1, r6
 801412c:	2300      	movs	r3, #0
 801412e:	220a      	movs	r2, #10
 8014130:	4628      	mov	r0, r5
 8014132:	f000 fda7 	bl	8014c84 <__multadd>
 8014136:	f1bb 0f00 	cmp.w	fp, #0
 801413a:	4606      	mov	r6, r0
 801413c:	f300 8093 	bgt.w	8014266 <_dtoa_r+0x9ae>
 8014140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014142:	2b02      	cmp	r3, #2
 8014144:	dc57      	bgt.n	80141f6 <_dtoa_r+0x93e>
 8014146:	e08e      	b.n	8014266 <_dtoa_r+0x9ae>
 8014148:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801414a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801414e:	e756      	b.n	8013ffe <_dtoa_r+0x746>
 8014150:	9b02      	ldr	r3, [sp, #8]
 8014152:	1e5c      	subs	r4, r3, #1
 8014154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014156:	42a3      	cmp	r3, r4
 8014158:	bfb7      	itett	lt
 801415a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801415c:	1b1c      	subge	r4, r3, r4
 801415e:	1ae2      	sublt	r2, r4, r3
 8014160:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014162:	bfbe      	ittt	lt
 8014164:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014166:	189b      	addlt	r3, r3, r2
 8014168:	930e      	strlt	r3, [sp, #56]	; 0x38
 801416a:	9b02      	ldr	r3, [sp, #8]
 801416c:	bfb8      	it	lt
 801416e:	2400      	movlt	r4, #0
 8014170:	2b00      	cmp	r3, #0
 8014172:	bfbb      	ittet	lt
 8014174:	9b06      	ldrlt	r3, [sp, #24]
 8014176:	9a02      	ldrlt	r2, [sp, #8]
 8014178:	9f06      	ldrge	r7, [sp, #24]
 801417a:	1a9f      	sublt	r7, r3, r2
 801417c:	bfac      	ite	ge
 801417e:	9b02      	ldrge	r3, [sp, #8]
 8014180:	2300      	movlt	r3, #0
 8014182:	e73e      	b.n	8014002 <_dtoa_r+0x74a>
 8014184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014186:	9f06      	ldr	r7, [sp, #24]
 8014188:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801418a:	e745      	b.n	8014018 <_dtoa_r+0x760>
 801418c:	3fe00000 	.word	0x3fe00000
 8014190:	40240000 	.word	0x40240000
 8014194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014196:	e76a      	b.n	801406e <_dtoa_r+0x7b6>
 8014198:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801419a:	2b01      	cmp	r3, #1
 801419c:	dc19      	bgt.n	80141d2 <_dtoa_r+0x91a>
 801419e:	9b04      	ldr	r3, [sp, #16]
 80141a0:	b9bb      	cbnz	r3, 80141d2 <_dtoa_r+0x91a>
 80141a2:	9b05      	ldr	r3, [sp, #20]
 80141a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141a8:	b99b      	cbnz	r3, 80141d2 <_dtoa_r+0x91a>
 80141aa:	9b05      	ldr	r3, [sp, #20]
 80141ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80141b0:	0d1b      	lsrs	r3, r3, #20
 80141b2:	051b      	lsls	r3, r3, #20
 80141b4:	b183      	cbz	r3, 80141d8 <_dtoa_r+0x920>
 80141b6:	f04f 0801 	mov.w	r8, #1
 80141ba:	9b06      	ldr	r3, [sp, #24]
 80141bc:	3301      	adds	r3, #1
 80141be:	9306      	str	r3, [sp, #24]
 80141c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c2:	3301      	adds	r3, #1
 80141c4:	9309      	str	r3, [sp, #36]	; 0x24
 80141c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f47f af6a 	bne.w	80140a2 <_dtoa_r+0x7ea>
 80141ce:	2001      	movs	r0, #1
 80141d0:	e76f      	b.n	80140b2 <_dtoa_r+0x7fa>
 80141d2:	f04f 0800 	mov.w	r8, #0
 80141d6:	e7f6      	b.n	80141c6 <_dtoa_r+0x90e>
 80141d8:	4698      	mov	r8, r3
 80141da:	e7f4      	b.n	80141c6 <_dtoa_r+0x90e>
 80141dc:	f43f af7d 	beq.w	80140da <_dtoa_r+0x822>
 80141e0:	4618      	mov	r0, r3
 80141e2:	301c      	adds	r0, #28
 80141e4:	e772      	b.n	80140cc <_dtoa_r+0x814>
 80141e6:	9b02      	ldr	r3, [sp, #8]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	dc36      	bgt.n	801425a <_dtoa_r+0x9a2>
 80141ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141ee:	2b02      	cmp	r3, #2
 80141f0:	dd33      	ble.n	801425a <_dtoa_r+0x9a2>
 80141f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80141f6:	f1bb 0f00 	cmp.w	fp, #0
 80141fa:	d10d      	bne.n	8014218 <_dtoa_r+0x960>
 80141fc:	4621      	mov	r1, r4
 80141fe:	465b      	mov	r3, fp
 8014200:	2205      	movs	r2, #5
 8014202:	4628      	mov	r0, r5
 8014204:	f000 fd3e 	bl	8014c84 <__multadd>
 8014208:	4601      	mov	r1, r0
 801420a:	4604      	mov	r4, r0
 801420c:	4650      	mov	r0, sl
 801420e:	f000 ff9b 	bl	8015148 <__mcmp>
 8014212:	2800      	cmp	r0, #0
 8014214:	f73f adb6 	bgt.w	8013d84 <_dtoa_r+0x4cc>
 8014218:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801421a:	9f08      	ldr	r7, [sp, #32]
 801421c:	ea6f 0903 	mvn.w	r9, r3
 8014220:	f04f 0800 	mov.w	r8, #0
 8014224:	4621      	mov	r1, r4
 8014226:	4628      	mov	r0, r5
 8014228:	f000 fd0a 	bl	8014c40 <_Bfree>
 801422c:	2e00      	cmp	r6, #0
 801422e:	f43f aea4 	beq.w	8013f7a <_dtoa_r+0x6c2>
 8014232:	f1b8 0f00 	cmp.w	r8, #0
 8014236:	d005      	beq.n	8014244 <_dtoa_r+0x98c>
 8014238:	45b0      	cmp	r8, r6
 801423a:	d003      	beq.n	8014244 <_dtoa_r+0x98c>
 801423c:	4641      	mov	r1, r8
 801423e:	4628      	mov	r0, r5
 8014240:	f000 fcfe 	bl	8014c40 <_Bfree>
 8014244:	4631      	mov	r1, r6
 8014246:	4628      	mov	r0, r5
 8014248:	f000 fcfa 	bl	8014c40 <_Bfree>
 801424c:	e695      	b.n	8013f7a <_dtoa_r+0x6c2>
 801424e:	2400      	movs	r4, #0
 8014250:	4626      	mov	r6, r4
 8014252:	e7e1      	b.n	8014218 <_dtoa_r+0x960>
 8014254:	46c1      	mov	r9, r8
 8014256:	4626      	mov	r6, r4
 8014258:	e594      	b.n	8013d84 <_dtoa_r+0x4cc>
 801425a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801425c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014260:	2b00      	cmp	r3, #0
 8014262:	f000 80fc 	beq.w	801445e <_dtoa_r+0xba6>
 8014266:	2f00      	cmp	r7, #0
 8014268:	dd05      	ble.n	8014276 <_dtoa_r+0x9be>
 801426a:	4631      	mov	r1, r6
 801426c:	463a      	mov	r2, r7
 801426e:	4628      	mov	r0, r5
 8014270:	f000 fefe 	bl	8015070 <__lshift>
 8014274:	4606      	mov	r6, r0
 8014276:	f1b8 0f00 	cmp.w	r8, #0
 801427a:	d05c      	beq.n	8014336 <_dtoa_r+0xa7e>
 801427c:	4628      	mov	r0, r5
 801427e:	6871      	ldr	r1, [r6, #4]
 8014280:	f000 fc9e 	bl	8014bc0 <_Balloc>
 8014284:	4607      	mov	r7, r0
 8014286:	b928      	cbnz	r0, 8014294 <_dtoa_r+0x9dc>
 8014288:	4602      	mov	r2, r0
 801428a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801428e:	4b7e      	ldr	r3, [pc, #504]	; (8014488 <_dtoa_r+0xbd0>)
 8014290:	f7ff bb26 	b.w	80138e0 <_dtoa_r+0x28>
 8014294:	6932      	ldr	r2, [r6, #16]
 8014296:	f106 010c 	add.w	r1, r6, #12
 801429a:	3202      	adds	r2, #2
 801429c:	0092      	lsls	r2, r2, #2
 801429e:	300c      	adds	r0, #12
 80142a0:	f7fd fc54 	bl	8011b4c <memcpy>
 80142a4:	2201      	movs	r2, #1
 80142a6:	4639      	mov	r1, r7
 80142a8:	4628      	mov	r0, r5
 80142aa:	f000 fee1 	bl	8015070 <__lshift>
 80142ae:	46b0      	mov	r8, r6
 80142b0:	4606      	mov	r6, r0
 80142b2:	9b08      	ldr	r3, [sp, #32]
 80142b4:	3301      	adds	r3, #1
 80142b6:	9302      	str	r3, [sp, #8]
 80142b8:	9b08      	ldr	r3, [sp, #32]
 80142ba:	445b      	add	r3, fp
 80142bc:	930a      	str	r3, [sp, #40]	; 0x28
 80142be:	9b04      	ldr	r3, [sp, #16]
 80142c0:	f003 0301 	and.w	r3, r3, #1
 80142c4:	9309      	str	r3, [sp, #36]	; 0x24
 80142c6:	9b02      	ldr	r3, [sp, #8]
 80142c8:	4621      	mov	r1, r4
 80142ca:	4650      	mov	r0, sl
 80142cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80142d0:	f7ff fa64 	bl	801379c <quorem>
 80142d4:	4603      	mov	r3, r0
 80142d6:	4641      	mov	r1, r8
 80142d8:	3330      	adds	r3, #48	; 0x30
 80142da:	9004      	str	r0, [sp, #16]
 80142dc:	4650      	mov	r0, sl
 80142de:	930b      	str	r3, [sp, #44]	; 0x2c
 80142e0:	f000 ff32 	bl	8015148 <__mcmp>
 80142e4:	4632      	mov	r2, r6
 80142e6:	9006      	str	r0, [sp, #24]
 80142e8:	4621      	mov	r1, r4
 80142ea:	4628      	mov	r0, r5
 80142ec:	f000 ff48 	bl	8015180 <__mdiff>
 80142f0:	68c2      	ldr	r2, [r0, #12]
 80142f2:	4607      	mov	r7, r0
 80142f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142f6:	bb02      	cbnz	r2, 801433a <_dtoa_r+0xa82>
 80142f8:	4601      	mov	r1, r0
 80142fa:	4650      	mov	r0, sl
 80142fc:	f000 ff24 	bl	8015148 <__mcmp>
 8014300:	4602      	mov	r2, r0
 8014302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014304:	4639      	mov	r1, r7
 8014306:	4628      	mov	r0, r5
 8014308:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801430c:	f000 fc98 	bl	8014c40 <_Bfree>
 8014310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014314:	9f02      	ldr	r7, [sp, #8]
 8014316:	ea43 0102 	orr.w	r1, r3, r2
 801431a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801431c:	430b      	orrs	r3, r1
 801431e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014320:	d10d      	bne.n	801433e <_dtoa_r+0xa86>
 8014322:	2b39      	cmp	r3, #57	; 0x39
 8014324:	d027      	beq.n	8014376 <_dtoa_r+0xabe>
 8014326:	9a06      	ldr	r2, [sp, #24]
 8014328:	2a00      	cmp	r2, #0
 801432a:	dd01      	ble.n	8014330 <_dtoa_r+0xa78>
 801432c:	9b04      	ldr	r3, [sp, #16]
 801432e:	3331      	adds	r3, #49	; 0x31
 8014330:	f88b 3000 	strb.w	r3, [fp]
 8014334:	e776      	b.n	8014224 <_dtoa_r+0x96c>
 8014336:	4630      	mov	r0, r6
 8014338:	e7b9      	b.n	80142ae <_dtoa_r+0x9f6>
 801433a:	2201      	movs	r2, #1
 801433c:	e7e2      	b.n	8014304 <_dtoa_r+0xa4c>
 801433e:	9906      	ldr	r1, [sp, #24]
 8014340:	2900      	cmp	r1, #0
 8014342:	db04      	blt.n	801434e <_dtoa_r+0xa96>
 8014344:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014346:	4301      	orrs	r1, r0
 8014348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801434a:	4301      	orrs	r1, r0
 801434c:	d120      	bne.n	8014390 <_dtoa_r+0xad8>
 801434e:	2a00      	cmp	r2, #0
 8014350:	ddee      	ble.n	8014330 <_dtoa_r+0xa78>
 8014352:	4651      	mov	r1, sl
 8014354:	2201      	movs	r2, #1
 8014356:	4628      	mov	r0, r5
 8014358:	9302      	str	r3, [sp, #8]
 801435a:	f000 fe89 	bl	8015070 <__lshift>
 801435e:	4621      	mov	r1, r4
 8014360:	4682      	mov	sl, r0
 8014362:	f000 fef1 	bl	8015148 <__mcmp>
 8014366:	2800      	cmp	r0, #0
 8014368:	9b02      	ldr	r3, [sp, #8]
 801436a:	dc02      	bgt.n	8014372 <_dtoa_r+0xaba>
 801436c:	d1e0      	bne.n	8014330 <_dtoa_r+0xa78>
 801436e:	07da      	lsls	r2, r3, #31
 8014370:	d5de      	bpl.n	8014330 <_dtoa_r+0xa78>
 8014372:	2b39      	cmp	r3, #57	; 0x39
 8014374:	d1da      	bne.n	801432c <_dtoa_r+0xa74>
 8014376:	2339      	movs	r3, #57	; 0x39
 8014378:	f88b 3000 	strb.w	r3, [fp]
 801437c:	463b      	mov	r3, r7
 801437e:	461f      	mov	r7, r3
 8014380:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014384:	3b01      	subs	r3, #1
 8014386:	2a39      	cmp	r2, #57	; 0x39
 8014388:	d050      	beq.n	801442c <_dtoa_r+0xb74>
 801438a:	3201      	adds	r2, #1
 801438c:	701a      	strb	r2, [r3, #0]
 801438e:	e749      	b.n	8014224 <_dtoa_r+0x96c>
 8014390:	2a00      	cmp	r2, #0
 8014392:	dd03      	ble.n	801439c <_dtoa_r+0xae4>
 8014394:	2b39      	cmp	r3, #57	; 0x39
 8014396:	d0ee      	beq.n	8014376 <_dtoa_r+0xabe>
 8014398:	3301      	adds	r3, #1
 801439a:	e7c9      	b.n	8014330 <_dtoa_r+0xa78>
 801439c:	9a02      	ldr	r2, [sp, #8]
 801439e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80143a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80143a4:	428a      	cmp	r2, r1
 80143a6:	d02a      	beq.n	80143fe <_dtoa_r+0xb46>
 80143a8:	4651      	mov	r1, sl
 80143aa:	2300      	movs	r3, #0
 80143ac:	220a      	movs	r2, #10
 80143ae:	4628      	mov	r0, r5
 80143b0:	f000 fc68 	bl	8014c84 <__multadd>
 80143b4:	45b0      	cmp	r8, r6
 80143b6:	4682      	mov	sl, r0
 80143b8:	f04f 0300 	mov.w	r3, #0
 80143bc:	f04f 020a 	mov.w	r2, #10
 80143c0:	4641      	mov	r1, r8
 80143c2:	4628      	mov	r0, r5
 80143c4:	d107      	bne.n	80143d6 <_dtoa_r+0xb1e>
 80143c6:	f000 fc5d 	bl	8014c84 <__multadd>
 80143ca:	4680      	mov	r8, r0
 80143cc:	4606      	mov	r6, r0
 80143ce:	9b02      	ldr	r3, [sp, #8]
 80143d0:	3301      	adds	r3, #1
 80143d2:	9302      	str	r3, [sp, #8]
 80143d4:	e777      	b.n	80142c6 <_dtoa_r+0xa0e>
 80143d6:	f000 fc55 	bl	8014c84 <__multadd>
 80143da:	4631      	mov	r1, r6
 80143dc:	4680      	mov	r8, r0
 80143de:	2300      	movs	r3, #0
 80143e0:	220a      	movs	r2, #10
 80143e2:	4628      	mov	r0, r5
 80143e4:	f000 fc4e 	bl	8014c84 <__multadd>
 80143e8:	4606      	mov	r6, r0
 80143ea:	e7f0      	b.n	80143ce <_dtoa_r+0xb16>
 80143ec:	f1bb 0f00 	cmp.w	fp, #0
 80143f0:	bfcc      	ite	gt
 80143f2:	465f      	movgt	r7, fp
 80143f4:	2701      	movle	r7, #1
 80143f6:	f04f 0800 	mov.w	r8, #0
 80143fa:	9a08      	ldr	r2, [sp, #32]
 80143fc:	4417      	add	r7, r2
 80143fe:	4651      	mov	r1, sl
 8014400:	2201      	movs	r2, #1
 8014402:	4628      	mov	r0, r5
 8014404:	9302      	str	r3, [sp, #8]
 8014406:	f000 fe33 	bl	8015070 <__lshift>
 801440a:	4621      	mov	r1, r4
 801440c:	4682      	mov	sl, r0
 801440e:	f000 fe9b 	bl	8015148 <__mcmp>
 8014412:	2800      	cmp	r0, #0
 8014414:	dcb2      	bgt.n	801437c <_dtoa_r+0xac4>
 8014416:	d102      	bne.n	801441e <_dtoa_r+0xb66>
 8014418:	9b02      	ldr	r3, [sp, #8]
 801441a:	07db      	lsls	r3, r3, #31
 801441c:	d4ae      	bmi.n	801437c <_dtoa_r+0xac4>
 801441e:	463b      	mov	r3, r7
 8014420:	461f      	mov	r7, r3
 8014422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014426:	2a30      	cmp	r2, #48	; 0x30
 8014428:	d0fa      	beq.n	8014420 <_dtoa_r+0xb68>
 801442a:	e6fb      	b.n	8014224 <_dtoa_r+0x96c>
 801442c:	9a08      	ldr	r2, [sp, #32]
 801442e:	429a      	cmp	r2, r3
 8014430:	d1a5      	bne.n	801437e <_dtoa_r+0xac6>
 8014432:	2331      	movs	r3, #49	; 0x31
 8014434:	f109 0901 	add.w	r9, r9, #1
 8014438:	7013      	strb	r3, [r2, #0]
 801443a:	e6f3      	b.n	8014224 <_dtoa_r+0x96c>
 801443c:	4b13      	ldr	r3, [pc, #76]	; (801448c <_dtoa_r+0xbd4>)
 801443e:	f7ff baa7 	b.w	8013990 <_dtoa_r+0xd8>
 8014442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014444:	2b00      	cmp	r3, #0
 8014446:	f47f aa80 	bne.w	801394a <_dtoa_r+0x92>
 801444a:	4b11      	ldr	r3, [pc, #68]	; (8014490 <_dtoa_r+0xbd8>)
 801444c:	f7ff baa0 	b.w	8013990 <_dtoa_r+0xd8>
 8014450:	f1bb 0f00 	cmp.w	fp, #0
 8014454:	dc03      	bgt.n	801445e <_dtoa_r+0xba6>
 8014456:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014458:	2b02      	cmp	r3, #2
 801445a:	f73f aecc 	bgt.w	80141f6 <_dtoa_r+0x93e>
 801445e:	9f08      	ldr	r7, [sp, #32]
 8014460:	4621      	mov	r1, r4
 8014462:	4650      	mov	r0, sl
 8014464:	f7ff f99a 	bl	801379c <quorem>
 8014468:	9a08      	ldr	r2, [sp, #32]
 801446a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801446e:	f807 3b01 	strb.w	r3, [r7], #1
 8014472:	1aba      	subs	r2, r7, r2
 8014474:	4593      	cmp	fp, r2
 8014476:	ddb9      	ble.n	80143ec <_dtoa_r+0xb34>
 8014478:	4651      	mov	r1, sl
 801447a:	2300      	movs	r3, #0
 801447c:	220a      	movs	r2, #10
 801447e:	4628      	mov	r0, r5
 8014480:	f000 fc00 	bl	8014c84 <__multadd>
 8014484:	4682      	mov	sl, r0
 8014486:	e7eb      	b.n	8014460 <_dtoa_r+0xba8>
 8014488:	08016c54 	.word	0x08016c54
 801448c:	08016a54 	.word	0x08016a54
 8014490:	08016bd1 	.word	0x08016bd1

08014494 <rshift>:
 8014494:	6903      	ldr	r3, [r0, #16]
 8014496:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801449a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801449e:	f100 0414 	add.w	r4, r0, #20
 80144a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80144a6:	dd46      	ble.n	8014536 <rshift+0xa2>
 80144a8:	f011 011f 	ands.w	r1, r1, #31
 80144ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80144b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80144b4:	d10c      	bne.n	80144d0 <rshift+0x3c>
 80144b6:	4629      	mov	r1, r5
 80144b8:	f100 0710 	add.w	r7, r0, #16
 80144bc:	42b1      	cmp	r1, r6
 80144be:	d335      	bcc.n	801452c <rshift+0x98>
 80144c0:	1a9b      	subs	r3, r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	1eea      	subs	r2, r5, #3
 80144c6:	4296      	cmp	r6, r2
 80144c8:	bf38      	it	cc
 80144ca:	2300      	movcc	r3, #0
 80144cc:	4423      	add	r3, r4
 80144ce:	e015      	b.n	80144fc <rshift+0x68>
 80144d0:	46a1      	mov	r9, r4
 80144d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80144d6:	f1c1 0820 	rsb	r8, r1, #32
 80144da:	40cf      	lsrs	r7, r1
 80144dc:	f105 0e04 	add.w	lr, r5, #4
 80144e0:	4576      	cmp	r6, lr
 80144e2:	46f4      	mov	ip, lr
 80144e4:	d816      	bhi.n	8014514 <rshift+0x80>
 80144e6:	1a9b      	subs	r3, r3, r2
 80144e8:	009a      	lsls	r2, r3, #2
 80144ea:	3a04      	subs	r2, #4
 80144ec:	3501      	adds	r5, #1
 80144ee:	42ae      	cmp	r6, r5
 80144f0:	bf38      	it	cc
 80144f2:	2200      	movcc	r2, #0
 80144f4:	18a3      	adds	r3, r4, r2
 80144f6:	50a7      	str	r7, [r4, r2]
 80144f8:	b107      	cbz	r7, 80144fc <rshift+0x68>
 80144fa:	3304      	adds	r3, #4
 80144fc:	42a3      	cmp	r3, r4
 80144fe:	eba3 0204 	sub.w	r2, r3, r4
 8014502:	bf08      	it	eq
 8014504:	2300      	moveq	r3, #0
 8014506:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801450a:	6102      	str	r2, [r0, #16]
 801450c:	bf08      	it	eq
 801450e:	6143      	streq	r3, [r0, #20]
 8014510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014514:	f8dc c000 	ldr.w	ip, [ip]
 8014518:	fa0c fc08 	lsl.w	ip, ip, r8
 801451c:	ea4c 0707 	orr.w	r7, ip, r7
 8014520:	f849 7b04 	str.w	r7, [r9], #4
 8014524:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014528:	40cf      	lsrs	r7, r1
 801452a:	e7d9      	b.n	80144e0 <rshift+0x4c>
 801452c:	f851 cb04 	ldr.w	ip, [r1], #4
 8014530:	f847 cf04 	str.w	ip, [r7, #4]!
 8014534:	e7c2      	b.n	80144bc <rshift+0x28>
 8014536:	4623      	mov	r3, r4
 8014538:	e7e0      	b.n	80144fc <rshift+0x68>

0801453a <__hexdig_fun>:
 801453a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801453e:	2b09      	cmp	r3, #9
 8014540:	d802      	bhi.n	8014548 <__hexdig_fun+0xe>
 8014542:	3820      	subs	r0, #32
 8014544:	b2c0      	uxtb	r0, r0
 8014546:	4770      	bx	lr
 8014548:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801454c:	2b05      	cmp	r3, #5
 801454e:	d801      	bhi.n	8014554 <__hexdig_fun+0x1a>
 8014550:	3847      	subs	r0, #71	; 0x47
 8014552:	e7f7      	b.n	8014544 <__hexdig_fun+0xa>
 8014554:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014558:	2b05      	cmp	r3, #5
 801455a:	d801      	bhi.n	8014560 <__hexdig_fun+0x26>
 801455c:	3827      	subs	r0, #39	; 0x27
 801455e:	e7f1      	b.n	8014544 <__hexdig_fun+0xa>
 8014560:	2000      	movs	r0, #0
 8014562:	4770      	bx	lr

08014564 <__gethex>:
 8014564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014568:	b08b      	sub	sp, #44	; 0x2c
 801456a:	9306      	str	r3, [sp, #24]
 801456c:	4bb9      	ldr	r3, [pc, #740]	; (8014854 <__gethex+0x2f0>)
 801456e:	9002      	str	r0, [sp, #8]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	468b      	mov	fp, r1
 8014574:	4618      	mov	r0, r3
 8014576:	4690      	mov	r8, r2
 8014578:	9303      	str	r3, [sp, #12]
 801457a:	f7eb fe2f 	bl	80001dc <strlen>
 801457e:	4682      	mov	sl, r0
 8014580:	9b03      	ldr	r3, [sp, #12]
 8014582:	f8db 2000 	ldr.w	r2, [fp]
 8014586:	4403      	add	r3, r0
 8014588:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801458c:	9307      	str	r3, [sp, #28]
 801458e:	1c93      	adds	r3, r2, #2
 8014590:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014594:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014598:	32fe      	adds	r2, #254	; 0xfe
 801459a:	18d1      	adds	r1, r2, r3
 801459c:	461f      	mov	r7, r3
 801459e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80145a2:	9101      	str	r1, [sp, #4]
 80145a4:	2830      	cmp	r0, #48	; 0x30
 80145a6:	d0f8      	beq.n	801459a <__gethex+0x36>
 80145a8:	f7ff ffc7 	bl	801453a <__hexdig_fun>
 80145ac:	4604      	mov	r4, r0
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d13a      	bne.n	8014628 <__gethex+0xc4>
 80145b2:	4652      	mov	r2, sl
 80145b4:	4638      	mov	r0, r7
 80145b6:	9903      	ldr	r1, [sp, #12]
 80145b8:	f001 f92a 	bl	8015810 <strncmp>
 80145bc:	4605      	mov	r5, r0
 80145be:	2800      	cmp	r0, #0
 80145c0:	d166      	bne.n	8014690 <__gethex+0x12c>
 80145c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80145c6:	eb07 060a 	add.w	r6, r7, sl
 80145ca:	f7ff ffb6 	bl	801453a <__hexdig_fun>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d060      	beq.n	8014694 <__gethex+0x130>
 80145d2:	4633      	mov	r3, r6
 80145d4:	7818      	ldrb	r0, [r3, #0]
 80145d6:	461f      	mov	r7, r3
 80145d8:	2830      	cmp	r0, #48	; 0x30
 80145da:	f103 0301 	add.w	r3, r3, #1
 80145de:	d0f9      	beq.n	80145d4 <__gethex+0x70>
 80145e0:	f7ff ffab 	bl	801453a <__hexdig_fun>
 80145e4:	2301      	movs	r3, #1
 80145e6:	fab0 f480 	clz	r4, r0
 80145ea:	4635      	mov	r5, r6
 80145ec:	0964      	lsrs	r4, r4, #5
 80145ee:	9301      	str	r3, [sp, #4]
 80145f0:	463a      	mov	r2, r7
 80145f2:	4616      	mov	r6, r2
 80145f4:	7830      	ldrb	r0, [r6, #0]
 80145f6:	3201      	adds	r2, #1
 80145f8:	f7ff ff9f 	bl	801453a <__hexdig_fun>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d1f8      	bne.n	80145f2 <__gethex+0x8e>
 8014600:	4652      	mov	r2, sl
 8014602:	4630      	mov	r0, r6
 8014604:	9903      	ldr	r1, [sp, #12]
 8014606:	f001 f903 	bl	8015810 <strncmp>
 801460a:	b980      	cbnz	r0, 801462e <__gethex+0xca>
 801460c:	b94d      	cbnz	r5, 8014622 <__gethex+0xbe>
 801460e:	eb06 050a 	add.w	r5, r6, sl
 8014612:	462a      	mov	r2, r5
 8014614:	4616      	mov	r6, r2
 8014616:	7830      	ldrb	r0, [r6, #0]
 8014618:	3201      	adds	r2, #1
 801461a:	f7ff ff8e 	bl	801453a <__hexdig_fun>
 801461e:	2800      	cmp	r0, #0
 8014620:	d1f8      	bne.n	8014614 <__gethex+0xb0>
 8014622:	1bad      	subs	r5, r5, r6
 8014624:	00ad      	lsls	r5, r5, #2
 8014626:	e004      	b.n	8014632 <__gethex+0xce>
 8014628:	2400      	movs	r4, #0
 801462a:	4625      	mov	r5, r4
 801462c:	e7e0      	b.n	80145f0 <__gethex+0x8c>
 801462e:	2d00      	cmp	r5, #0
 8014630:	d1f7      	bne.n	8014622 <__gethex+0xbe>
 8014632:	7833      	ldrb	r3, [r6, #0]
 8014634:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014638:	2b50      	cmp	r3, #80	; 0x50
 801463a:	d139      	bne.n	80146b0 <__gethex+0x14c>
 801463c:	7873      	ldrb	r3, [r6, #1]
 801463e:	2b2b      	cmp	r3, #43	; 0x2b
 8014640:	d02a      	beq.n	8014698 <__gethex+0x134>
 8014642:	2b2d      	cmp	r3, #45	; 0x2d
 8014644:	d02c      	beq.n	80146a0 <__gethex+0x13c>
 8014646:	f04f 0900 	mov.w	r9, #0
 801464a:	1c71      	adds	r1, r6, #1
 801464c:	7808      	ldrb	r0, [r1, #0]
 801464e:	f7ff ff74 	bl	801453a <__hexdig_fun>
 8014652:	1e43      	subs	r3, r0, #1
 8014654:	b2db      	uxtb	r3, r3
 8014656:	2b18      	cmp	r3, #24
 8014658:	d82a      	bhi.n	80146b0 <__gethex+0x14c>
 801465a:	f1a0 0210 	sub.w	r2, r0, #16
 801465e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014662:	f7ff ff6a 	bl	801453a <__hexdig_fun>
 8014666:	1e43      	subs	r3, r0, #1
 8014668:	b2db      	uxtb	r3, r3
 801466a:	2b18      	cmp	r3, #24
 801466c:	d91b      	bls.n	80146a6 <__gethex+0x142>
 801466e:	f1b9 0f00 	cmp.w	r9, #0
 8014672:	d000      	beq.n	8014676 <__gethex+0x112>
 8014674:	4252      	negs	r2, r2
 8014676:	4415      	add	r5, r2
 8014678:	f8cb 1000 	str.w	r1, [fp]
 801467c:	b1d4      	cbz	r4, 80146b4 <__gethex+0x150>
 801467e:	9b01      	ldr	r3, [sp, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	bf14      	ite	ne
 8014684:	2700      	movne	r7, #0
 8014686:	2706      	moveq	r7, #6
 8014688:	4638      	mov	r0, r7
 801468a:	b00b      	add	sp, #44	; 0x2c
 801468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014690:	463e      	mov	r6, r7
 8014692:	4625      	mov	r5, r4
 8014694:	2401      	movs	r4, #1
 8014696:	e7cc      	b.n	8014632 <__gethex+0xce>
 8014698:	f04f 0900 	mov.w	r9, #0
 801469c:	1cb1      	adds	r1, r6, #2
 801469e:	e7d5      	b.n	801464c <__gethex+0xe8>
 80146a0:	f04f 0901 	mov.w	r9, #1
 80146a4:	e7fa      	b.n	801469c <__gethex+0x138>
 80146a6:	230a      	movs	r3, #10
 80146a8:	fb03 0202 	mla	r2, r3, r2, r0
 80146ac:	3a10      	subs	r2, #16
 80146ae:	e7d6      	b.n	801465e <__gethex+0xfa>
 80146b0:	4631      	mov	r1, r6
 80146b2:	e7e1      	b.n	8014678 <__gethex+0x114>
 80146b4:	4621      	mov	r1, r4
 80146b6:	1bf3      	subs	r3, r6, r7
 80146b8:	3b01      	subs	r3, #1
 80146ba:	2b07      	cmp	r3, #7
 80146bc:	dc0a      	bgt.n	80146d4 <__gethex+0x170>
 80146be:	9802      	ldr	r0, [sp, #8]
 80146c0:	f000 fa7e 	bl	8014bc0 <_Balloc>
 80146c4:	4604      	mov	r4, r0
 80146c6:	b940      	cbnz	r0, 80146da <__gethex+0x176>
 80146c8:	4602      	mov	r2, r0
 80146ca:	21de      	movs	r1, #222	; 0xde
 80146cc:	4b62      	ldr	r3, [pc, #392]	; (8014858 <__gethex+0x2f4>)
 80146ce:	4863      	ldr	r0, [pc, #396]	; (801485c <__gethex+0x2f8>)
 80146d0:	f001 f8be 	bl	8015850 <__assert_func>
 80146d4:	3101      	adds	r1, #1
 80146d6:	105b      	asrs	r3, r3, #1
 80146d8:	e7ef      	b.n	80146ba <__gethex+0x156>
 80146da:	f04f 0b00 	mov.w	fp, #0
 80146de:	f100 0914 	add.w	r9, r0, #20
 80146e2:	f1ca 0301 	rsb	r3, sl, #1
 80146e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80146ea:	f8cd b004 	str.w	fp, [sp, #4]
 80146ee:	9308      	str	r3, [sp, #32]
 80146f0:	42b7      	cmp	r7, r6
 80146f2:	d33f      	bcc.n	8014774 <__gethex+0x210>
 80146f4:	9f04      	ldr	r7, [sp, #16]
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	f847 3b04 	str.w	r3, [r7], #4
 80146fc:	eba7 0709 	sub.w	r7, r7, r9
 8014700:	10bf      	asrs	r7, r7, #2
 8014702:	6127      	str	r7, [r4, #16]
 8014704:	4618      	mov	r0, r3
 8014706:	f000 fb51 	bl	8014dac <__hi0bits>
 801470a:	017f      	lsls	r7, r7, #5
 801470c:	f8d8 6000 	ldr.w	r6, [r8]
 8014710:	1a3f      	subs	r7, r7, r0
 8014712:	42b7      	cmp	r7, r6
 8014714:	dd62      	ble.n	80147dc <__gethex+0x278>
 8014716:	1bbf      	subs	r7, r7, r6
 8014718:	4639      	mov	r1, r7
 801471a:	4620      	mov	r0, r4
 801471c:	f000 fee7 	bl	80154ee <__any_on>
 8014720:	4682      	mov	sl, r0
 8014722:	b1a8      	cbz	r0, 8014750 <__gethex+0x1ec>
 8014724:	f04f 0a01 	mov.w	sl, #1
 8014728:	1e7b      	subs	r3, r7, #1
 801472a:	1159      	asrs	r1, r3, #5
 801472c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014730:	f003 021f 	and.w	r2, r3, #31
 8014734:	fa0a f202 	lsl.w	r2, sl, r2
 8014738:	420a      	tst	r2, r1
 801473a:	d009      	beq.n	8014750 <__gethex+0x1ec>
 801473c:	4553      	cmp	r3, sl
 801473e:	dd05      	ble.n	801474c <__gethex+0x1e8>
 8014740:	4620      	mov	r0, r4
 8014742:	1eb9      	subs	r1, r7, #2
 8014744:	f000 fed3 	bl	80154ee <__any_on>
 8014748:	2800      	cmp	r0, #0
 801474a:	d144      	bne.n	80147d6 <__gethex+0x272>
 801474c:	f04f 0a02 	mov.w	sl, #2
 8014750:	4639      	mov	r1, r7
 8014752:	4620      	mov	r0, r4
 8014754:	f7ff fe9e 	bl	8014494 <rshift>
 8014758:	443d      	add	r5, r7
 801475a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801475e:	42ab      	cmp	r3, r5
 8014760:	da4a      	bge.n	80147f8 <__gethex+0x294>
 8014762:	4621      	mov	r1, r4
 8014764:	9802      	ldr	r0, [sp, #8]
 8014766:	f000 fa6b 	bl	8014c40 <_Bfree>
 801476a:	2300      	movs	r3, #0
 801476c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801476e:	27a3      	movs	r7, #163	; 0xa3
 8014770:	6013      	str	r3, [r2, #0]
 8014772:	e789      	b.n	8014688 <__gethex+0x124>
 8014774:	1e73      	subs	r3, r6, #1
 8014776:	9a07      	ldr	r2, [sp, #28]
 8014778:	9305      	str	r3, [sp, #20]
 801477a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801477e:	4293      	cmp	r3, r2
 8014780:	d019      	beq.n	80147b6 <__gethex+0x252>
 8014782:	f1bb 0f20 	cmp.w	fp, #32
 8014786:	d107      	bne.n	8014798 <__gethex+0x234>
 8014788:	9b04      	ldr	r3, [sp, #16]
 801478a:	9a01      	ldr	r2, [sp, #4]
 801478c:	f843 2b04 	str.w	r2, [r3], #4
 8014790:	9304      	str	r3, [sp, #16]
 8014792:	2300      	movs	r3, #0
 8014794:	469b      	mov	fp, r3
 8014796:	9301      	str	r3, [sp, #4]
 8014798:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801479c:	f7ff fecd 	bl	801453a <__hexdig_fun>
 80147a0:	9b01      	ldr	r3, [sp, #4]
 80147a2:	f000 000f 	and.w	r0, r0, #15
 80147a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80147aa:	4303      	orrs	r3, r0
 80147ac:	9301      	str	r3, [sp, #4]
 80147ae:	f10b 0b04 	add.w	fp, fp, #4
 80147b2:	9b05      	ldr	r3, [sp, #20]
 80147b4:	e00d      	b.n	80147d2 <__gethex+0x26e>
 80147b6:	9b05      	ldr	r3, [sp, #20]
 80147b8:	9a08      	ldr	r2, [sp, #32]
 80147ba:	4413      	add	r3, r2
 80147bc:	42bb      	cmp	r3, r7
 80147be:	d3e0      	bcc.n	8014782 <__gethex+0x21e>
 80147c0:	4618      	mov	r0, r3
 80147c2:	4652      	mov	r2, sl
 80147c4:	9903      	ldr	r1, [sp, #12]
 80147c6:	9309      	str	r3, [sp, #36]	; 0x24
 80147c8:	f001 f822 	bl	8015810 <strncmp>
 80147cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ce:	2800      	cmp	r0, #0
 80147d0:	d1d7      	bne.n	8014782 <__gethex+0x21e>
 80147d2:	461e      	mov	r6, r3
 80147d4:	e78c      	b.n	80146f0 <__gethex+0x18c>
 80147d6:	f04f 0a03 	mov.w	sl, #3
 80147da:	e7b9      	b.n	8014750 <__gethex+0x1ec>
 80147dc:	da09      	bge.n	80147f2 <__gethex+0x28e>
 80147de:	1bf7      	subs	r7, r6, r7
 80147e0:	4621      	mov	r1, r4
 80147e2:	463a      	mov	r2, r7
 80147e4:	9802      	ldr	r0, [sp, #8]
 80147e6:	f000 fc43 	bl	8015070 <__lshift>
 80147ea:	4604      	mov	r4, r0
 80147ec:	1bed      	subs	r5, r5, r7
 80147ee:	f100 0914 	add.w	r9, r0, #20
 80147f2:	f04f 0a00 	mov.w	sl, #0
 80147f6:	e7b0      	b.n	801475a <__gethex+0x1f6>
 80147f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80147fc:	42a8      	cmp	r0, r5
 80147fe:	dd71      	ble.n	80148e4 <__gethex+0x380>
 8014800:	1b45      	subs	r5, r0, r5
 8014802:	42ae      	cmp	r6, r5
 8014804:	dc34      	bgt.n	8014870 <__gethex+0x30c>
 8014806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801480a:	2b02      	cmp	r3, #2
 801480c:	d028      	beq.n	8014860 <__gethex+0x2fc>
 801480e:	2b03      	cmp	r3, #3
 8014810:	d02a      	beq.n	8014868 <__gethex+0x304>
 8014812:	2b01      	cmp	r3, #1
 8014814:	d115      	bne.n	8014842 <__gethex+0x2de>
 8014816:	42ae      	cmp	r6, r5
 8014818:	d113      	bne.n	8014842 <__gethex+0x2de>
 801481a:	2e01      	cmp	r6, #1
 801481c:	d10b      	bne.n	8014836 <__gethex+0x2d2>
 801481e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014822:	9a06      	ldr	r2, [sp, #24]
 8014824:	2762      	movs	r7, #98	; 0x62
 8014826:	6013      	str	r3, [r2, #0]
 8014828:	2301      	movs	r3, #1
 801482a:	6123      	str	r3, [r4, #16]
 801482c:	f8c9 3000 	str.w	r3, [r9]
 8014830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014832:	601c      	str	r4, [r3, #0]
 8014834:	e728      	b.n	8014688 <__gethex+0x124>
 8014836:	4620      	mov	r0, r4
 8014838:	1e71      	subs	r1, r6, #1
 801483a:	f000 fe58 	bl	80154ee <__any_on>
 801483e:	2800      	cmp	r0, #0
 8014840:	d1ed      	bne.n	801481e <__gethex+0x2ba>
 8014842:	4621      	mov	r1, r4
 8014844:	9802      	ldr	r0, [sp, #8]
 8014846:	f000 f9fb 	bl	8014c40 <_Bfree>
 801484a:	2300      	movs	r3, #0
 801484c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801484e:	2750      	movs	r7, #80	; 0x50
 8014850:	6013      	str	r3, [r2, #0]
 8014852:	e719      	b.n	8014688 <__gethex+0x124>
 8014854:	08016cd0 	.word	0x08016cd0
 8014858:	08016c54 	.word	0x08016c54
 801485c:	08016c65 	.word	0x08016c65
 8014860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014862:	2b00      	cmp	r3, #0
 8014864:	d1ed      	bne.n	8014842 <__gethex+0x2de>
 8014866:	e7da      	b.n	801481e <__gethex+0x2ba>
 8014868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801486a:	2b00      	cmp	r3, #0
 801486c:	d1d7      	bne.n	801481e <__gethex+0x2ba>
 801486e:	e7e8      	b.n	8014842 <__gethex+0x2de>
 8014870:	1e6f      	subs	r7, r5, #1
 8014872:	f1ba 0f00 	cmp.w	sl, #0
 8014876:	d132      	bne.n	80148de <__gethex+0x37a>
 8014878:	b127      	cbz	r7, 8014884 <__gethex+0x320>
 801487a:	4639      	mov	r1, r7
 801487c:	4620      	mov	r0, r4
 801487e:	f000 fe36 	bl	80154ee <__any_on>
 8014882:	4682      	mov	sl, r0
 8014884:	2101      	movs	r1, #1
 8014886:	117b      	asrs	r3, r7, #5
 8014888:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801488c:	f007 071f 	and.w	r7, r7, #31
 8014890:	fa01 f707 	lsl.w	r7, r1, r7
 8014894:	421f      	tst	r7, r3
 8014896:	f04f 0702 	mov.w	r7, #2
 801489a:	4629      	mov	r1, r5
 801489c:	4620      	mov	r0, r4
 801489e:	bf18      	it	ne
 80148a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80148a4:	1b76      	subs	r6, r6, r5
 80148a6:	f7ff fdf5 	bl	8014494 <rshift>
 80148aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80148ae:	f1ba 0f00 	cmp.w	sl, #0
 80148b2:	d048      	beq.n	8014946 <__gethex+0x3e2>
 80148b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80148b8:	2b02      	cmp	r3, #2
 80148ba:	d015      	beq.n	80148e8 <__gethex+0x384>
 80148bc:	2b03      	cmp	r3, #3
 80148be:	d017      	beq.n	80148f0 <__gethex+0x38c>
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d109      	bne.n	80148d8 <__gethex+0x374>
 80148c4:	f01a 0f02 	tst.w	sl, #2
 80148c8:	d006      	beq.n	80148d8 <__gethex+0x374>
 80148ca:	f8d9 0000 	ldr.w	r0, [r9]
 80148ce:	ea4a 0a00 	orr.w	sl, sl, r0
 80148d2:	f01a 0f01 	tst.w	sl, #1
 80148d6:	d10e      	bne.n	80148f6 <__gethex+0x392>
 80148d8:	f047 0710 	orr.w	r7, r7, #16
 80148dc:	e033      	b.n	8014946 <__gethex+0x3e2>
 80148de:	f04f 0a01 	mov.w	sl, #1
 80148e2:	e7cf      	b.n	8014884 <__gethex+0x320>
 80148e4:	2701      	movs	r7, #1
 80148e6:	e7e2      	b.n	80148ae <__gethex+0x34a>
 80148e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148ea:	f1c3 0301 	rsb	r3, r3, #1
 80148ee:	9315      	str	r3, [sp, #84]	; 0x54
 80148f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d0f0      	beq.n	80148d8 <__gethex+0x374>
 80148f6:	f04f 0c00 	mov.w	ip, #0
 80148fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80148fe:	f104 0314 	add.w	r3, r4, #20
 8014902:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014906:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801490a:	4618      	mov	r0, r3
 801490c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014910:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014914:	d01c      	beq.n	8014950 <__gethex+0x3ec>
 8014916:	3201      	adds	r2, #1
 8014918:	6002      	str	r2, [r0, #0]
 801491a:	2f02      	cmp	r7, #2
 801491c:	f104 0314 	add.w	r3, r4, #20
 8014920:	d13d      	bne.n	801499e <__gethex+0x43a>
 8014922:	f8d8 2000 	ldr.w	r2, [r8]
 8014926:	3a01      	subs	r2, #1
 8014928:	42b2      	cmp	r2, r6
 801492a:	d10a      	bne.n	8014942 <__gethex+0x3de>
 801492c:	2201      	movs	r2, #1
 801492e:	1171      	asrs	r1, r6, #5
 8014930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014934:	f006 061f 	and.w	r6, r6, #31
 8014938:	fa02 f606 	lsl.w	r6, r2, r6
 801493c:	421e      	tst	r6, r3
 801493e:	bf18      	it	ne
 8014940:	4617      	movne	r7, r2
 8014942:	f047 0720 	orr.w	r7, r7, #32
 8014946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014948:	601c      	str	r4, [r3, #0]
 801494a:	9b06      	ldr	r3, [sp, #24]
 801494c:	601d      	str	r5, [r3, #0]
 801494e:	e69b      	b.n	8014688 <__gethex+0x124>
 8014950:	4299      	cmp	r1, r3
 8014952:	f843 cc04 	str.w	ip, [r3, #-4]
 8014956:	d8d8      	bhi.n	801490a <__gethex+0x3a6>
 8014958:	68a3      	ldr	r3, [r4, #8]
 801495a:	459b      	cmp	fp, r3
 801495c:	db17      	blt.n	801498e <__gethex+0x42a>
 801495e:	6861      	ldr	r1, [r4, #4]
 8014960:	9802      	ldr	r0, [sp, #8]
 8014962:	3101      	adds	r1, #1
 8014964:	f000 f92c 	bl	8014bc0 <_Balloc>
 8014968:	4681      	mov	r9, r0
 801496a:	b918      	cbnz	r0, 8014974 <__gethex+0x410>
 801496c:	4602      	mov	r2, r0
 801496e:	2184      	movs	r1, #132	; 0x84
 8014970:	4b19      	ldr	r3, [pc, #100]	; (80149d8 <__gethex+0x474>)
 8014972:	e6ac      	b.n	80146ce <__gethex+0x16a>
 8014974:	6922      	ldr	r2, [r4, #16]
 8014976:	f104 010c 	add.w	r1, r4, #12
 801497a:	3202      	adds	r2, #2
 801497c:	0092      	lsls	r2, r2, #2
 801497e:	300c      	adds	r0, #12
 8014980:	f7fd f8e4 	bl	8011b4c <memcpy>
 8014984:	4621      	mov	r1, r4
 8014986:	9802      	ldr	r0, [sp, #8]
 8014988:	f000 f95a 	bl	8014c40 <_Bfree>
 801498c:	464c      	mov	r4, r9
 801498e:	6923      	ldr	r3, [r4, #16]
 8014990:	1c5a      	adds	r2, r3, #1
 8014992:	6122      	str	r2, [r4, #16]
 8014994:	2201      	movs	r2, #1
 8014996:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801499a:	615a      	str	r2, [r3, #20]
 801499c:	e7bd      	b.n	801491a <__gethex+0x3b6>
 801499e:	6922      	ldr	r2, [r4, #16]
 80149a0:	455a      	cmp	r2, fp
 80149a2:	dd0b      	ble.n	80149bc <__gethex+0x458>
 80149a4:	2101      	movs	r1, #1
 80149a6:	4620      	mov	r0, r4
 80149a8:	f7ff fd74 	bl	8014494 <rshift>
 80149ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149b0:	3501      	adds	r5, #1
 80149b2:	42ab      	cmp	r3, r5
 80149b4:	f6ff aed5 	blt.w	8014762 <__gethex+0x1fe>
 80149b8:	2701      	movs	r7, #1
 80149ba:	e7c2      	b.n	8014942 <__gethex+0x3de>
 80149bc:	f016 061f 	ands.w	r6, r6, #31
 80149c0:	d0fa      	beq.n	80149b8 <__gethex+0x454>
 80149c2:	449a      	add	sl, r3
 80149c4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80149c8:	f000 f9f0 	bl	8014dac <__hi0bits>
 80149cc:	f1c6 0620 	rsb	r6, r6, #32
 80149d0:	42b0      	cmp	r0, r6
 80149d2:	dbe7      	blt.n	80149a4 <__gethex+0x440>
 80149d4:	e7f0      	b.n	80149b8 <__gethex+0x454>
 80149d6:	bf00      	nop
 80149d8:	08016c54 	.word	0x08016c54

080149dc <L_shift>:
 80149dc:	f1c2 0208 	rsb	r2, r2, #8
 80149e0:	0092      	lsls	r2, r2, #2
 80149e2:	b570      	push	{r4, r5, r6, lr}
 80149e4:	f1c2 0620 	rsb	r6, r2, #32
 80149e8:	6843      	ldr	r3, [r0, #4]
 80149ea:	6804      	ldr	r4, [r0, #0]
 80149ec:	fa03 f506 	lsl.w	r5, r3, r6
 80149f0:	432c      	orrs	r4, r5
 80149f2:	40d3      	lsrs	r3, r2
 80149f4:	6004      	str	r4, [r0, #0]
 80149f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80149fa:	4288      	cmp	r0, r1
 80149fc:	d3f4      	bcc.n	80149e8 <L_shift+0xc>
 80149fe:	bd70      	pop	{r4, r5, r6, pc}

08014a00 <__match>:
 8014a00:	b530      	push	{r4, r5, lr}
 8014a02:	6803      	ldr	r3, [r0, #0]
 8014a04:	3301      	adds	r3, #1
 8014a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a0a:	b914      	cbnz	r4, 8014a12 <__match+0x12>
 8014a0c:	6003      	str	r3, [r0, #0]
 8014a0e:	2001      	movs	r0, #1
 8014a10:	bd30      	pop	{r4, r5, pc}
 8014a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014a1a:	2d19      	cmp	r5, #25
 8014a1c:	bf98      	it	ls
 8014a1e:	3220      	addls	r2, #32
 8014a20:	42a2      	cmp	r2, r4
 8014a22:	d0f0      	beq.n	8014a06 <__match+0x6>
 8014a24:	2000      	movs	r0, #0
 8014a26:	e7f3      	b.n	8014a10 <__match+0x10>

08014a28 <__hexnan>:
 8014a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	2500      	movs	r5, #0
 8014a2e:	680b      	ldr	r3, [r1, #0]
 8014a30:	4682      	mov	sl, r0
 8014a32:	115e      	asrs	r6, r3, #5
 8014a34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014a38:	f013 031f 	ands.w	r3, r3, #31
 8014a3c:	bf18      	it	ne
 8014a3e:	3604      	addne	r6, #4
 8014a40:	1f37      	subs	r7, r6, #4
 8014a42:	4690      	mov	r8, r2
 8014a44:	46b9      	mov	r9, r7
 8014a46:	463c      	mov	r4, r7
 8014a48:	46ab      	mov	fp, r5
 8014a4a:	b087      	sub	sp, #28
 8014a4c:	6801      	ldr	r1, [r0, #0]
 8014a4e:	9301      	str	r3, [sp, #4]
 8014a50:	f846 5c04 	str.w	r5, [r6, #-4]
 8014a54:	9502      	str	r5, [sp, #8]
 8014a56:	784a      	ldrb	r2, [r1, #1]
 8014a58:	1c4b      	adds	r3, r1, #1
 8014a5a:	9303      	str	r3, [sp, #12]
 8014a5c:	b342      	cbz	r2, 8014ab0 <__hexnan+0x88>
 8014a5e:	4610      	mov	r0, r2
 8014a60:	9105      	str	r1, [sp, #20]
 8014a62:	9204      	str	r2, [sp, #16]
 8014a64:	f7ff fd69 	bl	801453a <__hexdig_fun>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d14f      	bne.n	8014b0c <__hexnan+0xe4>
 8014a6c:	9a04      	ldr	r2, [sp, #16]
 8014a6e:	9905      	ldr	r1, [sp, #20]
 8014a70:	2a20      	cmp	r2, #32
 8014a72:	d818      	bhi.n	8014aa6 <__hexnan+0x7e>
 8014a74:	9b02      	ldr	r3, [sp, #8]
 8014a76:	459b      	cmp	fp, r3
 8014a78:	dd13      	ble.n	8014aa2 <__hexnan+0x7a>
 8014a7a:	454c      	cmp	r4, r9
 8014a7c:	d206      	bcs.n	8014a8c <__hexnan+0x64>
 8014a7e:	2d07      	cmp	r5, #7
 8014a80:	dc04      	bgt.n	8014a8c <__hexnan+0x64>
 8014a82:	462a      	mov	r2, r5
 8014a84:	4649      	mov	r1, r9
 8014a86:	4620      	mov	r0, r4
 8014a88:	f7ff ffa8 	bl	80149dc <L_shift>
 8014a8c:	4544      	cmp	r4, r8
 8014a8e:	d950      	bls.n	8014b32 <__hexnan+0x10a>
 8014a90:	2300      	movs	r3, #0
 8014a92:	f1a4 0904 	sub.w	r9, r4, #4
 8014a96:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a9a:	461d      	mov	r5, r3
 8014a9c:	464c      	mov	r4, r9
 8014a9e:	f8cd b008 	str.w	fp, [sp, #8]
 8014aa2:	9903      	ldr	r1, [sp, #12]
 8014aa4:	e7d7      	b.n	8014a56 <__hexnan+0x2e>
 8014aa6:	2a29      	cmp	r2, #41	; 0x29
 8014aa8:	d156      	bne.n	8014b58 <__hexnan+0x130>
 8014aaa:	3102      	adds	r1, #2
 8014aac:	f8ca 1000 	str.w	r1, [sl]
 8014ab0:	f1bb 0f00 	cmp.w	fp, #0
 8014ab4:	d050      	beq.n	8014b58 <__hexnan+0x130>
 8014ab6:	454c      	cmp	r4, r9
 8014ab8:	d206      	bcs.n	8014ac8 <__hexnan+0xa0>
 8014aba:	2d07      	cmp	r5, #7
 8014abc:	dc04      	bgt.n	8014ac8 <__hexnan+0xa0>
 8014abe:	462a      	mov	r2, r5
 8014ac0:	4649      	mov	r1, r9
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	f7ff ff8a 	bl	80149dc <L_shift>
 8014ac8:	4544      	cmp	r4, r8
 8014aca:	d934      	bls.n	8014b36 <__hexnan+0x10e>
 8014acc:	4623      	mov	r3, r4
 8014ace:	f1a8 0204 	sub.w	r2, r8, #4
 8014ad2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ad6:	429f      	cmp	r7, r3
 8014ad8:	f842 1f04 	str.w	r1, [r2, #4]!
 8014adc:	d2f9      	bcs.n	8014ad2 <__hexnan+0xaa>
 8014ade:	1b3b      	subs	r3, r7, r4
 8014ae0:	f023 0303 	bic.w	r3, r3, #3
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	3401      	adds	r4, #1
 8014ae8:	3e03      	subs	r6, #3
 8014aea:	42b4      	cmp	r4, r6
 8014aec:	bf88      	it	hi
 8014aee:	2304      	movhi	r3, #4
 8014af0:	2200      	movs	r2, #0
 8014af2:	4443      	add	r3, r8
 8014af4:	f843 2b04 	str.w	r2, [r3], #4
 8014af8:	429f      	cmp	r7, r3
 8014afa:	d2fb      	bcs.n	8014af4 <__hexnan+0xcc>
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	b91b      	cbnz	r3, 8014b08 <__hexnan+0xe0>
 8014b00:	4547      	cmp	r7, r8
 8014b02:	d127      	bne.n	8014b54 <__hexnan+0x12c>
 8014b04:	2301      	movs	r3, #1
 8014b06:	603b      	str	r3, [r7, #0]
 8014b08:	2005      	movs	r0, #5
 8014b0a:	e026      	b.n	8014b5a <__hexnan+0x132>
 8014b0c:	3501      	adds	r5, #1
 8014b0e:	2d08      	cmp	r5, #8
 8014b10:	f10b 0b01 	add.w	fp, fp, #1
 8014b14:	dd06      	ble.n	8014b24 <__hexnan+0xfc>
 8014b16:	4544      	cmp	r4, r8
 8014b18:	d9c3      	bls.n	8014aa2 <__hexnan+0x7a>
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	2501      	movs	r5, #1
 8014b1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b22:	3c04      	subs	r4, #4
 8014b24:	6822      	ldr	r2, [r4, #0]
 8014b26:	f000 000f 	and.w	r0, r0, #15
 8014b2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014b2e:	6022      	str	r2, [r4, #0]
 8014b30:	e7b7      	b.n	8014aa2 <__hexnan+0x7a>
 8014b32:	2508      	movs	r5, #8
 8014b34:	e7b5      	b.n	8014aa2 <__hexnan+0x7a>
 8014b36:	9b01      	ldr	r3, [sp, #4]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d0df      	beq.n	8014afc <__hexnan+0xd4>
 8014b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b40:	f1c3 0320 	rsb	r3, r3, #32
 8014b44:	fa22 f303 	lsr.w	r3, r2, r3
 8014b48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b4c:	401a      	ands	r2, r3
 8014b4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8014b52:	e7d3      	b.n	8014afc <__hexnan+0xd4>
 8014b54:	3f04      	subs	r7, #4
 8014b56:	e7d1      	b.n	8014afc <__hexnan+0xd4>
 8014b58:	2004      	movs	r0, #4
 8014b5a:	b007      	add	sp, #28
 8014b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b60 <_localeconv_r>:
 8014b60:	4800      	ldr	r0, [pc, #0]	; (8014b64 <_localeconv_r+0x4>)
 8014b62:	4770      	bx	lr
 8014b64:	200003a0 	.word	0x200003a0

08014b68 <__ascii_mbtowc>:
 8014b68:	b082      	sub	sp, #8
 8014b6a:	b901      	cbnz	r1, 8014b6e <__ascii_mbtowc+0x6>
 8014b6c:	a901      	add	r1, sp, #4
 8014b6e:	b142      	cbz	r2, 8014b82 <__ascii_mbtowc+0x1a>
 8014b70:	b14b      	cbz	r3, 8014b86 <__ascii_mbtowc+0x1e>
 8014b72:	7813      	ldrb	r3, [r2, #0]
 8014b74:	600b      	str	r3, [r1, #0]
 8014b76:	7812      	ldrb	r2, [r2, #0]
 8014b78:	1e10      	subs	r0, r2, #0
 8014b7a:	bf18      	it	ne
 8014b7c:	2001      	movne	r0, #1
 8014b7e:	b002      	add	sp, #8
 8014b80:	4770      	bx	lr
 8014b82:	4610      	mov	r0, r2
 8014b84:	e7fb      	b.n	8014b7e <__ascii_mbtowc+0x16>
 8014b86:	f06f 0001 	mvn.w	r0, #1
 8014b8a:	e7f8      	b.n	8014b7e <__ascii_mbtowc+0x16>

08014b8c <memchr>:
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	b510      	push	{r4, lr}
 8014b90:	b2c9      	uxtb	r1, r1
 8014b92:	4402      	add	r2, r0
 8014b94:	4293      	cmp	r3, r2
 8014b96:	4618      	mov	r0, r3
 8014b98:	d101      	bne.n	8014b9e <memchr+0x12>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	e003      	b.n	8014ba6 <memchr+0x1a>
 8014b9e:	7804      	ldrb	r4, [r0, #0]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	428c      	cmp	r4, r1
 8014ba4:	d1f6      	bne.n	8014b94 <memchr+0x8>
 8014ba6:	bd10      	pop	{r4, pc}

08014ba8 <__malloc_lock>:
 8014ba8:	4801      	ldr	r0, [pc, #4]	; (8014bb0 <__malloc_lock+0x8>)
 8014baa:	f000 be82 	b.w	80158b2 <__retarget_lock_acquire_recursive>
 8014bae:	bf00      	nop
 8014bb0:	20008274 	.word	0x20008274

08014bb4 <__malloc_unlock>:
 8014bb4:	4801      	ldr	r0, [pc, #4]	; (8014bbc <__malloc_unlock+0x8>)
 8014bb6:	f000 be7d 	b.w	80158b4 <__retarget_lock_release_recursive>
 8014bba:	bf00      	nop
 8014bbc:	20008274 	.word	0x20008274

08014bc0 <_Balloc>:
 8014bc0:	b570      	push	{r4, r5, r6, lr}
 8014bc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	460d      	mov	r5, r1
 8014bc8:	b976      	cbnz	r6, 8014be8 <_Balloc+0x28>
 8014bca:	2010      	movs	r0, #16
 8014bcc:	f7fc ffae 	bl	8011b2c <malloc>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	6260      	str	r0, [r4, #36]	; 0x24
 8014bd4:	b920      	cbnz	r0, 8014be0 <_Balloc+0x20>
 8014bd6:	2166      	movs	r1, #102	; 0x66
 8014bd8:	4b17      	ldr	r3, [pc, #92]	; (8014c38 <_Balloc+0x78>)
 8014bda:	4818      	ldr	r0, [pc, #96]	; (8014c3c <_Balloc+0x7c>)
 8014bdc:	f000 fe38 	bl	8015850 <__assert_func>
 8014be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014be4:	6006      	str	r6, [r0, #0]
 8014be6:	60c6      	str	r6, [r0, #12]
 8014be8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014bea:	68f3      	ldr	r3, [r6, #12]
 8014bec:	b183      	cbz	r3, 8014c10 <_Balloc+0x50>
 8014bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bf0:	68db      	ldr	r3, [r3, #12]
 8014bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014bf6:	b9b8      	cbnz	r0, 8014c28 <_Balloc+0x68>
 8014bf8:	2101      	movs	r1, #1
 8014bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8014bfe:	1d72      	adds	r2, r6, #5
 8014c00:	4620      	mov	r0, r4
 8014c02:	0092      	lsls	r2, r2, #2
 8014c04:	f000 fc94 	bl	8015530 <_calloc_r>
 8014c08:	b160      	cbz	r0, 8014c24 <_Balloc+0x64>
 8014c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014c0e:	e00e      	b.n	8014c2e <_Balloc+0x6e>
 8014c10:	2221      	movs	r2, #33	; 0x21
 8014c12:	2104      	movs	r1, #4
 8014c14:	4620      	mov	r0, r4
 8014c16:	f000 fc8b 	bl	8015530 <_calloc_r>
 8014c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c1c:	60f0      	str	r0, [r6, #12]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d1e4      	bne.n	8014bee <_Balloc+0x2e>
 8014c24:	2000      	movs	r0, #0
 8014c26:	bd70      	pop	{r4, r5, r6, pc}
 8014c28:	6802      	ldr	r2, [r0, #0]
 8014c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014c34:	e7f7      	b.n	8014c26 <_Balloc+0x66>
 8014c36:	bf00      	nop
 8014c38:	08016bde 	.word	0x08016bde
 8014c3c:	08016ce4 	.word	0x08016ce4

08014c40 <_Bfree>:
 8014c40:	b570      	push	{r4, r5, r6, lr}
 8014c42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c44:	4605      	mov	r5, r0
 8014c46:	460c      	mov	r4, r1
 8014c48:	b976      	cbnz	r6, 8014c68 <_Bfree+0x28>
 8014c4a:	2010      	movs	r0, #16
 8014c4c:	f7fc ff6e 	bl	8011b2c <malloc>
 8014c50:	4602      	mov	r2, r0
 8014c52:	6268      	str	r0, [r5, #36]	; 0x24
 8014c54:	b920      	cbnz	r0, 8014c60 <_Bfree+0x20>
 8014c56:	218a      	movs	r1, #138	; 0x8a
 8014c58:	4b08      	ldr	r3, [pc, #32]	; (8014c7c <_Bfree+0x3c>)
 8014c5a:	4809      	ldr	r0, [pc, #36]	; (8014c80 <_Bfree+0x40>)
 8014c5c:	f000 fdf8 	bl	8015850 <__assert_func>
 8014c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c64:	6006      	str	r6, [r0, #0]
 8014c66:	60c6      	str	r6, [r0, #12]
 8014c68:	b13c      	cbz	r4, 8014c7a <_Bfree+0x3a>
 8014c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014c6c:	6862      	ldr	r2, [r4, #4]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c74:	6021      	str	r1, [r4, #0]
 8014c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014c7a:	bd70      	pop	{r4, r5, r6, pc}
 8014c7c:	08016bde 	.word	0x08016bde
 8014c80:	08016ce4 	.word	0x08016ce4

08014c84 <__multadd>:
 8014c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c88:	4698      	mov	r8, r3
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	690e      	ldr	r6, [r1, #16]
 8014c90:	4607      	mov	r7, r0
 8014c92:	f101 0014 	add.w	r0, r1, #20
 8014c96:	6805      	ldr	r5, [r0, #0]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	b2a9      	uxth	r1, r5
 8014c9c:	fb02 8101 	mla	r1, r2, r1, r8
 8014ca0:	0c2d      	lsrs	r5, r5, #16
 8014ca2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014ca6:	fb02 c505 	mla	r5, r2, r5, ip
 8014caa:	b289      	uxth	r1, r1
 8014cac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014cb0:	429e      	cmp	r6, r3
 8014cb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014cb6:	f840 1b04 	str.w	r1, [r0], #4
 8014cba:	dcec      	bgt.n	8014c96 <__multadd+0x12>
 8014cbc:	f1b8 0f00 	cmp.w	r8, #0
 8014cc0:	d022      	beq.n	8014d08 <__multadd+0x84>
 8014cc2:	68a3      	ldr	r3, [r4, #8]
 8014cc4:	42b3      	cmp	r3, r6
 8014cc6:	dc19      	bgt.n	8014cfc <__multadd+0x78>
 8014cc8:	6861      	ldr	r1, [r4, #4]
 8014cca:	4638      	mov	r0, r7
 8014ccc:	3101      	adds	r1, #1
 8014cce:	f7ff ff77 	bl	8014bc0 <_Balloc>
 8014cd2:	4605      	mov	r5, r0
 8014cd4:	b928      	cbnz	r0, 8014ce2 <__multadd+0x5e>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	21b5      	movs	r1, #181	; 0xb5
 8014cda:	4b0d      	ldr	r3, [pc, #52]	; (8014d10 <__multadd+0x8c>)
 8014cdc:	480d      	ldr	r0, [pc, #52]	; (8014d14 <__multadd+0x90>)
 8014cde:	f000 fdb7 	bl	8015850 <__assert_func>
 8014ce2:	6922      	ldr	r2, [r4, #16]
 8014ce4:	f104 010c 	add.w	r1, r4, #12
 8014ce8:	3202      	adds	r2, #2
 8014cea:	0092      	lsls	r2, r2, #2
 8014cec:	300c      	adds	r0, #12
 8014cee:	f7fc ff2d 	bl	8011b4c <memcpy>
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	4638      	mov	r0, r7
 8014cf6:	f7ff ffa3 	bl	8014c40 <_Bfree>
 8014cfa:	462c      	mov	r4, r5
 8014cfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014d00:	3601      	adds	r6, #1
 8014d02:	f8c3 8014 	str.w	r8, [r3, #20]
 8014d06:	6126      	str	r6, [r4, #16]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d0e:	bf00      	nop
 8014d10:	08016c54 	.word	0x08016c54
 8014d14:	08016ce4 	.word	0x08016ce4

08014d18 <__s2b>:
 8014d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d1c:	4615      	mov	r5, r2
 8014d1e:	2209      	movs	r2, #9
 8014d20:	461f      	mov	r7, r3
 8014d22:	3308      	adds	r3, #8
 8014d24:	460c      	mov	r4, r1
 8014d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	2201      	movs	r2, #1
 8014d2e:	2100      	movs	r1, #0
 8014d30:	429a      	cmp	r2, r3
 8014d32:	db09      	blt.n	8014d48 <__s2b+0x30>
 8014d34:	4630      	mov	r0, r6
 8014d36:	f7ff ff43 	bl	8014bc0 <_Balloc>
 8014d3a:	b940      	cbnz	r0, 8014d4e <__s2b+0x36>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	21ce      	movs	r1, #206	; 0xce
 8014d40:	4b18      	ldr	r3, [pc, #96]	; (8014da4 <__s2b+0x8c>)
 8014d42:	4819      	ldr	r0, [pc, #100]	; (8014da8 <__s2b+0x90>)
 8014d44:	f000 fd84 	bl	8015850 <__assert_func>
 8014d48:	0052      	lsls	r2, r2, #1
 8014d4a:	3101      	adds	r1, #1
 8014d4c:	e7f0      	b.n	8014d30 <__s2b+0x18>
 8014d4e:	9b08      	ldr	r3, [sp, #32]
 8014d50:	2d09      	cmp	r5, #9
 8014d52:	6143      	str	r3, [r0, #20]
 8014d54:	f04f 0301 	mov.w	r3, #1
 8014d58:	6103      	str	r3, [r0, #16]
 8014d5a:	dd16      	ble.n	8014d8a <__s2b+0x72>
 8014d5c:	f104 0909 	add.w	r9, r4, #9
 8014d60:	46c8      	mov	r8, r9
 8014d62:	442c      	add	r4, r5
 8014d64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014d68:	4601      	mov	r1, r0
 8014d6a:	220a      	movs	r2, #10
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	3b30      	subs	r3, #48	; 0x30
 8014d70:	f7ff ff88 	bl	8014c84 <__multadd>
 8014d74:	45a0      	cmp	r8, r4
 8014d76:	d1f5      	bne.n	8014d64 <__s2b+0x4c>
 8014d78:	f1a5 0408 	sub.w	r4, r5, #8
 8014d7c:	444c      	add	r4, r9
 8014d7e:	1b2d      	subs	r5, r5, r4
 8014d80:	1963      	adds	r3, r4, r5
 8014d82:	42bb      	cmp	r3, r7
 8014d84:	db04      	blt.n	8014d90 <__s2b+0x78>
 8014d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d8a:	2509      	movs	r5, #9
 8014d8c:	340a      	adds	r4, #10
 8014d8e:	e7f6      	b.n	8014d7e <__s2b+0x66>
 8014d90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014d94:	4601      	mov	r1, r0
 8014d96:	220a      	movs	r2, #10
 8014d98:	4630      	mov	r0, r6
 8014d9a:	3b30      	subs	r3, #48	; 0x30
 8014d9c:	f7ff ff72 	bl	8014c84 <__multadd>
 8014da0:	e7ee      	b.n	8014d80 <__s2b+0x68>
 8014da2:	bf00      	nop
 8014da4:	08016c54 	.word	0x08016c54
 8014da8:	08016ce4 	.word	0x08016ce4

08014dac <__hi0bits>:
 8014dac:	0c02      	lsrs	r2, r0, #16
 8014dae:	0412      	lsls	r2, r2, #16
 8014db0:	4603      	mov	r3, r0
 8014db2:	b9ca      	cbnz	r2, 8014de8 <__hi0bits+0x3c>
 8014db4:	0403      	lsls	r3, r0, #16
 8014db6:	2010      	movs	r0, #16
 8014db8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014dbc:	bf04      	itt	eq
 8014dbe:	021b      	lsleq	r3, r3, #8
 8014dc0:	3008      	addeq	r0, #8
 8014dc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014dc6:	bf04      	itt	eq
 8014dc8:	011b      	lsleq	r3, r3, #4
 8014dca:	3004      	addeq	r0, #4
 8014dcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014dd0:	bf04      	itt	eq
 8014dd2:	009b      	lsleq	r3, r3, #2
 8014dd4:	3002      	addeq	r0, #2
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	db05      	blt.n	8014de6 <__hi0bits+0x3a>
 8014dda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014dde:	f100 0001 	add.w	r0, r0, #1
 8014de2:	bf08      	it	eq
 8014de4:	2020      	moveq	r0, #32
 8014de6:	4770      	bx	lr
 8014de8:	2000      	movs	r0, #0
 8014dea:	e7e5      	b.n	8014db8 <__hi0bits+0xc>

08014dec <__lo0bits>:
 8014dec:	6803      	ldr	r3, [r0, #0]
 8014dee:	4602      	mov	r2, r0
 8014df0:	f013 0007 	ands.w	r0, r3, #7
 8014df4:	d00b      	beq.n	8014e0e <__lo0bits+0x22>
 8014df6:	07d9      	lsls	r1, r3, #31
 8014df8:	d422      	bmi.n	8014e40 <__lo0bits+0x54>
 8014dfa:	0798      	lsls	r0, r3, #30
 8014dfc:	bf49      	itett	mi
 8014dfe:	085b      	lsrmi	r3, r3, #1
 8014e00:	089b      	lsrpl	r3, r3, #2
 8014e02:	2001      	movmi	r0, #1
 8014e04:	6013      	strmi	r3, [r2, #0]
 8014e06:	bf5c      	itt	pl
 8014e08:	2002      	movpl	r0, #2
 8014e0a:	6013      	strpl	r3, [r2, #0]
 8014e0c:	4770      	bx	lr
 8014e0e:	b299      	uxth	r1, r3
 8014e10:	b909      	cbnz	r1, 8014e16 <__lo0bits+0x2a>
 8014e12:	2010      	movs	r0, #16
 8014e14:	0c1b      	lsrs	r3, r3, #16
 8014e16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014e1a:	bf04      	itt	eq
 8014e1c:	0a1b      	lsreq	r3, r3, #8
 8014e1e:	3008      	addeq	r0, #8
 8014e20:	0719      	lsls	r1, r3, #28
 8014e22:	bf04      	itt	eq
 8014e24:	091b      	lsreq	r3, r3, #4
 8014e26:	3004      	addeq	r0, #4
 8014e28:	0799      	lsls	r1, r3, #30
 8014e2a:	bf04      	itt	eq
 8014e2c:	089b      	lsreq	r3, r3, #2
 8014e2e:	3002      	addeq	r0, #2
 8014e30:	07d9      	lsls	r1, r3, #31
 8014e32:	d403      	bmi.n	8014e3c <__lo0bits+0x50>
 8014e34:	085b      	lsrs	r3, r3, #1
 8014e36:	f100 0001 	add.w	r0, r0, #1
 8014e3a:	d003      	beq.n	8014e44 <__lo0bits+0x58>
 8014e3c:	6013      	str	r3, [r2, #0]
 8014e3e:	4770      	bx	lr
 8014e40:	2000      	movs	r0, #0
 8014e42:	4770      	bx	lr
 8014e44:	2020      	movs	r0, #32
 8014e46:	4770      	bx	lr

08014e48 <__i2b>:
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	2101      	movs	r1, #1
 8014e4e:	f7ff feb7 	bl	8014bc0 <_Balloc>
 8014e52:	4602      	mov	r2, r0
 8014e54:	b928      	cbnz	r0, 8014e62 <__i2b+0x1a>
 8014e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014e5a:	4b04      	ldr	r3, [pc, #16]	; (8014e6c <__i2b+0x24>)
 8014e5c:	4804      	ldr	r0, [pc, #16]	; (8014e70 <__i2b+0x28>)
 8014e5e:	f000 fcf7 	bl	8015850 <__assert_func>
 8014e62:	2301      	movs	r3, #1
 8014e64:	6144      	str	r4, [r0, #20]
 8014e66:	6103      	str	r3, [r0, #16]
 8014e68:	bd10      	pop	{r4, pc}
 8014e6a:	bf00      	nop
 8014e6c:	08016c54 	.word	0x08016c54
 8014e70:	08016ce4 	.word	0x08016ce4

08014e74 <__multiply>:
 8014e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e78:	4614      	mov	r4, r2
 8014e7a:	690a      	ldr	r2, [r1, #16]
 8014e7c:	6923      	ldr	r3, [r4, #16]
 8014e7e:	460d      	mov	r5, r1
 8014e80:	429a      	cmp	r2, r3
 8014e82:	bfbe      	ittt	lt
 8014e84:	460b      	movlt	r3, r1
 8014e86:	4625      	movlt	r5, r4
 8014e88:	461c      	movlt	r4, r3
 8014e8a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014e8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014e92:	68ab      	ldr	r3, [r5, #8]
 8014e94:	6869      	ldr	r1, [r5, #4]
 8014e96:	eb0a 0709 	add.w	r7, sl, r9
 8014e9a:	42bb      	cmp	r3, r7
 8014e9c:	b085      	sub	sp, #20
 8014e9e:	bfb8      	it	lt
 8014ea0:	3101      	addlt	r1, #1
 8014ea2:	f7ff fe8d 	bl	8014bc0 <_Balloc>
 8014ea6:	b930      	cbnz	r0, 8014eb6 <__multiply+0x42>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	f240 115d 	movw	r1, #349	; 0x15d
 8014eae:	4b41      	ldr	r3, [pc, #260]	; (8014fb4 <__multiply+0x140>)
 8014eb0:	4841      	ldr	r0, [pc, #260]	; (8014fb8 <__multiply+0x144>)
 8014eb2:	f000 fccd 	bl	8015850 <__assert_func>
 8014eb6:	f100 0614 	add.w	r6, r0, #20
 8014eba:	4633      	mov	r3, r6
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014ec2:	4543      	cmp	r3, r8
 8014ec4:	d31e      	bcc.n	8014f04 <__multiply+0x90>
 8014ec6:	f105 0c14 	add.w	ip, r5, #20
 8014eca:	f104 0314 	add.w	r3, r4, #20
 8014ece:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014ed2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014ed6:	9202      	str	r2, [sp, #8]
 8014ed8:	ebac 0205 	sub.w	r2, ip, r5
 8014edc:	3a15      	subs	r2, #21
 8014ede:	f022 0203 	bic.w	r2, r2, #3
 8014ee2:	3204      	adds	r2, #4
 8014ee4:	f105 0115 	add.w	r1, r5, #21
 8014ee8:	458c      	cmp	ip, r1
 8014eea:	bf38      	it	cc
 8014eec:	2204      	movcc	r2, #4
 8014eee:	9201      	str	r2, [sp, #4]
 8014ef0:	9a02      	ldr	r2, [sp, #8]
 8014ef2:	9303      	str	r3, [sp, #12]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d808      	bhi.n	8014f0a <__multiply+0x96>
 8014ef8:	2f00      	cmp	r7, #0
 8014efa:	dc55      	bgt.n	8014fa8 <__multiply+0x134>
 8014efc:	6107      	str	r7, [r0, #16]
 8014efe:	b005      	add	sp, #20
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f04:	f843 2b04 	str.w	r2, [r3], #4
 8014f08:	e7db      	b.n	8014ec2 <__multiply+0x4e>
 8014f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8014f0e:	f1ba 0f00 	cmp.w	sl, #0
 8014f12:	d020      	beq.n	8014f56 <__multiply+0xe2>
 8014f14:	46b1      	mov	r9, r6
 8014f16:	2200      	movs	r2, #0
 8014f18:	f105 0e14 	add.w	lr, r5, #20
 8014f1c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014f20:	f8d9 b000 	ldr.w	fp, [r9]
 8014f24:	b2a1      	uxth	r1, r4
 8014f26:	fa1f fb8b 	uxth.w	fp, fp
 8014f2a:	fb0a b101 	mla	r1, sl, r1, fp
 8014f2e:	4411      	add	r1, r2
 8014f30:	f8d9 2000 	ldr.w	r2, [r9]
 8014f34:	0c24      	lsrs	r4, r4, #16
 8014f36:	0c12      	lsrs	r2, r2, #16
 8014f38:	fb0a 2404 	mla	r4, sl, r4, r2
 8014f3c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014f40:	b289      	uxth	r1, r1
 8014f42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014f46:	45f4      	cmp	ip, lr
 8014f48:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014f4c:	f849 1b04 	str.w	r1, [r9], #4
 8014f50:	d8e4      	bhi.n	8014f1c <__multiply+0xa8>
 8014f52:	9901      	ldr	r1, [sp, #4]
 8014f54:	5072      	str	r2, [r6, r1]
 8014f56:	9a03      	ldr	r2, [sp, #12]
 8014f58:	3304      	adds	r3, #4
 8014f5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014f5e:	f1b9 0f00 	cmp.w	r9, #0
 8014f62:	d01f      	beq.n	8014fa4 <__multiply+0x130>
 8014f64:	46b6      	mov	lr, r6
 8014f66:	f04f 0a00 	mov.w	sl, #0
 8014f6a:	6834      	ldr	r4, [r6, #0]
 8014f6c:	f105 0114 	add.w	r1, r5, #20
 8014f70:	880a      	ldrh	r2, [r1, #0]
 8014f72:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014f76:	b2a4      	uxth	r4, r4
 8014f78:	fb09 b202 	mla	r2, r9, r2, fp
 8014f7c:	4492      	add	sl, r2
 8014f7e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014f82:	f84e 4b04 	str.w	r4, [lr], #4
 8014f86:	f851 4b04 	ldr.w	r4, [r1], #4
 8014f8a:	f8be 2000 	ldrh.w	r2, [lr]
 8014f8e:	0c24      	lsrs	r4, r4, #16
 8014f90:	fb09 2404 	mla	r4, r9, r4, r2
 8014f94:	458c      	cmp	ip, r1
 8014f96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014f9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014f9e:	d8e7      	bhi.n	8014f70 <__multiply+0xfc>
 8014fa0:	9a01      	ldr	r2, [sp, #4]
 8014fa2:	50b4      	str	r4, [r6, r2]
 8014fa4:	3604      	adds	r6, #4
 8014fa6:	e7a3      	b.n	8014ef0 <__multiply+0x7c>
 8014fa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d1a5      	bne.n	8014efc <__multiply+0x88>
 8014fb0:	3f01      	subs	r7, #1
 8014fb2:	e7a1      	b.n	8014ef8 <__multiply+0x84>
 8014fb4:	08016c54 	.word	0x08016c54
 8014fb8:	08016ce4 	.word	0x08016ce4

08014fbc <__pow5mult>:
 8014fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc0:	4615      	mov	r5, r2
 8014fc2:	f012 0203 	ands.w	r2, r2, #3
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460f      	mov	r7, r1
 8014fca:	d007      	beq.n	8014fdc <__pow5mult+0x20>
 8014fcc:	4c25      	ldr	r4, [pc, #148]	; (8015064 <__pow5mult+0xa8>)
 8014fce:	3a01      	subs	r2, #1
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014fd6:	f7ff fe55 	bl	8014c84 <__multadd>
 8014fda:	4607      	mov	r7, r0
 8014fdc:	10ad      	asrs	r5, r5, #2
 8014fde:	d03d      	beq.n	801505c <__pow5mult+0xa0>
 8014fe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014fe2:	b97c      	cbnz	r4, 8015004 <__pow5mult+0x48>
 8014fe4:	2010      	movs	r0, #16
 8014fe6:	f7fc fda1 	bl	8011b2c <malloc>
 8014fea:	4602      	mov	r2, r0
 8014fec:	6270      	str	r0, [r6, #36]	; 0x24
 8014fee:	b928      	cbnz	r0, 8014ffc <__pow5mult+0x40>
 8014ff0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014ff4:	4b1c      	ldr	r3, [pc, #112]	; (8015068 <__pow5mult+0xac>)
 8014ff6:	481d      	ldr	r0, [pc, #116]	; (801506c <__pow5mult+0xb0>)
 8014ff8:	f000 fc2a 	bl	8015850 <__assert_func>
 8014ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015000:	6004      	str	r4, [r0, #0]
 8015002:	60c4      	str	r4, [r0, #12]
 8015004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801500c:	b94c      	cbnz	r4, 8015022 <__pow5mult+0x66>
 801500e:	f240 2171 	movw	r1, #625	; 0x271
 8015012:	4630      	mov	r0, r6
 8015014:	f7ff ff18 	bl	8014e48 <__i2b>
 8015018:	2300      	movs	r3, #0
 801501a:	4604      	mov	r4, r0
 801501c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015020:	6003      	str	r3, [r0, #0]
 8015022:	f04f 0900 	mov.w	r9, #0
 8015026:	07eb      	lsls	r3, r5, #31
 8015028:	d50a      	bpl.n	8015040 <__pow5mult+0x84>
 801502a:	4639      	mov	r1, r7
 801502c:	4622      	mov	r2, r4
 801502e:	4630      	mov	r0, r6
 8015030:	f7ff ff20 	bl	8014e74 <__multiply>
 8015034:	4680      	mov	r8, r0
 8015036:	4639      	mov	r1, r7
 8015038:	4630      	mov	r0, r6
 801503a:	f7ff fe01 	bl	8014c40 <_Bfree>
 801503e:	4647      	mov	r7, r8
 8015040:	106d      	asrs	r5, r5, #1
 8015042:	d00b      	beq.n	801505c <__pow5mult+0xa0>
 8015044:	6820      	ldr	r0, [r4, #0]
 8015046:	b938      	cbnz	r0, 8015058 <__pow5mult+0x9c>
 8015048:	4622      	mov	r2, r4
 801504a:	4621      	mov	r1, r4
 801504c:	4630      	mov	r0, r6
 801504e:	f7ff ff11 	bl	8014e74 <__multiply>
 8015052:	6020      	str	r0, [r4, #0]
 8015054:	f8c0 9000 	str.w	r9, [r0]
 8015058:	4604      	mov	r4, r0
 801505a:	e7e4      	b.n	8015026 <__pow5mult+0x6a>
 801505c:	4638      	mov	r0, r7
 801505e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015062:	bf00      	nop
 8015064:	08016e38 	.word	0x08016e38
 8015068:	08016bde 	.word	0x08016bde
 801506c:	08016ce4 	.word	0x08016ce4

08015070 <__lshift>:
 8015070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	460c      	mov	r4, r1
 8015076:	4607      	mov	r7, r0
 8015078:	4691      	mov	r9, r2
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	6849      	ldr	r1, [r1, #4]
 801507e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015082:	68a3      	ldr	r3, [r4, #8]
 8015084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015088:	f108 0601 	add.w	r6, r8, #1
 801508c:	42b3      	cmp	r3, r6
 801508e:	db0b      	blt.n	80150a8 <__lshift+0x38>
 8015090:	4638      	mov	r0, r7
 8015092:	f7ff fd95 	bl	8014bc0 <_Balloc>
 8015096:	4605      	mov	r5, r0
 8015098:	b948      	cbnz	r0, 80150ae <__lshift+0x3e>
 801509a:	4602      	mov	r2, r0
 801509c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80150a0:	4b27      	ldr	r3, [pc, #156]	; (8015140 <__lshift+0xd0>)
 80150a2:	4828      	ldr	r0, [pc, #160]	; (8015144 <__lshift+0xd4>)
 80150a4:	f000 fbd4 	bl	8015850 <__assert_func>
 80150a8:	3101      	adds	r1, #1
 80150aa:	005b      	lsls	r3, r3, #1
 80150ac:	e7ee      	b.n	801508c <__lshift+0x1c>
 80150ae:	2300      	movs	r3, #0
 80150b0:	f100 0114 	add.w	r1, r0, #20
 80150b4:	f100 0210 	add.w	r2, r0, #16
 80150b8:	4618      	mov	r0, r3
 80150ba:	4553      	cmp	r3, sl
 80150bc:	db33      	blt.n	8015126 <__lshift+0xb6>
 80150be:	6920      	ldr	r0, [r4, #16]
 80150c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150c4:	f104 0314 	add.w	r3, r4, #20
 80150c8:	f019 091f 	ands.w	r9, r9, #31
 80150cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80150d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80150d4:	d02b      	beq.n	801512e <__lshift+0xbe>
 80150d6:	468a      	mov	sl, r1
 80150d8:	2200      	movs	r2, #0
 80150da:	f1c9 0e20 	rsb	lr, r9, #32
 80150de:	6818      	ldr	r0, [r3, #0]
 80150e0:	fa00 f009 	lsl.w	r0, r0, r9
 80150e4:	4302      	orrs	r2, r0
 80150e6:	f84a 2b04 	str.w	r2, [sl], #4
 80150ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80150ee:	459c      	cmp	ip, r3
 80150f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80150f4:	d8f3      	bhi.n	80150de <__lshift+0x6e>
 80150f6:	ebac 0304 	sub.w	r3, ip, r4
 80150fa:	3b15      	subs	r3, #21
 80150fc:	f023 0303 	bic.w	r3, r3, #3
 8015100:	3304      	adds	r3, #4
 8015102:	f104 0015 	add.w	r0, r4, #21
 8015106:	4584      	cmp	ip, r0
 8015108:	bf38      	it	cc
 801510a:	2304      	movcc	r3, #4
 801510c:	50ca      	str	r2, [r1, r3]
 801510e:	b10a      	cbz	r2, 8015114 <__lshift+0xa4>
 8015110:	f108 0602 	add.w	r6, r8, #2
 8015114:	3e01      	subs	r6, #1
 8015116:	4638      	mov	r0, r7
 8015118:	4621      	mov	r1, r4
 801511a:	612e      	str	r6, [r5, #16]
 801511c:	f7ff fd90 	bl	8014c40 <_Bfree>
 8015120:	4628      	mov	r0, r5
 8015122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015126:	f842 0f04 	str.w	r0, [r2, #4]!
 801512a:	3301      	adds	r3, #1
 801512c:	e7c5      	b.n	80150ba <__lshift+0x4a>
 801512e:	3904      	subs	r1, #4
 8015130:	f853 2b04 	ldr.w	r2, [r3], #4
 8015134:	459c      	cmp	ip, r3
 8015136:	f841 2f04 	str.w	r2, [r1, #4]!
 801513a:	d8f9      	bhi.n	8015130 <__lshift+0xc0>
 801513c:	e7ea      	b.n	8015114 <__lshift+0xa4>
 801513e:	bf00      	nop
 8015140:	08016c54 	.word	0x08016c54
 8015144:	08016ce4 	.word	0x08016ce4

08015148 <__mcmp>:
 8015148:	4603      	mov	r3, r0
 801514a:	690a      	ldr	r2, [r1, #16]
 801514c:	6900      	ldr	r0, [r0, #16]
 801514e:	b530      	push	{r4, r5, lr}
 8015150:	1a80      	subs	r0, r0, r2
 8015152:	d10d      	bne.n	8015170 <__mcmp+0x28>
 8015154:	3314      	adds	r3, #20
 8015156:	3114      	adds	r1, #20
 8015158:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801515c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015160:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015164:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015168:	4295      	cmp	r5, r2
 801516a:	d002      	beq.n	8015172 <__mcmp+0x2a>
 801516c:	d304      	bcc.n	8015178 <__mcmp+0x30>
 801516e:	2001      	movs	r0, #1
 8015170:	bd30      	pop	{r4, r5, pc}
 8015172:	42a3      	cmp	r3, r4
 8015174:	d3f4      	bcc.n	8015160 <__mcmp+0x18>
 8015176:	e7fb      	b.n	8015170 <__mcmp+0x28>
 8015178:	f04f 30ff 	mov.w	r0, #4294967295
 801517c:	e7f8      	b.n	8015170 <__mcmp+0x28>
	...

08015180 <__mdiff>:
 8015180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015184:	460c      	mov	r4, r1
 8015186:	4606      	mov	r6, r0
 8015188:	4611      	mov	r1, r2
 801518a:	4620      	mov	r0, r4
 801518c:	4692      	mov	sl, r2
 801518e:	f7ff ffdb 	bl	8015148 <__mcmp>
 8015192:	1e05      	subs	r5, r0, #0
 8015194:	d111      	bne.n	80151ba <__mdiff+0x3a>
 8015196:	4629      	mov	r1, r5
 8015198:	4630      	mov	r0, r6
 801519a:	f7ff fd11 	bl	8014bc0 <_Balloc>
 801519e:	4602      	mov	r2, r0
 80151a0:	b928      	cbnz	r0, 80151ae <__mdiff+0x2e>
 80151a2:	f240 2132 	movw	r1, #562	; 0x232
 80151a6:	4b3c      	ldr	r3, [pc, #240]	; (8015298 <__mdiff+0x118>)
 80151a8:	483c      	ldr	r0, [pc, #240]	; (801529c <__mdiff+0x11c>)
 80151aa:	f000 fb51 	bl	8015850 <__assert_func>
 80151ae:	2301      	movs	r3, #1
 80151b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80151b4:	4610      	mov	r0, r2
 80151b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ba:	bfa4      	itt	ge
 80151bc:	4653      	movge	r3, sl
 80151be:	46a2      	movge	sl, r4
 80151c0:	4630      	mov	r0, r6
 80151c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80151c6:	bfa6      	itte	ge
 80151c8:	461c      	movge	r4, r3
 80151ca:	2500      	movge	r5, #0
 80151cc:	2501      	movlt	r5, #1
 80151ce:	f7ff fcf7 	bl	8014bc0 <_Balloc>
 80151d2:	4602      	mov	r2, r0
 80151d4:	b918      	cbnz	r0, 80151de <__mdiff+0x5e>
 80151d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80151da:	4b2f      	ldr	r3, [pc, #188]	; (8015298 <__mdiff+0x118>)
 80151dc:	e7e4      	b.n	80151a8 <__mdiff+0x28>
 80151de:	f100 0814 	add.w	r8, r0, #20
 80151e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80151e6:	60c5      	str	r5, [r0, #12]
 80151e8:	f04f 0c00 	mov.w	ip, #0
 80151ec:	f10a 0514 	add.w	r5, sl, #20
 80151f0:	f10a 0010 	add.w	r0, sl, #16
 80151f4:	46c2      	mov	sl, r8
 80151f6:	6926      	ldr	r6, [r4, #16]
 80151f8:	f104 0914 	add.w	r9, r4, #20
 80151fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8015200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015204:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8015208:	f859 3b04 	ldr.w	r3, [r9], #4
 801520c:	fa1f f18b 	uxth.w	r1, fp
 8015210:	4461      	add	r1, ip
 8015212:	fa1f fc83 	uxth.w	ip, r3
 8015216:	0c1b      	lsrs	r3, r3, #16
 8015218:	eba1 010c 	sub.w	r1, r1, ip
 801521c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015220:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015224:	b289      	uxth	r1, r1
 8015226:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801522a:	454e      	cmp	r6, r9
 801522c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015230:	f84a 3b04 	str.w	r3, [sl], #4
 8015234:	d8e6      	bhi.n	8015204 <__mdiff+0x84>
 8015236:	1b33      	subs	r3, r6, r4
 8015238:	3b15      	subs	r3, #21
 801523a:	f023 0303 	bic.w	r3, r3, #3
 801523e:	3415      	adds	r4, #21
 8015240:	3304      	adds	r3, #4
 8015242:	42a6      	cmp	r6, r4
 8015244:	bf38      	it	cc
 8015246:	2304      	movcc	r3, #4
 8015248:	441d      	add	r5, r3
 801524a:	4443      	add	r3, r8
 801524c:	461e      	mov	r6, r3
 801524e:	462c      	mov	r4, r5
 8015250:	4574      	cmp	r4, lr
 8015252:	d30e      	bcc.n	8015272 <__mdiff+0xf2>
 8015254:	f10e 0103 	add.w	r1, lr, #3
 8015258:	1b49      	subs	r1, r1, r5
 801525a:	f021 0103 	bic.w	r1, r1, #3
 801525e:	3d03      	subs	r5, #3
 8015260:	45ae      	cmp	lr, r5
 8015262:	bf38      	it	cc
 8015264:	2100      	movcc	r1, #0
 8015266:	4419      	add	r1, r3
 8015268:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801526c:	b18b      	cbz	r3, 8015292 <__mdiff+0x112>
 801526e:	6117      	str	r7, [r2, #16]
 8015270:	e7a0      	b.n	80151b4 <__mdiff+0x34>
 8015272:	f854 8b04 	ldr.w	r8, [r4], #4
 8015276:	fa1f f188 	uxth.w	r1, r8
 801527a:	4461      	add	r1, ip
 801527c:	1408      	asrs	r0, r1, #16
 801527e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8015282:	b289      	uxth	r1, r1
 8015284:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801528c:	f846 1b04 	str.w	r1, [r6], #4
 8015290:	e7de      	b.n	8015250 <__mdiff+0xd0>
 8015292:	3f01      	subs	r7, #1
 8015294:	e7e8      	b.n	8015268 <__mdiff+0xe8>
 8015296:	bf00      	nop
 8015298:	08016c54 	.word	0x08016c54
 801529c:	08016ce4 	.word	0x08016ce4

080152a0 <__ulp>:
 80152a0:	4b11      	ldr	r3, [pc, #68]	; (80152e8 <__ulp+0x48>)
 80152a2:	400b      	ands	r3, r1
 80152a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	dd02      	ble.n	80152b2 <__ulp+0x12>
 80152ac:	2000      	movs	r0, #0
 80152ae:	4619      	mov	r1, r3
 80152b0:	4770      	bx	lr
 80152b2:	425b      	negs	r3, r3
 80152b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80152b8:	f04f 0000 	mov.w	r0, #0
 80152bc:	f04f 0100 	mov.w	r1, #0
 80152c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80152c4:	da04      	bge.n	80152d0 <__ulp+0x30>
 80152c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80152ca:	fa43 f102 	asr.w	r1, r3, r2
 80152ce:	4770      	bx	lr
 80152d0:	f1a2 0314 	sub.w	r3, r2, #20
 80152d4:	2b1e      	cmp	r3, #30
 80152d6:	bfd6      	itet	le
 80152d8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80152dc:	2301      	movgt	r3, #1
 80152de:	fa22 f303 	lsrle.w	r3, r2, r3
 80152e2:	4618      	mov	r0, r3
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop
 80152e8:	7ff00000 	.word	0x7ff00000

080152ec <__b2d>:
 80152ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152f0:	6907      	ldr	r7, [r0, #16]
 80152f2:	f100 0914 	add.w	r9, r0, #20
 80152f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80152fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80152fe:	f1a7 0804 	sub.w	r8, r7, #4
 8015302:	4630      	mov	r0, r6
 8015304:	f7ff fd52 	bl	8014dac <__hi0bits>
 8015308:	f1c0 0320 	rsb	r3, r0, #32
 801530c:	280a      	cmp	r0, #10
 801530e:	600b      	str	r3, [r1, #0]
 8015310:	491f      	ldr	r1, [pc, #124]	; (8015390 <__b2d+0xa4>)
 8015312:	dc17      	bgt.n	8015344 <__b2d+0x58>
 8015314:	45c1      	cmp	r9, r8
 8015316:	bf28      	it	cs
 8015318:	2200      	movcs	r2, #0
 801531a:	f1c0 0c0b 	rsb	ip, r0, #11
 801531e:	fa26 f30c 	lsr.w	r3, r6, ip
 8015322:	bf38      	it	cc
 8015324:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015328:	ea43 0501 	orr.w	r5, r3, r1
 801532c:	f100 0315 	add.w	r3, r0, #21
 8015330:	fa06 f303 	lsl.w	r3, r6, r3
 8015334:	fa22 f20c 	lsr.w	r2, r2, ip
 8015338:	ea43 0402 	orr.w	r4, r3, r2
 801533c:	4620      	mov	r0, r4
 801533e:	4629      	mov	r1, r5
 8015340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015344:	45c1      	cmp	r9, r8
 8015346:	bf2e      	itee	cs
 8015348:	2200      	movcs	r2, #0
 801534a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801534e:	f1a7 0808 	subcc.w	r8, r7, #8
 8015352:	f1b0 030b 	subs.w	r3, r0, #11
 8015356:	d016      	beq.n	8015386 <__b2d+0x9a>
 8015358:	f1c3 0720 	rsb	r7, r3, #32
 801535c:	fa22 f107 	lsr.w	r1, r2, r7
 8015360:	45c8      	cmp	r8, r9
 8015362:	fa06 f603 	lsl.w	r6, r6, r3
 8015366:	ea46 0601 	orr.w	r6, r6, r1
 801536a:	bf94      	ite	ls
 801536c:	2100      	movls	r1, #0
 801536e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8015372:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8015376:	fa02 f003 	lsl.w	r0, r2, r3
 801537a:	40f9      	lsrs	r1, r7
 801537c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015380:	ea40 0401 	orr.w	r4, r0, r1
 8015384:	e7da      	b.n	801533c <__b2d+0x50>
 8015386:	4614      	mov	r4, r2
 8015388:	ea46 0501 	orr.w	r5, r6, r1
 801538c:	e7d6      	b.n	801533c <__b2d+0x50>
 801538e:	bf00      	nop
 8015390:	3ff00000 	.word	0x3ff00000

08015394 <__d2b>:
 8015394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015398:	2101      	movs	r1, #1
 801539a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801539e:	4690      	mov	r8, r2
 80153a0:	461d      	mov	r5, r3
 80153a2:	f7ff fc0d 	bl	8014bc0 <_Balloc>
 80153a6:	4604      	mov	r4, r0
 80153a8:	b930      	cbnz	r0, 80153b8 <__d2b+0x24>
 80153aa:	4602      	mov	r2, r0
 80153ac:	f240 310a 	movw	r1, #778	; 0x30a
 80153b0:	4b24      	ldr	r3, [pc, #144]	; (8015444 <__d2b+0xb0>)
 80153b2:	4825      	ldr	r0, [pc, #148]	; (8015448 <__d2b+0xb4>)
 80153b4:	f000 fa4c 	bl	8015850 <__assert_func>
 80153b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80153bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80153c0:	bb2d      	cbnz	r5, 801540e <__d2b+0x7a>
 80153c2:	9301      	str	r3, [sp, #4]
 80153c4:	f1b8 0300 	subs.w	r3, r8, #0
 80153c8:	d026      	beq.n	8015418 <__d2b+0x84>
 80153ca:	4668      	mov	r0, sp
 80153cc:	9300      	str	r3, [sp, #0]
 80153ce:	f7ff fd0d 	bl	8014dec <__lo0bits>
 80153d2:	9900      	ldr	r1, [sp, #0]
 80153d4:	b1f0      	cbz	r0, 8015414 <__d2b+0x80>
 80153d6:	9a01      	ldr	r2, [sp, #4]
 80153d8:	f1c0 0320 	rsb	r3, r0, #32
 80153dc:	fa02 f303 	lsl.w	r3, r2, r3
 80153e0:	430b      	orrs	r3, r1
 80153e2:	40c2      	lsrs	r2, r0
 80153e4:	6163      	str	r3, [r4, #20]
 80153e6:	9201      	str	r2, [sp, #4]
 80153e8:	9b01      	ldr	r3, [sp, #4]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	bf14      	ite	ne
 80153ee:	2102      	movne	r1, #2
 80153f0:	2101      	moveq	r1, #1
 80153f2:	61a3      	str	r3, [r4, #24]
 80153f4:	6121      	str	r1, [r4, #16]
 80153f6:	b1c5      	cbz	r5, 801542a <__d2b+0x96>
 80153f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80153fc:	4405      	add	r5, r0
 80153fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015402:	603d      	str	r5, [r7, #0]
 8015404:	6030      	str	r0, [r6, #0]
 8015406:	4620      	mov	r0, r4
 8015408:	b002      	add	sp, #8
 801540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801540e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015412:	e7d6      	b.n	80153c2 <__d2b+0x2e>
 8015414:	6161      	str	r1, [r4, #20]
 8015416:	e7e7      	b.n	80153e8 <__d2b+0x54>
 8015418:	a801      	add	r0, sp, #4
 801541a:	f7ff fce7 	bl	8014dec <__lo0bits>
 801541e:	2101      	movs	r1, #1
 8015420:	9b01      	ldr	r3, [sp, #4]
 8015422:	6121      	str	r1, [r4, #16]
 8015424:	6163      	str	r3, [r4, #20]
 8015426:	3020      	adds	r0, #32
 8015428:	e7e5      	b.n	80153f6 <__d2b+0x62>
 801542a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801542e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015432:	6038      	str	r0, [r7, #0]
 8015434:	6918      	ldr	r0, [r3, #16]
 8015436:	f7ff fcb9 	bl	8014dac <__hi0bits>
 801543a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801543e:	6031      	str	r1, [r6, #0]
 8015440:	e7e1      	b.n	8015406 <__d2b+0x72>
 8015442:	bf00      	nop
 8015444:	08016c54 	.word	0x08016c54
 8015448:	08016ce4 	.word	0x08016ce4

0801544c <__ratio>:
 801544c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015450:	4688      	mov	r8, r1
 8015452:	4669      	mov	r1, sp
 8015454:	4681      	mov	r9, r0
 8015456:	f7ff ff49 	bl	80152ec <__b2d>
 801545a:	460f      	mov	r7, r1
 801545c:	4604      	mov	r4, r0
 801545e:	460d      	mov	r5, r1
 8015460:	4640      	mov	r0, r8
 8015462:	a901      	add	r1, sp, #4
 8015464:	f7ff ff42 	bl	80152ec <__b2d>
 8015468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801546c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015470:	468b      	mov	fp, r1
 8015472:	eba3 0c02 	sub.w	ip, r3, r2
 8015476:	e9dd 3200 	ldrd	r3, r2, [sp]
 801547a:	1a9b      	subs	r3, r3, r2
 801547c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015480:	2b00      	cmp	r3, #0
 8015482:	bfd5      	itete	le
 8015484:	460a      	movle	r2, r1
 8015486:	462a      	movgt	r2, r5
 8015488:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801548c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015490:	bfd8      	it	le
 8015492:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015496:	465b      	mov	r3, fp
 8015498:	4602      	mov	r2, r0
 801549a:	4639      	mov	r1, r7
 801549c:	4620      	mov	r0, r4
 801549e:	f7eb f98b 	bl	80007b8 <__aeabi_ddiv>
 80154a2:	b003      	add	sp, #12
 80154a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154a8 <__copybits>:
 80154a8:	3901      	subs	r1, #1
 80154aa:	b570      	push	{r4, r5, r6, lr}
 80154ac:	1149      	asrs	r1, r1, #5
 80154ae:	6914      	ldr	r4, [r2, #16]
 80154b0:	3101      	adds	r1, #1
 80154b2:	f102 0314 	add.w	r3, r2, #20
 80154b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80154ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80154be:	1f05      	subs	r5, r0, #4
 80154c0:	42a3      	cmp	r3, r4
 80154c2:	d30c      	bcc.n	80154de <__copybits+0x36>
 80154c4:	1aa3      	subs	r3, r4, r2
 80154c6:	3b11      	subs	r3, #17
 80154c8:	f023 0303 	bic.w	r3, r3, #3
 80154cc:	3211      	adds	r2, #17
 80154ce:	42a2      	cmp	r2, r4
 80154d0:	bf88      	it	hi
 80154d2:	2300      	movhi	r3, #0
 80154d4:	4418      	add	r0, r3
 80154d6:	2300      	movs	r3, #0
 80154d8:	4288      	cmp	r0, r1
 80154da:	d305      	bcc.n	80154e8 <__copybits+0x40>
 80154dc:	bd70      	pop	{r4, r5, r6, pc}
 80154de:	f853 6b04 	ldr.w	r6, [r3], #4
 80154e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80154e6:	e7eb      	b.n	80154c0 <__copybits+0x18>
 80154e8:	f840 3b04 	str.w	r3, [r0], #4
 80154ec:	e7f4      	b.n	80154d8 <__copybits+0x30>

080154ee <__any_on>:
 80154ee:	f100 0214 	add.w	r2, r0, #20
 80154f2:	6900      	ldr	r0, [r0, #16]
 80154f4:	114b      	asrs	r3, r1, #5
 80154f6:	4298      	cmp	r0, r3
 80154f8:	b510      	push	{r4, lr}
 80154fa:	db11      	blt.n	8015520 <__any_on+0x32>
 80154fc:	dd0a      	ble.n	8015514 <__any_on+0x26>
 80154fe:	f011 011f 	ands.w	r1, r1, #31
 8015502:	d007      	beq.n	8015514 <__any_on+0x26>
 8015504:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015508:	fa24 f001 	lsr.w	r0, r4, r1
 801550c:	fa00 f101 	lsl.w	r1, r0, r1
 8015510:	428c      	cmp	r4, r1
 8015512:	d10b      	bne.n	801552c <__any_on+0x3e>
 8015514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015518:	4293      	cmp	r3, r2
 801551a:	d803      	bhi.n	8015524 <__any_on+0x36>
 801551c:	2000      	movs	r0, #0
 801551e:	bd10      	pop	{r4, pc}
 8015520:	4603      	mov	r3, r0
 8015522:	e7f7      	b.n	8015514 <__any_on+0x26>
 8015524:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015528:	2900      	cmp	r1, #0
 801552a:	d0f5      	beq.n	8015518 <__any_on+0x2a>
 801552c:	2001      	movs	r0, #1
 801552e:	e7f6      	b.n	801551e <__any_on+0x30>

08015530 <_calloc_r>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	fb02 f501 	mul.w	r5, r2, r1
 8015536:	4629      	mov	r1, r5
 8015538:	f7fc fb6a 	bl	8011c10 <_malloc_r>
 801553c:	4604      	mov	r4, r0
 801553e:	b118      	cbz	r0, 8015548 <_calloc_r+0x18>
 8015540:	462a      	mov	r2, r5
 8015542:	2100      	movs	r1, #0
 8015544:	f7fc fb10 	bl	8011b68 <memset>
 8015548:	4620      	mov	r0, r4
 801554a:	bd38      	pop	{r3, r4, r5, pc}

0801554c <__ssputs_r>:
 801554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015550:	688e      	ldr	r6, [r1, #8]
 8015552:	4682      	mov	sl, r0
 8015554:	429e      	cmp	r6, r3
 8015556:	460c      	mov	r4, r1
 8015558:	4690      	mov	r8, r2
 801555a:	461f      	mov	r7, r3
 801555c:	d838      	bhi.n	80155d0 <__ssputs_r+0x84>
 801555e:	898a      	ldrh	r2, [r1, #12]
 8015560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015564:	d032      	beq.n	80155cc <__ssputs_r+0x80>
 8015566:	6825      	ldr	r5, [r4, #0]
 8015568:	6909      	ldr	r1, [r1, #16]
 801556a:	3301      	adds	r3, #1
 801556c:	eba5 0901 	sub.w	r9, r5, r1
 8015570:	6965      	ldr	r5, [r4, #20]
 8015572:	444b      	add	r3, r9
 8015574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801557c:	106d      	asrs	r5, r5, #1
 801557e:	429d      	cmp	r5, r3
 8015580:	bf38      	it	cc
 8015582:	461d      	movcc	r5, r3
 8015584:	0553      	lsls	r3, r2, #21
 8015586:	d531      	bpl.n	80155ec <__ssputs_r+0xa0>
 8015588:	4629      	mov	r1, r5
 801558a:	f7fc fb41 	bl	8011c10 <_malloc_r>
 801558e:	4606      	mov	r6, r0
 8015590:	b950      	cbnz	r0, 80155a8 <__ssputs_r+0x5c>
 8015592:	230c      	movs	r3, #12
 8015594:	f04f 30ff 	mov.w	r0, #4294967295
 8015598:	f8ca 3000 	str.w	r3, [sl]
 801559c:	89a3      	ldrh	r3, [r4, #12]
 801559e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155a2:	81a3      	strh	r3, [r4, #12]
 80155a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a8:	464a      	mov	r2, r9
 80155aa:	6921      	ldr	r1, [r4, #16]
 80155ac:	f7fc face 	bl	8011b4c <memcpy>
 80155b0:	89a3      	ldrh	r3, [r4, #12]
 80155b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80155b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155ba:	81a3      	strh	r3, [r4, #12]
 80155bc:	6126      	str	r6, [r4, #16]
 80155be:	444e      	add	r6, r9
 80155c0:	6026      	str	r6, [r4, #0]
 80155c2:	463e      	mov	r6, r7
 80155c4:	6165      	str	r5, [r4, #20]
 80155c6:	eba5 0509 	sub.w	r5, r5, r9
 80155ca:	60a5      	str	r5, [r4, #8]
 80155cc:	42be      	cmp	r6, r7
 80155ce:	d900      	bls.n	80155d2 <__ssputs_r+0x86>
 80155d0:	463e      	mov	r6, r7
 80155d2:	4632      	mov	r2, r6
 80155d4:	4641      	mov	r1, r8
 80155d6:	6820      	ldr	r0, [r4, #0]
 80155d8:	f000 f96d 	bl	80158b6 <memmove>
 80155dc:	68a3      	ldr	r3, [r4, #8]
 80155de:	6822      	ldr	r2, [r4, #0]
 80155e0:	1b9b      	subs	r3, r3, r6
 80155e2:	4432      	add	r2, r6
 80155e4:	2000      	movs	r0, #0
 80155e6:	60a3      	str	r3, [r4, #8]
 80155e8:	6022      	str	r2, [r4, #0]
 80155ea:	e7db      	b.n	80155a4 <__ssputs_r+0x58>
 80155ec:	462a      	mov	r2, r5
 80155ee:	f000 f97c 	bl	80158ea <_realloc_r>
 80155f2:	4606      	mov	r6, r0
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d1e1      	bne.n	80155bc <__ssputs_r+0x70>
 80155f8:	4650      	mov	r0, sl
 80155fa:	6921      	ldr	r1, [r4, #16]
 80155fc:	f7fc fabc 	bl	8011b78 <_free_r>
 8015600:	e7c7      	b.n	8015592 <__ssputs_r+0x46>
	...

08015604 <_svfiprintf_r>:
 8015604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015608:	4698      	mov	r8, r3
 801560a:	898b      	ldrh	r3, [r1, #12]
 801560c:	4607      	mov	r7, r0
 801560e:	061b      	lsls	r3, r3, #24
 8015610:	460d      	mov	r5, r1
 8015612:	4614      	mov	r4, r2
 8015614:	b09d      	sub	sp, #116	; 0x74
 8015616:	d50e      	bpl.n	8015636 <_svfiprintf_r+0x32>
 8015618:	690b      	ldr	r3, [r1, #16]
 801561a:	b963      	cbnz	r3, 8015636 <_svfiprintf_r+0x32>
 801561c:	2140      	movs	r1, #64	; 0x40
 801561e:	f7fc faf7 	bl	8011c10 <_malloc_r>
 8015622:	6028      	str	r0, [r5, #0]
 8015624:	6128      	str	r0, [r5, #16]
 8015626:	b920      	cbnz	r0, 8015632 <_svfiprintf_r+0x2e>
 8015628:	230c      	movs	r3, #12
 801562a:	603b      	str	r3, [r7, #0]
 801562c:	f04f 30ff 	mov.w	r0, #4294967295
 8015630:	e0d1      	b.n	80157d6 <_svfiprintf_r+0x1d2>
 8015632:	2340      	movs	r3, #64	; 0x40
 8015634:	616b      	str	r3, [r5, #20]
 8015636:	2300      	movs	r3, #0
 8015638:	9309      	str	r3, [sp, #36]	; 0x24
 801563a:	2320      	movs	r3, #32
 801563c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015640:	2330      	movs	r3, #48	; 0x30
 8015642:	f04f 0901 	mov.w	r9, #1
 8015646:	f8cd 800c 	str.w	r8, [sp, #12]
 801564a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80157f0 <_svfiprintf_r+0x1ec>
 801564e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015652:	4623      	mov	r3, r4
 8015654:	469a      	mov	sl, r3
 8015656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801565a:	b10a      	cbz	r2, 8015660 <_svfiprintf_r+0x5c>
 801565c:	2a25      	cmp	r2, #37	; 0x25
 801565e:	d1f9      	bne.n	8015654 <_svfiprintf_r+0x50>
 8015660:	ebba 0b04 	subs.w	fp, sl, r4
 8015664:	d00b      	beq.n	801567e <_svfiprintf_r+0x7a>
 8015666:	465b      	mov	r3, fp
 8015668:	4622      	mov	r2, r4
 801566a:	4629      	mov	r1, r5
 801566c:	4638      	mov	r0, r7
 801566e:	f7ff ff6d 	bl	801554c <__ssputs_r>
 8015672:	3001      	adds	r0, #1
 8015674:	f000 80aa 	beq.w	80157cc <_svfiprintf_r+0x1c8>
 8015678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801567a:	445a      	add	r2, fp
 801567c:	9209      	str	r2, [sp, #36]	; 0x24
 801567e:	f89a 3000 	ldrb.w	r3, [sl]
 8015682:	2b00      	cmp	r3, #0
 8015684:	f000 80a2 	beq.w	80157cc <_svfiprintf_r+0x1c8>
 8015688:	2300      	movs	r3, #0
 801568a:	f04f 32ff 	mov.w	r2, #4294967295
 801568e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015692:	f10a 0a01 	add.w	sl, sl, #1
 8015696:	9304      	str	r3, [sp, #16]
 8015698:	9307      	str	r3, [sp, #28]
 801569a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801569e:	931a      	str	r3, [sp, #104]	; 0x68
 80156a0:	4654      	mov	r4, sl
 80156a2:	2205      	movs	r2, #5
 80156a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156a8:	4851      	ldr	r0, [pc, #324]	; (80157f0 <_svfiprintf_r+0x1ec>)
 80156aa:	f7ff fa6f 	bl	8014b8c <memchr>
 80156ae:	9a04      	ldr	r2, [sp, #16]
 80156b0:	b9d8      	cbnz	r0, 80156ea <_svfiprintf_r+0xe6>
 80156b2:	06d0      	lsls	r0, r2, #27
 80156b4:	bf44      	itt	mi
 80156b6:	2320      	movmi	r3, #32
 80156b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156bc:	0711      	lsls	r1, r2, #28
 80156be:	bf44      	itt	mi
 80156c0:	232b      	movmi	r3, #43	; 0x2b
 80156c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156c6:	f89a 3000 	ldrb.w	r3, [sl]
 80156ca:	2b2a      	cmp	r3, #42	; 0x2a
 80156cc:	d015      	beq.n	80156fa <_svfiprintf_r+0xf6>
 80156ce:	4654      	mov	r4, sl
 80156d0:	2000      	movs	r0, #0
 80156d2:	f04f 0c0a 	mov.w	ip, #10
 80156d6:	9a07      	ldr	r2, [sp, #28]
 80156d8:	4621      	mov	r1, r4
 80156da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156de:	3b30      	subs	r3, #48	; 0x30
 80156e0:	2b09      	cmp	r3, #9
 80156e2:	d94e      	bls.n	8015782 <_svfiprintf_r+0x17e>
 80156e4:	b1b0      	cbz	r0, 8015714 <_svfiprintf_r+0x110>
 80156e6:	9207      	str	r2, [sp, #28]
 80156e8:	e014      	b.n	8015714 <_svfiprintf_r+0x110>
 80156ea:	eba0 0308 	sub.w	r3, r0, r8
 80156ee:	fa09 f303 	lsl.w	r3, r9, r3
 80156f2:	4313      	orrs	r3, r2
 80156f4:	46a2      	mov	sl, r4
 80156f6:	9304      	str	r3, [sp, #16]
 80156f8:	e7d2      	b.n	80156a0 <_svfiprintf_r+0x9c>
 80156fa:	9b03      	ldr	r3, [sp, #12]
 80156fc:	1d19      	adds	r1, r3, #4
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	9103      	str	r1, [sp, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	bfbb      	ittet	lt
 8015706:	425b      	neglt	r3, r3
 8015708:	f042 0202 	orrlt.w	r2, r2, #2
 801570c:	9307      	strge	r3, [sp, #28]
 801570e:	9307      	strlt	r3, [sp, #28]
 8015710:	bfb8      	it	lt
 8015712:	9204      	strlt	r2, [sp, #16]
 8015714:	7823      	ldrb	r3, [r4, #0]
 8015716:	2b2e      	cmp	r3, #46	; 0x2e
 8015718:	d10c      	bne.n	8015734 <_svfiprintf_r+0x130>
 801571a:	7863      	ldrb	r3, [r4, #1]
 801571c:	2b2a      	cmp	r3, #42	; 0x2a
 801571e:	d135      	bne.n	801578c <_svfiprintf_r+0x188>
 8015720:	9b03      	ldr	r3, [sp, #12]
 8015722:	3402      	adds	r4, #2
 8015724:	1d1a      	adds	r2, r3, #4
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	9203      	str	r2, [sp, #12]
 801572a:	2b00      	cmp	r3, #0
 801572c:	bfb8      	it	lt
 801572e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015732:	9305      	str	r3, [sp, #20]
 8015734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015800 <_svfiprintf_r+0x1fc>
 8015738:	2203      	movs	r2, #3
 801573a:	4650      	mov	r0, sl
 801573c:	7821      	ldrb	r1, [r4, #0]
 801573e:	f7ff fa25 	bl	8014b8c <memchr>
 8015742:	b140      	cbz	r0, 8015756 <_svfiprintf_r+0x152>
 8015744:	2340      	movs	r3, #64	; 0x40
 8015746:	eba0 000a 	sub.w	r0, r0, sl
 801574a:	fa03 f000 	lsl.w	r0, r3, r0
 801574e:	9b04      	ldr	r3, [sp, #16]
 8015750:	3401      	adds	r4, #1
 8015752:	4303      	orrs	r3, r0
 8015754:	9304      	str	r3, [sp, #16]
 8015756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801575a:	2206      	movs	r2, #6
 801575c:	4825      	ldr	r0, [pc, #148]	; (80157f4 <_svfiprintf_r+0x1f0>)
 801575e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015762:	f7ff fa13 	bl	8014b8c <memchr>
 8015766:	2800      	cmp	r0, #0
 8015768:	d038      	beq.n	80157dc <_svfiprintf_r+0x1d8>
 801576a:	4b23      	ldr	r3, [pc, #140]	; (80157f8 <_svfiprintf_r+0x1f4>)
 801576c:	bb1b      	cbnz	r3, 80157b6 <_svfiprintf_r+0x1b2>
 801576e:	9b03      	ldr	r3, [sp, #12]
 8015770:	3307      	adds	r3, #7
 8015772:	f023 0307 	bic.w	r3, r3, #7
 8015776:	3308      	adds	r3, #8
 8015778:	9303      	str	r3, [sp, #12]
 801577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801577c:	4433      	add	r3, r6
 801577e:	9309      	str	r3, [sp, #36]	; 0x24
 8015780:	e767      	b.n	8015652 <_svfiprintf_r+0x4e>
 8015782:	460c      	mov	r4, r1
 8015784:	2001      	movs	r0, #1
 8015786:	fb0c 3202 	mla	r2, ip, r2, r3
 801578a:	e7a5      	b.n	80156d8 <_svfiprintf_r+0xd4>
 801578c:	2300      	movs	r3, #0
 801578e:	f04f 0c0a 	mov.w	ip, #10
 8015792:	4619      	mov	r1, r3
 8015794:	3401      	adds	r4, #1
 8015796:	9305      	str	r3, [sp, #20]
 8015798:	4620      	mov	r0, r4
 801579a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801579e:	3a30      	subs	r2, #48	; 0x30
 80157a0:	2a09      	cmp	r2, #9
 80157a2:	d903      	bls.n	80157ac <_svfiprintf_r+0x1a8>
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d0c5      	beq.n	8015734 <_svfiprintf_r+0x130>
 80157a8:	9105      	str	r1, [sp, #20]
 80157aa:	e7c3      	b.n	8015734 <_svfiprintf_r+0x130>
 80157ac:	4604      	mov	r4, r0
 80157ae:	2301      	movs	r3, #1
 80157b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80157b4:	e7f0      	b.n	8015798 <_svfiprintf_r+0x194>
 80157b6:	ab03      	add	r3, sp, #12
 80157b8:	9300      	str	r3, [sp, #0]
 80157ba:	462a      	mov	r2, r5
 80157bc:	4638      	mov	r0, r7
 80157be:	4b0f      	ldr	r3, [pc, #60]	; (80157fc <_svfiprintf_r+0x1f8>)
 80157c0:	a904      	add	r1, sp, #16
 80157c2:	f7fc fb1d 	bl	8011e00 <_printf_float>
 80157c6:	1c42      	adds	r2, r0, #1
 80157c8:	4606      	mov	r6, r0
 80157ca:	d1d6      	bne.n	801577a <_svfiprintf_r+0x176>
 80157cc:	89ab      	ldrh	r3, [r5, #12]
 80157ce:	065b      	lsls	r3, r3, #25
 80157d0:	f53f af2c 	bmi.w	801562c <_svfiprintf_r+0x28>
 80157d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157d6:	b01d      	add	sp, #116	; 0x74
 80157d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157dc:	ab03      	add	r3, sp, #12
 80157de:	9300      	str	r3, [sp, #0]
 80157e0:	462a      	mov	r2, r5
 80157e2:	4638      	mov	r0, r7
 80157e4:	4b05      	ldr	r3, [pc, #20]	; (80157fc <_svfiprintf_r+0x1f8>)
 80157e6:	a904      	add	r1, sp, #16
 80157e8:	f7fc fda6 	bl	8012338 <_printf_i>
 80157ec:	e7eb      	b.n	80157c6 <_svfiprintf_r+0x1c2>
 80157ee:	bf00      	nop
 80157f0:	08016e44 	.word	0x08016e44
 80157f4:	08016e4e 	.word	0x08016e4e
 80157f8:	08011e01 	.word	0x08011e01
 80157fc:	0801554d 	.word	0x0801554d
 8015800:	08016e4a 	.word	0x08016e4a

08015804 <nan>:
 8015804:	2000      	movs	r0, #0
 8015806:	4901      	ldr	r1, [pc, #4]	; (801580c <nan+0x8>)
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop
 801580c:	7ff80000 	.word	0x7ff80000

08015810 <strncmp>:
 8015810:	b510      	push	{r4, lr}
 8015812:	b16a      	cbz	r2, 8015830 <strncmp+0x20>
 8015814:	3901      	subs	r1, #1
 8015816:	1884      	adds	r4, r0, r2
 8015818:	f810 3b01 	ldrb.w	r3, [r0], #1
 801581c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015820:	4293      	cmp	r3, r2
 8015822:	d103      	bne.n	801582c <strncmp+0x1c>
 8015824:	42a0      	cmp	r0, r4
 8015826:	d001      	beq.n	801582c <strncmp+0x1c>
 8015828:	2b00      	cmp	r3, #0
 801582a:	d1f5      	bne.n	8015818 <strncmp+0x8>
 801582c:	1a98      	subs	r0, r3, r2
 801582e:	bd10      	pop	{r4, pc}
 8015830:	4610      	mov	r0, r2
 8015832:	e7fc      	b.n	801582e <strncmp+0x1e>

08015834 <__ascii_wctomb>:
 8015834:	4603      	mov	r3, r0
 8015836:	4608      	mov	r0, r1
 8015838:	b141      	cbz	r1, 801584c <__ascii_wctomb+0x18>
 801583a:	2aff      	cmp	r2, #255	; 0xff
 801583c:	d904      	bls.n	8015848 <__ascii_wctomb+0x14>
 801583e:	228a      	movs	r2, #138	; 0x8a
 8015840:	f04f 30ff 	mov.w	r0, #4294967295
 8015844:	601a      	str	r2, [r3, #0]
 8015846:	4770      	bx	lr
 8015848:	2001      	movs	r0, #1
 801584a:	700a      	strb	r2, [r1, #0]
 801584c:	4770      	bx	lr
	...

08015850 <__assert_func>:
 8015850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015852:	4614      	mov	r4, r2
 8015854:	461a      	mov	r2, r3
 8015856:	4b09      	ldr	r3, [pc, #36]	; (801587c <__assert_func+0x2c>)
 8015858:	4605      	mov	r5, r0
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	68d8      	ldr	r0, [r3, #12]
 801585e:	b14c      	cbz	r4, 8015874 <__assert_func+0x24>
 8015860:	4b07      	ldr	r3, [pc, #28]	; (8015880 <__assert_func+0x30>)
 8015862:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015866:	9100      	str	r1, [sp, #0]
 8015868:	462b      	mov	r3, r5
 801586a:	4906      	ldr	r1, [pc, #24]	; (8015884 <__assert_func+0x34>)
 801586c:	f000 f80e 	bl	801588c <fiprintf>
 8015870:	f000 fa78 	bl	8015d64 <abort>
 8015874:	4b04      	ldr	r3, [pc, #16]	; (8015888 <__assert_func+0x38>)
 8015876:	461c      	mov	r4, r3
 8015878:	e7f3      	b.n	8015862 <__assert_func+0x12>
 801587a:	bf00      	nop
 801587c:	20000248 	.word	0x20000248
 8015880:	08016e55 	.word	0x08016e55
 8015884:	08016e62 	.word	0x08016e62
 8015888:	08016e90 	.word	0x08016e90

0801588c <fiprintf>:
 801588c:	b40e      	push	{r1, r2, r3}
 801588e:	b503      	push	{r0, r1, lr}
 8015890:	4601      	mov	r1, r0
 8015892:	ab03      	add	r3, sp, #12
 8015894:	4805      	ldr	r0, [pc, #20]	; (80158ac <fiprintf+0x20>)
 8015896:	f853 2b04 	ldr.w	r2, [r3], #4
 801589a:	6800      	ldr	r0, [r0, #0]
 801589c:	9301      	str	r3, [sp, #4]
 801589e:	f000 f871 	bl	8015984 <_vfiprintf_r>
 80158a2:	b002      	add	sp, #8
 80158a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80158a8:	b003      	add	sp, #12
 80158aa:	4770      	bx	lr
 80158ac:	20000248 	.word	0x20000248

080158b0 <__retarget_lock_init_recursive>:
 80158b0:	4770      	bx	lr

080158b2 <__retarget_lock_acquire_recursive>:
 80158b2:	4770      	bx	lr

080158b4 <__retarget_lock_release_recursive>:
 80158b4:	4770      	bx	lr

080158b6 <memmove>:
 80158b6:	4288      	cmp	r0, r1
 80158b8:	b510      	push	{r4, lr}
 80158ba:	eb01 0402 	add.w	r4, r1, r2
 80158be:	d902      	bls.n	80158c6 <memmove+0x10>
 80158c0:	4284      	cmp	r4, r0
 80158c2:	4623      	mov	r3, r4
 80158c4:	d807      	bhi.n	80158d6 <memmove+0x20>
 80158c6:	1e43      	subs	r3, r0, #1
 80158c8:	42a1      	cmp	r1, r4
 80158ca:	d008      	beq.n	80158de <memmove+0x28>
 80158cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158d4:	e7f8      	b.n	80158c8 <memmove+0x12>
 80158d6:	4601      	mov	r1, r0
 80158d8:	4402      	add	r2, r0
 80158da:	428a      	cmp	r2, r1
 80158dc:	d100      	bne.n	80158e0 <memmove+0x2a>
 80158de:	bd10      	pop	{r4, pc}
 80158e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158e8:	e7f7      	b.n	80158da <memmove+0x24>

080158ea <_realloc_r>:
 80158ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ec:	4607      	mov	r7, r0
 80158ee:	4614      	mov	r4, r2
 80158f0:	460e      	mov	r6, r1
 80158f2:	b921      	cbnz	r1, 80158fe <_realloc_r+0x14>
 80158f4:	4611      	mov	r1, r2
 80158f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80158fa:	f7fc b989 	b.w	8011c10 <_malloc_r>
 80158fe:	b922      	cbnz	r2, 801590a <_realloc_r+0x20>
 8015900:	f7fc f93a 	bl	8011b78 <_free_r>
 8015904:	4625      	mov	r5, r4
 8015906:	4628      	mov	r0, r5
 8015908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801590a:	f000 fc4f 	bl	80161ac <_malloc_usable_size_r>
 801590e:	42a0      	cmp	r0, r4
 8015910:	d20f      	bcs.n	8015932 <_realloc_r+0x48>
 8015912:	4621      	mov	r1, r4
 8015914:	4638      	mov	r0, r7
 8015916:	f7fc f97b 	bl	8011c10 <_malloc_r>
 801591a:	4605      	mov	r5, r0
 801591c:	2800      	cmp	r0, #0
 801591e:	d0f2      	beq.n	8015906 <_realloc_r+0x1c>
 8015920:	4631      	mov	r1, r6
 8015922:	4622      	mov	r2, r4
 8015924:	f7fc f912 	bl	8011b4c <memcpy>
 8015928:	4631      	mov	r1, r6
 801592a:	4638      	mov	r0, r7
 801592c:	f7fc f924 	bl	8011b78 <_free_r>
 8015930:	e7e9      	b.n	8015906 <_realloc_r+0x1c>
 8015932:	4635      	mov	r5, r6
 8015934:	e7e7      	b.n	8015906 <_realloc_r+0x1c>

08015936 <__sfputc_r>:
 8015936:	6893      	ldr	r3, [r2, #8]
 8015938:	b410      	push	{r4}
 801593a:	3b01      	subs	r3, #1
 801593c:	2b00      	cmp	r3, #0
 801593e:	6093      	str	r3, [r2, #8]
 8015940:	da07      	bge.n	8015952 <__sfputc_r+0x1c>
 8015942:	6994      	ldr	r4, [r2, #24]
 8015944:	42a3      	cmp	r3, r4
 8015946:	db01      	blt.n	801594c <__sfputc_r+0x16>
 8015948:	290a      	cmp	r1, #10
 801594a:	d102      	bne.n	8015952 <__sfputc_r+0x1c>
 801594c:	bc10      	pop	{r4}
 801594e:	f000 b949 	b.w	8015be4 <__swbuf_r>
 8015952:	6813      	ldr	r3, [r2, #0]
 8015954:	1c58      	adds	r0, r3, #1
 8015956:	6010      	str	r0, [r2, #0]
 8015958:	7019      	strb	r1, [r3, #0]
 801595a:	4608      	mov	r0, r1
 801595c:	bc10      	pop	{r4}
 801595e:	4770      	bx	lr

08015960 <__sfputs_r>:
 8015960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015962:	4606      	mov	r6, r0
 8015964:	460f      	mov	r7, r1
 8015966:	4614      	mov	r4, r2
 8015968:	18d5      	adds	r5, r2, r3
 801596a:	42ac      	cmp	r4, r5
 801596c:	d101      	bne.n	8015972 <__sfputs_r+0x12>
 801596e:	2000      	movs	r0, #0
 8015970:	e007      	b.n	8015982 <__sfputs_r+0x22>
 8015972:	463a      	mov	r2, r7
 8015974:	4630      	mov	r0, r6
 8015976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801597a:	f7ff ffdc 	bl	8015936 <__sfputc_r>
 801597e:	1c43      	adds	r3, r0, #1
 8015980:	d1f3      	bne.n	801596a <__sfputs_r+0xa>
 8015982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015984 <_vfiprintf_r>:
 8015984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015988:	460d      	mov	r5, r1
 801598a:	4614      	mov	r4, r2
 801598c:	4698      	mov	r8, r3
 801598e:	4606      	mov	r6, r0
 8015990:	b09d      	sub	sp, #116	; 0x74
 8015992:	b118      	cbz	r0, 801599c <_vfiprintf_r+0x18>
 8015994:	6983      	ldr	r3, [r0, #24]
 8015996:	b90b      	cbnz	r3, 801599c <_vfiprintf_r+0x18>
 8015998:	f000 fb06 	bl	8015fa8 <__sinit>
 801599c:	4b89      	ldr	r3, [pc, #548]	; (8015bc4 <_vfiprintf_r+0x240>)
 801599e:	429d      	cmp	r5, r3
 80159a0:	d11b      	bne.n	80159da <_vfiprintf_r+0x56>
 80159a2:	6875      	ldr	r5, [r6, #4]
 80159a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159a6:	07d9      	lsls	r1, r3, #31
 80159a8:	d405      	bmi.n	80159b6 <_vfiprintf_r+0x32>
 80159aa:	89ab      	ldrh	r3, [r5, #12]
 80159ac:	059a      	lsls	r2, r3, #22
 80159ae:	d402      	bmi.n	80159b6 <_vfiprintf_r+0x32>
 80159b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159b2:	f7ff ff7e 	bl	80158b2 <__retarget_lock_acquire_recursive>
 80159b6:	89ab      	ldrh	r3, [r5, #12]
 80159b8:	071b      	lsls	r3, r3, #28
 80159ba:	d501      	bpl.n	80159c0 <_vfiprintf_r+0x3c>
 80159bc:	692b      	ldr	r3, [r5, #16]
 80159be:	b9eb      	cbnz	r3, 80159fc <_vfiprintf_r+0x78>
 80159c0:	4629      	mov	r1, r5
 80159c2:	4630      	mov	r0, r6
 80159c4:	f000 f960 	bl	8015c88 <__swsetup_r>
 80159c8:	b1c0      	cbz	r0, 80159fc <_vfiprintf_r+0x78>
 80159ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159cc:	07dc      	lsls	r4, r3, #31
 80159ce:	d50e      	bpl.n	80159ee <_vfiprintf_r+0x6a>
 80159d0:	f04f 30ff 	mov.w	r0, #4294967295
 80159d4:	b01d      	add	sp, #116	; 0x74
 80159d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159da:	4b7b      	ldr	r3, [pc, #492]	; (8015bc8 <_vfiprintf_r+0x244>)
 80159dc:	429d      	cmp	r5, r3
 80159de:	d101      	bne.n	80159e4 <_vfiprintf_r+0x60>
 80159e0:	68b5      	ldr	r5, [r6, #8]
 80159e2:	e7df      	b.n	80159a4 <_vfiprintf_r+0x20>
 80159e4:	4b79      	ldr	r3, [pc, #484]	; (8015bcc <_vfiprintf_r+0x248>)
 80159e6:	429d      	cmp	r5, r3
 80159e8:	bf08      	it	eq
 80159ea:	68f5      	ldreq	r5, [r6, #12]
 80159ec:	e7da      	b.n	80159a4 <_vfiprintf_r+0x20>
 80159ee:	89ab      	ldrh	r3, [r5, #12]
 80159f0:	0598      	lsls	r0, r3, #22
 80159f2:	d4ed      	bmi.n	80159d0 <_vfiprintf_r+0x4c>
 80159f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159f6:	f7ff ff5d 	bl	80158b4 <__retarget_lock_release_recursive>
 80159fa:	e7e9      	b.n	80159d0 <_vfiprintf_r+0x4c>
 80159fc:	2300      	movs	r3, #0
 80159fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015a00:	2320      	movs	r3, #32
 8015a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a06:	2330      	movs	r3, #48	; 0x30
 8015a08:	f04f 0901 	mov.w	r9, #1
 8015a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015bd0 <_vfiprintf_r+0x24c>
 8015a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a18:	4623      	mov	r3, r4
 8015a1a:	469a      	mov	sl, r3
 8015a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a20:	b10a      	cbz	r2, 8015a26 <_vfiprintf_r+0xa2>
 8015a22:	2a25      	cmp	r2, #37	; 0x25
 8015a24:	d1f9      	bne.n	8015a1a <_vfiprintf_r+0x96>
 8015a26:	ebba 0b04 	subs.w	fp, sl, r4
 8015a2a:	d00b      	beq.n	8015a44 <_vfiprintf_r+0xc0>
 8015a2c:	465b      	mov	r3, fp
 8015a2e:	4622      	mov	r2, r4
 8015a30:	4629      	mov	r1, r5
 8015a32:	4630      	mov	r0, r6
 8015a34:	f7ff ff94 	bl	8015960 <__sfputs_r>
 8015a38:	3001      	adds	r0, #1
 8015a3a:	f000 80aa 	beq.w	8015b92 <_vfiprintf_r+0x20e>
 8015a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a40:	445a      	add	r2, fp
 8015a42:	9209      	str	r2, [sp, #36]	; 0x24
 8015a44:	f89a 3000 	ldrb.w	r3, [sl]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 80a2 	beq.w	8015b92 <_vfiprintf_r+0x20e>
 8015a4e:	2300      	movs	r3, #0
 8015a50:	f04f 32ff 	mov.w	r2, #4294967295
 8015a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a58:	f10a 0a01 	add.w	sl, sl, #1
 8015a5c:	9304      	str	r3, [sp, #16]
 8015a5e:	9307      	str	r3, [sp, #28]
 8015a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a64:	931a      	str	r3, [sp, #104]	; 0x68
 8015a66:	4654      	mov	r4, sl
 8015a68:	2205      	movs	r2, #5
 8015a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a6e:	4858      	ldr	r0, [pc, #352]	; (8015bd0 <_vfiprintf_r+0x24c>)
 8015a70:	f7ff f88c 	bl	8014b8c <memchr>
 8015a74:	9a04      	ldr	r2, [sp, #16]
 8015a76:	b9d8      	cbnz	r0, 8015ab0 <_vfiprintf_r+0x12c>
 8015a78:	06d1      	lsls	r1, r2, #27
 8015a7a:	bf44      	itt	mi
 8015a7c:	2320      	movmi	r3, #32
 8015a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a82:	0713      	lsls	r3, r2, #28
 8015a84:	bf44      	itt	mi
 8015a86:	232b      	movmi	r3, #43	; 0x2b
 8015a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015a90:	2b2a      	cmp	r3, #42	; 0x2a
 8015a92:	d015      	beq.n	8015ac0 <_vfiprintf_r+0x13c>
 8015a94:	4654      	mov	r4, sl
 8015a96:	2000      	movs	r0, #0
 8015a98:	f04f 0c0a 	mov.w	ip, #10
 8015a9c:	9a07      	ldr	r2, [sp, #28]
 8015a9e:	4621      	mov	r1, r4
 8015aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015aa4:	3b30      	subs	r3, #48	; 0x30
 8015aa6:	2b09      	cmp	r3, #9
 8015aa8:	d94e      	bls.n	8015b48 <_vfiprintf_r+0x1c4>
 8015aaa:	b1b0      	cbz	r0, 8015ada <_vfiprintf_r+0x156>
 8015aac:	9207      	str	r2, [sp, #28]
 8015aae:	e014      	b.n	8015ada <_vfiprintf_r+0x156>
 8015ab0:	eba0 0308 	sub.w	r3, r0, r8
 8015ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	46a2      	mov	sl, r4
 8015abc:	9304      	str	r3, [sp, #16]
 8015abe:	e7d2      	b.n	8015a66 <_vfiprintf_r+0xe2>
 8015ac0:	9b03      	ldr	r3, [sp, #12]
 8015ac2:	1d19      	adds	r1, r3, #4
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	9103      	str	r1, [sp, #12]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	bfbb      	ittet	lt
 8015acc:	425b      	neglt	r3, r3
 8015ace:	f042 0202 	orrlt.w	r2, r2, #2
 8015ad2:	9307      	strge	r3, [sp, #28]
 8015ad4:	9307      	strlt	r3, [sp, #28]
 8015ad6:	bfb8      	it	lt
 8015ad8:	9204      	strlt	r2, [sp, #16]
 8015ada:	7823      	ldrb	r3, [r4, #0]
 8015adc:	2b2e      	cmp	r3, #46	; 0x2e
 8015ade:	d10c      	bne.n	8015afa <_vfiprintf_r+0x176>
 8015ae0:	7863      	ldrb	r3, [r4, #1]
 8015ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ae4:	d135      	bne.n	8015b52 <_vfiprintf_r+0x1ce>
 8015ae6:	9b03      	ldr	r3, [sp, #12]
 8015ae8:	3402      	adds	r4, #2
 8015aea:	1d1a      	adds	r2, r3, #4
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	9203      	str	r2, [sp, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	bfb8      	it	lt
 8015af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8015af8:	9305      	str	r3, [sp, #20]
 8015afa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015be0 <_vfiprintf_r+0x25c>
 8015afe:	2203      	movs	r2, #3
 8015b00:	4650      	mov	r0, sl
 8015b02:	7821      	ldrb	r1, [r4, #0]
 8015b04:	f7ff f842 	bl	8014b8c <memchr>
 8015b08:	b140      	cbz	r0, 8015b1c <_vfiprintf_r+0x198>
 8015b0a:	2340      	movs	r3, #64	; 0x40
 8015b0c:	eba0 000a 	sub.w	r0, r0, sl
 8015b10:	fa03 f000 	lsl.w	r0, r3, r0
 8015b14:	9b04      	ldr	r3, [sp, #16]
 8015b16:	3401      	adds	r4, #1
 8015b18:	4303      	orrs	r3, r0
 8015b1a:	9304      	str	r3, [sp, #16]
 8015b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b20:	2206      	movs	r2, #6
 8015b22:	482c      	ldr	r0, [pc, #176]	; (8015bd4 <_vfiprintf_r+0x250>)
 8015b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b28:	f7ff f830 	bl	8014b8c <memchr>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	d03f      	beq.n	8015bb0 <_vfiprintf_r+0x22c>
 8015b30:	4b29      	ldr	r3, [pc, #164]	; (8015bd8 <_vfiprintf_r+0x254>)
 8015b32:	bb1b      	cbnz	r3, 8015b7c <_vfiprintf_r+0x1f8>
 8015b34:	9b03      	ldr	r3, [sp, #12]
 8015b36:	3307      	adds	r3, #7
 8015b38:	f023 0307 	bic.w	r3, r3, #7
 8015b3c:	3308      	adds	r3, #8
 8015b3e:	9303      	str	r3, [sp, #12]
 8015b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b42:	443b      	add	r3, r7
 8015b44:	9309      	str	r3, [sp, #36]	; 0x24
 8015b46:	e767      	b.n	8015a18 <_vfiprintf_r+0x94>
 8015b48:	460c      	mov	r4, r1
 8015b4a:	2001      	movs	r0, #1
 8015b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b50:	e7a5      	b.n	8015a9e <_vfiprintf_r+0x11a>
 8015b52:	2300      	movs	r3, #0
 8015b54:	f04f 0c0a 	mov.w	ip, #10
 8015b58:	4619      	mov	r1, r3
 8015b5a:	3401      	adds	r4, #1
 8015b5c:	9305      	str	r3, [sp, #20]
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b64:	3a30      	subs	r2, #48	; 0x30
 8015b66:	2a09      	cmp	r2, #9
 8015b68:	d903      	bls.n	8015b72 <_vfiprintf_r+0x1ee>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d0c5      	beq.n	8015afa <_vfiprintf_r+0x176>
 8015b6e:	9105      	str	r1, [sp, #20]
 8015b70:	e7c3      	b.n	8015afa <_vfiprintf_r+0x176>
 8015b72:	4604      	mov	r4, r0
 8015b74:	2301      	movs	r3, #1
 8015b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b7a:	e7f0      	b.n	8015b5e <_vfiprintf_r+0x1da>
 8015b7c:	ab03      	add	r3, sp, #12
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	462a      	mov	r2, r5
 8015b82:	4630      	mov	r0, r6
 8015b84:	4b15      	ldr	r3, [pc, #84]	; (8015bdc <_vfiprintf_r+0x258>)
 8015b86:	a904      	add	r1, sp, #16
 8015b88:	f7fc f93a 	bl	8011e00 <_printf_float>
 8015b8c:	4607      	mov	r7, r0
 8015b8e:	1c78      	adds	r0, r7, #1
 8015b90:	d1d6      	bne.n	8015b40 <_vfiprintf_r+0x1bc>
 8015b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b94:	07d9      	lsls	r1, r3, #31
 8015b96:	d405      	bmi.n	8015ba4 <_vfiprintf_r+0x220>
 8015b98:	89ab      	ldrh	r3, [r5, #12]
 8015b9a:	059a      	lsls	r2, r3, #22
 8015b9c:	d402      	bmi.n	8015ba4 <_vfiprintf_r+0x220>
 8015b9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ba0:	f7ff fe88 	bl	80158b4 <__retarget_lock_release_recursive>
 8015ba4:	89ab      	ldrh	r3, [r5, #12]
 8015ba6:	065b      	lsls	r3, r3, #25
 8015ba8:	f53f af12 	bmi.w	80159d0 <_vfiprintf_r+0x4c>
 8015bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bae:	e711      	b.n	80159d4 <_vfiprintf_r+0x50>
 8015bb0:	ab03      	add	r3, sp, #12
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	462a      	mov	r2, r5
 8015bb6:	4630      	mov	r0, r6
 8015bb8:	4b08      	ldr	r3, [pc, #32]	; (8015bdc <_vfiprintf_r+0x258>)
 8015bba:	a904      	add	r1, sp, #16
 8015bbc:	f7fc fbbc 	bl	8012338 <_printf_i>
 8015bc0:	e7e4      	b.n	8015b8c <_vfiprintf_r+0x208>
 8015bc2:	bf00      	nop
 8015bc4:	08016eb4 	.word	0x08016eb4
 8015bc8:	08016ed4 	.word	0x08016ed4
 8015bcc:	08016e94 	.word	0x08016e94
 8015bd0:	08016e44 	.word	0x08016e44
 8015bd4:	08016e4e 	.word	0x08016e4e
 8015bd8:	08011e01 	.word	0x08011e01
 8015bdc:	08015961 	.word	0x08015961
 8015be0:	08016e4a 	.word	0x08016e4a

08015be4 <__swbuf_r>:
 8015be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be6:	460e      	mov	r6, r1
 8015be8:	4614      	mov	r4, r2
 8015bea:	4605      	mov	r5, r0
 8015bec:	b118      	cbz	r0, 8015bf6 <__swbuf_r+0x12>
 8015bee:	6983      	ldr	r3, [r0, #24]
 8015bf0:	b90b      	cbnz	r3, 8015bf6 <__swbuf_r+0x12>
 8015bf2:	f000 f9d9 	bl	8015fa8 <__sinit>
 8015bf6:	4b21      	ldr	r3, [pc, #132]	; (8015c7c <__swbuf_r+0x98>)
 8015bf8:	429c      	cmp	r4, r3
 8015bfa:	d12b      	bne.n	8015c54 <__swbuf_r+0x70>
 8015bfc:	686c      	ldr	r4, [r5, #4]
 8015bfe:	69a3      	ldr	r3, [r4, #24]
 8015c00:	60a3      	str	r3, [r4, #8]
 8015c02:	89a3      	ldrh	r3, [r4, #12]
 8015c04:	071a      	lsls	r2, r3, #28
 8015c06:	d52f      	bpl.n	8015c68 <__swbuf_r+0x84>
 8015c08:	6923      	ldr	r3, [r4, #16]
 8015c0a:	b36b      	cbz	r3, 8015c68 <__swbuf_r+0x84>
 8015c0c:	6923      	ldr	r3, [r4, #16]
 8015c0e:	6820      	ldr	r0, [r4, #0]
 8015c10:	b2f6      	uxtb	r6, r6
 8015c12:	1ac0      	subs	r0, r0, r3
 8015c14:	6963      	ldr	r3, [r4, #20]
 8015c16:	4637      	mov	r7, r6
 8015c18:	4283      	cmp	r3, r0
 8015c1a:	dc04      	bgt.n	8015c26 <__swbuf_r+0x42>
 8015c1c:	4621      	mov	r1, r4
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f000 f92e 	bl	8015e80 <_fflush_r>
 8015c24:	bb30      	cbnz	r0, 8015c74 <__swbuf_r+0x90>
 8015c26:	68a3      	ldr	r3, [r4, #8]
 8015c28:	3001      	adds	r0, #1
 8015c2a:	3b01      	subs	r3, #1
 8015c2c:	60a3      	str	r3, [r4, #8]
 8015c2e:	6823      	ldr	r3, [r4, #0]
 8015c30:	1c5a      	adds	r2, r3, #1
 8015c32:	6022      	str	r2, [r4, #0]
 8015c34:	701e      	strb	r6, [r3, #0]
 8015c36:	6963      	ldr	r3, [r4, #20]
 8015c38:	4283      	cmp	r3, r0
 8015c3a:	d004      	beq.n	8015c46 <__swbuf_r+0x62>
 8015c3c:	89a3      	ldrh	r3, [r4, #12]
 8015c3e:	07db      	lsls	r3, r3, #31
 8015c40:	d506      	bpl.n	8015c50 <__swbuf_r+0x6c>
 8015c42:	2e0a      	cmp	r6, #10
 8015c44:	d104      	bne.n	8015c50 <__swbuf_r+0x6c>
 8015c46:	4621      	mov	r1, r4
 8015c48:	4628      	mov	r0, r5
 8015c4a:	f000 f919 	bl	8015e80 <_fflush_r>
 8015c4e:	b988      	cbnz	r0, 8015c74 <__swbuf_r+0x90>
 8015c50:	4638      	mov	r0, r7
 8015c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c54:	4b0a      	ldr	r3, [pc, #40]	; (8015c80 <__swbuf_r+0x9c>)
 8015c56:	429c      	cmp	r4, r3
 8015c58:	d101      	bne.n	8015c5e <__swbuf_r+0x7a>
 8015c5a:	68ac      	ldr	r4, [r5, #8]
 8015c5c:	e7cf      	b.n	8015bfe <__swbuf_r+0x1a>
 8015c5e:	4b09      	ldr	r3, [pc, #36]	; (8015c84 <__swbuf_r+0xa0>)
 8015c60:	429c      	cmp	r4, r3
 8015c62:	bf08      	it	eq
 8015c64:	68ec      	ldreq	r4, [r5, #12]
 8015c66:	e7ca      	b.n	8015bfe <__swbuf_r+0x1a>
 8015c68:	4621      	mov	r1, r4
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	f000 f80c 	bl	8015c88 <__swsetup_r>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d0cb      	beq.n	8015c0c <__swbuf_r+0x28>
 8015c74:	f04f 37ff 	mov.w	r7, #4294967295
 8015c78:	e7ea      	b.n	8015c50 <__swbuf_r+0x6c>
 8015c7a:	bf00      	nop
 8015c7c:	08016eb4 	.word	0x08016eb4
 8015c80:	08016ed4 	.word	0x08016ed4
 8015c84:	08016e94 	.word	0x08016e94

08015c88 <__swsetup_r>:
 8015c88:	4b32      	ldr	r3, [pc, #200]	; (8015d54 <__swsetup_r+0xcc>)
 8015c8a:	b570      	push	{r4, r5, r6, lr}
 8015c8c:	681d      	ldr	r5, [r3, #0]
 8015c8e:	4606      	mov	r6, r0
 8015c90:	460c      	mov	r4, r1
 8015c92:	b125      	cbz	r5, 8015c9e <__swsetup_r+0x16>
 8015c94:	69ab      	ldr	r3, [r5, #24]
 8015c96:	b913      	cbnz	r3, 8015c9e <__swsetup_r+0x16>
 8015c98:	4628      	mov	r0, r5
 8015c9a:	f000 f985 	bl	8015fa8 <__sinit>
 8015c9e:	4b2e      	ldr	r3, [pc, #184]	; (8015d58 <__swsetup_r+0xd0>)
 8015ca0:	429c      	cmp	r4, r3
 8015ca2:	d10f      	bne.n	8015cc4 <__swsetup_r+0x3c>
 8015ca4:	686c      	ldr	r4, [r5, #4]
 8015ca6:	89a3      	ldrh	r3, [r4, #12]
 8015ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cac:	0719      	lsls	r1, r3, #28
 8015cae:	d42c      	bmi.n	8015d0a <__swsetup_r+0x82>
 8015cb0:	06dd      	lsls	r5, r3, #27
 8015cb2:	d411      	bmi.n	8015cd8 <__swsetup_r+0x50>
 8015cb4:	2309      	movs	r3, #9
 8015cb6:	6033      	str	r3, [r6, #0]
 8015cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015cc0:	81a3      	strh	r3, [r4, #12]
 8015cc2:	e03e      	b.n	8015d42 <__swsetup_r+0xba>
 8015cc4:	4b25      	ldr	r3, [pc, #148]	; (8015d5c <__swsetup_r+0xd4>)
 8015cc6:	429c      	cmp	r4, r3
 8015cc8:	d101      	bne.n	8015cce <__swsetup_r+0x46>
 8015cca:	68ac      	ldr	r4, [r5, #8]
 8015ccc:	e7eb      	b.n	8015ca6 <__swsetup_r+0x1e>
 8015cce:	4b24      	ldr	r3, [pc, #144]	; (8015d60 <__swsetup_r+0xd8>)
 8015cd0:	429c      	cmp	r4, r3
 8015cd2:	bf08      	it	eq
 8015cd4:	68ec      	ldreq	r4, [r5, #12]
 8015cd6:	e7e6      	b.n	8015ca6 <__swsetup_r+0x1e>
 8015cd8:	0758      	lsls	r0, r3, #29
 8015cda:	d512      	bpl.n	8015d02 <__swsetup_r+0x7a>
 8015cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cde:	b141      	cbz	r1, 8015cf2 <__swsetup_r+0x6a>
 8015ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ce4:	4299      	cmp	r1, r3
 8015ce6:	d002      	beq.n	8015cee <__swsetup_r+0x66>
 8015ce8:	4630      	mov	r0, r6
 8015cea:	f7fb ff45 	bl	8011b78 <_free_r>
 8015cee:	2300      	movs	r3, #0
 8015cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8015cf2:	89a3      	ldrh	r3, [r4, #12]
 8015cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015cf8:	81a3      	strh	r3, [r4, #12]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	6063      	str	r3, [r4, #4]
 8015cfe:	6923      	ldr	r3, [r4, #16]
 8015d00:	6023      	str	r3, [r4, #0]
 8015d02:	89a3      	ldrh	r3, [r4, #12]
 8015d04:	f043 0308 	orr.w	r3, r3, #8
 8015d08:	81a3      	strh	r3, [r4, #12]
 8015d0a:	6923      	ldr	r3, [r4, #16]
 8015d0c:	b94b      	cbnz	r3, 8015d22 <__swsetup_r+0x9a>
 8015d0e:	89a3      	ldrh	r3, [r4, #12]
 8015d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d18:	d003      	beq.n	8015d22 <__swsetup_r+0x9a>
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	4630      	mov	r0, r6
 8015d1e:	f000 fa05 	bl	801612c <__smakebuf_r>
 8015d22:	89a0      	ldrh	r0, [r4, #12]
 8015d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d28:	f010 0301 	ands.w	r3, r0, #1
 8015d2c:	d00a      	beq.n	8015d44 <__swsetup_r+0xbc>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	60a3      	str	r3, [r4, #8]
 8015d32:	6963      	ldr	r3, [r4, #20]
 8015d34:	425b      	negs	r3, r3
 8015d36:	61a3      	str	r3, [r4, #24]
 8015d38:	6923      	ldr	r3, [r4, #16]
 8015d3a:	b943      	cbnz	r3, 8015d4e <__swsetup_r+0xc6>
 8015d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d40:	d1ba      	bne.n	8015cb8 <__swsetup_r+0x30>
 8015d42:	bd70      	pop	{r4, r5, r6, pc}
 8015d44:	0781      	lsls	r1, r0, #30
 8015d46:	bf58      	it	pl
 8015d48:	6963      	ldrpl	r3, [r4, #20]
 8015d4a:	60a3      	str	r3, [r4, #8]
 8015d4c:	e7f4      	b.n	8015d38 <__swsetup_r+0xb0>
 8015d4e:	2000      	movs	r0, #0
 8015d50:	e7f7      	b.n	8015d42 <__swsetup_r+0xba>
 8015d52:	bf00      	nop
 8015d54:	20000248 	.word	0x20000248
 8015d58:	08016eb4 	.word	0x08016eb4
 8015d5c:	08016ed4 	.word	0x08016ed4
 8015d60:	08016e94 	.word	0x08016e94

08015d64 <abort>:
 8015d64:	2006      	movs	r0, #6
 8015d66:	b508      	push	{r3, lr}
 8015d68:	f000 fa50 	bl	801620c <raise>
 8015d6c:	2001      	movs	r0, #1
 8015d6e:	f7ee fbf8 	bl	8004562 <_exit>
	...

08015d74 <__sflush_r>:
 8015d74:	898a      	ldrh	r2, [r1, #12]
 8015d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7a:	4605      	mov	r5, r0
 8015d7c:	0710      	lsls	r0, r2, #28
 8015d7e:	460c      	mov	r4, r1
 8015d80:	d458      	bmi.n	8015e34 <__sflush_r+0xc0>
 8015d82:	684b      	ldr	r3, [r1, #4]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	dc05      	bgt.n	8015d94 <__sflush_r+0x20>
 8015d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	dc02      	bgt.n	8015d94 <__sflush_r+0x20>
 8015d8e:	2000      	movs	r0, #0
 8015d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d96:	2e00      	cmp	r6, #0
 8015d98:	d0f9      	beq.n	8015d8e <__sflush_r+0x1a>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015da0:	682f      	ldr	r7, [r5, #0]
 8015da2:	602b      	str	r3, [r5, #0]
 8015da4:	d032      	beq.n	8015e0c <__sflush_r+0x98>
 8015da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015da8:	89a3      	ldrh	r3, [r4, #12]
 8015daa:	075a      	lsls	r2, r3, #29
 8015dac:	d505      	bpl.n	8015dba <__sflush_r+0x46>
 8015dae:	6863      	ldr	r3, [r4, #4]
 8015db0:	1ac0      	subs	r0, r0, r3
 8015db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015db4:	b10b      	cbz	r3, 8015dba <__sflush_r+0x46>
 8015db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015db8:	1ac0      	subs	r0, r0, r3
 8015dba:	2300      	movs	r3, #0
 8015dbc:	4602      	mov	r2, r0
 8015dbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	6a21      	ldr	r1, [r4, #32]
 8015dc4:	47b0      	blx	r6
 8015dc6:	1c43      	adds	r3, r0, #1
 8015dc8:	89a3      	ldrh	r3, [r4, #12]
 8015dca:	d106      	bne.n	8015dda <__sflush_r+0x66>
 8015dcc:	6829      	ldr	r1, [r5, #0]
 8015dce:	291d      	cmp	r1, #29
 8015dd0:	d82c      	bhi.n	8015e2c <__sflush_r+0xb8>
 8015dd2:	4a2a      	ldr	r2, [pc, #168]	; (8015e7c <__sflush_r+0x108>)
 8015dd4:	40ca      	lsrs	r2, r1
 8015dd6:	07d6      	lsls	r6, r2, #31
 8015dd8:	d528      	bpl.n	8015e2c <__sflush_r+0xb8>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	6062      	str	r2, [r4, #4]
 8015dde:	6922      	ldr	r2, [r4, #16]
 8015de0:	04d9      	lsls	r1, r3, #19
 8015de2:	6022      	str	r2, [r4, #0]
 8015de4:	d504      	bpl.n	8015df0 <__sflush_r+0x7c>
 8015de6:	1c42      	adds	r2, r0, #1
 8015de8:	d101      	bne.n	8015dee <__sflush_r+0x7a>
 8015dea:	682b      	ldr	r3, [r5, #0]
 8015dec:	b903      	cbnz	r3, 8015df0 <__sflush_r+0x7c>
 8015dee:	6560      	str	r0, [r4, #84]	; 0x54
 8015df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015df2:	602f      	str	r7, [r5, #0]
 8015df4:	2900      	cmp	r1, #0
 8015df6:	d0ca      	beq.n	8015d8e <__sflush_r+0x1a>
 8015df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015dfc:	4299      	cmp	r1, r3
 8015dfe:	d002      	beq.n	8015e06 <__sflush_r+0x92>
 8015e00:	4628      	mov	r0, r5
 8015e02:	f7fb feb9 	bl	8011b78 <_free_r>
 8015e06:	2000      	movs	r0, #0
 8015e08:	6360      	str	r0, [r4, #52]	; 0x34
 8015e0a:	e7c1      	b.n	8015d90 <__sflush_r+0x1c>
 8015e0c:	6a21      	ldr	r1, [r4, #32]
 8015e0e:	2301      	movs	r3, #1
 8015e10:	4628      	mov	r0, r5
 8015e12:	47b0      	blx	r6
 8015e14:	1c41      	adds	r1, r0, #1
 8015e16:	d1c7      	bne.n	8015da8 <__sflush_r+0x34>
 8015e18:	682b      	ldr	r3, [r5, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d0c4      	beq.n	8015da8 <__sflush_r+0x34>
 8015e1e:	2b1d      	cmp	r3, #29
 8015e20:	d001      	beq.n	8015e26 <__sflush_r+0xb2>
 8015e22:	2b16      	cmp	r3, #22
 8015e24:	d101      	bne.n	8015e2a <__sflush_r+0xb6>
 8015e26:	602f      	str	r7, [r5, #0]
 8015e28:	e7b1      	b.n	8015d8e <__sflush_r+0x1a>
 8015e2a:	89a3      	ldrh	r3, [r4, #12]
 8015e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e30:	81a3      	strh	r3, [r4, #12]
 8015e32:	e7ad      	b.n	8015d90 <__sflush_r+0x1c>
 8015e34:	690f      	ldr	r7, [r1, #16]
 8015e36:	2f00      	cmp	r7, #0
 8015e38:	d0a9      	beq.n	8015d8e <__sflush_r+0x1a>
 8015e3a:	0793      	lsls	r3, r2, #30
 8015e3c:	bf18      	it	ne
 8015e3e:	2300      	movne	r3, #0
 8015e40:	680e      	ldr	r6, [r1, #0]
 8015e42:	bf08      	it	eq
 8015e44:	694b      	ldreq	r3, [r1, #20]
 8015e46:	eba6 0807 	sub.w	r8, r6, r7
 8015e4a:	600f      	str	r7, [r1, #0]
 8015e4c:	608b      	str	r3, [r1, #8]
 8015e4e:	f1b8 0f00 	cmp.w	r8, #0
 8015e52:	dd9c      	ble.n	8015d8e <__sflush_r+0x1a>
 8015e54:	4643      	mov	r3, r8
 8015e56:	463a      	mov	r2, r7
 8015e58:	4628      	mov	r0, r5
 8015e5a:	6a21      	ldr	r1, [r4, #32]
 8015e5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e5e:	47b0      	blx	r6
 8015e60:	2800      	cmp	r0, #0
 8015e62:	dc06      	bgt.n	8015e72 <__sflush_r+0xfe>
 8015e64:	89a3      	ldrh	r3, [r4, #12]
 8015e66:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e6e:	81a3      	strh	r3, [r4, #12]
 8015e70:	e78e      	b.n	8015d90 <__sflush_r+0x1c>
 8015e72:	4407      	add	r7, r0
 8015e74:	eba8 0800 	sub.w	r8, r8, r0
 8015e78:	e7e9      	b.n	8015e4e <__sflush_r+0xda>
 8015e7a:	bf00      	nop
 8015e7c:	20400001 	.word	0x20400001

08015e80 <_fflush_r>:
 8015e80:	b538      	push	{r3, r4, r5, lr}
 8015e82:	690b      	ldr	r3, [r1, #16]
 8015e84:	4605      	mov	r5, r0
 8015e86:	460c      	mov	r4, r1
 8015e88:	b913      	cbnz	r3, 8015e90 <_fflush_r+0x10>
 8015e8a:	2500      	movs	r5, #0
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	bd38      	pop	{r3, r4, r5, pc}
 8015e90:	b118      	cbz	r0, 8015e9a <_fflush_r+0x1a>
 8015e92:	6983      	ldr	r3, [r0, #24]
 8015e94:	b90b      	cbnz	r3, 8015e9a <_fflush_r+0x1a>
 8015e96:	f000 f887 	bl	8015fa8 <__sinit>
 8015e9a:	4b14      	ldr	r3, [pc, #80]	; (8015eec <_fflush_r+0x6c>)
 8015e9c:	429c      	cmp	r4, r3
 8015e9e:	d11b      	bne.n	8015ed8 <_fflush_r+0x58>
 8015ea0:	686c      	ldr	r4, [r5, #4]
 8015ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d0ef      	beq.n	8015e8a <_fflush_r+0xa>
 8015eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eac:	07d0      	lsls	r0, r2, #31
 8015eae:	d404      	bmi.n	8015eba <_fflush_r+0x3a>
 8015eb0:	0599      	lsls	r1, r3, #22
 8015eb2:	d402      	bmi.n	8015eba <_fflush_r+0x3a>
 8015eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eb6:	f7ff fcfc 	bl	80158b2 <__retarget_lock_acquire_recursive>
 8015eba:	4628      	mov	r0, r5
 8015ebc:	4621      	mov	r1, r4
 8015ebe:	f7ff ff59 	bl	8015d74 <__sflush_r>
 8015ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ec4:	4605      	mov	r5, r0
 8015ec6:	07da      	lsls	r2, r3, #31
 8015ec8:	d4e0      	bmi.n	8015e8c <_fflush_r+0xc>
 8015eca:	89a3      	ldrh	r3, [r4, #12]
 8015ecc:	059b      	lsls	r3, r3, #22
 8015ece:	d4dd      	bmi.n	8015e8c <_fflush_r+0xc>
 8015ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ed2:	f7ff fcef 	bl	80158b4 <__retarget_lock_release_recursive>
 8015ed6:	e7d9      	b.n	8015e8c <_fflush_r+0xc>
 8015ed8:	4b05      	ldr	r3, [pc, #20]	; (8015ef0 <_fflush_r+0x70>)
 8015eda:	429c      	cmp	r4, r3
 8015edc:	d101      	bne.n	8015ee2 <_fflush_r+0x62>
 8015ede:	68ac      	ldr	r4, [r5, #8]
 8015ee0:	e7df      	b.n	8015ea2 <_fflush_r+0x22>
 8015ee2:	4b04      	ldr	r3, [pc, #16]	; (8015ef4 <_fflush_r+0x74>)
 8015ee4:	429c      	cmp	r4, r3
 8015ee6:	bf08      	it	eq
 8015ee8:	68ec      	ldreq	r4, [r5, #12]
 8015eea:	e7da      	b.n	8015ea2 <_fflush_r+0x22>
 8015eec:	08016eb4 	.word	0x08016eb4
 8015ef0:	08016ed4 	.word	0x08016ed4
 8015ef4:	08016e94 	.word	0x08016e94

08015ef8 <std>:
 8015ef8:	2300      	movs	r3, #0
 8015efa:	b510      	push	{r4, lr}
 8015efc:	4604      	mov	r4, r0
 8015efe:	e9c0 3300 	strd	r3, r3, [r0]
 8015f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f06:	6083      	str	r3, [r0, #8]
 8015f08:	8181      	strh	r1, [r0, #12]
 8015f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8015f0c:	81c2      	strh	r2, [r0, #14]
 8015f0e:	6183      	str	r3, [r0, #24]
 8015f10:	4619      	mov	r1, r3
 8015f12:	2208      	movs	r2, #8
 8015f14:	305c      	adds	r0, #92	; 0x5c
 8015f16:	f7fb fe27 	bl	8011b68 <memset>
 8015f1a:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <std+0x38>)
 8015f1c:	6224      	str	r4, [r4, #32]
 8015f1e:	6263      	str	r3, [r4, #36]	; 0x24
 8015f20:	4b04      	ldr	r3, [pc, #16]	; (8015f34 <std+0x3c>)
 8015f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f24:	4b04      	ldr	r3, [pc, #16]	; (8015f38 <std+0x40>)
 8015f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f28:	4b04      	ldr	r3, [pc, #16]	; (8015f3c <std+0x44>)
 8015f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8015f2c:	bd10      	pop	{r4, pc}
 8015f2e:	bf00      	nop
 8015f30:	08016245 	.word	0x08016245
 8015f34:	08016267 	.word	0x08016267
 8015f38:	0801629f 	.word	0x0801629f
 8015f3c:	080162c3 	.word	0x080162c3

08015f40 <_cleanup_r>:
 8015f40:	4901      	ldr	r1, [pc, #4]	; (8015f48 <_cleanup_r+0x8>)
 8015f42:	f000 b8af 	b.w	80160a4 <_fwalk_reent>
 8015f46:	bf00      	nop
 8015f48:	08015e81 	.word	0x08015e81

08015f4c <__sfmoreglue>:
 8015f4c:	b570      	push	{r4, r5, r6, lr}
 8015f4e:	2568      	movs	r5, #104	; 0x68
 8015f50:	1e4a      	subs	r2, r1, #1
 8015f52:	4355      	muls	r5, r2
 8015f54:	460e      	mov	r6, r1
 8015f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f5a:	f7fb fe59 	bl	8011c10 <_malloc_r>
 8015f5e:	4604      	mov	r4, r0
 8015f60:	b140      	cbz	r0, 8015f74 <__sfmoreglue+0x28>
 8015f62:	2100      	movs	r1, #0
 8015f64:	e9c0 1600 	strd	r1, r6, [r0]
 8015f68:	300c      	adds	r0, #12
 8015f6a:	60a0      	str	r0, [r4, #8]
 8015f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f70:	f7fb fdfa 	bl	8011b68 <memset>
 8015f74:	4620      	mov	r0, r4
 8015f76:	bd70      	pop	{r4, r5, r6, pc}

08015f78 <__sfp_lock_acquire>:
 8015f78:	4801      	ldr	r0, [pc, #4]	; (8015f80 <__sfp_lock_acquire+0x8>)
 8015f7a:	f7ff bc9a 	b.w	80158b2 <__retarget_lock_acquire_recursive>
 8015f7e:	bf00      	nop
 8015f80:	20008278 	.word	0x20008278

08015f84 <__sfp_lock_release>:
 8015f84:	4801      	ldr	r0, [pc, #4]	; (8015f8c <__sfp_lock_release+0x8>)
 8015f86:	f7ff bc95 	b.w	80158b4 <__retarget_lock_release_recursive>
 8015f8a:	bf00      	nop
 8015f8c:	20008278 	.word	0x20008278

08015f90 <__sinit_lock_acquire>:
 8015f90:	4801      	ldr	r0, [pc, #4]	; (8015f98 <__sinit_lock_acquire+0x8>)
 8015f92:	f7ff bc8e 	b.w	80158b2 <__retarget_lock_acquire_recursive>
 8015f96:	bf00      	nop
 8015f98:	20008273 	.word	0x20008273

08015f9c <__sinit_lock_release>:
 8015f9c:	4801      	ldr	r0, [pc, #4]	; (8015fa4 <__sinit_lock_release+0x8>)
 8015f9e:	f7ff bc89 	b.w	80158b4 <__retarget_lock_release_recursive>
 8015fa2:	bf00      	nop
 8015fa4:	20008273 	.word	0x20008273

08015fa8 <__sinit>:
 8015fa8:	b510      	push	{r4, lr}
 8015faa:	4604      	mov	r4, r0
 8015fac:	f7ff fff0 	bl	8015f90 <__sinit_lock_acquire>
 8015fb0:	69a3      	ldr	r3, [r4, #24]
 8015fb2:	b11b      	cbz	r3, 8015fbc <__sinit+0x14>
 8015fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fb8:	f7ff bff0 	b.w	8015f9c <__sinit_lock_release>
 8015fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8015fc2:	4b13      	ldr	r3, [pc, #76]	; (8016010 <__sinit+0x68>)
 8015fc4:	4a13      	ldr	r2, [pc, #76]	; (8016014 <__sinit+0x6c>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fca:	42a3      	cmp	r3, r4
 8015fcc:	bf08      	it	eq
 8015fce:	2301      	moveq	r3, #1
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	bf08      	it	eq
 8015fd4:	61a3      	streq	r3, [r4, #24]
 8015fd6:	f000 f81f 	bl	8016018 <__sfp>
 8015fda:	6060      	str	r0, [r4, #4]
 8015fdc:	4620      	mov	r0, r4
 8015fde:	f000 f81b 	bl	8016018 <__sfp>
 8015fe2:	60a0      	str	r0, [r4, #8]
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f000 f817 	bl	8016018 <__sfp>
 8015fea:	2200      	movs	r2, #0
 8015fec:	2104      	movs	r1, #4
 8015fee:	60e0      	str	r0, [r4, #12]
 8015ff0:	6860      	ldr	r0, [r4, #4]
 8015ff2:	f7ff ff81 	bl	8015ef8 <std>
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	2109      	movs	r1, #9
 8015ffa:	68a0      	ldr	r0, [r4, #8]
 8015ffc:	f7ff ff7c 	bl	8015ef8 <std>
 8016000:	2202      	movs	r2, #2
 8016002:	2112      	movs	r1, #18
 8016004:	68e0      	ldr	r0, [r4, #12]
 8016006:	f7ff ff77 	bl	8015ef8 <std>
 801600a:	2301      	movs	r3, #1
 801600c:	61a3      	str	r3, [r4, #24]
 801600e:	e7d1      	b.n	8015fb4 <__sinit+0xc>
 8016010:	08016a40 	.word	0x08016a40
 8016014:	08015f41 	.word	0x08015f41

08016018 <__sfp>:
 8016018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601a:	4607      	mov	r7, r0
 801601c:	f7ff ffac 	bl	8015f78 <__sfp_lock_acquire>
 8016020:	4b1e      	ldr	r3, [pc, #120]	; (801609c <__sfp+0x84>)
 8016022:	681e      	ldr	r6, [r3, #0]
 8016024:	69b3      	ldr	r3, [r6, #24]
 8016026:	b913      	cbnz	r3, 801602e <__sfp+0x16>
 8016028:	4630      	mov	r0, r6
 801602a:	f7ff ffbd 	bl	8015fa8 <__sinit>
 801602e:	3648      	adds	r6, #72	; 0x48
 8016030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016034:	3b01      	subs	r3, #1
 8016036:	d503      	bpl.n	8016040 <__sfp+0x28>
 8016038:	6833      	ldr	r3, [r6, #0]
 801603a:	b30b      	cbz	r3, 8016080 <__sfp+0x68>
 801603c:	6836      	ldr	r6, [r6, #0]
 801603e:	e7f7      	b.n	8016030 <__sfp+0x18>
 8016040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016044:	b9d5      	cbnz	r5, 801607c <__sfp+0x64>
 8016046:	4b16      	ldr	r3, [pc, #88]	; (80160a0 <__sfp+0x88>)
 8016048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801604c:	60e3      	str	r3, [r4, #12]
 801604e:	6665      	str	r5, [r4, #100]	; 0x64
 8016050:	f7ff fc2e 	bl	80158b0 <__retarget_lock_init_recursive>
 8016054:	f7ff ff96 	bl	8015f84 <__sfp_lock_release>
 8016058:	2208      	movs	r2, #8
 801605a:	4629      	mov	r1, r5
 801605c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016064:	6025      	str	r5, [r4, #0]
 8016066:	61a5      	str	r5, [r4, #24]
 8016068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801606c:	f7fb fd7c 	bl	8011b68 <memset>
 8016070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016078:	4620      	mov	r0, r4
 801607a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801607c:	3468      	adds	r4, #104	; 0x68
 801607e:	e7d9      	b.n	8016034 <__sfp+0x1c>
 8016080:	2104      	movs	r1, #4
 8016082:	4638      	mov	r0, r7
 8016084:	f7ff ff62 	bl	8015f4c <__sfmoreglue>
 8016088:	4604      	mov	r4, r0
 801608a:	6030      	str	r0, [r6, #0]
 801608c:	2800      	cmp	r0, #0
 801608e:	d1d5      	bne.n	801603c <__sfp+0x24>
 8016090:	f7ff ff78 	bl	8015f84 <__sfp_lock_release>
 8016094:	230c      	movs	r3, #12
 8016096:	603b      	str	r3, [r7, #0]
 8016098:	e7ee      	b.n	8016078 <__sfp+0x60>
 801609a:	bf00      	nop
 801609c:	08016a40 	.word	0x08016a40
 80160a0:	ffff0001 	.word	0xffff0001

080160a4 <_fwalk_reent>:
 80160a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a8:	4606      	mov	r6, r0
 80160aa:	4688      	mov	r8, r1
 80160ac:	2700      	movs	r7, #0
 80160ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160b6:	f1b9 0901 	subs.w	r9, r9, #1
 80160ba:	d505      	bpl.n	80160c8 <_fwalk_reent+0x24>
 80160bc:	6824      	ldr	r4, [r4, #0]
 80160be:	2c00      	cmp	r4, #0
 80160c0:	d1f7      	bne.n	80160b2 <_fwalk_reent+0xe>
 80160c2:	4638      	mov	r0, r7
 80160c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160c8:	89ab      	ldrh	r3, [r5, #12]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d907      	bls.n	80160de <_fwalk_reent+0x3a>
 80160ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160d2:	3301      	adds	r3, #1
 80160d4:	d003      	beq.n	80160de <_fwalk_reent+0x3a>
 80160d6:	4629      	mov	r1, r5
 80160d8:	4630      	mov	r0, r6
 80160da:	47c0      	blx	r8
 80160dc:	4307      	orrs	r7, r0
 80160de:	3568      	adds	r5, #104	; 0x68
 80160e0:	e7e9      	b.n	80160b6 <_fwalk_reent+0x12>

080160e2 <__swhatbuf_r>:
 80160e2:	b570      	push	{r4, r5, r6, lr}
 80160e4:	460e      	mov	r6, r1
 80160e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ea:	4614      	mov	r4, r2
 80160ec:	2900      	cmp	r1, #0
 80160ee:	461d      	mov	r5, r3
 80160f0:	b096      	sub	sp, #88	; 0x58
 80160f2:	da07      	bge.n	8016104 <__swhatbuf_r+0x22>
 80160f4:	2300      	movs	r3, #0
 80160f6:	602b      	str	r3, [r5, #0]
 80160f8:	89b3      	ldrh	r3, [r6, #12]
 80160fa:	061a      	lsls	r2, r3, #24
 80160fc:	d410      	bmi.n	8016120 <__swhatbuf_r+0x3e>
 80160fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016102:	e00e      	b.n	8016122 <__swhatbuf_r+0x40>
 8016104:	466a      	mov	r2, sp
 8016106:	f000 f903 	bl	8016310 <_fstat_r>
 801610a:	2800      	cmp	r0, #0
 801610c:	dbf2      	blt.n	80160f4 <__swhatbuf_r+0x12>
 801610e:	9a01      	ldr	r2, [sp, #4]
 8016110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016118:	425a      	negs	r2, r3
 801611a:	415a      	adcs	r2, r3
 801611c:	602a      	str	r2, [r5, #0]
 801611e:	e7ee      	b.n	80160fe <__swhatbuf_r+0x1c>
 8016120:	2340      	movs	r3, #64	; 0x40
 8016122:	2000      	movs	r0, #0
 8016124:	6023      	str	r3, [r4, #0]
 8016126:	b016      	add	sp, #88	; 0x58
 8016128:	bd70      	pop	{r4, r5, r6, pc}
	...

0801612c <__smakebuf_r>:
 801612c:	898b      	ldrh	r3, [r1, #12]
 801612e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016130:	079d      	lsls	r5, r3, #30
 8016132:	4606      	mov	r6, r0
 8016134:	460c      	mov	r4, r1
 8016136:	d507      	bpl.n	8016148 <__smakebuf_r+0x1c>
 8016138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801613c:	6023      	str	r3, [r4, #0]
 801613e:	6123      	str	r3, [r4, #16]
 8016140:	2301      	movs	r3, #1
 8016142:	6163      	str	r3, [r4, #20]
 8016144:	b002      	add	sp, #8
 8016146:	bd70      	pop	{r4, r5, r6, pc}
 8016148:	466a      	mov	r2, sp
 801614a:	ab01      	add	r3, sp, #4
 801614c:	f7ff ffc9 	bl	80160e2 <__swhatbuf_r>
 8016150:	9900      	ldr	r1, [sp, #0]
 8016152:	4605      	mov	r5, r0
 8016154:	4630      	mov	r0, r6
 8016156:	f7fb fd5b 	bl	8011c10 <_malloc_r>
 801615a:	b948      	cbnz	r0, 8016170 <__smakebuf_r+0x44>
 801615c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016160:	059a      	lsls	r2, r3, #22
 8016162:	d4ef      	bmi.n	8016144 <__smakebuf_r+0x18>
 8016164:	f023 0303 	bic.w	r3, r3, #3
 8016168:	f043 0302 	orr.w	r3, r3, #2
 801616c:	81a3      	strh	r3, [r4, #12]
 801616e:	e7e3      	b.n	8016138 <__smakebuf_r+0xc>
 8016170:	4b0d      	ldr	r3, [pc, #52]	; (80161a8 <__smakebuf_r+0x7c>)
 8016172:	62b3      	str	r3, [r6, #40]	; 0x28
 8016174:	89a3      	ldrh	r3, [r4, #12]
 8016176:	6020      	str	r0, [r4, #0]
 8016178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801617c:	81a3      	strh	r3, [r4, #12]
 801617e:	9b00      	ldr	r3, [sp, #0]
 8016180:	6120      	str	r0, [r4, #16]
 8016182:	6163      	str	r3, [r4, #20]
 8016184:	9b01      	ldr	r3, [sp, #4]
 8016186:	b15b      	cbz	r3, 80161a0 <__smakebuf_r+0x74>
 8016188:	4630      	mov	r0, r6
 801618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801618e:	f000 f8d1 	bl	8016334 <_isatty_r>
 8016192:	b128      	cbz	r0, 80161a0 <__smakebuf_r+0x74>
 8016194:	89a3      	ldrh	r3, [r4, #12]
 8016196:	f023 0303 	bic.w	r3, r3, #3
 801619a:	f043 0301 	orr.w	r3, r3, #1
 801619e:	81a3      	strh	r3, [r4, #12]
 80161a0:	89a0      	ldrh	r0, [r4, #12]
 80161a2:	4305      	orrs	r5, r0
 80161a4:	81a5      	strh	r5, [r4, #12]
 80161a6:	e7cd      	b.n	8016144 <__smakebuf_r+0x18>
 80161a8:	08015f41 	.word	0x08015f41

080161ac <_malloc_usable_size_r>:
 80161ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161b0:	1f18      	subs	r0, r3, #4
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	bfbc      	itt	lt
 80161b6:	580b      	ldrlt	r3, [r1, r0]
 80161b8:	18c0      	addlt	r0, r0, r3
 80161ba:	4770      	bx	lr

080161bc <_raise_r>:
 80161bc:	291f      	cmp	r1, #31
 80161be:	b538      	push	{r3, r4, r5, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	460d      	mov	r5, r1
 80161c4:	d904      	bls.n	80161d0 <_raise_r+0x14>
 80161c6:	2316      	movs	r3, #22
 80161c8:	6003      	str	r3, [r0, #0]
 80161ca:	f04f 30ff 	mov.w	r0, #4294967295
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80161d2:	b112      	cbz	r2, 80161da <_raise_r+0x1e>
 80161d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80161d8:	b94b      	cbnz	r3, 80161ee <_raise_r+0x32>
 80161da:	4620      	mov	r0, r4
 80161dc:	f000 f830 	bl	8016240 <_getpid_r>
 80161e0:	462a      	mov	r2, r5
 80161e2:	4601      	mov	r1, r0
 80161e4:	4620      	mov	r0, r4
 80161e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161ea:	f000 b817 	b.w	801621c <_kill_r>
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	d00a      	beq.n	8016208 <_raise_r+0x4c>
 80161f2:	1c59      	adds	r1, r3, #1
 80161f4:	d103      	bne.n	80161fe <_raise_r+0x42>
 80161f6:	2316      	movs	r3, #22
 80161f8:	6003      	str	r3, [r0, #0]
 80161fa:	2001      	movs	r0, #1
 80161fc:	e7e7      	b.n	80161ce <_raise_r+0x12>
 80161fe:	2400      	movs	r4, #0
 8016200:	4628      	mov	r0, r5
 8016202:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016206:	4798      	blx	r3
 8016208:	2000      	movs	r0, #0
 801620a:	e7e0      	b.n	80161ce <_raise_r+0x12>

0801620c <raise>:
 801620c:	4b02      	ldr	r3, [pc, #8]	; (8016218 <raise+0xc>)
 801620e:	4601      	mov	r1, r0
 8016210:	6818      	ldr	r0, [r3, #0]
 8016212:	f7ff bfd3 	b.w	80161bc <_raise_r>
 8016216:	bf00      	nop
 8016218:	20000248 	.word	0x20000248

0801621c <_kill_r>:
 801621c:	b538      	push	{r3, r4, r5, lr}
 801621e:	2300      	movs	r3, #0
 8016220:	4d06      	ldr	r5, [pc, #24]	; (801623c <_kill_r+0x20>)
 8016222:	4604      	mov	r4, r0
 8016224:	4608      	mov	r0, r1
 8016226:	4611      	mov	r1, r2
 8016228:	602b      	str	r3, [r5, #0]
 801622a:	f7ee f98a 	bl	8004542 <_kill>
 801622e:	1c43      	adds	r3, r0, #1
 8016230:	d102      	bne.n	8016238 <_kill_r+0x1c>
 8016232:	682b      	ldr	r3, [r5, #0]
 8016234:	b103      	cbz	r3, 8016238 <_kill_r+0x1c>
 8016236:	6023      	str	r3, [r4, #0]
 8016238:	bd38      	pop	{r3, r4, r5, pc}
 801623a:	bf00      	nop
 801623c:	2000826c 	.word	0x2000826c

08016240 <_getpid_r>:
 8016240:	f7ee b978 	b.w	8004534 <_getpid>

08016244 <__sread>:
 8016244:	b510      	push	{r4, lr}
 8016246:	460c      	mov	r4, r1
 8016248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801624c:	f000 f894 	bl	8016378 <_read_r>
 8016250:	2800      	cmp	r0, #0
 8016252:	bfab      	itete	ge
 8016254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016256:	89a3      	ldrhlt	r3, [r4, #12]
 8016258:	181b      	addge	r3, r3, r0
 801625a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801625e:	bfac      	ite	ge
 8016260:	6563      	strge	r3, [r4, #84]	; 0x54
 8016262:	81a3      	strhlt	r3, [r4, #12]
 8016264:	bd10      	pop	{r4, pc}

08016266 <__swrite>:
 8016266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801626a:	461f      	mov	r7, r3
 801626c:	898b      	ldrh	r3, [r1, #12]
 801626e:	4605      	mov	r5, r0
 8016270:	05db      	lsls	r3, r3, #23
 8016272:	460c      	mov	r4, r1
 8016274:	4616      	mov	r6, r2
 8016276:	d505      	bpl.n	8016284 <__swrite+0x1e>
 8016278:	2302      	movs	r3, #2
 801627a:	2200      	movs	r2, #0
 801627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016280:	f000 f868 	bl	8016354 <_lseek_r>
 8016284:	89a3      	ldrh	r3, [r4, #12]
 8016286:	4632      	mov	r2, r6
 8016288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801628c:	81a3      	strh	r3, [r4, #12]
 801628e:	4628      	mov	r0, r5
 8016290:	463b      	mov	r3, r7
 8016292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801629a:	f000 b817 	b.w	80162cc <_write_r>

0801629e <__sseek>:
 801629e:	b510      	push	{r4, lr}
 80162a0:	460c      	mov	r4, r1
 80162a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162a6:	f000 f855 	bl	8016354 <_lseek_r>
 80162aa:	1c43      	adds	r3, r0, #1
 80162ac:	89a3      	ldrh	r3, [r4, #12]
 80162ae:	bf15      	itete	ne
 80162b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80162b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162ba:	81a3      	strheq	r3, [r4, #12]
 80162bc:	bf18      	it	ne
 80162be:	81a3      	strhne	r3, [r4, #12]
 80162c0:	bd10      	pop	{r4, pc}

080162c2 <__sclose>:
 80162c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162c6:	f000 b813 	b.w	80162f0 <_close_r>
	...

080162cc <_write_r>:
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4604      	mov	r4, r0
 80162d0:	4608      	mov	r0, r1
 80162d2:	4611      	mov	r1, r2
 80162d4:	2200      	movs	r2, #0
 80162d6:	4d05      	ldr	r5, [pc, #20]	; (80162ec <_write_r+0x20>)
 80162d8:	602a      	str	r2, [r5, #0]
 80162da:	461a      	mov	r2, r3
 80162dc:	f7ee f968 	bl	80045b0 <_write>
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	d102      	bne.n	80162ea <_write_r+0x1e>
 80162e4:	682b      	ldr	r3, [r5, #0]
 80162e6:	b103      	cbz	r3, 80162ea <_write_r+0x1e>
 80162e8:	6023      	str	r3, [r4, #0]
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
 80162ec:	2000826c 	.word	0x2000826c

080162f0 <_close_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	2300      	movs	r3, #0
 80162f4:	4d05      	ldr	r5, [pc, #20]	; (801630c <_close_r+0x1c>)
 80162f6:	4604      	mov	r4, r0
 80162f8:	4608      	mov	r0, r1
 80162fa:	602b      	str	r3, [r5, #0]
 80162fc:	f7ee f974 	bl	80045e8 <_close>
 8016300:	1c43      	adds	r3, r0, #1
 8016302:	d102      	bne.n	801630a <_close_r+0x1a>
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	b103      	cbz	r3, 801630a <_close_r+0x1a>
 8016308:	6023      	str	r3, [r4, #0]
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	2000826c 	.word	0x2000826c

08016310 <_fstat_r>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	2300      	movs	r3, #0
 8016314:	4d06      	ldr	r5, [pc, #24]	; (8016330 <_fstat_r+0x20>)
 8016316:	4604      	mov	r4, r0
 8016318:	4608      	mov	r0, r1
 801631a:	4611      	mov	r1, r2
 801631c:	602b      	str	r3, [r5, #0]
 801631e:	f7ee f96e 	bl	80045fe <_fstat>
 8016322:	1c43      	adds	r3, r0, #1
 8016324:	d102      	bne.n	801632c <_fstat_r+0x1c>
 8016326:	682b      	ldr	r3, [r5, #0]
 8016328:	b103      	cbz	r3, 801632c <_fstat_r+0x1c>
 801632a:	6023      	str	r3, [r4, #0]
 801632c:	bd38      	pop	{r3, r4, r5, pc}
 801632e:	bf00      	nop
 8016330:	2000826c 	.word	0x2000826c

08016334 <_isatty_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	2300      	movs	r3, #0
 8016338:	4d05      	ldr	r5, [pc, #20]	; (8016350 <_isatty_r+0x1c>)
 801633a:	4604      	mov	r4, r0
 801633c:	4608      	mov	r0, r1
 801633e:	602b      	str	r3, [r5, #0]
 8016340:	f7ee f96c 	bl	800461c <_isatty>
 8016344:	1c43      	adds	r3, r0, #1
 8016346:	d102      	bne.n	801634e <_isatty_r+0x1a>
 8016348:	682b      	ldr	r3, [r5, #0]
 801634a:	b103      	cbz	r3, 801634e <_isatty_r+0x1a>
 801634c:	6023      	str	r3, [r4, #0]
 801634e:	bd38      	pop	{r3, r4, r5, pc}
 8016350:	2000826c 	.word	0x2000826c

08016354 <_lseek_r>:
 8016354:	b538      	push	{r3, r4, r5, lr}
 8016356:	4604      	mov	r4, r0
 8016358:	4608      	mov	r0, r1
 801635a:	4611      	mov	r1, r2
 801635c:	2200      	movs	r2, #0
 801635e:	4d05      	ldr	r5, [pc, #20]	; (8016374 <_lseek_r+0x20>)
 8016360:	602a      	str	r2, [r5, #0]
 8016362:	461a      	mov	r2, r3
 8016364:	f7ee f964 	bl	8004630 <_lseek>
 8016368:	1c43      	adds	r3, r0, #1
 801636a:	d102      	bne.n	8016372 <_lseek_r+0x1e>
 801636c:	682b      	ldr	r3, [r5, #0]
 801636e:	b103      	cbz	r3, 8016372 <_lseek_r+0x1e>
 8016370:	6023      	str	r3, [r4, #0]
 8016372:	bd38      	pop	{r3, r4, r5, pc}
 8016374:	2000826c 	.word	0x2000826c

08016378 <_read_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4604      	mov	r4, r0
 801637c:	4608      	mov	r0, r1
 801637e:	4611      	mov	r1, r2
 8016380:	2200      	movs	r2, #0
 8016382:	4d05      	ldr	r5, [pc, #20]	; (8016398 <_read_r+0x20>)
 8016384:	602a      	str	r2, [r5, #0]
 8016386:	461a      	mov	r2, r3
 8016388:	f7ee f8f5 	bl	8004576 <_read>
 801638c:	1c43      	adds	r3, r0, #1
 801638e:	d102      	bne.n	8016396 <_read_r+0x1e>
 8016390:	682b      	ldr	r3, [r5, #0]
 8016392:	b103      	cbz	r3, 8016396 <_read_r+0x1e>
 8016394:	6023      	str	r3, [r4, #0]
 8016396:	bd38      	pop	{r3, r4, r5, pc}
 8016398:	2000826c 	.word	0x2000826c

0801639c <_init>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	bf00      	nop
 80163a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163a2:	bc08      	pop	{r3}
 80163a4:	469e      	mov	lr, r3
 80163a6:	4770      	bx	lr

080163a8 <_fini>:
 80163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163aa:	bf00      	nop
 80163ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163ae:	bc08      	pop	{r3}
 80163b0:	469e      	mov	lr, r3
 80163b2:	4770      	bx	lr
